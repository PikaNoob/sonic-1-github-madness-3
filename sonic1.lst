00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            		include "MapMacros.asm"
00000000 =00000001                  SonicMappingsVer = 1
00000000 =00000001                  SonicDplcVer = 1
00000000                            
00000000                            ; macro to declare a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTable macro
00000000                            ;@current_mappings_table = *
00000000                            ;	endm
00000000                            
00000000 =00000005                  MappingSize		= 5
00000000 =00000001                  MappingHeaderSize	= 1
00000000                            
00000000                            ; macro to declare an entry in a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTableEntry macro ptr
00000000                            ;	dc.ATTRIBUTE ptr-.current_mappings_table
00000000                            ;	endm
00000000                            
00000000                            ;spriteHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicMappingsVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	elseif SonicMappingsVer=4
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / MappingSize)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            spritePiece macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(((tile)>>1)|((tile)&$8000))
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            spritePiece2P macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri,tile2,xflip2,yflip2,pal2,pri2
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri2&1)<<15)|((pal2&3)<<13)|((yflip2&1)<<12)|((xflip2&1)<<11))+(tile2)
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ;dplcHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicDplcVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	elseif SonicDplcVer=3
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / 2)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            dplcEntry macro tiles,offset
00000000                            	if SonicDplcVer=3
00000000                            	dc.w	((offset&$FFF)<<4)|((tiles-1)&$F)
00000000                            	elseif SonicDplcVer=4
00000000                            	dc.w	(((tiles-1)&$F)<<12)|((offset&$FFF)<<4)
00000000                            	else
00000000                            	dc.w	(((tiles-1)&$F)<<12)|(offset&$FFF)
00000000                            	endif
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 50FF FE00 0000 0000 0000+  Vectors:	dc.l 'P'<<24|$FFFE00,		'O'<<24|EntryPoint,	'Y'<<24|BusError,	'S'<<24|AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l 'U'<<24|IllegalInstr,	'F'<<24|ZeroDivide,	'O'<<24|ChkInstr,	'K'<<24|TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l 'L'<<24|PrivilegeViol,	'F'<<24|Trace,		'U'<<24|Line1010Emu,	'I'<<24|Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l 'L'<<24|ErrorExcept,	' '<<24|ErrorExcept,	'R'<<24|ErrorExcept,	'N'<<24|ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ' '<<24|ErrorExcept,	' '<<24|ErrorExcept,	' '<<24|ErrorExcept,	' '<<24|'H'<<24|ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l 'B'<<24|ErrorExcept,	'O'<<24|ErrorExcept,	'I'<<24|ErrorExcept,	'L'<<24|ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l 'H'<<24|ErrorExcept,	'I'<<24|ErrorTrap,	'M'<<24|ErrorTrap,	' '<<24|ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l ' '<<24|PalToCRAM,		PalToCRAM,		' '<<24|vBlankRoutine,	vBlankRoutine
00000080 5768 6174 2069 7320 6120+  		dc.b 'What is a hex editor? A miserable little detector of secrets!   But enough talk,fuck off you!'
000000DD 2020 2020 2020 2020 2020+  		dcb.b $100-*,' '
00000100 2053 4547 4141 4141 4141+  Console:	dc.b ' SEGAAAAAAAAAAAA' ; NOTE: " SEGA" is valid for the TMSS, but not for some other stuff, namely the game genie
00000110 4141 4141 4141 4141 4141+  Date:		dc.b 'AAAAAAAAAAAAAAAA'
00000120 4966 2079 6F75 2063 616E+  Title_Local:	dc.b 'If you can see this, your emulator is homoerotic' ; Domestic name
00000150                            		dcb.b $150-*,' '
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood'
0000017E 2020                       		dcb.b $180-*,' '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'	; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A4A 4A4A 4A4A 4A4A 4A4A+  		dcb.b $1A0-*,'J'	; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 6964 6B20 6920 7370 656E+  Notes:		dc.b 'idk i spent all my  mental budget on the other stuff'
000001F0                            		dcb.b $1F0-*,' '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            	even
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330 1039 00A1 0001             		move.b	($A10001).l,d0
00000336 0200 00C0                  		andi.b	#$C0,d0
0000033A 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000033E                            GameInit:
0000033E 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000344 7E00                       		moveq	#0,d7
00000346 3C3C 3F7F                  		move.w	#$3F7F,d6
0000034A                            
0000034A                            GameClrRAM:
0000034A 2CC7                       		move.l	d7,(a6)+
0000034C 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000350                            
00000350 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000356 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
0000035E                            
0000035E 6100 0000                  		bsr.w	VDPSetupGame
00000362 6100 0000                  		bsr.w	SoundDriverLoad
00000366 6100 0000                  		bsr.w	JoypadInit
0000036A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000370                            
00000370 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w	; has checksum routine already run?
00000378 6700 0000                  		beq.w	@nosplashscreens	; if yes, branch
0000037C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w	; set flag so checksum won't be run again
00000384 1039 00A1 0001             		move.b	($A10001).l,d0
0000038A 0240 000F                  		and.w	#$F,d0
0000038E 6700                       		beq.s	@notmss
00000390 4EB9 0000 0000             		jsr	GM_AntiTMSS
00000396                            @notmss:
00000396                            @nosplashscreens:
00000396                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000396                            
00000396                            MainGameLoop:
00000396 707E                       		moveq	#$7E,d0
00000398 C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
0000039C 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003A0 60F4                       		bra.s	MainGameLoop
000003A2                            ; ===========================================================================
000003A2                            ; ---------------------------------------------------------------------------
000003A2                            ; Main game mode array
000003A2                            ; ---------------------------------------------------------------------------
000003A2                            
000003A2                            GameModeArray:
000003A2 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	Level	; Normal Level ($0C)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003B6                            ; ===========================================================================
000003B6 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003BA                            ; ===========================================================================
000003BA 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003BE                            ; ===========================================================================
000003BE 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003C2                            ; ===========================================================================
000003C2 6000 0000                  		bra.w	jmpto_Minecraft	; Minecraft ($20)
000003C6                            ; ===========================================================================
000003C6 6000 0000                  		bra.w	jmpto_BeeBush   ; BeeBush ($24)	
000003CA                            ; ===========================================================================
000003CA                            ; uuuuuuuuuuuuuuuuuuuuuuuuuuuuu
000003CA                            
000003CA                            jmpto_Minecraft:
000003CA 4EF9 0000 0000             		jmp     Minecraft
000003D0                            
000003D0                            jmpto_BeeBush:
000003D0 4EF9 0000 0000             		jmp     GM_BEEBUSH
000003D6                            
000003D6                            
000003D6                            CheckSumError:
000003D6 6100 0000                  		bsr.w	VDPSetupGame
000003DA 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003E4 7E3F                       		moveq	#$3F,d7
000003E6                            
000003E6                            CheckSum_Red:
000003E6 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003EE 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003F2                            
000003F2                            CheckSum_Loop:
000003F2 60FE                       		bra.s	CheckSum_Loop
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            BusError:
000003F4 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_43A
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            AddressError:
000003FC 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
00000402 6000                       		bra.s	loc_43A
00000404                            ; ===========================================================================
00000404                            
00000404                            IllegalInstr:
00000404 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
0000040A 54AF 0002                  		addq.l	#2,2(sp)
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            ZeroDivide:
00000410 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            ChkInstr:
00000418 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
0000041E 6000                       		bra.s	loc_462
00000420                            ; ===========================================================================
00000420                            
00000420                            TrapvInstr:
00000420 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000426 6000                       		bra.s	loc_462
00000428                            ; ===========================================================================
00000428                            
00000428                            PrivilegeViol:
00000428 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
0000042E 6000                       		bra.s	loc_462
00000430                            ; ===========================================================================
00000430                            
00000430                            Trace:
00000430 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000436 6000                       		bra.s	loc_462
00000438                            ; ===========================================================================
00000438                            
00000438                            Line1010Emu:
00000438 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
0000043E 54AF 0002                  		addq.l	#2,2(sp)
00000442 6000                       		bra.s	loc_462
00000444                            ; ===========================================================================
00000444                            
00000444                            Line1111Emu:
00000444 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000044A 54AF 0002                  		addq.l	#2,2(sp)
0000044E 6000                       		bra.s	loc_462
00000450                            ; ===========================================================================
00000450                            
00000450                            ErrorExcept:
00000450 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000456 6000                       		bra.s	loc_462
00000458                            ; ===========================================================================
00000458                            
00000458                            loc_43A:
00000458 46FC 2700                  		move	#$2700,sr
0000045C 544F                       		addq.w	#2,sp
0000045E 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000462 544F                       		addq.w	#2,sp
00000464 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046A 6100 0000                  		bsr.w	ShowErrorMsg
0000046E 202F 0002                  		move.l	2(sp),d0
00000472 6100 0000                  		bsr.w	sub_5BA
00000476 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000047A 6100 0000                  		bsr.w	sub_5BA
0000047E 6000                       		bra.s	loc_478
00000480                            ; ===========================================================================
00000480                            
00000480                            loc_462:
00000480 46FC 2700                  		move	#$2700,sr
00000484 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000048A 6100 0000                  		bsr.w	ShowErrorMsg
0000048E 202F 0002                  		move.l	2(sp),d0
00000492 6100 0000                  		bsr.w	sub_5BA
00000496                            
00000496                            loc_478:
00000496 6100 0000                  		bsr.w	ErrorWaitForC
0000049A 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000004A0 46FC 2300                  		move	#$2300,sr
000004A4 4E73                       		rte	
000004A6                            
000004A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000004A6                            
000004A6                            
000004A6                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000004A6 4DF9 00C0 0000             		lea	($C00000).l,a6
000004AC 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004B6 41F9 0000 0000             		lea	(Art_Text).l,a0
000004BC 323C 027F                  		move.w	#$27F,d1
000004C0                            
000004C0                            Error_LoadGfx:
000004C0 3C98                       		move.w	(a0)+,(a6)
000004C2 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004C6 7000                       		moveq	#0,d0		; clear	d0
000004C8 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004CC 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004D0 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004D4 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004DE 7212                       		moveq	#$12,d1		; number of characters
000004E0                            
000004E0                            Error_LoopChars:
000004E0 7000                       		moveq	#0,d0
000004E2 1018                       		move.b	(a0)+,d0
000004E4 0640 0790                  		addi.w	#$790,d0
000004E8 3C80                       		move.w	d0,(a6)
000004EA 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004EE 4E75                       		rts	
000004F0                            ; End of function ShowErrorMsg
000004F0                            
000004F0                            ; ===========================================================================
000004F0 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004F4 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004F8 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004FC 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000500 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000504 0000                       		dc.w asc_5A6-ErrorText
00000506 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000519 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000052C 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
0000053F 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000552 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000565 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000578 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000058B 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000059E 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005B1 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005C4 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005D8 00                         		even
000005D8                            
000005D8                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005D8                            
000005D8                            
000005D8                            sub_5BA:				; XREF: loc_43A; loc_462
000005D8 3CBC 07CA                  		move.w	#$7CA,(a6)
000005DC 7407                       		moveq	#7,d2
000005DE                            
000005DE                            loc_5C0:
000005DE E998                       		rol.l	#4,d0
000005E0 6100                       		bsr.s	sub_5CA
000005E2 51CA FFFA                  		dbf	d2,loc_5C0
000005E6 4E75                       		rts	
000005E8                            ; End of function sub_5BA
000005E8                            
000005E8                            
000005E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E8                            
000005E8                            
000005E8                            sub_5CA:				; XREF: sub_5BA
000005E8 3200                       		move.w	d0,d1
000005EA 0241 000F                  		andi.w	#$F,d1
000005EE 0C41 000A                  		cmpi.w	#$A,d1
000005F2 6500                       		bcs.s	loc_5D8
000005F4 5E41                       		addq.w	#7,d1
000005F6                            
000005F6                            loc_5D8:
000005F6 0641 07C0                  		addi.w	#$7C0,d1
000005FA 3C81                       		move.w	d1,(a6)
000005FC 4E75                       		rts	
000005FE                            ; End of function sub_5CA
000005FE                            
000005FE                            
000005FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005FE                            
000005FE                            
000005FE                            ErrorWaitForC:				; XREF: loc_478
000005FE 6100 0000                  		bsr.w	ReadJoypads
00000602 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000608 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000060C 4E75                       		rts	
0000060E                            ; End of function ErrorWaitForC
0000060E                            
0000060E                            ; ===========================================================================
0000060E                            
0000060E                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000B2E                            Art_Text_end:		even
00000B2E                            
00000B2E                            ; ===========================================================================
00000B2E                            ;VBlank
00000B2E                            loc_B10:				; XREF: Vectors
00000B2E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000B32 4A38 F62A                  		tst.b	($FFFFF62A).w
00000B36 6700                       		beq.s	loc_B88
00000B38 3039 00C0 0004             		move.w	($C00004).l,d0
00000B3E 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000B48 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B50                            ;		btst	#6,($FFFFFFF8).w
00000B50                            ;		beq.s	loc_B42
00000B50                            ;		move.w	#$700,d0
00000B50                            ;
00000B50                            ;loc_B3E:
00000B50                            ;		dbf	d0,loc_B3E
00000B50                            
00000B50                            ;loc_B42:
00000B50 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000B54 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000B5A 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B60 0240 003E                  		andi.w	#$3E,d0
00000B64 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000B68 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B6C                            
00000B6C                            loc_B5E:				; XREF: loc_B88
00000B6C 4EB9 0000 0000             		jsr	sub_71B4C
00000B72                            
00000B72                            loc_B64:				; XREF: loc_D50
00000B72 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B76 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B7A 4E73                       		rte	
00000B7C                            ; ===========================================================================
00000B7C                            ; THIS SUCKS
00000B7C =0000001A                  VBLNO_BEEBUSH        EQU         13*2
00000B7C =0000001C                  VBLNO_BEEBUSHSCR     EQU         14*2
00000B7C                            
00000B7C 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B80 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B84 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B88 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B8C 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B90 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B94 0000                       		dc.w loc_E72-off_B6E
00000B96 0000                       		dc.w jmpto_VBLANK_BEEBUSH-off_B6E
00000B98 0000                       		dc.w jmpto_VBLANK_BEEBUSHSCR-off_B6E
00000B9A                            
00000B9A                            ; ===========================================================================
00000B9A                            
00000B9A                            loc_B88:				; XREF: loc_B10; off_B6E
00000B9A 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000BA0 6700                       		beq.s	loc_B9A
00000BA2 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000BA8 6600 FFC2                  		bne.w	loc_B5E
00000BAC                            
00000BAC                            loc_B9A:
00000BAC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000BB2 6600 FFB8                  		bne.w	loc_B5E		; if not, branch
00000BB6 3039 00C0 0004             		move.w	($C00004).l,d0
00000BBC                            ;		btst	#6,($FFFFFFF8).w
00000BBC                            ;		beq.s	loc_BBA
00000BBC                            ;		move.w	#$700,d0
00000BBC                            ;
00000BBC                            ;loc_BB6:
00000BBC                            ;		dbf	d0,loc_BB6
00000BBC                            ;
00000BBC                            ;loc_BBA:
00000BBC 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000BC2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000BCA                            
00000BCA                            loc_BC8:
00000BCA 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BD2 66F6                       		bne.s	loc_BC8
00000BD4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BD8 6600                       		bne.s	loc_BFE
00000BDA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BE0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BE6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BEC 3ABC 977F                  		move.w	#$977F,(a5)
00000BF0 3ABC C000                  		move.w	#$C000,(a5)
00000BF4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BFA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BFE 6000                       		bra.s	loc_C22
00000C00                            ; ===========================================================================
00000C00                            
00000C00                            loc_BFE:				; XREF: loc_BC8
00000C00 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C06 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C0C 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C12 3ABC 977F                  		move.w	#$977F,(a5)
00000C16 3ABC C000                  		move.w	#$C000,(a5)
00000C1A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C20 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C24                            
00000C24                            loc_C22:				; XREF: loc_BC8
00000C24 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C28 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C30 6000 FF3A                  		bra.w	loc_B5E
00000C34                            ; ===========================================================================
00000C34                            
00000C34                            loc_C32:				; XREF: off_B6E
00000C34 6100 0000                  		bsr.w	sub_106E
00000C38                            
00000C38                            loc_C36:				; XREF: off_B6E
00000C38 4A78 F614                  		tst.w	($FFFFF614).w
00000C3C 6700 0000                  		beq.w	locret_C42
00000C40 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C44                            
00000C44                            locret_C42:
00000C44 4E75                       		rts	
00000C46                            ; ===========================================================================
00000C46                            
00000C46                            loc_C44:				; XREF: off_B6E
00000C46 6100 0000                  		bsr.w	sub_106E
00000C4A 6100 0000                  		bsr.w	sub_6886
00000C4E 6100 0000                  		bsr.w	sub_1642
00000C52 4A78 F614                  		tst.w	($FFFFF614).w
00000C56 6700 0000                  		beq.w	locret_C5C
00000C5A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C5E                            
00000C5E                            locret_C5C:
00000C5E 4E75                       		rts	
00000C60                            
00000C60                            ; ---------------------------------------------------------------------------
00000C60                            ; SOOOO GROSS!!!
00000C60                            ; ---------------------------------------------------------------------------
00000C60                            jmpto_VBLANK_BEEBUSH:
00000C60 4EF9 0000 0000             	jmp VBLANK_BEEBUSH
00000C66                            
00000C66                            jmpto_VBLANK_BEEBUSHSCR:
00000C66 4EF9 0000 0000             	jmp VBLANK_BEEBUSHSCR
00000C6C                            
00000C6C                            ; ---------------------------------------------------------------------------
00000C6C                            
00000C6C                            ; ===========================================================================
00000C6C                            
00000C6C                            loc_C5E:				; XREF: off_B6E
00000C6C 6100 0000                  		bsr.w	sub_106E
00000C70 4E75                       		rts	
00000C72                            ; ===========================================================================
00000C72                            
00000C72                            loc_C64:				; XREF: off_B6E
00000C72 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C78 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C7C                            
00000C7C                            loc_C6E:				; XREF: off_B6E
00000C7C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C84                            
00000C84                            loc_C76:
00000C84 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C8C 66F6                       		bne.s	loc_C76		; if not, branch
00000C8E 6100 0000                  		bsr.w	ReadJoypads
00000C92 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C96 6600                       		bne.s	loc_CB0
00000C98 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C9E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CA4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000CAA 3ABC 977F                  		move.w	#$977F,(a5)
00000CAE 3ABC C000                  		move.w	#$C000,(a5)
00000CB2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CB8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CBC 6000                       		bra.s	loc_CD4
00000CBE                            ; ===========================================================================
00000CBE                            
00000CBE                            loc_CB0:				; XREF: loc_C76
00000CBE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CC4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CCA 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CD0 3ABC 977F                  		move.w	#$977F,(a5)
00000CD4 3ABC C000                  		move.w	#$C000,(a5)
00000CD8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CDE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CE2                            
00000CE2                            loc_CD4:				; XREF: loc_C76
00000CE2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CEC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CF2 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CF8 3ABC 977F                  		move.w	#$977F,(a5)
00000CFC 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D00 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D0A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D10 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D16 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D1C 3ABC 977F                  		move.w	#$977F,(a5)
00000D20 3ABC 7800                  		move.w	#$7800,(a5)
00000D24 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D2A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D2E 4A38 F767                  		tst.b	($FFFFF767).w
00000D32 6700                       		beq.s	loc_D50
00000D34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D3A 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000D40 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000D46 3ABC 977F                  		move.w	#$977F,(a5)
00000D4A 3ABC 7000                  		move.w	#$7000,(a5)
00000D4E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D58 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000D5E                            
00000D5E                            loc_D50:
00000D5E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000D66 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D6C 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D72 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D78 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D7E 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D84 6400                       		bcc.s	Demo_Time
00000D86 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D8C 588F                       		addq.l	#4,sp
00000D8E 6000 FDE2                  		bra.w	loc_B64
00000D92                            
00000D92                            ; ---------------------------------------------------------------------------
00000D92                            ; Subroutine to	run a demo for an amount of time
00000D92                            ; ---------------------------------------------------------------------------
00000D92                            
00000D92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D92                            
00000D92                            
00000D92                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D92 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D96 4EB9 0000 0000             		jsr	AniArt_Load
00000D9C 4EB9 0000 0000             		jsr	HudUpdate
00000DA2 6100 0000                  		bsr.w	sub_165E
00000DA6 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000DAA 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000DAE 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000DB2                            
00000DB2                            Demo_TimeEnd:
00000DB2 4E75                       		rts	
00000DB4                            ; End of function Demo_Time
00000DB4                            
00000DB4                            ; ===========================================================================
00000DB4                            
00000DB4                            loc_DA6:				; XREF: off_B6E
00000DB4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DBC                            
00000DBC                            loc_DAE:
00000DBC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DC4 66F6                       		bne.s	loc_DAE		; if not, branch
00000DC6 6100 0000                  		bsr.w	ReadJoypads
00000DCA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DD0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DD6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DDC 3ABC 977F                  		move.w	#$977F,(a5)
00000DE0 3ABC C000                  		move.w	#$C000,(a5)
00000DE4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DEE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DF4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DFA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E00 3ABC 977F                  		move.w	#$977F,(a5)
00000E04 3ABC 7800                  		move.w	#$7800,(a5)
00000E08 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E0E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E12 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E18 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E1E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E24 3ABC 977F                  		move.w	#$977F,(a5)
00000E28 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E2C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E32 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E36 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E3E 6100 0000                  		bsr.w	PalCycle_SS
00000E42 4A38 F767                  		tst.b	($FFFFF767).w
00000E46 6700                       		beq.s	loc_E64
00000E48 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E4E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E54 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E5A 3ABC 977F                  		move.w	#$977F,(a5)
00000E5E 3ABC 7000                  		move.w	#$7000,(a5)
00000E62 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E68 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E6C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E72                            
00000E72                            loc_E64:
00000E72 4A78 F614                  		tst.w	($FFFFF614).w
00000E76 6700 0000                  		beq.w	locret_E70
00000E7A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7E                            
00000E7E                            locret_E70:
00000E7E 4E75                       		rts	
00000E80                            ; ===========================================================================
00000E80                            
00000E80                            loc_E72:				; XREF: off_B6E
00000E80 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E88                            
00000E88                            loc_E7A:
00000E88 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E90 66F6                       		bne.s	loc_E7A		; if not, branch
00000E92 6100 0000                  		bsr.w	ReadJoypads
00000E96 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E9A 6600                       		bne.s	loc_EB4
00000E9C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EA8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EAE 3ABC 977F                  		move.w	#$977F,(a5)
00000EB2 3ABC C000                  		move.w	#$C000,(a5)
00000EB6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EBC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC0 6000                       		bra.s	loc_ED8
00000EC2                            ; ===========================================================================
00000EC2                            
00000EC2                            loc_EB4:				; XREF: loc_E7A
00000EC2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EC8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ECE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000ED4 3ABC 977F                  		move.w	#$977F,(a5)
00000ED8 3ABC C000                  		move.w	#$C000,(a5)
00000EDC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EE2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE6                            
00000EE6                            loc_ED8:				; XREF: loc_E7A
00000EE6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EEA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EF6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EFC                            
00000EFC                            loc_EEE:
00000EFC 3ABC 977F                  		move.w	#$977F,(a5)
00000F00 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F04 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F0A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F14 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F1A 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F20 3ABC 977F                  		move.w	#$977F,(a5)
00000F24 3ABC 7800                  		move.w	#$7800,(a5)
00000F28 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F32 4A38 F767                  		tst.b	($FFFFF767).w
00000F36 6700                       		beq.s	loc_F54
00000F38 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F3E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F44 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F4A 3ABC 977F                  		move.w	#$977F,(a5)
00000F4E 3ABC 7000                  		move.w	#$7000,(a5)
00000F52 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F58 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F5C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F62                            
00000F62                            loc_F54:
00000F62 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F6A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F70 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F76 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F7C 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F82 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F86 4EB9 0000 0000             		jsr	AniArt_Load
00000F8C 4EB9 0000 0000             		jsr	HudUpdate
00000F92 6100 0000                  		bsr.w	sub_1642
00000F96 4E75                       		rts	
00000F98                            ; ===========================================================================
00000F98                            
00000F98                            loc_F8A:				; XREF: off_B6E
00000F98 6100 0000                  		bsr.w	sub_106E
00000F9C 5238 F628                  		addq.b	#1,($FFFFF628).w
00000FA0 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000FA6 4E75                       		rts	
00000FA8                            ; ===========================================================================
00000FA8                            
00000FA8                            loc_F9A:				; XREF: off_B6E
00000FA8 6100 0000                  		bsr.w	sub_106E
00000FAC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FB0 6000 0000                  		bra.w	sub_1642
00000FB4                            ; ===========================================================================
00000FB4                            
00000FB4                            loc_FA6:				; XREF: off_B6E
00000FB4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FBC                            
00000FBC                            loc_FAE:
00000FBC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FC4 66F6                       		bne.s	loc_FAE		; if not, branch
00000FC6 6100 0000                  		bsr.w	ReadJoypads
00000FCA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FD0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FD6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FDC 3ABC 977F                  		move.w	#$977F,(a5)
00000FE0 3ABC C000                  		move.w	#$C000,(a5)
00000FE4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FEE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FF4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FFA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001000 3ABC 977F                  		move.w	#$977F,(a5)
00001004 3ABC 7800                  		move.w	#$7800,(a5)
00001008 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000100E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001012 4BF9 00C0 0004             		lea	($C00004).l,a5
00001018 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000101E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001024 3ABC 977F                  		move.w	#$977F,(a5)
00001028 3ABC 7C00                  		move.w	#$7C00,(a5)
0000102C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001032 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001036 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000103E 4A38 F767                  		tst.b	($FFFFF767).w
00001042 6700                       		beq.s	loc_1060
00001044 4BF9 00C0 0004             		lea	($C00004).l,a5
0000104A 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001050 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001056 3ABC 977F                  		move.w	#$977F,(a5)
0000105A 3ABC 7000                  		move.w	#$7000,(a5)
0000105E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001064 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001068 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000106E                            
0000106E                            loc_1060:
0000106E 4A78 F614                  		tst.w	($FFFFF614).w
00001072 6700 0000                  		beq.w	locret_106C
00001076 5378 F614                  		subq.w	#1,($FFFFF614).w
0000107A                            
0000107A                            locret_106C:
0000107A 4E75                       		rts	
0000107C                            
0000107C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000107C                            
0000107C                            
0000107C                            sub_106E:				; XREF: loc_C32; et al
0000107C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001084                            
00001084                            loc_1076:
00001084 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000108C 66F6                       		bne.s	loc_1076	; if not, branch
0000108E 6100 0000                  		bsr.w	ReadJoypads
00001092 4A38 F64E                  		tst.b	($FFFFF64E).w
00001096 6600                       		bne.s	loc_10B0
00001098 4BF9 00C0 0004             		lea	($C00004).l,a5
0000109E 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010A4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010AA 3ABC 977F                  		move.w	#$977F,(a5)
000010AE 3ABC C000                  		move.w	#$C000,(a5)
000010B2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010B8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010BC 6000                       		bra.s	loc_10D4
000010BE                            ; ===========================================================================
000010BE                            
000010BE                            loc_10B0:				; XREF: sub_106E
000010BE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010C4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010CA 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010D0 3ABC 977F                  		move.w	#$977F,(a5)
000010D4 3ABC C000                  		move.w	#$C000,(a5)
000010D8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010DE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010E2                            
000010E2                            loc_10D4:				; XREF: sub_106E
000010E2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010E8 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010EE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000010F4 3ABC 977F                  		move.w	#$977F,(a5)
000010F8 3ABC 7800                  		move.w	#$7800,(a5)
000010FC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001102 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001106 4BF9 00C0 0004             		lea	($C00004).l,a5
0000110C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001112 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001118 3ABC 977F                  		move.w	#$977F,(a5)
0000111C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001120 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001126 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000112A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001132 4E75                       		rts	
00001134                            ; End of function sub_106E
00001134                            
00001134                            ; ---------------------------------------------------------------------------
00001134                            ; Subroutine to	move pallets from the RAM to CRAM
00001134                            ; ---------------------------------------------------------------------------
00001134                            
00001134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001134                            
00001134                            
00001134                            PalToCRAM:
00001134 46FC 2700                  		move	#$2700,sr
00001138 4A78 F644                  		tst.w	($FFFFF644).w
0000113C 6700                       		beq.s	locret_119C
0000113E 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001144 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001148 43F9 00C0 0000             		lea	($C00000).l,a1
0000114E 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001152 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000115A 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000115C 2298                       		move.l	(a0)+,(a1)
0000115E 2298                       		move.l	(a0)+,(a1)
00001160 2298                       		move.l	(a0)+,(a1)
00001162 2298                       		move.l	(a0)+,(a1)
00001164 2298                       		move.l	(a0)+,(a1)
00001166 2298                       		move.l	(a0)+,(a1)
00001168 2298                       		move.l	(a0)+,(a1)
0000116A 2298                       		move.l	(a0)+,(a1)
0000116C 2298                       		move.l	(a0)+,(a1)
0000116E 2298                       		move.l	(a0)+,(a1)
00001170 2298                       		move.l	(a0)+,(a1)
00001172 2298                       		move.l	(a0)+,(a1)
00001174 2298                       		move.l	(a0)+,(a1)
00001176 2298                       		move.l	(a0)+,(a1)
00001178 2298                       		move.l	(a0)+,(a1)
0000117A 2298                       		move.l	(a0)+,(a1)
0000117C 2298                       		move.l	(a0)+,(a1)
0000117E 2298                       		move.l	(a0)+,(a1)
00001180 2298                       		move.l	(a0)+,(a1)
00001182 2298                       		move.l	(a0)+,(a1)
00001184 2298                       		move.l	(a0)+,(a1)
00001186 2298                       		move.l	(a0)+,(a1)
00001188 2298                       		move.l	(a0)+,(a1)
0000118A 2298                       		move.l	(a0)+,(a1)
0000118C 2298                       		move.l	(a0)+,(a1)
0000118E 2298                       		move.l	(a0)+,(a1)
00001190 2298                       		move.l	(a0)+,(a1)
00001192 2298                       		move.l	(a0)+,(a1)
00001194 2298                       		move.l	(a0)+,(a1)
00001196 2298                       		move.l	(a0)+,(a1)
00001198 2298                       		move.l	(a0)+,(a1)
0000119A 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000011A0 4CDF 0300                  		movem.l	(sp)+,a0-a1
000011A4 4A38 F64F                  		tst.b	($FFFFF64F).w
000011A8 6600                       		bne.s	loc_119E
000011AA                            
000011AA                            locret_119C:
000011AA 4E73                       		rte	
000011AC                            ; ===========================================================================
000011AC                            
000011AC                            loc_119E:				; XREF: PalToCRAM
000011AC 4238 F64F                  		clr.b	($FFFFF64F).w
000011B0 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000011B4 6100 FBDC                  		bsr.w	Demo_Time
000011B8 4EB9 0000 0000             		jsr	sub_71B4C
000011BE 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000011C2 4E73                       		rte	
000011C4                            ; End of function PalToCRAM
000011C4                            
000011C4                            ; ---------------------------------------------------------------------------
000011C4                            ; Subroutine to	initialise joypads
000011C4                            ; ---------------------------------------------------------------------------
000011C4                            
000011C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011C4                            
000011C4                            
000011C4                            JoypadInit:				; XREF: GameClrRAM
000011C4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CC                            
000011CC                            Joypad_WaitZ80:
000011CC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000011D4 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000011D6 7040                       		moveq	#$40,d0
000011D8 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000011DE 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000011E4 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000011EA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000011F2 4E75                       		rts	
000011F4                            ; End of function JoypadInit
000011F4                            
000011F4                            ; ---------------------------------------------------------------------------
000011F4                            ; Subroutine to	read joypad input, and send it to the RAM
000011F4                            ; ---------------------------------------------------------------------------
000011F4                            
000011F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F4                            
000011F4                            
000011F4                            ReadJoypads:
000011F4 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000011F8 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000011FE 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001200 5449                       		addq.w	#2,a1		; do the second	joypad
00001202                            
00001202                            Joypad_Read:
00001202 12BC 0000                  		move.b	#0,(a1)
00001206 4E71                       		nop	
00001208 4E71                       		nop	
0000120A 1011                       		move.b	(a1),d0
0000120C E508                       		lsl.b	#2,d0
0000120E 0200 00C0                  		andi.b	#$C0,d0
00001212 12BC 0040                  		move.b	#$40,(a1)
00001216 4E71                       		nop	
00001218 4E71                       		nop	
0000121A 1211                       		move.b	(a1),d1
0000121C 0201 003F                  		andi.b	#$3F,d1
00001220 8001                       		or.b	d1,d0
00001222 4600                       		not.b	d0
00001224 1210                       		move.b	(a0),d1
00001226 B101                       		eor.b	d0,d1
00001228 10C0                       		move.b	d0,(a0)+
0000122A C200                       		and.b	d0,d1
0000122C 10C1                       		move.b	d1,(a0)+
0000122E 4E75                       		rts	
00001230                            ; End of function ReadJoypads
00001230                            
00001230                            
00001230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001230                            
00001230                            
00001230                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001230 41F9 00C0 0004             		lea	($C00004).l,a0
00001236 43F9 00C0 0000             		lea	($C00000).l,a1
0000123C 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001242 7E12                       		moveq	#$12,d7
00001244                            
00001244                            VDP_Loop:
00001244 309A                       		move.w	(a2)+,(a0)
00001246 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000124A                            
0000124A 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001250 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; Is this a PAL console?
00001256 6700                       		beq.s	.UseV28			; If not, skip
00001258 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
0000125C                            .UseV28:
0000125C 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001260 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001266 7000                       		moveq	#0,d0
00001268 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001272 3E3C 003F                  		move.w	#$3F,d7
00001276                            
00001276                            VDP_ClrCRAM:
00001276 3280                       		move.w	d0,(a1)
00001278 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000127C                            
0000127C 42B8 F616                  		clr.l	($FFFFF616).w
00001280 42B8 F61A                  		clr.l	($FFFFF61A).w
00001284 2F01                       		move.l	d1,-(sp)
00001286 4BF9 00C0 0004             		lea	($C00004).l,a5
0000128C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001290 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001296 3ABC 9780                  		move.w	#$9780,(a5)
0000129A 2ABC 4000 0080             		move.l	#$40000080,(a5)
000012A0 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000012A8                            
000012A8                            loc_128E:
000012A8 3215                       		move.w	(a5),d1
000012AA 0801 0001                  		btst	#1,d1
000012AE 66F8                       		bne.s	loc_128E
000012B0                            
000012B0 3ABC 8F02                  		move.w	#$8F02,(a5)
000012B4 221F                       		move.l	(sp)+,d1
000012B6 4E75                       		rts	
000012B8                            ; End of function VDPSetupGame
000012B8                            
000012B8                            ; ===========================================================================
000012B8 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000012C0 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000012C8 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000012D0 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000012D8 9001 9100 9200             		dc.w $9001, $9100, $9200
000012DE                            
000012DE                            ; ---------------------------------------------------------------------------
000012DE                            ; Subroutine to	clear the screen
000012DE                            ; ---------------------------------------------------------------------------
000012DE                            
000012DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012DE                            
000012DE                            InitScreen:
000012DE                            ClearScreen:
000012DE 4BF9 00C0 0004             		lea	($C00004).l,a5
000012E4 3ABC 8F01                  		move.w	#$8F01,(a5)
000012E8 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000012EE 3ABC 9780                  		move.w	#$9780,(a5)
000012F2 2ABC 4000 0083             		move.l	#$40000083,(a5)
000012F8 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001300                            
00001300                            loc_12E6:
00001300 3215                       		move.w	(a5),d1
00001302 0801 0001                  		btst	#1,d1
00001306 66F8                       		bne.s	loc_12E6
00001308                            
00001308 3ABC 8F02                  		move.w	#$8F02,(a5)
0000130C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001312 3ABC 8F01                  		move.w	#$8F01,(a5)
00001316 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000131C 3ABC 9780                  		move.w	#$9780,(a5)
00001320 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001326 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000132E                            
0000132E                            loc_1314:
0000132E 3215                       		move.w	(a5),d1
00001330 0801 0001                  		btst	#1,d1
00001334 66F8                       		bne.s	loc_1314
00001336                            
00001336 3ABC 8F02                  		move.w	#$8F02,(a5)
0000133A 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001342 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000134A 43F8 F800                  		lea	($FFFFF800).w,a1
0000134E 7000                       		moveq	#0,d0
00001350 323C 009F                  		move.w	#$9F,d1
00001354                            
00001354                            loc_133A:
00001354 22C0                       		move.l	d0,(a1)+
00001356 51C9 FFFC                  		dbf	d1,loc_133A
0000135A                            
0000135A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000135E 7000                       		moveq	#0,d0
00001360 323C 00FF                  		move.w	#$FF,d1
00001364                            
00001364                            loc_134A:
00001364 22C0                       		move.l	d0,(a1)+
00001366 51C9 FFFC                  		dbf	d1,loc_134A
0000136A 4E75                       		rts	
0000136C                            ; End of function ClearScreen
0000136C                            
0000136C                            ; ---------------------------------------------------------------------------
0000136C                            ; Subroutine to	load the sound driver
0000136C                            ; ---------------------------------------------------------------------------
0000136C                            
0000136C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000136C                            
0000136C                            
0000136C                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
0000136C 4E71                       		nop	
0000136E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001376 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000137E 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001384 43F9 00A0 0000             		lea	($A00000).l,a1
0000138A 6100 0000                  		bsr.w	KosDec		; decompress
0000138E 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
00001396 4E71                       		nop	
00001398 4E71                       		nop	
0000139A 4E71                       		nop	
0000139C 4E71                       		nop	
0000139E 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000013A6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000013AE 4E75                       		rts	
000013B0                            ; End of function SoundDriverLoad
000013B0                            
000013B0                            ; ---------------------------------------------------------------------------
000013B0                            ; Subroutine to	play a sound or	music track
000013B0                            ; ---------------------------------------------------------------------------
000013B0                            
000013B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013B0                            
000013B0                            
000013B0                            PlaySound:
000013B0 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000013B4 4E75                       		rts	
000013B6                            ; End of function PlaySound
000013B6                            
000013B6                            ; ---------------------------------------------------------------------------
000013B6                            ; Subroutine to	play a special sound/music (E0-E4)
000013B6                            ;
000013B6                            ; E0 - Fade out
000013B6                            ; E1 - Sega
000013B6                            ; E2 - Speed up
000013B6                            ; E3 - Normal speed
000013B6                            ; E4 - Stop
000013B6                            ; ---------------------------------------------------------------------------
000013B6                            
000013B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013B6                            
000013B6                            
000013B6                            PlaySound_Special:
000013B6 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000013BA 4E75                       		rts	
000013BC                            ; End of function PlaySound_Special
000013BC                            
000013BC                            ; ===========================================================================
000013BC                            ; ---------------------------------------------------------------------------
000013BC                            ; Unused sound/music subroutine
000013BC                            ; ---------------------------------------------------------------------------
000013BC                            
000013BC                            PlaySound_Unk:
000013BC 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000013C0 4E75                       		rts	
000013C2                            
000013C2                            ; ---------------------------------------------------------------------------
000013C2                            ; Subroutine to	pause the game
000013C2                            ; ---------------------------------------------------------------------------
000013C2                            
000013C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013C2                            
000013C2                            
000013C2                            PauseGame:				; XREF: Level_MainLoop; et al
000013C2 4E71                       		nop	
000013C4 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000013C8 6700                       		beq.s	Unpause		; if not, branch
000013CA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000013CE 6600                       		bne.s	loc_13BE	; if yes, branch
000013D0 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000013D6 6700                       		beq.s	Pause_DoNothing	; if not, branch
000013D8                            
000013D8                            loc_13BE:
000013D8 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000013DE 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000013E4                            
000013E4                            loc_13CA:
000013E4 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000013EA 6100 0000                  		bsr.w	DelayProgram
000013EE 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000013F2 6700                       		beq.s	Pause_ChkStart	; if not, branch
000013F4 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000013FA 6700                       		beq.s	Pause_ChkBC	; if not, branch
000013FC 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001402 4E71                       		nop	
00001404 6000                       		bra.s	loc_1404
00001406                            ; ===========================================================================
00001406                            
00001406                            Pause_ChkBC:				; XREF: PauseGame
00001406 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
0000140C 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000140E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001414 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001416                            
00001416                            Pause_ChkStart:				; XREF: PauseGame
00001416 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000141C 67C6                       		beq.s	loc_13CA	; if not, branch
0000141E                            
0000141E                            loc_1404:				; XREF: PauseGame
0000141E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001424                            
00001424                            Unpause:				; XREF: PauseGame
00001424 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000142A                            
0000142A                            Pause_DoNothing:			; XREF: PauseGame
0000142A 4E75                       		rts	
0000142C                            ; ===========================================================================
0000142C                            
0000142C                            Pause_SlowMo:				; XREF: PauseGame
0000142C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001432 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001438 4E75                       		rts	
0000143A                            ; End of function PauseGame
0000143A                            
0000143A                            ; ---------------------------------------------------------------------------
0000143A                            ; Subroutine to	display	patterns via the VDP
0000143A                            ; ---------------------------------------------------------------------------
0000143A                            
0000143A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000143A                            
0000143A                            DrawTileMap:
0000143A                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000143A 4DF9 00C0 0000             		lea	($C00000).l,a6
00001440 283C 0080 0000             		move.l	#$800000,d4
00001446                            
00001446                            loc_142C:
00001446 2D40 0004                  		move.l	d0,4(a6)
0000144A 3601                       		move.w	d1,d3
0000144C                            
0000144C                            loc_1432:
0000144C 3C99                       		move.w	(a1)+,(a6)
0000144E 51CB FFFC                  		dbf	d3,loc_1432
00001452 D084                       		add.l	d4,d0
00001454 51CA FFF0                  		dbf	d2,loc_142C
00001458 4E75                       		rts	
0000145A                            ; End of function ShowVDPGraphics
0000145A                            
0000145A                            ; ---------------------------------------------------------------------------
0000145A                            ; Nemesis decompression	algorithm
0000145A                            ; ---------------------------------------------------------------------------
0000145A                            
0000145A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000145A                            
0000145A                            
0000145A                            NemDec:
0000145A 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000145E 47F9 0000 0000             		lea	(loc_1502).l,a3
00001464 49F9 00C0 0000             		lea	($C00000).l,a4
0000146A 6000                       		bra.s	loc_145C
0000146C                            ; ===========================================================================
0000146C 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001470 47F9 0000 0000             		lea	(loc_1518).l,a3
00001476                            
00001476                            loc_145C:				; XREF: NemDec
00001476 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000147A 3418                       		move.w	(a0)+,d2
0000147C E34A                       		lsl.w	#1,d2
0000147E 6400                       		bcc.s	loc_146A
00001480 D6FC 000A                  		adda.w	#$A,a3
00001484                            
00001484                            loc_146A:
00001484 E54A                       		lsl.w	#2,d2
00001486 3A42                       		movea.w	d2,a5
00001488 7608                       		moveq	#8,d3
0000148A 7400                       		moveq	#0,d2
0000148C 7800                       		moveq	#0,d4
0000148E 6100 0000                  		bsr.w	NemDec4
00001492 1A18                       		move.b	(a0)+,d5
00001494 E145                       		asl.w	#8,d5
00001496 1A18                       		move.b	(a0)+,d5
00001498 3C3C 0010                  		move.w	#$10,d6
0000149C 6100                       		bsr.s	NemDec2
0000149E 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000014A2 4E75                       		rts	
000014A4                            ; End of function NemDec
000014A4                            
000014A4                            
000014A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014A4                            
000014A4                            
000014A4                            NemDec2:				; XREF: NemDec
000014A4 3E06                       		move.w	d6,d7
000014A6 5147                       		subq.w	#8,d7
000014A8 3205                       		move.w	d5,d1
000014AA EE69                       		lsr.w	d7,d1
000014AC 0C01 00FC                  		cmpi.b	#-4,d1
000014B0 6400                       		bcc.s	loc_14D6
000014B2 0241 00FF                  		andi.w	#$FF,d1
000014B6 D241                       		add.w	d1,d1
000014B8 1031 1000                  		move.b	(a1,d1.w),d0
000014BC 4880                       		ext.w	d0
000014BE 9C40                       		sub.w	d0,d6
000014C0 0C46 0009                  		cmpi.w	#9,d6
000014C4 6400                       		bcc.s	loc_14B2
000014C6 5046                       		addq.w	#8,d6
000014C8 E145                       		asl.w	#8,d5
000014CA 1A18                       		move.b	(a0)+,d5
000014CC                            
000014CC                            loc_14B2:
000014CC 1231 1001                  		move.b	1(a1,d1.w),d1
000014D0 3001                       		move.w	d1,d0
000014D2 0241 000F                  		andi.w	#$F,d1
000014D6 0240 00F0                  		andi.w	#$F0,d0
000014DA                            
000014DA                            loc_14C0:				; XREF: NemDec3
000014DA E848                       		lsr.w	#4,d0
000014DC                            
000014DC                            loc_14C2:				; XREF: NemDec3
000014DC E98C                       		lsl.l	#4,d4
000014DE 8801                       		or.b	d1,d4
000014E0 5343                       		subq.w	#1,d3
000014E2 6600                       		bne.s	loc_14D0
000014E4 4ED3                       		jmp	(a3)
000014E6                            ; End of function NemDec2
000014E6                            
000014E6                            
000014E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E6                            
000014E6                            
000014E6                            NemDec3:				; XREF: loc_1502
000014E6 7800                       		moveq	#0,d4
000014E8 7608                       		moveq	#8,d3
000014EA                            
000014EA                            loc_14D0:				; XREF: NemDec2
000014EA 51C8 FFF0                  		dbf	d0,loc_14C2
000014EE 60B4                       		bra.s	NemDec2
000014F0                            ; ===========================================================================
000014F0                            
000014F0                            loc_14D6:				; XREF: NemDec2
000014F0 5D46                       		subq.w	#6,d6
000014F2 0C46 0009                  		cmpi.w	#9,d6
000014F6 6400                       		bcc.s	loc_14E4
000014F8 5046                       		addq.w	#8,d6
000014FA E145                       		asl.w	#8,d5
000014FC 1A18                       		move.b	(a0)+,d5
000014FE                            
000014FE                            loc_14E4:				; XREF: NemDec3
000014FE 5F46                       		subq.w	#7,d6
00001500 3205                       		move.w	d5,d1
00001502 EC69                       		lsr.w	d6,d1
00001504 3001                       		move.w	d1,d0
00001506 0241 000F                  		andi.w	#$F,d1
0000150A 0240 0070                  		andi.w	#$70,d0
0000150E 0C46 0009                  		cmpi.w	#9,d6
00001512 64C6                       		bcc.s	loc_14C0
00001514 5046                       		addq.w	#8,d6
00001516 E145                       		asl.w	#8,d5
00001518 1A18                       		move.b	(a0)+,d5
0000151A 60BE                       		bra.s	loc_14C0
0000151C                            ; End of function NemDec3
0000151C                            
0000151C                            ; ===========================================================================
0000151C                            
0000151C                            loc_1502:				; XREF: NemDec
0000151C 2884                       		move.l	d4,(a4)
0000151E 534D                       		subq.w	#1,a5
00001520 380D                       		move.w	a5,d4
00001522 66C2                       		bne.s	NemDec3
00001524 4E75                       		rts	
00001526                            ; ===========================================================================
00001526 B982                       		eor.l	d4,d2
00001528 2882                       		move.l	d2,(a4)
0000152A 534D                       		subq.w	#1,a5
0000152C 380D                       		move.w	a5,d4
0000152E 66B6                       		bne.s	NemDec3
00001530 4E75                       		rts	
00001532                            ; ===========================================================================
00001532                            
00001532                            loc_1518:				; XREF: NemDec
00001532 28C4                       		move.l	d4,(a4)+
00001534 534D                       		subq.w	#1,a5
00001536 380D                       		move.w	a5,d4
00001538 66AC                       		bne.s	NemDec3
0000153A 4E75                       		rts	
0000153C                            ; ===========================================================================
0000153C B982                       		eor.l	d4,d2
0000153E 28C2                       		move.l	d2,(a4)+
00001540 534D                       		subq.w	#1,a5
00001542 380D                       		move.w	a5,d4
00001544 66A0                       		bne.s	NemDec3
00001546 4E75                       		rts	
00001548                            
00001548                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001548                            
00001548                            
00001548                            NemDec4:				; XREF: NemDec
00001548 1018                       		move.b	(a0)+,d0
0000154A                            
0000154A                            loc_1530:
0000154A 0C00 00FF                  		cmpi.b	#-1,d0
0000154E 6600                       		bne.s	loc_1538
00001550 4E75                       		rts	
00001552                            ; ===========================================================================
00001552                            
00001552                            loc_1538:				; XREF: NemDec4
00001552 3E00                       		move.w	d0,d7
00001554                            
00001554                            loc_153A:
00001554 1018                       		move.b	(a0)+,d0
00001556 0C00 0080                  		cmpi.b	#$80,d0
0000155A 64EE                       		bcc.s	loc_1530
0000155C 1200                       		move.b	d0,d1
0000155E 0247 000F                  		andi.w	#$F,d7
00001562 0241 0070                  		andi.w	#$70,d1
00001566 8E41                       		or.w	d1,d7
00001568 0240 000F                  		andi.w	#$F,d0
0000156C 1200                       		move.b	d0,d1
0000156E E149                       		lsl.w	#8,d1
00001570 8E41                       		or.w	d1,d7
00001572 7208                       		moveq	#8,d1
00001574 9240                       		sub.w	d0,d1
00001576 6600                       		bne.s	loc_1568
00001578 1018                       		move.b	(a0)+,d0
0000157A D040                       		add.w	d0,d0
0000157C 3387 0000                  		move.w	d7,(a1,d0.w)
00001580 60D2                       		bra.s	loc_153A
00001582                            ; ===========================================================================
00001582                            
00001582                            loc_1568:				; XREF: NemDec4
00001582 1018                       		move.b	(a0)+,d0
00001584 E368                       		lsl.w	d1,d0
00001586 D040                       		add.w	d0,d0
00001588 7A01                       		moveq	#1,d5
0000158A E36D                       		lsl.w	d1,d5
0000158C 5345                       		subq.w	#1,d5
0000158E                            
0000158E                            loc_1574:
0000158E 3387 0000                  		move.w	d7,(a1,d0.w)
00001592 5440                       		addq.w	#2,d0
00001594 51CD FFF8                  		dbf	d5,loc_1574
00001598 60BA                       		bra.s	loc_153A
0000159A                            ; End of function NemDec4
0000159A                            
0000159A                            ; ---------------------------------------------------------------------------
0000159A                            ; Subroutine to	load pattern load cues
0000159A                            ; ---------------------------------------------------------------------------
0000159A                            
0000159A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000159A                            
0000159A                            LoadArtList: 
0000159A                            LoadPLC:
0000159A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000159E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015A4 D040                       		add.w	d0,d0
000015A6 3031 0000                  		move.w	(a1,d0.w),d0
000015AA 43F1 0000                  		lea	(a1,d0.w),a1
000015AE 45F8 F680                  		lea	($FFFFF680).w,a2
000015B2                            
000015B2                            loc_1598:
000015B2 4A92                       		tst.l	(a2)
000015B4 6700                       		beq.s	loc_15A0
000015B6 5C4A                       		addq.w	#6,a2
000015B8 60F8                       		bra.s	loc_1598
000015BA                            ; ===========================================================================
000015BA                            
000015BA                            loc_15A0:				; XREF: LoadPLC
000015BA 3019                       		move.w	(a1)+,d0
000015BC 6B00                       		bmi.s	loc_15AC
000015BE                            
000015BE                            loc_15A4:
000015BE 24D9                       		move.l	(a1)+,(a2)+
000015C0 34D9                       		move.w	(a1)+,(a2)+
000015C2 51C8 FFFA                  		dbf	d0,loc_15A4
000015C6                            
000015C6                            loc_15AC:
000015C6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015CA 4E75                       		rts	
000015CC                            ; End of function LoadPLC
000015CC                            
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            InitArtList: 
000015CC                            LoadPLC2:
000015CC 48E7 0060                  		movem.l	a1-a2,-(sp)
000015D0 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015D6 D040                       		add.w	d0,d0
000015D8 3031 0000                  		move.w	(a1,d0.w),d0
000015DC 43F1 0000                  		lea	(a1,d0.w),a1
000015E0 6100                       		bsr.s	ClearPLC
000015E2 45F8 F680                  		lea	($FFFFF680).w,a2
000015E6 3019                       		move.w	(a1)+,d0
000015E8 6B00                       		bmi.s	loc_15D8
000015EA                            
000015EA                            loc_15D0:
000015EA 24D9                       		move.l	(a1)+,(a2)+
000015EC 34D9                       		move.w	(a1)+,(a2)+
000015EE 51C8 FFFA                  		dbf	d0,loc_15D0
000015F2                            
000015F2                            loc_15D8:
000015F2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015F6 4E75                       		rts	
000015F8                            ; End of function LoadPLC2
000015F8                            
000015F8                            ; ---------------------------------------------------------------------------
000015F8                            ; Subroutine to	clear the pattern load cues
000015F8                            ; ---------------------------------------------------------------------------
000015F8                            
000015F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F8                            
000015F8                            ClearArtListQueue:
000015F8                            ClearPLC:				; XREF: LoadPLC2
000015F8 45F8 F680                  		lea	($FFFFF680).w,a2
000015FC 701F                       		moveq	#$1F,d0
000015FE                            
000015FE                            ClearPLC_Loop:
000015FE 429A                       		clr.l	(a2)+
00001600 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001604 4E75                       		rts	
00001606                            ; End of function ClearPLC
00001606                            
00001606                            ; ---------------------------------------------------------------------------
00001606                            ; Subroutine to	use graphics listed in a pattern load cue
00001606                            ; ---------------------------------------------------------------------------
00001606                            
00001606                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001606                            
00001606                            ProcessArtLoading: 
00001606                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001606 4AB8 F680                  		tst.l	($FFFFF680).w
0000160A 6700                       		beq.s	locret_1640
0000160C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001610 6600                       		bne.s	locret_1640
00001612 2078 F680                  		movea.l	($FFFFF680).w,a0
00001616 47F9 0000 151C             		lea	(loc_1502).l,a3
0000161C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001620 3418                       		move.w	(a0)+,d2
00001622 6A00                       		bpl.s	loc_160E
00001624 D6FC 000A                  		adda.w	#$A,a3
00001628                            
00001628                            loc_160E:
00001628 0242 7FFF                  		andi.w	#$7FFF,d2
0000162C 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001630 6100 FF16                  		bsr.w	NemDec4
00001634 1A18                       		move.b	(a0)+,d5
00001636 E145                       		asl.w	#8,d5
00001638 1A18                       		move.b	(a0)+,d5
0000163A 7C10                       		moveq	#$10,d6
0000163C 7000                       		moveq	#0,d0
0000163E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001642 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001646 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000164A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000164E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001652 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001656 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000165A                            
0000165A                            locret_1640:
0000165A 4E75                       		rts	
0000165C                            ; End of function RunPLC_RAM
0000165C                            
0000165C                            
0000165C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000165C                            
0000165C                            
0000165C                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
0000165C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001660 6700 0000                  		beq.w	locret_16DA
00001664 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000166A 7000                       		moveq	#0,d0
0000166C 3038 F684                  		move.w	($FFFFF684).w,d0
00001670 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001676 6000                       		bra.s	loc_1676
00001678                            ; End of function sub_1642
00001678                            
00001678                            
00001678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001678                            
00001678                            
00001678                            sub_165E:				; XREF: Demo_Time
00001678 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000167C 6700                       		beq.s	locret_16DA
0000167E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001684 7000                       		moveq	#0,d0
00001686 3038 F684                  		move.w	($FFFFF684).w,d0
0000168A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001690                            
00001690                            loc_1676:				; XREF: sub_1642
00001690 49F9 00C0 0004             		lea	($C00004).l,a4
00001696 E588                       		lsl.l	#2,d0
00001698 E448                       		lsr.w	#2,d0
0000169A 0040 4000                  		ori.w	#$4000,d0
0000169E 4840                       		swap	d0
000016A0 2880                       		move.l	d0,(a4)
000016A2 594C                       		subq.w	#4,a4
000016A4 2078 F680                  		movea.l	($FFFFF680).w,a0
000016A8 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000016AC 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000016B0 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000016B4 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000016B8 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016BC 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016C0 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016C4                            
000016C4                            loc_16AA:				; XREF: sub_165E
000016C4 3A7C 0008                  		movea.w	#8,a5
000016C8 6100 FE1C                  		bsr.w	NemDec3
000016CC 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000016D0 6700                       		beq.s	loc_16DC
000016D2 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016D6 66EC                       		bne.s	loc_16AA
000016D8 21C8 F680                  		move.l	a0,($FFFFF680).w
000016DC 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016E0 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016E4 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016E8 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016EC 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016F0 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016F4                            
000016F4                            locret_16DA:				; XREF: sub_1642
000016F4 4E75                       		rts	
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_16DC:				; XREF: sub_165E
000016F6 41F8 F680                  		lea	($FFFFF680).w,a0
000016FA 7015                       		moveq	#$15,d0
000016FC                            
000016FC                            loc_16E2:				; XREF: sub_165E
000016FC 20E8 0006                  		move.l	6(a0),(a0)+
00001700 51C8 FFFA                  		dbf	d0,loc_16E2
00001704 4E75                       		rts	
00001706                            ; End of function sub_165E
00001706                            
00001706                            ; ---------------------------------------------------------------------------
00001706                            ; Subroutine to	execute	the pattern load cue
00001706                            ; ---------------------------------------------------------------------------
00001706                            
00001706                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001706                            
00001706                            
00001706                            RunPLC_ROM:
00001706 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000170C D040                       		add.w	d0,d0
0000170E 3031 0000                  		move.w	(a1,d0.w),d0
00001712 43F1 0000                  		lea	(a1,d0.w),a1
00001716 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001718                            
00001718                            RunPLC_Loop:
00001718 2059                       		movea.l	(a1)+,a0	; get art pointer
0000171A 7000                       		moveq	#0,d0
0000171C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000171E E588                       		lsl.l	#2,d0		; divide address by $20
00001720 E448                       		lsr.w	#2,d0
00001722 0040 4000                  		ori.w	#$4000,d0
00001726 4840                       		swap	d0
00001728 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000172E 6100 FD2A                  		bsr.w	NemDec		; decompress
00001732 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001736 4E75                       		rts	
00001738                            ; End of function RunPLC_ROM
00001738                            
00001738                            ; ---------------------------------------------------------------------------
00001738                            ; Enigma decompression algorithm
00001738                            ; ---------------------------------------------------------------------------
00001738                            
00001738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001738                            
00001738                            
00001738                            EniDec:
00001738 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000173C 3640                       		movea.w	d0,a3
0000173E 1018                       		move.b	(a0)+,d0
00001740 4880                       		ext.w	d0
00001742 3A40                       		movea.w	d0,a5
00001744 1818                       		move.b	(a0)+,d4
00001746 E70C                       		lsl.b	#3,d4
00001748 3458                       		movea.w	(a0)+,a2
0000174A D4CB                       		adda.w	a3,a2
0000174C 3858                       		movea.w	(a0)+,a4
0000174E D8CB                       		adda.w	a3,a4
00001750 1A18                       		move.b	(a0)+,d5
00001752 E145                       		asl.w	#8,d5
00001754 1A18                       		move.b	(a0)+,d5
00001756 7C10                       		moveq	#$10,d6
00001758                            
00001758                            loc_173E:				; XREF: loc_1768
00001758 7007                       		moveq	#7,d0
0000175A 3E06                       		move.w	d6,d7
0000175C 9E40                       		sub.w	d0,d7
0000175E 3205                       		move.w	d5,d1
00001760 EE69                       		lsr.w	d7,d1
00001762 0241 007F                  		andi.w	#$7F,d1
00001766 3401                       		move.w	d1,d2
00001768 0C41 0040                  		cmpi.w	#$40,d1
0000176C 6400                       		bcc.s	loc_1758
0000176E 7006                       		moveq	#6,d0
00001770 E24A                       		lsr.w	#1,d2
00001772                            
00001772                            loc_1758:
00001772 6100 0000                  		bsr.w	sub_188C
00001776 0242 000F                  		andi.w	#$F,d2
0000177A E849                       		lsr.w	#4,d1
0000177C D241                       		add.w	d1,d1
0000177E 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001782                            ; End of function EniDec
00001782                            
00001782                            ; ===========================================================================
00001782                            
00001782                            loc_1768:				; XREF: loc_17B4
00001782 32CA                       		move.w	a2,(a1)+
00001784 524A                       		addq.w	#1,a2
00001786 51CA FFFA                  		dbf	d2,loc_1768
0000178A 60CC                       		bra.s	loc_173E
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1772:				; XREF: loc_17B4
0000178C 32CC                       		move.w	a4,(a1)+
0000178E 51CA FFFC                  		dbf	d2,loc_1772
00001792 60C4                       		bra.s	loc_173E
00001794                            ; ===========================================================================
00001794                            
00001794                            loc_177A:				; XREF: loc_17B4
00001794 6100 0000                  		bsr.w	loc_17DC
00001798                            
00001798                            loc_177E:
00001798 32C1                       		move.w	d1,(a1)+
0000179A 51CA FFFC                  		dbf	d2,loc_177E
0000179E 60B8                       		bra.s	loc_173E
000017A0                            ; ===========================================================================
000017A0                            
000017A0                            loc_1786:				; XREF: loc_17B4
000017A0 6100 0000                  		bsr.w	loc_17DC
000017A4                            
000017A4                            loc_178A:
000017A4 32C1                       		move.w	d1,(a1)+
000017A6 5241                       		addq.w	#1,d1
000017A8 51CA FFFA                  		dbf	d2,loc_178A
000017AC 60AA                       		bra.s	loc_173E
000017AE                            ; ===========================================================================
000017AE                            
000017AE                            loc_1794:				; XREF: loc_17B4
000017AE 6100 0000                  		bsr.w	loc_17DC
000017B2                            
000017B2                            loc_1798:
000017B2 32C1                       		move.w	d1,(a1)+
000017B4 5341                       		subq.w	#1,d1
000017B6 51CA FFFA                  		dbf	d2,loc_1798
000017BA 609C                       		bra.s	loc_173E
000017BC                            ; ===========================================================================
000017BC                            
000017BC                            loc_17A2:				; XREF: loc_17B4
000017BC 0C42 000F                  		cmpi.w	#$F,d2
000017C0 6700                       		beq.s	loc_17C4
000017C2                            
000017C2                            loc_17A8:
000017C2 6100 0000                  		bsr.w	loc_17DC
000017C6 32C1                       		move.w	d1,(a1)+
000017C8 51CA FFF8                  		dbf	d2,loc_17A8
000017CC 608A                       		bra.s	loc_173E
000017CE                            ; ===========================================================================
000017CE                            
000017CE                            loc_17B4:				; XREF: EniDec
000017CE 60B2                       		bra.s	loc_1768
000017D0                            ; ===========================================================================
000017D0 60B0                       		bra.s	loc_1768
000017D2                            ; ===========================================================================
000017D2 60B8                       		bra.s	loc_1772
000017D4                            ; ===========================================================================
000017D4 60B6                       		bra.s	loc_1772
000017D6                            ; ===========================================================================
000017D6 60BC                       		bra.s	loc_177A
000017D8                            ; ===========================================================================
000017D8 60C6                       		bra.s	loc_1786
000017DA                            ; ===========================================================================
000017DA 60D2                       		bra.s	loc_1794
000017DC                            ; ===========================================================================
000017DC 60DE                       		bra.s	loc_17A2
000017DE                            ; ===========================================================================
000017DE                            
000017DE                            loc_17C4:				; XREF: loc_17A2
000017DE 5348                       		subq.w	#1,a0
000017E0 0C46 0010                  		cmpi.w	#$10,d6
000017E4 6600                       		bne.s	loc_17CE
000017E6 5348                       		subq.w	#1,a0
000017E8                            
000017E8                            loc_17CE:
000017E8 3008                       		move.w	a0,d0
000017EA E248                       		lsr.w	#1,d0
000017EC 6400                       		bcc.s	loc_17D6
000017EE 5248                       		addq.w	#1,a0
000017F0                            
000017F0                            loc_17D6:
000017F0 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017F4 4E75                       		rts	
000017F6                            ; ===========================================================================
000017F6                            
000017F6                            loc_17DC:				; XREF: loc_17A2
000017F6 360B                       		move.w	a3,d3
000017F8 1204                       		move.b	d4,d1
000017FA D201                       		add.b	d1,d1
000017FC 6400                       		bcc.s	loc_17EE
000017FE 5346                       		subq.w	#1,d6
00001800 0D05                       		btst	d6,d5
00001802 6700                       		beq.s	loc_17EE
00001804 0043 8000                  		ori.w	#-$8000,d3
00001808                            
00001808                            loc_17EE:
00001808 D201                       		add.b	d1,d1
0000180A 6400                       		bcc.s	loc_17FC
0000180C 5346                       		subq.w	#1,d6
0000180E 0D05                       		btst	d6,d5
00001810 6700                       		beq.s	loc_17FC
00001812 0643 4000                  		addi.w	#$4000,d3
00001816                            
00001816                            loc_17FC:
00001816 D201                       		add.b	d1,d1
00001818 6400                       		bcc.s	loc_180A
0000181A 5346                       		subq.w	#1,d6
0000181C 0D05                       		btst	d6,d5
0000181E 6700                       		beq.s	loc_180A
00001820 0643 2000                  		addi.w	#$2000,d3
00001824                            
00001824                            loc_180A:
00001824 D201                       		add.b	d1,d1
00001826 6400                       		bcc.s	loc_1818
00001828 5346                       		subq.w	#1,d6
0000182A 0D05                       		btst	d6,d5
0000182C 6700                       		beq.s	loc_1818
0000182E 0043 1000                  		ori.w	#$1000,d3
00001832                            
00001832                            loc_1818:
00001832 D201                       		add.b	d1,d1
00001834 6400                       		bcc.s	loc_1826
00001836 5346                       		subq.w	#1,d6
00001838 0D05                       		btst	d6,d5
0000183A 6700                       		beq.s	loc_1826
0000183C 0043 0800                  		ori.w	#$800,d3
00001840                            
00001840                            loc_1826:
00001840 3205                       		move.w	d5,d1
00001842 3E06                       		move.w	d6,d7
00001844 9E4D                       		sub.w	a5,d7
00001846 6400                       		bcc.s	loc_1856
00001848 3C07                       		move.w	d7,d6
0000184A 0646 0010                  		addi.w	#$10,d6
0000184E 4447                       		neg.w	d7
00001850 EF69                       		lsl.w	d7,d1
00001852 1A10                       		move.b	(a0),d5
00001854 EF3D                       		rol.b	d7,d5
00001856 DE47                       		add.w	d7,d7
00001858 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
0000185C D245                       		add.w	d5,d1
0000185E                            
0000185E                            loc_1844:				; XREF: loc_1868
0000185E 300D                       		move.w	a5,d0
00001860 D040                       		add.w	d0,d0
00001862 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001866 D243                       		add.w	d3,d1
00001868 1A18                       		move.b	(a0)+,d5
0000186A E14D                       		lsl.w	#8,d5
0000186C 1A18                       		move.b	(a0)+,d5
0000186E 4E75                       		rts	
00001870                            ; ===========================================================================
00001870                            
00001870                            loc_1856:				; XREF: loc_1826
00001870 6700                       		beq.s	loc_1868
00001872 EE69                       		lsr.w	d7,d1
00001874 300D                       		move.w	a5,d0
00001876 D040                       		add.w	d0,d0
00001878 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000187C D243                       		add.w	d3,d1
0000187E 300D                       		move.w	a5,d0
00001880 6000                       		bra.s	sub_188C
00001882                            ; ===========================================================================
00001882                            
00001882                            loc_1868:				; XREF: loc_1856
00001882 7C10                       		moveq	#$10,d6
00001884                            
00001884                            loc_186A:
00001884 60D8                       		bra.s	loc_1844
00001886                            ; ===========================================================================
00001886 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
0000189C 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
000018A6                            
000018A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A6                            
000018A6                            
000018A6                            sub_188C:				; XREF: EniDec
000018A6 9C40                       		sub.w	d0,d6
000018A8 0C46 0009                  		cmpi.w	#9,d6
000018AC 6400                       		bcc.s	locret_189A
000018AE 5046                       		addq.w	#8,d6
000018B0 E145                       		asl.w	#8,d5
000018B2 1A18                       		move.b	(a0)+,d5
000018B4                            
000018B4                            locret_189A:
000018B4 4E75                       		rts	
000018B6                            ; End of function sub_188C
000018B6                            
000018B6                            ; ---------------------------------------------------------------------------
000018B6                            ; Kosinski decompression algorithm
000018B6                            ; ---------------------------------------------------------------------------
000018B6                            
000018B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018B6                            
000018B6                            
000018B6                            KosDec:
000018B6                            
000018B6 =FFFFFFFE                  var_2		= -2
000018B6 =FFFFFFFF                  var_1		= -1
000018B6                            
000018B6 558F                       		subq.l	#2,sp
000018B8 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018BC 1E98                       		move.b	(a0)+,(sp)
000018BE 3A17                       		move.w	(sp),d5
000018C0 780F                       		moveq	#$F,d4
000018C2                            
000018C2                            loc_18A8:
000018C2 E24D                       		lsr.w	#1,d5
000018C4 40C6                       		move	sr,d6
000018C6 51CC 0000                  		dbf	d4,loc_18BA
000018CA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018CE 1E98                       		move.b	(a0)+,(sp)
000018D0 3A17                       		move.w	(sp),d5
000018D2 780F                       		moveq	#$F,d4
000018D4                            
000018D4                            loc_18BA:
000018D4 44C6                       		move	d6,ccr
000018D6 6400                       		bcc.s	loc_18C2
000018D8 12D8                       		move.b	(a0)+,(a1)+
000018DA 60E6                       		bra.s	loc_18A8
000018DC                            ; ===========================================================================
000018DC                            
000018DC                            loc_18C2:				; XREF: KosDec
000018DC 7600                       		moveq	#0,d3
000018DE E24D                       		lsr.w	#1,d5
000018E0 40C6                       		move	sr,d6
000018E2 51CC 0000                  		dbf	d4,loc_18D6
000018E6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018EA 1E98                       		move.b	(a0)+,(sp)
000018EC 3A17                       		move.w	(sp),d5
000018EE 780F                       		moveq	#$F,d4
000018F0                            
000018F0                            loc_18D6:
000018F0 44C6                       		move	d6,ccr
000018F2 6500                       		bcs.s	loc_1906
000018F4 E24D                       		lsr.w	#1,d5
000018F6 51CC 0000                  		dbf	d4,loc_18EA
000018FA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018FE 1E98                       		move.b	(a0)+,(sp)
00001900 3A17                       		move.w	(sp),d5
00001902 780F                       		moveq	#$F,d4
00001904                            
00001904                            loc_18EA:
00001904 E353                       		roxl.w	#1,d3
00001906 E24D                       		lsr.w	#1,d5
00001908 51CC 0000                  		dbf	d4,loc_18FC
0000190C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001910 1E98                       		move.b	(a0)+,(sp)
00001912 3A17                       		move.w	(sp),d5
00001914 780F                       		moveq	#$F,d4
00001916                            
00001916                            loc_18FC:
00001916 E353                       		roxl.w	#1,d3
00001918 5243                       		addq.w	#1,d3
0000191A 74FF                       		moveq	#-1,d2
0000191C 1418                       		move.b	(a0)+,d2
0000191E 6000                       		bra.s	loc_191C
00001920                            ; ===========================================================================
00001920                            
00001920                            loc_1906:				; XREF: loc_18C2
00001920 1018                       		move.b	(a0)+,d0
00001922 1218                       		move.b	(a0)+,d1
00001924 74FF                       		moveq	#-1,d2
00001926 1401                       		move.b	d1,d2
00001928 EB4A                       		lsl.w	#5,d2
0000192A 1400                       		move.b	d0,d2
0000192C 0241 0007                  		andi.w	#7,d1
00001930 6700                       		beq.s	loc_1928
00001932 1601                       		move.b	d1,d3
00001934 5243                       		addq.w	#1,d3
00001936                            
00001936                            loc_191C:
00001936 1031 2000                  		move.b	(a1,d2.w),d0
0000193A 12C0                       		move.b	d0,(a1)+
0000193C 51CB FFF8                  		dbf	d3,loc_191C
00001940 6080                       		bra.s	loc_18A8
00001942                            ; ===========================================================================
00001942                            
00001942                            loc_1928:				; XREF: loc_1906
00001942 1218                       		move.b	(a0)+,d1
00001944 6700                       		beq.s	loc_1938
00001946 0C01 0001                  		cmpi.b	#1,d1
0000194A 6700 FF76                  		beq.w	loc_18A8
0000194E 1601                       		move.b	d1,d3
00001950 60E4                       		bra.s	loc_191C
00001952                            ; ===========================================================================
00001952                            
00001952                            loc_1938:				; XREF: loc_1928
00001952 548F                       		addq.l	#2,sp
00001954 4E75                       		rts	
00001956                            ; End of function KosDec
00001956                            
00001956                            ; ---------------------------------------------------------------------------
00001956                            ; Pallet cycling routine loading subroutine
00001956                            ; ---------------------------------------------------------------------------
00001956                            
00001956                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001956                            
00001956                            
00001956                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001956 7400                       		moveq	#0,d2
00001958 7000                       		moveq	#0,d0
0000195A 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ: Is truth nuke flag set?
0000195E 6600                       		bne.s	PalCycle_Stop	; GMZ: If yes, branch
00001960 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001964 D040                       		add.w	d0,d0		; multiply by 2
00001966 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000196A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000196E                            
0000196E                            PalCycle_Stop:
0000196E 4E75                       		rts
00001970                            ; End of function PalCycle_Load
00001970                            
00001970                            ; ===========================================================================
00001970                            ; ---------------------------------------------------------------------------
00001970                            ; Pallet cycling routines
00001970                            ; ---------------------------------------------------------------------------
00001970 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001972 0000                       		dc.w PalCycle_LZ-PalCycle
00001974 0000                       		dc.w PalCycle_MZ-PalCycle
00001976 0000                       		dc.w PalCycle_SLZ-PalCycle
00001978 0000                       		dc.w PalCycle_SYZ-PalCycle
0000197A 0000                       		dc.w PalCycle_SBZ-PalCycle
0000197C 0000                       		dc.w PalCycle_GHZ-PalCycle
0000197E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001980                            
00001980                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001980                            
00001980                            
00001980                            PalCycle_Title:				; XREF: TitleScreen
00001980 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001986 6000                       		bra.s	loc_196A
00001988                            ; ===========================================================================
00001988                            
00001988                            PalCycle_GHZ:				; XREF: PalCycle
00001988 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000198E                            
0000198E                            loc_196A:				; XREF: PalCycle_Title
0000198E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001992 6A00                       		bpl.s	locret_1990
00001994 31FC 0005 F634             		move.w	#5,($FFFFF634).w
0000199A 3038 F632                  		move.w	($FFFFF632).w,d0
0000199E 5278 F632                  		addq.w	#1,($FFFFF632).w
000019A2 0240 0003                  		andi.w	#3,d0
000019A6 E748                       		lsl.w	#3,d0
000019A8 43F8 FB50                  		lea	($FFFFFB50).w,a1
000019AC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019B0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019B4                            
000019B4                            locret_1990:
000019B4 4E75                       		rts	
000019B6                            ; End of function PalCycle_Title
000019B6                            
000019B6                            
000019B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019B6                            
000019B6                            
000019B6                            PalCycle_LZ:				; XREF: PalCycle
000019B6 5378 F634                  		subq.w	#1,($FFFFF634).w
000019BA 6A00                       		bpl.s	loc_19D8
000019BC 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000019C2 3038 F632                  		move.w	($FFFFF632).w,d0
000019C6 5278 F632                  		addq.w	#1,($FFFFF632).w
000019CA 0240 0003                  		andi.w	#3,d0
000019CE E748                       		lsl.w	#3,d0
000019D0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019D6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000019DC 6600                       		bne.s	loc_19C0
000019DE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000019E4                            
000019E4                            loc_19C0:
000019E4 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019E8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019EC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019F0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000019F4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019F8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019FC                            
000019FC                            loc_19D8:
000019FC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001A00 0240 0007                  		andi.w	#7,d0
00001A04 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001A08 6700                       		beq.s	locret_1A3A
00001A0A 7201                       		moveq	#1,d1
00001A0C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001A10 6700                       		beq.s	loc_19F0
00001A12 4441                       		neg.w	d1
00001A14                            
00001A14                            loc_19F0:
00001A14 3038 F650                  		move.w	($FFFFF650).w,d0
00001A18 0240 0003                  		andi.w	#3,d0
00001A1C D041                       		add.w	d1,d0
00001A1E 0C40 0003                  		cmpi.w	#3,d0
00001A22 6500                       		bcs.s	loc_1A0A
00001A24 3200                       		move.w	d0,d1
00001A26 7000                       		moveq	#0,d0
00001A28 4A41                       		tst.w	d1
00001A2A 6A00                       		bpl.s	loc_1A0A
00001A2C 7002                       		moveq	#2,d0
00001A2E                            
00001A2E                            loc_1A0A:
00001A2E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A32 D040                       		add.w	d0,d0
00001A34 3200                       		move.w	d0,d1
00001A36 D040                       		add.w	d0,d0
00001A38 D041                       		add.w	d1,d0
00001A3A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A40 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A44 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A48 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A4C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A52 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001A56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A5E                            
00001A5E                            locret_1A3A:
00001A5E 4E75                       		rts	
00001A60                            ; End of function PalCycle_LZ
00001A60                            
00001A60                            ; ===========================================================================
00001A60 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A68                            ; ===========================================================================
00001A68                            
00001A68                            PalCycle_MZ:				; XREF: PalCycle
00001A68 4E75                       		rts	
00001A6A                            
00001A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A6A                            
00001A6A                            
00001A6A                            PalCycle_SLZ:				; XREF: PalCycle
00001A6A 4E75                       		rts	
00001A6C                            ; End of function PalCycle_SLZ
00001A6C                            
00001A6C                            
00001A6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A6C                            
00001A6C                            
00001A6C                            PalCycle_SYZ:				; XREF: PalCycle
00001A6C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A70 6A00                       		bpl.s	locret_1AC6
00001A72 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A78 3038 F632                  		move.w	($FFFFF632).w,d0
00001A7C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A80 0240 0003                  		andi.w	#3,d0
00001A84 E548                       		lsl.w	#2,d0
00001A86 3200                       		move.w	d0,d1
00001A88 D040                       		add.w	d0,d0
00001A8A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001A90 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001A94 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A98 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A9C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001AA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001AA6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001AAA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001AB0                            
00001AB0                            locret_1AC6:
00001AB0 4E75                       		rts	
00001AB2                            ; End of function PalCycle_SYZ
00001AB2                            
00001AB2                            
00001AB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB2                            
00001AB2                            
00001AB2                            PalCycle_SBZ:				; XREF: PalCycle
00001AB2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001AB8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001ABC 6700                       		beq.s	loc_1ADA
00001ABE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001AC4                            
00001AC4                            loc_1ADA:
00001AC4 43F8 F650                  		lea	($FFFFF650).w,a1
00001AC8 321A                       		move.w	(a2)+,d1
00001ACA                            
00001ACA                            loc_1AE0:
00001ACA 5311                       		subq.b	#1,(a1)
00001ACC 6B00                       		bmi.s	loc_1AEA
00001ACE 5489                       		addq.l	#2,a1
00001AD0 5C8A                       		addq.l	#6,a2
00001AD2 6000                       		bra.s	loc_1B06
00001AD4                            ; ===========================================================================
00001AD4                            
00001AD4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001AD4 12DA                       		move.b	(a2)+,(a1)+
00001AD6 1011                       		move.b	(a1),d0
00001AD8 5200                       		addq.b	#1,d0
00001ADA B01A                       		cmp.b	(a2)+,d0
00001ADC 6500                       		bcs.s	loc_1AF6
00001ADE 7000                       		moveq	#0,d0
00001AE0                            
00001AE0                            loc_1AF6:
00001AE0 12C0                       		move.b	d0,(a1)+
00001AE2 0240 000F                  		andi.w	#$F,d0
00001AE6 D040                       		add.w	d0,d0
00001AE8 305A                       		movea.w	(a2)+,a0
00001AEA 365A                       		movea.w	(a2)+,a3
00001AEC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001AF0                            
00001AF0                            loc_1B06:				; XREF: PalCycle_SBZ
00001AF0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001AF4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AF8 6A00                       		bpl.s	locret_1B64
00001AFA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B00 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B06 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B0A 6700                       		beq.s	loc_1B2E
00001B0C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B12 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B18                            
00001B18                            loc_1B2E:
00001B18 72FF                       		moveq	#-1,d1
00001B1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B1E 6700                       		beq.s	loc_1B38
00001B20 4441                       		neg.w	d1
00001B22                            
00001B22                            loc_1B38:
00001B22 3038 F632                  		move.w	($FFFFF632).w,d0
00001B26 0240 0003                  		andi.w	#3,d0
00001B2A D041                       		add.w	d1,d0
00001B2C 0C40 0003                  		cmpi.w	#3,d0
00001B30 6500                       		bcs.s	loc_1B52
00001B32 3200                       		move.w	d0,d1
00001B34 7000                       		moveq	#0,d0
00001B36 4A41                       		tst.w	d1
00001B38 6A00                       		bpl.s	loc_1B52
00001B3A 7002                       		moveq	#2,d0
00001B3C                            
00001B3C                            loc_1B52:
00001B3C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B40 D040                       		add.w	d0,d0
00001B42 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B4A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B4E                            
00001B4E                            locret_1B64:
00001B4E 4E75                       		rts	
00001B50                            ; End of function PalCycle_SBZ
00001B50                            
00001B50                            ; ===========================================================================
00001B50                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001B70                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001B90                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001BB0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001BC2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001BD4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C3C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001C60                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001C80                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001C90                            
00001C90                            Pal_SBZCycList:
00001C90                            	include "_inc\SBZ pallet script 1.asm"
00001C90                            ; ---------------------------------------------------------------------------
00001C90                            ; Scrap Brain Zone 1 pallet cycling script
00001C90                            ; ---------------------------------------------------------------------------
00001C90 0008                       	dc.w 8			; number of entries - 1
00001C92 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001C94 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001C96 FB50                       	dc.w $FB50		; RAM address
00001C98 0D08                       	dc.b $D, 8
00001C9A 0000                       	dc.w Pal_SBZCyc2
00001C9C FB52                       	dc.w $FB52
00001C9E 0E08                       	dc.b $E, 8
00001CA0 0000                       	dc.w Pal_SBZCyc3
00001CA2 FB6E                       	dc.w $FB6E
00001CA4 0B08                       	dc.b $B, 8
00001CA6 0000                       	dc.w Pal_SBZCyc5
00001CA8 FB70                       	dc.w $FB70
00001CAA 0708                       	dc.b 7,	8
00001CAC 0000                       	dc.w Pal_SBZCyc6
00001CAE FB72                       	dc.w $FB72
00001CB0 1C10                       	dc.b $1C, $10
00001CB2 0000                       	dc.w Pal_SBZCyc7
00001CB4 FB7E                       	dc.w $FB7E
00001CB6 0303                       	dc.b 3,	3
00001CB8 0000                       	dc.w Pal_SBZCyc8
00001CBA FB78                       	dc.w $FB78
00001CBC 0303                       	dc.b 3,	3
00001CBE 0000                       	dc.w Pal_SBZCyc8+2
00001CC0 FB7A                       	dc.w $FB7A
00001CC2 0303                       	dc.b 3,	3
00001CC4 0000                       	dc.w Pal_SBZCyc8+4
00001CC6 FB7C                       	dc.w $FB7C
00001CC8                            	even
00001CC8                            	even
00001CC8                            
00001CC8                            Pal_SBZCycList2:
00001CC8                            	include "_inc\SBZ pallet script 2.asm"
00001CC8                            ; ---------------------------------------------------------------------------
00001CC8                            ; Scrap Brain Zone 2 pallet cycling script
00001CC8                            ; ---------------------------------------------------------------------------
00001CC8 0006                       	dc.w 6
00001CCA 0708                       	dc.b 7,	8
00001CCC 0000                       	dc.w Pal_SBZCyc1
00001CCE FB50                       	dc.w $FB50
00001CD0 0D08                       	dc.b $D, 8
00001CD2 0000                       	dc.w Pal_SBZCyc2
00001CD4 FB52                       	dc.w $FB52
00001CD6 0908                       	dc.b 9,	8
00001CD8 0000                       	dc.w Pal_SBZCyc9
00001CDA FB70                       	dc.w $FB70
00001CDC 0708                       	dc.b 7,	8
00001CDE 0000                       	dc.w Pal_SBZCyc6
00001CE0 FB72                       	dc.w $FB72
00001CE2 0303                       	dc.b 3,	3
00001CE4 0000                       	dc.w Pal_SBZCyc8
00001CE6 FB78                       	dc.w $FB78
00001CE8 0303                       	dc.b 3,	3
00001CEA 0000                       	dc.w Pal_SBZCyc8+2
00001CEC FB7A                       	dc.w $FB7A
00001CEE 0303                       	dc.b 3,	3
00001CF0 0000                       	dc.w Pal_SBZCyc8+4
00001CF2 FB7C                       	dc.w $FB7C
00001CF4                            	even
00001CF4                            	even
00001CF4                            
00001CF4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D04                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D14                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D24                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D30                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D40                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D50                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001D70                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001D7A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001D8A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001D96                            ; ---------------------------------------------------------------------------
00001D96                            ; Subroutine to	fade out and fade in
00001D96                            ; ---------------------------------------------------------------------------
00001D96                            
00001D96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D96                            
00001D96                            
00001D96                            Pal_FadeTo:
00001D96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001D9C                            
00001D9C                            Pal_FadeTo2:
00001D9C 7000                       		moveq	#0,d0
00001D9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001DA6 D0C0                       		adda.w	d0,a0
00001DA8 7200                       		moveq	#0,d1
00001DAA 1038 F627                  		move.b	($FFFFF627).w,d0
00001DAE                            
00001DAE                            Pal_ToBlack:
00001DAE 30C1                       		move.w	d1,(a0)+
00001DB0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001DB4                            
00001DB4 383C 0015                  		move.w	#$15,d4
00001DB8 1A3C 0009                  		move.b	#9,d5
00001DBC                            
00001DBC                            loc_1DCE:
00001DBC 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001DC2 6100 0000                  		bsr.w	DelayProgram
00001DC6 6100                       		bsr.s	Pal_FadeIn
00001DC8 6100 F83C                  		bsr.w	RunPLC_RAM
00001DCC 51CC FFEE                  		dbf	d4,loc_1DCE
00001DD0 4E75                       		rts	
00001DD2                            ; End of function Pal_FadeTo
00001DD2                            
00001DD2                            ; ---------------------------------------------------------------------------
00001DD2                            ; Pallet fade-in subroutine
00001DD2                            ; ---------------------------------------------------------------------------
00001DD2                            
00001DD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DD2                            
00001DD2                            
00001DD2                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001DD2 7000                       		moveq	#0,d0
00001DD4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DD8 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001DDC 1038 F626                  		move.b	($FFFFF626).w,d0
00001DE0 D0C0                       		adda.w	d0,a0
00001DE2 D2C0                       		adda.w	d0,a1
00001DE4 1038 F627                  		move.b	($FFFFF627).w,d0
00001DE8                            
00001DE8                            loc_1DFA:
00001DE8 6100                       		bsr.s	Pal_AddColor
00001DEA 51C8 FFFC                  		dbf	d0,loc_1DFA
00001DEE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001DF4 6600                       		bne.s	locret_1E24
00001DF6 7000                       		moveq	#0,d0
00001DF8 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001DFC 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001E00 1038 F626                  		move.b	($FFFFF626).w,d0
00001E04 D0C0                       		adda.w	d0,a0
00001E06 D2C0                       		adda.w	d0,a1
00001E08 1038 F627                  		move.b	($FFFFF627).w,d0
00001E0C                            
00001E0C                            loc_1E1E:
00001E0C 6100                       		bsr.s	Pal_AddColor
00001E0E 51C8 FFFC                  		dbf	d0,loc_1E1E
00001E12                            
00001E12                            locret_1E24:
00001E12 4E75                       		rts	
00001E14                            ; End of function Pal_FadeIn
00001E14                            
00001E14                            
00001E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E14                            
00001E14                            
00001E14                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E14 3419                       		move.w	(a1)+,d2
00001E16 3610                       		move.w	(a0),d3
00001E18 B642                       		cmp.w	d2,d3
00001E1A 6700                       		beq.s	loc_1E4E
00001E1C 3203                       		move.w	d3,d1
00001E1E 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E22 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E24 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E26 30C1                       		move.w	d1,(a0)+	; update pallet
00001E28 4E75                       		rts	
00001E2A                            ; ===========================================================================
00001E2A                            
00001E2A                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E2A 3203                       		move.w	d3,d1
00001E2C 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E30 B242                       		cmp.w	d2,d1
00001E32 6200                       		bhi.s	Pal_AddRed
00001E34 30C1                       		move.w	d1,(a0)+	; update pallet
00001E36 4E75                       		rts	
00001E38                            ; ===========================================================================
00001E38                            
00001E38                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E38 5458                       		addq.w	#2,(a0)+	; increase red value
00001E3A 4E75                       		rts	
00001E3C                            ; ===========================================================================
00001E3C                            
00001E3C                            loc_1E4E:				; XREF: Pal_AddColor
00001E3C 5448                       		addq.w	#2,a0
00001E3E 4E75                       		rts	
00001E40                            ; End of function Pal_AddColor
00001E40                            
00001E40                            
00001E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E40                            
00001E40                            PalFadeOut:
00001E40                            Pal_FadeFrom:
00001E40 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E46 383C 0015                  		move.w	#$15,d4
00001E4A                            loc_1E5C:
00001E4A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E50 6100 0000                  		bsr.w	DelayProgram
00001E54 6100                       		bsr.s	Pal_FadeOut
00001E56 6100 F7AE                  		bsr.w	RunPLC_RAM
00001E5A 51CC FFEE                  		dbf	d4,loc_1E5C
00001E5E 4E75                       		rts	
00001E60                            ; End of function Pal_FadeFrom
00001E60                            
00001E60                            ; ---------------------------------------------------------------------------
00001E60                            ; Pallet fade-out subroutine
00001E60                            ; ---------------------------------------------------------------------------
00001E60                            
00001E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E60                            
00001E60                            
00001E60                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E60 7000                       		moveq	#0,d0
00001E62 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E66 1038 F626                  		move.b	($FFFFF626).w,d0
00001E6A D0C0                       		adda.w	d0,a0
00001E6C 1038 F627                  		move.b	($FFFFF627).w,d0
00001E70                            
00001E70                            loc_1E82:
00001E70 6100                       		bsr.s	Pal_DecColor
00001E72 51C8 FFFC                  		dbf	d0,loc_1E82
00001E76                            
00001E76 7000                       		moveq	#0,d0
00001E78 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E7C 1038 F626                  		move.b	($FFFFF626).w,d0
00001E80 D0C0                       		adda.w	d0,a0
00001E82 1038 F627                  		move.b	($FFFFF627).w,d0
00001E86                            
00001E86                            loc_1E98:
00001E86 6100                       		bsr.s	Pal_DecColor
00001E88 51C8 FFFC                  		dbf	d0,loc_1E98
00001E8C 4E75                       		rts	
00001E8E                            ; End of function Pal_FadeOut
00001E8E                            
00001E8E                            
00001E8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E8E                            
00001E8E                            
00001E8E                            Pal_DecColor:				; XREF: Pal_FadeOut
00001E8E 3410                       		move.w	(a0),d2
00001E90 6700                       		beq.s	loc_1ECC
00001E92 3202                       		move.w	d2,d1
00001E94 0241 000E                  		andi.w	#$E,d1
00001E98 6700                       		beq.s	Pal_DecGreen
00001E9A 5558                       		subq.w	#2,(a0)+	; decrease red value
00001E9C 4E75                       		rts	
00001E9E                            ; ===========================================================================
00001E9E                            
00001E9E                            Pal_DecGreen:				; XREF: Pal_DecColor
00001E9E 3202                       		move.w	d2,d1
00001EA0 0241 00E0                  		andi.w	#$E0,d1
00001EA4 6700                       		beq.s	Pal_DecBlue
00001EA6 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001EAA 4E75                       		rts	
00001EAC                            ; ===========================================================================
00001EAC                            
00001EAC                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001EAC 3202                       		move.w	d2,d1
00001EAE 0241 0E00                  		andi.w	#$E00,d1
00001EB2 6700                       		beq.s	loc_1ECC
00001EB4 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001EB8 4E75                       		rts	
00001EBA                            ; ===========================================================================
00001EBA                            
00001EBA                            loc_1ECC:				; XREF: Pal_DecColor
00001EBA 5448                       		addq.w	#2,a0
00001EBC 4E75                       		rts	
00001EBE                            ; End of function Pal_DecColor
00001EBE                            
00001EBE                            ; ---------------------------------------------------------------------------
00001EBE                            ; Subroutine to	fill the pallet	with white (special stage)
00001EBE                            ; ---------------------------------------------------------------------------
00001EBE                            
00001EBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EBE                            
00001EBE                            
00001EBE                            Pal_MakeWhite:				; XREF: SpecialStage
00001EBE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001EC4 7000                       		moveq	#0,d0
00001EC6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001ECA 1038 F626                  		move.b	($FFFFF626).w,d0
00001ECE D0C0                       		adda.w	d0,a0
00001ED0 323C 0EEE                  		move.w	#$EEE,d1
00001ED4 1038 F627                  		move.b	($FFFFF627).w,d0
00001ED8                            
00001ED8                            PalWhite_Loop:
00001ED8 30C1                       		move.w	d1,(a0)+
00001EDA 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EDE 383C 0015                  		move.w	#$15,d4
00001EE2                            
00001EE2                            loc_1EF4:
00001EE2 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001EE8 6100 0000                  		bsr.w	DelayProgram
00001EEC 6100                       		bsr.s	Pal_WhiteToBlack
00001EEE 6100 F716                  		bsr.w	RunPLC_RAM
00001EF2 51CC FFEE                  		dbf	d4,loc_1EF4
00001EF6 4E75                       		rts	
00001EF8                            ; End of function Pal_MakeWhite
00001EF8                            
00001EF8                            
00001EF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EF8                            
00001EF8                            
00001EF8                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001EF8 7000                       		moveq	#0,d0
00001EFA 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EFE 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F02 1038 F626                  		move.b	($FFFFF626).w,d0
00001F06 D0C0                       		adda.w	d0,a0
00001F08 D2C0                       		adda.w	d0,a1
00001F0A 1038 F627                  		move.b	($FFFFF627).w,d0
00001F0E                            
00001F0E                            loc_1F20:
00001F0E 6100                       		bsr.s	Pal_DecColor2
00001F10 51C8 FFFC                  		dbf	d0,loc_1F20
00001F14                            
00001F14 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F1A 6600                       		bne.s	locret_1F4A
00001F1C 7000                       		moveq	#0,d0
00001F1E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F22 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001F26 1038 F626                  		move.b	($FFFFF626).w,d0
00001F2A D0C0                       		adda.w	d0,a0
00001F2C D2C0                       		adda.w	d0,a1
00001F2E 1038 F627                  		move.b	($FFFFF627).w,d0
00001F32                            
00001F32                            loc_1F44:
00001F32 6100                       		bsr.s	Pal_DecColor2
00001F34 51C8 FFFC                  		dbf	d0,loc_1F44
00001F38                            
00001F38                            locret_1F4A:
00001F38 4E75                       		rts	
00001F3A                            ; End of function Pal_WhiteToBlack
00001F3A                            
00001F3A                            
00001F3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F3A                            
00001F3A                            
00001F3A                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F3A 3419                       		move.w	(a1)+,d2
00001F3C 3610                       		move.w	(a0),d3
00001F3E B642                       		cmp.w	d2,d3
00001F40 6700                       		beq.s	loc_1F78
00001F42 3203                       		move.w	d3,d1
00001F44 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F48 6500                       		bcs.s	loc_1F64
00001F4A B242                       		cmp.w	d2,d1
00001F4C 6500                       		bcs.s	loc_1F64
00001F4E 30C1                       		move.w	d1,(a0)+
00001F50 4E75                       		rts	
00001F52                            ; ===========================================================================
00001F52                            
00001F52                            loc_1F64:				; XREF: Pal_DecColor2
00001F52 3203                       		move.w	d3,d1
00001F54 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F58 6500                       		bcs.s	loc_1F74
00001F5A B242                       		cmp.w	d2,d1
00001F5C 6500                       		bcs.s	loc_1F74
00001F5E 30C1                       		move.w	d1,(a0)+
00001F60 4E75                       		rts	
00001F62                            ; ===========================================================================
00001F62                            
00001F62                            loc_1F74:				; XREF: loc_1F64
00001F62 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F64 4E75                       		rts	
00001F66                            ; ===========================================================================
00001F66                            
00001F66                            loc_1F78:				; XREF: Pal_DecColor2
00001F66 5448                       		addq.w	#2,a0
00001F68 4E75                       		rts	
00001F6A                            ; End of function Pal_DecColor2
00001F6A                            
00001F6A                            ; ---------------------------------------------------------------------------
00001F6A                            ; Subroutine to	make a white flash when	you enter a special stage
00001F6A                            ; ---------------------------------------------------------------------------
00001F6A                            
00001F6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F6A                            
00001F6A                            
00001F6A                            Pal_MakeFlash:				; XREF: SpecialStage
00001F6A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F70 383C 0015                  		move.w	#$15,d4
00001F74                            
00001F74                            loc_1F86:
00001F74 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F7A 6100 0000                  		bsr.w	DelayProgram
00001F7E 6100                       		bsr.s	Pal_ToWhite
00001F80 6100 F684                  		bsr.w	RunPLC_RAM
00001F84 51CC FFEE                  		dbf	d4,loc_1F86
00001F88 4E75                       		rts	
00001F8A                            ; End of function Pal_MakeFlash
00001F8A                            
00001F8A                            
00001F8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F8A                            
00001F8A                            
00001F8A                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F8A 7000                       		moveq	#0,d0
00001F8C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F90 1038 F626                  		move.b	($FFFFF626).w,d0
00001F94 D0C0                       		adda.w	d0,a0
00001F96 1038 F627                  		move.b	($FFFFF627).w,d0
00001F9A                            
00001F9A                            loc_1FAC:
00001F9A 6100                       		bsr.s	Pal_AddColor2
00001F9C 51C8 FFFC                  		dbf	d0,loc_1FAC
00001FA0 7000                       		moveq	#0,d0
00001FA2 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FA6 1038 F626                  		move.b	($FFFFF626).w,d0
00001FAA D0C0                       		adda.w	d0,a0
00001FAC 1038 F627                  		move.b	($FFFFF627).w,d0
00001FB0                            
00001FB0                            loc_1FC2:
00001FB0 6100                       		bsr.s	Pal_AddColor2
00001FB2 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FB6 4E75                       		rts	
00001FB8                            ; End of function Pal_ToWhite
00001FB8                            
00001FB8                            
00001FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB8                            
00001FB8                            
00001FB8                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FB8 3410                       		move.w	(a0),d2
00001FBA 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FBE 6700                       		beq.s	loc_2006
00001FC0 3202                       		move.w	d2,d1
00001FC2 0241 000E                  		andi.w	#$E,d1
00001FC6 0C41 000E                  		cmpi.w	#$E,d1
00001FCA 6700                       		beq.s	loc_1FE2
00001FCC 5458                       		addq.w	#2,(a0)+	; increase red value
00001FCE 4E75                       		rts	
00001FD0                            ; ===========================================================================
00001FD0                            
00001FD0                            loc_1FE2:				; XREF: Pal_AddColor2
00001FD0 3202                       		move.w	d2,d1
00001FD2 0241 00E0                  		andi.w	#$E0,d1
00001FD6 0C41 00E0                  		cmpi.w	#$E0,d1
00001FDA 6700                       		beq.s	loc_1FF4
00001FDC 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FE0 4E75                       		rts	
00001FE2                            ; ===========================================================================
00001FE2                            
00001FE2                            loc_1FF4:				; XREF: loc_1FE2
00001FE2 3202                       		move.w	d2,d1
00001FE4 0241 0E00                  		andi.w	#$E00,d1
00001FE8 0C41 0E00                  		cmpi.w	#$E00,d1
00001FEC 6700                       		beq.s	loc_2006
00001FEE 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001FF2 4E75                       		rts	
00001FF4                            ; ===========================================================================
00001FF4                            
00001FF4                            loc_2006:				; XREF: Pal_AddColor2
00001FF4 5448                       		addq.w	#2,a0
00001FF6 4E75                       		rts	
00001FF8                            ; End of function Pal_AddColor2
00001FF8                            
00001FF8                            ; ---------------------------------------------------------------------------
00001FF8                            ; Pallet cycling routine - Sega	logo
00001FF8                            ; ---------------------------------------------------------------------------
00001FF8                            
00001FF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF8                            
00001FF8                            
00001FF8                            PalCycle_Sega:				; XREF: SegaScreen
00001FF8 4A38 F635                  		tst.b	($FFFFF635).w
00001FFC 6600                       		bne.s	loc_206A
00001FFE 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002002 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002008 7205                       		moveq	#5,d1
0000200A 3038 F632                  		move.w	($FFFFF632).w,d0
0000200E                            
0000200E                            loc_2020:
0000200E 6A00                       		bpl.s	loc_202A
00002010 5448                       		addq.w	#2,a0
00002012 5341                       		subq.w	#1,d1
00002014 5440                       		addq.w	#2,d0
00002016 60F6                       		bra.s	loc_2020
00002018                            ; ===========================================================================
00002018                            
00002018                            loc_202A:				; XREF: PalCycle_Sega
00002018 3400                       		move.w	d0,d2
0000201A 0242 001E                  		andi.w	#$1E,d2
0000201E 6600                       		bne.s	loc_2034
00002020 5440                       		addq.w	#2,d0
00002022                            
00002022                            loc_2034:
00002022 0C40 0060                  		cmpi.w	#$60,d0
00002026 6400                       		bcc.s	loc_203E
00002028 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000202C                            
0000202C                            loc_203E:
0000202C 5440                       		addq.w	#2,d0
0000202E 51C9 FFE8                  		dbf	d1,loc_202A
00002032 3038 F632                  		move.w	($FFFFF632).w,d0
00002036 5440                       		addq.w	#2,d0
00002038 3400                       		move.w	d0,d2
0000203A 0242 001E                  		andi.w	#$1E,d2
0000203E 6600                       		bne.s	loc_2054
00002040 5440                       		addq.w	#2,d0
00002042                            
00002042                            loc_2054:
00002042 0C40 0064                  		cmpi.w	#$64,d0
00002046 6D00                       		blt.s	loc_2062
00002048 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000204E 70F4                       		moveq	#-$C,d0
00002050                            
00002050                            loc_2062:
00002050 31C0 F632                  		move.w	d0,($FFFFF632).w
00002054 7001                       		moveq	#1,d0
00002056 4E75                       		rts	
00002058                            ; ===========================================================================
00002058                            
00002058                            loc_206A:				; XREF: loc_202A
00002058 5338 F634                  		subq.b	#1,($FFFFF634).w
0000205C 6A00                       		bpl.s	loc_20BC
0000205E 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002064 3038 F632                  		move.w	($FFFFF632).w,d0
00002068 0640 000C                  		addi.w	#$C,d0
0000206C 0C40 0030                  		cmpi.w	#$30,d0
00002070 6500                       		bcs.s	loc_2088
00002072 7000                       		moveq	#0,d0
00002074 4E75                       		rts	
00002076                            ; ===========================================================================
00002076                            
00002076                            loc_2088:				; XREF: loc_206A
00002076 31C0 F632                  		move.w	d0,($FFFFF632).w
0000207A 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002080 41F0 0000                  		lea	(a0,d0.w),a0
00002084 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002088 22D8                       		move.l	(a0)+,(a1)+
0000208A 22D8                       		move.l	(a0)+,(a1)+
0000208C 3298                       		move.w	(a0)+,(a1)
0000208E 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002092 7000                       		moveq	#0,d0
00002094 722C                       		moveq	#$2C,d1
00002096                            
00002096                            loc_20A8:
00002096 3400                       		move.w	d0,d2
00002098 0242 001E                  		andi.w	#$1E,d2
0000209C 6600                       		bne.s	loc_20B2
0000209E 5440                       		addq.w	#2,d0
000020A0                            
000020A0                            loc_20B2:
000020A0 3390 0000                  		move.w	(a0),(a1,d0.w)
000020A4 5440                       		addq.w	#2,d0
000020A6 51C9 FFEE                  		dbf	d1,loc_20A8
000020AA                            
000020AA                            loc_20BC:
000020AA 7001                       		moveq	#1,d0
000020AC 4E75                       		rts	
000020AE                            ; End of function PalCycle_Sega
000020AE                            
000020AE                            ; ===========================================================================
000020AE                            
000020AE                            Pal_Sega1:	incbin	pallet\sega1.bin
000020BA                            Pal_Sega2:	incbin	pallet\sega2.bin
000020EA                            
000020EA                            ; ---------------------------------------------------------------------------
000020EA                            ; Subroutines to load pallets
000020EA                            ; ---------------------------------------------------------------------------
000020EA                            
000020EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020EA                            
000020EA                            
000020EA                            PalLoad1:
000020EA 43F9 0000 0000             		lea	(PalPointers).l,a1
000020F0 E748                       		lsl.w	#3,d0
000020F2 D2C0                       		adda.w	d0,a1
000020F4 2459                       		movea.l	(a1)+,a2
000020F6 3659                       		movea.w	(a1)+,a3
000020F8 D6FC 0080                  		adda.w	#$80,a3
000020FC 3E19                       		move.w	(a1)+,d7
000020FE                            
000020FE                            loc_2110:
000020FE 26DA                       		move.l	(a2)+,(a3)+
00002100 51CF FFFC                  		dbf	d7,loc_2110
00002104 4E75                       		rts	
00002106                            ; End of function PalLoad1
00002106                            
00002106                            
00002106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002106                            
00002106                            
00002106                            PalLoad2:
00002106 43F9 0000 0000             		lea	(PalPointers).l,a1
0000210C E748                       		lsl.w	#3,d0
0000210E D2C0                       		adda.w	d0,a1
00002110 2459                       		movea.l	(a1)+,a2
00002112 3659                       		movea.w	(a1)+,a3
00002114 3E19                       		move.w	(a1)+,d7
00002116                            
00002116                            loc_2128:
00002116 26DA                       		move.l	(a2)+,(a3)+
00002118 51CF FFFC                  		dbf	d7,loc_2128
0000211C 4E75                       		rts	
0000211E                            ; End of function PalLoad2
0000211E                            
0000211E                            ; ---------------------------------------------------------------------------
0000211E                            ; Underwater pallet loading subroutine
0000211E                            ; ---------------------------------------------------------------------------
0000211E                            
0000211E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000211E                            
0000211E                            
0000211E                            PalLoad3_Water:
0000211E 43F9 0000 0000             		lea	(PalPointers).l,a1
00002124 E748                       		lsl.w	#3,d0
00002126 D2C0                       		adda.w	d0,a1
00002128 2459                       		movea.l	(a1)+,a2
0000212A 3659                       		movea.w	(a1)+,a3
0000212C 96FC 0080                  		suba.w	#$80,a3
00002130 3E19                       		move.w	(a1)+,d7
00002132                            
00002132                            loc_2144:
00002132 26DA                       		move.l	(a2)+,(a3)+
00002134 51CF FFFC                  		dbf	d7,loc_2144
00002138 4E75                       		rts	
0000213A                            ; End of function PalLoad3_Water
0000213A                            
0000213A                            
0000213A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000213A                            
0000213A                            
0000213A                            PalLoad4_Water:
0000213A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002140 E748                       		lsl.w	#3,d0
00002142 D2C0                       		adda.w	d0,a1
00002144 2459                       		movea.l	(a1)+,a2
00002146 3659                       		movea.w	(a1)+,a3
00002148 96FC 0100                  		suba.w	#$100,a3
0000214C 3E19                       		move.w	(a1)+,d7
0000214E                            
0000214E                            loc_2160:
0000214E 26DA                       		move.l	(a2)+,(a3)+
00002150 51CF FFFC                  		dbf	d7,loc_2160
00002154 4E75                       		rts	
00002156                            ; End of function PalLoad4_Water
00002156                            
00002156                            ; ===========================================================================
00002156                            ; ---------------------------------------------------------------------------
00002156                            ; Pallet pointers
00002156                            ; ---------------------------------------------------------------------------
00002156                            PalPointers:
00002156                            	include "_inc\Pallet pointers.asm"
00002156                            ; ---------------------------------------------------------------------------
00002156                            ; Pallet pointers
00002156                            ; ---------------------------------------------------------------------------
00002156 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000215A FB00                       	dc.w $FB00		; RAM address
0000215C 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000215E 0000 0000                  	dc.l Pal_Title
00002162 FB00                       	dc.w $FB00
00002164 001F                       	dc.w $1F
00002166 0000 0000                  	dc.l Pal_LevelSel
0000216A FB00                       	dc.w $FB00
0000216C 001F                       	dc.w $1F
0000216E 0000 0000                  	dc.l Pal_Sonic
00002172 FB00                       	dc.w $FB00
00002174 0007                       	dc.w 7
00002176 0000 0000                  	dc.l Pal_GHZ
0000217A FB20                       	dc.w $FB20
0000217C 0017                       	dc.w $17
0000217E 0000 0000                  	dc.l Pal_LZ
00002182 FB20                       	dc.w $FB20
00002184 0017                       	dc.w $17
00002186 0000 0000                  	dc.l Pal_MZ
0000218A FB20                       	dc.w $FB20
0000218C 0017                       	dc.w $17
0000218E 0000 0000                  	dc.l Pal_SLZ
00002192 FB20                       	dc.w $FB20
00002194 0017                       	dc.w $17
00002196 0000 0000                  	dc.l Pal_SYZ
0000219A FB20                       	dc.w $FB20
0000219C 0017                       	dc.w $17
0000219E 0000 0000                  	dc.l Pal_SBZ1
000021A2 FB20                       	dc.w $FB20
000021A4 0017                       	dc.w $17
000021A6 0000 0000                  	dc.l Pal_Special
000021AA FB00                       	dc.w $FB00
000021AC 001F                       	dc.w $1F
000021AE 0000 0000                  	dc.l Pal_LZWater
000021B2 FB00                       	dc.w $FB00
000021B4 001F                       	dc.w $1F
000021B6 0000 0000                  	dc.l Pal_SBZ3
000021BA FB20                       	dc.w $FB20
000021BC 0017                       	dc.w $17
000021BE 0000 0000                  	dc.l Pal_SBZ3Water
000021C2 FB00                       	dc.w $FB00
000021C4 001F                       	dc.w $1F
000021C6 0000 0000                  	dc.l Pal_SBZ2
000021CA FB20                       	dc.w $FB20
000021CC 0017                       	dc.w $17
000021CE 0000 0000                  	dc.l Pal_LZSonWater
000021D2 FB00                       	dc.w $FB00
000021D4 0007                       	dc.w 7
000021D6 0000 0000                  	dc.l Pal_SBZ3SonWat
000021DA FB00                       	dc.w $FB00
000021DC 0007                       	dc.w 7
000021DE 0000 0000                  	dc.l Pal_SpeResult
000021E2 FB00                       	dc.w $FB00
000021E4 001F                       	dc.w $1F
000021E6 0000 0000                  	dc.l Pal_SpeContinue
000021EA FB00                       	dc.w $FB00
000021EC 000F                       	dc.w $F
000021EE 0000 0000                  	dc.l Pal_Ending
000021F2 FB00                       	dc.w $FB00
000021F4 001F                       	dc.w $1F
000021F6 0000 0000                  	dc.l Pal_Idiot
000021FA FB20                       	dc.w $FB20
000021FC 0007                       	dc.w 7
000021FE 0000 0000                  	dc.l Pal_BHZ
00002202 FB20                       	dc.w $FB20
00002204 0017                       	dc.w $17
00002206 0000 0000                  	dc.l Pal_Gronic
0000220A FB00                       	dc.w $FB00
0000220C 0007                       	dc.w 7
0000220E 0000 0000                  	dc.l Pal_LZGroWater
00002212 FB00                       	dc.w $FB00
00002214 0007                       	dc.w 7
00002216 0000 0000                  	dc.l Pal_SBZ3GroWat
0000221A FB00                       	dc.w $FB00
0000221C 0007                       	dc.w 7
0000221E 0000 0000                  	dc.l Pal_Anakama
00002222 FB00                       	dc.w $FB00
00002224 0007                       	dc.w 7
00002224 0007                       	dc.w 7
00002226                            
00002226                            ; ---------------------------------------------------------------------------
00002226                            ; Pallet data
00002226                            ; ---------------------------------------------------------------------------
00002226                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000022A6                            Pal_Title:	incbin	pallet\title.bin
00002326                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000023A6                            Pal_Sonic:	incbin	pallet\sonic.bin
000023C6                            Pal_GHZ:	incbin	pallet\ghz.bin
00002426                            Pal_LZ:		incbin	pallet\lz.bin
00002486                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002506                            Pal_MZ:		incbin	pallet\mz.bin
00002566                            Pal_SLZ:	incbin	pallet\slz.bin
000025C6                            Pal_SYZ:	incbin	pallet\syz.bin
00002626                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002686                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026E6                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002766                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000027C6                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002846                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002866                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002886                            Pal_BHZ:	incbin	pallet\bhz.bin
000028E6                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002966                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
000029A6                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002A26                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002A46                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002A66                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002A86                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002AA6                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002B26                            
00002B26                            ; ---------------------------------------------------------------------------
00002B26                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002B26                            ; ---------------------------------------------------------------------------
00002B26                            
00002B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B26                            
00002B26                            VSync:
00002B26                            DelayProgram:				; XREF: PauseGame
00002B26 46FC 2300                  		move	#$2300,sr
00002B2A                            
00002B2A                            loc_29AC:
00002B2A 4A38 F62A                  		tst.b	($FFFFF62A).w
00002B2E 66FA                       		bne.s	loc_29AC
00002B30 4E75                       		rts	
00002B32                            ; End of function DelayProgram
00002B32                            
00002B32                            ; ---------------------------------------------------------------------------
00002B32                            ; Subroutine to	generate a pseudo-random number	in d0
00002B32                            ; ---------------------------------------------------------------------------
00002B32                            
00002B32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B32                            
00002B32                            CalcRandom: 
00002B32                            RandomNumber:
00002B32 2238 F636                  		move.l	($FFFFF636).w,d1
00002B36 6600                       		bne.s	loc_29C0
00002B38 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002B3E                            
00002B3E                            loc_29C0:
00002B3E 2001                       		move.l	d1,d0
00002B40 E581                       		asl.l	#2,d1
00002B42 D280                       		add.l	d0,d1
00002B44 E781                       		asl.l	#3,d1
00002B46 D280                       		add.l	d0,d1
00002B48 3001                       		move.w	d1,d0
00002B4A 4841                       		swap	d1
00002B4C D041                       		add.w	d1,d0
00002B4E 3200                       		move.w	d0,d1
00002B50 4841                       		swap	d1
00002B52 21C1 F636                  		move.l	d1,($FFFFF636).w
00002B56 4E75                       		rts	
00002B58                            ; End of function RandomNumber
00002B58                            
00002B58                            
00002B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002B58                            
00002B58                            CalcSinCos:
00002B58                            CalcSine:				; XREF: SS_BGAnimate; et al
00002B58 0240 00FF                  		andi.w	#$FF,d0
00002B5C D040                       		add.w	d0,d0
00002B5E 0640 0080                  		addi.w	#$80,d0
00002B62 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002B66 0440 0080                  		subi.w	#$80,d0
00002B6A 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002B6E 4E75                       		rts	
00002B70                            ; End of function CalcSine
00002B70                            
00002B70                            ; ===========================================================================
00002B70                            
00002B70                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002DF0                            
00002DF0                            ; ===========================================================================
00002DF0 48E7 6000                  		movem.l	d1-d2,-(sp)
00002DF4 3200                       		move.w	d0,d1
00002DF6 4841                       		swap	d1
00002DF8 7000                       		moveq	#0,d0
00002DFA 3200                       		move.w	d0,d1
00002DFC 7407                       		moveq	#7,d2
00002DFE                            
00002DFE                            loc_2C80:
00002DFE E599                       		rol.l	#2,d1
00002E00 D040                       		add.w	d0,d0
00002E02 5240                       		addq.w	#1,d0
00002E04 9240                       		sub.w	d0,d1
00002E06 6400                       		bcc.s	loc_2C9A
00002E08 D240                       		add.w	d0,d1
00002E0A 5340                       		subq.w	#1,d0
00002E0C 51CA FFF0                  		dbf	d2,loc_2C80
00002E10 E248                       		lsr.w	#1,d0
00002E12 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002E16 4E75                       		rts	
00002E18                            ; ===========================================================================
00002E18                            
00002E18                            loc_2C9A:
00002E18 5240                       		addq.w	#1,d0
00002E1A 51CA FFE2                  		dbf	d2,loc_2C80
00002E1E E248                       		lsr.w	#1,d0
00002E20 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002E24 4E75                       		rts	
00002E26                            
00002E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E26                            
00002E26                            
00002E26                            CalcAngle:
00002E26 48E7 1800                  		movem.l	d3-d4,-(sp)
00002E2A 7600                       		moveq	#0,d3
00002E2C 7800                       		moveq	#0,d4
00002E2E 3601                       		move.w	d1,d3
00002E30 3802                       		move.w	d2,d4
00002E32 8843                       		or.w	d3,d4
00002E34 6700                       		beq.s	loc_2D04
00002E36 3802                       		move.w	d2,d4
00002E38 4A43                       		tst.w	d3
00002E3A 6A00 0000                  		bpl.w	loc_2CC2
00002E3E 4443                       		neg.w	d3
00002E40                            
00002E40                            loc_2CC2:
00002E40 4A44                       		tst.w	d4
00002E42 6A00 0000                  		bpl.w	loc_2CCA
00002E46 4444                       		neg.w	d4
00002E48                            
00002E48                            loc_2CCA:
00002E48 B843                       		cmp.w	d3,d4
00002E4A 6400 0000                  		bcc.w	loc_2CDC
00002E4E E18C                       		lsl.l	#8,d4
00002E50 88C3                       		divu.w	d3,d4
00002E52 7000                       		moveq	#0,d0
00002E54 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002E58 6000                       		bra.s	loc_2CE6
00002E5A                            ; ===========================================================================
00002E5A                            
00002E5A                            loc_2CDC:				; XREF: CalcAngle
00002E5A E18B                       		lsl.l	#8,d3
00002E5C 86C4                       		divu.w	d4,d3
00002E5E 7040                       		moveq	#$40,d0
00002E60 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002E64                            
00002E64                            loc_2CE6:
00002E64 4A41                       		tst.w	d1
00002E66 6A00 0000                  		bpl.w	loc_2CF2
00002E6A 4440                       		neg.w	d0
00002E6C 0640 0080                  		addi.w	#$80,d0
00002E70                            
00002E70                            loc_2CF2:
00002E70 4A42                       		tst.w	d2
00002E72 6A00 0000                  		bpl.w	loc_2CFE
00002E76 4440                       		neg.w	d0
00002E78 0640 0100                  		addi.w	#$100,d0
00002E7C                            
00002E7C                            loc_2CFE:
00002E7C 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002E80 4E75                       		rts	
00002E82                            ; ===========================================================================
00002E82                            
00002E82                            loc_2D04:				; XREF: CalcAngle
00002E82 303C 0040                  		move.w	#$40,d0
00002E86 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002E8A 4E75                       		rts	
00002E8C                            ; End of function CalcAngle
00002E8C                            
00002E8C                            ; ===========================================================================
00002E8C                            
00002E8C                            Angle_Data:	incbin	misc\angles.bin
00002F8E                            
00002F8E                            ; ===========================================================================
00002F8E                            
00002F8E                            ; ---------------------------------------------------------------------------
00002F8E                            ; Sega screen
00002F8E                            ; ---------------------------------------------------------------------------
00002F8E                            
00002F8E                            SegaScreen:				; XREF: GameModeArray
00002F8E 103C 00E4                  		move.b	#$E4,d0
00002F92 6100 E422                  		bsr.w	PlaySound_Special ; stop music
00002F96 6100 E660                  		bsr.w	ClearPLC
00002F9A 6100 EEA4                  		bsr.w	Pal_FadeFrom
00002F9E 4DF9 00C0 0004             		lea	($C00004).l,a6
00002FA4 3CBC 8004                  		move.w	#$8004,(a6)
00002FA8 3CBC 8230                  		move.w	#$8230,(a6)
00002FAC 3CBC 8407                  		move.w	#$8407,(a6)
00002FB0 3CBC 8700                  		move.w	#$8700,(a6)
00002FB4 3CBC 8B00                  		move.w	#$8B00,(a6)
00002FB8 3CBC 8C81                  		move.w	#$8C81,(a6)
00002FBC 4238 F64E                  		clr.b	($FFFFF64E).w
00002FC0 46FC 2700                  		move	#$2700,sr
00002FC4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002FC8 0200 00BF                  		andi.b	#$BF,d0
00002FCC 33C0 00C0 0004             		move.w	d0,($C00004).l
00002FD2 6100 E30A                  		bsr.w	ClearScreen
00002FD6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002FE0 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002FE6 6100 E472                  		bsr.w	NemDec
00002FEA 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FF0 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002FF6 303C 0000                  		move.w	#0,d0
00002FFA 6100 E73C                  		bsr.w	EniDec
00002FFE 43F9 00FF 0000             		lea	($FF0000).l,a1
00003004 203C 6510 0003             		move.l	#$65100003,d0
0000300A 7217                       		moveq	#$17,d1
0000300C 7407                       		moveq	#7,d2
0000300E 6100 E42A                  		bsr.w	ShowVDPGraphics
00003012 43F9 00FF 0180             		lea	($FF0180).l,a1
00003018 203C 4000 0003             		move.l	#$40000003,d0
0000301E 7227                       		moveq	#$27,d1
00003020 741B                       		moveq	#$1B,d2
00003022 6100 E416                  		bsr.w	ShowVDPGraphics
00003026 7000                       		moveq	#0,d0
00003028 6100 F0DC                  		bsr.w	PalLoad2	; load Sega logo pallet
0000302C 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003032 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003038 31FC 0000 F662             		move.w	#0,($FFFFF662).w
0000303E 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003044 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003048 0000 0040                  		ori.b	#$40,d0
0000304C 33C0 00C0 0004             		move.w	d0,($C00004).l
00003052                            
00003052                            Sega_WaitPallet:
00003052 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003058 6100 FACC                  		bsr.w	DelayProgram
0000305C 6100 EF9A                  		bsr.w	PalCycle_Sega
00003060 66F0                       		bne.s	Sega_WaitPallet
00003062                            
00003062 103C 00E1                  		move.b	#$E1,d0
00003066 6100 E34E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
0000306A 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003070 6100 FAB4                  		bsr.w	DelayProgram
00003074 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000307A                            
0000307A                            Sega_WaitEnd:
0000307A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003080 6100 FAA4                  		bsr.w	DelayProgram
00003084 4A78 F614                  		tst.w	($FFFFF614).w
00003088 6700                       		beq.s	Sega_GotoTitle
0000308A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003090 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003092                            
00003092                            Sega_GotoTitle:
00003092 11FC 0004 F600             		move.b	#$4,($FFFFF600).w ; go to title screen
00003098 4E75                       		rts	
0000309A                            ; ===========================================================================
0000309A                            
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            ; Title	screen
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            
0000309A                            TitleScreen:				; XREF: GameModeArray
0000309A 103C 00E4                  		move.b	#$E4,d0
0000309E 6100 E316                  		bsr.w	PlaySound_Special ; stop music
000030A2 6100 ED9C                  		bsr.w	Pal_FadeFrom
000030A6 6100 E550                  		bsr.w	ClearPLC
000030AA 46FC 2700                  		move	#$2700,sr
000030AE 6100 E2BC                  		bsr.w	SoundDriverLoad
000030B2 4DF9 00C0 0004             		lea	($C00004).l,a6
000030B8 3CBC 8004                  		move.w	#$8004,(a6)
000030BC 3CBC 8230                  		move.w	#$8230,(a6)
000030C0 3CBC 8407                  		move.w	#$8407,(a6)
000030C4 3CBC 9001                  		move.w	#$9001,(a6)
000030C8 3CBC 9200                  		move.w	#$9200,(a6)
000030CC 3CBC 8B03                  		move.w	#$8B03,(a6)
000030D0 3CBC 8720                  		move.w	#$8720,(a6)
000030D4 4238 F64E                  		clr.b	($FFFFF64E).w
000030D8 6100 E204                  		bsr.w	ClearScreen
000030DC 43F8 D000                  		lea	($FFFFD000).w,a1
000030E0 7000                       		moveq	#0,d0
000030E2 323C 07FF                  		move.w	#$7FF,d1
000030E6                            
000030E6                            Title_ClrObjRam:
000030E6 22C0                       		move.l	d0,(a1)+
000030E8 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000030EC                            
000030EC                            ; gomer
000030EC 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030F6 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
000030FC 6100 E35C                  		bsr.w	NemDec
00003100 7003                       		moveq	#3,d0		; load Sonic's pallet
00003102 6100 EFE6                  		bsr.w	PalLoad1
00003106                            
00003106 43F9 00FF 0000             		lea	($FF0000).l,a1
0000310C 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
00003112 303C 0000                  		move.w	#0,d0
00003116 6100 E620                  		bsr.w	EniDec
0000311A                            ; help how the fuck can i do this IT SHOWS NOTHING
0000311A 6100 EC7A                  		bsr.w	Pal_FadeTo
0000311E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003124 203C 4000 0003             		move.l	#$40000003,d0
0000312A 7227                       		moveq	#$27,d1
0000312C 741B                       		moveq	#$1B,d2
0000312E 6100 E30A                  		bsr.w	ShowVDPGraphics
00003132                            
00003132                            
00003132 43F9 00FF 0000             		lea	($FF0000).l,a1
00003138 203C 6000 0003             		move.l	#$60000003,d0
0000313E 7227                       		moveq	#$27,d1
00003140 741B                       		moveq	#$1B,d2
00003142                            
00003142 6100 ECFC                  		bsr.w	Pal_FadeFrom
00003146                            
00003146                            
00003146 6100 E196                  		bsr.w	ClearScreen
0000314A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003154 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000315A 6100 E2FE                  		bsr.w	NemDec
0000315E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003168 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000316E 6100 E2EA                  		bsr.w	NemDec
00003172 43F9 00FF 0000             		lea	($FF0000).l,a1
00003178 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000317E 303C 0000                  		move.w	#0,d0
00003182 6100 E5B4                  		bsr.w	EniDec
00003186 43F9 00FF 0000             		lea	($FF0000).l,a1
0000318C 203C 4000 0003             		move.l	#$40000003,d0
00003192 7227                       		moveq	#$27,d1
00003194 741B                       		moveq	#$1B,d2
00003196 6100 E2A2                  		bsr.w	ShowVDPGraphics
0000319A 6100 ECA4                  		bsr.w	Pal_FadeFrom
0000319E 43F8 FB80                  		lea	($FFFFFB80).w,a1
000031A2 7000                       		moveq	#0,d0
000031A4 323C 001F                  		move.w	#$1F,d1
000031A8                            
000031A8                            
000031A8                            Title_ClrPallet:
000031A8 22C0                       		move.l	d0,(a1)+
000031AA 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000031AE                            
000031AE 7003                       		moveq	#3,d0		; load Sonic's pallet
000031B0 6100 EF38                  		bsr.w	PalLoad1
000031B4 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000031BA 4EB9 0000 0000             		jsr	ObjectsLoad
000031C0 4EB9 0000 0000             		jsr	BuildSprites
000031C6 6100 EBCE                  		bsr.w	Pal_FadeTo
000031CA 46FC 2700                  		move	#$2700,sr
000031CE 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000031D8 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000031DE 6100 E27A                  		bsr.w	NemDec
000031E2 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000031EC 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000031F2 6100 E266                  		bsr.w	NemDec
000031F6 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003200 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003206 6100 E252                  		bsr.w	NemDec
0000320A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003210 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003218 4BF9 0000 060E             		lea	(Art_Text).l,a5
0000321E 323C 09AA                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003222                            
00003222                            Title_LoadText:
00003222 2C9D                       		move.l	(a5)+,(a6)
00003224 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003228                            
00003228 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000322E 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003234 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000323A 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003240 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003246 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000324C 6100 0000                  		bsr.w	LevelSizeLoad
00003250 6100 0000                  		bsr.w	DeformBgLayer
00003254                            
00003254 43F8 B000                  		lea	($FFFFB000).w,a1
00003258 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000325E 303C 0000                  		move.w	#0,d0
00003262 6100 E4D4                  		bsr.w	EniDec
00003266 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
0000326C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003272 6100 E642                  		bsr.w	KosDec
00003276 6100 0000                  		bsr.w	LevelLayoutLoad
0000327A                            
0000327A 46FC 2700                  		move	#$2700,sr
0000327E 6100 E05E                  		bsr.w	ClearScreen
00003282 4BF9 00C0 0004             		lea	($C00004).l,a5
00003288 4DF9 00C0 0000             		lea	($C00000).l,a6
0000328E 47F8 F708                  		lea	($FFFFF708).w,a3
00003292 49F8 A440                  		lea	($FFFFA440).w,a4
00003296 343C 6000                  		move.w	#$6000,d2
0000329A 6100 0000                  		bsr.w	LoadTilesFromStart2
0000329E 43F9 00FF 0000             		lea	($FF0000).l,a1
000032A4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000032AA 303C 0000                  		move.w	#0,d0
000032AE 6100 E488                  		bsr.w	EniDec
000032B2 43F9 00FF 0000             		lea	($FF0000).l,a1
000032B8 203C 4206 0003             		move.l	#$42060003,d0
000032BE 7221                       		moveq	#$21,d1
000032C0 7415                       		moveq	#$15,d2
000032C2 6100 E176                  		bsr.w	ShowVDPGraphics
000032C6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032D0 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000032D6 6100 E182                  		bsr.w	NemDec
000032DA 7001                       		moveq	#1,d0		; load title screen pallet
000032DC 6100 EE0C                  		bsr.w	PalLoad1
000032E0 103C 008A                  		move.b	#$8A,d0		; play title screen music
000032E4 6100 E0D0                  		bsr.w	PlaySound_Special
000032E8 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000032EE 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000032F4 43F8 D080                  		lea	($FFFFD080).w,a1
000032F8 7000                       		moveq	#0,d0
000032FA 323C 000F                  		move.w	#$F,d1
000032FE                            
000032FE                            Title_ClrObjRam2:
000032FE 22C0                       		move.l	d0,(a1)+
00003300 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003304                            
00003304 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000330A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003310 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003316 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000331C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003322 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003328 4EB9 0000 0000             		jsr	ObjectsLoad
0000332E 6100 0000                  		bsr.w	DeformBgLayer
00003332 4EB9 0000 0000             		jsr	BuildSprites
00003338 7000                       		moveq	#0,d0
0000333A 6100 E290                  		bsr.w	LoadPLC2
0000333E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003344 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000334A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000334E 0000 0040                  		ori.b	#$40,d0
00003352 33C0 00C0 0004             		move.w	d0,($C00004).l
00003358 6100 EA3C                  		bsr.w	Pal_FadeTo
0000335C                            
0000335C                            loc_317C:
0000335C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003362 6100 F7C2                  		bsr.w	DelayProgram
00003366 4EB9 0000 0000             		jsr	ObjectsLoad
0000336C 6100 0000                  		bsr.w	DeformBgLayer
00003370 4EB9 0000 0000             		jsr	BuildSprites
00003376 6100 E608                  		bsr.w	PalCycle_Title
0000337A 6100 E28A                  		bsr.w	RunPLC_RAM
0000337E 3038 D008                  		move.w	($FFFFD008).w,d0
00003382 5440                       		addq.w	#2,d0
00003384 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003388 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000338C 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000338E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003394 4E75                       		rts	
00003396                            ; ===========================================================================
00003396                            
00003396                            Title_ChkRegion:
00003396 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000339A 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000339C 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000033A2 6000                       		bra.s	Title_EnterCheat
000033A4                            ; ===========================================================================
000033A4                            
000033A4                            Title_RegionJ:				; XREF: Title_ChkRegion
000033A4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000033AA                            
000033AA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000033AA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000033AE D0C0                       		adda.w	d0,a0
000033B0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000033B4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000033B8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000033BA 6600                       		bne.s	loc_3210	; if not, branch
000033BC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000033C0 4A00                       		tst.b	d0
000033C2 6600                       		bne.s	Title_CountC
000033C4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000033C8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000033CC E249                       		lsr.w	#1,d1
000033CE 0241 0003                  		andi.w	#3,d1
000033D2 6700                       		beq.s	Title_PlayRing
000033D4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000033D8 6A00                       		bpl.s	Title_PlayRing
000033DA 7201                       		moveq	#1,d1
000033DC 1181 1001                  		move.b	d1,1(a0,d1.w)
000033E0                            
000033E0                            Title_PlayRing:
000033E0 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000033E6 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000033EA 6100 DFCA                  		bsr.w	PlaySound_Special
000033EE 6000                       		bra.s	Title_CountC
000033F0                            ; ===========================================================================
000033F0                            
000033F0                            loc_3210:				; XREF: Title_EnterCheat
000033F0 4A00                       		tst.b	d0
000033F2 6700                       		beq.s	Title_CountC
000033F4 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000033FA 6700                       		beq.s	Title_CountC
000033FC 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003402                            
00003402                            Title_CountC:
00003402 1038 F605                  		move.b	($FFFFF605).w,d0
00003406 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000340A 6700                       		beq.s	loc_3230	; if not, branch
0000340C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003410                            
00003410                            loc_3230:
00003410 4A78 F614                  		tst.w	($FFFFF614).w
00003414 6700 0000                  		beq.w	Demo
00003418                            		; (temporary until we have an actual options screen)
00003418 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
0000341E 6700                       		beq.s	@notc
00003420                            
00003420 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003424 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
0000342A 6D00                       		blt.s	@notoverflow
0000342C 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003432                            	@notoverflow:
00003432 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003436 6100 DF7E                  		bsr.w	PlaySound_Special
0000343A                            	@notc:
0000343A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003440 6700 FF1A                  		beq.w	loc_317C	; if not, branch
00003444                            
00003444                            Title_ChkLevSel:
00003444 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000344A 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000344E                            		
0000344E                            		
0000344E 7002                       		moveq	#2,d0
00003450 6100 ECB4                  		bsr.w	PalLoad2	; load level select pallet
00003454 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003458 7000                       		moveq	#0,d0
0000345A 323C 00DF                  		move.w	#$DF,d1
0000345E                            
0000345E                            Title_ClrScroll:
0000345E 22C0                       		move.l	d0,(a1)+
00003460 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003464                            
00003464 21C0 F616                  		move.l	d0,($FFFFF616).w
00003468 46FC 2700                  		move	#$2700,sr
0000346C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003472 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000347C 323C 03FF                  		move.w	#$3FF,d1
00003480                            
00003480                            Title_ClrVram:
00003480 2C80                       		move.l	d0,(a6)
00003482 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003486                            
00003486 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000348A 6700 0000                  		beq.w	GotoOptions	; if not, play level
0000348E                            
0000348E 6100 0000                  		bsr.w	LevSelTextLoad
00003492                            		
00003492                            		; sound test fix
00003492 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003496 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
0000349C                            		
0000349C 363C C65F                  		move.w	#$C680-$21,d3 ; selected
000034A0 0C46 0014                  		cmpi.w	#$14,d6
000034A4 6700                       		beq.s	@issndtst
000034A6 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
000034AA                            	@issndtst:
000034AA 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000034AE 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000034B2                            		
000034B2 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000034B6 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000034BE                            		
000034BE 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000034C4 6700                       		beq.s	@issndtst2
000034C6                            		
000034C6 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000034CC 6100 0000                  		bsr.w	CStringSlop
000034D0 6000                       		bra.s	LevelSelect
000034D2                            	@issndtst2:
000034D2 43F9 0000 0000             		lea	(Controls_SND).l,a1
000034D8 6100 0000                  		bsr.w	CStringSlop
000034DC                            		
000034DC                            ; ---------------------------------------------------------------------------
000034DC                            ; Level	Select
000034DC                            ; ---------------------------------------------------------------------------
000034DC                            LevelSelect:
000034DC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000034E2 6100 F642                  		bsr.w	DelayProgram
000034E6 6100 0000                  		bsr.w	LevSelControls
000034EA 6100 E11A                  		bsr.w	RunPLC_RAM
000034EE 4AB8 F680                  		tst.l	($FFFFF680).w
000034F2 66E8                       		bne.s	LevelSelect
000034F4 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000034FA 67E0                       		beq.s	LevelSelect	; if not, branch
000034FC 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003500 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003504 6600                       		bne.s	@dont	; if not, dont blow this place up
00003506                            			
00003506 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
0000350C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003512 6100 F612                  		bsr.w	DelayProgram
00003516                            	@dont:
00003516 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
0000351A 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000351C                            		
0000351C 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003522 67B8                       		beq.s	LevelSelect	; if not, branch
00003524                            		
00003524 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
0000352A 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
0000352C                            		
0000352C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003530 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003534                            		
00003534 4EB9 0000 0000             		jsr		ShowNow_Playing
0000353A 60A0                       		bra.s	LevelSelect
0000353C                            ; ===========================================================================
0000353C                            
0000353C                            LevSel_SEGA:				; XREF: LevelSelect
0000353C 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003542 4E75                       		rts	
00003544                            ; ===========================================================================
00003544                            
00003544                            LevSel_Ending:				; XREF: LevelSelect
00003544 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
0000354A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003550 4E75                       		rts	
00003552                            ; ===========================================================================
00003552                            
00003552                            LevSel_Credits:				; XREF: LevelSelect
00003552 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003558 103C 0091                  		move.b	#$91,d0
0000355C 6100 DE58                  		bsr.w	PlaySound_Special ; play credits music
00003560 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003566 4E75                       		rts	
00003568                            ; ===========================================================================
00003568                            
00003568                            LevSel_Level_SS:			; XREF: LevelSelect
00003568 D040                       		add.w	d0,d0
0000356A 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000356E 6B00 FF6C                  		bmi.w	LevelSelect
00003572 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
00003576 6600                       		bne.s	LevSel_Level	; if not, branch
00003578 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000357E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003582 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003588 7000                       		moveq	#0,d0
0000358A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000358E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003592 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003596 4E75                       		rts	
00003598                            ; ===========================================================================
00003598                            
00003598                            LevSel_Level:				; XREF: LevSel_Level_SS
00003598 0240 3FFF                  		andi.w	#$3FFF,d0
0000359C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000035A0                            
000035A0                            PlayLevel:				; XREF: ROM:00003246j ...
000035A0 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000035A6 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000035AC 7000                       		moveq	#0,d0
000035AE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000035B2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000035B6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000035BA 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000035BE 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000035C2 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000035C6 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000035CA 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000035CE 103C 00E0                  		move.b	#$E0,d0
000035D2 6100 DDE2                  		bsr.w	PlaySound_Special ; fade out music
000035D6 4E75                       		rts	
000035D8                            ; ===========================================================================
000035D8                            ; ---------------------------------------------------------------------------
000035D8                            ; Level	select - level pointers
000035D8                            ; ---------------------------------------------------------------------------
000035D8                            LSelectPointers:
000035D8 0000                       		dc.w $0000 ; crz
000035DA 0001                       		dc.w $0001
000035DC 0002                       		dc.w $0002
000035DE 0100                       		dc.w $0100 ; ilfez
000035E0 0101                       		dc.w $0101
000035E2 0102                       		dc.w $0102
000035E4 0200                       		dc.w $0200 ; mz
000035E6 0201                       		dc.w $0201
000035E8 0202                       		dc.w $0202
000035EA 0300                       		dc.w $0300 ; dgrotz
000035EC 0301                       		dc.w $0301 
000035EE 0302                       		dc.w $0302 
000035F0 0700                       		dc.w $0700 ; the other mz...
000035F2 0701                       		dc.w $0701 
000035F4 0702                       		dc.w $0702 
000035F6 0400                       		dc.w $0400 ; tpfbz
000035F8 0401                       		dc.w $0401
000035FA 0402                       		dc.w $0402
000035FC 0500                       		dc.w $0500 ; zzzzz
000035FE 0501                       		dc.w $0501 
00003600 0103                       		dc.w $0103 
00003602 0502                       		dc.w $0502 ; fz
00003604 FFFF                       		dc.w $FFFF ; special
00003606 8000                       		dc.w $8000 ; sound test
00003608                            		even
00003608                            ; --------------------------------------
00003608                            ; ---------------------------------------------------------------------------
00003608                            ; Level	select codes
00003608                            ; ---------------------------------------------------------------------------
00003608                            LevelSelectCode_J:
00003608                            		incbin	misc\ls_jcode.bin
0000360E                            		even
0000360E                            
0000360E                            LevelSelectCode_US:
0000360E                            		incbin	misc\ls_ucode.bin
00003614                            		even
00003614                            ; ===========================================================================
00003614                            
00003614                            ; ---------------------------------------------------------------------------
00003614                            ; Demo mode
00003614                            ; ---------------------------------------------------------------------------
00003614                            
00003614                            Demo:					; XREF: TitleScreen
00003614 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000361A                            
0000361A                            loc_33B6:				; XREF: loc_33E4
0000361A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003620 6100 F504                  		bsr.w	DelayProgram
00003624 6100 0000                  		bsr.w	DeformBgLayer
00003628 6100 E32C                  		bsr.w	PalCycle_Load
0000362C 6100 DFD8                  		bsr.w	RunPLC_RAM
00003630 3038 D008                  		move.w	($FFFFD008).w,d0
00003634 5440                       		addq.w	#2,d0
00003636 31C0 D008                  		move.w	d0,($FFFFD008).w
0000363A 0C40 1C00                  		cmpi.w	#$1C00,d0
0000363E 6500                       		bcs.s	loc_33E4
00003640 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003646 4E75                       		rts	
00003648                            ; ===========================================================================
00003648                            
00003648                            loc_33E4:				; XREF: Demo
00003648 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000364E 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
00003652 4A78 F614                  		tst.w	($FFFFF614).w
00003656 6600 FFC2                  		bne.w	loc_33B6
0000365A 103C 00E0                  		move.b	#$E0,d0
0000365E 6100 DD56                  		bsr.w	PlaySound_Special ; fade out music
00003662 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003666 0240 0007                  		andi.w	#7,d0
0000366A D040                       		add.w	d0,d0
0000366C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003670 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003674 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003678 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000367E 6500                       		bcs.s	loc_3422	; if yes, branch
00003680 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003686                            
00003686                            loc_3422:
00003686 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
0000368C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003692 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003696 6600                       		bne.s	Demo_Level	; if not, branch
00003698 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000369E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000036A2 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000036A6                            
000036A6                            Demo_Level:
000036A6 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000036AC 7000                       		moveq	#0,d0
000036AE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000036B2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000036B6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000036BA 4E75                       		rts	
000036BC                            ; ===========================================================================
000036BC                            ; ---------------------------------------------------------------------------
000036BC                            ; Levels used in demos
000036BC                            ; ---------------------------------------------------------------------------
000036BC                            Demo_Levels:	incbin	misc\dm_ord1.bin
000036C4                            		even
000036C4                            
000036C4                            ; ---------------------------------------------------------------------------
000036C4                            ; Subroutine to	change what you're selecting in the level select
000036C4                            ; ---------------------------------------------------------------------------
000036C4                            
000036C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036C4                            
000036C4                            
000036C4                            LevSelControls:				; XREF: LevelSelect
000036C4 1238 F605                  		move.b	($FFFFF605).w,d1
000036C8 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000036CC 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000036CE 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000036D2 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000036D6                            
000036D6                            LevSel_UpDown:
000036D6 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000036DC 1238 F604                  		move.b	($FFFFF604).w,d1
000036E0 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000036E4 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000036E8 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000036EC 0801 0000                  		btst	#0,d1		; is up	pressed?
000036F0 6700                       		beq.s	LevSel_Down	; if not, branch
000036F2 5346                       		subq.w	#1,d6		; move up 1 selection
000036F4 6400                       		bcc.s	LevSel_Down
000036F6 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000036F8                            
000036F8                            LevSel_Down:
000036F8 0801 0001                  		btst	#1,d1		; is down pressed?
000036FC 6700                       		beq.s	LevSel_Refresh	; if not, branch
000036FE 5246                       		addq.w	#1,d6		; move down 1 selection
00003700 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003704 6500                       		bcs.s	LevSel_Refresh
00003706 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003708 6000                       		bra.s	LevSel_Refresh
0000370A                            		
0000370A                            LevSel_LR:
0000370A 0801 0002                  		btst	#2,d1		; is left pressed?
0000370E 6700                       		beq.s	LevSel_Right	; if not, branch
00003710 0446 0000                  		sub.w	#lsrow2size,d6
00003714 64E2                       		bcc.s	LevSel_Down
00003716 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
0000371A                            LevSel_Right:
0000371A 0801 0003                  		btst	#3,d1		; is right pressed?
0000371E 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003720 0646 0000                  		add.w	#lsrow1size,d6
00003724 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003728 6500                       		bcs.s	LevSel_Refresh
0000372A 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
0000372E                            ; ===========================================================================
0000372E                            LevSel_Refresh:
0000372E                            		
0000372E 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003732 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003736                            		
00003736 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
0000373C 6600                       		bne.s	@exitsndtest
0000373E                            		
0000373E 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003742 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00003748 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003750 6100 0000                  		bsr.w	CStringSlop
00003754                            	@exitsndtest:
00003754                            	
00003754 363C C65F                  		move.w	#$C680-$21,d3
00003758 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
0000375C 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003760                            		
00003760 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00003766 6600                       		bne.s	@entersndtest
00003768                            		
00003768 363C C65F                  		move.w	#$C680-$21,d3
0000376C 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003772 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000377A 6100 0000                  		bsr.w	CStringSlop
0000377E                            	@entersndtest:
0000377E 4E75                       		rts	
00003780                            		
00003780                            LevSel_SndTest:				; XREF: LevSelControls
00003780 1238 F605                  		move.b	($FFFFF605).w,d1
00003784 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003788 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000378A 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
00003790 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
00003794                            		
00003794 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003798 0801 0002                  		btst	#2,d1		; is left pressed?
0000379C 6700                       		beq.s	SndTest_Right	; if not, branch
0000379E 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
000037A0                            		; no need the fact it's a byte does the trick
000037A0                            
000037A0                            SndTest_Right:
000037A0 0801 0003                  		btst	#3,d1		; is right pressed?
000037A4 6700                       		beq.s	SndTest_A	; if not, branch
000037A6 5200                       		addq.b	#1,d0		; add 1	to sound test
000037A8                            		; same here
000037A8                            		
000037A8                            SndTest_A:
000037A8 0801 0006                  		btst	#6,d1		; is A pressed?
000037AC 6700                       		beq.s	SndTest_B	; if not, branch
000037AE 5100                       		subq.b	#8,d0		; subtract $10 to sound test
000037B0 5100                       		subq.b	#8,d0
000037B2                            		
000037B2                            SndTest_B:
000037B2 0801 0004                  		btst	#4,d1		; is B pressed?
000037B6 6700                       		beq.s	SndTest_Refresh	; if not, branch
000037B8 5000                       		addq.b	#8,d0		; add $10 to sound test
000037BA 5000                       		addq.b	#8,d0
000037BC                            
000037BC                            SndTest_Refresh:
000037BC 363C C65F                  		move.w	#$C680-$21,d3
000037C0 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000037C4 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000037C8                            
000037C8                            LevSel_NoMove:
000037C8 4E75                       		rts	
000037CA                            ; End of function LevSelControls
000037CA                            
000037CA                            ; ---------------------------------------------------------------------------
000037CA                            ; Subroutine to load level select text
000037CA                            ; ---------------------------------------------------------------------------
000037CA                            
000037CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037CA                            
000037CA                            LevSelTextLoad_loop:
000037CA 2D44 0004                  		move.l	d4,4(a6)
000037CE 6100 0000                  		bsr.w	LevSel_ChgLine
000037D2 0684 0080 0000             		addi.l	#$800000,d4
000037D8 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000037DC 4E75                       		rts
000037DE                            LevSelTextLoad:				; XREF: TitleScreen
000037DE 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000037E4 4DF9 00C0 0000             		lea	($C00000).l,a6
000037EA 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037EE 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000037F4                            		
000037F4 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000037F8 61D0                       		bsr.s	LevSelTextLoad_loop
000037FA                            		
000037FA                            		
000037FA 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003800 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003804 61C4                       		bsr.s	LevSelTextLoad_loop
00003806 363C C65F                  		move.w	#$C680-$21,d3
0000380A                            		
0000380A                            LevSelHighlightCode:
0000380A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003810 7000                       		moveq	#0,d0
00003812 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003816 3200                       		move.w	d0,d1
00003818 283C 6086 0003             		move.l	#lsscrpos,d4
0000381E                            		
0000381E 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003822 6D00                       		blt.s	@notsecond
00003824                            		
00003824 0440 0000                  		sub.w	#lsrow1size,d0
00003828 0684 0024 0000             		addi.l	#lsoff,d4
0000382E                            	@notsecond:
0000382E EF48                       		lsl.w	#7,d0
00003830 4840                       		swap	d0
00003832 D880                       		add.l	d0,d4
00003834 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000383A E749                       		lsl.w	#3,d1
0000383C D241                       		add.w	d1,d1
0000383E D2C1                       		adda.w	d1,a1
00003840 2D44 0004                  		move.l	d4,4(a6)
00003844 6100 0000                  		bsr.w	LevSel_ChgLine
00003848 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
0000384E 6700                       		beq.s	LevSelSndTest
00003850 4E75                       		rts
00003852                            
00003852                            LevSelSndTest:
00003852 0643 0030                  		add.w	#$30,d3
00003856 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003860 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003864 1400                       		move.b	d0,d2
00003866 E808                       		lsr.b	#4,d0
00003868 6100 0000                  		bsr.w	LevSel_ChgSnd
0000386C 1002                       		move.b	d2,d0
0000386E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003872 4E75                       		rts	
00003874                            ; End of function LevSelTextLoad
00003874                            
00003874                            
00003874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003874                            
00003874                            
00003874                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003874 0240 000F                  		andi.w	#$F,d0
00003878 0C00 000A                  		cmpi.b	#$A,d0
0000387C 6500                       		bcs.s	loc_3580
0000387E 5E00                       		addi.b	#7,d0
00003880                            
00003880                            loc_3580:
00003880 D043                       		add.w	d3,d0
00003882 3C80                       		move.w	d0,(a6)
00003884 4E75                       		rts	
00003886                            ; End of function LevSel_ChgSnd
00003886                            
00003886                            
00003886                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003886                            
00003886                            
00003886                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003886 740F                       		moveq	#$10-1,d2		; number of characters per line
00003888                            
00003888                            @loop:
00003888 7000                       		moveq	#0,d0
0000388A 1019                       		move.b	(a1)+,d0
0000388C 0C00 0020                  		cmpi.b	#$20,d0
00003890 6E00                       		bgt.s	@draw
00003892 3CBC 0000                  		move.w	#0,(a6)
00003896 51CA FFF0                  		dbf	d2,@loop
0000389A 4E75                       		rts	
0000389C                            ; ===========================================================================
0000389C                            
0000389C                            @draw:				; XREF: LevSel_ChgLine
0000389C D043                       		add.w	d3,d0
0000389E 3C80                       		move.w	d0,(a6)
000038A0 51CA FFE6                  		dbf	d2,@loop
000038A4 4E75                       		rts	
000038A6                            ; End of function LevSel_ChgLine
000038A6                            		
000038A6                            CStringSlop_draw:
000038A6 D043                       		add.w	d3,d0
000038A8 3C80                       		move.w	d0,(a6)
000038AA                            CStringSlop:				; XREF: LevSelTextLoad
000038AA 7000                       		moveq	#0,d0
000038AC 1019                       		move.b	(a1)+,d0
000038AE 0C00 0020                  		cmpi.b	#$20,d0
000038B2 6EF2                       		bgt.s	CStringSlop_draw
000038B4                            		
000038B4 0C00 0001                  		cmpi.b	#1,d0
000038B8 6700                       		beq.s	@InsertSpaces
000038BA 6500                       		blo.s	@end
000038BC                            		
000038BC 3CBC 0000                  		move.w	#0,(a6)
000038C0 60E8                       		bra.s	CStringSlop
000038C2                            	@end:
000038C2 4E75                       		rts
000038C4                            	@InsertSpaces:
000038C4 7000                       		moveq	#0,d0
000038C6 1019                       		move.b	(a1)+,d0
000038C8                            		
000038C8                            	@insert:
000038C8 3CBC 0000                  		move.w	#0,(a6)
000038CC 51C8 FFFA                  		dbf.w	d0,@insert
000038D0 60D8                       		bra.s	CStringSlop
000038D2                            ; End of function LevSel_ChgLine
000038D2                            
000038D2                            ; ===========================================================================
000038D2                            ; ---------------------------------------------------------------------------
000038D2                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000038D2                            ; ---------------------------------------------------------------------------
000038D2                            LevelMenuText:	
000038D2 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000038E2 2020 2020 2020 2020 2020+          dc.b    "               2"
000038F2 2020 2020 2020 2020 2020+          dc.b    "               3"
00003902 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003912 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003922 2020 2020 2020 2020 2020+          dc.b    "               3"
00003932 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003942 2020 2020 2020 2020 2020+          dc.b    "               2"
00003952 2020 2020 2020 2020 2020+          dc.b    "               3"
00003962 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003972 2020 2020 2020 2020 2020+          dc.b    "               2"
00003982 2020 2020 2020 2020 2020+          dc.b    "               3"
00003992 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
000039A2 2020 2020 2020 2020 2020+          dc.b    "               2"
000039B2 2020 2020 2020 2020 2020+          dc.b    "               3"
000039C2                            LMTSecondRow:
000039C2 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
000039D2 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
000039E2 2020 2020 2020 2020 2020+          dc.b    "               3"
000039F2 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003A02 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A12 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A22 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003A32 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A42 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003A52 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A62 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A72                            LMTSelectableEnd:
00003A72 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003A82                            LMTEnd:
00003A82                            
00003A82                            Now_Playing:
00003A82 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003A92                            		even
00003A92                            NP_Track:
00003A92 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003A9A                            		even
00003A9A                            NP_SFX:
00003A9A 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003AA2                            		even
00003AA2                            
00003AA2                            ShowNow_Playing:
00003AA2 1C00                       		move.b	d0,d6
00003AA4 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003AA8 43FA FFD8                  		lea	Now_Playing(pc),a1
00003AAC 4DF9 00C0 0000             		lea		($C00000).l,a6
00003AB2 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003ABA 6100 FDEE                  		bsr.w	CStringSlop
00003ABE                            		
00003ABE 43FA FFD2                  		lea	NP_Track(pc),a1
00003AC2 0C06 00A0                  		cmpi.b	#$A0,d6
00003AC6 6D00                       		blt.s	@track
00003AC8                            		
00003AC8 43FA FFD0                  		lea	NP_SFX(pc),a1
00003ACC                            	@track:
00003ACC 6100 FDDC                  		bsr.w	CStringSlop
00003AD0                            		
00003AD0 0643 0030                  		add.w	#$30,d3
00003AD4 1006                       		move.b	d6,d0
00003AD6 1400                       		move.b	d0,d2
00003AD8 E808                       		lsr.b	#4,d0
00003ADA 6100 FD98                  		bsr.w	LevSel_ChgSnd
00003ADE 1002                       		move.b	d2,d0
00003AE0 6100 FD92                  		bsr.w	LevSel_ChgSnd
00003AE4 4E75                       		rts	
00003AE6                            
00003AE6                            ; 1 is insert spaces btw
00003AE6                            Controls_Normal:
00003AE6 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003AF2                            		even		
00003AF2                            Controls_SND:
00003AF2 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003B18 00                         		even
00003B18                            		
00003B18                            OptionMenuText:	
00003B18 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003B28 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003B38                            OMTEnd:
00003B38                            		
00003B38                            ; ---------------------------------------------------------------------------
00003B38                            ; Level	Select
00003B38                            ; ---------------------------------------------------------------------------
00003B38                            GotoOptions:
00003B38 43F9 0000 3B18             		lea	(OptionMenuText).l,a1
00003B3E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003B44 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003B48 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003B4E                            		
00003B4E 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003B52 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00003B56                            
00003B56                            OptionsMenu:
00003B56 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003B5C 6100 EFC8                  		bsr.w	DelayProgram
00003B60 6100 0000                  		bsr.w	OptControls
00003B64 6100 DAA0                  		bsr.w	RunPLC_RAM
00003B68 4AB8 F680                  		tst.l	($FFFFF680).w
00003B6C 66E8                       		bne.s	OptionsMenu
00003B6E 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003B74 67E0                       		beq.s	OptionsMenu	; if not, branch
00003B76 4E71                       		nop
00003B78 60DC                       		bra.s	OptionsMenu
00003B7A                            		
00003B7A                            OptReturn:
00003B7A 4E75                       		rts
00003B7C                            OptControls:				; XREF: LevelSelect
00003B7C 1238 F605                  		move.b	($FFFFF605).w,d1
00003B80 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003B84 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003B86 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003B8A 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003B8C                            Opt_UpDown:
00003B8C 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003B92 1238 F604                  		move.b	($FFFFF604).w,d1
00003B96 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003B9A 0801 0000                  		btst	#0,d1		; is up	pressed?
00003B9E 6700                       		beq.s	Opt_Down	; if not, branch
00003BA0 5346                       		subq.w	#1,d6		; move up 1 selection
00003BA2 6400                       		bcc.s	Opt_Down
00003BA4 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003BA6                            
00003BA6                            Opt_Down:
00003BA6 0801 0001                  		btst	#1,d1		; is down pressed?
00003BAA 6700                       		beq.s	Opt_Refresh	; if not, branch
00003BAC 5246                       		addq.w	#1,d6		; move down 1 selection
00003BAE 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003BB2 6500                       		bcs.s	Opt_Refresh
00003BB4 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003BB6                            Opt_Refresh:
00003BB6                            		
00003BB6                            ; ---------------------------------------------------------------------------
00003BB6                            ; Music	playlist
00003BB6                            ; ---------------------------------------------------------------------------
00003BB6                            MusicList1:	incbin	misc\muslist1.bin
00003BBE                            		even
00003BBE                            MusicList2:	incbin	misc\muslist2.bin
00003BC6                            		even
00003BC6                            MusicList3:	incbin	misc\muslist3.bin
00003BCE                            		even
00003BCE                            MusicList4:	incbin	misc\muslist4.bin
00003BD6                            		even
00003BD6                            ; ===========================================================================
00003BD6                            
00003BD6                            ; ---------------------------------------------------------------------------
00003BD6                            ; Level
00003BD6                            ; ---------------------------------------------------------------------------
00003BD6                            
00003BD6                            Level:					; XREF: GameModeArray
00003BD6 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003BDC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003BE0 6B00                       		bmi.s	loc_37B6
00003BE2 103C 00E0                  		move.b	#$E0,d0
00003BE6 6100 D7CE                  		bsr.w	PlaySound_Special ; fade out music
00003BEA                            
00003BEA                            loc_37B6:
00003BEA 6100 DA0C                  		bsr.w	ClearPLC
00003BEE 6100 E250                  		bsr.w	Pal_FadeFrom
00003BF2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003BF6 6B00                       		bmi.s	Level_ClrRam
00003BF8 46FC 2700                  		move	#$2700,sr
00003BFC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003C06 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003C0C 6100 D84C                  		bsr.w	NemDec
00003C10 46FC 2300                  		move	#$2300,sr
00003C14 7000                       		moveq	#0,d0
00003C16 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C1A E948                       		lsl.w	#4,d0
00003C1C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003C22 45F2 0000                  		lea	(a2,d0.w),a2
00003C26 7000                       		moveq	#0,d0
00003C28 1012                       		move.b	(a2),d0
00003C2A 6700                       		beq.s	loc_37FC
00003C2C 6100 D96C                  		bsr.w	LoadPLC		; load level patterns
00003C30                            
00003C30                            loc_37FC:
00003C30 7001                       		moveq	#1,d0
00003C32 6100 D966                  		bsr.w	LoadPLC		; load standard	patterns
00003C36                            
00003C36                            Level_ClrRam:
00003C36 43F8 D000                  		lea	($FFFFD000).w,a1
00003C3A 7000                       		moveq	#0,d0
00003C3C 323C 07FF                  		move.w	#$7FF,d1
00003C40                            
00003C40                            Level_ClrObjRam:
00003C40 22C0                       		move.l	d0,(a1)+
00003C42 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003C46                            
00003C46 43F8 F628                  		lea	($FFFFF628).w,a1
00003C4A 7000                       		moveq	#0,d0
00003C4C 323C 0015                  		move.w	#$15,d1
00003C50                            
00003C50                            Level_ClrVars:
00003C50 22C0                       		move.l	d0,(a1)+
00003C52 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003C56                            
00003C56 43F8 F700                  		lea	($FFFFF700).w,a1
00003C5A 7000                       		moveq	#0,d0
00003C5C 323C 003F                  		move.w	#$3F,d1
00003C60                            
00003C60                            Level_ClrVars2:
00003C60 22C0                       		move.l	d0,(a1)+
00003C62 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003C66                            
00003C66 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003C6A 7000                       		moveq	#0,d0
00003C6C 323C 0047                  		move.w	#$47,d1
00003C70                            
00003C70                            Level_ClrVars3:
00003C70 22C0                       		move.l	d0,(a1)+
00003C72 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003C76                            
00003C76 46FC 2700                  		move	#$2700,sr
00003C7A 6100 D662                  		bsr.w	ClearScreen
00003C7E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003C84 3CBC 8B03                  		move.w	#$8B03,(a6)
00003C88 3CBC 8230                  		move.w	#$8230,(a6)
00003C8C 3CBC 8407                  		move.w	#$8407,(a6)
00003C90 3CBC 857C                  		move.w	#$857C,(a6)
00003C94 3CBC 9001                  		move.w	#$9001,(a6)
00003C98 3CBC 8004                  		move.w	#$8004,(a6)
00003C9C 3CBC 8720                  		move.w	#$8720,(a6)
00003CA0 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003CA6 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003CAA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CB0 6600                       		bne.s	Level_LoadPal	; if not, branch
00003CB2 3CBC 8014                  		move.w	#$8014,(a6)
00003CB6 7000                       		moveq	#0,d0
00003CB8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003CBC D040                       		add.w	d0,d0
00003CBE 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003CC4 3031 0000                  		move.w	(a1,d0.w),d0
00003CC8 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003CCC 31C0 F648                  		move.w	d0,($FFFFF648).w
00003CD0 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003CD4 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003CD8 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003CDC 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003CE2 6000 0000                  		bra.w	Level_LoadPal
00003CE6                            Player_Palette:
00003CE6                            		; normal, lz, sbz, blank
00003CE6 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003CEE                            		
00003CEE 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003CF6 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003CFE 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003D06                            
00003D06                            		; add more player palettes
00003D06                            Level_LoadPal:
00003D06 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003D0C 46FC 2300                  		move	#$2300,sr
00003D10                            
00003D10 7200                       		moveq	#0,d1
00003D12 1238 FFE8                  		move.b	(v_character),d1
00003D16 D241                       		add.w	d1,d1
00003D18 D241                       		add.w	d1,d1
00003D1A D241                       		add.w	d1,d1
00003D1C 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003D20                            		
00003D20 6100 E3E4                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003D24 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D2A 6600                       		bne.s	Level_GetBgm	; if not, branch
00003D2C 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003D30 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003D36 6600                       		bne.s	Level_WaterPal	; if not, branch
00003D38 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003D3C                            
00003D3C                            Level_WaterPal:
00003D3C 6100 E3E0                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003D40 4A38 FE30                  		tst.b	($FFFFFE30).w
00003D44 6700                       		beq.s	Level_GetBgm
00003D46 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003D4C                            
00003D4C                            ; NineKode begins here - How to play different songs on different acts
00003D4C                             
00003D4C                            Level_GetBgm:
00003D4C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D50 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003D54 7000                       		moveq	#0,d0
00003D56 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D5A                             
00003D5A 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003D60 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003D62 43F9 0000 3BB6             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003D68 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D6A                             
00003D6A                            Level_GetBgm2:
00003D6A 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003D70 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003D72 43F9 0000 3BBE             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003D78 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D7A                             
00003D7A                            Level_GetBgm3:
00003D7A 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003D80 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003D82 43F9 0000 3BC6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003D88 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D8A                             
00003D8A                            Level_GetBgm4:
00003D8A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003D90 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003D92 43F9 0000 3BCE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003D98                             
00003D98                            Level_PlayBgm:
00003D98 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003D9C 6100 D612                  		bsr.w	PlaySound	; play music
00003DA0 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003DA6                             
00003DA6                            ; NineKode ends here
00003DA6                            
00003DA6                            Level_TtlCard:
00003DA6 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003DAC 6100 ED78                  		bsr.w	DelayProgram
00003DB0 4EB9 0000 0000             		jsr	ObjectsLoad
00003DB6 4EB9 0000 0000             		jsr	BuildSprites
00003DBC 6100 D848                  		bsr.w	RunPLC_RAM
00003DC0 3038 D108                  		move.w	($FFFFD108).w,d0
00003DC4 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003DC8 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003DCA 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003DCE 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003DD0 4EB9 0000 0000             		jsr	Hud_Base
00003DD6                            
00003DD6                            loc_3946:
00003DD6 7003                       		moveq	#3,d0
00003DD8 6100 E310                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003DDC 6100 0000                  		bsr.w	LevelSizeLoad
00003DE0 6100 0000                  		bsr.w	DeformBgLayer
00003DE4 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003DEA 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003DEE 6100 0000                  		bsr.w	LoadTilesFromStart
00003DF2 4EB9 0000 0000             		jsr	FloorLog_Unk
00003DF8 6100 0000                  		bsr.w	ColIndexLoad
00003DFC 6100 0000                  		bsr.w	LZWaterEffects
00003E00 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003E06 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E0A 6B00                       		bmi.s	Level_ChkDebug
00003E0C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003E12                            
00003E12                            Level_ChkDebug:
00003E12 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003E16 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E18 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003E1E 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E20 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003E26                            
00003E26                            Level_ChkWater:
00003E26 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003E2C 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003E32 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E38 6600                       		bne.s	Level_LoadObj	; if not, branch
00003E3A 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003E40 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003E46 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003E4C 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003E52                            
00003E52                            Level_LoadObj:
00003E52 4EB9 0000 0000             		jsr	ObjPosLoad
00003E58 4EB9 0000 0000             		jsr	ObjectsLoad
00003E5E 4EB9 0000 0000             		jsr	BuildSprites
00003E64 7000                       		moveq	#0,d0
00003E66 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003E6A 6600                       		bne.s	loc_39E8	; if yes, branch
00003E6C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E70 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E74 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003E78                            
00003E78                            loc_39E8:
00003E78 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003E7C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003E80 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003E84 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003E88                            		; move.b	d0,($FFFFFE2F).w
00003E88 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003E8E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003E92 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003E96 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003E9A 11C0 FFF9                  		move.b	d0,($FFFFFFF9).w	; GMZ: Clear truth nuke flag
00003E9E 6100 0000                  		bsr.w	OscillateNumInit
00003EA2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003EA8 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003EAE 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003EB4 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003EBA 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003EC0 7000                       		moveq	#0,d0
00003EC2 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003EC6 E548                       		lsl.w	#2,d0
00003EC8 2271 0000                  		movea.l	(a1,d0.w),a1
00003ECC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003ED0 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003ED2 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003ED8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003EDC 5340                       		subq.w	#1,d0
00003EDE E548                       		lsl.w	#2,d0
00003EE0 2271 0000                  		movea.l	(a1,d0.w),a1
00003EE4                            
00003EE4                            Level_Demo:
00003EE4 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003EEA 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003EEE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003EF4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003EF8 6A00                       		bpl.s	Level_ChkWaterPal
00003EFA 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003F00 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003F06 6600                       		bne.s	Level_ChkWaterPal
00003F08 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003F0E                            
00003F0E                            Level_ChkWaterPal:
00003F0E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003F14 6600                       		bne.s	Level_Delay	; if not, branch
00003F16 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003F18 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003F1E 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003F20 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003F22                            
00003F22                            Level_WaterPal2:
00003F22 6100 E216                  		bsr.w	PalLoad4_Water
00003F26                            
00003F26                            Level_Delay:
00003F26 323C 0003                  		move.w	#3,d1
00003F2A                            
00003F2A                            Level_DelayLoop:
00003F2A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F30 6100 EBF4                  		bsr.w	DelayProgram
00003F34 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003F38                            
00003F38 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003F3E 6100 DE5C                  		bsr.w	Pal_FadeTo2
00003F42 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F46 6B00                       		bmi.s	Level_ClrCardArt
00003F48 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003F4C 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003F50 5838 D124                  		addq.b	#4,($FFFFD124).w
00003F54 5838 D164                  		addq.b	#4,($FFFFD164).w
00003F58 6000                       		bra.s	Level_StartGame
00003F5A                            ; ===========================================================================
00003F5A                            
00003F5A                            Level_ClrCardArt:
00003F5A 7002                       		moveq	#2,d0
00003F5C 4EB9 0000 159A             		jsr	(LoadPLC).l	; load explosion patterns
00003F62 7000                       		moveq	#0,d0
00003F64 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F68 0640 0015                  		addi.w	#$15,d0
00003F6C 4EB9 0000 159A             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003F72                            
00003F72                            Level_StartGame:
00003F72 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003F78                            
00003F78                            ; ---------------------------------------------------------------------------
00003F78                            ; Main level loop (when	all title card and loading sequences are finished)
00003F78                            ; ---------------------------------------------------------------------------
00003F78                            
00003F78                            Level_MainLoop:
00003F78 6100 D448                  		bsr.w	PauseGame
00003F7C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F82 6100 EBA2                  		bsr.w	DelayProgram
00003F86 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003F8A 6100 0000                  		bsr.w	MoveSonicInDemo
00003F8E 6100 0000                  		bsr.w	LZWaterEffects
00003F92 4EB9 0000 0000             		jsr	ObjectsLoad
00003F98 4A78 FE08                  		tst.w	($FFFFFE08).w
00003F9C 6600                       		bne.s	loc_3B10
00003F9E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003FA4 6400                       		bcc.s	loc_3B14
00003FA6                            
00003FA6                            loc_3B10:
00003FA6 6100 0000                  		bsr.w	DeformBgLayer
00003FAA                            
00003FAA                            loc_3B14:
00003FAA 4EB9 0000 0000             		jsr	BuildSprites
00003FB0 4EB9 0000 0000             		jsr	ObjPosLoad
00003FB6 6100 D99E                  		bsr.w	PalCycle_Load
00003FBA 6100 D64A                  		bsr.w	RunPLC_RAM
00003FBE 6100 0000                  		bsr.w	OscillateNumDo
00003FC2 6100 0000                  		bsr.w	ChangeRingFrame
00003FC6 6100 0000                  		bsr.w	SignpostArtLoad
00003FCA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003FD0 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003FD2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003FD6 6600 FBFE                  		bne.w	Level		; if yes, branch
00003FDA 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003FE0 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003FE4 4E75                       		rts	
00003FE6                            ; ===========================================================================
00003FE6                            
00003FE6                            Level_ChkDemo:				; XREF: Level_MainLoop
00003FE6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003FEA 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003FEC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003FF0 6700                       		beq.s	Level_EndDemo	; if not, branch
00003FF2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003FF8 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003FFC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004002 4E75                       		rts	
00004004                            ; ===========================================================================
00004004                            
00004004                            Level_EndDemo:				; XREF: Level_ChkDemo
00004004 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
0000400A 6600                       		bne.s	loc_3B88	; if not, branch
0000400C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004012 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004016 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004018 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000401E                            
0000401E                            loc_3B88:
0000401E 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004024 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000402A 4278 F794                  		clr.w	($FFFFF794).w
0000402E                            
0000402E                            loc_3B98:
0000402E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004034 6100 EAF0                  		bsr.w	DelayProgram
00004038 6100 0000                  		bsr.w	MoveSonicInDemo
0000403C 4EB9 0000 0000             		jsr	ObjectsLoad
00004042 4EB9 0000 0000             		jsr	BuildSprites
00004048 4EB9 0000 0000             		jsr	ObjPosLoad
0000404E 5378 F794                  		subq.w	#1,($FFFFF794).w
00004052 6A00                       		bpl.s	loc_3BC8
00004054 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000405A 6100 DE04                  		bsr.w	Pal_FadeOut
0000405E                            
0000405E                            loc_3BC8:
0000405E 4A78 F614                  		tst.w	($FFFFF614).w
00004062 66CA                       		bne.s	loc_3B98
00004064 4E75                       		rts	
00004066                            ; ===========================================================================
00004066                            ; ---------------------------------------------------------------------------
00004066                            ; Subroutine to	do special water effects in Labyrinth Zone
00004066                            ; ---------------------------------------------------------------------------
00004066                            
00004066                            LZWaterEffects:				; XREF: Level
00004066 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000406C 6600                       		bne.s	locret_3C28	; if not, branch
0000406E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004074 6400                       		bcc.s	LZMoveWater
00004076 6100 0000                  		bsr.w	LZWindTunnels
0000407A 6100 0000                  		bsr.w	LZWaterSlides
0000407E 6100 0000                  		bsr.w	LZDynamicWater
00004082                            
00004082                            LZMoveWater:
00004082 4238 F64E                  		clr.b	($FFFFF64E).w
00004086 7000                       		moveq	#0,d0
00004088 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000408C E248                       		lsr.w	#1,d0
0000408E D078 F648                  		add.w	($FFFFF648).w,d0
00004092 31C0 F646                  		move.w	d0,($FFFFF646).w
00004096 3038 F646                  		move.w	($FFFFF646).w,d0
0000409A 9078 F704                  		sub.w	($FFFFF704).w,d0
0000409E 6400                       		bcc.s	loc_3C1A
000040A0 4A40                       		tst.w	d0
000040A2 6A00                       		bpl.s	loc_3C1A
000040A4 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000040AA 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000040B0                            
000040B0                            loc_3C1A:
000040B0 0C40 00DF                  		cmpi.w	#$DF,d0
000040B4 6500                       		bcs.s	loc_3C24
000040B6 303C 00DF                  		move.w	#$DF,d0
000040BA                            
000040BA                            loc_3C24:
000040BA 11C0 F625                  		move.b	d0,($FFFFF625).w
000040BE                            
000040BE                            locret_3C28:
000040BE 4E75                       		rts	
000040C0                            ; ===========================================================================
000040C0                            ; ---------------------------------------------------------------------------
000040C0                            ; Labyrinth default water heights
000040C0                            ; ---------------------------------------------------------------------------
000040C0                            WaterHeight:	incbin	misc\lz_heigh.bin
000040C8                            		even
000040C8                            ; ===========================================================================
000040C8                            
000040C8                            ; ---------------------------------------------------------------------------
000040C8                            ; Labyrinth dynamic water routines
000040C8                            ; ---------------------------------------------------------------------------
000040C8                            
000040C8                            LZDynamicWater:				; XREF: LZWaterEffects
000040C8 7000                       		moveq	#0,d0
000040CA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000040CE D040                       		add.w	d0,d0
000040D0 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000040D4 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000040D8 7200                       		moveq	#0,d1
000040DA 1238 F64C                  		move.b	($FFFFF64C).w,d1
000040DE 3038 F64A                  		move.w	($FFFFF64A).w,d0
000040E2 9078 F648                  		sub.w	($FFFFF648).w,d0
000040E6 6700                       		beq.s	locret_3C5A
000040E8 6400                       		bcc.s	loc_3C56
000040EA 4441                       		neg.w	d1
000040EC                            
000040EC                            loc_3C56:
000040EC D378 F648                  		add.w	d1,($FFFFF648).w
000040F0                            
000040F0                            locret_3C5A:
000040F0 4E75                       		rts	
000040F2                            ; ===========================================================================
000040F2 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000040F4 0000                       		dc.w DynWater_LZ2-DynWater_Index
000040F6 0000                       		dc.w DynWater_LZ3-DynWater_Index
000040F8 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000040FA                            ; ===========================================================================
000040FA                            
000040FA                            DynWater_LZ1:				; XREF: DynWater_Index
000040FA 3038 F700                  		move.w	($FFFFF700).w,d0
000040FE 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004102 6600                       		bne.s	loc_3CD0
00004104 323C 00B8                  		move.w	#$B8,d1
00004108 0C40 0600                  		cmpi.w	#$600,d0
0000410C 6500                       		bcs.s	loc_3CB4
0000410E 323C 0108                  		move.w	#$108,d1
00004112 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004118 6500                       		bcs.s	loc_3CBA
0000411A 0C40 0C00                  		cmpi.w	#$C00,d0
0000411E 6500                       		bcs.s	loc_3CB4
00004120 323C 0318                  		move.w	#$318,d1
00004124 0C40 1080                  		cmpi.w	#$1080,d0
00004128 6500                       		bcs.s	loc_3CB4
0000412A 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004130 323C 05C8                  		move.w	#$5C8,d1
00004134 0C40 1380                  		cmpi.w	#$1380,d0
00004138 6500                       		bcs.s	loc_3CB4
0000413A 323C 03A8                  		move.w	#$3A8,d1
0000413E B278 F648                  		cmp.w	($FFFFF648).w,d1
00004142 6600                       		bne.s	loc_3CB4
00004144 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000414A                            
0000414A                            loc_3CB4:
0000414A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000414E 4E75                       		rts	
00004150                            ; ===========================================================================
00004150                            
00004150                            loc_3CBA:				; XREF: DynWater_LZ1
00004150 0C40 0C80                  		cmpi.w	#$C80,d0
00004154 65F4                       		bcs.s	loc_3CB4
00004156 323C 00E8                  		move.w	#$E8,d1
0000415A 0C40 1500                  		cmpi.w	#$1500,d0
0000415E 65EA                       		bcs.s	loc_3CB4
00004160 323C 0108                  		move.w	#$108,d1
00004164 60E4                       		bra.s	loc_3CB4
00004166                            ; ===========================================================================
00004166                            
00004166                            loc_3CD0:				; XREF: DynWater_LZ1
00004166 5302                       		subq.b	#1,d2
00004168 6600                       		bne.s	locret_3CF4
0000416A 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004170 6400                       		bcc.s	locret_3CF4
00004172 323C 03A8                  		move.w	#$3A8,d1
00004176 0C40 1300                  		cmpi.w	#$1300,d0
0000417A 6500                       		bcs.s	loc_3CF0
0000417C 323C 0108                  		move.w	#$108,d1
00004180 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004186                            
00004186                            loc_3CF0:
00004186 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000418A                            
0000418A                            locret_3CF4:
0000418A 4E75                       		rts	
0000418C                            ; ===========================================================================
0000418C                            
0000418C                            DynWater_LZ2:				; XREF: DynWater_Index
0000418C 3038 F700                  		move.w	($FFFFF700).w,d0
00004190 323C 0328                  		move.w	#$328,d1
00004194 0C40 0500                  		cmpi.w	#$500,d0
00004198 6500                       		bcs.s	loc_3D12
0000419A 323C 03C8                  		move.w	#$3C8,d1
0000419E 0C40 0B00                  		cmpi.w	#$B00,d0
000041A2 6500                       		bcs.s	loc_3D12
000041A4 323C 0428                  		move.w	#$428,d1
000041A8                            
000041A8                            loc_3D12:
000041A8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041AC 4E75                       		rts	
000041AE                            ; ===========================================================================
000041AE                            
000041AE                            DynWater_LZ3:				; XREF: DynWater_Index
000041AE 3038 F700                  		move.w	($FFFFF700).w,d0
000041B2 1438 F64D                  		move.b	($FFFFF64D).w,d2
000041B6 6600                       		bne.s	loc_3D5E
000041B8 323C 0500                  		move.w	#$500,d1
000041BC 0C40 0600                  		cmpi.w	#$600,d0
000041C0 6500                       		bcs.s	loc_3D54
000041C2 0C40 1B00                  		cmpi.w	#$1B00,d0
000041C6 6500                       		bcs.s	loc_3D54
000041C8 323C 0850                  		move.w	#$850,d1
000041CC                            
000041CC                            loc_3D54:
000041CC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041D0 31C1 F648                  		move.w	d1,($FFFFF648).w
000041D4 4E75                       		rts	
000041D6                            ; ===========================================================================
000041D6                            
000041D6                            loc_3D5E:				; XREF: DynWater_LZ3
000041D6 5302                       		subq.b	#1,d2
000041D8 6600                       		bne.s	loc_3DA8
000041DA 323C 04C8                  		move.w	#$4C8,d1
000041DE 0C40 0770                  		cmpi.w	#$770,d0
000041E2 6500                       		bcs.s	loc_3DA2
000041E4 323C 0308                  		move.w	#$308,d1
000041E8 0C40 1400                  		cmpi.w	#$1400,d0
000041EC 6500                       		bcs.s	loc_3DA2
000041EE 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000041F4 6700                       		beq.s	loc_3D8E
000041F6 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000041FC 6400                       		bcc.s	loc_3D8E
000041FE 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004204 6400                       		bcc.s	loc_3DA2
00004206                            
00004206                            loc_3D8E:
00004206 323C 0508                  		move.w	#$508,d1
0000420A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000420E 0C40 1770                  		cmpi.w	#$1770,d0
00004212 6500                       		bcs.s	loc_3DA2
00004214 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000421A                            
0000421A                            loc_3DA2:
0000421A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000421E 4E75                       		rts	
00004220                            ; ===========================================================================
00004220                            
00004220                            loc_3DA8:
00004220 5302                       		subq.b	#1,d2
00004222 6600                       		bne.s	loc_3DD2
00004224 323C 0508                  		move.w	#$508,d1
00004228 0C40 1860                  		cmpi.w	#$1860,d0
0000422C 6500                       		bcs.s	loc_3DCC
0000422E 323C 0188                  		move.w	#$188,d1
00004232 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004236 6400                       		bcc.s	loc_3DC6
00004238 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000423C 6600                       		bne.s	loc_3DCC
0000423E                            
0000423E                            loc_3DC6:
0000423E 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004244                            
00004244                            loc_3DCC:
00004244 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004248 4E75                       		rts	
0000424A                            ; ===========================================================================
0000424A                            
0000424A                            loc_3DD2:
0000424A 5302                       		subq.b	#1,d2
0000424C 6600                       		bne.s	loc_3E0E
0000424E 323C 0188                  		move.w	#$188,d1
00004252 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004256 6500                       		bcs.s	loc_3E04
00004258 323C 0900                  		move.w	#$900,d1
0000425C 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004260 6500                       		bcs.s	loc_3E04
00004262 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004268 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000426E 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004274 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000427A 4E75                       		rts	
0000427C                            ; ===========================================================================
0000427C                            
0000427C                            loc_3E04:
0000427C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004280 31C1 F648                  		move.w	d1,($FFFFF648).w
00004284 4E75                       		rts	
00004286                            ; ===========================================================================
00004286                            
00004286                            loc_3E0E:
00004286 0C40 1E00                  		cmpi.w	#$1E00,d0
0000428A 6500                       		bcs.s	locret_3E1A
0000428C 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004292                            
00004292                            locret_3E1A:
00004292 4E75                       		rts	
00004294                            ; ===========================================================================
00004294                            
00004294                            DynWater_SBZ3:				; XREF: DynWater_Index
00004294 323C 0228                  		move.w	#$228,d1
00004298 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
0000429E 6500                       		bcs.s	loc_3E2C
000042A0 323C 04C8                  		move.w	#$4C8,d1
000042A4                            
000042A4                            loc_3E2C:
000042A4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042A8 4E75                       		rts
000042AA                            
000042AA                            ; ---------------------------------------------------------------------------
000042AA                            ; Labyrinth Zone "wind tunnels"	subroutine
000042AA                            ; ---------------------------------------------------------------------------
000042AA                            
000042AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042AA                            
000042AA                            
000042AA                            LZWindTunnels:				; XREF: LZWaterEffects
000042AA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000042AE 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000042B2 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000042B8 7000                       		moveq	#0,d0
000042BA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042BE E748                       		lsl.w	#3,d0
000042C0 D4C0                       		adda.w	d0,a2
000042C2 7200                       		moveq	#0,d1
000042C4 4A38 FE11                  		tst.b	($FFFFFE11).w
000042C8 6600                       		bne.s	loc_3E56
000042CA 7201                       		moveq	#1,d1
000042CC 514A                       		subq.w	#8,a2
000042CE                            
000042CE                            loc_3E56:
000042CE 43F8 D000                  		lea	($FFFFD000).w,a1
000042D2                            
000042D2                            LZWind_Loop:
000042D2 3029 0008                  		move.w	8(a1),d0
000042D6 B052                       		cmp.w	(a2),d0
000042D8 6500 0000                  		bcs.w	loc_3EF4
000042DC B06A 0004                  		cmp.w	4(a2),d0
000042E0 6400 0000                  		bcc.w	loc_3EF4
000042E4 3429 000C                  		move.w	$C(a1),d2
000042E8 B46A 0002                  		cmp.w	2(a2),d2
000042EC 6500                       		bcs.s	loc_3EF4
000042EE B46A 0006                  		cmp.w	6(a2),d2
000042F2 6400                       		bcc.s	loc_3EF4
000042F4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000042F8 0200 003F                  		andi.b	#$3F,d0
000042FC 6600                       		bne.s	loc_3E90
000042FE 303C 00D0                  		move.w	#$D0,d0
00004302 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004308                            
00004308                            loc_3E90:
00004308 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000430C 6600 0000                  		bne.w	locret_3F0A
00004310 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004316 6400                       		bcc.s	loc_3F06
00004318 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000431E 0440 0080                  		subi.w	#$80,d0
00004322 B052                       		cmp.w	(a2),d0
00004324 6400                       		bcc.s	LZWind_Move
00004326 7002                       		moveq	#2,d0
00004328 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000432E 6600                       		bne.s	loc_3EBA
00004330 4440                       		neg.w	d0
00004332                            
00004332                            loc_3EBA:
00004332 D169 000C                  		add.w	d0,$C(a1)
00004336                            
00004336                            LZWind_Move:
00004336 5869 0008                  		addq.w	#4,8(a1)
0000433A 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004340 337C 0000 0012             		move.w	#0,$12(a1)
00004346 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000434C 08E9 0001 0022             		bset	#1,$22(a1)
00004352 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004358 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000435A 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000435E                            
0000435E                            LZWind_MoveDown:
0000435E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004364 6700                       		beq.s	locret_3EF2	; if not, branch
00004366 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000436A                            
0000436A                            locret_3EF2:
0000436A 4E75                       		rts	
0000436C                            ; ===========================================================================
0000436C                            
0000436C                            loc_3EF4:				; XREF: LZWindTunnels
0000436C 504A                       		addq.w	#8,a2
0000436E 51C9 FF62                  		dbf	d1,LZWind_Loop
00004372 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004376 6700                       		beq.s	locret_3F0A
00004378 137C 0000 001C             		move.b	#0,$1C(a1)
0000437E                            
0000437E                            loc_3F06:
0000437E 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004382                            
00004382                            locret_3F0A:
00004382 4E75                       		rts	
00004384                            ; End of function LZWindTunnels
00004384                            
00004384                            ; ===========================================================================
00004384 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000438C 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000439E 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000043AC                            					; XREF: LZWindTunnels
000043AC                            		even
000043AC                            
000043AC                            ; ---------------------------------------------------------------------------
000043AC                            ; Labyrinth Zone water slide subroutine
000043AC                            ; ---------------------------------------------------------------------------
000043AC                            
000043AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000043AC                            
000043AC                            
000043AC                            LZWaterSlides:				; XREF: LZWaterEffects
000043AC 43F8 D000                  		lea	($FFFFD000).w,a1
000043B0 0829 0001 0022             		btst	#1,$22(a1)
000043B6 6600                       		bne.s	loc_3F6A
000043B8 3029 000C                  		move.w	$C(a1),d0
000043BC E248                       		lsr.w	#1,d0
000043BE 0240 0380                  		andi.w	#$380,d0
000043C2 1229 0008                  		move.b	8(a1),d1
000043C6 0241 007F                  		andi.w	#$7F,d1
000043CA D041                       		add.w	d1,d0
000043CC 45F8 A400                  		lea	($FFFFA400).w,a2
000043D0 1032 0000                  		move.b	(a2,d0.w),d0
000043D4 45FA 0000                  		lea	byte_3FCF(pc),a2
000043D8 7206                       		moveq	#6,d1
000043DA                            
000043DA                            loc_3F62:
000043DA B022                       		cmp.b	-(a2),d0
000043DC 57C9 FFFC                  		dbeq	d1,loc_3F62
000043E0 6700                       		beq.s	LZSlide_Move
000043E2                            
000043E2                            loc_3F6A:
000043E2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000043E6 6700                       		beq.s	locret_3F7A
000043E8 337C 0005 003E             		move.w	#5,$3E(a1)
000043EE 4238 F7CA                  		clr.b	($FFFFF7CA).w
000043F2                            
000043F2                            locret_3F7A:
000043F2 4E75                       		rts	
000043F4                            ; ===========================================================================
000043F4                            
000043F4                            LZSlide_Move:				; XREF: LZWaterSlides
000043F4 0C41 0003                  		cmpi.w	#3,d1
000043F8 6400                       		bcc.s	loc_3F84
000043FA 4E71                       		nop	
000043FC                            
000043FC                            loc_3F84:
000043FC 08A9 0000 0022             		bclr	#0,$22(a1)
00004402 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004406 1340 0014                  		move.b	d0,$14(a1)
0000440A 6A00                       		bpl.s	loc_3F9A
0000440C 08E9 0000 0022             		bset	#0,$22(a1)
00004412                            
00004412                            loc_3F9A:
00004412 4229 0015                  		clr.b	$15(a1)
00004416 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000441C 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004422 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004426 0200 001F                  		andi.b	#$1F,d0
0000442A 6600                       		bne.s	locret_3FBE
0000442C 303C 00D0                  		move.w	#$D0,d0
00004430 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play water sound
00004436                            
00004436                            locret_3FBE:
00004436 4E75                       		rts	
00004438                            ; End of function LZWaterSlides
00004438                            
00004438                            ; ===========================================================================
00004438 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004447 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004448                            		even
00004448                            
00004448                            ; ---------------------------------------------------------------------------
00004448                            ; Subroutine to	move Sonic in demo mode
00004448                            ; ---------------------------------------------------------------------------
00004448                            
00004448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004448                            
00004448                            
00004448                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004448 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000444C 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000444E 4E75                       		rts	
00004450                            ; ===========================================================================
00004450                            
00004450                            ; This is an unused subroutine for recording a demo
00004450                            
00004450                            MoveDemo_Record:
00004450 43F9 0008 0000             		lea	($80000).l,a1
00004456 3038 F790                  		move.w	($FFFFF790).w,d0
0000445A D2C0                       		adda.w	d0,a1
0000445C 1038 F604                  		move.b	($FFFFF604).w,d0
00004460 B011                       		cmp.b	(a1),d0
00004462 6600                       		bne.s	loc_3FFA
00004464 5229 0001                  		addq.b	#1,1(a1)
00004468 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000446E 6700                       		beq.s	loc_3FFA
00004470 4E75                       		rts	
00004472                            ; ===========================================================================
00004472                            
00004472                            loc_3FFA:				; XREF: MoveDemo_Record
00004472 1340 0002                  		move.b	d0,2(a1)
00004476 137C 0000 0003             		move.b	#0,3(a1)
0000447C 5478 F790                  		addq.w	#2,($FFFFF790).w
00004480 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004486 4E75                       		rts	
00004488                            ; ===========================================================================
00004488                            
00004488                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004488 4A38 F604                  		tst.b	($FFFFF604).w
0000448C 6A00                       		bpl.s	loc_4022
0000448E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004492 6B00                       		bmi.s	loc_4022
00004494 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000449A                            
0000449A                            loc_4022:
0000449A 43F9 0000 0000             		lea	(Demo_Index).l,a1
000044A0 7000                       		moveq	#0,d0
000044A2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000044A6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000044AC 6600                       		bne.s	loc_4038
000044AE 7006                       		moveq	#6,d0
000044B0                            
000044B0                            loc_4038:
000044B0 E548                       		lsl.w	#2,d0
000044B2 2271 0000                  		movea.l	(a1,d0.w),a1
000044B6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044BA 6A00                       		bpl.s	loc_4056
000044BC 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000044C2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000044C6 5340                       		subq.w	#1,d0
000044C8 E548                       		lsl.w	#2,d0
000044CA 2271 0000                  		movea.l	(a1,d0.w),a1
000044CE                            
000044CE                            loc_4056:
000044CE 3038 F790                  		move.w	($FFFFF790).w,d0
000044D2 D2C0                       		adda.w	d0,a1
000044D4 1011                       		move.b	(a1),d0
000044D6 41F8 F604                  		lea	($FFFFF604).w,a0
000044DA 1200                       		move.b	d0,d1
000044DC 1410                       		move.b	(a0),d2
000044DE B500                       		eor.b	d2,d0
000044E0 10C1                       		move.b	d1,(a0)+
000044E2 C001                       		and.b	d1,d0
000044E4 10C0                       		move.b	d0,(a0)+
000044E6 5338 F792                  		subq.b	#1,($FFFFF792).w
000044EA 6400                       		bcc.s	locret_407E
000044EC 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000044F2 5478 F790                  		addq.w	#2,($FFFFF790).w
000044F6                            
000044F6                            locret_407E:
000044F6 4E75                       		rts	
000044F8                            ; End of function MoveSonicInDemo
000044F8                            
000044F8                            ; ===========================================================================
000044F8                            ; ---------------------------------------------------------------------------
000044F8                            ; Demo sequence	pointers
000044F8                            ; ---------------------------------------------------------------------------
000044F8                            Demo_Index:
000044F8                            	include "_inc\Demo pointers for intro.asm"
000044F8                            ; ---------------------------------------------------------------------------
000044F8                            ; Demo sequence	pointers
000044F8                            ; ---------------------------------------------------------------------------
000044F8 0000 0000                  	dc.l Demo_GHZ
000044FC 0000 0000                  	dc.l Demo_GHZ
00004500 0000 0000                  	dc.l Demo_MZ
00004504 0000 0000                  	dc.l Demo_MZ
00004508 0000 0000                  	dc.l Demo_SYZ
0000450C 0000 0000                  	dc.l Demo_SYZ
00004510 0000 0000                  	dc.l Demo_SS
00004514 0000 0000                  	dc.l Demo_SS
00004514 0000 0000                  	dc.l Demo_SS
00004518                            
00004518                            Demo_EndIndex:
00004518                            	include "_inc\Demo pointers for ending.asm"
00004518                            ; ---------------------------------------------------------------------------
00004518                            ; Demo (ending) sequence pointers
00004518                            ; ---------------------------------------------------------------------------
00004518 0000 0000                  	dc.l Demo_EndGHZ1
0000451C 0000 0000                  	dc.l Demo_EndMZ
00004520 0000 0000                  	dc.l Demo_EndSYZ
00004524 0000 0000                  	dc.l Demo_EndLZ
00004528 0000 0000                  	dc.l Demo_EndSLZ
0000452C 0000 0000                  	dc.l Demo_EndSBZ1
00004530 0000 0000                  	dc.l Demo_EndSBZ2
00004534 0000 0000                  	dc.l Demo_EndGHZ2
00004534 0000 0000                  	dc.l Demo_EndGHZ2
00004538                            
00004538 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004548 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004558 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004568                            		even
00004568                            
00004568                            ; ---------------------------------------------------------------------------
00004568                            ; Collision index loading subroutine
00004568                            ; ---------------------------------------------------------------------------
00004568                            
00004568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004568                            
00004568                            
00004568                            ColIndexLoad:				; XREF: Level
00004568 7000                       		moveq	#0,d0
0000456A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000456E E548                       		lsl.w	#2,d0
00004570 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004576 4E75                       		rts	
00004578                            ; End of function ColIndexLoad
00004578                            
00004578                            ; ===========================================================================
00004578                            ; ---------------------------------------------------------------------------
00004578                            ; Collision index pointers
00004578                            ; ---------------------------------------------------------------------------
00004578                            ColPointers:
00004578                            	include "_inc\Collision index pointers.asm"
00004578                            ; ---------------------------------------------------------------------------
00004578                            ; Collision index pointers
00004578                            ; ---------------------------------------------------------------------------
00004578 0000 0000                  	dc.l Col_GHZ
0000457C 0000 0000                  	dc.l Col_LZ
00004580 0000 0000                  	dc.l Col_MZ
00004584 0000 0000                  	dc.l Col_SLZ
00004588 0000 0000                  	dc.l Col_SYZ
0000458C 0000 0000                  	dc.l Col_SBZ
00004590 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
00004594 0000 0000                  	dc.l Col_BHZ
00004594 0000 0000                  	dc.l Col_BHZ
00004598                            
00004598                            ; ---------------------------------------------------------------------------
00004598                            ; Oscillating number subroutine
00004598                            ; ---------------------------------------------------------------------------
00004598                            
00004598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004598                            
00004598                            
00004598                            OscillateNumInit:			; XREF: Level
00004598 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000459C 45F9 0000 0000             		lea	(Osc_Data).l,a2
000045A2 7220                       		moveq	#$20,d1
000045A4                            
000045A4                            Osc_Loop:
000045A4 32DA                       		move.w	(a2)+,(a1)+
000045A6 51C9 FFFC                  		dbf	d1,Osc_Loop
000045AA 4E75                       		rts	
000045AC                            ; End of function OscillateNumInit
000045AC                            
000045AC                            ; ===========================================================================
000045AC 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000045B0 0000 0080                  		dc.w 0,	$80
000045B4 0000 0080                  		dc.w 0,	$80
000045B8 0000 0080                  		dc.w 0,	$80
000045BC 0000 0080                  		dc.w 0,	$80
000045C0 0000 0080                  		dc.w 0,	$80
000045C4 0000 0080                  		dc.w 0,	$80
000045C8 0000 0080                  		dc.w 0,	$80
000045CC 0000 0080                  		dc.w 0,	$80
000045D0 0000 50F0                  		dc.w 0,	$50F0
000045D4 011E 2080                  		dc.w $11E, $2080
000045D8 00B4 3080                  		dc.w $B4, $3080
000045DC 010E 5080                  		dc.w $10E, $5080
000045E0 01C2 7080                  		dc.w $1C2, $7080
000045E4 0276 0080                  		dc.w $276, $80
000045E8 0000 0080                  		dc.w 0,	$80
000045EC 0000                       		dc.w 0
000045EE                            		even
000045EE                            
000045EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045EE                            
000045EE                            
000045EE                            OscillateNumDo:				; XREF: Level
000045EE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000045F4 6400                       		bcc.s	locret_41C4
000045F6 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000045FA 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004600 3619                       		move.w	(a1)+,d3
00004602 720F                       		moveq	#$F,d1
00004604                            
00004604                            loc_4184:
00004604 341A                       		move.w	(a2)+,d2
00004606 381A                       		move.w	(a2)+,d4
00004608 0303                       		btst	d1,d3
0000460A 6600                       		bne.s	loc_41A4
0000460C 3029 0002                  		move.w	2(a1),d0
00004610 D042                       		add.w	d2,d0
00004612 3340 0002                  		move.w	d0,2(a1)
00004616 D151                       		add.w	d0,0(a1)
00004618 B811                       		cmp.b	0(a1),d4
0000461A 6200                       		bhi.s	loc_41BA
0000461C 03C3                       		bset	d1,d3
0000461E 6000                       		bra.s	loc_41BA
00004620                            ; ===========================================================================
00004620                            
00004620                            loc_41A4:				; XREF: OscillateNumDo
00004620 3029 0002                  		move.w	2(a1),d0
00004624 9042                       		sub.w	d2,d0
00004626 3340 0002                  		move.w	d0,2(a1)
0000462A D151                       		add.w	d0,0(a1)
0000462C B811                       		cmp.b	0(a1),d4
0000462E 6300                       		bls.s	loc_41BA
00004630 0383                       		bclr	d1,d3
00004632                            
00004632                            loc_41BA:
00004632 5849                       		addq.w	#4,a1
00004634 51C9 FFCE                  		dbf	d1,loc_4184
00004638 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000463C                            
0000463C                            locret_41C4:
0000463C 4E75                       		rts	
0000463E                            ; End of function OscillateNumDo
0000463E                            
0000463E                            ; ===========================================================================
0000463E 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004642 0002 0018                  		dc.w 2,	$18
00004646 0002 0020                  		dc.w 2,	$20
0000464A 0002 0030                  		dc.w 2,	$30
0000464E 0004 0020                  		dc.w 4,	$20
00004652 0008 0008                  		dc.w 8,	8
00004656 0008 0040                  		dc.w 8,	$40
0000465A 0004 0040                  		dc.w 4,	$40
0000465E 0002 0050                  		dc.w 2,	$50
00004662 0002 0050                  		dc.w 2,	$50
00004666 0002 0020                  		dc.w 2,	$20
0000466A 0003 0030                  		dc.w 3,	$30
0000466E 0005 0050                  		dc.w 5,	$50
00004672 0007 0070                  		dc.w 7,	$70
00004676 0002 0010                  		dc.w 2,	$10
0000467A 0002 0010                  		dc.w 2,	$10
0000467E                            		even
0000467E                            
0000467E                            ; ---------------------------------------------------------------------------
0000467E                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000467E                            ; ---------------------------------------------------------------------------
0000467E                            
0000467E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000467E                            
0000467E                            
0000467E                            ChangeRingFrame:			; XREF: Level
0000467E 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004682 6A00                       		bpl.s	loc_421C
00004684 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000468A 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000468E 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004694                            
00004694                            loc_421C:
00004694 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004698 6A00                       		bpl.s	loc_4232
0000469A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000046A0 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000046A4 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000046AA                            
000046AA                            loc_4232:
000046AA 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000046AE 6A00                       		bpl.s	loc_4250
000046B0 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000046B6 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000046BA 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000046C0 6500                       		bcs.s	loc_4250
000046C2 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000046C8                            
000046C8                            loc_4250:
000046C8 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000046CC 6700                       		beq.s	locret_4272
000046CE 7000                       		moveq	#0,d0
000046D0 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000046D4 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000046D8 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000046DC EF58                       		rol.w	#7,d0
000046DE 0240 0003                  		andi.w	#3,d0
000046E2 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000046E6 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000046EA                            
000046EA                            locret_4272:
000046EA 4E75                       		rts	
000046EC                            ; End of function ChangeRingFrame
000046EC                            
000046EC                            ; ---------------------------------------------------------------------------
000046EC                            ; End-of-act signpost pattern loading subroutine
000046EC                            ; ---------------------------------------------------------------------------
000046EC                            
000046EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046EC                            
000046EC                            
000046EC                            SignpostArtLoad:			; XREF: Level
000046EC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000046F0 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000046F4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000046FA 6700                       		beq.s	Signpost_Exit	; if yes, branch
000046FC 3038 F700                  		move.w	($FFFFF700).w,d0
00004700 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004704 0441 0100                  		subi.w	#$100,d1
00004708 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000470A 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000470C 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004710 6700                       		beq.s	Signpost_Exit
00004712 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004716 6700                       		beq.s	Signpost_Exit
00004718 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000471C 7012                       		moveq	#$12,d0
0000471E 6000 CEAC                  		bra.w	LoadPLC2	; load signpost	patterns
00004722                            ; ===========================================================================
00004722                            
00004722                            Signpost_Exit:
00004722 4E75                       		rts	
00004724                            ; End of function SignpostArtLoad
00004724                            
00004724                            ; ===========================================================================
00004724                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000047A4                            Demo_MZ:	incbin	demodata\i_mz.bin
000048D4                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004954                            Demo_SS:	incbin	demodata\i_ss.bin
00004A54                            ; ===========================================================================
00004A54                            
00004A54                            ; ---------------------------------------------------------------------------
00004A54                            ; Special Stage
00004A54                            ; ---------------------------------------------------------------------------
00004A54                            
00004A54                            SpecialStage:				; XREF: GameModeArray
00004A54 303C 00CA                  		move.w	#$CA,d0
00004A58 6100 C95C                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004A5C 6100 D50C                  		bsr.w	Pal_MakeFlash
00004A60 46FC 2700                  		move	#$2700,sr
00004A64 4DF9 00C0 0004             		lea	($C00004).l,a6
00004A6A 3CBC 8B03                  		move.w	#$8B03,(a6)
00004A6E 3CBC 8004                  		move.w	#$8004,(a6)
00004A72 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004A78 3CBC 9011                  		move.w	#$9011,(a6)
00004A7C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A80 0200 00BF                  		andi.b	#$BF,d0
00004A84 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A8A 6100 C852                  		bsr.w	ClearScreen
00004A8E 46FC 2300                  		move	#$2300,sr
00004A92 4BF9 00C0 0004             		lea	($C00004).l,a5
00004A98 3ABC 8F01                  		move.w	#$8F01,(a5)
00004A9C 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004AA2 3ABC 9780                  		move.w	#$9780,(a5)
00004AA6 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004AAC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004AB4                            
00004AB4                            loc_463C:
00004AB4 3215                       		move.w	(a5),d1
00004AB6 0801 0001                  		btst	#1,d1
00004ABA 66F8                       		bne.s	loc_463C
00004ABC 3ABC 8F02                  		move.w	#$8F02,(a5)
00004AC0 6100 0000                  		bsr.w	SS_BGLoad
00004AC4 7014                       		moveq	#$14,d0
00004AC6 6100 CC3E                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004ACA 43F8 D000                  		lea	($FFFFD000).w,a1
00004ACE 7000                       		moveq	#0,d0
00004AD0 323C 07FF                  		move.w	#$7FF,d1
00004AD4                            
00004AD4                            SS_ClrObjRam:
00004AD4 22C0                       		move.l	d0,(a1)+
00004AD6 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004ADA                            
00004ADA 43F8 F700                  		lea	($FFFFF700).w,a1
00004ADE 7000                       		moveq	#0,d0
00004AE0 323C 003F                  		move.w	#$3F,d1
00004AE4                            
00004AE4                            SS_ClrRam:
00004AE4 22C0                       		move.l	d0,(a1)+
00004AE6 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004AEA                            
00004AEA 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004AEE 7000                       		moveq	#0,d0
00004AF0 323C 0027                  		move.w	#$27,d1
00004AF4                            
00004AF4                            SS_ClrRam2:
00004AF4 22C0                       		move.l	d0,(a1)+
00004AF6 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004AFA                            
00004AFA 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004AFE 7000                       		moveq	#0,d0
00004B00 323C 007F                  		move.w	#$7F,d1
00004B04                            
00004B04                            SS_ClrNemRam:
00004B04 22C0                       		move.l	d0,(a1)+
00004B06 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004B0A                            
00004B0A 4238 F64E                  		clr.b	($FFFFF64E).w
00004B0E 4278 FE02                  		clr.w	($FFFFFE02).w
00004B12 700A                       		moveq	#$A,d0
00004B14 6100 D5D4                  		bsr.w	PalLoad1	; load special stage pallet
00004B18 4EB9 0000 0000             		jsr	SS_Load
00004B1E 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004B26 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004B2E 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004B34 6100 0000                  		bsr.w	PalCycle_SS
00004B38 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004B3C 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004B40 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004B46 303C 0089                  		move.w	#$89,d0
00004B4A 6100 C864                  		bsr.w	PlaySound	; play special stage BG	music
00004B4E 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004B54 43F9 0000 44F8             		lea	(Demo_Index).l,a1
00004B5A 7006                       		moveq	#6,d0
00004B5C E548                       		lsl.w	#2,d0
00004B5E 2271 0000                  		movea.l	(a1,d0.w),a1
00004B62 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004B68 5338 F792                  		subq.b	#1,($FFFFF792).w
00004B6C 4278 FE20                  		clr.w	($FFFFFE20).w
00004B70 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004B74 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004B7A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004B80                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004B80                            ;		beq.s	SS_NoDebug	; if not, branch
00004B80                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004B80                            ;		beq.s	SS_NoDebug	; if not, branch
00004B80                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004B80                            
00004B80                            SS_NoDebug:
00004B80 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B84 0000 0040                  		ori.b	#$40,d0
00004B88 33C0 00C0 0004             		move.w	d0,($C00004).l
00004B8E 6100 D32E                  		bsr.w	Pal_MakeWhite
00004B92                            
00004B92                            ; ---------------------------------------------------------------------------
00004B92                            ; Main Special Stage loop
00004B92                            ; ---------------------------------------------------------------------------
00004B92                            
00004B92                            SS_MainLoop:
00004B92 6100 C82E                  		bsr.w	PauseGame
00004B96 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004B9C 6100 DF88                  		bsr.w	DelayProgram
00004BA0 4A78 F784                          tst.w   ($FFFFF784).w
00004BA4 6700                               beq.s   SS_NotReversed
00004BA6 5378 F784                          subi.w  #1,($FFFFF784).w
00004BAA                            
00004BAA                            SS_NotReversed:
00004BAA 6100 F89C                  		bsr.w	MoveSonicInDemo
00004BAE 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004BB4 4EB9 0000 0000             		jsr	ObjectsLoad
00004BBA 4EB9 0000 0000             		jsr	BuildSprites
00004BC0 4EB9 0000 0000             		jsr	SS_ShowLayout
00004BC6 6100 0000                  		bsr.w	SS_BGAnimate
00004BCA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004BCE 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004BD0 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004BD4 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004BD8                            
00004BD8                            SS_ChkEnd:
00004BD8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004BDE 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004BE2                            
00004BE2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004BE6 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004BEA 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004BF0 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004BF6 6500                       		bcs.s	SS_End		; if not, branch
00004BF8 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004BFC                            
00004BFC                            SS_End:
00004BFC 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004C02 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004C08 4278 F794                  		clr.w	($FFFFF794).w
00004C0C                            
00004C0C                            SS_EndLoop:
00004C0C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004C12 6100 DF12                  		bsr.w	DelayProgram
00004C16 6100 F830                  		bsr.w	MoveSonicInDemo
00004C1A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C20 4EB9 0000 0000             		jsr	ObjectsLoad
00004C26 4EB9 0000 0000             		jsr	BuildSprites
00004C2C 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C32 6100 0000                  		bsr.w	SS_BGAnimate
00004C36 5378 F794                  		subq.w	#1,($FFFFF794).w
00004C3A 6A00                       		bpl.s	loc_47D4
00004C3C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004C42 6100 D346                  		bsr.w	Pal_ToWhite
00004C46                            
00004C46                            loc_47D4:
00004C46 4A78 F614                  		tst.w	($FFFFF614).w
00004C4A 66C0                       		bne.s	SS_EndLoop
00004C4C                            
00004C4C 46FC 2700                  		move	#$2700,sr
00004C50 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C56 3CBC 8230                  		move.w	#$8230,(a6)
00004C5A 3CBC 8407                  		move.w	#$8407,(a6)
00004C5E 3CBC 9001                  		move.w	#$9001,(a6)
00004C62 6100 C67A                  		bsr.w	ClearScreen
00004C66 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004C70 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004C76 6100 C7E2                  		bsr.w	NemDec
00004C7A 4EB9 0000 0000             		jsr	Hud_Base
00004C80 46FC 2300                  		move	#$2300,sr
00004C84 7011                       		moveq	#$11,d0
00004C86 6100 D47E                  		bsr.w	PalLoad2	; load results screen pallet
00004C8A 7000                       		moveq	#0,d0
00004C8C 6100 C93E                  		bsr.w	LoadPLC2
00004C90 701B                       		moveq	#$1B,d0
00004C92 6100 C906                  		bsr.w	LoadPLC		; load results screen patterns
00004C96 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004C9C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004CA2 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004CA6 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004CAA 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004CAE 303C 008E                  		move.w	#$8E,d0
00004CB2 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004CB8 43F8 D000                  		lea	($FFFFD000).w,a1
00004CBC 7000                       		moveq	#0,d0
00004CBE 323C 07FF                  		move.w	#$7FF,d1
00004CC2                            
00004CC2                            SS_EndClrObjRam:
00004CC2 22C0                       		move.l	d0,(a1)+
00004CC4 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004CC8                            
00004CC8 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004CCE                            
00004CCE                            SS_NormalExit:
00004CCE 6100 C6F2                  		bsr.w	PauseGame
00004CD2 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004CD8 6100 DE4C                  		bsr.w	DelayProgram
00004CDC 4EB9 0000 0000             		jsr	ObjectsLoad
00004CE2 4EB9 0000 0000             		jsr	BuildSprites
00004CE8 6100 C91C                  		bsr.w	RunPLC_RAM
00004CEC 4A78 FE02                  		tst.w	($FFFFFE02).w
00004CF0 67DC                       		beq.s	SS_NormalExit
00004CF2 4AB8 F680                  		tst.l	($FFFFF680).w
00004CF6 66D6                       		bne.s	SS_NormalExit
00004CF8 303C 00CA                  		move.w	#$CA,d0
00004CFC 6100 C6B8                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004D00 6100 D268                  		bsr.w	Pal_MakeFlash
00004D04 4E75                       		rts	
00004D06                            ; ===========================================================================
00004D06                            
00004D06                            SS_ToSegaScreen:
00004D06 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004D0C 4E75                       		rts
00004D0E                            
00004D0E                            ; ---------------------------------------------------------------------------
00004D0E                            ; Special stage	background loading subroutine
00004D0E                            ; ---------------------------------------------------------------------------
00004D0E                            
00004D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D0E                            
00004D0E                            
00004D0E                            SS_BGLoad:				; XREF: SpecialStage
00004D0E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D14 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004D1A 303C 4051                  		move.w	#$4051,d0
00004D1E 6100 CA18                  		bsr.w	EniDec
00004D22 263C 5000 0001             		move.l	#$50000001,d3
00004D28 45F9 00FF 0080             		lea	($FF0080).l,a2
00004D2E 7E06                       		moveq	#6,d7
00004D30                            
00004D30                            loc_48BE:
00004D30 2003                       		move.l	d3,d0
00004D32 7C03                       		moveq	#3,d6
00004D34 7800                       		moveq	#0,d4
00004D36 0C47 0003                  		cmpi.w	#3,d7
00004D3A 6400                       		bcc.s	loc_48CC
00004D3C 7801                       		moveq	#1,d4
00004D3E                            
00004D3E                            loc_48CC:
00004D3E 7A07                       		moveq	#7,d5
00004D40                            
00004D40                            loc_48CE:
00004D40 224A                       		movea.l	a2,a1
00004D42 0A04 0001                  		eori.b	#1,d4
00004D46 6600                       		bne.s	loc_48E2
00004D48 0C47 0006                  		cmpi.w	#6,d7
00004D4C 6600                       		bne.s	loc_48F2
00004D4E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D54                            
00004D54                            loc_48E2:
00004D54 48E7 F800                  		movem.l	d0-d4,-(sp)
00004D58 7207                       		moveq	#7,d1
00004D5A 7407                       		moveq	#7,d2
00004D5C 6100 C6DC                  		bsr.w	ShowVDPGraphics
00004D60 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004D64                            
00004D64                            loc_48F2:
00004D64 0680 0010 0000             		addi.l	#$100000,d0
00004D6A 51CD FFD4                  		dbf	d5,loc_48CE
00004D6E 0680 0380 0000             		addi.l	#$3800000,d0
00004D74 0A04 0001                  		eori.b	#1,d4
00004D78 51CE FFC4                  		dbf	d6,loc_48CC
00004D7C 0683 1000 0000             		addi.l	#$10000000,d3
00004D82 6A00                       		bpl.s	loc_491C
00004D84 4843                       		swap	d3
00004D86 0683 0000 C000             		addi.l	#$C000,d3
00004D8C 4843                       		swap	d3
00004D8E                            
00004D8E                            loc_491C:
00004D8E D4FC 0080                  		adda.w	#$80,a2
00004D92 51CF FF9C                  		dbf	d7,loc_48BE
00004D96 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D9C 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004DA2 303C 4000                  		move.w	#$4000,d0
00004DA6 6100 C990                  		bsr.w	EniDec
00004DAA 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DB0 203C 4000 0003             		move.l	#$40000003,d0
00004DB6 723F                       		moveq	#$3F,d1
00004DB8 741F                       		moveq	#$1F,d2
00004DBA 6100 C67E                  		bsr.w	ShowVDPGraphics
00004DBE 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DC4 203C 5000 0003             		move.l	#$50000003,d0
00004DCA 723F                       		moveq	#$3F,d1
00004DCC 743F                       		moveq	#$3F,d2
00004DCE 6100 C66A                  		bsr.w	ShowVDPGraphics
00004DD2 4E75                       		rts	
00004DD4                            ; End of function SS_BGLoad
00004DD4                            
00004DD4                            ; ---------------------------------------------------------------------------
00004DD4                            ; Pallet cycling routine - special stage
00004DD4                            ; ---------------------------------------------------------------------------
00004DD4                            
00004DD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DD4                            
00004DD4                            
00004DD4                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004DD4 4A78 F63A                  		tst.w	($FFFFF63A).w
00004DD8 6600                       		bne.s	locret_49E6
00004DDA 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004DDE 6A00                       		bpl.s	locret_49E6
00004DE0 4DF9 00C0 0004             		lea	($C00004).l,a6
00004DE6 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004DEA 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004DEE 0240 001F                  		andi.w	#$1F,d0
00004DF2 E548                       		lsl.w	#2,d0
00004DF4 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004DFA D0C0                       		adda.w	d0,a0
00004DFC 1018                       		move.b	(a0)+,d0
00004DFE 6A00                       		bpl.s	loc_4992
00004E00 303C 01FF                  		move.w	#$1FF,d0
00004E04                            
00004E04                            loc_4992:
00004E04 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004E08 7000                       		moveq	#0,d0
00004E0A 1018                       		move.b	(a0)+,d0
00004E0C 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004E10 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004E16 43F1 0000                  		lea	(a1,d0.w),a1
00004E1A 303C 8200                  		move.w	#-$7E00,d0
00004E1E 1019                       		move.b	(a1)+,d0
00004E20 3C80                       		move.w	d0,(a6)
00004E22 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004E26 303C 8400                  		move.w	#-$7C00,d0
00004E2A 1018                       		move.b	(a0)+,d0
00004E2C 3C80                       		move.w	d0,(a6)
00004E2E 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004E38 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004E40 7000                       		moveq	#0,d0
00004E42 1018                       		move.b	(a0)+,d0
00004E44 6B00                       		bmi.s	loc_49E8
00004E46 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004E4C D2C0                       		adda.w	d0,a1
00004E4E 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004E52 24D9                       		move.l	(a1)+,(a2)+
00004E54 24D9                       		move.l	(a1)+,(a2)+
00004E56 24D9                       		move.l	(a1)+,(a2)+
00004E58                            
00004E58                            locret_49E6:
00004E58 4E75                       		rts	
00004E5A                            ; ===========================================================================
00004E5A                            
00004E5A                            loc_49E8:				; XREF: PalCycle_SS
00004E5A 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004E5E 0C40 008A                  		cmpi.w	#$8A,d0
00004E62 6500                       		bcs.s	loc_49F4
00004E64 5241                       		addq.w	#1,d1
00004E66                            
00004E66                            loc_49F4:
00004E66 C2FC 002A                  		mulu.w	#$2A,d1
00004E6A 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004E70 D2C1                       		adda.w	d1,a1
00004E72 0240 007F                  		andi.w	#$7F,d0
00004E76 0880 0000                  		bclr	#0,d0
00004E7A 6700                       		beq.s	loc_4A18
00004E7C 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004E80 24D1                       		move.l	(a1),(a2)+
00004E82 24E9 0004                  		move.l	4(a1),(a2)+
00004E86 24E9 0008                  		move.l	8(a1),(a2)+
00004E8A                            
00004E8A                            loc_4A18:
00004E8A D2FC 000C                  		adda.w	#$C,a1
00004E8E 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004E92 0C40 000A                  		cmpi.w	#$A,d0
00004E96 6500                       		bcs.s	loc_4A2E
00004E98 0440 000A                  		subi.w	#$A,d0
00004E9C 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004EA0                            
00004EA0                            loc_4A2E:
00004EA0 3200                       		move.w	d0,d1
00004EA2 D040                       		add.w	d0,d0
00004EA4 D041                       		add.w	d1,d0
00004EA6 D2C0                       		adda.w	d0,a1
00004EA8 24D9                       		move.l	(a1)+,(a2)+
00004EAA 34D9                       		move.w	(a1)+,(a2)+
00004EAC 4E75                       		rts	
00004EAE                            ; End of function PalCycle_SS
00004EAE                            
00004EAE                            ; ===========================================================================
00004EAE 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004EBE                            					; XREF: PalCycle_SS
00004EBE 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004ECE 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004EDE FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004EEE 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004EFE 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004F0E 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004F1E FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004F2E                            		even
00004F2E 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004F3C                            					; XREF: PalCycle_SS
00004F3C                            		even
00004F3C                            
00004F3C                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004F84                            		even
00004F84                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005056                            		even
00005056                            
00005056                            ; ---------------------------------------------------------------------------
00005056                            ; Subroutine to	make the special stage background animated
00005056                            ; ---------------------------------------------------------------------------
00005056                            
00005056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005056                            
00005056                            
00005056                            SS_BGAnimate:				; XREF: SpecialStage
00005056 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000505A 6600                       		bne.s	loc_4BF6
0000505C 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005062 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005068                            
00005068                            loc_4BF6:
00005068 0C40 0008                  		cmpi.w	#8,d0
0000506C 6400                       		bcc.s	loc_4C4E
0000506E 0C40 0006                  		cmpi.w	#6,d0
00005072 6600                       		bne.s	loc_4C10
00005074 5278 F718                  		addq.w	#1,($FFFFF718).w
00005078 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000507C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005082                            
00005082                            loc_4C10:
00005082 7000                       		moveq	#0,d0
00005084 3038 F708                  		move.w	($FFFFF708).w,d0
00005088 4440                       		neg.w	d0
0000508A 4840                       		swap	d0
0000508C 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005092 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005096 7609                       		moveq	#9,d3
00005098                            
00005098                            loc_4C26:
00005098 302B 0002                  		move.w	2(a3),d0
0000509C 6100 DABA                  		bsr.w	CalcSine
000050A0 7400                       		moveq	#0,d2
000050A2 1419                       		move.b	(a1)+,d2
000050A4 C1C2                       		muls.w	d2,d0
000050A6 E080                       		asr.l	#8,d0
000050A8 36C0                       		move.w	d0,(a3)+
000050AA 1419                       		move.b	(a1)+,d2
000050AC 4882                       		ext.w	d2
000050AE D55B                       		add.w	d2,(a3)+
000050B0 51CB FFE6                  		dbf	d3,loc_4C26
000050B4 47F8 AA00                  		lea	($FFFFAA00).w,a3
000050B8 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000050BE 6000                       		bra.s	loc_4C7E
000050C0                            ; ===========================================================================
000050C0                            
000050C0                            loc_4C4E:				; XREF: SS_BGAnimate
000050C0 0C40 000C                  		cmpi.w	#$C,d0
000050C4 6600                       		bne.s	loc_4C74
000050C6 5378 F718                  		subq.w	#1,($FFFFF718).w
000050CA 47F8 AB00                  		lea	($FFFFAB00).w,a3
000050CE 243C 0001 8000             		move.l	#$18000,d2
000050D4 7206                       		moveq	#6,d1
000050D6                            
000050D6                            loc_4C64:
000050D6 2013                       		move.l	(a3),d0
000050D8 9082                       		sub.l	d2,d0
000050DA 26C0                       		move.l	d0,(a3)+
000050DC 0482 0000 2000             		subi.l	#$2000,d2
000050E2 51C9 FFF2                  		dbf	d1,loc_4C64
000050E6                            
000050E6                            loc_4C74:
000050E6 47F8 AB00                  		lea	($FFFFAB00).w,a3
000050EA 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000050F0                            
000050F0                            loc_4C7E:
000050F0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000050F4 3038 F718                  		move.w	($FFFFF718).w,d0
000050F8 4440                       		neg.w	d0
000050FA 4840                       		swap	d0
000050FC 7600                       		moveq	#0,d3
000050FE 161A                       		move.b	(a2)+,d3
00005100 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005104 4442                       		neg.w	d2
00005106 0242 00FF                  		andi.w	#$FF,d2
0000510A E54A                       		lsl.w	#2,d2
0000510C                            
0000510C                            loc_4C9A:
0000510C 301B                       		move.w	(a3)+,d0
0000510E 544B                       		addq.w	#2,a3
00005110 7200                       		moveq	#0,d1
00005112 121A                       		move.b	(a2)+,d1
00005114 5341                       		subq.w	#1,d1
00005116                            
00005116                            loc_4CA4:
00005116 2380 2000                  		move.l	d0,(a1,d2.w)
0000511A 5842                       		addq.w	#4,d2
0000511C 0242 03FC                  		andi.w	#$3FC,d2
00005120 51C9 FFF4                  		dbf	d1,loc_4CA4
00005124 51CB FFE6                  		dbf	d3,loc_4C9A
00005128 4E75                       		rts	
0000512A                            ; End of function SS_BGAnimate
0000512A                            
0000512A                            ; ===========================================================================
0000512A 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005136                            		even
00005136 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000513E                            		even
0000513E 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005152                            		even
00005152                            					; XREF: SS_BGAnimate
00005152                            ; ===========================================================================
00005152                            
00005152                            ; ---------------------------------------------------------------------------
00005152                            ; Continue screen
00005152                            ; ---------------------------------------------------------------------------
00005152                            
00005152                            ContinueScreen:				; XREF: GameModeArray
00005152 6100 CCEC                  		bsr.w	Pal_FadeFrom
00005156 46FC 2700                  		move	#$2700,sr
0000515A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000515E 0200 00BF                  		andi.b	#$BF,d0
00005162 33C0 00C0 0004             		move.w	d0,($C00004).l
00005168 4DF9 00C0 0004             		lea	($C00004).l,a6
0000516E 3CBC 8004                  		move.w	#$8004,(a6)
00005172 3CBC 8700                  		move.w	#$8700,(a6)
00005176 6100 C166                  		bsr.w	ClearScreen
0000517A 43F8 D000                  		lea	($FFFFD000).w,a1
0000517E 7000                       		moveq	#0,d0
00005180 323C 07FF                  		move.w	#$7FF,d1
00005184                            
00005184                            Cont_ClrObjRam:
00005184 22C0                       		move.l	d0,(a1)+
00005186 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000518A                            
0000518A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005194 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000519A 6100 C2BE                  		bsr.w	NemDec
0000519E 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000051A8 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000051AE 6100 C2AA                  		bsr.w	NemDec
000051B2 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000051BC 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000051C2 6100 C296                  		bsr.w	NemDec
000051C6 720A                       		moveq	#10,d1
000051C8 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000051CE 7012                       		moveq	#$12,d0
000051D0 6100 CF18                  		bsr.w	PalLoad1	; load continue	screen pallet
000051D4 103C 0090                  		move.b	#$90,d0
000051D8 6100 C1D6                  		bsr.w	PlaySound	; play continue	music
000051DC 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000051E2 42B8 F700                  		clr.l	($FFFFF700).w
000051E6 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000051EE 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000051F4 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000051FA 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005200 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005206 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
0000520C 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005212 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005218 4EB9 0000 0000             		jsr	ObjectsLoad
0000521E 4EB9 0000 0000             		jsr	BuildSprites
00005224 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005228 0000 0040                  		ori.b	#$40,d0
0000522C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005232 6100 CB62                  		bsr.w	Pal_FadeTo
00005236                            
00005236                            ; ---------------------------------------------------------------------------
00005236                            ; Continue screen main loop
00005236                            ; ---------------------------------------------------------------------------
00005236                            
00005236                            Cont_MainLoop:
00005236 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000523C 6100 D8E8                  		bsr.w	DelayProgram
00005240 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005246 6400                       		bcc.s	loc_4DF2
00005248 46FC 2700                  		move	#$2700,sr
0000524C 3238 F614                  		move.w	($FFFFF614).w,d1
00005250 82FC 003C                  		divu.w	#$3C,d1
00005254 0281 0000 000F             		andi.l	#$F,d1
0000525A 4EB9 0000 0000             		jsr	ContScrCounter
00005260 46FC 2300                  		move	#$2300,sr
00005264                            
00005264                            loc_4DF2:
00005264 4EB9 0000 0000             		jsr	ObjectsLoad
0000526A 4EB9 0000 0000             		jsr	BuildSprites
00005270 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005276 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005278 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000527E 64B6                       		bcc.s	Cont_MainLoop
00005280 4A78 F614                  		tst.w	($FFFFF614).w
00005284 6600 FFB0                  		bne.w	Cont_MainLoop
00005288 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000528E 4E75                       		rts	
00005290                            ; ===========================================================================
00005290                            
00005290                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005290 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005296 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000529C 7000                       		moveq	#0,d0
0000529E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000052A2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000052A6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000052AA 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000052AE 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000052B2 4E75                       		rts	
000052B4                            ; ===========================================================================
000052B4                            
000052B4                            ; ---------------------------------------------------------------------------
000052B4                            ; Object 80 - Continue screen elements
000052B4                            ; ---------------------------------------------------------------------------
000052B4                            
000052B4                            Obj80:					; XREF: Obj_Index
000052B4 7000                       		moveq	#0,d0
000052B6 1028 0024                  		move.b	$24(a0),d0
000052BA 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000052BE 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000052C2                            ; ===========================================================================
000052C2 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000052C4 0000                       		dc.w Obj80_Display-Obj80_Index
000052C6 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000052C8 0000                       		dc.w Obj80_ChkType-Obj80_Index
000052CA                            ; ===========================================================================
000052CA                            
000052CA                            Obj80_Main:				; XREF: Obj80_Index
000052CA 5428 0024                  		addq.b	#2,$24(a0)
000052CE 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000052D6 317C 8500 0002             		move.w	#$8500,2(a0)
000052DC 117C 0000 0001             		move.b	#0,1(a0)
000052E2 117C 003C 0019             		move.b	#$3C,$19(a0)
000052E8 317C 0120 0008             		move.w	#$120,8(a0)
000052EE 317C 00C0 000A             		move.w	#$C0,$A(a0)
000052F4 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000052FA                            
000052FA                            Obj80_Display:				; XREF: Obj80_Index
000052FA 4EF9 0000 0000             		jmp	DisplaySprite
00005300                            ; ===========================================================================
00005300                            Obj80_MiniSonicPos:
00005300 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005312 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000531E                            ; ===========================================================================
0000531E                            
0000531E                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000531E 2248                       		movea.l	a0,a1
00005320 45F9 0000 5300             		lea	(Obj80_MiniSonicPos).l,a2
00005326 7200                       		moveq	#0,d1
00005328 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000532C 5501                       		subq.b	#2,d1
0000532E 6400                       		bcc.s	loc_4EC4
00005330 4EF9 0000 0000             		jmp	DeleteObject
00005336                            ; ===========================================================================
00005336                            
00005336                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005336 7601                       		moveq	#1,d3
00005338 0C01 000E                  		cmpi.b	#$E,d1
0000533C 6500                       		bcs.s	loc_4ED0
0000533E 7600                       		moveq	#0,d3
00005340 720E                       		moveq	#$E,d1
00005342                            
00005342                            loc_4ED0:
00005342 1401                       		move.b	d1,d2
00005344 0202 0001                  		andi.b	#1,d2
00005348                            
00005348                            Obj80_MiniSonLoop:
00005348 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000534C 335A 0008                  		move.w	(a2)+,8(a1)
00005350 4A02                       		tst.b	d2
00005352 6700                       		beq.s	loc_4EEA
00005354 0469 000A 0008             		subi.w	#$A,8(a1)
0000535A                            
0000535A                            loc_4EEA:
0000535A 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005360 137C 0006 001A             		move.b	#6,$1A(a1)
00005366 137C 0006 0024             		move.b	#6,$24(a1)
0000536C 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005374 337C 8551 0002             		move.w	#$8551,2(a1)
0000537A 137C 0000 0001             		move.b	#0,1(a1)
00005380 43E9 0040                  		lea	$40(a1),a1
00005384 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005388 43E9 FFC0                  		lea	-$40(a1),a1
0000538C 1343 0028                  		move.b	d3,$28(a1)
00005390                            
00005390                            Obj80_ChkType:				; XREF: Obj80_Index
00005390 4A28 0028                  		tst.b	$28(a0)
00005394 6700                       		beq.s	loc_4F40
00005396 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000539C 6500                       		bcs.s	loc_4F40
0000539E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000053A2 0200 0001                  		andi.b	#1,d0
000053A6 6600                       		bne.s	loc_4F40
000053A8 4A78 D010                  		tst.w	($FFFFD010).w
000053AC 6600                       		bne.s	Obj80_Delete
000053AE 4E75                       		rts	
000053B0                            ; ===========================================================================
000053B0                            
000053B0                            loc_4F40:				; XREF: Obj80_ChkType
000053B0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000053B4 0200 000F                  		andi.b	#$F,d0
000053B8 6600                       		bne.s	Obj80_Display2
000053BA 0868 0000 001A             		bchg	#0,$1A(a0)
000053C0                            
000053C0                            Obj80_Display2:
000053C0 4EF9 0000 0000             		jmp	DisplaySprite
000053C6                            ; ===========================================================================
000053C6                            
000053C6                            Obj80_Delete:				; XREF: Obj80_ChkType
000053C6 4EF9 0000 0000             		jmp	DeleteObject
000053CC                            ; ===========================================================================
000053CC                            
000053CC                            ; ---------------------------------------------------------------------------
000053CC                            ; Object 81 - Sonic on the continue screen
000053CC                            ; ---------------------------------------------------------------------------
000053CC                            
000053CC                            Obj81:					; XREF: Obj_Index
000053CC 7000                       		moveq	#0,d0
000053CE 1028 0024                  		move.b	$24(a0),d0
000053D2 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000053D6 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000053DA 4EF9 0000 0000             		jmp	DisplaySprite
000053E0                            ; ===========================================================================
000053E0 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000053E2 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000053E4 0000                       		dc.w Obj81_Animate-Obj81_Index
000053E6 0000                       		dc.w Obj81_Run-Obj81_Index
000053E8                            ; ===========================================================================
000053E8                            
000053E8                            Obj81_Main:				; XREF: Obj81_Index
000053E8 5428 0024                  		addq.b	#2,$24(a0)
000053EC 317C 00A0 0008             		move.w	#$A0,8(a0)
000053F2 317C 00C0 000C             		move.w	#$C0,$C(a0)
000053F8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005400 317C 0780 0002             		move.w	#$780,2(a0)
00005406 117C 0004 0001             		move.b	#4,1(a0)
0000540C 117C 0002 0018             		move.b	#2,$18(a0)
00005412 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005418 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000541E                            
0000541E                            Obj81_ChkLand:				; XREF: Obj81_Index
0000541E 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005424 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005426 5428 0024                  		addq.b	#2,$24(a0)
0000542A 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000542E 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005436 317C 8500 0002             		move.w	#$8500,2(a0)
0000543C 117C 0000 001C             		move.b	#0,$1C(a0)
00005442 6000                       		bra.s	Obj81_Animate
00005444                            ; ===========================================================================
00005444                            
00005444                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005444 4EB9 0000 0000             		jsr	SpeedToPos
0000544A 4EB9 0000 0000             		jsr	Sonic_Animate
00005450 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005456                            ; ===========================================================================
00005456                            
00005456                            Obj81_Animate:				; XREF: Obj81_Index
00005456 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000545A 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000545C 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005462 4EF9 0000 0000             		jmp	AnimateSprite
00005468                            ; ===========================================================================
00005468                            
00005468                            Obj81_GetUp:				; XREF: Obj81_Animate
00005468 5428 0024                  		addq.b	#2,$24(a0)
0000546C 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005474 317C 0780 0002             		move.w	#$780,2(a0)
0000547A 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005480 4268 0014                  		clr.w	$14(a0)
00005484 5168 000C                  		subq.w	#8,$C(a0)
00005488 103C 00E0                  		move.b	#$E0,d0
0000548C 6100 BF28                  		bsr.w	PlaySound_Special ; fade out music
00005490                            
00005490                            Obj81_Run:				; XREF: Obj81_Index
00005490 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005496 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005498 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
0000549E 6000                       		bra.s	Obj81_ShowRun
000054A0                            ; ===========================================================================
000054A0                            
000054A0                            Obj81_AddSpeed:				; XREF: Obj81_Run
000054A0 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000054A6                            
000054A6                            Obj81_ShowRun:				; XREF: Obj81_Run
000054A6 4EB9 0000 0000             		jsr	SpeedToPos
000054AC 4EB9 0000 0000             		jsr	Sonic_Animate
000054B2 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000054B8                            ; ===========================================================================
000054B8                            Ani_obj81:
000054B8                            	include "_anim\obj81.asm"
000054B8                            ; ---------------------------------------------------------------------------
000054B8                            ; Animation script - Sonic on the continue screen
000054B8                            ; ---------------------------------------------------------------------------
000054B8 0000                       		dc.w byte_504A-Ani_obj81
000054BA 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000054C6 00                         		even
000054C6 00                         		even
000054C6                            
000054C6                            ; ---------------------------------------------------------------------------
000054C6                            ; Sprite mappings - Continue screen
000054C6                            ; ---------------------------------------------------------------------------
000054C6                            Map_obj80:
000054C6                            	include "_maps\obj80.asm"
000054C6                            ; ---------------------------------------------------------------------------
000054C6                            ; Sprite mappings - Continue screen
000054C6                            ; ---------------------------------------------------------------------------
000054C6 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000054CA 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000054CE 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000054D2 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000054D6 0B                         byte_5066:	dc.b $B
000054D7 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000054DC F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000054E1 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000054E6 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000054EB F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000054F0 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000054F5 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000054FA F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000054FF 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005504 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005509 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
0000550E 03                         byte_509E:	dc.b 3
0000550F 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005514 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005519 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000551E 03                         byte_50AE:	dc.b 3
0000551F 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005524 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005529 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000552E 03                         byte_50BE:	dc.b 3
0000552F 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005534 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005539 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000553E 02                         byte_50CE:	dc.b 2
0000553F 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005544 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005549 01                         byte_50D9:	dc.b 1
0000554A 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000554F 01                         byte_50DF:	dc.b 1
00005550 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005556 00                         		even
00005556 00                         		even
00005556                            
00005556                            ; ===========================================================================
00005556                            ; ---------------------------------------------------------------------------
00005556                            ; Ending sequence in Green Hill	Zone
00005556                            ; ---------------------------------------------------------------------------
00005556                            
00005556                            EndingSequence:				; XREF: GameModeArray
00005556 103C 00E4                  		move.b	#$E4,d0
0000555A 6100 BE5A                  		bsr.w	PlaySound_Special ; stop music
0000555E 6100 C8E0                  		bsr.w	Pal_FadeFrom
00005562 43F8 D000                  		lea	($FFFFD000).w,a1
00005566 7000                       		moveq	#0,d0
00005568 323C 07FF                  		move.w	#$7FF,d1
0000556C                            
0000556C                            End_ClrObjRam:
0000556C 22C0                       		move.l	d0,(a1)+
0000556E 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005572                            
00005572 43F8 F628                  		lea	($FFFFF628).w,a1
00005576 7000                       		moveq	#0,d0
00005578 323C 0015                  		move.w	#$15,d1
0000557C                            
0000557C                            End_ClrRam:
0000557C 22C0                       		move.l	d0,(a1)+
0000557E 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005582                            
00005582 43F8 F700                  		lea	($FFFFF700).w,a1
00005586 7000                       		moveq	#0,d0
00005588 323C 003F                  		move.w	#$3F,d1
0000558C                            
0000558C                            End_ClrRam2:
0000558C 22C0                       		move.l	d0,(a1)+
0000558E 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005592                            
00005592 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005596 7000                       		moveq	#0,d0
00005598 323C 0047                  		move.w	#$47,d1
0000559C                            
0000559C                            End_ClrRam3:
0000559C 22C0                       		move.l	d0,(a1)+
0000559E 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000055A2                            
000055A2 46FC 2700                  		move	#$2700,sr
000055A6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000055AA 0200 00BF                  		andi.b	#$BF,d0
000055AE 33C0 00C0 0004             		move.w	d0,($C00004).l
000055B4 6100 BD28                  		bsr.w	ClearScreen
000055B8 4DF9 00C0 0004             		lea	($C00004).l,a6
000055BE 3CBC 8B03                  		move.w	#$8B03,(a6)
000055C2 3CBC 8230                  		move.w	#$8230,(a6)
000055C6 3CBC 8407                  		move.w	#$8407,(a6)
000055CA 3CBC 857C                  		move.w	#$857C,(a6)
000055CE 3CBC 9001                  		move.w	#$9001,(a6)
000055D2 3CBC 8004                  		move.w	#$8004,(a6)
000055D6 3CBC 8720                  		move.w	#$8720,(a6)
000055DA 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000055E0 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000055E4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000055EA 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000055F0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000055F6 6700                       		beq.s	End_LoadData	; if yes, branch
000055F8 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000055FE                            
000055FE                            End_LoadData:
000055FE 701C                       		moveq	#$1C,d0
00005600 6100 C104                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005604 4EB9 0000 0000             		jsr	Hud_Base
0000560A 6100 0000                  		bsr.w	LevelSizeLoad
0000560E 6100 0000                  		bsr.w	DeformBgLayer
00005612 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005618 6100 0000                  		bsr.w	MainLoadBlockLoad
0000561C 6100 0000                  		bsr.w	LoadTilesFromStart
00005620 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005628 46FC 2300                  		move	#$2300,sr
0000562C 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005632 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005636 6100 C27E                  		bsr.w	KosDec
0000563A 7003                       		moveq	#3,d0
0000563C 6100 CAAC                  		bsr.w	PalLoad1	; load Sonic's pallet
00005640 303C 008B                  		move.w	#$8B,d0
00005644 6100 BD6A                  		bsr.w	PlaySound	; play ending sequence music
00005648 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000564E 6700                       		beq.s	End_LoadSonic	; if not, branch
00005650 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005656                            
00005656                            End_LoadSonic:
00005656 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000565C 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005662 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005668 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000566E 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005674 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000567A 4EB9 0000 0000             		jsr	ObjPosLoad
00005680 4EB9 0000 0000             		jsr	ObjectsLoad
00005686 4EB9 0000 0000             		jsr	BuildSprites
0000568C 7000                       		moveq	#0,d0
0000568E 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005692 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005696 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000569A 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
0000569E 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000056A2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000056A6 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000056AA 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000056AE 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000056B2 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000056B6 6100 EEE0                  		bsr.w	OscillateNumInit
000056BA 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000056C0 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000056C6 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000056CC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000056D2 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056D8 6100 D44C                  		bsr.w	DelayProgram
000056DC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000056E0 0000 0040                  		ori.b	#$40,d0
000056E4 33C0 00C0 0004             		move.w	d0,($C00004).l
000056EA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000056F0 6100 C6A4                  		bsr.w	Pal_FadeTo
000056F4                            
000056F4                            ; ---------------------------------------------------------------------------
000056F4                            ; Main ending sequence loop
000056F4                            ; ---------------------------------------------------------------------------
000056F4                            
000056F4                            End_MainLoop:
000056F4 6100 BCCC                  		bsr.w	PauseGame
000056F8 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056FE 6100 D426                  		bsr.w	DelayProgram
00005702 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005706 6100 0000                  		bsr.w	End_MoveSonic
0000570A 4EB9 0000 0000             		jsr	ObjectsLoad
00005710 6100 0000                  		bsr.w	DeformBgLayer
00005714 4EB9 0000 0000             		jsr	BuildSprites
0000571A 4EB9 0000 0000             		jsr	ObjPosLoad
00005720 6100 C234                  		bsr.w	PalCycle_Load
00005724 6100 EEC8                  		bsr.w	OscillateNumDo
00005728 6100 EF54                  		bsr.w	ChangeRingFrame
0000572C 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005732 6700                       		beq.s	loc_52DA	; if yes, branch
00005734 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000573A 103C 0091                  		move.b	#$91,d0
0000573E 6100 BC76                  		bsr.w	PlaySound_Special ; play credits music
00005742 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005748 4E75                       		rts	
0000574A                            ; ===========================================================================
0000574A                            
0000574A                            loc_52DA:
0000574A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000574E 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005752                            
00005752 4278 FE02                  		clr.w	($FFFFFE02).w
00005756 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000575C 4278 F794                  		clr.w	($FFFFF794).w
00005760                            
00005760                            End_AllEmlds:				; XREF: loc_5334
00005760 6100 BC60                  		bsr.w	PauseGame
00005764 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000576A 6100 D3BA                  		bsr.w	DelayProgram
0000576E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005772 6100 0000                  		bsr.w	End_MoveSonic
00005776 4EB9 0000 0000             		jsr	ObjectsLoad
0000577C 6100 0000                  		bsr.w	DeformBgLayer
00005780 4EB9 0000 0000             		jsr	BuildSprites
00005786 4EB9 0000 0000             		jsr	ObjPosLoad
0000578C 6100 EE60                  		bsr.w	OscillateNumDo
00005790 6100 EEEC                  		bsr.w	ChangeRingFrame
00005794 5378 F794                  		subq.w	#1,($FFFFF794).w
00005798 6A00                       		bpl.s	loc_5334
0000579A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000057A0 6100 C7E8                  		bsr.w	Pal_ToWhite
000057A4                            
000057A4                            loc_5334:
000057A4 4A78 FE02                  		tst.w	($FFFFFE02).w
000057A8 6700 FFB6                  		beq.w	End_AllEmlds
000057AC 4278 FE02                  		clr.w	($FFFFFE02).w
000057B0 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000057B6 4BF9 00C0 0004             		lea	($C00004).l,a5
000057BC 4DF9 00C0 0000             		lea	($C00000).l,a6
000057C2 47F8 F700                  		lea	($FFFFF700).w,a3
000057C6 49F8 A400                  		lea	($FFFFA400).w,a4
000057CA 343C 4000                  		move.w	#$4000,d2
000057CE 6100 0000                  		bsr.w	LoadTilesFromStart2
000057D2 7013                       		moveq	#$13,d0
000057D4 6100 C914                  		bsr.w	PalLoad1	; load ending pallet
000057D8 6100 C6E4                  		bsr.w	Pal_MakeWhite
000057DC 6000 FF16                  		bra.w	End_MainLoop
000057E0                            
000057E0                            ; ---------------------------------------------------------------------------
000057E0                            ; Subroutine controlling Sonic on the ending sequence
000057E0                            ; ---------------------------------------------------------------------------
000057E0                            
000057E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000057E0                            
000057E0                            
000057E0                            End_MoveSonic:				; XREF: End_MainLoop
000057E0 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000057E4 6600                       		bne.s	End_MoveSonic2
000057E6 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000057EC 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000057EE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000057F2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000057F8 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000057FE 4E75                       		rts	
00005800                            ; ===========================================================================
00005800                            
00005800                            End_MoveSonic2:				; XREF: End_MoveSonic
00005800 5500                       		subq.b	#2,d0
00005802 6600                       		bne.s	End_MoveSonic3
00005804 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
0000580A 6500                       		bcs.s	End_MoveSonExit	; if not, branch
0000580C 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005810 7000                       		moveq	#0,d0
00005812 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005816 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
0000581A 31C0 D014                  		move.w	d0,($FFFFD014).w
0000581E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005824 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
0000582A 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005830 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005836 4E75                       		rts	
00005838                            ; ===========================================================================
00005838                            
00005838                            End_MoveSonic3:				; XREF: End_MoveSonic
00005838 5500                       		subq.b	#2,d0
0000583A 6600                       		bne.s	End_MoveSonExit
0000583C 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005840 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005846 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000584C 4278 D024                  		clr.w	($FFFFD024).w
00005850                            
00005850                            End_MoveSonExit:
00005850 4E75                       		rts	
00005852                            ; End of function End_MoveSonic
00005852                            
00005852                            ; ===========================================================================
00005852                            ; ---------------------------------------------------------------------------
00005852                            ; Object 87 - Sonic on ending sequence
00005852                            ; ---------------------------------------------------------------------------
00005852                            
00005852                            Obj87:					; XREF: Obj_Index
00005852 7000                       		moveq	#0,d0
00005854 1028 0025                  		move.b	$25(a0),d0
00005858 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000585C 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005860 4EF9 0000 0000             		jmp	DisplaySprite
00005866                            ; ===========================================================================
00005866 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000586A 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000586E 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005872 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005876 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000587A                            ; ===========================================================================
0000587A                            
0000587A                            Obj87_Main:				; XREF: Obj87_Index
0000587A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005880 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005882 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005888 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000588E 4E75                       		rts	
00005890                            ; ===========================================================================
00005890                            
00005890                            Obj87_Main2:				; XREF: Obj87_Main
00005890 5428 0025                  		addq.b	#2,$25(a0)
00005894 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000589C 317C 03E1 0002             		move.w	#$3E1,2(a0)
000058A2 117C 0004 0001             		move.b	#4,1(a0)
000058A8 4228 0022                  		clr.b	$22(a0)
000058AC 117C 0002 0018             		move.b	#2,$18(a0)
000058B2 117C 0000 001A             		move.b	#0,$1A(a0)
000058B8 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
000058BE                            
000058BE                            Obj87_MakeEmlds:			; XREF: Obj87_Index
000058BE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000058C2 6600                       		bne.s	Obj87_Wait
000058C4 5428 0025                  		addq.b	#2,$25(a0)
000058C8 317C 0001 001C             		move.w	#1,$1C(a0)
000058CE 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000058D4                            
000058D4                            Obj87_Wait:
000058D4 4E75                       		rts	
000058D6                            ; ===========================================================================
000058D6                            
000058D6                            Obj87_LookUp:				; XREF: Obj87_Index
000058D6 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000058DE 6600                       		bne.s	locret_5480
000058E0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000058E6 317C 005A 0030             		move.w	#$5A,$30(a0)
000058EC 5428 0025                  		addq.b	#2,$25(a0)
000058F0                            
000058F0                            locret_5480:
000058F0 4E75                       		rts	
000058F2                            ; ===========================================================================
000058F2                            
000058F2                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000058F2 5368 0030                  		subq.w	#1,$30(a0)
000058F6 6600                       		bne.s	Obj87_Wait2
000058F8 43F8 D400                  		lea	($FFFFD400).w,a1
000058FC 323C 00FF                  		move.w	#$FF,d1
00005900                            
00005900                            Obj87_ClrLoop:
00005900 4299                       		clr.l	(a1)+
00005902 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005906 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
0000590C 5428 0025                  		addq.b	#2,$25(a0)
00005910 117C 0001 001C             		move.b	#1,$1C(a0)
00005916 317C 003C 0030             		move.w	#$3C,$30(a0)
0000591C                            
0000591C                            Obj87_Wait2:
0000591C 4E75                       		rts	
0000591E                            ; ===========================================================================
0000591E                            
0000591E                            Obj87_MakeLogo:				; XREF: Obj87_Index
0000591E 5368 0030                  		subq.w	#1,$30(a0)
00005922 6600                       		bne.s	Obj87_Wait3
00005924 5428 0025                  		addq.b	#2,$25(a0)
00005928 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000592E 117C 0002 001C             		move.b	#2,$1C(a0)
00005934 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000593A                            
0000593A                            Obj87_Wait3:
0000593A 4E75                       		rts	
0000593C                            ; ===========================================================================
0000593C                            
0000593C                            Obj87_Animate:				; XREF: Obj87_Index
0000593C 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005942 4EF9 0000 0000             		jmp	AnimateSprite
00005948                            ; ===========================================================================
00005948                            
00005948                            Obj87_Leap:				; XREF: Obj87_Index
00005948 5368 0030                  		subq.w	#1,$30(a0)
0000594C 6600                       		bne.s	Obj87_Wait4
0000594E 5428 0025                  		addq.b	#2,$25(a0)
00005952 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000595A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005960 117C 0004 0001             		move.b	#4,1(a0)
00005966 4228 0022                  		clr.b	$22(a0)
0000596A 117C 0002 0018             		move.b	#2,$18(a0)
00005970 117C 0005 001A             		move.b	#5,$1A(a0)
00005976 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000597C 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005982 60B8                       		bra.s	Obj87_Animate
00005984                            ; ===========================================================================
00005984                            
00005984                            Obj87_Wait4:				; XREF: Obj87_Leap
00005984 4E75                       		rts	
00005986                            ; ===========================================================================
00005986                            Ani_obj87:
00005986                            	include "_anim\obj87.asm"
00005986                            ; ---------------------------------------------------------------------------
00005986                            ; Animation script - Sonic on the ending sequence
00005986                            ; ---------------------------------------------------------------------------
00005986 0000                       		dc.w byte_551C-Ani_obj87
00005988 0000                       		dc.w byte_552A-Ani_obj87
0000598A 0000                       		dc.w byte_5534-Ani_obj87
0000598C 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000599A 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000059A4 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000059AC                            		even
000059AC                            		even
000059AC                            
000059AC                            ; ===========================================================================
000059AC                            ; ---------------------------------------------------------------------------
000059AC                            ; Object 88 - chaos emeralds on	the ending sequence
000059AC                            ; ---------------------------------------------------------------------------
000059AC                            
000059AC                            Obj88:					; XREF: Obj_Index
000059AC 7000                       		moveq	#0,d0
000059AE 1028 0024                  		move.b	$24(a0),d0
000059B2 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
000059B6 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
000059BA 4EF9 0000 0000             		jmp	DisplaySprite
000059C0                            ; ===========================================================================
000059C0 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
000059C2 0000                       		dc.w Obj88_Move-Obj88_Index
000059C4                            ; ===========================================================================
000059C4                            
000059C4                            Obj88_Main:				; XREF: Obj88_Index
000059C4 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
000059CA 6700                       		beq.s	Obj88_Main2
000059CC 588F                       		addq.l	#4,sp
000059CE 4E75                       		rts	
000059D0                            ; ===========================================================================
000059D0                            
000059D0                            Obj88_Main2:				; XREF: Obj88_Main
000059D0 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000059D6 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000059DC 2248                       		movea.l	a0,a1
000059DE 7600                       		moveq	#0,d3
000059E0 7401                       		moveq	#1,d2
000059E2 7205                       		moveq	#5,d1
000059E4                            
000059E4                            Obj88_MainLoop:
000059E4 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000059E8 5429 0024                  		addq.b	#2,$24(a1)
000059EC 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000059F4 337C 03C5 0002             		move.w	#$3C5,2(a1)
000059FA 137C 0004 0001             		move.b	#4,1(a1)
00005A00 137C 0001 0018             		move.b	#1,$18(a1)
00005A06 3368 0008 0038             		move.w	8(a0),$38(a1)
00005A0C 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005A12 1342 001C                  		move.b	d2,$1C(a1)
00005A16 1342 001A                  		move.b	d2,$1A(a1)
00005A1A 5202                       		addq.b	#1,d2
00005A1C 1343 0026                  		move.b	d3,$26(a1)
00005A20 0603 002A                  		addi.b	#$2A,d3
00005A24 43E9 0040                  		lea	$40(a1),a1
00005A28 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005A2C                            
00005A2C                            Obj88_Move:				; XREF: Obj88_Index
00005A2C 3028 003E                  		move.w	$3E(a0),d0
00005A30 D168 0026                  		add.w	d0,$26(a0)
00005A34 1028 0026                  		move.b	$26(a0),d0
00005A38 4EB9 0000 2B58             		jsr	(CalcSine).l
00005A3E 7800                       		moveq	#0,d4
00005A40 1828 003C                  		move.b	$3C(a0),d4
00005A44 C3C4                       		muls.w	d4,d1
00005A46 E081                       		asr.l	#8,d1
00005A48 C1C4                       		muls.w	d4,d0
00005A4A E080                       		asr.l	#8,d0
00005A4C D268 0038                  		add.w	$38(a0),d1
00005A50 D068 003A                  		add.w	$3A(a0),d0
00005A54 3141 0008                  		move.w	d1,8(a0)
00005A58 3140 000C                  		move.w	d0,$C(a0)
00005A5C 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005A62 6700                       		beq.s	loc_55FA
00005A64 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005A6A                            
00005A6A                            loc_55FA:
00005A6A 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005A70 6700                       		beq.s	loc_5608
00005A72 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005A78                            
00005A78                            loc_5608:
00005A78 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005A7E 6700                       		beq.s	locret_5614
00005A80 5368 003A                  		subq.w	#1,$3A(a0)
00005A84                            
00005A84                            locret_5614:
00005A84 4E75                       		rts	
00005A86                            ; ===========================================================================
00005A86                            ; ---------------------------------------------------------------------------
00005A86                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005A86                            ; ---------------------------------------------------------------------------
00005A86                            
00005A86                            Obj89:					; XREF: Obj_Index
00005A86 7000                       		moveq	#0,d0
00005A88 1028 0024                  		move.b	$24(a0),d0
00005A8C 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005A90 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005A94                            ; ===========================================================================
00005A94 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005A96 0000                       		dc.w Obj89_Move-Obj89_Index
00005A98 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005A9A                            ; ===========================================================================
00005A9A                            
00005A9A                            Obj89_Main:				; XREF: Obj89_Index
00005A9A 5428 0024                  		addq.b	#2,$24(a0)
00005A9E 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005AA4 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005AAA 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005AB2 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005AB8 117C 0000 0001             		move.b	#0,1(a0)
00005ABE 117C 0000 0018             		move.b	#0,$18(a0)
00005AC4                            
00005AC4                            Obj89_Move:				; XREF: Obj89_Index
00005AC4 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005ACA 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005ACC 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005AD2 4EB9 0000 0000             		jsr	DisplaySprite
00005AD8                            ; ===========================================================================
00005AD8                            
00005AD8                            Obj89_Delay:				; XREF: Obj89_Move
00005AD8 5428 0024                  		addq.b	#2,$24(a0)
00005ADC 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005AE2                            
00005AE2                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005AE2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005AE6 6A00                       		bpl.s	Obj89_Display
00005AE8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005AEE                            
00005AEE                            Obj89_Display:
00005AEE 4EB9 0000 0000             		jsr	DisplaySprite
00005AF4                            ; ===========================================================================
00005AF4                            ; ---------------------------------------------------------------------------
00005AF4                            ; Sprite mappings - Sonic on the ending	sequence
00005AF4                            ; ---------------------------------------------------------------------------
00005AF4                            Map_obj87:
00005AF4                            	include "_maps\obj87.asm"
00005AF4                            ; ---------------------------------------------------------------------------
00005AF4                            ; Sprite mappings - Sonic on the ending	sequence
00005AF4                            ; ---------------------------------------------------------------------------
00005AF4 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005AF8 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005AFC 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005B00 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005B04 02                         byte_5690:	dc.b 2
00005B05 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005B0A 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B0F 03                         byte_569B:	dc.b 3
00005B10 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005B15 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005B1A 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B1F 02                         byte_56AB:	dc.b 2
00005B20 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005B25 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005B2A 02                         byte_56B6:	dc.b 2
00005B2B EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005B30 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005B35 02                         byte_56C1:	dc.b 2
00005B36 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005B3B FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005B40 03                         byte_56CC:	dc.b 3
00005B41 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005B46 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005B4B 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005B50 07                         byte_56DC:	dc.b 7
00005B51 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005B56 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005B5B BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005B60 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005B65 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005B6A E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005B6F EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005B74 18                         byte_5700:	dc.b $18
00005B75 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005B7A 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005B7F 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005B84 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005B89 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005B8E 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005B93 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005B98 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005B9D B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005BA2 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005BA7 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005BAC C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005BB1 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005BB6 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005BBB B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005BC0 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005BC5 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005BCA D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005BCF E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005BD4 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005BD9 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005BDE E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005BE3 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005BE8 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005BEE 00                         		even
00005BEE 00                         		even
00005BEE                            
00005BEE                            ; ---------------------------------------------------------------------------
00005BEE                            ; Sprite mappings - chaos emeralds on the ending sequence
00005BEE                            ; ---------------------------------------------------------------------------
00005BEE                            Map_obj88:
00005BEE                            	include "_maps\obj88.asm"
00005BEE                            ; ---------------------------------------------------------------------------
00005BEE                            ; Sprite mappings - chaos emeralds on the ending sequence
00005BEE                            ; ---------------------------------------------------------------------------
00005BEE 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005BF2 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005BF6 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005BFA 0000                       		dc.w byte_57AC-Map_obj88
00005BFC 01                         byte_5788:	dc.b 1
00005BFD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005C02 01                         byte_578E:	dc.b 1
00005C03 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005C08 01                         byte_5794:	dc.b 1
00005C09 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005C0E 01                         byte_579A:	dc.b 1
00005C0F F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005C14 01                         byte_57A0:	dc.b 1
00005C15 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005C1A 01                         byte_57A6:	dc.b 1
00005C1B F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005C20 01                         byte_57AC:	dc.b 1
00005C21 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005C26                            		even
00005C26                            		even
00005C26                            
00005C26                            ; ---------------------------------------------------------------------------
00005C26                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C26                            ; ---------------------------------------------------------------------------
00005C26                            Map_obj89:
00005C26                            	include "_maps\obj89.asm"
00005C26                            ; ---------------------------------------------------------------------------
00005C26                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C26                            ; ---------------------------------------------------------------------------
00005C26 0000                       		dc.w byte_57B4-Map_obj89
00005C28 03                         byte_57B4:	dc.b 3
00005C29 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005C2E F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005C33 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005C38                            		even
00005C38                            		even
00005C38                            
00005C38                            ; ===========================================================================
00005C38                            ; ---------------------------------------------------------------------------
00005C38                            ; Credits ending sequence
00005C38                            ; ---------------------------------------------------------------------------
00005C38                            
00005C38                            Credits:				; XREF: GameModeArray
00005C38 6100 B9BE                  		bsr.w	ClearPLC
00005C3C 6100 C202                  		bsr.w	Pal_FadeFrom
00005C40 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C46 3CBC 8004                  		move.w	#$8004,(a6)
00005C4A 3CBC 8230                  		move.w	#$8230,(a6)
00005C4E 3CBC 8407                  		move.w	#$8407,(a6)
00005C52 3CBC 9001                  		move.w	#$9001,(a6)
00005C56 3CBC 9200                  		move.w	#$9200,(a6)
00005C5A 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C5E 3CBC 8720                  		move.w	#$8720,(a6)
00005C62 4238 F64E                  		clr.b	($FFFFF64E).w
00005C66 6100 B676                  		bsr.w	ClearScreen
00005C6A 43F8 D000                  		lea	($FFFFD000).w,a1
00005C6E 7000                       		moveq	#0,d0
00005C70 323C 07FF                  		move.w	#$7FF,d1
00005C74                            
00005C74                            Cred_ClrObjRam:
00005C74 22C0                       		move.l	d0,(a1)+
00005C76 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005C7A                            
00005C7A 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005C84 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005C8A 6100 B7CE                  		bsr.w	NemDec
00005C8E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005C92 7000                       		moveq	#0,d0
00005C94 323C 001F                  		move.w	#$1F,d1
00005C98                            
00005C98                            Cred_ClrPallet:
00005C98 22C0                       		move.l	d0,(a1)+
00005C9A 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005C9E                            
00005C9E 7003                       		moveq	#3,d0
00005CA0 6100 C448                  		bsr.w	PalLoad1	; load Sonic's pallet
00005CA4 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005CAA 4EB9 0000 0000             		jsr	ObjectsLoad
00005CB0 4EB9 0000 0000             		jsr	BuildSprites
00005CB6 6100 0000                  		bsr.w	EndingDemoLoad
00005CBA 7000                       		moveq	#0,d0
00005CBC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005CC0 E948                       		lsl.w	#4,d0
00005CC2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005CC8 45F2 0000                  		lea	(a2,d0.w),a2
00005CCC 7000                       		moveq	#0,d0
00005CCE 1012                       		move.b	(a2),d0
00005CD0 6700                       		beq.s	loc_5862
00005CD2 6100 B8C6                  		bsr.w	LoadPLC		; load level patterns
00005CD6                            
00005CD6                            loc_5862:
00005CD6 7001                       		moveq	#1,d0
00005CD8 6100 B8C0                  		bsr.w	LoadPLC		; load standard	level patterns
00005CDC 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005CE2 6100 C0B2                  		bsr.w	Pal_FadeTo
00005CE6                            
00005CE6                            Cred_WaitLoop:
00005CE6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CEC 6100 CE38                  		bsr.w	DelayProgram
00005CF0 6100 B914                  		bsr.w	RunPLC_RAM
00005CF4 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005CF8 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005CFA 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005CFE 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005D00 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005D06 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005D0A 4E75                       		rts	
00005D0C                            
00005D0C                            ; ---------------------------------------------------------------------------
00005D0C                            ; Ending sequence demo loading subroutine
00005D0C                            ; ---------------------------------------------------------------------------
00005D0C                            
00005D0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005D0C                            
00005D0C                            
00005D0C                            EndingDemoLoad:				; XREF: Credits
00005D0C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005D10 0240 000F                  		andi.w	#$F,d0
00005D14 D040                       		add.w	d0,d0
00005D16 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005D1A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005D1E 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005D22 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005D28 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005D2A 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005D30 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005D36 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005D3C 7000                       		moveq	#0,d0
00005D3E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005D42 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005D46 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005D4A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005D4E 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005D54 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005D56 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005D5C 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005D60 303C 0008                  		move.w	#8,d0
00005D64                            
00005D64                            EndDemo_LampLoad:
00005D64 24D9                       		move.l	(a1)+,(a2)+
00005D66 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005D6A                            
00005D6A                            EndDemo_Exit:
00005D6A 4E75                       		rts	
00005D6C                            ; End of function EndingDemoLoad
00005D6C                            
00005D6C                            ; ===========================================================================
00005D6C                            ; ---------------------------------------------------------------------------
00005D6C                            ; Levels used in the end sequence demos
00005D6C                            ; ---------------------------------------------------------------------------
00005D6C                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005D7C                            
00005D7C                            ; ---------------------------------------------------------------------------
00005D7C                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005D7C                            ; ---------------------------------------------------------------------------
00005D7C                            EndDemo_LampVar:
00005D7C 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005D7E 0A00 062C 000D             		dc.w $A00, $62C, $D
00005D84 0000 0000                  		dc.l 0
00005D88 0000                       		dc.b 0,	0
00005D8A 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005D9E 0101                       		dc.b 1,	1
00005DA0                            ; ===========================================================================
00005DA0                            ; ---------------------------------------------------------------------------
00005DA0                            ; "TRY AGAIN" and "END"	screens
00005DA0                            ; ---------------------------------------------------------------------------
00005DA0                            
00005DA0                            TryAgainEnd:				; XREF: Credits
00005DA0 6100 B856                  		bsr.w	ClearPLC
00005DA4 6100 C09A                  		bsr.w	Pal_FadeFrom
00005DA8 4DF9 00C0 0004             		lea	($C00004).l,a6
00005DAE 3CBC 8004                  		move.w	#$8004,(a6)
00005DB2 3CBC 8230                  		move.w	#$8230,(a6)
00005DB6 3CBC 8407                  		move.w	#$8407,(a6)
00005DBA 3CBC 9001                  		move.w	#$9001,(a6)
00005DBE 3CBC 9200                  		move.w	#$9200,(a6)
00005DC2 3CBC 8B03                  		move.w	#$8B03,(a6)
00005DC6 3CBC 8720                  		move.w	#$8720,(a6)
00005DCA 4238 F64E                  		clr.b	($FFFFF64E).w
00005DCE 6100 B50E                  		bsr.w	ClearScreen
00005DD2 43F8 D000                  		lea	($FFFFD000).w,a1
00005DD6 7000                       		moveq	#0,d0
00005DD8 323C 07FF                  		move.w	#$7FF,d1
00005DDC                            
00005DDC                            TryAg_ClrObjRam:
00005DDC 22C0                       		move.l	d0,(a1)+
00005DDE 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005DE2                            
00005DE2 701D                       		moveq	#$1D,d0
00005DE4 6100 B920                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005DE8 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005DEC 7000                       		moveq	#0,d0
00005DEE 323C 001F                  		move.w	#$1F,d1
00005DF2                            
00005DF2                            TryAg_ClrPallet:
00005DF2 22C0                       		move.l	d0,(a1)+
00005DF4 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005DF8                            
00005DF8 7013                       		moveq	#$13,d0
00005DFA 6100 C2EE                  		bsr.w	PalLoad1	; load ending pallet
00005DFE 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005E02 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005E08 4EB9 0000 0000             		jsr	ObjectsLoad
00005E0E 4EB9 0000 0000             		jsr	BuildSprites
00005E14 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005E1A 6100 BF7A                  		bsr.w	Pal_FadeTo
00005E1E                            
00005E1E                            ; ---------------------------------------------------------------------------
00005E1E                            ; "TRY AGAIN" and "END"	screen main loop
00005E1E                            ; ---------------------------------------------------------------------------
00005E1E                            TryAg_MainLoop:
00005E1E 6100 B5A2                  		bsr.w	PauseGame
00005E22 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005E28 6100 CCFC                  		bsr.w	DelayProgram
00005E2C 4EB9 0000 0000             		jsr	ObjectsLoad
00005E32 4EB9 0000 0000             		jsr	BuildSprites
00005E38 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005E3E 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005E40 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005E44 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005E46 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005E4C 67D0                       		beq.s	TryAg_MainLoop
00005E4E                            
00005E4E                            TryAg_Exit:
00005E4E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005E54 4E75                       		rts	
00005E56                            
00005E56                            ; ===========================================================================
00005E56                            ; ---------------------------------------------------------------------------
00005E56                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005E56                            ; ---------------------------------------------------------------------------
00005E56                            
00005E56                            Obj8B:					; XREF: Obj_Index
00005E56 7000                       		moveq	#0,d0
00005E58 1028 0024                  		move.b	$24(a0),d0
00005E5C 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005E60 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005E64 4EF9 0000 0000             		jmp	DisplaySprite
00005E6A                            ; ===========================================================================
00005E6A 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005E6C 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005E6E 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005E70 0000                       		dc.w loc_5A8E-Obj8B_Index
00005E72                            ; ===========================================================================
00005E72                            
00005E72                            Obj8B_Main:				; XREF: Obj8B_Index
00005E72 5428 0024                  		addq.b	#2,$24(a0)
00005E76 317C 0120 0008             		move.w	#$120,8(a0)
00005E7C 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005E82 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005E8A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005E90 117C 0000 0001             		move.b	#0,1(a0)
00005E96 117C 0002 0018             		move.b	#2,$18(a0)
00005E9C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005EA2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005EA8 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005EAA 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005EB0 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005EB6 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005EBC 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005EC2                            
00005EC2                            Obj8B_Animate:				; XREF: Obj8B_Index
00005EC2 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005EC8 4EF9 0000 0000             		jmp	AnimateSprite
00005ECE                            ; ===========================================================================
00005ECE                            
00005ECE                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005ECE 5428 0024                  		addq.b	#2,$24(a0)
00005ED2 7002                       		moveq	#2,d0
00005ED4 0828 0000 001C             		btst	#0,$1C(a0)
00005EDA 6700                       		beq.s	loc_5A6A
00005EDC 4440                       		neg.w	d0
00005EDE                            
00005EDE                            loc_5A6A:
00005EDE 43F8 D800                  		lea	($FFFFD800).w,a1
00005EE2 7205                       		moveq	#5,d1
00005EE4                            
00005EE4                            loc_5A70:
00005EE4 1340 003E                  		move.b	d0,$3E(a1)
00005EE8 3400                       		move.w	d0,d2
00005EEA E742                       		asl.w	#3,d2
00005EEC D529 0026                  		add.b	d2,$26(a1)
00005EF0 43E9 0040                  		lea	$40(a1),a1
00005EF4 51C9 FFEE                  		dbf	d1,loc_5A70
00005EF8 5228 001A                  		addq.b	#1,$1A(a0)
00005EFC 317C 0070 0030             		move.w	#112,$30(a0)
00005F02                            
00005F02                            loc_5A8E:				; XREF: Obj8B_Index
00005F02 5368 0030                  		subq.w	#1,$30(a0)
00005F06 6A00                       		bpl.s	locret_5AA0
00005F08 0868 0000 001C             		bchg	#0,$1C(a0)
00005F0E 117C 0002 0024             		move.b	#2,$24(a0)
00005F14                            
00005F14                            locret_5AA0:
00005F14 4E75                       		rts	
00005F16                            ; ===========================================================================
00005F16                            Ani_obj8B:
00005F16                            	include "_anim\obj8B.asm"
00005F16                            ; ---------------------------------------------------------------------------
00005F16                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005F16                            ; ---------------------------------------------------------------------------
00005F16 0000                       		dc.w byte_5AA8-Ani_obj8B
00005F18 0000                       		dc.w byte_5AAC-Ani_obj8B
00005F1A 0000                       		dc.w byte_5AB0-Ani_obj8B
00005F1C 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005F20 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005F24 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005F36                            		even
00005F36                            		even
00005F36                            
00005F36                            ; ===========================================================================
00005F36                            ; ---------------------------------------------------------------------------
00005F36                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005F36                            ; ---------------------------------------------------------------------------
00005F36                            
00005F36                            Obj8C:					; XREF: Obj_Index
00005F36 7000                       		moveq	#0,d0
00005F38 1028 0024                  		move.b	$24(a0),d0
00005F3C 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005F40 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005F44 4EF9 0000 0000             		jmp	DisplaySprite
00005F4A                            ; ===========================================================================
00005F4A 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005F4C 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005F4E                            ; ===========================================================================
00005F4E                            
00005F4E                            Obj8C_Main:				; XREF: Obj8C_Index
00005F4E 2248                       		movea.l	a0,a1
00005F50 7400                       		moveq	#0,d2
00005F52 7600                       		moveq	#0,d3
00005F54 7205                       		moveq	#5,d1
00005F56 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005F5A                            
00005F5A                            Obj8C_MakeEms:				; XREF: loc_5B42
00005F5A 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005F5E 5429 0024                  		addq.b	#2,$24(a1)
00005F62 237C 0000 5BEE 0004        		move.l	#Map_obj88,4(a1)
00005F6A 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005F70 137C 0000 0001             		move.b	#0,1(a1)
00005F76 137C 0001 0018             		move.b	#1,$18(a1)
00005F7C 337C 0104 0008             		move.w	#$104,8(a1)
00005F82 337C 0120 0038             		move.w	#$120,$38(a1)
00005F88 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005F8E 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005F94 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005F9A 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005F9E                            
00005F9E                            Obj8C_ChkEms:
00005F9E 7000                       		moveq	#0,d0
00005FA0 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005FA4 5340                       		subq.w	#1,d0
00005FA6 6500                       		bcs.s	loc_5B42
00005FA8                            
00005FA8                            Obj8C_ChkEmLoop:
00005FA8 B433 0000                  		cmp.b	(a3,d0.w),d2
00005FAC 6600                       		bne.s	loc_5B3E
00005FAE 5202                       		addq.b	#1,d2
00005FB0 60EC                       		bra.s	Obj8C_ChkEms
00005FB2                            ; ===========================================================================
00005FB2                            
00005FB2                            loc_5B3E:
00005FB2 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005FB6                            
00005FB6                            loc_5B42:
00005FB6 1342 001A                  		move.b	d2,$1A(a1)
00005FBA 5229 001A                  		addq.b	#1,$1A(a1)
00005FBE 5202                       		addq.b	#1,d2
00005FC0 137C 0080 0026             		move.b	#$80,$26(a1)
00005FC6 1343 001E                  		move.b	d3,$1E(a1)
00005FCA 1343 001F                  		move.b	d3,$1F(a1)
00005FCE 0643 000A                  		addi.w	#$A,d3
00005FD2 43E9 0040                  		lea	$40(a1),a1
00005FD6 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005FDA                            
00005FDA                            Obj8C_Move:				; XREF: Obj8C_Index
00005FDA 4A68 003E                  		tst.w	$3E(a0)
00005FDE 6700                       		beq.s	locret_5BBA
00005FE0 4A28 001E                  		tst.b	$1E(a0)
00005FE4 6700                       		beq.s	loc_5B78
00005FE6 5328 001E                  		subq.b	#1,$1E(a0)
00005FEA 6600                       		bne.s	loc_5B80
00005FEC                            
00005FEC                            loc_5B78:
00005FEC 3028 003E                  		move.w	$3E(a0),d0
00005FF0 D168 0026                  		add.w	d0,$26(a0)
00005FF4                            
00005FF4                            loc_5B80:
00005FF4 1028 0026                  		move.b	$26(a0),d0
00005FF8 6700                       		beq.s	loc_5B8C
00005FFA 0C00 0080                  		cmpi.b	#$80,d0
00005FFE 6600                       		bne.s	loc_5B96
00006000                            
00006000                            loc_5B8C:
00006000 4268 003E                  		clr.w	$3E(a0)
00006004 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0000600A                            
0000600A                            loc_5B96:
0000600A 4EB9 0000 2B58             		jsr	(CalcSine).l
00006010 7800                       		moveq	#0,d4
00006012 1828 003C                  		move.b	$3C(a0),d4
00006016 C3C4                       		muls.w	d4,d1
00006018 E081                       		asr.l	#8,d1
0000601A C1C4                       		muls.w	d4,d0
0000601C E080                       		asr.l	#8,d0
0000601E D268 0038                  		add.w	$38(a0),d1
00006022 D068 003A                  		add.w	$3A(a0),d0
00006026 3141 0008                  		move.w	d1,8(a0)
0000602A 3140 000A                  		move.w	d0,$A(a0)
0000602E                            
0000602E                            locret_5BBA:
0000602E 4E75                       		rts	
00006030                            ; ===========================================================================
00006030                            ; ---------------------------------------------------------------------------
00006030                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006030                            ; ---------------------------------------------------------------------------
00006030                            Map_obj8B:
00006030                            	include "_maps\obj8B.asm"
00006030                            ; ---------------------------------------------------------------------------
00006030                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006030                            ; ---------------------------------------------------------------------------
00006030 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006034 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006038 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000603C 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006040 08                         byte_5BCC:	dc.b 8
00006041 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006046 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000604B E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006050 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006055 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000605A 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000605F 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006064 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006069 08                         byte_5BF5:	dc.b 8
0000606A E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000606F F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006074 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006079 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000607E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006083 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006088 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000608D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006092 08                         byte_5C1E:	dc.b 8
00006093 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006098 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000609D E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000060A2 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000060A7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000060AC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000060B1 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060B6 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060BB 08                         byte_5C47:	dc.b 8
000060BC E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000060C1 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000060C6 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000060CB F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000060D0 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000060D5 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000060DA 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060DF 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060E4 0C                         byte_5C70:	dc.b $C
000060E5 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000060EA F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000060EF 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000060F4 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000060F9 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000060FE F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006103 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006108 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
0000610D 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006112 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006117 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000611C 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006121 0A                         byte_5CAD:	dc.b $A
00006122 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006127 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
0000612C F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006131 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006136 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000613B F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006140 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006145 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000614A 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000614F 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006154 0A                         byte_5CE0:	dc.b $A
00006155 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000615A E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000615F EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006164 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006169 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000616E EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006173 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006178 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000617D 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006182 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006187 0C                         byte_5D13:	dc.b $C
00006188 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000618D FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006192 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006197 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000619C F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000061A1 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000061A6 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000061AB 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000061B0 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000061B5 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000061BA 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000061BF 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000061C4                            		even
000061C4                            		even
000061C4                            
000061C4                            ; ---------------------------------------------------------------------------
000061C4                            ; Ending sequence demos
000061C4                            ; ---------------------------------------------------------------------------
000061C4                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000061F2                            		even
000061F2                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006232                            		even
00006232                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006262                            		even
00006262                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006292                            		even
00006292                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000062B2                            		even
000062B2                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000062D2                            		even
000062D2                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006302                            		even
00006302                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006332                            		even
00006332                            
00006332                            ; ---------------------------------------------------------------------------
00006332                            ; Subroutine to	load level boundaries and start	locations
00006332                            ; ---------------------------------------------------------------------------
00006332                            
00006332                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006332                            
00006332                            
00006332                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006332 7000                       		moveq	#0,d0
00006334 11C0 F740                  		move.b	d0,($FFFFF740).w
00006338 11C0 F741                  		move.b	d0,($FFFFF741).w
0000633C 11C0 F746                  		move.b	d0,($FFFFF746).w
00006340 11C0 F748                  		move.b	d0,($FFFFF748).w
00006344 11C0 F742                  		move.b	d0,($FFFFF742).w
00006348 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000634C ED08                       		lsl.b	#6,d0
0000634E E848                       		lsr.w	#4,d0
00006350 3200                       		move.w	d0,d1
00006352 D040                       		add.w	d0,d0
00006354 D041                       		add.w	d1,d0
00006356 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000635A 3018                       		move.w	(a0)+,d0
0000635C 31C0 F730                  		move.w	d0,($FFFFF730).w
00006360 2018                       		move.l	(a0)+,d0
00006362 21C0 F728                  		move.l	d0,($FFFFF728).w
00006366 21C0 F720                  		move.l	d0,($FFFFF720).w
0000636A 2018                       		move.l	(a0)+,d0
0000636C 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006370 21C0 F724                  		move.l	d0,($FFFFF724).w
00006374 3038 F728                  		move.w	($FFFFF728).w,d0
00006378 0640 0240                  		addi.w	#$240,d0
0000637C 31C0 F732                  		move.w	d0,($FFFFF732).w
00006380 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006386 3018                       		move.w	(a0)+,d0
00006388 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000638C 6000 0000                  		bra.w	LevSz_ChkLamp
00006390                            ; ===========================================================================
00006390                            ; ---------------------------------------------------------------------------
00006390                            ; Level size array and ending start location array
00006390                            ; ---------------------------------------------------------------------------
00006390                            LevelSizeArray:        ; GHZ
00006390 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
0000639C 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000063A8 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000063B4 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000063C0                                    ; LZ
000063C0 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000063CC 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000063D8 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000063E4 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000063F0                                    ; MZ
000063F0 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000063FC 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006408 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00006414 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
00006420                                    ; SLZ
00006420 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
0000642C 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006438 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006444 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006450                                    ; SYZ
00006450 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
0000645C 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006468 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006474 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006480                                    ; SBZ
00006480 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
0000648C 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006498 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
000064A4 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000064B0                                    ; Ending
000064B0 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
000064BC 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
000064C8 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000064D4 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000064E0                                    ; BHZ
000064E0 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000064EC 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000064F8 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006504 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006510                                    even
00006510                            
00006510                            ; ===========================================================================
00006510                            
00006510                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006510 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006514 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006516 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000651C 3238 D008                  		move.w	($FFFFD008).w,d1
00006520 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006524 6000 0000                  		bra.w	loc_60D0
00006528                            ; ===========================================================================
00006528                            
00006528                            
00006528                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006528 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000652C ED08                       		lsl.b	#6,d0
0000652E E848                       		lsr.w	#4,d0
00006530 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006534 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006538 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
0000653C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006540 5340                       		subq.w	#1,d0
00006542 E548                       		lsl.w	#2,d0
00006544 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006548 6000 0000                  		bra.w	LevSz_SonicPos
0000654C                            
0000654C                            EndingStLocArray:
0000654C                            		incbin	misc\sloc_end.bin
0000656C                            		even
0000656C                            		
0000656C                            ; ===========================================================================
0000656C                            ; ---------------------------------------------------------------------------
0000656C                            ; Sonic	start location array
0000656C                            ; ---------------------------------------------------------------------------
0000656C                            StartLocArray:	incbin	misc\sloc_lev.bin
000065EC                            		even
000065EC                            
000065EC                            LevSz_SonicPos:
000065EC 7200                       		moveq	#0,d1
000065EE 3219                       		move.w	(a1)+,d1
000065F0 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000065F4 7000                       		moveq	#0,d0
000065F6 3011                       		move.w	(a1),d0
000065F8 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000065FC                            
000065FC                            loc_60D0:				; XREF: LevSz_ChkLamp
000065FC 0441 00A0                  		subi.w	#$A0,d1
00006600 6400                       		bcc.s	loc_60D8
00006602 7200                       		moveq	#0,d1
00006604                            
00006604                            loc_60D8:
00006604 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006608 B242                       		cmp.w	d2,d1
0000660A 6500                       		bcs.s	loc_60E2
0000660C 3202                       		move.w	d2,d1
0000660E                            
0000660E                            loc_60E2:
0000660E 31C1 F700                  		move.w	d1,($FFFFF700).w
00006612 0440 0060                  		subi.w	#$60,d0
00006616 6400                       		bcc.s	loc_60EE
00006618 7000                       		moveq	#0,d0
0000661A                            
0000661A                            loc_60EE:
0000661A B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000661E 6D00                       		blt.s	loc_60F8
00006620 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006624                            
00006624                            loc_60F8:
00006624 31C0 F704                  		move.w	d0,($FFFFF704).w
00006628 6100 0000                  		bsr.w	BgScrollSpeed
0000662C 7000                       		moveq	#0,d0
0000662E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006632 E508                       		lsl.b	#2,d0
00006634 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000663A 6000 0000                  		bra.w	LevSz_Unk
0000663E                            
0000663E                            ; ---------------------------------------------------------------------------
0000663E                            ; Which	256x256	tiles contain loops or roll-tunnels
0000663E                            ; ---------------------------------------------------------------------------
0000663E                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000663E                            ; loop,	loop, tunnel, tunnel
0000663E                            ; ---------------------------------------------------------------------------
0000663E                            LoopTileNums:	incbin	misc\loopnums.bin
0000665E                            		even
0000665E                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
0000665E                            ; ITS GONJE HELP
0000665E                            ; ===========================================================================
0000665E                            
0000665E                            LevSz_Unk:				; XREF: LevelSizeLoad
0000665E 7000                       		moveq	#0,d0
00006660 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006664 E748                       		lsl.w	#3,d0
00006666 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000666A 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000666E 24D9                       		move.l	(a1)+,(a2)+
00006670 24D9                       		move.l	(a1)+,(a2)+
00006672 4E75                       		rts	
00006674                            ; End of function LevelSizeLoad
00006674                            
00006674                            ; ===========================================================================
00006674 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000667C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006684 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000668C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006694 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000669C 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066A4 0070 0100 0100 0100        		dc.l $700100, $1000100
000066AC                            
000066AC                            ; ---------------------------------------------------------------------------
000066AC                            ; Subroutine to	set scroll speed of some backgrounds
000066AC                            ; ---------------------------------------------------------------------------
000066AC                            
000066AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066AC                            
000066AC                            
000066AC                            BgScrollSpeed:				; XREF: LevelSizeLoad
000066AC 4A38 FE30                  		tst.b	($FFFFFE30).w
000066B0 6600                       		bne.s	loc_6206
000066B2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066B6 31C0 F714                  		move.w	d0,($FFFFF714).w
000066BA 31C1 F708                  		move.w	d1,($FFFFF708).w
000066BE 31C1 F710                  		move.w	d1,($FFFFF710).w
000066C2 31C1 F718                  		move.w	d1,($FFFFF718).w
000066C6                            
000066C6                            loc_6206:
000066C6 7400                       		moveq	#0,d2
000066C8 1438 FE10                  		move.b	($FFFFFE10).w,d2
000066CC D442                       		add.w	d2,d2
000066CE 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000066D2 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000066D6                            ; End of function BgScrollSpeed
000066D6                            
000066D6                            ; ===========================================================================
000066D6 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000066DA 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000066DE 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000066E2 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_MZ-BgScroll_Index ; MAKOTO
000066E6                            ; ===========================================================================
000066E6                            
000066E6                            BgScroll_GHZ:				; XREF: BgScroll_Index
000066E6 6000 0000                  		bra.w	Deform_GHZ
000066EA                            ; ===========================================================================
000066EA                            
000066EA                            BgScroll_LZ:				; XREF: BgScroll_Index
000066EA E280                       		asr.l	#1,d0
000066EC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066F0 4E75                       		rts	
000066F2                            ; ===========================================================================
000066F2                            
000066F2                            BgScroll_MZ:				; XREF: BgScroll_Index
000066F2 4E75                       		rts	
000066F4                            ; ===========================================================================
000066F4                            
000066F4                            BgScroll_SLZ:				; XREF: BgScroll_Index
000066F4 E280                       		asr.l	#1,d0
000066F6 0640 00C0                  		addi.w	#$C0,d0
000066FA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066FE 4E75                       		rts	
00006700                            ; ===========================================================================
00006700                            
00006700                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006700 E980                       		asl.l	#4,d0
00006702 2400                       		move.l	d0,d2
00006704 E380                       		asl.l	#1,d0
00006706 D082                       		add.l	d2,d0
00006708 E080                       		asr.l	#8,d0
0000670A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000670E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006712 4E75                       		rts	
00006714                            ; ===========================================================================
00006714                            
00006714                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006714 E980                       		asl.l	#4,d0
00006716 E380                       		asl.l	#1,d0
00006718 E080                       		asr.l	#8,d0
0000671A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000671E 4E75                       		rts	
00006720                            ; ===========================================================================
00006720                            
00006720                            BgScroll_End:				; XREF: BgScroll_Index
00006720 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006726 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000672C 4E75                       		rts	
0000672E                            ; ===========================================================================
0000672E 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006734 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000673A 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006740 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006746 4E75                       		rts
00006748                            
00006748                            ; ---------------------------------------------------------------------------
00006748                            ; Background layer deformation subroutines
00006748                            ; ---------------------------------------------------------------------------
00006748                            
00006748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006748                            
00006748                            
00006748                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006748 4A38 F744                  		tst.b	($FFFFF744).w
0000674C 6700                       		beq.s	loc_628E
0000674E 4E75                       		rts	
00006750                            ; ===========================================================================
00006750                            
00006750                            loc_628E:
00006750 4278 F754                  		clr.w	($FFFFF754).w
00006754 4278 F756                  		clr.w	($FFFFF756).w
00006758 4278 F758                  		clr.w	($FFFFF758).w
0000675C 4278 F75A                  		clr.w	($FFFFF75A).w
00006760 6100 0000                  		bsr.w	ScrollHoriz
00006764 6100 0000                  		bsr.w	ScrollVertical
00006768 6100 0000                  		bsr.w	DynScrResizeLoad
0000676C 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006772 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006778 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000677E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006784 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000678A 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006790 7000                       		moveq	#0,d0
00006792 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ
00006796 6700                       		beq.s	GetDeformRoutine	; GMZ
00006798 4EF9 0000 0000             		jmp	Deform_LZ	; GMZ
0000679E                            
0000679E                            GetDeformRoutine:	; GMZ
0000679E 1038 FE10                  		move.b	($FFFFFE10).w,d0
000067A2 D040                       		add.w	d0,d0
000067A4 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000067A8 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000067AC                            ; End of function DeformBgLayer
000067AC                            
000067AC                            ; ===========================================================================
000067AC                            ; ---------------------------------------------------------------------------
000067AC                            ; Offset index for background layer deformation	code
000067AC                            ; ---------------------------------------------------------------------------
000067AC 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000067B0 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000067B4 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000067B8 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_BHZ-Deform_Index ; MAKOTO
000067BC                            ; ---------------------------------------------------------------------------
000067BC                            ; Green	Hill Zone background layer deformation code
000067BC                            ; ---------------------------------------------------------------------------
000067BC                            
000067BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067BC                            
000067BC                            
000067BC                            Deform_GHZ:				; XREF: Deform_Index
000067BC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000067C0 48C4                       		ext.l	d4
000067C2 EB84                       		asl.l	#5,d4
000067C4 2204                       		move.l	d4,d1
000067C6 E384                       		asl.l	#1,d4
000067C8 D881                       		add.l	d1,d4
000067CA 7A00                       		moveq	#0,d5
000067CC 6100 0000                  		bsr.w	ScrollBlock1
000067D0 6100 0000                  		bsr.w	ScrollBlock4
000067D4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000067D8 3038 F704                  		move.w	($FFFFF704).w,d0
000067DC 0240 07FF                  		andi.w	#$7FF,d0
000067E0 EA48                       		lsr.w	#5,d0
000067E2 4440                       		neg.w	d0
000067E4 0640 0026                  		addi.w	#$26,d0
000067E8 31C0 F714                  		move.w	d0,($FFFFF714).w
000067EC 3800                       		move.w	d0,d4
000067EE 6100 0000                  		bsr.w	ScrollBlock3
000067F2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067F8 323C 006F                  		move.w	#$6F,d1
000067FC 9244                       		sub.w	d4,d1
000067FE 3038 F700                  		move.w	($FFFFF700).w,d0
00006802 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006808 6600                       		bne.s	loc_633C
0000680A 7000                       		moveq	#0,d0
0000680C                            
0000680C                            loc_633C:
0000680C 4440                       		neg.w	d0
0000680E 4840                       		swap	d0
00006810 3038 F708                  		move.w	($FFFFF708).w,d0
00006814 4440                       		neg.w	d0
00006816                            
00006816                            loc_6346:
00006816 22C0                       		move.l	d0,(a1)+
00006818 51C9 FFFC                  		dbf	d1,loc_6346
0000681C 323C 0027                  		move.w	#$27,d1
00006820 3038 F710                  		move.w	($FFFFF710).w,d0
00006824 4440                       		neg.w	d0
00006826                            
00006826                            loc_6356:
00006826 22C0                       		move.l	d0,(a1)+
00006828 51C9 FFFC                  		dbf	d1,loc_6356
0000682C 3038 F710                  		move.w	($FFFFF710).w,d0
00006830 0640 0000                  		addi.w	#0,d0
00006834 3438 F700                  		move.w	($FFFFF700).w,d2
00006838 0642 FE00                  		addi.w	#-$200,d2
0000683C 9440                       		sub.w	d0,d2
0000683E 48C2                       		ext.l	d2
00006840 E182                       		asl.l	#8,d2
00006842 85FC 0068                  		divs.w	#$68,d2
00006846 48C2                       		ext.l	d2
00006848 E182                       		asl.l	#8,d2
0000684A 7600                       		moveq	#0,d3
0000684C 3600                       		move.w	d0,d3
0000684E 323C 0047                  		move.w	#$47,d1
00006852 D244                       		add.w	d4,d1
00006854                            
00006854                            loc_6384:
00006854 3003                       		move.w	d3,d0
00006856 4440                       		neg.w	d0
00006858 22C0                       		move.l	d0,(a1)+
0000685A 4843                       		swap	d3
0000685C D682                       		add.l	d2,d3
0000685E 4843                       		swap	d3
00006860 51C9 FFF2                  		dbf	d1,loc_6384
00006864 4E75                       		rts	
00006866                            ; End of function Deform_GHZ
00006866                            
00006866                            ; ---------------------------------------------------------------------------
00006866                            ; Labyrinth Zone background layer deformation code
00006866                            ; ---------------------------------------------------------------------------
00006866                            
00006866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006866                            
00006866                            
00006866                            Deform_LZ:				; XREF: Deform_Index
00006866 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000686A 48C4                       		ext.l	d4
0000686C EF84                       		asl.l	#7,d4
0000686E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006872 48C5                       		ext.l	d5
00006874 EF85                       		asl.l	#7,d5
00006876 6100 0000                  		bsr.w	ScrollBlock1
0000687A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006880 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006884 323C 00DF                  		move.w	#$DF,d1
00006888 3038 F700                  		move.w	($FFFFF700).w,d0
0000688C 4440                       		neg.w	d0
0000688E 4840                       		swap	d0
00006890 3038 F708                  		move.w	($FFFFF708).w,d0
00006894 4440                       		neg.w	d0
00006896                            
00006896                            loc_63C6:
00006896 22C0                       		move.l	d0,(a1)+
00006898 51C9 FFFC                  		dbf	d1,loc_63C6
0000689C 3038 F646                  		move.w	($FFFFF646).w,d0
000068A0 9078 F704                  		sub.w	($FFFFF704).w,d0
000068A4 4E75                       		rts	
000068A6                            ; End of function Deform_LZ
000068A6                            
000068A6                            ; ---------------------------------------------------------------------------
000068A6                            ; Marble Zone background layer deformation code
000068A6                            ; ---------------------------------------------------------------------------
000068A6                            
000068A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068A6                            
000068A6                            
000068A6                            Deform_MZ:				; XREF: Deform_Index
000068A6 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068AA 48C4                       		ext.l	d4
000068AC ED84                       		asl.l	#6,d4
000068AE 2204                       		move.l	d4,d1
000068B0 E384                       		asl.l	#1,d4
000068B2 D881                       		add.l	d1,d4
000068B4 7A00                       		moveq	#0,d5
000068B6 6100 0000                  		bsr.w	ScrollBlock1
000068BA 303C 0200                  		move.w	#$200,d0
000068BE 3238 F704                  		move.w	($FFFFF704).w,d1
000068C2 0441 01C8                  		subi.w	#$1C8,d1
000068C6 6500                       		bcs.s	loc_6402
000068C8 3401                       		move.w	d1,d2
000068CA D241                       		add.w	d1,d1
000068CC D242                       		add.w	d2,d1
000068CE E441                       		asr.w	#2,d1
000068D0 D041                       		add.w	d1,d0
000068D2                            
000068D2                            loc_6402:
000068D2 31C0 F714                  		move.w	d0,($FFFFF714).w
000068D6 6100 0000                  		bsr.w	ScrollBlock3
000068DA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000068E0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068E4 323C 00DF                  		move.w	#$DF,d1
000068E8 3038 F700                  		move.w	($FFFFF700).w,d0
000068EC 4440                       		neg.w	d0
000068EE 4840                       		swap	d0
000068F0 3038 F708                  		move.w	($FFFFF708).w,d0
000068F4 4440                       		neg.w	d0
000068F6                            
000068F6                            loc_6426:
000068F6 22C0                       		move.l	d0,(a1)+
000068F8 51C9 FFFC                  		dbf	d1,loc_6426
000068FC 4E75                       		rts	
000068FE                            ; End of function Deform_MZ
000068FE                            
000068FE                            ; ---------------------------------------------------------------------------
000068FE                            ; Star Light Zone background layer deformation code
000068FE                            ; ---------------------------------------------------------------------------
000068FE                            
000068FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068FE                            
000068FE                            
000068FE                            Deform_SLZ:				; XREF: Deform_Index
000068FE 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006902 48C4                       		ext.l	d4
00006904 EB84                       		asl.l	#5,d4
00006906 2204                       		move.l	d4,d1
00006908 E384                       		asl.l	#1,d4
0000690A D881                       		add.l	d1,d4
0000690C 7A00                       		moveq	#0,d5
0000690E 6100 0000                  		bsr.w	ScrollBlock1
00006912 6100 0000                  		bsr.w	ScrollBlock3
00006916 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000691A                            	;	move.w	($FFFFF704).w,d0
0000691A                            	;	andi.w	#$7FF,d0
0000691A EA48                       		lsr.w	#5,d0
0000691C 4440                       		neg.w	d0
0000691E 0640 0026                  		addi.w	#$26,d0
00006922 31C0 F714                  		move.w	d0,($FFFFF714).w
00006926 3800                       		move.w	d0,d4
00006928                            	;	bsr.w	ScrollBlock3
00006928 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
0000692E 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006932                            
00006932 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006936 4440                       		neg.w	d0			; negate (positive to negative)
00006938 4840                       		swap	d0			; send to the left side of d0
0000693A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000693E 45F8 A800                  		lea	($FFFFA800).w,a2
00006942 069A 0000 5000             		addi.l	#$5000,(a2)+
00006948 069A 0000 C000             		addi.l	#$C000,(a2)+
0000694E 3038 A800                  		move.w	($FFFFA800).w,d0
00006952 4440                       		neg.w	d0			; negate (positive to negative)
00006954 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006956 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000695A                            slz_DeformLoop_1:
0000695A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000695C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006960                            
00006960 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006964 4440                       		neg.w	d0			; negate (positive to negative)
00006966 4840                       		swap	d0			; send to the left side of d0
00006968 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000696C 45F8 A800                  		lea	($FFFFA800).w,a2
00006970 069A 0000 5000             		addi.l	#$5000,(a2)+
00006976 069A 0000 C000             		addi.l	#$C000,(a2)+
0000697C 3038 A800                  		move.w	($FFFFA800).w,d0
00006980 4440                       		neg.w	d0			; negate (positive to negative)
00006982 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006984 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006988                            slz_DeformLoop_2:
00006988 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000698A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
0000698E                            
0000698E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006992 4440                       		neg.w	d0			; negate (positive to negative)
00006994 4840                       		swap	d0			; send to the left side of d0
00006996 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000699A 45F8 A800                  		lea	($FFFFA800).w,a2
0000699E 069A 0000 5000             		addi.l	#$5000,(a2)+
000069A4 069A 0000 C000             		addi.l	#$C000,(a2)+
000069AA 3038 A800                  		move.w	($FFFFA800).w,d0
000069AE 4440                       		neg.w	d0			; negate (positive to negative)
000069B0 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069B2 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069B6                            slz_DeformLoop_3:
000069B6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069B8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
000069BC                            
000069BC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069C0 4440                       		neg.w	d0			; negate (positive to negative)
000069C2 4840                       		swap	d0			; send to the left side of d0
000069C4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069C8 45F8 A800                  		lea	($FFFFA800).w,a2
000069CC 069A 0000 5000             		addi.l	#$5000,(a2)+
000069D2 069A 0000 C000             		addi.l	#$C000,(a2)+
000069D8 3038 A800                  		move.w	($FFFFA800).w,d0
000069DC 4440                       		neg.w	d0			; negate (positive to negative)
000069DE E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069E0 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069E4                            slz_DeformLoop_4:
000069E4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069E6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000069EA                            
000069EA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069EE 4440                       		neg.w	d0			; negate (positive to negative)
000069F0 4840                       		swap	d0			; send to the left side of d0
000069F2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069F6 45F8 A800                  		lea	($FFFFA800).w,a2
000069FA 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A00 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A06 3038 A800                  		move.w	($FFFFA800).w,d0
00006A0A 4440                       		neg.w	d0			; negate (positive to negative)
00006A0C E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A0E 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A12                            slz_DeformLoop_5:
00006A12 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A14 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006A18                            
00006A18 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A1C 4440                       		neg.w	d0			; negate (positive to negative)
00006A1E 4840                       		swap	d0			; send to the left side of d0
00006A20 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A24 4440                       		neg.w	d0			; negate (positive to negative)
00006A26 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A28 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A2C                            slz_DeformLoop_6:
00006A2C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A2E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006A32                            
00006A32 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A36 4440                       		neg.w	d0			; negate (positive to negative)
00006A38 4840                       		swap	d0			; send to the left side of d0
00006A3A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A3E 4440                       		neg.w	d0			; negate (positive to negative)
00006A40 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006A42 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A46                            slz_DeformLoop_7:
00006A46 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A48 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006A4C                            
00006A4C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A50 4440                       		neg.w	d0			; negate (positive to negative)
00006A52 4840                       		swap	d0			; send to the left side of d0
00006A54 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A58 4440                       		neg.w	d0			; negate (positive to negative)
00006A5A EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006A5C 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A60                            slz_DeformLoop_8:
00006A60 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A62 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006A66                            
00006A66 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A6A 4440                       		neg.w	d0			; negate (positive to negative)
00006A6C 4840                       		swap	d0			; send to the left side of d0
00006A6E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A72 4440                       		neg.w	d0			; negate (positive to negative)
00006A74 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A76 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A7A                            slz_DeformLoop_9:
00006A7A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A7C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006A80                            
00006A80 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A84 4440                       		neg.w	d0			; negate (positive to negative)
00006A86 4840                       		swap	d0			; send to the left side of d0
00006A88 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A8C 4440                       		neg.w	d0			; negate (positive to negative)
00006A8E E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A90 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A94                            slz_DeformLoop_10:
00006A94 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A96 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006A9A                            
00006A9A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A9E 4440                       		neg.w	d0			; negate (positive to negative)
00006AA0 4840                       		swap	d0			; send to the left side of d0
00006AA2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AA6 4440                       		neg.w	d0			; negate (positive to negative)
00006AA8 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006AAA 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AAE                            slz_DeformLoop_11:
00006AAE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AB0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006AB4                            
00006AB4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AB8 4440                       		neg.w	d0			; negate (positive to negative)
00006ABA 4840                       		swap	d0			; send to the left side of d0
00006ABC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AC0 4440                       		neg.w	d0			; negate (positive to negative)
00006AC2 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006AC4 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AC8                            slz_DeformLoop_12:
00006AC8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006ACA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006ACE                            
00006ACE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AD2 4440                       		neg.w	d0			; negate (positive to negative)
00006AD4 4840                       		swap	d0			; send to the left side of d0
00006AD6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006ADA 4440                       		neg.w	d0			; negate (positive to negative)
00006ADC E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006ADE 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AE2                            slz_DeformLoop_13:
00006AE2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AE4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006AE8 4E75                       		rts	
00006AEA                            ; End of function Deform_SLZ
00006AEA 4E75                       		rts	
00006AEC                            ; End of function Deform_SLZ_2
00006AEC                            
00006AEC                            ; ---------------------------------------------------------------------------
00006AEC                            ; Spring Yard Zone background layer deformation	code
00006AEC                            ; ---------------------------------------------------------------------------
00006AEC                            
00006AEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AEC                            
00006AEC                            
00006AEC                            Deform_SYZ:				; XREF: Deform_Index
00006AEC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AF0 48C4                       		ext.l	d4
00006AF2 ED84                       		asl.l	#6,d4
00006AF4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006AF8 48C5                       		ext.l	d5
00006AFA E985                       		asl.l	#4,d5
00006AFC 2205                       		move.l	d5,d1
00006AFE E385                       		asl.l	#1,d5
00006B00 DA81                       		add.l	d1,d5
00006B02 6100 0000                  		bsr.w	ScrollBlock1
00006B06 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B0C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B10 323C 00DF                  		move.w	#$DF,d1
00006B14 3038 F700                  		move.w	($FFFFF700).w,d0
00006B18 4440                       		neg.w	d0
00006B1A 4840                       		swap	d0
00006B1C 3038 F708                  		move.w	($FFFFF708).w,d0
00006B20 4440                       		neg.w	d0
00006B22                            
00006B22                            loc_653C:
00006B22 22C0                       		move.l	d0,(a1)+
00006B24 51C9 FFFC                  		dbf	d1,loc_653C
00006B28 4E75                       		rts	
00006B2A                            ; End of function Deform_SYZ
00006B2A                            
00006B2A                            ; ---------------------------------------------------------------------------
00006B2A                            ; Scrap	Brain Zone background layer deformation	code
00006B2A                            ; ---------------------------------------------------------------------------
00006B2A                            
00006B2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B2A                            
00006B2A                            
00006B2A                            Deform_SBZ:				; XREF: Deform_Index
00006B2A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B2E 48C4                       		ext.l	d4
00006B30 ED84                       		asl.l	#6,d4
00006B32 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B36 48C5                       		ext.l	d5
00006B38 E985                       		asl.l	#4,d5
00006B3A E385                       		asl.l	#1,d5
00006B3C 6100 0000                  		bsr.w	ScrollBlock1
00006B40 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B46 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B4A 323C 00DF                  		move.w	#$DF,d1
00006B4E 3038 F700                  		move.w	($FFFFF700).w,d0
00006B52 4440                       		neg.w	d0
00006B54 4840                       		swap	d0
00006B56 3038 F708                  		move.w	($FFFFF708).w,d0
00006B5A 4440                       		neg.w	d0
00006B5C                            
00006B5C                            loc_6576:
00006B5C 22C0                       		move.l	d0,(a1)+
00006B5E 51C9 FFFC                  		dbf	d1,loc_6576
00006B62 4E75                       		rts	
00006B64                            ; End of function Deform_SBZ
00006B64                            ; ---------------------------------------------------------------------------
00006B64                            ; Makoto Zone background layer deformation code
00006B64                            ; ---------------------------------------------------------------------------
00006B64                            
00006B64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B64                            
00006B64                            
00006B64                            Deform_BHZ:				; XREF: Deform_Index
00006B64 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B68 48C4                       		ext.l	d4
00006B6A E984                       		asl.l	#4,d4
00006B6C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B70 48C5                       		ext.l	d5
00006B72 E985                       		asl.l	#4,d5
00006B74 7A00                       		moveq	#0,d5	; reset bg position in title screen
00006B76 6100 0000                  		bsr.w	ScrollBlock1
00006B7A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B80 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B84 323C 00DF                  		move.w	#$DF,d1
00006B88 3038 F700                  		move.w	($FFFFF700).w,d0
00006B8C 4440                       		neg.w	d0
00006B8E 4840                       		swap	d0
00006B90 3038 F708                  		move.w	($FFFFF708).w,d0
00006B94 4440                       		neg.w	d0
00006B96                            
00006B96                            loc_63COCK6:
00006B96 22C0                       		move.l	d0,(a1)+
00006B98 51C9 FFFC                  		dbf	d1,loc_63COCK6
00006B9C 3038 F646                  		move.w	($FFFFF646).w,d0
00006BA0 9078 F704                  		sub.w	($FFFFF704).w,d0
00006BA4 4E75                       		rts	
00006BA6                            ; End of function Deform_BHZ
00006BA6                            ; ---------------------------------------------------------------------------
00006BA6                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006BA6                            ; ---------------------------------------------------------------------------
00006BA6                            
00006BA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BA6                            
00006BA6                            
00006BA6                            ScrollHoriz:				; XREF: DeformBgLayer
00006BA6 3838 F700                  		move.w	($FFFFF700).w,d4
00006BAA 6100                       		bsr.s	ScrollHoriz2
00006BAC 3038 F700                  		move.w	($FFFFF700).w,d0
00006BB0 0240 0010                  		andi.w	#$10,d0
00006BB4 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006BB8 B300                       		eor.b	d1,d0
00006BBA 6600                       		bne.s	locret_65B0
00006BBC 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006BC2 3038 F700                  		move.w	($FFFFF700).w,d0
00006BC6 9044                       		sub.w	d4,d0
00006BC8 6A00                       		bpl.s	loc_65AA
00006BCA 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006BD0 4E75                       		rts	
00006BD2                            ; ===========================================================================
00006BD2                            
00006BD2                            loc_65AA:
00006BD2 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006BD8                            
00006BD8                            locret_65B0:
00006BD8 4E75                       		rts	
00006BDA                            ; End of function ScrollHoriz
00006BDA                            
00006BDA                            
00006BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BDA                            
00006BDA                            
00006BDA                            ScrollHoriz2:				; XREF: ScrollHoriz
00006BDA 3038 D008                  		move.w	($FFFFD008).w,d0
00006BDE 9078 F700                  		sub.w	($FFFFF700).w,d0
00006BE2 0440 0090                  		subi.w	#$90,d0
00006BE6 6500                       		bcs.s	loc_65F6
00006BE8 0440 0010                  		subi.w	#$10,d0
00006BEC 6400                       		bcc.s	loc_65CC
00006BEE 4278 F73A                  		clr.w	($FFFFF73A).w
00006BF2 4E75                       		rts	
00006BF4                            ; ===========================================================================
00006BF4                            
00006BF4                            loc_65CC:
00006BF4 0C40 0010                  		cmpi.w	#$10,d0
00006BF8 6500                       		bcs.s	loc_65D6
00006BFA 303C 0010                  		move.w	#$10,d0
00006BFE                            
00006BFE                            loc_65D6:
00006BFE D078 F700                  		add.w	($FFFFF700).w,d0
00006C02 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006C06 6D00                       		blt.s	loc_65E4
00006C08 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006C0C                            
00006C0C                            loc_65E4:
00006C0C 3200                       		move.w	d0,d1
00006C0E 9278 F700                  		sub.w	($FFFFF700).w,d1
00006C12 E141                       		asl.w	#8,d1
00006C14 31C0 F700                  		move.w	d0,($FFFFF700).w
00006C18 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006C1C 4E75                       		rts	
00006C1E                            ; ===========================================================================
00006C1E                            
00006C1E                            loc_65F6:				; XREF: ScrollHoriz2
00006C1E D078 F700                  		add.w	($FFFFF700).w,d0
00006C22 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006C26 6EE4                       		bgt.s	loc_65E4
00006C28 3038 F728                  		move.w	($FFFFF728).w,d0
00006C2C 60DE                       		bra.s	loc_65E4
00006C2E                            ; End of function ScrollHoriz2
00006C2E                            
00006C2E                            ; ===========================================================================
00006C2E 4A40                       		tst.w	d0
00006C30 6A00                       		bpl.s	loc_6610
00006C32 303C FFFE                  		move.w	#-2,d0
00006C36 60E6                       		bra.s	loc_65F6
00006C38                            ; ===========================================================================
00006C38                            
00006C38                            loc_6610:
00006C38 303C 0002                  		move.w	#2,d0
00006C3C 60B6                       		bra.s	loc_65CC
00006C3E                            
00006C3E                            ; ---------------------------------------------------------------------------
00006C3E                            ; Subroutine to	scroll the level vertically as Sonic moves
00006C3E                            ; ---------------------------------------------------------------------------
00006C3E                            
00006C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C3E                            
00006C3E                            
00006C3E                            ScrollVertical:				; XREF: DeformBgLayer
00006C3E 7200                       		moveq	#0,d1
00006C40 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006C44 9078 F704                  		sub.w	($FFFFF704).w,d0
00006C48 0838 0002 D022             		btst	#2,($FFFFD022).w
00006C4E 6700                       		beq.s	loc_662A
00006C50 5B40                       		subq.w	#5,d0
00006C52                            
00006C52                            loc_662A:
00006C52 0838 0001 D022             		btst	#1,($FFFFD022).w
00006C58 6700                       		beq.s	loc_664A
00006C5A 0640 0020                  		addi.w	#$20,d0
00006C5E 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C62 6500                       		bcs.s	loc_6696
00006C64 0440 0040                  		subi.w	#$40,d0
00006C68 6400                       		bcc.s	loc_6696
00006C6A 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C6E 6600                       		bne.s	loc_66A8
00006C70 6000                       		bra.s	loc_6656
00006C72                            ; ===========================================================================
00006C72                            
00006C72                            loc_664A:
00006C72 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C76 6600                       		bne.s	loc_665C
00006C78 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C7C 6600                       		bne.s	loc_66A8
00006C7E                            
00006C7E                            loc_6656:
00006C7E 4278 F73C                  		clr.w	($FFFFF73C).w
00006C82 4E75                       		rts	
00006C84                            ; ===========================================================================
00006C84                            
00006C84                            loc_665C:
00006C84 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006C8A 6600                       		bne.s	loc_6684
00006C8C 3238 D014                  		move.w	($FFFFD014).w,d1
00006C90 6A00                       		bpl.s	loc_666C
00006C92 4441                       		neg.w	d1
00006C94                            
00006C94                            loc_666C:
00006C94 0C41 0800                  		cmpi.w	#$800,d1
00006C98 6400                       		bcc.s	loc_6696
00006C9A 323C 0600                  		move.w	#$600,d1
00006C9E 0C40 0006                  		cmpi.w	#6,d0
00006CA2 6E00                       		bgt.s	loc_66F6
00006CA4 0C40 FFFA                  		cmpi.w	#-6,d0
00006CA8 6D00                       		blt.s	loc_66C0
00006CAA 6000                       		bra.s	loc_66AE
00006CAC                            ; ===========================================================================
00006CAC                            
00006CAC                            loc_6684:
00006CAC 323C 0200                  		move.w	#$200,d1
00006CB0 0C40 0002                  		cmpi.w	#2,d0
00006CB4 6E00                       		bgt.s	loc_66F6
00006CB6 0C40 FFFE                  		cmpi.w	#-2,d0
00006CBA 6D00                       		blt.s	loc_66C0
00006CBC 6000                       		bra.s	loc_66AE
00006CBE                            ; ===========================================================================
00006CBE                            
00006CBE                            loc_6696:
00006CBE 323C 1000                  		move.w	#$1000,d1
00006CC2 0C40 0010                  		cmpi.w	#$10,d0
00006CC6 6E00                       		bgt.s	loc_66F6
00006CC8 0C40 FFF0                  		cmpi.w	#-$10,d0
00006CCC 6D00                       		blt.s	loc_66C0
00006CCE 6000                       		bra.s	loc_66AE
00006CD0                            ; ===========================================================================
00006CD0                            
00006CD0                            loc_66A8:
00006CD0 7000                       		moveq	#0,d0
00006CD2 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006CD6                            
00006CD6                            loc_66AE:
00006CD6 7200                       		moveq	#0,d1
00006CD8 3200                       		move.w	d0,d1
00006CDA D278 F704                  		add.w	($FFFFF704).w,d1
00006CDE 4A40                       		tst.w	d0
00006CE0 6A00 0000                  		bpl.w	loc_6700
00006CE4 6000 0000                  		bra.w	loc_66CC
00006CE8                            ; ===========================================================================
00006CE8                            
00006CE8                            loc_66C0:
00006CE8 4441                       		neg.w	d1
00006CEA 48C1                       		ext.l	d1
00006CEC E181                       		asl.l	#8,d1
00006CEE D2B8 F704                  		add.l	($FFFFF704).w,d1
00006CF2 4841                       		swap	d1
00006CF4                            
00006CF4                            loc_66CC:
00006CF4 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006CF8 6E00                       		bgt.s	loc_6724
00006CFA 0C41 FF00                  		cmpi.w	#-$100,d1
00006CFE 6E00                       		bgt.s	loc_66F0
00006D00 0241 07FF                  		andi.w	#$7FF,d1
00006D04 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D0A 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006D10 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D16 6000                       		bra.s	loc_6724
00006D18                            ; ===========================================================================
00006D18                            
00006D18                            loc_66F0:
00006D18 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006D1C 6000                       		bra.s	loc_6724
00006D1E                            ; ===========================================================================
00006D1E                            
00006D1E                            loc_66F6:
00006D1E 48C1                       		ext.l	d1
00006D20 E181                       		asl.l	#8,d1
00006D22 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D26 4841                       		swap	d1
00006D28                            
00006D28                            loc_6700:
00006D28 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006D2C 6D00                       		blt.s	loc_6724
00006D2E 0441 0800                  		subi.w	#$800,d1
00006D32 6500                       		bcs.s	loc_6720
00006D34 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D3A 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006D40 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D46 6000                       		bra.s	loc_6724
00006D48                            ; ===========================================================================
00006D48                            
00006D48                            loc_6720:
00006D48 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006D4C                            
00006D4C                            loc_6724:
00006D4C 3838 F704                  		move.w	($FFFFF704).w,d4
00006D50 4841                       		swap	d1
00006D52 2601                       		move.l	d1,d3
00006D54 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006D58 E09B                       		ror.l	#8,d3
00006D5A 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006D5E 21C1 F704                  		move.l	d1,($FFFFF704).w
00006D62 3038 F704                  		move.w	($FFFFF704).w,d0
00006D66 0240 0010                  		andi.w	#$10,d0
00006D6A 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006D6E B300                       		eor.b	d1,d0
00006D70 6600                       		bne.s	locret_6766
00006D72 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006D78 3038 F704                  		move.w	($FFFFF704).w,d0
00006D7C 9044                       		sub.w	d4,d0
00006D7E 6A00                       		bpl.s	loc_6760
00006D80 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006D86 4E75                       		rts	
00006D88                            ; ===========================================================================
00006D88                            
00006D88                            loc_6760:
00006D88 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006D8E                            
00006D8E                            locret_6766:
00006D8E 4E75                       		rts	
00006D90                            ; End of function ScrollVertical
00006D90                            
00006D90                            
00006D90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D90                            
00006D90                            
00006D90                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006D90 2438 F708                  		move.l	($FFFFF708).w,d2
00006D94 2002                       		move.l	d2,d0
00006D96 D084                       		add.l	d4,d0
00006D98 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D9C 2200                       		move.l	d0,d1
00006D9E 4841                       		swap	d1
00006DA0 0241 0010                  		andi.w	#$10,d1
00006DA4 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006DA8 B701                       		eor.b	d3,d1
00006DAA 6600                       		bne.s	loc_679C
00006DAC 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006DB2 9082                       		sub.l	d2,d0
00006DB4 6A00                       		bpl.s	loc_6796
00006DB6 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006DBC 6000                       		bra.s	loc_679C
00006DBE                            ; ===========================================================================
00006DBE                            
00006DBE                            loc_6796:
00006DBE 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006DC4                            
00006DC4                            loc_679C:
00006DC4 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006DC8 2003                       		move.l	d3,d0
00006DCA D085                       		add.l	d5,d0
00006DCC 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006DD0 2200                       		move.l	d0,d1
00006DD2 4841                       		swap	d1
00006DD4 0241 0010                  		andi.w	#$10,d1
00006DD8 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DDC B501                       		eor.b	d2,d1
00006DDE 6600                       		bne.s	locret_67D0
00006DE0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DE6 9083                       		sub.l	d3,d0
00006DE8 6A00                       		bpl.s	loc_67CA
00006DEA 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DF0 4E75                       		rts	
00006DF2                            ; ===========================================================================
00006DF2                            
00006DF2                            loc_67CA:
00006DF2 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DF8                            
00006DF8                            locret_67D0:
00006DF8 4E75                       		rts	
00006DFA                            ; End of function ScrollBlock1
00006DFA                            
00006DFA                            
00006DFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DFA                            
00006DFA                            
00006DFA                            ScrollBlock2:				; XREF: Deform_SLZ
00006DFA 2438 F708                  		move.l	($FFFFF708).w,d2
00006DFE 2002                       		move.l	d2,d0
00006E00 D084                       		add.l	d4,d0
00006E02 21C0 F708                  		move.l	d0,($FFFFF708).w
00006E06 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006E0A 2003                       		move.l	d3,d0
00006E0C D085                       		add.l	d5,d0
00006E0E 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006E12 2200                       		move.l	d0,d1
00006E14 4841                       		swap	d1
00006E16 0241 0010                  		andi.w	#$10,d1
00006E1A 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E1E B501                       		eor.b	d2,d1
00006E20 6600                       		bne.s	locret_6812
00006E22 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E28 9083                       		sub.l	d3,d0
00006E2A 6A00                       		bpl.s	loc_680C
00006E2C 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E32 4E75                       		rts	
00006E34                            ; ===========================================================================
00006E34                            
00006E34                            loc_680C:
00006E34 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E3A                            
00006E3A                            locret_6812:
00006E3A 4E75                       		rts	
00006E3C                            ; End of function ScrollBlock2
00006E3C                            
00006E3C                            
00006E3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E3C                            
00006E3C                            
00006E3C                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006E3C 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006E40 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006E44 3200                       		move.w	d0,d1
00006E46 0241 0010                  		andi.w	#$10,d1
00006E4A 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E4E B501                       		eor.b	d2,d1
00006E50 6600                       		bne.s	locret_6842
00006E52 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E58 9043                       		sub.w	d3,d0
00006E5A 6A00                       		bpl.s	loc_683C
00006E5C 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E62 4E75                       		rts	
00006E64                            ; ===========================================================================
00006E64                            
00006E64                            loc_683C:
00006E64 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E6A                            
00006E6A                            locret_6842:
00006E6A 4E75                       		rts	
00006E6C                            ; End of function ScrollBlock3
00006E6C                            
00006E6C                            
00006E6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E6C                            
00006E6C                            
00006E6C                            ScrollBlock4:				; XREF: Deform_GHZ
00006E6C 3438 F710                  		move.w	($FFFFF710).w,d2
00006E70 3638 F714                  		move.w	($FFFFF714).w,d3
00006E74 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006E78 48C0                       		ext.l	d0
00006E7A EF80                       		asl.l	#7,d0
00006E7C D1B8 F710                  		add.l	d0,($FFFFF710).w
00006E80 3038 F710                  		move.w	($FFFFF710).w,d0
00006E84 0240 0010                  		andi.w	#$10,d0
00006E88 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006E8C B300                       		eor.b	d1,d0
00006E8E 6600                       		bne.s	locret_6884
00006E90 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006E96 3038 F710                  		move.w	($FFFFF710).w,d0
00006E9A 9042                       		sub.w	d2,d0
00006E9C 6A00                       		bpl.s	loc_687E
00006E9E 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006EA4 6000                       		bra.s	locret_6884
00006EA6                            ; ===========================================================================
00006EA6                            
00006EA6                            loc_687E:
00006EA6 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006EAC                            
00006EAC                            locret_6884:
00006EAC 4E75                       		rts	
00006EAE                            ; End of function ScrollBlock4
00006EAE                            
00006EAE                            
00006EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EAE                            
00006EAE                            
00006EAE                            sub_6886:				; XREF: loc_C44
00006EAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EB4 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EBA 45F8 F756                  		lea	($FFFFF756).w,a2
00006EBE 47F8 F708                  		lea	($FFFFF708).w,a3
00006EC2 49F8 A440                  		lea	($FFFFA440).w,a4
00006EC6 343C 6000                  		move.w	#$6000,d2
00006ECA 6100 0000                  		bsr.w	sub_6954
00006ECE 45F8 F758                  		lea	($FFFFF758).w,a2
00006ED2 47F8 F710                  		lea	($FFFFF710).w,a3
00006ED6 6000 0000                  		bra.w	sub_69F4
00006EDA                            ; End of function sub_6886
00006EDA                            
00006EDA                            ; ---------------------------------------------------------------------------
00006EDA                            ; Subroutine to	display	correct	tiles as you move
00006EDA                            ; ---------------------------------------------------------------------------
00006EDA                            
00006EDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EDA                            
00006EDA                            
00006EDA                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006EDA 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EE0 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EE6 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006EEA 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006EEE 49F8 A440                  		lea	($FFFFA440).w,a4
00006EF2 343C 6000                  		move.w	#$6000,d2
00006EF6 6100 0000                  		bsr.w	sub_6954
00006EFA 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006EFE 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006F02 6100 0000                  		bsr.w	sub_69F4
00006F06 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006F0A 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006F0E 49F8 A400                  		lea	($FFFFA400).w,a4
00006F12 343C 4000                  		move.w	#$4000,d2
00006F16 4A12                       		tst.b	(a2)
00006F18 6700                       		beq.s	locret_6952
00006F1A 0892 0000                  		bclr	#0,(a2)
00006F1E 6700                       		beq.s	loc_6908
00006F20 78F0                       		moveq	#-$10,d4
00006F22 7AF0                       		moveq	#-$10,d5
00006F24 6100 0000                  		bsr.w	sub_6C20
00006F28 78F0                       		moveq	#-$10,d4
00006F2A 7AF0                       		moveq	#-$10,d5
00006F2C 6100 0000                  		bsr.w	sub_6AD8
00006F30                            
00006F30                            loc_6908:
00006F30 0892 0001                  		bclr	#1,(a2)
00006F34 6700                       		beq.s	loc_6922
00006F36 383C 00E0                  		move.w	#$E0,d4
00006F3A 7AF0                       		moveq	#-$10,d5
00006F3C 6100 0000                  		bsr.w	sub_6C20
00006F40 383C 00E0                  		move.w	#$E0,d4
00006F44 7AF0                       		moveq	#-$10,d5
00006F46 6100 0000                  		bsr.w	sub_6AD8
00006F4A                            
00006F4A                            loc_6922:
00006F4A 0892 0002                  		bclr	#2,(a2)
00006F4E 6700                       		beq.s	loc_6938
00006F50 78F0                       		moveq	#-$10,d4
00006F52 7AF0                       		moveq	#-$10,d5
00006F54 6100 0000                  		bsr.w	sub_6C20
00006F58 78F0                       		moveq	#-$10,d4
00006F5A 7AF0                       		moveq	#-$10,d5
00006F5C 6100 0000                  		bsr.w	sub_6B04
00006F60                            
00006F60                            loc_6938:
00006F60 0892 0003                  		bclr	#3,(a2)
00006F64 6700                       		beq.s	locret_6952
00006F66 78F0                       		moveq	#-$10,d4
00006F68 3A3C 0140                  		move.w	#$140,d5
00006F6C 6100 0000                  		bsr.w	sub_6C20
00006F70 78F0                       		moveq	#-$10,d4
00006F72 3A3C 0140                  		move.w	#$140,d5
00006F76 6100 0000                  		bsr.w	sub_6B04
00006F7A                            
00006F7A                            locret_6952:
00006F7A 4E75                       		rts	
00006F7C                            ; End of function LoadTilesAsYouMove
00006F7C                            
00006F7C                            
00006F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F7C                            
00006F7C                            
00006F7C                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006F7C 4A12                       		tst.b	(a2)
00006F7E 6700 0000                  		beq.w	locret_69F2
00006F82 0892 0000                  		bclr	#0,(a2)
00006F86 6700                       		beq.s	loc_6972
00006F88 78F0                       		moveq	#-$10,d4
00006F8A 7AF0                       		moveq	#-$10,d5
00006F8C 6100 0000                  		bsr.w	sub_6C20
00006F90 78F0                       		moveq	#-$10,d4
00006F92 7AF0                       		moveq	#-$10,d5
00006F94 7C1F                       		moveq	#$1F,d6
00006F96 6100 0000                  		bsr.w	sub_6ADA
00006F9A                            
00006F9A                            loc_6972:
00006F9A 0892 0001                  		bclr	#1,(a2)
00006F9E 6700                       		beq.s	loc_698E
00006FA0 383C 00E0                  		move.w	#$E0,d4
00006FA4 7AF0                       		moveq	#-$10,d5
00006FA6 6100 0000                  		bsr.w	sub_6C20
00006FAA 383C 00E0                  		move.w	#$E0,d4
00006FAE 7AF0                       		moveq	#-$10,d5
00006FB0 7C1F                       		moveq	#$1F,d6
00006FB2 6100 0000                  		bsr.w	sub_6ADA
00006FB6                            
00006FB6                            loc_698E:
00006FB6 0892 0002                  		bclr	#2,(a2)
00006FBA 6700                       		beq.s	loc_69BE
00006FBC 78F0                       		moveq	#-$10,d4
00006FBE 7AF0                       		moveq	#-$10,d5
00006FC0 6100 0000                  		bsr.w	sub_6C20
00006FC4 78F0                       		moveq	#-$10,d4
00006FC6 7AF0                       		moveq	#-$10,d5
00006FC8 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FCC 322B 0004                  		move.w	4(a3),d1
00006FD0 0241 FFF0                  		andi.w	#-$10,d1
00006FD4 9C41                       		sub.w	d1,d6
00006FD6 6D00                       		blt.s	loc_69BE
00006FD8 E84E                       		lsr.w	#4,d6
00006FDA 0C46 000F                  		cmpi.w	#$F,d6
00006FDE 6500                       		bcs.s	loc_69BA
00006FE0 7C0F                       		moveq	#$F,d6
00006FE2                            
00006FE2                            loc_69BA:
00006FE2 6100 0000                  		bsr.w	sub_6B06
00006FE6                            
00006FE6                            loc_69BE:
00006FE6 0892 0003                  		bclr	#3,(a2)
00006FEA 6700                       		beq.s	locret_69F2
00006FEC 78F0                       		moveq	#-$10,d4
00006FEE 3A3C 0140                  		move.w	#$140,d5
00006FF2 6100 0000                  		bsr.w	sub_6C20
00006FF6 78F0                       		moveq	#-$10,d4
00006FF8 3A3C 0140                  		move.w	#$140,d5
00006FFC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007000 322B 0004                  		move.w	4(a3),d1
00007004 0241 FFF0                  		andi.w	#-$10,d1
00007008 9C41                       		sub.w	d1,d6
0000700A 6D00                       		blt.s	locret_69F2
0000700C E84E                       		lsr.w	#4,d6
0000700E 0C46 000F                  		cmpi.w	#$F,d6
00007012 6500                       		bcs.s	loc_69EE
00007014 7C0F                       		moveq	#$F,d6
00007016                            
00007016                            loc_69EE:
00007016 6100 0000                  		bsr.w	sub_6B06
0000701A                            
0000701A                            locret_69F2:
0000701A 4E75                       		rts	
0000701C                            ; End of function sub_6954
0000701C                            
0000701C                            
0000701C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000701C                            
0000701C                            
0000701C                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
0000701C 4A12                       		tst.b	(a2)
0000701E 6700 0000                  		beq.w	locret_6A80
00007022 0892 0002                  		bclr	#2,(a2)
00007026 6700                       		beq.s	loc_6A3E
00007028 0C53 0010                  		cmpi.w	#$10,(a3)
0000702C 6500                       		bcs.s	loc_6A3E
0000702E 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007032 322B 0004                  		move.w	4(a3),d1
00007036 0241 FFF0                  		andi.w	#-$10,d1
0000703A 9841                       		sub.w	d1,d4
0000703C 3F04                       		move.w	d4,-(sp)
0000703E 7AF0                       		moveq	#-$10,d5
00007040 6100 0000                  		bsr.w	sub_6C20
00007044 381F                       		move.w	(sp)+,d4
00007046 7AF0                       		moveq	#-$10,d5
00007048 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000704C 322B 0004                  		move.w	4(a3),d1
00007050 0241 FFF0                  		andi.w	#-$10,d1
00007054 9C41                       		sub.w	d1,d6
00007056 6D00                       		blt.s	loc_6A3E
00007058 E84E                       		lsr.w	#4,d6
0000705A 0446 000E                  		subi.w	#$E,d6
0000705E 6400                       		bcc.s	loc_6A3E
00007060 4446                       		neg.w	d6
00007062 6100 0000                  		bsr.w	sub_6B06
00007066                            
00007066                            loc_6A3E:
00007066 0892 0003                  		bclr	#3,(a2)
0000706A 6700                       		beq.s	locret_6A80
0000706C 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007070 322B 0004                  		move.w	4(a3),d1
00007074 0241 FFF0                  		andi.w	#-$10,d1
00007078 9841                       		sub.w	d1,d4
0000707A 3F04                       		move.w	d4,-(sp)
0000707C 3A3C 0140                  		move.w	#$140,d5
00007080 6100 0000                  		bsr.w	sub_6C20
00007084 381F                       		move.w	(sp)+,d4
00007086 3A3C 0140                  		move.w	#$140,d5
0000708A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000708E 322B 0004                  		move.w	4(a3),d1
00007092 0241 FFF0                  		andi.w	#-$10,d1
00007096 9C41                       		sub.w	d1,d6
00007098 6D00                       		blt.s	locret_6A80
0000709A E84E                       		lsr.w	#4,d6
0000709C 0446 000E                  		subi.w	#$E,d6
000070A0 6400                       		bcc.s	locret_6A80
000070A2 4446                       		neg.w	d6
000070A4 6100 0000                  		bsr.w	sub_6B06
000070A8                            
000070A8                            locret_6A80:
000070A8 4E75                       		rts	
000070AA                            ; End of function sub_69F4
000070AA                            
000070AA                            ; ===========================================================================
000070AA 4A12                       		tst.b	(a2)
000070AC 6700                       		beq.s	locret_6AD6
000070AE 0892 0002                  		bclr	#2,(a2)
000070B2 6700                       		beq.s	loc_6AAC
000070B4 383C 00D0                  		move.w	#$D0,d4
000070B8 322B 0004                  		move.w	4(a3),d1
000070BC 0241 FFF0                  		andi.w	#-$10,d1
000070C0 9841                       		sub.w	d1,d4
000070C2 3F04                       		move.w	d4,-(sp)
000070C4 7AF0                       		moveq	#-$10,d5
000070C6 6100 0000                  		bsr.w	sub_6C3C
000070CA 381F                       		move.w	(sp)+,d4
000070CC 7AF0                       		moveq	#-$10,d5
000070CE 7C02                       		moveq	#2,d6
000070D0 6100 0000                  		bsr.w	sub_6B06
000070D4                            
000070D4                            loc_6AAC:
000070D4 0892 0003                  		bclr	#3,(a2)
000070D8 6700                       		beq.s	locret_6AD6
000070DA 383C 00D0                  		move.w	#$D0,d4
000070DE 322B 0004                  		move.w	4(a3),d1
000070E2 0241 FFF0                  		andi.w	#-$10,d1
000070E6 9841                       		sub.w	d1,d4
000070E8 3F04                       		move.w	d4,-(sp)
000070EA 3A3C 0140                  		move.w	#$140,d5
000070EE 6100 0000                  		bsr.w	sub_6C3C
000070F2 381F                       		move.w	(sp)+,d4
000070F4 3A3C 0140                  		move.w	#$140,d5
000070F8 7C02                       		moveq	#2,d6
000070FA 6100 0000                  		bsr.w	sub_6B06
000070FE                            
000070FE                            locret_6AD6:
000070FE 4E75                       		rts	
00007100                            
00007100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007100                            
00007100                            
00007100                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007100 7C15                       		moveq	#$15,d6
00007102                            ; End of function sub_6AD8
00007102                            
00007102                            
00007102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007102                            
00007102                            
00007102                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007102 2E3C 0080 0000             		move.l	#$800000,d7
00007108 2200                       		move.l	d0,d1
0000710A                            
0000710A                            loc_6AE2:
0000710A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000710E 6100 0000                  		bsr.w	sub_6BD6
00007112 2001                       		move.l	d1,d0
00007114 6100 0000                  		bsr.w	sub_6B32
00007118 5801                       		addq.b	#4,d1
0000711A 0201 007F                  		andi.b	#$7F,d1
0000711E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007122 0645 0010                  		addi.w	#$10,d5
00007126 51CE FFE2                  		dbf	d6,loc_6AE2
0000712A 4E75                       		rts	
0000712C                            ; End of function sub_6ADA
0000712C                            
0000712C                            
0000712C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000712C                            
0000712C                            
0000712C                            sub_6B04:				; XREF: LoadTilesAsYouMove
0000712C 7C0F                       		moveq	#$F,d6
0000712E                            ; End of function sub_6B04
0000712E                            
0000712E                            
0000712E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000712E                            
0000712E                            
0000712E                            sub_6B06:				; XREF: sub_6954
0000712E 2E3C 0080 0000             		move.l	#$800000,d7
00007134 2200                       		move.l	d0,d1
00007136                            
00007136                            loc_6B0E:
00007136 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000713A 6100 0000                  		bsr.w	sub_6BD6
0000713E 2001                       		move.l	d1,d0
00007140 6100 0000                  		bsr.w	sub_6B32
00007144 0641 0100                  		addi.w	#$100,d1
00007148 0241 0FFF                  		andi.w	#$FFF,d1
0000714C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007150 0644 0010                  		addi.w	#$10,d4
00007154 51CE FFE0                  		dbf	d6,loc_6B0E
00007158 4E75                       		rts	
0000715A                            ; End of function sub_6B06
0000715A                            
0000715A                            
0000715A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000715A                            
0000715A                            
0000715A                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
0000715A 8042                       		or.w	d2,d0
0000715C 4840                       		swap	d0
0000715E 0810 0004                  		btst	#4,(a0)
00007162 6600                       		bne.s	loc_6B6E
00007164 0810 0003                  		btst	#3,(a0)
00007168 6600                       		bne.s	loc_6B4E
0000716A 2A80                       		move.l	d0,(a5)
0000716C 2C99                       		move.l	(a1)+,(a6)
0000716E D087                       		add.l	d7,d0
00007170 2A80                       		move.l	d0,(a5)
00007172 2C99                       		move.l	(a1)+,(a6)
00007174 4E75                       		rts	
00007176                            ; ===========================================================================
00007176                            
00007176                            loc_6B4E:
00007176 2A80                       		move.l	d0,(a5)
00007178 2819                       		move.l	(a1)+,d4
0000717A 0A84 0800 0800             		eori.l	#$8000800,d4
00007180 4844                       		swap	d4
00007182 2C84                       		move.l	d4,(a6)
00007184 D087                       		add.l	d7,d0
00007186 2A80                       		move.l	d0,(a5)
00007188 2819                       		move.l	(a1)+,d4
0000718A 0A84 0800 0800             		eori.l	#$8000800,d4
00007190 4844                       		swap	d4
00007192 2C84                       		move.l	d4,(a6)
00007194 4E75                       		rts	
00007196                            ; ===========================================================================
00007196                            
00007196                            loc_6B6E:
00007196 0810 0003                  		btst	#3,(a0)
0000719A 6600                       		bne.s	loc_6B90
0000719C 2A80                       		move.l	d0,(a5)
0000719E 2A19                       		move.l	(a1)+,d5
000071A0 2819                       		move.l	(a1)+,d4
000071A2 0A84 1000 1000             		eori.l	#$10001000,d4
000071A8 2C84                       		move.l	d4,(a6)
000071AA D087                       		add.l	d7,d0
000071AC 2A80                       		move.l	d0,(a5)
000071AE 0A85 1000 1000             		eori.l	#$10001000,d5
000071B4 2C85                       		move.l	d5,(a6)
000071B6 4E75                       		rts	
000071B8                            ; ===========================================================================
000071B8                            
000071B8                            loc_6B90:
000071B8 2A80                       		move.l	d0,(a5)
000071BA 2A19                       		move.l	(a1)+,d5
000071BC 2819                       		move.l	(a1)+,d4
000071BE 0A84 1800 1800             		eori.l	#$18001800,d4
000071C4 4844                       		swap	d4
000071C6 2C84                       		move.l	d4,(a6)
000071C8 D087                       		add.l	d7,d0
000071CA 2A80                       		move.l	d0,(a5)
000071CC 0A85 1800 1800             		eori.l	#$18001800,d5
000071D2 4845                       		swap	d5
000071D4 2C85                       		move.l	d5,(a6)
000071D6 4E75                       		rts	
000071D8                            ; End of function sub_6B32
000071D8                            
000071D8                            ; ===========================================================================
000071D8 4E75                       		rts	
000071DA                            ; ===========================================================================
000071DA 2A80                       		move.l	d0,(a5)
000071DC 3A3C 2000                  		move.w	#$2000,d5
000071E0 3819                       		move.w	(a1)+,d4
000071E2 D845                       		add.w	d5,d4
000071E4 3C84                       		move.w	d4,(a6)
000071E6 3819                       		move.w	(a1)+,d4
000071E8 D845                       		add.w	d5,d4
000071EA 3C84                       		move.w	d4,(a6)
000071EC D087                       		add.l	d7,d0
000071EE 2A80                       		move.l	d0,(a5)
000071F0 3819                       		move.w	(a1)+,d4
000071F2 D845                       		add.w	d5,d4
000071F4 3C84                       		move.w	d4,(a6)
000071F6 3819                       		move.w	(a1)+,d4
000071F8 D845                       		add.w	d5,d4
000071FA 3C84                       		move.w	d4,(a6)
000071FC 4E75                       		rts	
000071FE                            
000071FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071FE                            
000071FE                            
000071FE                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000071FE 43F8 B000                  		lea	($FFFFB000).w,a1
00007202 D86B 0004                  		add.w	4(a3),d4
00007206 DA53                       		add.w	(a3),d5
00007208 3604                       		move.w	d4,d3
0000720A E24B                       		lsr.w	#1,d3
0000720C 0243 0380                  		andi.w	#$380,d3
00007210 E64D                       		lsr.w	#3,d5
00007212 3005                       		move.w	d5,d0
00007214 EA48                       		lsr.w	#5,d0
00007216 0240 007F                  		andi.w	#$7F,d0
0000721A D043                       		add.w	d3,d0
0000721C 76FF                       		moveq	#-1,d3
0000721E 1634 0000                  		move.b	(a4,d0.w),d3
00007222 6700                       		beq.s	locret_6C1E
00007224 5303                       		subq.b	#1,d3
00007226 0243 007F                  		andi.w	#$7F,d3
0000722A EE5B                       		ror.w	#7,d3
0000722C D844                       		add.w	d4,d4
0000722E 0244 01E0                  		andi.w	#$1E0,d4
00007232 0245 001E                  		andi.w	#$1E,d5
00007236 D644                       		add.w	d4,d3
00007238 D645                       		add.w	d5,d3
0000723A 2043                       		movea.l	d3,a0
0000723C 3610                       		move.w	(a0),d3
0000723E 0243 03FF                  		andi.w	#$3FF,d3
00007242 E74B                       		lsl.w	#3,d3
00007244 D2C3                       		adda.w	d3,a1
00007246                            
00007246                            locret_6C1E:
00007246 4E75                       		rts	
00007248                            ; End of function sub_6BD6
00007248                            
00007248                            
00007248                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007248                            
00007248                            
00007248                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007248 D86B 0004                  		add.w	4(a3),d4
0000724C DA53                       		add.w	(a3),d5
0000724E 0244 00F0                  		andi.w	#$F0,d4
00007252 0245 01F0                  		andi.w	#$1F0,d5
00007256 E94C                       		lsl.w	#4,d4
00007258 E44D                       		lsr.w	#2,d5
0000725A D845                       		add.w	d5,d4
0000725C 7003                       		moveq	#3,d0
0000725E 4840                       		swap	d0
00007260 3004                       		move.w	d4,d0
00007262 4E75                       		rts	
00007264                            ; End of function sub_6C20
00007264                            
00007264                            
00007264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007264                            ; not used
00007264                            
00007264                            
00007264                            sub_6C3C:
00007264 D86B 0004                  		add.w	4(a3),d4
00007268 DA53                       		add.w	(a3),d5
0000726A 0244 00F0                  		andi.w	#$F0,d4
0000726E 0245 01F0                  		andi.w	#$1F0,d5
00007272 E94C                       		lsl.w	#4,d4
00007274 E44D                       		lsr.w	#2,d5
00007276 D845                       		add.w	d5,d4
00007278 7002                       		moveq	#2,d0
0000727A 4840                       		swap	d0
0000727C 3004                       		move.w	d4,d0
0000727E 4E75                       		rts	
00007280                            ; End of function sub_6C3C
00007280                            
00007280                            ; ---------------------------------------------------------------------------
00007280                            ; Subroutine to	load tiles as soon as the level	appears
00007280                            ; ---------------------------------------------------------------------------
00007280                            
00007280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007280                            
00007280                            
00007280                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007280 4BF9 00C0 0004             		lea	($C00004).l,a5
00007286 4DF9 00C0 0000             		lea	($C00000).l,a6
0000728C 47F8 F700                  		lea	($FFFFF700).w,a3
00007290 49F8 A400                  		lea	($FFFFA400).w,a4
00007294 343C 4000                  		move.w	#$4000,d2
00007298 6100                       		bsr.s	LoadTilesFromStart2
0000729A 47F8 F708                  		lea	($FFFFF708).w,a3
0000729E 49F8 A440                  		lea	($FFFFA440).w,a4
000072A2 343C 6000                  		move.w	#$6000,d2
000072A6                            ; End of function LoadTilesFromStart
000072A6                            
000072A6                            
000072A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072A6                            
000072A6                            
000072A6                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000072A6 78F0                       		moveq	#-$10,d4
000072A8 7C0F                       		moveq	#$F,d6
000072AA                            
000072AA                            loc_6C82:
000072AA 48E7 0E00                  		movem.l	d4-d6,-(sp)
000072AE 7A00                       		moveq	#0,d5
000072B0 3204                       		move.w	d4,d1
000072B2 6100 FF94                  		bsr.w	sub_6C20
000072B6 3801                       		move.w	d1,d4
000072B8 7A00                       		moveq	#0,d5
000072BA 7C1F                       		moveq	#$1F,d6
000072BC 6100 FE44                  		bsr.w	sub_6ADA
000072C0 4CDF 0070                  		movem.l	(sp)+,d4-d6
000072C4 0644 0010                  		addi.w	#$10,d4
000072C8 51CE FFE0                  		dbf	d6,loc_6C82
000072CC 4E75                       		rts	
000072CE                            ; End of function LoadTilesFromStart2
000072CE                            
000072CE                            ; ---------------------------------------------------------------------------
000072CE                            ; Main Load Block loading subroutine
000072CE                            ; ---------------------------------------------------------------------------
000072CE                            
000072CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072CE                            
000072CE                            
000072CE                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000072CE 7000                       		moveq	#0,d0
000072D0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000072D4 E948                       		lsl.w	#4,d0
000072D6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000072DC 45F2 0000                  		lea	(a2,d0.w),a2
000072E0 2F0A                       		move.l	a2,-(sp)
000072E2 588A                       		addq.l	#4,a2
000072E4 205A                       		movea.l	(a2)+,a0
000072E6 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000072EA 303C 0000                  		move.w	#0,d0
000072EE 6100 A448                  		bsr.w	EniDec
000072F2 205A                       		movea.l	(a2)+,a0
000072F4 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000072FA 6100 A5BA                  		bsr.w	KosDec
000072FE 6100 0000                  		bsr.w	LevelLayoutLoad
00007302 301A                       		move.w	(a2)+,d0
00007304 3012                       		move.w	(a2),d0
00007306 0240 00FF                  		andi.w	#$FF,d0
0000730A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007310 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007312 700C                       		moveq	#$C,d0		; use SB3 pallet
00007314                            
00007314                            MLB_ChkSBZPal:
00007314 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000731A 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
0000731C 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007322 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007324                            
00007324                            MLB_UsePal0E:
00007324 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007326                            
00007326                            MLB_NormalPal:
00007326 6100 ADC2                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000732A 245F                       		movea.l	(sp)+,a2
0000732C 584A                       		addq.w	#4,a2
0000732E 7000                       		moveq	#0,d0
00007330 1012                       		move.b	(a2),d0
00007332 6700                       		beq.s	locret_6D10
00007334 6100 A264                  		bsr.w	LoadPLC		; load pattern load cues
00007338                            
00007338                            locret_6D10:
00007338 4E75                       		rts	
0000733A                            ; End of function MainLoadBlockLoad
0000733A                            
0000733A                            ; ---------------------------------------------------------------------------
0000733A                            ; Level	layout loading subroutine
0000733A                            ; ---------------------------------------------------------------------------
0000733A                            
0000733A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000733A                            
0000733A                            
0000733A                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000733A 47F8 A400                  		lea	($FFFFA400).w,a3
0000733E 323C 01FF                  		move.w	#$1FF,d1
00007342 7000                       		moveq	#0,d0
00007344                            
00007344                            LevLoad_ClrRam:
00007344 26C0                       		move.l	d0,(a3)+
00007346 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000734A                            
0000734A 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
0000734E 7200                       		moveq	#0,d1
00007350 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007354 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007358 7202                       		moveq	#2,d1
0000735A                            ; End of function LevelLayoutLoad
0000735A                            
0000735A                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000735A                            
0000735A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000735A                            
0000735A                            
0000735A                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000735A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000735E ED08                       		lsl.b	#6,d0
00007360 EA48                       		lsr.w	#5,d0
00007362 3400                       		move.w	d0,d2
00007364 D040                       		add.w	d0,d0
00007366 D042                       		add.w	d2,d0
00007368 D041                       		add.w	d1,d0
0000736A 43F9 0000 0000             		lea	(Level_Index).l,a1
00007370 3031 0000                  		move.w	(a1,d0.w),d0
00007374 43F1 0000                  		lea	(a1,d0.w),a1
00007378 7200                       		moveq	#0,d1
0000737A 3401                       		move.w	d1,d2
0000737C 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000737E 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007380                            
00007380                            LevLoad_NumRows:
00007380 3001                       		move.w	d1,d0
00007382 204B                       		movea.l	a3,a0
00007384                            
00007384                            LevLoad_Row:
00007384 10D9                       		move.b	(a1)+,(a0)+
00007386 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
0000738A 47EB 0080                  		lea	$80(a3),a3	; do next row
0000738E 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007392 4E75                       		rts	
00007394                            ; End of function LevelLayoutLoad2
00007394                            
00007394                            ; ---------------------------------------------------------------------------
00007394                            ; Dynamic screen resize	loading	subroutine
00007394                            ; ---------------------------------------------------------------------------
00007394                            
00007394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007394                            
00007394                            
00007394                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007394 7000                       		moveq	#0,d0
00007396 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000739A D040                       		add.w	d0,d0
0000739C 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000073A0 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000073A4 7202                       		moveq	#2,d1
000073A6 3038 F726                  		move.w	($FFFFF726).w,d0
000073AA 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000073AE 6700                       		beq.s	locret_6DAA
000073B0 6400                       		bcc.s	loc_6DAC
000073B2 4441                       		neg.w	d1
000073B4 3038 F704                  		move.w	($FFFFF704).w,d0
000073B8 B078 F726                  		cmp.w	($FFFFF726).w,d0
000073BC 6300                       		bls.s	loc_6DA0
000073BE 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000073C2 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000073C8                            
000073C8                            loc_6DA0:
000073C8 D378 F72E                  		add.w	d1,($FFFFF72E).w
000073CC 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073D2                            
000073D2                            locret_6DAA:
000073D2 4E75                       		rts	
000073D4                            ; ===========================================================================
000073D4                            
000073D4                            loc_6DAC:				; XREF: DynScrResizeLoad
000073D4 3038 F704                  		move.w	($FFFFF704).w,d0
000073D8 5040                       		addq.w	#8,d0
000073DA B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000073DE 6500                       		bcs.s	loc_6DC4
000073E0 0838 0001 D022             		btst	#1,($FFFFD022).w
000073E6 6700                       		beq.s	loc_6DC4
000073E8 D241                       		add.w	d1,d1
000073EA D241                       		add.w	d1,d1
000073EC                            
000073EC                            loc_6DC4:
000073EC D378 F72E                  		add.w	d1,($FFFFF72E).w
000073F0 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073F6 4E75                       		rts	
000073F8                            ; End of function DynScrResizeLoad
000073F8                            
000073F8                            ; ===========================================================================
000073F8                            ; ---------------------------------------------------------------------------
000073F8                            ; Offset index for dynamic screen resizing
000073F8                            ; ---------------------------------------------------------------------------
000073F8 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000073FC 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007400 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007404 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
00007408                            ; ===========================================================================
00007408                            ; ---------------------------------------------------------------------------
00007408                            ; Green	Hill Zone dynamic screen resizing
00007408                            ; ---------------------------------------------------------------------------
00007408                            
00007408                            Resize_GHZ:				; XREF: Resize_Index
00007408 7000                       		moveq	#0,d0
0000740A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000740E D040                       		add.w	d0,d0
00007410 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007414 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007418                            ; ===========================================================================
00007418 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000741A 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000741C 0000                       		dc.w Resize_GHZ3-Resize_GHZx
0000741E                            ; ===========================================================================
0000741E                            
0000741E                            Resize_GHZ1:
0000741E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007424 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000742A 6500                       		bcs.s	locret_6E08	; if not, branch
0000742C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007432                            
00007432                            locret_6E08:
00007432 4E75                       		rts	
00007434                            ; ===========================================================================
00007434                            
00007434                            Resize_GHZ2:
00007434 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000743A 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007440 6500                       		bcs.s	locret_6E3A
00007442 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007448 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
0000744E 6500                       		bcs.s	locret_6E3A
00007450 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007456 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
0000745C 6500                       		bcs.s	locret_6E3A
0000745E 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
00007464 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
0000746A 6500                       		bcs.s	locret_6E3A
0000746C 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
00007472                            		
00007472                            locret_6E3A:
00007472 4E75                       		rts	
00007474                            ; ===========================================================================
00007474                            
00007474                            Resize_GHZ3:
00007474 7000                       		moveq	#0,d0
00007476 1038 F742                  		move.b	($FFFFF742).w,d0
0000747A 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000747E 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007482                            ; ===========================================================================
00007482 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007484 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007486 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007488                            ; ===========================================================================
00007488                            
00007488                            Resize_GHZ3main:
00007488 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000748E 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007494 6500                       		bcs.s	locret_6E96
00007496 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000749C 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000074A2 6500                       		bcs.s	locret_6E96
000074A4 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000074AA 6500                       		bcs.s	loc_6E98
000074AC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000074B2 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000074B8 6400                       		bcc.s	loc_6E8E
000074BA 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000074C0 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000074C6                            
000074C6                            loc_6E8E:
000074C6 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074CC 6400                       		bcc.s	loc_6E98
000074CE                            
000074CE                            locret_6E96:
000074CE 4E75                       		rts	
000074D0                            ; ===========================================================================
000074D0                            
000074D0                            loc_6E98:
000074D0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000074D6 5438 F742                  		addq.b	#2,($FFFFF742).w
000074DA 4E75                       		rts	
000074DC                            ; ===========================================================================
000074DC                            
000074DC                            Resize_GHZ3boss:
000074DC 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000074E2 6400                       		bcc.s	loc_6EB0
000074E4 5538 F742                  		subq.b	#2,($FFFFF742).w
000074E8                            
000074E8                            loc_6EB0:
000074E8 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000074EE 6500                       		bcs.s	locret_6EE8
000074F0 6100 0000                  		bsr.w	SingleObjLoad
000074F4 6600                       		bne.s	loc_6ED0
000074F6 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000074FA 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007500 337C 0280 000C             		move.w	#$280,$C(a1)
00007506                            
00007506                            loc_6ED0:
00007506 303C 008C                  		move.w	#$8C,d0
0000750A 6100 9EA4                  		bsr.w	PlaySound	; play boss music
0000750E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007514 5438 F742                  		addq.b	#2,($FFFFF742).w
00007518 7011                       		moveq	#$11,d0
0000751A 6000 A07E                  		bra.w	LoadPLC		; load boss patterns
0000751E                            ; ===========================================================================
0000751E                            
0000751E                            locret_6EE8:
0000751E 4E75                       		rts	
00007520                            ; ===========================================================================
00007520                            
00007520                            Resize_GHZ3end:
00007520 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007526 4E75                       		rts	
00007528                            ; ===========================================================================
00007528                            ; ---------------------------------------------------------------------------
00007528                            ; Labyrinth Zone dynamic screen	resizing
00007528                            ; ---------------------------------------------------------------------------
00007528                            
00007528                            Resize_LZ:				; XREF: Resize_Index
00007528 7000                       		moveq	#0,d0
0000752A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000752E D040                       		add.w	d0,d0
00007530 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007534 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007538                            ; ===========================================================================
00007538 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000753A 0000                       		dc.w Resize_LZ12-Resize_LZx
0000753C 0000                       		dc.w Resize_LZ3-Resize_LZx
0000753E 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007540                            ; ===========================================================================
00007540                            
00007540                            Resize_LZ12:
00007540 4E75                       		rts	
00007542                            ; ===========================================================================
00007542                            
00007542                            Resize_LZ3:
00007542 7000                       		moveq	#0,d0
00007544 1038 F742                  		move.b	($FFFFF742).w,d0
00007548 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
0000754C 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
00007550                            ; ===========================================================================
00007550                            off_6E4A2:	
00007550 0000                       		dc.w Resize_LZ3boss-off_6E4A2
00007552 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007554                            ; ===========================================================================
00007554                            Resize_LZ3boss:
00007554 4A38 F742                  		tst.b	($FFFFF742).w
00007558 6600                       		bne.s	locret_6F62
0000755A 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007560 6500                       		bcs.s	locret_6F62
00007562 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007568 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000756E                            
0000756E 6100 0000                  		bsr.w	SingleObjLoad
00007572 6600                       		bne.s	loc_6F4A
00007574 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007578 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
0000757E 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007584                            loc_6F4A:
00007584 303C 008C                  		move.w	#$8C,d0
00007588 6100 9E26                  		bsr.w	PlaySound	; play boss music
0000758C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007592 5438 F742                  		addq.b	#2,($FFFFF742).w
00007596 7022                       		moveq	#$22,d0
00007598 6000 A000                  		bra.w	LoadPLC		; load boss patterns
0000759C                            ; ===========================================================================
0000759C                            
0000759C                            locret_6F62:
0000759C 4E75                       		rts	
0000759E                            ; ===========================================================================
0000759E                            
0000759E                            Resize_LZ3end:
0000759E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075A4 4E75                       		rts	
000075A6                            ; ===========================================================================
000075A6                            
000075A6                            Resize_SBZ3:
000075A6 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000075AC 6500                       		bcs.s	locret_6F8C
000075AE 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000075B4 6400                       		bcc.s	locret_6F8C	; if not, branch
000075B6 4238 FE30                  		clr.b	($FFFFFE30).w
000075BA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000075C0 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000075C6 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000075CC                            
000075CC                            locret_6F8C:
000075CC 4E75                       		rts	
000075CE                            ; ===========================================================================
000075CE                            ; ---------------------------------------------------------------------------
000075CE                            ; Marble Zone dynamic screen resizing
000075CE                            ; ---------------------------------------------------------------------------
000075CE                            
000075CE                            Resize_MZ:				; XREF: Resize_Index
000075CE 7000                       		moveq	#0,d0
000075D0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075D4 D040                       		add.w	d0,d0
000075D6 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000075DA 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000075DE                            ; ===========================================================================
000075DE 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000075E0 0000                       		dc.w Resize_MZ2-Resize_MZx
000075E2 0000                       		dc.w Resize_MZ3-Resize_MZx
000075E4                            ; ===========================================================================
000075E4                            
000075E4                            Resize_MZ1:
000075E4 7000                       		moveq	#0,d0
000075E6 1038 F742                  		move.b	($FFFFF742).w,d0
000075EA 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000075EE 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000075F2                            ; ===========================================================================
000075F2 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000075F4 0000                       		dc.w loc_6FEA-off_6FB2
000075F6 0000                       		dc.w loc_702E-off_6FB2
000075F8 0000                       		dc.w loc_7050-off_6FB2
000075FA                            ; ===========================================================================
000075FA                            
000075FA                            loc_6FBA:
000075FA 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007600 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007606 6500                       		bcs.s	locret_6FE8
00007608 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000760E 0C78 09A0 F700             		cmpi.w	#$9A0,($FFFFF700).w
00007614 6500                       		bcs.s	locret_6FE8
00007616 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000761C 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007622 6500                       		bcs.s	locret_6FE8
00007624 5438 F742                  		addq.b	#2,($FFFFF742).w
00007628                            
00007628                            locret_6FE8:
00007628 4E75                       		rts	
0000762A                            ; ===========================================================================
0000762A                            
0000762A                            loc_6FEA:
0000762A 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007630 6400                       		bcc.s	loc_6FF8
00007632 5538 F742                  		subq.b	#2,($FFFFF742).w
00007636 4E75                       		rts	
00007638                            ; ===========================================================================
00007638                            
00007638                            loc_6FF8:
00007638 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000763E 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007644 6400                       		bcc.s	locret_702C
00007646 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000764C 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007652 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007658 6400                       		bcc.s	locret_702C
0000765A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007660 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007666 6500                       		bcs.s	locret_702C
00007668 5438 F742                  		addq.b	#2,($FFFFF742).w
0000766C                            
0000766C                            locret_702C:
0000766C 4E75                       		rts	
0000766E                            ; ===========================================================================
0000766E                            
0000766E                            loc_702E:
0000766E 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007674 6400                       		bcc.s	loc_703C
00007676 5538 F742                  		subq.b	#2,($FFFFF742).w
0000767A 4E75                       		rts	
0000767C                            ; ===========================================================================
0000767C                            
0000767C                            loc_703C:
0000767C 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007682 6500                       		bcs.s	locret_704E
00007684 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000768A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000768E                            
0000768E                            locret_704E:
0000768E 4E75                       		rts	
00007690                            ; ===========================================================================
00007690                            
00007690                            loc_7050:
00007690 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007696 6500                       		bcs.s	locret_7072
00007698 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000769E 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000076A4 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000076AA 6500                       		bcs.s	locret_7072
000076AC 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076B2                            
000076B2                            locret_7072:
000076B2 4E75                       		rts	
000076B4                            ; ===========================================================================
000076B4                            
000076B4                            Resize_MZ2:
000076B4 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000076BA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000076C0 6500                       		bcs.s	locret_7088
000076C2 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000076C8                            
000076C8                            locret_7088:
000076C8 4E75                       		rts	
000076CA                            ; ===========================================================================
000076CA                            
000076CA                            Resize_MZ3:
000076CA 7000                       		moveq	#0,d0
000076CC 1038 F742                  		move.b	($FFFFF742).w,d0
000076D0 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000076D4 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000076D8                            ; ===========================================================================
000076D8 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000076DA 0000                       		dc.w Resize_MZ3end-off_7098
000076DC                            ; ===========================================================================
000076DC                            
000076DC                            Resize_MZ3boss:
000076DC 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000076E2 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000076E8 6500                       		bcs.s	locret_70E8
000076EA 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076F0 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000076F6 6500                       		bcs.s	locret_70E8
000076F8 6100 0000                  		bsr.w	SingleObjLoad
000076FC 6600                       		bne.s	loc_70D0
000076FE 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007702 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007708 337C 022C 000C             		move.w	#$22C,$C(a1)
0000770E                            
0000770E                            loc_70D0:
0000770E 303C 008C                  		move.w	#$8C,d0
00007712 6100 9C9C                  		bsr.w	PlaySound	; play boss music
00007716 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000771C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007720 7011                       		moveq	#$11,d0
00007722 6000 9E76                  		bra.w	LoadPLC		; load boss patterns
00007726                            ; ===========================================================================
00007726                            
00007726                            locret_70E8:
00007726 4E75                       		rts	
00007728                            ; ===========================================================================
00007728                            
00007728                            Resize_MZ3end:
00007728 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000772E 4E75                       		rts	
00007730                            ; ===========================================================================
00007730                            ; ---------------------------------------------------------------------------
00007730                            ; Star Light Zone dynamic screen resizing
00007730                            ; ---------------------------------------------------------------------------
00007730                            
00007730                            Resize_SLZ:				; XREF: Resize_Index
00007730 7000                       		moveq	#0,d0
00007732 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007736 D040                       		add.w	d0,d0
00007738 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000773C 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007740                            ; ===========================================================================
00007740 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007742 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007744 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007746                            ; ===========================================================================
00007746                            
00007746                            Resize_SLZ1:
00007746 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
0000774C 4E75                       		rts	
0000774E                            
0000774E                            Resize_SLZ2:
0000774E 4E75                       		rts	
00007750                            ; ===========================================================================
00007750                            
00007750                            Resize_SLZ3:
00007750 7000                       		moveq	#0,d0
00007752 1038 F742                  		move.b	($FFFFF742).w,d0
00007756 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000775A 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000775E                            ; ===========================================================================
0000775E 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007760 0000                       		dc.w Resize_SLZ3boss-off_7118
00007762 0000                       		dc.w Resize_SLZ3end-off_7118
00007764                            ; ===========================================================================
00007764                            
00007764                            Resize_SLZ3main:
00007764 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000776A 6500                       		bcs.s	locret_7130
0000776C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007772 5438 F742                  		addq.b	#2,($FFFFF742).w
00007776                            
00007776                            locret_7130:
00007776 4E75                       		rts	
00007778                            ; ===========================================================================
00007778                            
00007778                            Resize_SLZ3boss:
00007778 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000777E 6500                       		bcs.s	locret_715C
00007780 6100 0000                  		bsr.w	SingleObjLoad
00007784 6600                       		bne.s	loc_7144
00007786 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000778A                            
0000778A                            loc_7144:
0000778A 303C 008C                  		move.w	#$8C,d0
0000778E 6100 9C20                  		bsr.w	PlaySound	; play boss music
00007792 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007798 5438 F742                  		addq.b	#2,($FFFFF742).w
0000779C 7011                       		moveq	#$11,d0
0000779E 6000 9DFA                  		bra.w	LoadPLC		; load boss patterns
000077A2                            ; ===========================================================================
000077A2                            
000077A2                            locret_715C:
000077A2 4E75                       		rts	
000077A4                            ; ===========================================================================
000077A4                            
000077A4                            Resize_SLZ3end:
000077A4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077AA 4E75                       		rts
000077AC 4E75                       		rts
000077AE                            ; ===========================================================================
000077AE                            ; ---------------------------------------------------------------------------
000077AE                            ; Spring Yard Zone dynamic screen resizing
000077AE                            ; ---------------------------------------------------------------------------
000077AE                            
000077AE                            Resize_SYZ:				; XREF: Resize_Index
000077AE 7000                       		moveq	#0,d0
000077B0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000077B4 D040                       		add.w	d0,d0
000077B6 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000077BA 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000077BE                            ; ===========================================================================
000077BE 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000077C0 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000077C2 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000077C4                            ; ===========================================================================
000077C4                            
000077C4                            Resize_SYZ1:
000077C4 4E75                       		rts	
000077C6                            ; ===========================================================================
000077C6                            
000077C6                            Resize_SYZ2:
000077C6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077CC 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000077D2 6500                       		bcs.s	locret_71A2
000077D4 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000077DA 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000077E0 6500                       		bcs.s	locret_71A2
000077E2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077E8                            
000077E8                            locret_71A2:
000077E8 4E75                       		rts	
000077EA                            ; ===========================================================================
000077EA                            
000077EA                            Resize_SYZ3:
000077EA 7000                       		moveq	#0,d0
000077EC 1038 F742                  		move.b	($FFFFF742).w,d0
000077F0 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000077F4 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000077F8                            ; ===========================================================================
000077F8 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000077FA 0000                       		dc.w Resize_SYZ3boss-off_71B2
000077FC 0000                       		dc.w Resize_SYZ3end-off_71B2
000077FE                            ; ===========================================================================
000077FE                            
000077FE                            Resize_SYZ3main:
000077FE 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007804 6500                       		bcs.s	locret_71CE
00007806 6100 0000                  		bsr.w	SingleObjLoad
0000780A 6600                       		bne.s	locret_71CE
0000780C 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007810 5438 F742                  		addq.b	#2,($FFFFF742).w
00007814                            
00007814                            locret_71CE:
00007814 4E75                       		rts	
00007816                            ; ===========================================================================
00007816                            
00007816                            Resize_SYZ3boss:
00007816 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000781C 6500                       		bcs.s	locret_7200
0000781E 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007824 6100 0000                  		bsr.w	SingleObjLoad
00007828 6600                       		bne.s	loc_71EC
0000782A 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000782E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007832                            
00007832                            loc_71EC:
00007832 303C 008C                  		move.w	#$8C,d0
00007836 6100 9B78                  		bsr.w	PlaySound	; play boss music
0000783A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007840 7011                       		moveq	#$11,d0
00007842 6000 9D56                  		bra.w	LoadPLC		; load boss patterns
00007846                            ; ===========================================================================
00007846                            
00007846                            locret_7200:
00007846 4E75                       		rts	
00007848                            ; ===========================================================================
00007848                            
00007848                            Resize_SYZ3end:
00007848 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000784E 4E75                       		rts	
00007850                            ; ===========================================================================
00007850                            ; ---------------------------------------------------------------------------
00007850                            ; Scrap	Brain Zone dynamic screen resizing
00007850                            ; ---------------------------------------------------------------------------
00007850                            
00007850                            Resize_SBZ:				; XREF: Resize_Index
00007850 7000                       		moveq	#0,d0
00007852 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007856 D040                       		add.w	d0,d0
00007858 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000785C 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007860                            ; ===========================================================================
00007860 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007862 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007864 0000                       		dc.w Resize_FZ-Resize_SBZx
00007866                            ; ===========================================================================
00007866                            
00007866                            Resize_SBZ1:
00007866 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000786C 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007872 6500                       		bcs.s	locret_7242
00007874 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000787A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007880 6500                       		bcs.s	locret_7242
00007882 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007888                            
00007888                            locret_7242:
00007888 4E75                       		rts	
0000788A                            ; ===========================================================================
0000788A                            
0000788A                            Resize_SBZ2:
0000788A 7000                       		moveq	#0,d0
0000788C 1038 F742                  		move.b	($FFFFF742).w,d0
00007890 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007894 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007898                            ; ===========================================================================
00007898 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000789A 0000                       		dc.w Resize_SBZ2boss-off_7252
0000789C 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000789E 0000                       		dc.w Resize_SBZ2end-off_7252
000078A0                            ; ===========================================================================
000078A0                            
000078A0                            Resize_SBZ2main:
000078A0 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000078A6 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000078AC 6500                       		bcs.s	locret_727A
000078AE 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000078B4 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000078BA 6500                       		bcs.s	locret_727A
000078BC 5438 F742                  		addq.b	#2,($FFFFF742).w
000078C0                            
000078C0                            locret_727A:
000078C0 4E75                       		rts	
000078C2                            ; ===========================================================================
000078C2                            
000078C2                            Resize_SBZ2boss:
000078C2 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000078C8 6500                       		bcs.s	locret_7298
000078CA 6100 0000                  		bsr.w	SingleObjLoad
000078CE 6600                       		bne.s	locret_7298
000078D0 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000078D4 5438 F742                  		addq.b	#2,($FFFFF742).w
000078D8 701E                       		moveq	#$1E,d0
000078DA 6000 9CBE                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000078DE                            ; ===========================================================================
000078DE                            
000078DE                            locret_7298:
000078DE 4E75                       		rts	
000078E0                            ; ===========================================================================
000078E0                            
000078E0                            Resize_SBZ2boss2:
000078E0 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000078E6 6500                       		bcs.s	loc_72B6
000078E8 6100 0000                  		bsr.w	SingleObjLoad
000078EC 6600                       		bne.s	loc_72B0
000078EE 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000078F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000078F6                            
000078F6                            loc_72B0:
000078F6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078FC                            
000078FC                            loc_72B6:
000078FC 6000                       		bra.s	loc_72C2
000078FE                            ; ===========================================================================
000078FE                            
000078FE                            Resize_SBZ2end:
000078FE 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007904 6500                       		bcs.s	loc_72C2
00007906 4E75                       		rts	
00007908                            ; ===========================================================================
00007908                            
00007908                            loc_72C2:
00007908 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000790E 4E75                       		rts	
00007910                            ; ===========================================================================
00007910                            
00007910                            Resize_FZ:
00007910 7000                       		moveq	#0,d0
00007912 1038 F742                  		move.b	($FFFFF742).w,d0
00007916 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000791A 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000791E                            ; ===========================================================================
0000791E 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007922 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007926 0000                       		dc.w Resize_FZend2-off_72D8
00007928                            ; ===========================================================================
00007928                            
00007928                            Resize_FZmain:
00007928 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000792E 6500                       		bcs.s	loc_72F4
00007930 5438 F742                  		addq.b	#2,($FFFFF742).w
00007934 701F                       		moveq	#$1F,d0
00007936 6100 9C62                  		bsr.w	LoadPLC		; load FZ boss patterns
0000793A                            
0000793A                            loc_72F4:
0000793A 60CC                       		bra.s	loc_72C2
0000793C                            ; ===========================================================================
0000793C                            
0000793C                            Resize_FZboss:
0000793C 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007942 6500                       		bcs.s	loc_7312
00007944 6100 0000                  		bsr.w	SingleObjLoad
00007948 6600                       		bne.s	loc_7312
0000794A 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000794E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007952 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007958                            
00007958                            loc_7312:
00007958 60AE                       		bra.s	loc_72C2
0000795A                            ; ===========================================================================
0000795A                            
0000795A                            Resize_FZend:
0000795A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007960 6500                       		bcs.s	loc_7320
00007962 5438 F742                  		addq.b	#2,($FFFFF742).w
00007966                            
00007966                            loc_7320:
00007966 60A0                       		bra.s	loc_72C2
00007968                            ; ===========================================================================
00007968                            
00007968                            locret_7322:
00007968 4E75                       		rts	
0000796A                            ; ===========================================================================
0000796A                            
0000796A                            Resize_FZend2:
0000796A 609C                       		bra.s	loc_72C2
0000796C                            ; ===========================================================================
0000796C                            ; ---------------------------------------------------------------------------
0000796C                            ; Ending sequence dynamic screen resizing (empty)
0000796C                            ; ---------------------------------------------------------------------------
0000796C                            
0000796C                            Resize_Ending:				; XREF: Resize_Index
0000796C 4E75                       		rts	
0000796E                            ; ===========================================================================
0000796E                            ; ---------------------------------------------------------------------------
0000796E                            ; Object 11 - GHZ bridge
0000796E                            ; ---------------------------------------------------------------------------
0000796E                            
0000796E                            Obj11:					; XREF: Obj_Index
0000796E 7000                       		moveq	#0,d0
00007970 1028 0024                  		move.b	$24(a0),d0
00007974 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007978 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000797C                            ; ===========================================================================
0000797C 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007980 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007984 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007988                            ; ===========================================================================
00007988                            
00007988                            Obj11_Main:				; XREF: Obj11_Index
00007988 5428 0024                  		addq.b	#2,$24(a0)
0000798C 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007994 317C 438E 0002             		move.w	#$438E,2(a0)
0000799A 117C 0004 0001             		move.b	#4,1(a0)
000079A0 117C 0003 0018             		move.b	#3,$18(a0)
000079A6 117C 0080 0019             		move.b	#$80,$19(a0)
000079AC 3428 000C                  		move.w	$C(a0),d2
000079B0 3628 0008                  		move.w	8(a0),d3
000079B4 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000079B6 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000079BA 7200                       		moveq	#0,d1
000079BC 1212                       		move.b	(a2),d1		; copy a2 to d1
000079BE 14FC 0000                  		move.b	#0,(a2)+
000079C2 3001                       		move.w	d1,d0
000079C4 E248                       		lsr.w	#1,d0
000079C6 E948                       		lsl.w	#4,d0
000079C8 9640                       		sub.w	d0,d3
000079CA 5501                       		subq.b	#2,d1
000079CC 6500                       		bcs.s	Obj11_Action
000079CE                            
000079CE                            Obj11_MakeBdg:
000079CE 6100 0000                  		bsr.w	SingleObjLoad
000079D2 6600                       		bne.s	Obj11_Action
000079D4 5228 0028                  		addq.b	#1,$28(a0)
000079D8 B668 0008                  		cmp.w	8(a0),d3
000079DC 6600                       		bne.s	loc_73B8
000079DE 0643 0010                  		addi.w	#$10,d3
000079E2 3142 000C                  		move.w	d2,$C(a0)
000079E6 3142 003C                  		move.w	d2,$3C(a0)
000079EA 3A08                       		move.w	a0,d5
000079EC 0445 D000                  		subi.w	#-$3000,d5
000079F0 EC4D                       		lsr.w	#6,d5
000079F2 0245 007F                  		andi.w	#$7F,d5
000079F6 14C5                       		move.b	d5,(a2)+
000079F8 5228 0028                  		addq.b	#1,$28(a0)
000079FC                            
000079FC                            loc_73B8:				; XREF: ROM:00007398j
000079FC 3A09                       		move.w	a1,d5
000079FE 0445 D000                  		subi.w	#-$3000,d5
00007A02 EC4D                       		lsr.w	#6,d5
00007A04 0245 007F                  		andi.w	#$7F,d5
00007A08 14C5                       		move.b	d5,(a2)+
00007A0A 137C 000A 0024             		move.b	#$A,$24(a1)
00007A10 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007A12 3342 000C                  		move.w	d2,$C(a1)
00007A16 3342 003C                  		move.w	d2,$3C(a1)
00007A1A 3343 0008                  		move.w	d3,8(a1)
00007A1E 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007A26 337C 438E 0002             		move.w	#$438E,2(a1)
00007A2C 137C 0004 0001             		move.b	#4,1(a1)
00007A32 137C 0003 0018             		move.b	#3,$18(a1)
00007A38 137C 0008 0019             		move.b	#8,$19(a1)
00007A3E 0643 0010                  		addi.w	#$10,d3
00007A42 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007A46                            
00007A46                            Obj11_Action:				; XREF: Obj11_Index
00007A46 6100                       		bsr.s	Obj11_Solid
00007A48 4A28 003E                  		tst.b	$3E(a0)
00007A4C 6700                       		beq.s	Obj11_Display
00007A4E 5928 003E                  		subq.b	#4,$3E(a0)
00007A52 6100 0000                  		bsr.w	Obj11_Bend
00007A56                            
00007A56                            Obj11_Display:
00007A56 6100 0000                  		bsr.w	DisplaySprite
00007A5A 6000 0000                  		bra.w	Obj11_ChkDel
00007A5E                            
00007A5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A5E                            
00007A5E                            
00007A5E                            Obj11_Solid:				; XREF: Obj11_Action
00007A5E 7200                       		moveq	#0,d1
00007A60 1228 0028                  		move.b	$28(a0),d1
00007A64 E749                       		lsl.w	#3,d1
00007A66 3401                       		move.w	d1,d2
00007A68 5041                       		addq.w	#8,d1
00007A6A D442                       		add.w	d2,d2
00007A6C 43F8 D000                  		lea	($FFFFD000).w,a1
00007A70 4A69 0012                  		tst.w	$12(a1)
00007A74 6B00 0000                  		bmi.w	locret_751E
00007A78 3029 0008                  		move.w	8(a1),d0
00007A7C 9068 0008                  		sub.w	8(a0),d0
00007A80 D041                       		add.w	d1,d0
00007A82 6B00 0000                  		bmi.w	locret_751E
00007A86 B042                       		cmp.w	d2,d0
00007A88 6400 0000                  		bcc.w	locret_751E
00007A8C 6000                       		bra.s	Platform2
00007A8E                            ; End of function Obj11_Solid
00007A8E                            
00007A8E                            ; ---------------------------------------------------------------------------
00007A8E                            ; Platform subroutine
00007A8E                            ; ---------------------------------------------------------------------------
00007A8E                            
00007A8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A8E                            
00007A8E                            
00007A8E                            PlatformObject:
00007A8E 43F8 D000                  		lea	($FFFFD000).w,a1
00007A92 4A69 0012                  		tst.w	$12(a1)
00007A96 6B00 0000                  		bmi.w	locret_751E
00007A9A 3029 0008                  		move.w	8(a1),d0
00007A9E 9068 0008                  		sub.w	8(a0),d0
00007AA2 D041                       		add.w	d1,d0
00007AA4 6B00 0000                  		bmi.w	locret_751E
00007AA8 D241                       		add.w	d1,d1
00007AAA B041                       		cmp.w	d1,d0
00007AAC 6400 0000                  		bcc.w	locret_751E
00007AB0                            
00007AB0                            Platform2:
00007AB0 3028 000C                  		move.w	$C(a0),d0
00007AB4 5140                       		subq.w	#8,d0
00007AB6                            
00007AB6                            Platform3:
00007AB6 3429 000C                  		move.w	$C(a1),d2
00007ABA 1229 0016                  		move.b	$16(a1),d1
00007ABE 4881                       		ext.w	d1
00007AC0 D242                       		add.w	d2,d1
00007AC2 5841                       		addq.w	#4,d1
00007AC4 9041                       		sub.w	d1,d0
00007AC6 6200 0000                  		bhi.w	locret_751E
00007ACA 0C40 FFF0                  		cmpi.w	#-$10,d0
00007ACE 6500 0000                  		bcs.w	locret_751E
00007AD2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007AD6 6B00 0000                  		bmi.w	locret_751E
00007ADA 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007AE0 6400 0000                  		bcc.w	locret_751E
00007AE4 D440                       		add.w	d0,d2
00007AE6 5642                       		addq.w	#3,d2
00007AE8 3342 000C                  		move.w	d2,$C(a1)
00007AEC 5428 0024                  		addq.b	#2,$24(a0)
00007AF0                            
00007AF0                            loc_74AE:
00007AF0 0829 0003 0022             		btst	#3,$22(a1)
00007AF6 6700                       		beq.s	loc_74DC
00007AF8 7000                       		moveq	#0,d0
00007AFA 1029 003D                  		move.b	$3D(a1),d0
00007AFE ED48                       		lsl.w	#6,d0
00007B00 0680 00FF D000             		addi.l	#$FFD000,d0
00007B06 2440                       		movea.l	d0,a2
00007B08 08AA 0003 0022             		bclr	#3,$22(a2)
00007B0E 422A 0025                  		clr.b	$25(a2)
00007B12 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007B18 6600                       		bne.s	loc_74DC
00007B1A 552A 0024                  		subq.b	#2,$24(a2)
00007B1E                            
00007B1E                            loc_74DC:
00007B1E 3008                       		move.w	a0,d0
00007B20 0440 D000                  		subi.w	#-$3000,d0
00007B24 EC48                       		lsr.w	#6,d0
00007B26 0240 007F                  		andi.w	#$7F,d0
00007B2A 1340 003D                  		move.b	d0,$3D(a1)
00007B2E 137C 0000 0026             		move.b	#0,$26(a1)
00007B34 337C 0000 0012             		move.w	#0,$12(a1)
00007B3A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007B40 0829 0001 0022             		btst	#1,$22(a1)
00007B46 6700                       		beq.s	loc_7512
00007B48 2F08                       		move.l	a0,-(sp)
00007B4A 2049                       		movea.l	a1,a0
00007B4C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007B52 205F                       		movea.l	(sp)+,a0
00007B54                            
00007B54                            loc_7512:
00007B54 08E9 0003 0022             		bset	#3,$22(a1)
00007B5A 08E8 0003 0022             		bset	#3,$22(a0)
00007B60                            
00007B60                            locret_751E:
00007B60 4E75                       		rts	
00007B62                            ; End of function PlatformObject
00007B62                            
00007B62                            ; ---------------------------------------------------------------------------
00007B62                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007B62                            ; ---------------------------------------------------------------------------
00007B62                            
00007B62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B62                            
00007B62                            
00007B62                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007B62 43F8 D000                  		lea	($FFFFD000).w,a1
00007B66 4A69 0012                  		tst.w	$12(a1)
00007B6A 6B00 FFF4                  		bmi.w	locret_751E
00007B6E 3029 0008                  		move.w	8(a1),d0
00007B72 9068 0008                  		sub.w	8(a0),d0
00007B76 D041                       		add.w	d1,d0
00007B78 6BE6                       		bmi.s	locret_751E
00007B7A D241                       		add.w	d1,d1
00007B7C B041                       		cmp.w	d1,d0
00007B7E 64E0                       		bcc.s	locret_751E
00007B80 0828 0000 0001             		btst	#0,1(a0)
00007B86 6700                       		beq.s	loc_754A
00007B88 4640                       		not.w	d0
00007B8A D041                       		add.w	d1,d0
00007B8C                            
00007B8C                            loc_754A:
00007B8C E248                       		lsr.w	#1,d0
00007B8E 7600                       		moveq	#0,d3
00007B90 1632 0000                  		move.b	(a2,d0.w),d3
00007B94 3028 000C                  		move.w	$C(a0),d0
00007B98 9043                       		sub.w	d3,d0
00007B9A 6000 FF1A                  		bra.w	Platform3
00007B9E                            ; End of function SlopeObject
00007B9E                            
00007B9E                            
00007B9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B9E                            
00007B9E                            
00007B9E                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007B9E 43F8 D000                  		lea	($FFFFD000).w,a1
00007BA2 4A69 0012                  		tst.w	$12(a1)
00007BA6 6B00 FFB8                  		bmi.w	locret_751E
00007BAA 3029 0008                  		move.w	8(a1),d0
00007BAE 9068 0008                  		sub.w	8(a0),d0
00007BB2 D041                       		add.w	d1,d0
00007BB4 6B00 FFAA                  		bmi.w	locret_751E
00007BB8 D241                       		add.w	d1,d1
00007BBA B041                       		cmp.w	d1,d0
00007BBC 6400 FFA2                  		bcc.w	locret_751E
00007BC0 3028 000C                  		move.w	$C(a0),d0
00007BC4 9043                       		sub.w	d3,d0
00007BC6 6000 FEEE                  		bra.w	Platform3
00007BCA                            ; End of function Obj15_Solid
00007BCA                            
00007BCA                            ; ===========================================================================
00007BCA                            
00007BCA                            Obj11_Action2:				; XREF: Obj11_Index
00007BCA 6100                       		bsr.s	Obj11_WalkOff
00007BCC 6100 0000                  		bsr.w	DisplaySprite
00007BD0 6000 0000                  		bra.w	Obj11_ChkDel
00007BD4                            
00007BD4                            ; ---------------------------------------------------------------------------
00007BD4                            ; Subroutine allowing Sonic to walk off a bridge
00007BD4                            ; ---------------------------------------------------------------------------
00007BD4                            
00007BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BD4                            
00007BD4                            
00007BD4                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007BD4 7200                       		moveq	#0,d1
00007BD6 1228 0028                  		move.b	$28(a0),d1
00007BDA E749                       		lsl.w	#3,d1
00007BDC 3401                       		move.w	d1,d2
00007BDE 5041                       		addq.w	#8,d1
00007BE0 6100                       		bsr.s	ExitPlatform2
00007BE2 6400                       		bcc.s	locret_75BE
00007BE4 E848                       		lsr.w	#4,d0
00007BE6 1140 003F                  		move.b	d0,$3F(a0)
00007BEA 1028 003E                  		move.b	$3E(a0),d0
00007BEE 0C00 0040                  		cmpi.b	#$40,d0
00007BF2 6700                       		beq.s	loc_75B6
00007BF4 5828 003E                  		addq.b	#4,$3E(a0)
00007BF8                            
00007BF8                            loc_75B6:
00007BF8 6100 0000                  		bsr.w	Obj11_Bend
00007BFC 6100 0000                  		bsr.w	Obj11_MoveSonic
00007C00                            
00007C00                            locret_75BE:
00007C00 4E75                       		rts	
00007C02                            ; End of function Obj11_WalkOff
00007C02                            
00007C02                            ; ---------------------------------------------------------------------------
00007C02                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007C02                            ; ---------------------------------------------------------------------------
00007C02                            
00007C02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C02                            
00007C02                            
00007C02                            ExitPlatform:
00007C02 3401                       		move.w	d1,d2
00007C04                            
00007C04                            ExitPlatform2:
00007C04 D442                       		add.w	d2,d2
00007C06 43F8 D000                  		lea	($FFFFD000).w,a1
00007C0A 0829 0001 0022             		btst	#1,$22(a1)
00007C10 6600                       		bne.s	loc_75E0
00007C12 3029 0008                  		move.w	8(a1),d0
00007C16 9068 0008                  		sub.w	8(a0),d0
00007C1A D041                       		add.w	d1,d0
00007C1C 6B00                       		bmi.s	loc_75E0
00007C1E B042                       		cmp.w	d2,d0
00007C20 6500                       		bcs.s	locret_75F2
00007C22                            
00007C22                            loc_75E0:
00007C22 08A9 0003 0022             		bclr	#3,$22(a1)
00007C28 117C 0002 0024             		move.b	#2,$24(a0)
00007C2E 08A8 0003 0022             		bclr	#3,$22(a0)
00007C34                            
00007C34                            locret_75F2:
00007C34 4E75                       		rts	
00007C36                            ; End of function ExitPlatform
00007C36                            
00007C36                            
00007C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C36                            
00007C36                            
00007C36                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007C36 7000                       		moveq	#0,d0
00007C38 1028 003F                  		move.b	$3F(a0),d0
00007C3C 1030 0029                  		move.b	$29(a0,d0.w),d0
00007C40 ED48                       		lsl.w	#6,d0
00007C42 0680 00FF D000             		addi.l	#$FFD000,d0
00007C48 2440                       		movea.l	d0,a2
00007C4A 43F8 D000                  		lea	($FFFFD000).w,a1
00007C4E 302A 000C                  		move.w	$C(a2),d0
00007C52 5140                       		subq.w	#8,d0
00007C54 7200                       		moveq	#0,d1
00007C56 1229 0016                  		move.b	$16(a1),d1
00007C5A 9041                       		sub.w	d1,d0
00007C5C 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007C60 4E75                       		rts	
00007C62                            ; End of function Obj11_MoveSonic
00007C62                            
00007C62                            
00007C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C62                            
00007C62                            
00007C62                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007C62 1028 003E                  		move.b	$3E(a0),d0
00007C66 6100 AEF0                  		bsr.w	CalcSine
00007C6A 3800                       		move.w	d0,d4
00007C6C 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007C72 7000                       		moveq	#0,d0
00007C74 1028 0028                  		move.b	$28(a0),d0
00007C78 E948                       		lsl.w	#4,d0
00007C7A 7600                       		moveq	#0,d3
00007C7C 1628 003F                  		move.b	$3F(a0),d3
00007C80 3403                       		move.w	d3,d2
00007C82 D640                       		add.w	d0,d3
00007C84 7A00                       		moveq	#0,d5
00007C86 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007C8C 1A35 3000                  		move.b	(a5,d3.w),d5
00007C90 0243 000F                  		andi.w	#$F,d3
00007C94 E94B                       		lsl.w	#4,d3
00007C96 47F4 3000                  		lea	(a4,d3.w),a3
00007C9A 45E8 0029                  		lea	$29(a0),a2
00007C9E                            
00007C9E                            loc_765C:
00007C9E 7000                       		moveq	#0,d0
00007CA0 101A                       		move.b	(a2)+,d0
00007CA2 ED48                       		lsl.w	#6,d0
00007CA4 0680 00FF D000             		addi.l	#$FFD000,d0
00007CAA 2240                       		movea.l	d0,a1
00007CAC 7000                       		moveq	#0,d0
00007CAE 101B                       		move.b	(a3)+,d0
00007CB0 5240                       		addq.w	#1,d0
00007CB2 C0C5                       		mulu.w	d5,d0
00007CB4 C0C4                       		mulu.w	d4,d0
00007CB6 4840                       		swap	d0
00007CB8 D069 003C                  		add.w	$3C(a1),d0
00007CBC 3340 000C                  		move.w	d0,$C(a1)
00007CC0 51CA FFDC                  		dbf	d2,loc_765C
00007CC4 7000                       		moveq	#0,d0
00007CC6 1028 0028                  		move.b	$28(a0),d0
00007CCA 7600                       		moveq	#0,d3
00007CCC 1628 003F                  		move.b	$3F(a0),d3
00007CD0 5203                       		addq.b	#1,d3
00007CD2 9600                       		sub.b	d0,d3
00007CD4 4403                       		neg.b	d3
00007CD6 6B00                       		bmi.s	locret_76CA
00007CD8 3403                       		move.w	d3,d2
00007CDA E94B                       		lsl.w	#4,d3
00007CDC 47F4 3000                  		lea	(a4,d3.w),a3
00007CE0 D6C2                       		adda.w	d2,a3
00007CE2 5342                       		subq.w	#1,d2
00007CE4 6500                       		bcs.s	locret_76CA
00007CE6                            
00007CE6                            loc_76A4:
00007CE6 7000                       		moveq	#0,d0
00007CE8 101A                       		move.b	(a2)+,d0
00007CEA ED48                       		lsl.w	#6,d0
00007CEC 0680 00FF D000             		addi.l	#$FFD000,d0
00007CF2 2240                       		movea.l	d0,a1
00007CF4 7000                       		moveq	#0,d0
00007CF6 1023                       		move.b	-(a3),d0
00007CF8 5240                       		addq.w	#1,d0
00007CFA C0C5                       		mulu.w	d5,d0
00007CFC C0C4                       		mulu.w	d4,d0
00007CFE 4840                       		swap	d0
00007D00 D069 003C                  		add.w	$3C(a1),d0
00007D04 3340 000C                  		move.w	d0,$C(a1)
00007D08 51CA FFDC                  		dbf	d2,loc_76A4
00007D0C                            
00007D0C                            locret_76CA:
00007D0C 4E75                       		rts	
00007D0E                            ; End of function Obj11_Bend
00007D0E                            
00007D0E                            ; ===========================================================================
00007D0E                            ; ---------------------------------------------------------------------------
00007D0E                            ; GHZ bridge-bending data
00007D0E                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007D0E                            ; ---------------------------------------------------------------------------
00007D0E                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007E1E                            		even
00007E1E                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007F1E                            		even
00007F1E                            
00007F1E                            ; ===========================================================================
00007F1E                            
00007F1E                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007F1E 3028 0008                  		move.w	8(a0),d0
00007F22 0240 FF80                  		andi.w	#$FF80,d0
00007F26 3238 F700                  		move.w	($FFFFF700).w,d1
00007F2A 0441 0080                  		subi.w	#$80,d1
00007F2E 0241 FF80                  		andi.w	#$FF80,d1
00007F32 9041                       		sub.w	d1,d0
00007F34 0C40 0280                  		cmpi.w	#$280,d0
00007F38 6200 0000                  		bhi.w	Obj11_DelAll
00007F3C 4E75                       		rts	
00007F3E                            ; ===========================================================================
00007F3E                            
00007F3E                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007F3E 7400                       		moveq	#0,d2
00007F40 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007F44 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007F46 5302                       		subq.b	#1,d2		; subtract 1
00007F48 6500                       		bcs.s	Obj11_Delete
00007F4A                            
00007F4A                            Obj11_DelLoop:
00007F4A 7000                       		moveq	#0,d0
00007F4C 101A                       		move.b	(a2)+,d0
00007F4E ED48                       		lsl.w	#6,d0
00007F50 0680 00FF D000             		addi.l	#$FFD000,d0
00007F56 2240                       		movea.l	d0,a1
00007F58 B048                       		cmp.w	a0,d0
00007F5A 6700                       		beq.s	loc_791E
00007F5C 6100 0000                  		bsr.w	DeleteObject2
00007F60                            
00007F60                            loc_791E:
00007F60 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007F64                            
00007F64                            Obj11_Delete:
00007F64 6100 0000                  		bsr.w	DeleteObject
00007F68 4E75                       		rts	
00007F6A                            ; ===========================================================================
00007F6A                            
00007F6A                            Obj11_Delete2:				; XREF: Obj11_Index
00007F6A 6100 0000                  		bsr.w	DeleteObject
00007F6E 4E75                       		rts	
00007F70                            ; ===========================================================================
00007F70                            
00007F70                            Obj11_Display2:				; XREF: Obj11_Index
00007F70 6100 0000                  		bsr.w	DisplaySprite
00007F74 4E75                       		rts	
00007F76                            ; ===========================================================================
00007F76                            ; ---------------------------------------------------------------------------
00007F76                            ; Sprite mappings - GHZ	bridge
00007F76                            ; ---------------------------------------------------------------------------
00007F76                            Map_obj11:
00007F76                            	include "_maps\obj11.asm"
00007F76                            ; ---------------------------------------------------------------------------
00007F76                            ; Sprite mappings - GHZ	bridge
00007F76                            ; ---------------------------------------------------------------------------
00007F76 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007F7A 0000                       		dc.w byte_794B-Map_obj11
00007F7C 01                         byte_793A:	dc.b 1
00007F7D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007F82 02                         byte_7940:	dc.b 2
00007F83 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007F88 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007F8D 01                         byte_794B:	dc.b 1
00007F8E FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007F94 00                         		even
00007F94 00                         		even
00007F94                            
00007F94                            ; ===========================================================================
00007F94                            ; ---------------------------------------------------------------------------
00007F94                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007F94                            ;	    - spiked ball on a chain (SBZ)
00007F94                            ; ---------------------------------------------------------------------------
00007F94                            
00007F94                            Obj15:					; XREF: Obj_Index
00007F94 7000                       		moveq	#0,d0
00007F96 1028 0024                  		move.b	$24(a0),d0
00007F9A 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007F9E 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007FA2                            ; ===========================================================================
00007FA2 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007FA6 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007FAA 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007FAE 0000                       		dc.w Obj15_Action-Obj15_Index
00007FB0                            ; ===========================================================================
00007FB0                            
00007FB0                            Obj15_Main:				; XREF: Obj15_Index
00007FB0 5428 0024                  		addq.b	#2,$24(a0)
00007FB4 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007FBC 317C 4380 0002             		move.w	#$4380,2(a0)
00007FC2 117C 0004 0001             		move.b	#4,1(a0)
00007FC8 117C 0003 0018             		move.b	#3,$18(a0)
00007FCE 117C 0018 0019             		move.b	#$18,$19(a0)
00007FD4 117C 0008 0016             		move.b	#8,$16(a0)
00007FDA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007FE0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007FE6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007FEC 6600                       		bne.s	Obj15_NotSLZ
00007FEE 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007FF6 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007FFC 117C 0020 0019             		move.b	#$20,$19(a0)
00008002 117C 0010 0016             		move.b	#$10,$16(a0)
00008008 117C 0099 0020             		move.b	#$99,$20(a0)
0000800E                            
0000800E                            Obj15_NotSLZ:
0000800E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008014 6600                       		bne.s	Obj15_SetLength
00008016 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
0000801E 317C 0391 0002             		move.w	#$391,2(a0)
00008024 117C 0018 0019             		move.b	#$18,$19(a0)
0000802A 117C 0018 0016             		move.b	#$18,$16(a0)
00008030 117C 0086 0020             		move.b	#$86,$20(a0)
00008036 117C 000C 0024             		move.b	#$C,$24(a0)
0000803C                            
0000803C                            Obj15_SetLength:
0000803C 1810                       		move.b	0(a0),d4
0000803E 7200                       		moveq	#0,d1
00008040 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008044 1212                       		move.b	(a2),d1		; move a2 to d1
00008046 3F01                       		move.w	d1,-(sp)
00008048 0241 000F                  		andi.w	#$F,d1
0000804C 14FC 0000                  		move.b	#0,(a2)+
00008050 3601                       		move.w	d1,d3
00008052 E94B                       		lsl.w	#4,d3
00008054 5003                       		addq.b	#8,d3
00008056 1143 003C                  		move.b	d3,$3C(a0)
0000805A 5103                       		subq.b	#8,d3
0000805C 4A28 001A                  		tst.b	$1A(a0)
00008060 6700                       		beq.s	Obj15_MakeChain
00008062 5003                       		addq.b	#8,d3
00008064 5341                       		subq.w	#1,d1
00008066                            
00008066                            Obj15_MakeChain:
00008066 6100 0000                  		bsr.w	SingleObjLoad
0000806A 6600                       		bne.s	loc_7A92
0000806C 5228 0028                  		addq.b	#1,$28(a0)
00008070 3A09                       		move.w	a1,d5
00008072 0445 D000                  		subi.w	#-$3000,d5
00008076 EC4D                       		lsr.w	#6,d5
00008078 0245 007F                  		andi.w	#$7F,d5
0000807C 14C5                       		move.b	d5,(a2)+
0000807E 137C 000A 0024             		move.b	#$A,$24(a1)
00008084 1284                       		move.b	d4,0(a1)	; load swinging	object
00008086 2368 0004 0004             		move.l	4(a0),4(a1)
0000808C 3368 0002 0002             		move.w	2(a0),2(a1)
00008092 08A9 0006 0002             		bclr	#6,2(a1)
00008098 137C 0004 0001             		move.b	#4,1(a1)
0000809E 137C 0004 0018             		move.b	#4,$18(a1)
000080A4 137C 0008 0019             		move.b	#8,$19(a1)
000080AA 137C 0001 001A             		move.b	#1,$1A(a1)
000080B0 1343 003C                  		move.b	d3,$3C(a1)
000080B4 0403 0010                  		subi.b	#$10,d3
000080B8 6400                       		bcc.s	loc_7A8E
000080BA 137C 0002 001A             		move.b	#2,$1A(a1)
000080C0 137C 0003 0018             		move.b	#3,$18(a1)
000080C6 08E9 0006 0002             		bset	#6,2(a1)
000080CC                            
000080CC                            loc_7A8E:
000080CC 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
000080D0                            
000080D0                            loc_7A92:
000080D0 3A08                       		move.w	a0,d5
000080D2 0445 D000                  		subi.w	#-$3000,d5
000080D6 EC4D                       		lsr.w	#6,d5
000080D8 0245 007F                  		andi.w	#$7F,d5
000080DC 14C5                       		move.b	d5,(a2)+
000080DE 317C 4080 0026             		move.w	#$4080,$26(a0)
000080E4 317C FE00 003E             		move.w	#-$200,$3E(a0)
000080EA 321F                       		move.w	(sp)+,d1
000080EC 0801 0004                  		btst	#4,d1		; is object type $8X ?
000080F0 6700                       		beq.s	loc_7AD4	; if not, branch
000080F2 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000080FA 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008100 117C 0001 001A             		move.b	#1,$1A(a0)
00008106 117C 0002 0018             		move.b	#2,$18(a0)
0000810C 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008112                            
00008112                            loc_7AD4:
00008112 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008118 6700                       		beq.s	Obj15_Action	; if yes, branch
0000811A                            
0000811A                            Obj15_SetSolid:				; XREF: Obj15_Index
0000811A 7200                       		moveq	#0,d1
0000811C 1228 0019                  		move.b	$19(a0),d1
00008120 7600                       		moveq	#0,d3
00008122 1628 0016                  		move.b	$16(a0),d3
00008126 6100 FA76                  		bsr.w	Obj15_Solid
0000812A                            
0000812A                            Obj15_Action:				; XREF: Obj15_Index
0000812A 6100 0000                  		bsr.w	Obj15_Move
0000812E 6100 0000                  		bsr.w	DisplaySprite
00008132 6000 0000                  		bra.w	Obj15_ChkDel
00008136                            ; ===========================================================================
00008136                            
00008136                            Obj15_Action2:				; XREF: Obj15_Index
00008136 7200                       		moveq	#0,d1
00008138 1228 0019                  		move.b	$19(a0),d1
0000813C 6100 FAC4                  		bsr.w	ExitPlatform
00008140 3F28 0008                  		move.w	8(a0),-(sp)
00008144 6100 0000                  		bsr.w	Obj15_Move
00008148 341F                       		move.w	(sp)+,d2
0000814A 7600                       		moveq	#0,d3
0000814C 1628 0016                  		move.b	$16(a0),d3
00008150 5203                       		addq.b	#1,d3
00008152 6100 0000                  		bsr.w	MvSonicOnPtfm
00008156 6100 0000                  		bsr.w	DisplaySprite
0000815A 6000 0000                  		bra.w	Obj15_ChkDel
0000815E                            
0000815E 4E75                       		rts
00008160                            
00008160                            ; ---------------------------------------------------------------------------
00008160                            ; Subroutine to	change Sonic's position with a platform
00008160                            ; ---------------------------------------------------------------------------
00008160                            
00008160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008160                            
00008160                            
00008160                            MvSonicOnPtfm:
00008160 43F8 D000                  		lea	($FFFFD000).w,a1
00008164 3028 000C                  		move.w	$C(a0),d0
00008168 9043                       		sub.w	d3,d0
0000816A 6000                       		bra.s	MvSonic2
0000816C                            ; End of function MvSonicOnPtfm
0000816C                            
0000816C                            ; ---------------------------------------------------------------------------
0000816C                            ; Subroutine to	change Sonic's position with a platform
0000816C                            ; ---------------------------------------------------------------------------
0000816C                            
0000816C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000816C                            
0000816C                            
0000816C                            MvSonicOnPtfm2:
0000816C 43F8 D000                  		lea	($FFFFD000).w,a1
00008170 3028 000C                  		move.w	$C(a0),d0
00008174 0440 0009                  		subi.w	#9,d0
00008178                            
00008178                            MvSonic2:
00008178 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000817C 6B00                       		bmi.s	locret_7B62
0000817E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008184 6400                       		bcc.s	locret_7B62
00008186 4A78 FE08                  		tst.w	($FFFFFE08).w
0000818A 6600                       		bne.s	locret_7B62
0000818C 7200                       		moveq	#0,d1
0000818E 1229 0016                  		move.b	$16(a1),d1
00008192 9041                       		sub.w	d1,d0
00008194 3340 000C                  		move.w	d0,$C(a1)
00008198 9468 0008                  		sub.w	8(a0),d2
0000819C 9569 0008                  		sub.w	d2,8(a1)
000081A0                            
000081A0                            locret_7B62:
000081A0 4E75                       		rts	
000081A2                            ; End of function MvSonicOnPtfm2
000081A2                            
000081A2                            
000081A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081A2                            
000081A2                            
000081A2                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000081A2 1038 FE78                  		move.b	($FFFFFE78).w,d0
000081A6 323C 0080                  		move.w	#$80,d1
000081AA 0828 0000 0022             		btst	#0,$22(a0)
000081B0 6700                       		beq.s	loc_7B78
000081B2 4440                       		neg.w	d0
000081B4 D041                       		add.w	d1,d0
000081B6                            
000081B6                            loc_7B78:
000081B6 6000                       		bra.s	Obj15_Move2
000081B8                            ; End of function Obj15_Move
000081B8                            
000081B8                            
000081B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081B8                            
000081B8                            
000081B8                            Obj48_Move:				; XREF: Obj48_Display2
000081B8 4A28 003D                  		tst.b	$3D(a0)
000081BC 6600                       		bne.s	loc_7B9C
000081BE 3028 003E                  		move.w	$3E(a0),d0
000081C2 5040                       		addq.w	#8,d0
000081C4 3140 003E                  		move.w	d0,$3E(a0)
000081C8 D168 0026                  		add.w	d0,$26(a0)
000081CC 0C40 0200                  		cmpi.w	#$200,d0
000081D0 6600                       		bne.s	loc_7BB6
000081D2 117C 0001 003D             		move.b	#1,$3D(a0)
000081D8 6000                       		bra.s	loc_7BB6
000081DA                            ; ===========================================================================
000081DA                            
000081DA                            loc_7B9C:
000081DA 3028 003E                  		move.w	$3E(a0),d0
000081DE 5140                       		subq.w	#8,d0
000081E0 3140 003E                  		move.w	d0,$3E(a0)
000081E4 D168 0026                  		add.w	d0,$26(a0)
000081E8 0C40 FE00                  		cmpi.w	#-$200,d0
000081EC 6600                       		bne.s	loc_7BB6
000081EE 117C 0000 003D             		move.b	#0,$3D(a0)
000081F4                            
000081F4                            loc_7BB6:
000081F4 1028 0026                  		move.b	$26(a0),d0
000081F8                            ; End of function Obj48_Move
000081F8                            
000081F8                            
000081F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081F8                            
000081F8                            
000081F8                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000081F8 6100 A95E                  		bsr.w	CalcSine
000081FC 3428 0038                  		move.w	$38(a0),d2
00008200 3628 003A                  		move.w	$3A(a0),d3
00008204 45E8 0028                  		lea	$28(a0),a2
00008208 7C00                       		moveq	#0,d6
0000820A 1C1A                       		move.b	(a2)+,d6
0000820C                            
0000820C                            loc_7BCE:
0000820C 7800                       		moveq	#0,d4
0000820E 181A                       		move.b	(a2)+,d4
00008210 ED4C                       		lsl.w	#6,d4
00008212 0684 00FF D000             		addi.l	#$FFD000,d4
00008218 2244                       		movea.l	d4,a1
0000821A 7800                       		moveq	#0,d4
0000821C 1829 003C                  		move.b	$3C(a1),d4
00008220 2A04                       		move.l	d4,d5
00008222 C9C0                       		muls.w	d0,d4
00008224 E084                       		asr.l	#8,d4
00008226 CBC1                       		muls.w	d1,d5
00008228 E085                       		asr.l	#8,d5
0000822A D842                       		add.w	d2,d4
0000822C DA43                       		add.w	d3,d5
0000822E 3344 000C                  		move.w	d4,$C(a1)
00008232 3345 0008                  		move.w	d5,8(a1)
00008236 51CE FFD4                  		dbf	d6,loc_7BCE
0000823A 4E75                       		rts	
0000823C                            ; End of function Obj15_Move2
0000823C                            
0000823C                            ; ===========================================================================
0000823C                            
0000823C                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000823C 3028 003A                  		move.w	$3A(a0),d0
00008240 0240 FF80                  		andi.w	#$FF80,d0
00008244 3238 F700                  		move.w	($FFFFF700).w,d1
00008248 0441 0080                  		subi.w	#$80,d1
0000824C 0241 FF80                  		andi.w	#$FF80,d1
00008250 9041                       		sub.w	d1,d0
00008252 0C40 0280                  		cmpi.w	#$280,d0
00008256 6200 0000                  		bhi.w	Obj15_DelAll
0000825A 4E75                       		rts	
0000825C                            ; ===========================================================================
0000825C                            
0000825C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000825C 7400                       		moveq	#0,d2
0000825E 45E8 0028                  		lea	$28(a0),a2
00008262 141A                       		move.b	(a2)+,d2
00008264                            
00008264                            Obj15_DelLoop:
00008264 7000                       		moveq	#0,d0
00008266 101A                       		move.b	(a2)+,d0
00008268 ED48                       		lsl.w	#6,d0
0000826A 0680 00FF D000             		addi.l	#$FFD000,d0
00008270 2240                       		movea.l	d0,a1
00008272 6100 0000                  		bsr.w	DeleteObject2
00008276 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000827A 4E75                       		rts	
0000827C                            ; ===========================================================================
0000827C                            
0000827C                            Obj15_Delete:				; XREF: Obj15_Index
0000827C 6100 0000                  		bsr.w	DeleteObject
00008280 4E75                       		rts	
00008282                            ; ===========================================================================
00008282                            
00008282                            Obj15_Display:				; XREF: Obj15_Index
00008282 6000 0000                  		bra.w	DisplaySprite
00008286                            ; ===========================================================================
00008286                            ; ---------------------------------------------------------------------------
00008286                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008286                            ; ---------------------------------------------------------------------------
00008286                            Map_obj15:
00008286                            	include "_maps\obj15ghz.asm"
00008286                            ; ---------------------------------------------------------------------------
00008286                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008286                            ; ---------------------------------------------------------------------------
00008286 0000                       		dc.w byte_7C4E-Map_obj15
00008288 0000                       		dc.w byte_7C59-Map_obj15
0000828A 0000                       		dc.w byte_7C5F-Map_obj15
0000828C 02                         byte_7C4E:	dc.b 2
0000828D F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008292 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008297 01                         byte_7C59:	dc.b 1
00008298 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000829D 01                         byte_7C5F:	dc.b 1
0000829E F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000082A4 00                         		even
000082A4 00                         		even
000082A4                            
000082A4                            ; ---------------------------------------------------------------------------
000082A4                            ; Sprite mappings - SLZ	swinging platforms
000082A4                            ; ---------------------------------------------------------------------------
000082A4                            Map_obj15a:
000082A4                            	include "_maps\obj15slz.asm"
000082A4                            ; ---------------------------------------------------------------------------
000082A4                            ; Sprite mappings - SLZ	swinging platforms
000082A4                            ; ---------------------------------------------------------------------------
000082A4 0000                       		dc.w byte_7C6C-Map_obj15a
000082A6 0000                       		dc.w byte_7C95-Map_obj15a
000082A8 0000                       		dc.w byte_7C9B-Map_obj15a
000082AA 08                         byte_7C6C:	dc.b 8
000082AB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000082B0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000082B5 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000082BA F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000082BF 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000082C4 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000082C9 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000082CE 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000082D3 01                         byte_7C95:	dc.b 1
000082D4 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000082D9 01                         byte_7C9B:	dc.b 1
000082DA F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000082E0 00                         		even
000082E0 00                         		even
000082E0                            
000082E0                            ; ===========================================================================
000082E0                            ; ---------------------------------------------------------------------------
000082E0                            ; Object 17 - helix of spikes on a pole	(GHZ)
000082E0                            ; ---------------------------------------------------------------------------
000082E0                            
000082E0                            Obj17:					; XREF: Obj_Index
000082E0 7000                       		moveq	#0,d0
000082E2 1028 0024                  		move.b	$24(a0),d0
000082E6 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000082EA 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000082EE                            ; ===========================================================================
000082EE 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000082F0 0000                       		dc.w Obj17_Action-Obj17_Index
000082F2 0000                       		dc.w Obj17_Action-Obj17_Index
000082F4 0000                       		dc.w Obj17_Delete-Obj17_Index
000082F6 0000                       		dc.w Obj17_Display-Obj17_Index
000082F8                            ; ===========================================================================
000082F8                            
000082F8                            Obj17_Main:				; XREF: Obj17_Index
000082F8 5428 0024                  		addq.b	#2,$24(a0)
000082FC 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008304 317C 4398 0002             		move.w	#$4398,2(a0)
0000830A 117C 0007 0022             		move.b	#7,$22(a0)
00008310 117C 0004 0001             		move.b	#4,1(a0)
00008316 117C 0003 0018             		move.b	#3,$18(a0)
0000831C 117C 0008 0019             		move.b	#8,$19(a0)
00008322 3428 000C                  		move.w	$C(a0),d2
00008326 3628 0008                  		move.w	8(a0),d3
0000832A 1810                       		move.b	0(a0),d4
0000832C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008330 7200                       		moveq	#0,d1
00008332 1212                       		move.b	(a2),d1		; move a2 to d1
00008334 14FC 0000                  		move.b	#0,(a2)+
00008338 3001                       		move.w	d1,d0
0000833A E248                       		lsr.w	#1,d0
0000833C E948                       		lsl.w	#4,d0
0000833E 9640                       		sub.w	d0,d3
00008340 5501                       		subq.b	#2,d1
00008342 6500                       		bcs.s	Obj17_Action
00008344 7C00                       		moveq	#0,d6
00008346                            
00008346                            Obj17_MakeHelix:
00008346 6100 0000                  		bsr.w	SingleObjLoad
0000834A 6600                       		bne.s	Obj17_Action
0000834C 5228 0028                  		addq.b	#1,$28(a0)
00008350 3A09                       		move.w	a1,d5
00008352 0445 D000                  		subi.w	#$D000,d5
00008356 EC4D                       		lsr.w	#6,d5
00008358 0245 007F                  		andi.w	#$7F,d5
0000835C 14C5                       		move.b	d5,(a2)+
0000835E 137C 0008 0024             		move.b	#8,$24(a1)
00008364 1284                       		move.b	d4,0(a1)
00008366 3342 000C                  		move.w	d2,$C(a1)
0000836A 3343 0008                  		move.w	d3,8(a1)
0000836E 2368 0004 0004             		move.l	4(a0),4(a1)
00008374 337C 4398 0002             		move.w	#$4398,2(a1)
0000837A 137C 0004 0001             		move.b	#4,1(a1)
00008380 137C 0003 0018             		move.b	#3,$18(a1)
00008386 137C 0008 0019             		move.b	#8,$19(a1)
0000838C 1346 003E                  		move.b	d6,$3E(a1)
00008390 5206                       		addq.b	#1,d6
00008392 0206 0007                  		andi.b	#7,d6
00008396 0643 0010                  		addi.w	#$10,d3
0000839A B668 0008                  		cmp.w	8(a0),d3
0000839E 6600                       		bne.s	loc_7D78
000083A0 1146 003E                  		move.b	d6,$3E(a0)
000083A4 5206                       		addq.b	#1,d6
000083A6 0206 0007                  		andi.b	#7,d6
000083AA 0643 0010                  		addi.w	#$10,d3
000083AE 5228 0028                  		addq.b	#1,$28(a0)
000083B2                            
000083B2                            loc_7D78:
000083B2 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000083B6                            
000083B6                            Obj17_Action:				; XREF: Obj17_Index
000083B6 6100 0000                  		bsr.w	Obj17_RotateSpikes
000083BA 6100 0000                  		bsr.w	DisplaySprite
000083BE 6000 0000                  		bra.w	Obj17_ChkDel
000083C2                            
000083C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083C2                            
000083C2                            
000083C2                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000083C2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000083C6 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000083CC D028 003E                  		add.b	$3E(a0),d0
000083D0 0200 0007                  		andi.b	#7,d0
000083D4 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000083D8 6600                       		bne.s	locret_7DA6
000083DA 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000083E0                            
000083E0                            locret_7DA6:
000083E0 4E75                       		rts	
000083E2                            ; End of function Obj17_RotateSpikes
000083E2                            
000083E2                            ; ===========================================================================
000083E2                            
000083E2                            Obj17_ChkDel:				; XREF: Obj17_Action
000083E2 3028 0008                  		move.w	8(a0),d0
000083E6 0240 FF80                  		andi.w	#$FF80,d0
000083EA 3238 F700                  		move.w	($FFFFF700).w,d1
000083EE 0441 0080                  		subi.w	#$80,d1
000083F2 0241 FF80                  		andi.w	#$FF80,d1
000083F6 9041                       		sub.w	d1,d0
000083F8 0C40 0280                  		cmpi.w	#$280,d0
000083FC 6200 0000                  		bhi.w	Obj17_DelAll
00008400 4E75                       		rts	
00008402                            ; ===========================================================================
00008402                            
00008402                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008402 7400                       		moveq	#0,d2
00008404 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008408 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000840A 5502                       		subq.b	#2,d2
0000840C 6500                       		bcs.s	Obj17_Delete
0000840E                            
0000840E                            Obj17_DelLoop:
0000840E 7000                       		moveq	#0,d0
00008410 101A                       		move.b	(a2)+,d0
00008412 ED48                       		lsl.w	#6,d0
00008414 0680 00FF D000             		addi.l	#$FFD000,d0
0000841A 2240                       		movea.l	d0,a1
0000841C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008420 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008424                            
00008424                            Obj17_Delete:				; XREF: Obj17_Index
00008424 6100 0000                  		bsr.w	DeleteObject
00008428 4E75                       		rts	
0000842A                            ; ===========================================================================
0000842A                            
0000842A                            Obj17_Display:				; XREF: Obj17_Index
0000842A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000842E 6000 0000                  		bra.w	DisplaySprite
00008432                            ; ===========================================================================
00008432                            ; ---------------------------------------------------------------------------
00008432                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008432                            ; ---------------------------------------------------------------------------
00008432                            Map_obj17:
00008432                            	include "_maps\obj17.asm"
00008432                            ; ---------------------------------------------------------------------------
00008432                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008432                            ; ---------------------------------------------------------------------------
00008432 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008436 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000843A 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000843E 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008442 01                         byte_7E08:	dc.b 1
00008443 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008448 01                         byte_7E0E:	dc.b 1
00008449 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000844E 01                         byte_7E14:	dc.b 1
0000844F F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008454 01                         byte_7E1A:	dc.b 1
00008455 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000845A 01                         byte_7E20:	dc.b 1
0000845B 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008460 01                         byte_7E26:	dc.b 1
00008461 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008466 01                         byte_7E2C:	dc.b 1
00008467 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000846C                            		even
0000846C                            		even
0000846C                            
0000846C                            ; ===========================================================================
0000846C                            ; ---------------------------------------------------------------------------
0000846C                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000846C                            ; ---------------------------------------------------------------------------
0000846C                            
0000846C                            Obj18:					; XREF: Obj_Index
0000846C 7000                       		moveq	#0,d0
0000846E 1028 0024                  		move.b	$24(a0),d0
00008472 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008476 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000847A                            ; ===========================================================================
0000847A 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000847C 0000                       		dc.w Obj18_Solid-Obj18_Index
0000847E 0000                       		dc.w Obj18_Action2-Obj18_Index
00008480 0000                       		dc.w Obj18_Delete-Obj18_Index
00008482 0000                       		dc.w Obj18_Action-Obj18_Index
00008484                            ; ===========================================================================
00008484                            
00008484                            Obj18_Main:				; XREF: Obj18_Index
00008484 5428 0024                  		addq.b	#2,$24(a0)
00008488 317C 4000 0002             		move.w	#$4000,2(a0)
0000848E 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008496 117C 0020 0019             		move.b	#$20,$19(a0)
0000849C 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000084A2 6600                       		bne.s	Obj18_NotSYZ
000084A4 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000084AC 117C 0020 0019             		move.b	#$20,$19(a0)
000084B2                            
000084B2                            Obj18_NotSYZ:
000084B2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000084B8 6600                       		bne.s	Obj18_NotSLZ
000084BA 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000084C2 117C 0020 0019             		move.b	#$20,$19(a0)
000084C8 317C 4000 0002             		move.w	#$4000,2(a0)
000084CE 117C 0003 0028             		move.b	#3,$28(a0)
000084D4                            
000084D4                            Obj18_NotSLZ:
000084D4 117C 0004 0001             		move.b	#4,1(a0)
000084DA 117C 0004 0018             		move.b	#4,$18(a0)
000084E0 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000084E6 3168 000C 0034             		move.w	$C(a0),$34(a0)
000084EC 3168 0008 0032             		move.w	8(a0),$32(a0)
000084F2 317C 0080 0026             		move.w	#$80,$26(a0)
000084F8 7200                       		moveq	#0,d1
000084FA 1028 0028                  		move.b	$28(a0),d0
000084FE 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008502 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008504 5201                       		addq.b	#1,d1		; use frame #1
00008506 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000850C                            
0000850C                            Obj18_SetFrame:
0000850C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008510                            
00008510                            Obj18_Solid:				; XREF: Obj18_Index
00008510 4A28 0038                  		tst.b	$38(a0)
00008514 6700                       		beq.s	loc_7EE0
00008516 5928 0038                  		subq.b	#4,$38(a0)
0000851A                            
0000851A                            loc_7EE0:
0000851A 7200                       		moveq	#0,d1
0000851C 1228 0019                  		move.b	$19(a0),d1
00008520 6100 F56C                  		bsr.w	PlatformObject
00008524                            
00008524                            Obj18_Action:				; XREF: Obj18_Index
00008524 6100 0000                  		bsr.w	Obj18_Move
00008528 6100 0000                  		bsr.w	Obj18_Nudge
0000852C 6100 0000                  		bsr.w	DisplaySprite
00008530 6000 0000                  		bra.w	Obj18_ChkDel
00008534                            ; ===========================================================================
00008534                            
00008534                            Obj18_Action2:				; XREF: Obj18_Index
00008534 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000853A 6700                       		beq.s	loc_7F06
0000853C 5828 0038                  		addq.b	#4,$38(a0)
00008540                            
00008540                            loc_7F06:
00008540 7200                       		moveq	#0,d1
00008542 1228 0019                  		move.b	$19(a0),d1
00008546 6100 F6BA                  		bsr.w	ExitPlatform
0000854A 3F28 0008                  		move.w	8(a0),-(sp)
0000854E 6100 0000                  		bsr.w	Obj18_Move
00008552 6100 0000                  		bsr.w	Obj18_Nudge
00008556 341F                       		move.w	(sp)+,d2
00008558 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000855C 6100 0000                  		bsr.w	DisplaySprite
00008560 6000 0000                  		bra.w	Obj18_ChkDel
00008564                            
00008564 4E75                       		rts
00008566                            
00008566                            ; ---------------------------------------------------------------------------
00008566                            ; Subroutine to	move platform slightly when you	stand on it
00008566                            ; ---------------------------------------------------------------------------
00008566                            
00008566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008566                            
00008566                            
00008566                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008566 1028 0038                  		move.b	$38(a0),d0
0000856A 6100 A5EC                  		bsr.w	CalcSine
0000856E 323C 0400                  		move.w	#$400,d1
00008572 C1C1                       		muls.w	d1,d0
00008574 4840                       		swap	d0
00008576 D068 002C                  		add.w	$2C(a0),d0
0000857A 3140 000C                  		move.w	d0,$C(a0)
0000857E 4E75                       		rts	
00008580                            ; End of function Obj18_Nudge
00008580                            
00008580                            ; ---------------------------------------------------------------------------
00008580                            ; Subroutine to	move platforms
00008580                            ; ---------------------------------------------------------------------------
00008580                            
00008580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008580                            
00008580                            
00008580                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008580 7000                       		moveq	#0,d0
00008582 1028 0028                  		move.b	$28(a0),d0
00008586 0240 000F                  		andi.w	#$F,d0
0000858A D040                       		add.w	d0,d0
0000858C 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008590 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008594                            ; End of function Obj18_Move
00008594                            
00008594                            ; ===========================================================================
00008594 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008598 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000859C 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000085A0 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000085A4 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000085A8 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000085AC 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000085AE                            ; ===========================================================================
000085AE                            
000085AE                            Obj18_Type00:
000085AE 4E75                       		rts			; platform 00 doesn't move
000085B0                            ; ===========================================================================
000085B0                            
000085B0                            Obj18_Type05:
000085B0 3028 0032                  		move.w	$32(a0),d0
000085B4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085B8 4401                       		neg.b	d1		; reverse platform-motion
000085BA 0601 0040                  		addi.b	#$40,d1
000085BE 6000                       		bra.s	Obj18_01_Move
000085C0                            ; ===========================================================================
000085C0                            
000085C0                            Obj18_Type01:
000085C0 3028 0032                  		move.w	$32(a0),d0
000085C4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085C8 0401 0040                  		subi.b	#$40,d1
000085CC                            
000085CC                            Obj18_01_Move:
000085CC 4881                       		ext.w	d1
000085CE D041                       		add.w	d1,d0
000085D0 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000085D4 6000 0000                  		bra.w	Obj18_ChgMotion
000085D8                            ; ===========================================================================
000085D8                            
000085D8                            Obj18_Type0C:
000085D8 3028 0034                  		move.w	$34(a0),d0
000085DC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085E0 4401                       		neg.b	d1		; reverse platform-motion
000085E2 0601 0030                  		addi.b	#$30,d1
000085E6 6000                       		bra.s	Obj18_02_Move
000085E8                            ; ===========================================================================
000085E8                            
000085E8                            Obj18_Type0B:
000085E8 3028 0034                  		move.w	$34(a0),d0
000085EC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085F0 0401 0030                  		subi.b	#$30,d1
000085F4 6000                       		bra.s	Obj18_02_Move
000085F6                            ; ===========================================================================
000085F6                            
000085F6                            Obj18_Type06:
000085F6 3028 0034                  		move.w	$34(a0),d0
000085FA 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085FE 4401                       		neg.b	d1		; reverse platform-motion
00008600 0601 0040                  		addi.b	#$40,d1
00008604 6000                       		bra.s	Obj18_02_Move
00008606                            ; ===========================================================================
00008606                            
00008606                            Obj18_Type02:
00008606 3028 0034                  		move.w	$34(a0),d0
0000860A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000860E 0401 0040                  		subi.b	#$40,d1
00008612                            
00008612                            Obj18_02_Move:
00008612 4881                       		ext.w	d1
00008614 D041                       		add.w	d1,d0
00008616 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000861A 6000 0000                  		bra.w	Obj18_ChgMotion
0000861E                            ; ===========================================================================
0000861E                            
0000861E                            Obj18_Type03:
0000861E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008622 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008624 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000862A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000862C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008632                            
00008632                            Obj18_03_NoMove:
00008632 4E75                       		rts	
00008634                            ; ===========================================================================
00008634                            
00008634                            Obj18_03_Wait:
00008634 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008638 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000863A 317C 0020 003A             		move.w	#32,$3A(a0)
00008640 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008644 4E75                       		rts	
00008646                            ; ===========================================================================
00008646                            
00008646                            Obj18_Type04:
00008646 4A68 003A                  		tst.w	$3A(a0)
0000864A 6700                       		beq.s	loc_8048
0000864C 5368 003A                  		subq.w	#1,$3A(a0)
00008650 6600                       		bne.s	loc_8048
00008652 0828 0003 0022             		btst	#3,$22(a0)
00008658 6700                       		beq.s	loc_8042
0000865A 08E9 0001 0022             		bset	#1,$22(a1)
00008660 08A9 0003 0022             		bclr	#3,$22(a1)
00008666 137C 0002 0024             		move.b	#2,$24(a1)
0000866C 08A8 0003 0022             		bclr	#3,$22(a0)
00008672 4228 0025                  		clr.b	$25(a0)
00008676 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000867C                            
0000867C                            loc_8042:
0000867C 117C 0008 0024             		move.b	#8,$24(a0)
00008682                            
00008682                            loc_8048:
00008682 2628 002C                  		move.l	$2C(a0),d3
00008686 3028 0012                  		move.w	$12(a0),d0
0000868A 48C0                       		ext.l	d0
0000868C E180                       		asl.l	#8,d0
0000868E D680                       		add.l	d0,d3
00008690 2143 002C                  		move.l	d3,$2C(a0)
00008694 0668 0038 0012             		addi.w	#$38,$12(a0)
0000869A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000869E 0640 00E0                  		addi.w	#$E0,d0
000086A2 B068 002C                  		cmp.w	$2C(a0),d0
000086A6 6400                       		bcc.s	locret_8074
000086A8 117C 0006 0024             		move.b	#6,$24(a0)
000086AE                            
000086AE                            locret_8074:
000086AE 4E75                       		rts	
000086B0                            ; ===========================================================================
000086B0                            
000086B0                            Obj18_Type07:
000086B0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000086B4 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000086B6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000086BA 7000                       		moveq	#0,d0
000086BC 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000086C0 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000086C2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000086C6 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000086C8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000086CE                            
000086CE                            Obj18_07_NoMove:
000086CE 4E75                       		rts	
000086D0                            ; ===========================================================================
000086D0                            
000086D0                            Obj18_07_Wait:
000086D0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000086D4 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000086D6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000086DA 4E75                       		rts	
000086DC                            ; ===========================================================================
000086DC                            
000086DC                            Obj18_Type08:
000086DC 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000086E0 3028 0034                  		move.w	$34(a0),d0
000086E4 0440 0200                  		subi.w	#$200,d0
000086E8 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000086EC 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000086EE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000086F2                            
000086F2                            Obj18_08_NoStop:
000086F2 4E75                       		rts	
000086F4                            ; ===========================================================================
000086F4                            
000086F4                            Obj18_Type0A:
000086F4 3028 0034                  		move.w	$34(a0),d0
000086F8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000086FC 0401 0040                  		subi.b	#$40,d1
00008700 4881                       		ext.w	d1
00008702 E241                       		asr.w	#1,d1
00008704 D041                       		add.w	d1,d0
00008706 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000870A                            
0000870A                            Obj18_ChgMotion:
0000870A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008710 4E75                       		rts	
00008712                            ; ===========================================================================
00008712                            
00008712                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008712 3028 0032                  		move.w	$32(a0),d0
00008716 0240 FF80                  		andi.w	#$FF80,d0
0000871A 3238 F700                  		move.w	($FFFFF700).w,d1
0000871E 0441 0080                  		subi.w	#$80,d1
00008722 0241 FF80                  		andi.w	#$FF80,d1
00008726 9041                       		sub.w	d1,d0
00008728 0C40 0280                  		cmpi.w	#$280,d0
0000872C 6200                       		bhi.s	Obj18_Delete
0000872E 4E75                       		rts	
00008730                            ; ===========================================================================
00008730                            
00008730                            Obj18_Delete:				; XREF: Obj18_Index
00008730 6000 0000                  		bra.w	DeleteObject
00008734                            ; ===========================================================================
00008734                            ; ---------------------------------------------------------------------------
00008734                            ; Sprite mappings - unused
00008734                            ; ---------------------------------------------------------------------------
00008734                            Map_obj18x:
00008734                            	include "_maps\obj18x.asm"
00008734                            ; ---------------------------------------------------------------------------
00008734                            ; Sprite mappings - unused
00008734                            ; ---------------------------------------------------------------------------
00008734 0000                       		dc.w byte_80FE-Map_obj18x
00008736 0000                       		dc.w byte_8109-Map_obj18x
00008738 02                         byte_80FE:	dc.b 2
00008739 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000873E F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008743 0A                         byte_8109:	dc.b $A
00008744 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008749 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000874E 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008753 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008758 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000875D F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008762 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008767 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000876C 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008771 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008776                            		even
00008776                            		even
00008776                            
00008776                            ; ---------------------------------------------------------------------------
00008776                            ; Sprite mappings - GHZ	platforms
00008776                            ; ---------------------------------------------------------------------------
00008776                            Map_obj18:
00008776                            	include "_maps\obj18ghz.asm"
00008776                            ; ---------------------------------------------------------------------------
00008776                            ; Sprite mappings - GHZ	platforms
00008776                            ; ---------------------------------------------------------------------------
00008776 0000                       		dc.w byte_8140-Map_obj18
00008778 0000                       		dc.w byte_8155-Map_obj18
0000877A 04                         byte_8140:	dc.b 4
0000877B F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008780 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008785 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000878A F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000878F 0A                         byte_8155:	dc.b $A
00008790 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008795 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000879A 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000879F 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000087A4 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000087A9 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000087AE 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000087B3 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000087B8 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000087BD 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000087C2                            		even
000087C2                            		even
000087C2                            
000087C2                            ; ---------------------------------------------------------------------------
000087C2                            ; Sprite mappings - SYZ	platforms
000087C2                            ; ---------------------------------------------------------------------------
000087C2                            Map_obj18a:
000087C2                            	include "_maps\obj18syz.asm"
000087C2                            ; ---------------------------------------------------------------------------
000087C2                            ; Sprite mappings - SYZ	platforms
000087C2                            ; ---------------------------------------------------------------------------
000087C2 0000                       		dc.w byte_818A-Map_obj18a
000087C4 03                         byte_818A:	dc.b 3
000087C5 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000087CA F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000087CF F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000087D4                            		even
000087D4                            		even
000087D4                            
000087D4                            ; ---------------------------------------------------------------------------
000087D4                            ; Sprite mappings - SLZ	platforms
000087D4                            ; ---------------------------------------------------------------------------
000087D4                            Map_obj18b:
000087D4                            	include "_maps\obj18slz.asm"
000087D4                            ; ---------------------------------------------------------------------------
000087D4                            ; Sprite mappings - SLZ	platforms
000087D4                            ; ---------------------------------------------------------------------------
000087D4 0000                       		dc.w byte_819C-Map_obj18b
000087D6 02                         byte_819C:	dc.b 2
000087D7 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000087DC F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000087E2 00                         		even
000087E2 00                         		even
000087E2                            
000087E2                            ; ===========================================================================
000087E2                            ; ---------------------------------------------------------------------------
000087E2                            ; Object 19 - Pearto bombs
000087E2                            ; ---------------------------------------------------------------------------
000087E2                            Obj19:					; XREF: Obj_Index
000087E2 7000                       		moveq	#0,d0
000087E4 1028 0024                  		move.b	$24(a0),d0
000087E8 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000087EC 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000087F0                            ; ---------------------------------------------------------------------------
000087F0                            
000087F0 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000087F6                            ; ---------------------------------------------------------------------------
000087F6                            
000087F6                            loc_7076:
000087F6 5428 0024                  		addq.b	#2,$24(a0)
000087FA 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
00008802 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008808 117C 0004 0001             		move.b	#4,1(a0)
0000880E 117C 0003 0019             		move.b	#3,$19(a0)
00008814 117C 0087 0020             		move.b	#$87,$20(a0)
0000881A 117C 0008 0018             		move.b	#8,$18(a0)
00008820 317C 0018 0030             		move.w	#$18,$30(a0)
00008826                            
00008826                            loc_70A6:
00008826 0828 0007 0022             		btst	#7,$22(a0)
0000882C 6600                       		bne.s	loc_70C2
0000882E 4A68 0030                  		tst.w	$30(a0)
00008832 6600                       		bne.s	loc_70D2
00008834 4EB9 0000 0000             		jsr	ObjHitFloor
0000883A 4A41                       		tst.w	d1
0000883C 6A00                       		bpl.s	loc_70D6
0000883E D368 000C                  		add.w	d1,$C(a0)
00008842                            
00008842                            loc_70C2:
00008842 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008846 117C 0000 0024             		move.b	#0,$24(a0)
0000884C                            ; ---------------------------------------------------------------------------
0000884C                            
0000884C                            loc_70D2:
0000884C 5368 0030                  		subq.w	#1,$30(a0)
00008850                            
00008850                            loc_70D6:
00008850 6100 0000                  		bsr.w	ObjectFall
00008854 6100 0000                  		bsr.w	DisplaySprite
00008858 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000885C 0640 00E0                  		addi.w	#$E0,d0
00008860 B068 000C                  		cmp.w	$C(a0),d0
00008864 6500                       		bcs.s	loc_70EE
00008866 4E75                       		rts
00008868                            ; ---------------------------------------------------------------------------
00008868                            
00008868                            loc_70EE:
00008868 6100 0000                  		bsr.w	DeleteObject
0000886C 4E75                       		rts
0000886E                            		
0000886E                            Map_obj19:
0000886E                            	include "_maps\obj19.asm"
0000886E                            Map_02b4:
0000886E 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
00008870 01                         Map_02b4_2: 	dc.b $1
00008871 F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008876                            	even
00008876                            	even
00008876                            ; ===========================================================================
00008876                            ; ---------------------------------------------------------------------------
00008876                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008876                            ; ---------------------------------------------------------------------------
00008876                            Map_obj48:
00008876                            	include "_maps\obj48.asm"
00008876                            ; ---------------------------------------------------------------------------
00008876                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008876                            ; ---------------------------------------------------------------------------
00008876 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000887A 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000887E 06                         byte_81B2:	dc.b 6
0000887F F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008884 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008889 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000888E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008893 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008898 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000889D 04                         byte_81D1:	dc.b 4
0000889E E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000088A3 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000088A8 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000088AD 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000088B2 04                         byte_81E6:	dc.b 4
000088B3 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000088B8 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000088BD 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000088C2 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000088C7 04                         byte_81FB:	dc.b 4
000088C8 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000088CD E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000088D2 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000088D7 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000088DC                            		even
000088DC                            		even
000088DC                            
000088DC                            ; ===========================================================================
000088DC                            ; ---------------------------------------------------------------------------
000088DC                            ; Object 1A - GHZ collapsing ledge
000088DC                            ; ---------------------------------------------------------------------------
000088DC                            
000088DC                            Obj1A:					; XREF: Obj_Index
000088DC 7000                       		moveq	#0,d0
000088DE 1028 0024                  		move.b	$24(a0),d0
000088E2 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000088E6 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000088EA                            ; ===========================================================================
000088EA 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000088EE 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000088F2 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000088F6                            ; ===========================================================================
000088F6                            
000088F6                            Obj1A_Main:				; XREF: Obj1A_Index
000088F6 5428 0024                  		addq.b	#2,$24(a0)
000088FA 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008902 317C 4000 0002             		move.w	#$4000,2(a0)
00008908 0028 0004 0001             		ori.b	#4,1(a0)
0000890E 117C 0004 0018             		move.b	#4,$18(a0)
00008914 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000891A 117C 0064 0019             		move.b	#$64,$19(a0)
00008920 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008926 117C 0038 0016             		move.b	#$38,$16(a0)
0000892C 08E8 0004 0001             		bset	#4,1(a0)
00008932                            
00008932                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008932 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008936 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008938 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000893C 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008940 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008944                            
00008944                            Obj1A_Slope:
00008944 323C 0030                  		move.w	#$30,d1
00008948 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000894E 6100 F212                  		bsr.w	SlopeObject
00008952 6000 0000                  		bra.w	MarkObjGone
00008956                            ; ===========================================================================
00008956                            
00008956                            Obj1A_Touch:				; XREF: Obj1A_Index
00008956 4A28 0038                  		tst.b	$38(a0)
0000895A 6700 0000                  		beq.w	loc_847A
0000895E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008964 5328 0038                  		subq.b	#1,$38(a0)
00008968                            
00008968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008968                            
00008968                            
00008968                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008968 323C 0030                  		move.w	#$30,d1
0000896C 6100 F294                  		bsr.w	ExitPlatform
00008970 323C 0030                  		move.w	#$30,d1
00008974 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000897A 3428 0008                  		move.w	8(a0),d2
0000897E 6100 0000                  		bsr.w	SlopeObject2
00008982 6000 0000                  		bra.w	MarkObjGone
00008986                            ; End of function Obj1A_WalkOff
00008986                            
00008986                            ; ===========================================================================
00008986                            
00008986                            Obj1A_Display:				; XREF: Obj1A_Index
00008986 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000898A 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000898C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008990 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008994 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008998 6000 0000                  		bra.w	DisplaySprite
0000899C                            ; ===========================================================================
0000899C                            
0000899C                            loc_82D0:				; XREF: Obj1A_Display
0000899C 5328 0038                  		subq.b	#1,$38(a0)
000089A0 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000089A4 43F8 D000                  		lea	($FFFFD000).w,a1
000089A8 0829 0003 0022             		btst	#3,$22(a1)
000089AE 6700                       		beq.s	loc_82FC
000089B0 4A28 0038                  		tst.b	$38(a0)
000089B4 6600                       		bne.s	locret_8308
000089B6 08A9 0003 0022             		bclr	#3,$22(a1)
000089BC 08A9 0005 0022             		bclr	#5,$22(a1)
000089C2 137C 0001 001D             		move.b	#1,$1D(a1)
000089C8                            
000089C8                            loc_82FC:
000089C8 117C 0000 003A             		move.b	#0,$3A(a0)
000089CE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000089D4                            
000089D4                            locret_8308:
000089D4 4E75                       		rts	
000089D6                            ; ===========================================================================
000089D6                            
000089D6                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000089D6 6100 0000                  		bsr.w	ObjectFall
000089DA 6100 0000                  		bsr.w	DisplaySprite
000089DE 4A28 0001                  		tst.b	1(a0)
000089E2 6A00                       		bpl.s	Obj1A_Delete
000089E4 4E75                       		rts	
000089E6                            ; ===========================================================================
000089E6                            
000089E6                            Obj1A_Delete:				; XREF: Obj1A_Index
000089E6 6100 0000                  		bsr.w	DeleteObject
000089EA 4E75                       		rts	
000089EC                            ; ===========================================================================
000089EC                            ; ---------------------------------------------------------------------------
000089EC                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000089EC                            ; ---------------------------------------------------------------------------
000089EC                            
000089EC                            Obj53:					; XREF: Obj_Index
000089EC 7000                       		moveq	#0,d0
000089EE 1028 0024                  		move.b	$24(a0),d0
000089F2 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000089F6 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000089FA                            ; ===========================================================================
000089FA 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000089FE 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008A02 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008A06                            ; ===========================================================================
00008A06                            
00008A06                            Obj53_Main:				; XREF: Obj53_Index
00008A06 5428 0024                  		addq.b	#2,$24(a0)
00008A0A 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008A12 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008A18 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A1E 6600                       		bne.s	Obj53_NotSLZ
00008A20 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008A26 5428 001A                  		addq.b	#2,$1A(a0)
00008A2A                            
00008A2A                            Obj53_NotSLZ:
00008A2A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008A30 6600                       		bne.s	Obj53_NotSBZ
00008A32 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008A38                            
00008A38                            Obj53_NotSBZ:
00008A38 0028 0004 0001             		ori.b	#4,1(a0)
00008A3E 117C 0004 0018             		move.b	#4,$18(a0)
00008A44 117C 0007 0038             		move.b	#7,$38(a0)
00008A4A 117C 0044 0019             		move.b	#$44,$19(a0)
00008A50                            
00008A50                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008A50 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A54 6700                       		beq.s	Obj53_Solid	; if not, branch
00008A56 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A5A 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008A5E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A62                            
00008A62                            Obj53_Solid:
00008A62 323C 0020                  		move.w	#$20,d1
00008A66 6100 F026                  		bsr.w	PlatformObject
00008A6A 4A28 0028                  		tst.b	$28(a0)
00008A6E 6A00                       		bpl.s	Obj53_MarkAsGone
00008A70 0829 0003 0022             		btst	#3,$22(a1)
00008A76 6700                       		beq.s	Obj53_MarkAsGone
00008A78 08A8 0000 0001             		bclr	#0,1(a0)
00008A7E 3029 0008                  		move.w	8(a1),d0
00008A82 9068 0008                  		sub.w	8(a0),d0
00008A86 6400                       		bcc.s	Obj53_MarkAsGone
00008A88 08E8 0000 0001             		bset	#0,1(a0)
00008A8E                            
00008A8E                            Obj53_MarkAsGone:
00008A8E 6000 0000                  		bra.w	MarkObjGone
00008A92                            ; ===========================================================================
00008A92                            
00008A92                            Obj53_Touch:				; XREF: Obj53_Index
00008A92 4A28 0038                  		tst.b	$38(a0)
00008A96 6700 0000                  		beq.w	loc_8458
00008A9A 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008AA0 5328 0038                  		subq.b	#1,$38(a0)
00008AA4                            
00008AA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AA4                            
00008AA4                            
00008AA4                            Obj53_WalkOff:				; XREF: Obj53_Index
00008AA4 323C 0020                  		move.w	#$20,d1
00008AA8 6100 F158                  		bsr.w	ExitPlatform
00008AAC 3428 0008                  		move.w	8(a0),d2
00008AB0 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008AB4 6000 0000                  		bra.w	MarkObjGone
00008AB8                            ; End of function Obj53_WalkOff
00008AB8                            
00008AB8                            ; ===========================================================================
00008AB8                            
00008AB8                            Obj53_Display:				; XREF: Obj53_Index
00008AB8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008ABC 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008ABE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008AC2 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008AC6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008ACA 6000 0000                  		bra.w	DisplaySprite
00008ACE                            ; ===========================================================================
00008ACE                            
00008ACE                            loc_8402:
00008ACE 5328 0038                  		subq.b	#1,$38(a0)
00008AD2 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008AD6 43F8 D000                  		lea	($FFFFD000).w,a1
00008ADA 0829 0003 0022             		btst	#3,$22(a1)
00008AE0 6700                       		beq.s	loc_842E
00008AE2 4A28 0038                  		tst.b	$38(a0)
00008AE6 6600                       		bne.s	locret_843A
00008AE8 08A9 0003 0022             		bclr	#3,$22(a1)
00008AEE 08A9 0005 0022             		bclr	#5,$22(a1)
00008AF4 137C 0001 001D             		move.b	#1,$1D(a1)
00008AFA                            
00008AFA                            loc_842E:
00008AFA 117C 0000 003A             		move.b	#0,$3A(a0)
00008B00 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008B06                            
00008B06                            locret_843A:
00008B06 4E75                       		rts	
00008B08                            ; ===========================================================================
00008B08                            
00008B08                            Obj53_TimeZero:				; XREF: Obj53_Display
00008B08 6100 0000                  		bsr.w	ObjectFall
00008B0C 6100 0000                  		bsr.w	DisplaySprite
00008B10 4A28 0001                  		tst.b	1(a0)
00008B14 6A00                       		bpl.s	Obj53_Delete
00008B16 4E75                       		rts	
00008B18                            ; ===========================================================================
00008B18                            
00008B18                            Obj53_Delete:				; XREF: Obj53_Index
00008B18 6100 0000                  		bsr.w	DeleteObject
00008B1C 4E75                       		rts	
00008B1E                            ; ===========================================================================
00008B1E                            
00008B1E                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008B1E 117C 0000 003A             		move.b	#0,$3A(a0)
00008B24                            
00008B24                            loc_8458:				; XREF: Obj53_Touch
00008B24 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008B2A 0828 0000 0028             		btst	#0,$28(a0)
00008B30 6700                       		beq.s	loc_846C
00008B32 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008B38                            
00008B38                            loc_846C:
00008B38 7207                       		moveq	#7,d1
00008B3A 5228 001A                  		addq.b	#1,$1A(a0)
00008B3E 6000                       		bra.s	loc_8486
00008B40                            ; ===========================================================================
00008B40                            
00008B40                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008B40 117C 0000 003A             		move.b	#0,$3A(a0)
00008B46                            
00008B46                            loc_847A:				; XREF: Obj1A_Touch
00008B46 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008B4C 7218                       		moveq	#$18,d1
00008B4E 5428 001A                  		addq.b	#2,$1A(a0)
00008B52                            
00008B52                            loc_8486:				; XREF: Obj53_Collapse
00008B52 7000                       		moveq	#0,d0
00008B54 1028 001A                  		move.b	$1A(a0),d0
00008B58 D040                       		add.w	d0,d0
00008B5A 2668 0004                  		movea.l	4(a0),a3
00008B5E D6F3 0000                  		adda.w	(a3,d0.w),a3
00008B62 524B                       		addq.w	#1,a3
00008B64 08E8 0005 0001             		bset	#5,1(a0)
00008B6A 1810                       		move.b	0(a0),d4
00008B6C 1A28 0001                  		move.b	1(a0),d5
00008B70 2248                       		movea.l	a0,a1
00008B72 6000                       		bra.s	loc_84B2
00008B74                            ; ===========================================================================
00008B74                            
00008B74                            loc_84AA:
00008B74 6100 0000                  		bsr.w	SingleObjLoad
00008B78 6600                       		bne.s	loc_84F2
00008B7A 5A4B                       		addq.w	#5,a3
00008B7C                            
00008B7C                            loc_84B2:
00008B7C 137C 0006 0024             		move.b	#6,$24(a1)
00008B82 1284                       		move.b	d4,0(a1)
00008B84 234B 0004                  		move.l	a3,4(a1)
00008B88 1345 0001                  		move.b	d5,1(a1)
00008B8C 3368 0008 0008             		move.w	8(a0),8(a1)
00008B92 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008B98 3368 0002 0002             		move.w	2(a0),2(a1)
00008B9E 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008BA4 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008BAA 135C 0038                  		move.b	(a4)+,$38(a1)
00008BAE B3C8                       		cmpa.l	a0,a1
00008BB0 6400                       		bcc.s	loc_84EE
00008BB2 6100 0000                  		bsr.w	DisplaySprite2
00008BB6                            
00008BB6                            loc_84EE:
00008BB6 51C9 FFBC                  		dbf	d1,loc_84AA
00008BBA                            
00008BBA                            loc_84F2:
00008BBA 6100 0000                  		bsr.w	DisplaySprite
00008BBE 303C 00B9                  		move.w	#$B9,d0
00008BC2 4EF9 0000 13B6             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008BC8                            ; ===========================================================================
00008BC8                            ; ---------------------------------------------------------------------------
00008BC8                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008BC8                            ; ---------------------------------------------------------------------------
00008BC8 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008BD8 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008BE2 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008BEA 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008BF2                            
00008BF2                            ; ---------------------------------------------------------------------------
00008BF2                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008BF2                            ; ---------------------------------------------------------------------------
00008BF2                            
00008BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BF2                            
00008BF2                            
00008BF2                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008BF2 43F8 D000                  		lea	($FFFFD000).w,a1
00008BF6 0829 0003 0022             		btst	#3,$22(a1)
00008BFC 6700                       		beq.s	locret_856E
00008BFE 3029 0008                  		move.w	8(a1),d0
00008C02 9068 0008                  		sub.w	8(a0),d0
00008C06 D041                       		add.w	d1,d0
00008C08 E248                       		lsr.w	#1,d0
00008C0A 0828 0000 0001             		btst	#0,1(a0)
00008C10 6700                       		beq.s	loc_854E
00008C12 4640                       		not.w	d0
00008C14 D041                       		add.w	d1,d0
00008C16                            
00008C16                            loc_854E:
00008C16 7200                       		moveq	#0,d1
00008C18 1232 0000                  		move.b	(a2,d0.w),d1
00008C1C 3028 000C                  		move.w	$C(a0),d0
00008C20 9041                       		sub.w	d1,d0
00008C22 7200                       		moveq	#0,d1
00008C24 1229 0016                  		move.b	$16(a1),d1
00008C28 9041                       		sub.w	d1,d0
00008C2A 3340 000C                  		move.w	d0,$C(a1)
00008C2E 9468 0008                  		sub.w	8(a0),d2
00008C32 9569 0008                  		sub.w	d2,8(a1)
00008C36                            
00008C36                            locret_856E:
00008C36 4E75                       		rts	
00008C38                            ; End of function SlopeObject2
00008C38                            
00008C38                            ; ===========================================================================
00008C38                            ; ---------------------------------------------------------------------------
00008C38                            ; Collision data for GHZ collapsing ledge
00008C38                            ; ---------------------------------------------------------------------------
00008C38                            Obj1A_SlopeData:
00008C38                            		incbin	misc\ghzledge.bin
00008C68                            		even
00008C68                            
00008C68                            ; ---------------------------------------------------------------------------
00008C68                            ; Sprite mappings - GHZ	collapsing ledge
00008C68                            ; ---------------------------------------------------------------------------
00008C68                            Map_obj1A:
00008C68                            	include "_maps\obj1A.asm"
00008C68                            ; ---------------------------------------------------------------------------
00008C68                            ; Sprite mappings - GHZ	collapsing ledge
00008C68                            ; ---------------------------------------------------------------------------
00008C68 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008C6C 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008C70 10                         byte_85A8:	dc.b $10
00008C71 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008C76 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C7B E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C80 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C85 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C8A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008C8F F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C94 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008C99 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C9E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008CA3 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CA8 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CAD 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CB2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008CB7 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008CBC 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CC1 10                         byte_85F9:	dc.b $10
00008CC2 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008CC7 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008CCC E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008CD1 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008CD6 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008CDB D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008CE0 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008CE5 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008CEA F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CEF F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008CF4 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CF9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CFE 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008D03 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008D08 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008D0D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D12 19                         byte_864A:	dc.b $19
00008D13 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008D18 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D1D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D22 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D27 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D2C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D31 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D36 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D3B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D40 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008D45 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D4A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D4F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D54 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D59 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D5E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008D63 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D68 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D6D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D72 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D77 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D7C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008D81 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008D86 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008D8B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D90 19                         byte_86C8:	dc.b $19
00008D91 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008D96 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D9B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008DA0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008DA5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008DAA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008DAF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008DB4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008DB9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008DBE D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008DC3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008DC8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008DCD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008DD2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008DD7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008DDC F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008DE1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008DE6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008DEB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008DF0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008DF5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008DFA 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008DFF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008E04 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008E09 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E0E                            		even
00008E0E                            		even
00008E0E                            
00008E0E                            ; ---------------------------------------------------------------------------
00008E0E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E0E                            ; ---------------------------------------------------------------------------
00008E0E                            Map_obj53:
00008E0E                            	include "_maps\obj53.asm"
00008E0E                            ; ---------------------------------------------------------------------------
00008E0E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E0E                            ; ---------------------------------------------------------------------------
00008E0E 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008E12 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008E16 04                         byte_874E:	dc.b 4
00008E17 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008E1C 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008E21 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E26 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008E2B 08                         byte_8763:	dc.b 8
00008E2C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E31 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008E36 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E3B F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008E40 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008E45 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008E4A 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008E4F 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008E54 04                         byte_878C:	dc.b 4
00008E55 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008E5A 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008E5F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E64 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008E69 08                         byte_87A1:	dc.b 8
00008E6A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E6F F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008E74 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E79 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008E7E 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008E83 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008E88 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008E8D 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008E92                            		even
00008E92                            		even
00008E92                            
00008E92                            ; ===========================================================================
00008E92                            ; ---------------------------------------------------------------------------
00008E92                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008E92                            ; ---------------------------------------------------------------------------
00008E92                            
00008E92                            Obj1C:					; XREF: Obj_Index
00008E92 7000                       		moveq	#0,d0
00008E94 1028 0024                  		move.b	$24(a0),d0
00008E98 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008E9C 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008EA0                            ; ===========================================================================
00008EA0 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008EA2 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008EA4                            ; ===========================================================================
00008EA4                            
00008EA4                            Obj1C_Main:				; XREF: Obj1C_Index
00008EA4 5428 0024                  		addq.b	#2,$24(a0)
00008EA8 7000                       		moveq	#0,d0
00008EAA 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008EAE C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008EB2 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008EB6 2159 0004                  		move.l	(a1)+,4(a0)
00008EBA 3159 0002                  		move.w	(a1)+,2(a0)
00008EBE 0028 0004 0001             		ori.b	#4,1(a0)
00008EC4 1159 001A                  		move.b	(a1)+,$1A(a0)
00008EC8 1159 0019                  		move.b	(a1)+,$19(a0)
00008ECC 1159 0018                  		move.b	(a1)+,$18(a0)
00008ED0 1159 0020                  		move.b	(a1)+,$20(a0)
00008ED4                            
00008ED4                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008ED4 3028 0008                  		move.w	8(a0),d0
00008ED8 0240 FF80                  		andi.w	#$FF80,d0
00008EDC 3238 F700                  		move.w	($FFFFF700).w,d1
00008EE0 0441 0080                  		subi.w	#$80,d1
00008EE4 0241 FF80                  		andi.w	#$FF80,d1
00008EE8 9041                       		sub.w	d1,d0
00008EEA 0C40 0280                  		cmpi.w	#$280,d0
00008EEE 6200 0000                  		bhi.w	DeleteObject
00008EF2 6000 0000                  		bra.w	DisplaySprite
00008EF6                            ; ===========================================================================
00008EF6                            ; ---------------------------------------------------------------------------
00008EF6                            ; Variables for	object $1C are stored in an array
00008EF6                            ; ---------------------------------------------------------------------------
00008EF6 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008EFA 44D8                       		dc.w $44D8		; VRAM setting
00008EFC 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008F00 0000 0000                  		dc.l Map_obj1C
00008F04 44D8                       		dc.w $44D8
00008F06 0008 0200                  		dc.b 0,	8, 2, 0
00008F0A 0000 0000                  		dc.l Map_obj1C
00008F0E 44D8                       		dc.w $44D8
00008F10 0008 0200                  		dc.b 0,	8, 2, 0
00008F14 0000 7F76                  		dc.l Map_obj11
00008F18 438E                       		dc.w $438E
00008F1A 0110 0100                  		dc.b 1,	$10, 1,	0
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E                            ; Sprite mappings - SLZ	lava thrower
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E                            Map_obj1C:
00008F1E                            	include "_maps\obj1C.asm"
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E                            ; Sprite mappings - SLZ	lava thrower
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E 0000                       		dc.w byte_8858-Map_obj1C
00008F20 01                         byte_8858:	dc.b 1
00008F21 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008F26                            		even
00008F26                            		even
00008F26                            
00008F26                            ; ===========================================================================
00008F26                            ; ---------------------------------------------------------------------------
00008F26                            ; Object 1D - switch that activates when Sonic touches it
00008F26                            ; (this	is not used anywhere in	the game)
00008F26                            ; ---------------------------------------------------------------------------
00008F26                            
00008F26                            Obj1D:					; XREF: Obj_Index
00008F26 7000                       		moveq	#0,d0
00008F28 1028 0024                  		move.b	$24(a0),d0
00008F2C 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008F30 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008F34                            ; ===========================================================================
00008F34 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008F36 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008F38 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008F3A                            ; ===========================================================================
00008F3A                            
00008F3A                            Obj1D_Main:				; XREF: Obj1D_Index
00008F3A 5428 0024                  		addq.b	#2,$24(a0)
00008F3E 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008F46 317C 4000 0002             		move.w	#$4000,2(a0)
00008F4C 117C 0004 0001             		move.b	#4,1(a0)
00008F52 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008F58 117C 0010 0019             		move.b	#$10,$19(a0)
00008F5E 117C 0005 0018             		move.b	#5,$18(a0)
00008F64                            
00008F64                            Obj1D_Action:				; XREF: Obj1D_Index
00008F64 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008F6A 323C 0010                  		move.w	#$10,d1
00008F6E 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008F72 6700                       		beq.s	Obj1D_ChkDel
00008F74 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008F78 7001                       		moveq	#1,d0
00008F7A 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008F7E                            
00008F7E                            Obj1D_ChkDel:
00008F7E 6100 0000                  		bsr.w	DisplaySprite
00008F82 3028 0008                  		move.w	8(a0),d0
00008F86 0240 FF80                  		andi.w	#$FF80,d0
00008F8A 3238 F700                  		move.w	($FFFFF700).w,d1
00008F8E 0441 0080                  		subi.w	#$80,d1
00008F92 0241 FF80                  		andi.w	#$FF80,d1
00008F96 9041                       		sub.w	d1,d0
00008F98 0C40 0280                  		cmpi.w	#$280,d0
00008F9C 6200 0000                  		bhi.w	Obj1D_Delete
00008FA0 4E75                       		rts	
00008FA2                            ; ===========================================================================
00008FA2                            
00008FA2                            Obj1D_Delete:				; XREF: Obj1D_Index
00008FA2 6100 0000                  		bsr.w	DeleteObject
00008FA6 4E75                       		rts	
00008FA8                            ; ---------------------------------------------------------------------------
00008FA8                            ; Subroutine to	check if Sonic touches the object
00008FA8                            ; ---------------------------------------------------------------------------
00008FA8                            
00008FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FA8                            
00008FA8                            
00008FA8                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008FA8 43F8 D000                  		lea	($FFFFD000).w,a1
00008FAC 3029 0008                  		move.w	8(a1),d0
00008FB0 9068 0008                  		sub.w	8(a0),d0
00008FB4 D041                       		add.w	d1,d0
00008FB6 6B00                       		bmi.s	loc_8918
00008FB8 D241                       		add.w	d1,d1
00008FBA B041                       		cmp.w	d1,d0
00008FBC 6400                       		bcc.s	loc_8918
00008FBE 3429 000C                  		move.w	$C(a1),d2
00008FC2 1229 0016                  		move.b	$16(a1),d1
00008FC6 4881                       		ext.w	d1
00008FC8 D242                       		add.w	d2,d1
00008FCA 3028 000C                  		move.w	$C(a0),d0
00008FCE 0440 0010                  		subi.w	#$10,d0
00008FD2 9041                       		sub.w	d1,d0
00008FD4 6200                       		bhi.s	loc_8918
00008FD6 0C40 FFF0                  		cmpi.w	#-$10,d0
00008FDA 6500                       		bcs.s	loc_8918
00008FDC 70FF                       		moveq	#-1,d0
00008FDE 4E75                       		rts	
00008FE0                            ; ===========================================================================
00008FE0                            
00008FE0                            loc_8918:
00008FE0 7000                       		moveq	#0,d0
00008FE2 4E75                       		rts	
00008FE4                            ; End of function Obj1D_ChkTouch
00008FE4                            
00008FE4                            ; ===========================================================================
00008FE4                            ; ---------------------------------------------------------------------------
00008FE4                            ; Sprite mappings - object 1D
00008FE4                            ; ---------------------------------------------------------------------------
00008FE4                            Map_obj1D:
00008FE4                            	include "_maps\obj1D.asm"
00008FE4                            ; ---------------------------------------------------------------------------
00008FE4                            ; Sprite mappings - object 1D
00008FE4                            ; ---------------------------------------------------------------------------
00008FE4 0000                       		dc.w byte_891E-Map_obj1D
00008FE6 04                         byte_891E:	dc.b 4
00008FE7 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008FEC 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008FF1 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008FF6 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008FFC 00                         		even
00008FFC 00                         		even
00008FFC                            
00008FFC                            ; ===========================================================================
00008FFC                            ; ---------------------------------------------------------------------------
00008FFC                            ; Object 2A - doors (SBZ)
00008FFC                            ; ---------------------------------------------------------------------------
00008FFC                            
00008FFC                            Obj2A:					; XREF: Obj_Index
00008FFC 7000                       		moveq	#0,d0
00008FFE 1028 0024                  		move.b	$24(a0),d0
00009002 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009006 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000900A                            ; ===========================================================================
0000900A 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000900C 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000900E                            ; ===========================================================================
0000900E                            
0000900E                            Obj2A_Main:				; XREF: Obj2A_Index
0000900E 5428 0024                  		addq.b	#2,$24(a0)
00009012 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000901A 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009020 0028 0004 0001             		ori.b	#4,1(a0)
00009026 117C 0008 0019             		move.b	#8,$19(a0)
0000902C 117C 0004 0018             		move.b	#4,$18(a0)
00009032                            
00009032                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009032 323C 0040                  		move.w	#$40,d1
00009036 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000903A 3038 D008                  		move.w	($FFFFD008).w,d0
0000903E D041                       		add.w	d1,d0
00009040 B068 0008                  		cmp.w	8(a0),d0
00009044 6500                       		bcs.s	Obj2A_Animate
00009046 9041                       		sub.w	d1,d0
00009048 9041                       		sub.w	d1,d0
0000904A B068 0008                  		cmp.w	8(a0),d0
0000904E 6400                       		bcc.s	Obj2A_Animate
00009050 D041                       		add.w	d1,d0
00009052 B068 0008                  		cmp.w	8(a0),d0
00009056 6400                       		bcc.s	loc_899A
00009058 0828 0000 0022             		btst	#0,$22(a0)
0000905E 6600                       		bne.s	Obj2A_Animate
00009060 6000                       		bra.s	Obj2A_Open
00009062                            ; ===========================================================================
00009062                            
00009062                            loc_899A:				; XREF: Obj2A_OpenShut
00009062 0828 0000 0022             		btst	#0,$22(a0)
00009068 6700                       		beq.s	Obj2A_Animate
0000906A                            
0000906A                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000906A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009070                            
00009070                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009070 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009076 6100 0000                  		bsr.w	AnimateSprite
0000907A 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000907E 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009080 323C 0011                  		move.w	#$11,d1
00009084 343C 0020                  		move.w	#$20,d2
00009088 3602                       		move.w	d2,d3
0000908A 5243                       		addq.w	#1,d3
0000908C 3828 0008                  		move.w	8(a0),d4
00009090 6100 0000                  		bsr.w	SolidObject
00009094                            
00009094                            Obj2A_MarkAsUsed:
00009094 6000 0000                  		bra.w	MarkObjGone
00009098                            ; ===========================================================================
00009098                            Ani_obj2A:
00009098                            	include "_anim\obj2A.asm"
00009098                            ; ---------------------------------------------------------------------------
00009098                            ; Animation script - doors (SBZ)
00009098                            ; ---------------------------------------------------------------------------
00009098 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000909A 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000909C 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000090A8 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000090B4                            		even
000090B4                            		even
000090B4                            
000090B4                            ; ---------------------------------------------------------------------------
000090B4                            ; Sprite mappings - doors (SBZ)
000090B4                            ; ---------------------------------------------------------------------------
000090B4                            Map_obj2A:
000090B4                            	include "_maps\obj2A.asm"
000090B4                            ; ---------------------------------------------------------------------------
000090B4                            ; Sprite mappings - doors (SBZ)
000090B4                            ; ---------------------------------------------------------------------------
000090B4 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000090B8 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000090BC 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000090C0 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000090C4 0000                       		dc.w byte_8A56-Map_obj2A
000090C6 02                         byte_89FE:	dc.b 2
000090C7 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000090CC 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000090D1 02                         byte_8A09:	dc.b 2
000090D2 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000090D7 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000090DC 02                         byte_8A14:	dc.b 2
000090DD D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000090E2 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000090E7 02                         byte_8A1F:	dc.b 2
000090E8 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000090ED 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000090F2 02                         byte_8A2A:	dc.b 2
000090F3 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000090F8 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000090FD 02                         byte_8A35:	dc.b 2
000090FE CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009103 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009108 02                         byte_8A40:	dc.b 2
00009109 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000910E 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009113 02                         byte_8A4B:	dc.b 2
00009114 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009119 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000911E 02                         byte_8A56:	dc.b 2
0000911F C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009124 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000912A 00                         		even
0000912A 00                         		even
0000912A                            
0000912A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000912A                            
0000912A                            
0000912A                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000912A 6100 0000                  		bsr.w	Obj44_SolidWall2
0000912E 6700                       		beq.s	loc_8AA8
00009130 6B00 0000                  		bmi.w	loc_8AC4
00009134 4A40                       		tst.w	d0
00009136 6700 0000                  		beq.w	loc_8A92
0000913A 6B00                       		bmi.s	loc_8A7C
0000913C 4A69 0010                  		tst.w	$10(a1)
00009140 6B00                       		bmi.s	loc_8A92
00009142 6000                       		bra.s	loc_8A82
00009144                            ; ===========================================================================
00009144                            
00009144                            loc_8A7C:
00009144 4A69 0010                  		tst.w	$10(a1)
00009148 6A00                       		bpl.s	loc_8A92
0000914A                            
0000914A                            loc_8A82:
0000914A 9169 0008                  		sub.w	d0,8(a1)
0000914E 337C 0000 0014             		move.w	#0,$14(a1)
00009154 337C 0000 0010             		move.w	#0,$10(a1)
0000915A                            
0000915A                            loc_8A92:
0000915A 0829 0001 0022             		btst	#1,$22(a1)
00009160 6600                       		bne.s	loc_8AB6
00009162 08E9 0005 0022             		bset	#5,$22(a1)
00009168 08E8 0005 0022             		bset	#5,$22(a0)
0000916E 4E75                       		rts	
00009170                            ; ===========================================================================
00009170                            
00009170                            loc_8AA8:
00009170 0828 0005 0022             		btst	#5,$22(a0)
00009176 6700                       		beq.s	locret_8AC2
00009178 337C 0001 001C             		move.w	#1,$1C(a1)
0000917E                            
0000917E                            loc_8AB6:
0000917E 08A8 0005 0022             		bclr	#5,$22(a0)
00009184 08A9 0005 0022             		bclr	#5,$22(a1)
0000918A                            
0000918A                            locret_8AC2:
0000918A 4E75                       		rts	
0000918C                            ; ===========================================================================
0000918C                            
0000918C                            loc_8AC4:
0000918C 4A69 0012                  		tst.w	$12(a1)
00009190 6A00                       		bpl.s	locret_8AD8
00009192 4A43                       		tst.w	d3
00009194 6A00                       		bpl.s	locret_8AD8
00009196 9769 000C                  		sub.w	d3,$C(a1)
0000919A 337C 0000 0012             		move.w	#0,$12(a1)
000091A0                            
000091A0                            locret_8AD8:
000091A0 4E75                       		rts	
000091A2                            ; End of function Obj44_SolidWall
000091A2                            
000091A2                            
000091A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091A2                            
000091A2                            
000091A2                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
000091A2 43F8 D000                  		lea	($FFFFD000).w,a1
000091A6 3029 0008                  		move.w	8(a1),d0
000091AA 9068 0008                  		sub.w	8(a0),d0
000091AE D041                       		add.w	d1,d0
000091B0 6B00                       		bmi.s	loc_8B48
000091B2 3601                       		move.w	d1,d3
000091B4 D643                       		add.w	d3,d3
000091B6 B043                       		cmp.w	d3,d0
000091B8 6200                       		bhi.s	loc_8B48
000091BA 1629 0016                  		move.b	$16(a1),d3
000091BE 4883                       		ext.w	d3
000091C0 D443                       		add.w	d3,d2
000091C2 3629 000C                  		move.w	$C(a1),d3
000091C6 9668 000C                  		sub.w	$C(a0),d3
000091CA D642                       		add.w	d2,d3
000091CC 6B00                       		bmi.s	loc_8B48
000091CE 3802                       		move.w	d2,d4
000091D0 D844                       		add.w	d4,d4
000091D2 B644                       		cmp.w	d4,d3
000091D4 6400                       		bcc.s	loc_8B48
000091D6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000091DA 6B00                       		bmi.s	loc_8B48
000091DC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000091E2 6400                       		bcc.s	loc_8B48
000091E4 4A78 FE08                  		tst.w	($FFFFFE08).w
000091E8 6600                       		bne.s	loc_8B48
000091EA 3A00                       		move.w	d0,d5
000091EC B240                       		cmp.w	d0,d1
000091EE 6400                       		bcc.s	loc_8B30
000091F0 D241                       		add.w	d1,d1
000091F2 9041                       		sub.w	d1,d0
000091F4 3A00                       		move.w	d0,d5
000091F6 4445                       		neg.w	d5
000091F8                            
000091F8                            loc_8B30:
000091F8 3203                       		move.w	d3,d1
000091FA B443                       		cmp.w	d3,d2
000091FC 6400                       		bcc.s	loc_8B3C
000091FE 9644                       		sub.w	d4,d3
00009200 3203                       		move.w	d3,d1
00009202 4441                       		neg.w	d1
00009204                            
00009204                            loc_8B3C:
00009204 BA41                       		cmp.w	d1,d5
00009206 6200                       		bhi.s	loc_8B44
00009208 7801                       		moveq	#1,d4
0000920A 4E75                       		rts	
0000920C                            ; ===========================================================================
0000920C                            
0000920C                            loc_8B44:
0000920C 78FF                       		moveq	#-1,d4
0000920E 4E75                       		rts	
00009210                            ; ===========================================================================
00009210                            
00009210                            loc_8B48:
00009210 7800                       		moveq	#0,d4
00009212 4E75                       		rts	
00009214                            ; End of function Obj44_SolidWall2
00009214                            
00009214                            ; ===========================================================================
00009214                            ; ---------------------------------------------------------------------------
00009214                            ; Object 1E - Ball Hog enemy (SBZ)
00009214                            ; ---------------------------------------------------------------------------
00009214                            
00009214                            Obj1E:					; XREF: Obj_Index
00009214 7000                       		moveq	#0,d0
00009216 1028 0024                  		move.b	$24(a0),d0
0000921A 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000921E 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009222                            ; ===========================================================================
00009222 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009224 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009226                            ; ===========================================================================
00009226                            
00009226                            Obj1E_Main:				; XREF: Obj1E_Index
00009226 117C 0013 0016             		move.b	#$13,$16(a0)
0000922C 117C 0008 0017             		move.b	#8,$17(a0)
00009232 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000923A 317C 2302 0002             		move.w	#$2302,2(a0)
00009240 117C 0004 0001             		move.b	#4,1(a0)
00009246 117C 0004 0018             		move.b	#4,$18(a0)
0000924C 117C 0005 0020             		move.b	#5,$20(a0)
00009252 117C 000C 0019             		move.b	#$C,$19(a0)
00009258 6100 0000                  		bsr.w	ObjectFall
0000925C 4EB9 0000 0000             		jsr	ObjHitFloor
00009262 4A41                       		tst.w	d1
00009264 6A00                       		bpl.s	locret_8BAC
00009266 D368 000C                  		add.w	d1,$C(a0)
0000926A 317C 0000 0012             		move.w	#0,$12(a0)
00009270 5428 0024                  		addq.b	#2,$24(a0)
00009274                            
00009274                            locret_8BAC:
00009274 4E75                       		rts	
00009276                            ; ===========================================================================
00009276                            
00009276                            Obj1E_Action:				; XREF: Obj1E_Index
00009276 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000927C 6100 0000                  		bsr.w	AnimateSprite
00009280 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009286 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009288 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000928C 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000928E 6000                       		bra.s	Obj1E_MarkAsGone
00009290                            ; ===========================================================================
00009290                            
00009290                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009290 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009294                            
00009294                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009294 6000 0000                  		bra.w	MarkObjGone
00009298                            ; ===========================================================================
00009298                            
00009298                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009298 117C 0001 0032             		move.b	#1,$32(a0)
0000929E 6100 0000                  		bsr.w	SingleObjLoad
000092A2 6600                       		bne.s	loc_8C1A
000092A4 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000092A8 3368 0008 0008             		move.w	8(a0),8(a1)
000092AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000092B4 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
000092BA 337C 0000 0012             		move.w	#0,$12(a1)
000092C0 70FC                       		moveq	#-4,d0
000092C2 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000092C8 6700                       		beq.s	loc_8C0A	; if not, branch
000092CA 4440                       		neg.w	d0
000092CC 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000092D0                            
000092D0                            loc_8C0A:
000092D0 D169 0008                  		add.w	d0,8(a1)
000092D4 0669 000C 000C             		addi.w	#$C,$C(a1)
000092DA 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000092E0                            
000092E0                            loc_8C1A:
000092E0 60B2                       		bra.s	Obj1E_MarkAsGone
000092E2                            ; ===========================================================================
000092E2                            ; ---------------------------------------------------------------------------
000092E2                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000092E2                            ; ---------------------------------------------------------------------------
000092E2                            
000092E2                            Obj20:					; XREF: Obj_Index
000092E2 7000                       		moveq	#0,d0
000092E4 1028 0024                  		move.b	$24(a0),d0
000092E8 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000092EC 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000092F0                            ; ===========================================================================
000092F0 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000092F2 0000                       		dc.w Obj20_Bounce-Obj20_Index
000092F4                            ; ===========================================================================
000092F4                            
000092F4                            Obj20_Main:				; XREF: Obj20_Index
000092F4 5428 0024                  		addq.b	#2,$24(a0)
000092F8 117C 0007 0016             		move.b	#7,$16(a0)
000092FE 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009306 317C 2302 0002             		move.w	#$2302,2(a0)
0000930C 117C 0004 0001             		move.b	#4,1(a0)
00009312 117C 0003 0018             		move.b	#3,$18(a0)
00009318 117C 0087 0020             		move.b	#$87,$20(a0)
0000931E 117C 0008 0019             		move.b	#8,$19(a0)
00009324 7000                       		moveq	#0,d0
00009326 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000932A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000932E 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009332 117C 0004 001A             		move.b	#4,$1A(a0)
00009338                            
00009338                            Obj20_Bounce:				; XREF: Obj20_Index
00009338 4EB9 0000 0000             		jsr	ObjectFall
0000933E 4A68 0012                  		tst.w	$12(a0)
00009342 6B00                       		bmi.s	Obj20_ChkExplode
00009344 4EB9 0000 0000             		jsr	ObjHitFloor
0000934A 4A41                       		tst.w	d1
0000934C 6A00                       		bpl.s	Obj20_ChkExplode
0000934E D368 000C                  		add.w	d1,$C(a0)
00009352 317C FD00 0012             		move.w	#-$300,$12(a0)
00009358 4A03                       		tst.b	d3
0000935A 6700                       		beq.s	Obj20_ChkExplode
0000935C 6B00                       		bmi.s	loc_8CA4
0000935E 4A68 0010                  		tst.w	$10(a0)
00009362 6A00                       		bpl.s	Obj20_ChkExplode
00009364 4468 0010                  		neg.w	$10(a0)
00009368 6000                       		bra.s	Obj20_ChkExplode
0000936A                            ; ===========================================================================
0000936A                            
0000936A                            loc_8CA4:				; XREF: Obj20_Bounce
0000936A 4A68 0010                  		tst.w	$10(a0)
0000936E 6B00                       		bmi.s	Obj20_ChkExplode
00009370 4468 0010                  		neg.w	$10(a0)
00009374                            
00009374                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009374 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009378 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000937A 10BC 0024                  		move.b	#$24,0(a0)
0000937E 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009382 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009388 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000938C                            ; ===========================================================================
0000938C                            
0000938C                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000938C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009390 6A00                       		bpl.s	Obj20_Display
00009392 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009398 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000939E                            
0000939E                            Obj20_Display:
0000939E 6100 0000                  		bsr.w	DisplaySprite
000093A2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000093A6 0640 00E0                  		addi.w	#$E0,d0
000093AA B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000093AE 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000093B2 4E75                       		rts	
000093B4                            ; ===========================================================================
000093B4                            ; ---------------------------------------------------------------------------
000093B4                            ; Object 24 - explosion	from a destroyed monitor
000093B4                            ; ---------------------------------------------------------------------------
000093B4                            
000093B4                            Obj24:					; XREF: Obj_Index
000093B4 7000                       		moveq	#0,d0
000093B6 1028 0024                  		move.b	$24(a0),d0
000093BA 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000093BE 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000093C2                            ; ===========================================================================
000093C2 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000093C4 0000                       		dc.w Obj24_Animate-Obj24_Index
000093C6                            ; ===========================================================================
000093C6                            
000093C6                            Obj24_Main:				; XREF: Obj24_Index
000093C6 5428 0024                  		addq.b	#2,$24(a0)
000093CA 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000093D2 317C 041C 0002             		move.w	#$41C,2(a0)
000093D8 117C 0004 0001             		move.b	#4,1(a0)
000093DE 117C 0001 0018             		move.b	#1,$18(a0)
000093E4 117C 0000 0020             		move.b	#0,$20(a0)
000093EA 117C 000C 0019             		move.b	#$C,$19(a0)
000093F0 117C 0009 001E             		move.b	#9,$1E(a0)
000093F6 117C 0000 001A             		move.b	#0,$1A(a0)
000093FC 303C 00A5                  		move.w	#$A5,d0
00009400 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play explosion sound
00009406                            
00009406                            Obj24_Animate:				; XREF: Obj24_Index
00009406 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000940A 6A00                       		bpl.s	Obj24_Display
0000940C 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009412 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009416 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000941C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009420                            
00009420                            Obj24_Display:
00009420 6000 0000                  		bra.w	DisplaySprite
00009424                            ; ===========================================================================
00009424                            ; ---------------------------------------------------------------------------
00009424                            ; Object 27 - explosion	from a destroyed enemy
00009424                            ; ---------------------------------------------------------------------------
00009424                            
00009424                            Obj27:					; XREF: Obj_Index
00009424 7000                       		moveq	#0,d0
00009426 1028 0024                  		move.b	$24(a0),d0
0000942A 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000942E 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009432                            ; ===========================================================================
00009432 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009434 0000                       		dc.w Obj27_Main-Obj27_Index
00009436 0000                       		dc.w Obj27_Animate-Obj27_Index
00009438                            ; ===========================================================================
00009438                            
00009438                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009438 5428 0024                  		addq.b	#2,$24(a0)
0000943C 6100 0000                  		bsr.w	SingleObjLoad
00009440 6600                       		bne.s	Obj27_Main
00009442 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009446 3368 0008 0008             		move.w	8(a0),8(a1)
0000944C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009452 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009458                            
00009458                            Obj27_Main:				; XREF: Obj27_Index
00009458 5428 0024                  		addq.b	#2,$24(a0)
0000945C 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009464 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000946A 117C 0004 0001             		move.b	#4,1(a0)
00009470 117C 0001 0018             		move.b	#1,$18(a0)
00009476 117C 0000 0020             		move.b	#0,$20(a0)
0000947C 117C 000C 0019             		move.b	#$C,$19(a0)
00009482                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009482 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009488 117C 0000 001A             		move.b	#0,$1A(a0)
0000948E 303C 00C1                  		move.w	#$C1,d0
00009492 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009498                            
00009498 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000949E 1028 0028                  		move.b	$28(a0),d0
000094A2 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000094A8 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000094AE                            
000094AE                            Obj27_Animate:				; XREF: Obj27_Index
000094AE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000094B2 6A00                       		bpl.s	Obj27_Display
000094B4                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000094B4 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000094BA 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000094BE 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000094C4 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000094C8                            
000094C8                            Obj27_Display:
000094C8 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000094CE 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000094D4 6000 0000                  		bra.w	DisplaySprite
000094D8                            ; ===========================================================================
000094D8                            ; ---------------------------------------------------------------------------
000094D8                            Obj27_ExplosionXYSpd:
000094D8                            		; dc.w	-$350, -$300	; Left
000094D8                            		; dc.w	-$200, -$450	; Near middle (left)
000094D8                            		; dc.w	0, -$500	; Middle
000094D8                            		; dc.w	$200, -$450	; Near middle (right)
000094D8                            		; dc.w	$350, -$300	; Right
000094D8                            
000094D8 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000094DC FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000094E0 0000 FA00                  		dc.w	0, -$600	; Middle
000094E4 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000094E8 0150 FC00                  		dc.w	$150, -$400	; Right
000094EC                            
000094EC 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009506                            ; ---------------------------------------------------------------------------
00009506                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009506                            ; ---------------------------------------------------------------------------
00009506                            
00009506                            Obj3F:					; XREF: Obj_Index
00009506 7000                       		moveq	#0,d0
00009508 1028 0024                  		move.b	$24(a0),d0
0000950C 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009510 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009514                            ; ===========================================================================
00009514 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009516 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009518                            ; ===========================================================================
00009518                            
00009518                            Obj3F_Main:				; XREF: Obj3F_Index
00009518 5428 0024                  		addq.b	#2,$24(a0)
0000951C 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009524 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000952A 117C 0004 0001             		move.b	#4,1(a0)
00009530 117C 0001 0018             		move.b	#1,$18(a0)
00009536 117C 0000 0020             		move.b	#0,$20(a0)
0000953C 117C 000C 0019             		move.b	#$C,$19(a0)
00009542 117C 0007 001E             		move.b	#7,$1E(a0)
00009548 117C 0000 001A             		move.b	#0,$1A(a0)
0000954E 303C 00C4                  		move.w	#$C4,d0
00009552 4EF9 0000 13B6             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009558                            ; ===========================================================================
00009558                            Ani_obj1E:
00009558                            	include "_anim\obj1E.asm"
00009558                            ; ---------------------------------------------------------------------------
00009558                            ; Animation script - doors (SBZ)
00009558                            ; ---------------------------------------------------------------------------
00009558 0000                       		dc.w byte_8E4A-Ani_obj1E
0000955A 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009572 00                         		even
00009572 00                         		even
00009572                            
00009572                            ; ---------------------------------------------------------------------------
00009572                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009572                            ; ---------------------------------------------------------------------------
00009572                            Map_obj1E:
00009572                            	include "_maps\obj1E.asm"
00009572                            Map_a7ad:
00009572 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
00009574 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
00009576 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009578 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
0000957A 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
0000957C 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
0000957E 02                         Map_a7ad_C: 	dc.b $2
0000957F EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009584 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009589 02                         Map_a7ad_17: 	dc.b $2
0000958A EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
0000958F FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009594 02                         Map_a7ad_22: 	dc.b $2
00009595 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
0000959A 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
0000959F 02                         Map_a7ad_2D: 	dc.b $2
000095A0 E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
000095A5 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
000095AA 02                         Map_a7ad_38: 	dc.b $2
000095AB F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
000095B0 E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
000095B5 02                         Map_a7ad_43: 	dc.b $2
000095B6 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
000095BB E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
000095C0                            	even
000095C0                            	even
000095C0                            
000095C0                            ; ---------------------------------------------------------------------------
000095C0                            ; Sprite mappings - explosion
000095C0                            ; ---------------------------------------------------------------------------
000095C0                            Map_obj24:
000095C0                            	include "_maps\obj24.asm"
000095C0                            ; ---------------------------------------------------------------------------
000095C0                            ; Sprite mappings - explosion
000095C0                            ; ---------------------------------------------------------------------------
000095C0 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000095C4 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000095C8 01                         byte_8EAE:	dc.b 1
000095C9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000095CE 01                         byte_8EB4:	dc.b 1
000095CF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000095D4 01                         byte_8EBA:	dc.b 1
000095D5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000095DA 01                         byte_8EC0:	dc.b 1
000095DB F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000095E0                            		even
000095E0                            		even
000095E0                            
000095E0                            ; ---------------------------------------------------------------------------
000095E0                            ; Sprite mappings - explosion
000095E0                            ; ---------------------------------------------------------------------------
000095E0 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000095E4 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000095E8 0000                       		dc.w byte_8EF7-Map_obj27
000095EA 01                         byte_8ED0:	dc.b 1
000095EB F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000095F0 01                         byte_8ED6:	dc.b 1
000095F1 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000095F6 01                         byte_8EDC:	dc.b 1
000095F7 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000095FC 04                         byte_8EE2:	dc.b 4
000095FD EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009602 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009607 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000960C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009611 04                         byte_8EF7:	dc.b 4
00009612 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009617 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000961C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009621 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009626                            		even
00009626                            ; ---------------------------------------------------------------------------
00009626                            ; Sprite mappings - explosion from when	a boss is destroyed
00009626                            ; ---------------------------------------------------------------------------
00009626 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009628 0000                       		dc.w byte_8F16-Map_obj3F
0000962A 0000                       		dc.w byte_8F1C-Map_obj3F
0000962C FFD6                       		dc.w byte_8EE2-Map_obj3F
0000962E FFEB                       		dc.w byte_8EF7-Map_obj3F
00009630 01                         byte_8F16:	dc.b 1
00009631 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009636 01                         byte_8F1C:	dc.b 1
00009637 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000963C                            		even
0000963C                            ; ===========================================================================
0000963C                            ; ---------------------------------------------------------------------------
0000963C                            ; Object 28 - animals
0000963C                            ; ---------------------------------------------------------------------------
0000963C                            
0000963C                            Obj28:					; XREF: Obj_Index
0000963C 7000                       		moveq	#0,d0
0000963E 1028 0024                  		move.b	$24(a0),d0
00009642 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009646 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000964A                            ; ===========================================================================
0000964A 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000964E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009652 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009656 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000965A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000965E 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009662 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009666 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000966A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000966E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009672 0000                       		dc.w loc_92D6-Obj28_Index
00009674                            
00009674 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
00009684                            
00009684 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009688 0000 0000                  		dc.l Map_obj28
0000968C FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009690 0000 0000                  		dc.l Map_obj28a		; mappings address
00009694 FE80 FD00                  		dc.w $FE80, $FD00
00009698 0000 0000                  		dc.l Map_obj28
0000969C FEC0 FE80                  		dc.w $FEC0, $FE80
000096A0 0000 0000                  		dc.l Map_obj28a
000096A4 FE40 FD00                  		dc.w $FE40, $FD00
000096A8 0000 0000                  		dc.l Map_obj28b
000096AC FD00 FC00                  		dc.w $FD00, $FC00
000096B0 0000 0000                  		dc.l Map_obj28a
000096B4 FD80 FC80                  		dc.w $FD80, $FC80
000096B8 0000 0000                  		dc.l Map_obj28b
000096BC                            
000096BC FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000096CC FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000096DC FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000096E8                            
000096E8 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000096FC 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009710 0000 0000                  		dc.l Map_obj28b
00009714                            
00009714 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009726 0565 05B3                  		dc.w $565, $5B3
0000972A                            ; ===========================================================================
0000972A                            
0000972A                            Obj28_Ending:				; XREF: Obj28_Index
0000972A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000972E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009732 7000                       		moveq	#0,d0
00009734 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009738 D040                       		add.w	d0,d0		; multiply d0 by 2
0000973A 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000973E 0440 0014                  		subi.w	#$14,d0
00009742 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009748 D040                       		add.w	d0,d0
0000974A 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009750 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009754 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000975A 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009760 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009766 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000976C 117C 000C 0016             		move.b	#$C,$16(a0)
00009772 117C 0004 0001             		move.b	#4,1(a0)
00009778 08E8 0000 0001             		bset	#0,1(a0)
0000977E 117C 0006 0018             		move.b	#6,$18(a0)
00009784 117C 0008 0019             		move.b	#8,$19(a0)
0000978A 117C 0007 001E             		move.b	#7,$1E(a0)
00009790 6000 0000                  		bra.w	DisplaySprite
00009794                            ; ===========================================================================
00009794                            
00009794                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009794 5428 0024                  		addq.b	#2,$24(a0)
00009798 6100 9398                  		bsr.w	RandomNumber
0000979C 0240 0001                  		andi.w	#1,d0
000097A0 7200                       		moveq	#0,d1
000097A2 1238 FE10                  		move.b	($FFFFFE10).w,d1
000097A6 D241                       		add.w	d1,d1
000097A8 D240                       		add.w	d0,d1
000097AA 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
000097AE 1031 1000                  		move.b	(a1,d1.w),d0
000097B2 1140 0030                  		move.b	d0,$30(a0)
000097B6 E748                       		lsl.w	#3,d0
000097B8 43FA FECA                  		lea	Obj28_Variables(pc),a1
000097BC D2C0                       		adda.w	d0,a1
000097BE 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000097C2 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000097C6 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000097CA 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000097D0 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000097D6 6700                       		beq.s	loc_90C0	; if yes, branch
000097D8 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000097DE                            
000097DE                            loc_90C0:
000097DE 117C 000C 0016             		move.b	#$C,$16(a0)
000097E4 117C 0004 0001             		move.b	#4,1(a0)
000097EA 08E8 0000 0001             		bset	#0,1(a0)
000097F0 117C 0006 0018             		move.b	#6,$18(a0)
000097F6 117C 0008 0019             		move.b	#8,$19(a0)
000097FC 117C 0007 001E             		move.b	#7,$1E(a0)
00009802 117C 0002 001A             		move.b	#2,$1A(a0)
00009808 317C FC00 0012             		move.w	#-$400,$12(a0)
0000980E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009812 6600                       		bne.s	loc_911C
00009814 6100 0000                  		bsr.w	SingleObjLoad
00009818 6600                       		bne.s	Obj28_Display
0000981A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000981E 3368 0008 0008             		move.w	8(a0),8(a1)
00009824 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000982A 3028 003E                  		move.w	$3E(a0),d0
0000982E E248                       		lsr.w	#1,d0
00009830 1340 001A                  		move.b	d0,$1A(a1)
00009834                            
00009834                            Obj28_Display:
00009834 6000 0000                  		bra.w	DisplaySprite
00009838                            ; ===========================================================================
00009838                            
00009838                            loc_911C:
00009838 117C 0012 0024             		move.b	#$12,$24(a0)
0000983E 4268 0010                  		clr.w	$10(a0)
00009842 6000 0000                  		bra.w	DisplaySprite
00009846                            ; ===========================================================================
00009846                            
00009846                            loc_912A:				; XREF: Obj28_Index
00009846 4A28 0001                  		tst.b	1(a0)
0000984A 6A00 0000                  		bpl.w	DeleteObject
0000984E 6100 0000                  		bsr.w	ObjectFall
00009852 4A68 0012                  		tst.w	$12(a0)
00009856 6B00                       		bmi.s	loc_9180
00009858 4EB9 0000 0000             		jsr	ObjHitFloor
0000985E 4A41                       		tst.w	d1
00009860 6A00                       		bpl.s	loc_9180
00009862 D368 000C                  		add.w	d1,$C(a0)
00009866 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000986C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009872 117C 0001 001A             		move.b	#1,$1A(a0)
00009878 1028 0030                  		move.b	$30(a0),d0
0000987C D000                       		add.b	d0,d0
0000987E 5800                       		addq.b	#4,d0
00009880 1140 0024                  		move.b	d0,$24(a0)
00009884 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009888 6700                       		beq.s	loc_9180
0000988A 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009890 6700                       		beq.s	loc_9180
00009892 4468 0010                  		neg.w	$10(a0)
00009896 0868 0000 0001             		bchg	#0,1(a0)
0000989C                            
0000989C                            loc_9180:
0000989C 6000 0000                  		bra.w	DisplaySprite
000098A0                            ; ===========================================================================
000098A0                            
000098A0                            loc_9184:				; XREF: Obj28_Index
000098A0 6100 0000                  		bsr.w	ObjectFall
000098A4 117C 0001 001A             		move.b	#1,$1A(a0)
000098AA 4A68 0012                  		tst.w	$12(a0)
000098AE 6B00                       		bmi.s	loc_91AE
000098B0 117C 0000 001A             		move.b	#0,$1A(a0)
000098B6 4EB9 0000 0000             		jsr	ObjHitFloor
000098BC 4A41                       		tst.w	d1
000098BE 6A00                       		bpl.s	loc_91AE
000098C0 D368 000C                  		add.w	d1,$C(a0)
000098C4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098CA                            
000098CA                            loc_91AE:
000098CA 4A28 0028                  		tst.b	$28(a0)
000098CE 6600                       		bne.s	loc_9224
000098D0 4A28 0001                  		tst.b	1(a0)
000098D4 6A00 0000                  		bpl.w	DeleteObject
000098D8 6000 0000                  		bra.w	DisplaySprite
000098DC                            ; ===========================================================================
000098DC                            
000098DC                            loc_91C0:				; XREF: Obj28_Index
000098DC 6100 0000                  		bsr.w	SpeedToPos
000098E0 0668 0018 0012             		addi.w	#$18,$12(a0)
000098E6 4A68 0012                  		tst.w	$12(a0)
000098EA 6B00                       		bmi.s	loc_91FC
000098EC 4EB9 0000 0000             		jsr	ObjHitFloor
000098F2 4A41                       		tst.w	d1
000098F4 6A00                       		bpl.s	loc_91FC
000098F6 D368 000C                  		add.w	d1,$C(a0)
000098FA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009900 4A28 0028                  		tst.b	$28(a0)
00009904 6700                       		beq.s	loc_91FC
00009906 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000990C 6700                       		beq.s	loc_91FC
0000990E 4468 0010                  		neg.w	$10(a0)
00009912 0868 0000 0001             		bchg	#0,1(a0)
00009918                            
00009918                            loc_91FC:
00009918 5328 001E                  		subq.b	#1,$1E(a0)
0000991C 6A00                       		bpl.s	loc_9212
0000991E 117C 0001 001E             		move.b	#1,$1E(a0)
00009924 5228 001A                  		addq.b	#1,$1A(a0)
00009928 0228 0001 001A             		andi.b	#1,$1A(a0)
0000992E                            
0000992E                            loc_9212:
0000992E 4A28 0028                  		tst.b	$28(a0)
00009932 6600                       		bne.s	loc_9224
00009934 4A28 0001                  		tst.b	1(a0)
00009938 6A00 0000                  		bpl.w	DeleteObject
0000993C 6000 0000                  		bra.w	DisplaySprite
00009940                            ; ===========================================================================
00009940                            
00009940                            loc_9224:				; XREF: Obj28_Index
00009940 3028 0008                  		move.w	8(a0),d0
00009944 9078 D008                  		sub.w	($FFFFD008).w,d0
00009948 6500                       		bcs.s	loc_923C
0000994A 0440 0180                  		subi.w	#$180,d0
0000994E 6A00                       		bpl.s	loc_923C
00009950 4A28 0001                  		tst.b	1(a0)
00009954 6A00 0000                  		bpl.w	DeleteObject
00009958                            
00009958                            loc_923C:
00009958 6000 0000                  		bra.w	DisplaySprite
0000995C                            ; ===========================================================================
0000995C                            
0000995C                            loc_9240:				; XREF: Obj28_Index
0000995C 4A28 0001                  		tst.b	1(a0)
00009960 6A00 0000                  		bpl.w	DeleteObject
00009964 5368 0036                  		subq.w	#1,$36(a0)
00009968 6600 0000                  		bne.w	loc_925C
0000996C 117C 0002 0024             		move.b	#2,$24(a0)
00009972 117C 0003 0018             		move.b	#3,$18(a0)
00009978                            
00009978                            loc_925C:
00009978 6000 0000                  		bra.w	DisplaySprite
0000997C                            ; ===========================================================================
0000997C                            
0000997C                            loc_9260:				; XREF: Obj28_Index
0000997C 6100 0000                  		bsr.w	sub_9404
00009980 6400                       		bcc.s	loc_927C
00009982 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009988 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000998E 117C 000E 0024             		move.b	#$E,$24(a0)
00009994 6000 FF46                  		bra.w	loc_91C0
00009998                            ; ===========================================================================
00009998                            
00009998                            loc_927C:
00009998 6000 FFA6                  		bra.w	loc_9224
0000999C                            ; ===========================================================================
0000999C                            
0000999C                            loc_9280:				; XREF: Obj28_Index
0000999C 6100 0000                  		bsr.w	sub_9404
000099A0 6A00                       		bpl.s	loc_92B6
000099A2 4268 0010                  		clr.w	$10(a0)
000099A6 4268 0032                  		clr.w	$32(a0)
000099AA 6100 0000                  		bsr.w	SpeedToPos
000099AE 0668 0018 0012             		addi.w	#$18,$12(a0)
000099B4 6100 0000                  		bsr.w	loc_93C4
000099B8 6100 0000                  		bsr.w	loc_93EC
000099BC 5328 001E                  		subq.b	#1,$1E(a0)
000099C0 6A00                       		bpl.s	loc_92B6
000099C2 117C 0001 001E             		move.b	#1,$1E(a0)
000099C8 5228 001A                  		addq.b	#1,$1A(a0)
000099CC 0228 0001 001A             		andi.b	#1,$1A(a0)
000099D2                            
000099D2                            loc_92B6:
000099D2 6000 FF6C                  		bra.w	loc_9224
000099D6                            ; ===========================================================================
000099D6                            
000099D6                            loc_92BA:				; XREF: Obj28_Index
000099D6 6100 0000                  		bsr.w	sub_9404
000099DA 6A00                       		bpl.s	loc_9310
000099DC 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099E2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099E8 117C 0004 0024             		move.b	#4,$24(a0)
000099EE 6000 FEB0                  		bra.w	loc_9184
000099F2                            ; ===========================================================================
000099F2                            
000099F2                            loc_92D6:				; XREF: Obj28_Index
000099F2 6100 0000                  		bsr.w	ObjectFall
000099F6 117C 0001 001A             		move.b	#1,$1A(a0)
000099FC 4A68 0012                  		tst.w	$12(a0)
00009A00 6B00                       		bmi.s	loc_9310
00009A02 117C 0000 001A             		move.b	#0,$1A(a0)
00009A08 4EB9 0000 0000             		jsr	ObjHitFloor
00009A0E 4A41                       		tst.w	d1
00009A10 6A00                       		bpl.s	loc_9310
00009A12 4628 0029                  		not.b	$29(a0)
00009A16 6600                       		bne.s	loc_9306
00009A18 4468 0010                  		neg.w	$10(a0)
00009A1C 0868 0000 0001             		bchg	#0,1(a0)
00009A22                            
00009A22                            loc_9306:
00009A22 D368 000C                  		add.w	d1,$C(a0)
00009A26 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A2C                            
00009A2C                            loc_9310:
00009A2C 6000 FF12                  		bra.w	loc_9224
00009A30                            ; ===========================================================================
00009A30                            
00009A30                            loc_9314:				; XREF: Obj28_Index
00009A30 6100 0000                  		bsr.w	sub_9404
00009A34 6A00                       		bpl.s	loc_932E
00009A36 4268 0010                  		clr.w	$10(a0)
00009A3A 4268 0032                  		clr.w	$32(a0)
00009A3E 6100 0000                  		bsr.w	ObjectFall
00009A42 6100 0000                  		bsr.w	loc_93C4
00009A46 6100 0000                  		bsr.w	loc_93EC
00009A4A                            
00009A4A                            loc_932E:
00009A4A 6000 FEF4                  		bra.w	loc_9224
00009A4E                            ; ===========================================================================
00009A4E                            
00009A4E                            loc_9332:				; XREF: Obj28_Index
00009A4E 6100 0000                  		bsr.w	sub_9404
00009A52 6A00                       		bpl.s	loc_936C
00009A54 6100 0000                  		bsr.w	ObjectFall
00009A58 117C 0001 001A             		move.b	#1,$1A(a0)
00009A5E 4A68 0012                  		tst.w	$12(a0)
00009A62 6B00                       		bmi.s	loc_936C
00009A64 117C 0000 001A             		move.b	#0,$1A(a0)
00009A6A 4EB9 0000 0000             		jsr	ObjHitFloor
00009A70 4A41                       		tst.w	d1
00009A72 6A00                       		bpl.s	loc_936C
00009A74 4468 0010                  		neg.w	$10(a0)
00009A78 0868 0000 0001             		bchg	#0,1(a0)
00009A7E D368 000C                  		add.w	d1,$C(a0)
00009A82 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A88                            
00009A88                            loc_936C:
00009A88 6000 FEB6                  		bra.w	loc_9224
00009A8C                            ; ===========================================================================
00009A8C                            
00009A8C                            loc_9370:				; XREF: Obj28_Index
00009A8C 6100 0000                  		bsr.w	sub_9404
00009A90 6A00                       		bpl.s	loc_93C0
00009A92 6100 0000                  		bsr.w	SpeedToPos
00009A96 0668 0018 0012             		addi.w	#$18,$12(a0)
00009A9C 4A68 0012                  		tst.w	$12(a0)
00009AA0 6B00                       		bmi.s	loc_93AA
00009AA2 4EB9 0000 0000             		jsr	ObjHitFloor
00009AA8 4A41                       		tst.w	d1
00009AAA 6A00                       		bpl.s	loc_93AA
00009AAC 4628 0029                  		not.b	$29(a0)
00009AB0 6600                       		bne.s	loc_93A0
00009AB2 4468 0010                  		neg.w	$10(a0)
00009AB6 0868 0000 0001             		bchg	#0,1(a0)
00009ABC                            
00009ABC                            loc_93A0:
00009ABC D368 000C                  		add.w	d1,$C(a0)
00009AC0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AC6                            
00009AC6                            loc_93AA:
00009AC6 5328 001E                  		subq.b	#1,$1E(a0)
00009ACA 6A00                       		bpl.s	loc_93C0
00009ACC 117C 0001 001E             		move.b	#1,$1E(a0)
00009AD2 5228 001A                  		addq.b	#1,$1A(a0)
00009AD6 0228 0001 001A             		andi.b	#1,$1A(a0)
00009ADC                            
00009ADC                            loc_93C0:
00009ADC 6000 FE62                  		bra.w	loc_9224
00009AE0                            ; ===========================================================================
00009AE0                            
00009AE0                            loc_93C4:
00009AE0 117C 0001 001A             		move.b	#1,$1A(a0)
00009AE6 4A68 0012                  		tst.w	$12(a0)
00009AEA 6B00                       		bmi.s	locret_93EA
00009AEC 117C 0000 001A             		move.b	#0,$1A(a0)
00009AF2 4EB9 0000 0000             		jsr	ObjHitFloor
00009AF8 4A41                       		tst.w	d1
00009AFA 6A00                       		bpl.s	locret_93EA
00009AFC D368 000C                  		add.w	d1,$C(a0)
00009B00 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B06                            
00009B06                            locret_93EA:
00009B06 4E75                       		rts	
00009B08                            ; ===========================================================================
00009B08                            
00009B08                            loc_93EC:
00009B08 08E8 0000 0001             		bset	#0,1(a0)
00009B0E 3028 0008                  		move.w	8(a0),d0
00009B12 9078 D008                  		sub.w	($FFFFD008).w,d0
00009B16 6400                       		bcc.s	locret_9402
00009B18 08A8 0000 0001             		bclr	#0,1(a0)
00009B1E                            
00009B1E                            locret_9402:
00009B1E 4E75                       		rts	
00009B20                            
00009B20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B20                            
00009B20                            
00009B20                            sub_9404:
00009B20 3038 D008                  		move.w	($FFFFD008).w,d0
00009B24 9068 0008                  		sub.w	8(a0),d0
00009B28 0440 00B8                  		subi.w	#$B8,d0
00009B2C 4E75                       		rts	
00009B2E                            ; End of function sub_9404
00009B2E                            
00009B2E                            ; ===========================================================================
00009B2E                            ; ---------------------------------------------------------------------------
00009B2E                            ; Object 29 - points that appear when you destroy something
00009B2E                            ; ---------------------------------------------------------------------------
00009B2E                            
00009B2E                            Obj29:					; XREF: Obj_Index
00009B2E 7000                       		moveq	#0,d0
00009B30 1028 0024                  		move.b	$24(a0),d0
00009B34 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009B38 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009B3C 6000 0000                  		bra.w	DisplaySprite
00009B40                            ; ===========================================================================
00009B40 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009B42 0000                       		dc.w Obj29_Slower-Obj29_Index
00009B44                            ; ===========================================================================
00009B44                            
00009B44                            Obj29_Main:				; XREF: Obj29_Index
00009B44 5428 0024                  		addq.b	#2,$24(a0)
00009B48 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009B50 317C 2797 0002             		move.w	#$2797,2(a0)
00009B56 117C 0004 0001             		move.b	#4,1(a0)
00009B5C 117C 0001 0018             		move.b	#1,$18(a0)
00009B62 117C 0008 0019             		move.b	#8,$19(a0)
00009B68 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009B6E                            
00009B6E                            Obj29_Slower:				; XREF: Obj29_Index
00009B6E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009B72 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009B76 6100 0000                  		bsr.w	SpeedToPos
00009B7A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009B80 4E75                       		rts	
00009B82                            ; ===========================================================================
00009B82                            ; ---------------------------------------------------------------------------
00009B82                            ; Sprite mappings - animals
00009B82                            ; ---------------------------------------------------------------------------
00009B82                            Map_obj28:
00009B82                            	include "_maps\obj28.asm"
00009B82                            ; ---------------------------------------------------------------------------
00009B82                            ; Sprite mappings - animals
00009B82                            ; ---------------------------------------------------------------------------
00009B82 0000                       		dc.w byte_9472-Map_obj28
00009B84 0000                       		dc.w byte_9478-Map_obj28
00009B86 0000                       		dc.w byte_946C-Map_obj28
00009B88 01                         byte_946C:	dc.b 1
00009B89 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B8E 01                         byte_9472:	dc.b 1
00009B8F F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009B94 01                         byte_9478:	dc.b 1
00009B95 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009B9A                            		even
00009B9A                            		even
00009B9A                            
00009B9A                            Map_obj28a:
00009B9A                            	include "_maps\obj28a.asm"
00009B9A                            ; ---------------------------------------------------------------------------
00009B9A                            ; Sprite mappings - animals
00009B9A                            ; ---------------------------------------------------------------------------
00009B9A 0000                       		dc.w byte_948A-Map_obj28a
00009B9C 0000                       		dc.w byte_9490-Map_obj28a
00009B9E 0000                       		dc.w byte_9484-Map_obj28a
00009BA0 01                         byte_9484:	dc.b 1
00009BA1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BA6 01                         byte_948A:	dc.b 1
00009BA7 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009BAC 01                         byte_9490:	dc.b 1
00009BAD FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009BB2                            		even
00009BB2                            		even
00009BB2                            
00009BB2                            Map_obj28b:
00009BB2                            	include "_maps\obj28b.asm"
00009BB2                            ; ---------------------------------------------------------------------------
00009BB2                            ; Sprite mappings - animals
00009BB2                            ; ---------------------------------------------------------------------------
00009BB2 0000                       		dc.w byte_94A2-Map_obj28b
00009BB4 0000                       		dc.w byte_94A8-Map_obj28b
00009BB6 0000                       		dc.w byte_949C-Map_obj28b
00009BB8 01                         byte_949C:	dc.b 1
00009BB9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BBE 01                         byte_94A2:	dc.b 1
00009BBF FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009BC4 01                         byte_94A8:	dc.b 1
00009BC5 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009BCA                            		even
00009BCA                            		even
00009BCA                            
00009BCA                            ; ---------------------------------------------------------------------------
00009BCA                            ; Sprite mappings - points that	appear when you	destroy	something
00009BCA                            ; ---------------------------------------------------------------------------
00009BCA                            Map_obj29:
00009BCA                            	include "_maps\obj29.asm"
00009BCA                            ; ---------------------------------------------------------------------------
00009BCA                            ; Sprite mappings - points that	appear when you	destroy	something
00009BCA                            ; ---------------------------------------------------------------------------
00009BCA 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009BCE 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009BD2 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009BD6 0000                       		dc.w byte_94E5-Map_obj29
00009BD8 01                         byte_94BC:	dc.b 1
00009BD9 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009BDE 01                         byte_94C2:	dc.b 1
00009BDF FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009BE4 01                         byte_94C8:	dc.b 1
00009BE5 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009BEA 01                         byte_94CE:	dc.b 1
00009BEB FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009BF0 01                         byte_94D4:	dc.b 1
00009BF1 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009BF6 02                         byte_94DA:	dc.b 2
00009BF7 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009BFC FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009C01 02                         byte_94E5:	dc.b 2
00009C02 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009C07 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009C0C                            		even
00009C0C                            		even
00009C0C                            
00009C0C                            ; ===========================================================================
00009C0C                            ; ---------------------------------------------------------------------------
00009C0C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009C0C                            ; ---------------------------------------------------------------------------
00009C0C                            
00009C0C                            Obj1F:					; XREF: Obj_Index
00009C0C 7000                       		moveq	#0,d0
00009C0E 1028 0024                  		move.b	$24(a0),d0
00009C12 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009C16 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009C1A                            ; ===========================================================================
00009C1A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009C1C 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009C1E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009C20 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009C22 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009C24                            ; ===========================================================================
00009C24                            
00009C24                            Obj1F_Main:				; XREF: Obj1F_Index
00009C24 117C 0010 0016             		move.b	#$10,$16(a0)
00009C2A 117C 0008 0017             		move.b	#8,$17(a0)
00009C30 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009C38 317C 0400 0002             		move.w	#$400,2(a0)
00009C3E 117C 0004 0001             		move.b	#4,1(a0)
00009C44 117C 0003 0018             		move.b	#3,$18(a0)
00009C4A 117C 0006 0020             		move.b	#6,$20(a0)
00009C50 117C 0015 0019             		move.b	#$15,$19(a0)
00009C56 6100 0000                  		bsr.w	ObjectFall
00009C5A 4EB9 0000 0000             		jsr	ObjHitFloor
00009C60 4A41                       		tst.w	d1
00009C62 6A00                       		bpl.s	locret_955A
00009C64 D368 000C                  		add.w	d1,$C(a0)
00009C68 1143 0026                  		move.b	d3,$26(a0)
00009C6C 317C 0000 0012             		move.w	#0,$12(a0)
00009C72 5428 0024                  		addq.b	#2,$24(a0)
00009C76                            
00009C76                            locret_955A:
00009C76 4E75                       		rts	
00009C78                            ; ===========================================================================
00009C78                            
00009C78                            Obj1F_Action:				; XREF: Obj1F_Index
00009C78 7000                       		moveq	#0,d0
00009C7A 1028 0025                  		move.b	$25(a0),d0
00009C7E 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009C82 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009C86 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009C8C 6100 0000                  		bsr.w	AnimateSprite
00009C90 6000 0000                  		bra.w	MarkObjGone
00009C94                            ; ===========================================================================
00009C94 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009C96 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009C98                            ; ===========================================================================
00009C98                            
00009C98                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009C98 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009C9C 6A00                       		bpl.s	locret_95B6
00009C9E 4A28 0001                  		tst.b	1(a0)
00009CA2 6A00                       		bpl.s	Obj1F_Move
00009CA4 0868 0001 0032             		bchg	#1,$32(a0)
00009CAA 6600                       		bne.s	Obj1F_MakeFire
00009CAC                            
00009CAC                            Obj1F_Move:
00009CAC 5428 0025                  		addq.b	#2,$25(a0)
00009CB0 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009CB6 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009CBC 6100 0000                  		bsr.w	Obj1F_SetAni
00009CC0 5600                       		addq.b	#3,d0
00009CC2 1140 001C                  		move.b	d0,$1C(a0)
00009CC6 0868 0000 0022             		bchg	#0,$22(a0)
00009CCC 6600                       		bne.s	locret_95B6
00009CCE 4468 0010                  		neg.w	$10(a0)		; change direction
00009CD2                            
00009CD2                            locret_95B6:
00009CD2 4E75                       		rts	
00009CD4                            ; ===========================================================================
00009CD4                            
00009CD4                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009CD4 317C 003B 0030             		move.w	#$3B,$30(a0)
00009CDA 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009CE0 6100 0000                  		bsr.w	SingleObjLoad
00009CE4 6600                       		bne.s	Obj1F_MakeFire2
00009CE6 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009CEA 137C 0006 0024             		move.b	#6,$24(a1)
00009CF0 3368 0008 0008             		move.w	8(a0),8(a1)
00009CF6 0469 0010 0008             		subi.w	#$10,8(a1)
00009CFC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D02 337C FF00 0010             		move.w	#-$100,$10(a1)
00009D08                            
00009D08                            Obj1F_MakeFire2:
00009D08 6100 0000                  		bsr.w	SingleObjLoad
00009D0C 6600                       		bne.s	locret_9618
00009D0E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009D12 137C 0006 0024             		move.b	#6,$24(a1)
00009D18 3368 0008 0008             		move.w	8(a0),8(a1)
00009D1E 0669 0010 0008             		addi.w	#$10,8(a1)
00009D24 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D2A 337C 0100 0010             		move.w	#$100,$10(a1)
00009D30                            
00009D30                            locret_9618:
00009D30 4E75                       		rts	
00009D32                            ; ===========================================================================
00009D32                            
00009D32                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009D32 5368 0030                  		subq.w	#1,$30(a0)
00009D36 6B00                       		bmi.s	loc_966E
00009D38 6100 0000                  		bsr.w	SpeedToPos
00009D3C 0868 0000 0032             		bchg	#0,$32(a0)
00009D42 6600                       		bne.s	loc_9654
00009D44 3628 0008                  		move.w	8(a0),d3
00009D48 0643 0010                  		addi.w	#$10,d3
00009D4C 0828 0000 0022             		btst	#0,$22(a0)
00009D52 6700                       		beq.s	loc_9640
00009D54 0443 0020                  		subi.w	#$20,d3
00009D58                            
00009D58                            loc_9640:
00009D58 4EB9 0000 0000             		jsr	ObjHitFloor2
00009D5E 0C41 FFF8                  		cmpi.w	#-8,d1
00009D62 6D00                       		blt.s	loc_966E
00009D64 0C41 000C                  		cmpi.w	#$C,d1
00009D68 6C00                       		bge.s	loc_966E
00009D6A 4E75                       		rts	
00009D6C                            ; ===========================================================================
00009D6C                            
00009D6C                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009D6C 4EB9 0000 0000             		jsr	ObjHitFloor
00009D72 D368 000C                  		add.w	d1,$C(a0)
00009D76 1143 0026                  		move.b	d3,$26(a0)
00009D7A 6100 0000                  		bsr.w	Obj1F_SetAni
00009D7E 5600                       		addq.b	#3,d0
00009D80 1140 001C                  		move.b	d0,$1C(a0)
00009D84 4E75                       		rts	
00009D86                            ; ===========================================================================
00009D86                            
00009D86                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009D86 5528 0025                  		subq.b	#2,$25(a0)
00009D8A 317C 003B 0030             		move.w	#59,$30(a0)
00009D90 317C 0000 0010             		move.w	#0,$10(a0)
00009D96 6100 0000                  		bsr.w	Obj1F_SetAni
00009D9A 1140 001C                  		move.b	d0,$1C(a0)
00009D9E 4E75                       		rts	
00009DA0                            ; ---------------------------------------------------------------------------
00009DA0                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009DA0                            ; ---------------------------------------------------------------------------
00009DA0                            
00009DA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DA0                            
00009DA0                            
00009DA0                            Obj1F_SetAni:				; XREF: loc_966E
00009DA0 7000                       		moveq	#0,d0
00009DA2 1628 0026                  		move.b	$26(a0),d3
00009DA6 6B00                       		bmi.s	loc_96A4
00009DA8 0C03 0006                  		cmpi.b	#6,d3
00009DAC 6500                       		bcs.s	locret_96A2
00009DAE 7001                       		moveq	#1,d0
00009DB0 0828 0000 0022             		btst	#0,$22(a0)
00009DB6 6600                       		bne.s	locret_96A2
00009DB8 7002                       		moveq	#2,d0
00009DBA                            
00009DBA                            locret_96A2:
00009DBA 4E75                       		rts	
00009DBC                            ; ===========================================================================
00009DBC                            
00009DBC                            loc_96A4:				; XREF: Obj1F_SetAni
00009DBC 0C03 00FA                  		cmpi.b	#-6,d3
00009DC0 6200                       		bhi.s	locret_96B6
00009DC2 7002                       		moveq	#2,d0
00009DC4 0828 0000 0022             		btst	#0,$22(a0)
00009DCA 6600                       		bne.s	locret_96B6
00009DCC 7001                       		moveq	#1,d0
00009DCE                            
00009DCE                            locret_96B6:
00009DCE 4E75                       		rts	
00009DD0                            ; End of function Obj1F_SetAni
00009DD0                            
00009DD0                            ; ===========================================================================
00009DD0                            
00009DD0                            Obj1F_Delete:				; XREF: Obj1F_Index
00009DD0 6100 0000                  		bsr.w	DeleteObject
00009DD4 4E75                       		rts	
00009DD6                            ; ===========================================================================
00009DD6                            ; ---------------------------------------------------------------------------
00009DD6                            ; Sub-object - missile that the	Crabmeat throws
00009DD6                            ; ---------------------------------------------------------------------------
00009DD6                            
00009DD6                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009DD6 5428 0024                  		addq.b	#2,$24(a0)
00009DDA 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009DE2 317C 0400 0002             		move.w	#$400,2(a0)
00009DE8 117C 0004 0001             		move.b	#4,1(a0)
00009DEE 117C 0003 0018             		move.b	#3,$18(a0)
00009DF4 117C 0087 0020             		move.b	#$87,$20(a0)
00009DFA 117C 0008 0019             		move.b	#8,$19(a0)
00009E00 317C FC00 0012             		move.w	#-$400,$12(a0)
00009E06 117C 0007 001C             		move.b	#7,$1C(a0)
00009E0C                            
00009E0C                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009E0C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E12 6100 0000                  		bsr.w	AnimateSprite
00009E16 6100 0000                  		bsr.w	ObjectFall
00009E1A 6100 0000                  		bsr.w	DisplaySprite
00009E1E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E22 0640 00E0                  		addi.w	#$E0,d0
00009E26 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E2A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009E2C 4E75                       		rts	
00009E2E                            ; ===========================================================================
00009E2E                            
00009E2E                            Obj1F_Delete2:
00009E2E 6000 0000                  		bra.w	DeleteObject
00009E32                            ; ===========================================================================
00009E32                            Ani_obj1F:
00009E32                            	include "_anim\obj1F.asm"
00009E32                            ; ---------------------------------------------------------------------------
00009E32                            ; Animation script - Crabmeat enemy
00009E32                            ; ---------------------------------------------------------------------------
00009E32 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009E38 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009E3E 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009E42 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009E46 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009E4A 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009E4E 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009E54 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009E5A 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009E60 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009E64 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009E68                            		even
00009E68                            		even
00009E68                            
00009E68                            ; ---------------------------------------------------------------------------
00009E68                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009E68                            ; ---------------------------------------------------------------------------
00009E68                            Map_obj1F:
00009E68                            	include "_maps\obj1F.asm"
00009E68                            Map_1514:
00009E68 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009E6A 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009E6C 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009E6E 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009E70 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009E72 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009E74 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009E76 03                         Map_1514_E: 	dc.b $3
00009E77 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E7C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E81 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E86 03                         Map_1514_1E: 	dc.b $3
00009E87 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E8C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E91 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E96 03                         Map_1514_2E: 	dc.b $3
00009E97 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E9C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EA1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EA6 03                         Map_1514_3E: 	dc.b $3
00009EA7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EAC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EB1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EB6 03                         Map_1514_4E: 	dc.b $3
00009EB7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EBC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EC1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EC6 01                         Map_1514_5E: 	dc.b $1
00009EC7 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009ECC 01                         Map_1514_64: 	dc.b $1
00009ECD F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009ED2                            	even
00009ED2                            	even
00009ED2                            
00009ED2                            ; ===========================================================================
00009ED2                            ; ---------------------------------------------------------------------------
00009ED2                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009ED2                            ; ---------------------------------------------------------------------------
00009ED2                            
00009ED2                            Obj22:					; XREF: Obj_Index
00009ED2 7000                       		moveq	#0,d0
00009ED4 1028 0024                  		move.b	$24(a0),d0
00009ED8 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009EDC 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009EE0                            ; ===========================================================================
00009EE0 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009EE2 0000                       		dc.w Obj22_Action-Obj22_Index
00009EE4 0000                       		dc.w Obj22_Delete-Obj22_Index
00009EE6                            ; ===========================================================================
00009EE6                            
00009EE6                            Obj22_Main:				; XREF: Obj22_Index
00009EE6 5428 0024                  		addq.b	#2,$24(a0)
00009EEA 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009EF2 317C 0444 0002             		move.w	#$444,2(a0)
00009EF8 117C 0004 0001             		move.b	#4,1(a0)
00009EFE 117C 0003 0018             		move.b	#3,$18(a0)
00009F04 117C 0008 0020             		move.b	#8,$20(a0)
00009F0A 117C 0018 0019             		move.b	#$18,$19(a0)
00009F10                            
00009F10                            Obj22_Action:				; XREF: Obj22_Index
00009F10 7000                       		moveq	#0,d0
00009F12 1028 0025                  		move.b	$25(a0),d0
00009F16 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009F1A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009F1E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009F24 6100 0000                  		bsr.w	AnimateSprite
00009F28 6000 0000                  		bra.w	MarkObjGone
00009F2C                            ; ===========================================================================
00009F2C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009F2E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009F30                            ; ===========================================================================
00009F30                            
00009F30                            Obj22_Move:				; XREF: Obj22_Index2
00009F30 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F34 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009F36 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009F3C 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009F3E 5428 0025                  		addq.b	#2,$25(a0)
00009F42 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009F48 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009F4E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009F54 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F5A 6600                       		bne.s	locret_986C	; if not, branch
00009F5C 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009F60                            
00009F60                            locret_986C:
00009F60 4E75                       		rts	
00009F62                            ; ===========================================================================
00009F62                            
00009F62                            Obj22_Fire:				; XREF: Obj22_Move
00009F62 6100 0000                  		bsr.w	SingleObjLoad
00009F66 6600                       		bne.s	locret_98D0
00009F68 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009F6C 3368 0008 0008             		move.w	8(a0),8(a1)
00009F72 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F78 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009F7E 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009F84 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009F8A 303C 0018                  		move.w	#$18,d0
00009F8E 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F94 6600                       		bne.s	loc_98AA	; if not, branch
00009F96 4440                       		neg.w	d0
00009F98 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009F9C                            
00009F9C                            loc_98AA:
00009F9C D169 0008                  		add.w	d0,8(a1)
00009FA0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009FA6 337C 000E 0032             		move.w	#$E,$32(a1)
00009FAC 2348 003C                  		move.l	a0,$3C(a1)
00009FB0 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009FB6 317C 003B 0032             		move.w	#$3B,$32(a0)
00009FBC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009FC2                            
00009FC2                            locret_98D0:
00009FC2 4E75                       		rts	
00009FC4                            ; ===========================================================================
00009FC4                            
00009FC4                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009FC4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009FC8 6B00                       		bmi.s	Obj22_ChgDir
00009FCA 6100 0000                  		bsr.w	SpeedToPos
00009FCE 4A28 0034                  		tst.b	$34(a0)
00009FD2 6600                       		bne.s	locret_992A
00009FD4 3038 D008                  		move.w	($FFFFD008).w,d0
00009FD8 9068 0008                  		sub.w	8(a0),d0
00009FDC 6A00                       		bpl.s	Obj22_SetNrSonic
00009FDE 4440                       		neg.w	d0
00009FE0                            
00009FE0                            Obj22_SetNrSonic:
00009FE0 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009FE4 6400                       		bcc.s	locret_992A	; if not, branch
00009FE6 4A28 0001                  		tst.b	1(a0)
00009FEA 6A00                       		bpl.s	locret_992A
00009FEC 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009FF2 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009FF8 6000                       		bra.s	Obj22_Stop
00009FFA                            ; ===========================================================================
00009FFA                            
00009FFA                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009FFA 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A000 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A006 317C 003B 0032             		move.w	#59,$32(a0)
0000A00C                            
0000A00C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A00C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A010 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A016 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A01C                            
0000A01C                            locret_992A:
0000A01C 4E75                       		rts	
0000A01E                            ; ===========================================================================
0000A01E                            
0000A01E                            Obj22_Delete:				; XREF: Obj22_Index
0000A01E 6100 0000                  		bsr.w	DeleteObject
0000A022 4E75                       		rts	
0000A024                            ; ===========================================================================
0000A024                            ; ---------------------------------------------------------------------------
0000A024                            ; Object 23 - missile that Buzz	Bomber throws
0000A024                            ; ---------------------------------------------------------------------------
0000A024                            
0000A024                            Obj23:					; XREF: Obj_Index
0000A024 7000                       		moveq	#0,d0
0000A026 1028 0024                  		move.b	$24(a0),d0
0000A02A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A02E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A032                            ; ===========================================================================
0000A032 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A034 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A036 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A038 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A03A 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A03C                            ; ===========================================================================
0000A03C                            
0000A03C                            Obj23_Main:				; XREF: Obj23_Index
0000A03C 5368 0032                  		subq.w	#1,$32(a0)
0000A040 6A00                       		bpl.s	Obj23_ChkCancel
0000A042 5428 0024                  		addq.b	#2,$24(a0)
0000A046 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A04E 317C 2444 0002             		move.w	#$2444,2(a0)
0000A054 117C 0004 0001             		move.b	#4,1(a0)
0000A05A 117C 0003 0018             		move.b	#3,$18(a0)
0000A060 117C 0008 0019             		move.b	#8,$19(a0)
0000A066 0228 0003 0022             		andi.b	#3,$22(a0)
0000A06C 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A070 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A072 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A078 117C 0087 0020             		move.b	#$87,$20(a0)
0000A07E 117C 0001 001C             		move.b	#1,$1C(a0)
0000A084 6000                       		bra.s	Obj23_Animate2
0000A086                            ; ===========================================================================
0000A086                            
0000A086                            Obj23_Animate:				; XREF: Obj23_Index
0000A086 6100                       		bsr.s	Obj23_ChkCancel
0000A088 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A08E 6100 0000                  		bsr.w	AnimateSprite
0000A092 6000 0000                  		bra.w	DisplaySprite
0000A096                            ; ---------------------------------------------------------------------------
0000A096                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A096                            ; destroyed, and if it has, then cancel	the missile
0000A096                            ; ---------------------------------------------------------------------------
0000A096                            
0000A096                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A096                            
0000A096                            
0000A096                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A096 2268 003C                  		movea.l	$3C(a0),a1
0000A09A 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A09E 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A0A0 4E75                       		rts	
0000A0A2                            ; End of function Obj23_ChkCancel
0000A0A2                            
0000A0A2                            ; ===========================================================================
0000A0A2                            
0000A0A2                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A0A2 0828 0007 0022             		btst	#7,$22(a0)
0000A0A8 6600                       		bne.s	Obj23_Explode
0000A0AA 117C 0087 0020             		move.b	#$87,$20(a0)
0000A0B0 117C 0001 001C             		move.b	#1,$1C(a0)
0000A0B6 6100 0000                  		bsr.w	SpeedToPos
0000A0BA 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0C0 6100 0000                  		bsr.w	AnimateSprite
0000A0C4 6100 0000                  		bsr.w	DisplaySprite
0000A0C8 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A0CC 0640 00E0                  		addi.w	#$E0,d0
0000A0D0 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A0D4 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A0D6 4E75                       		rts	
0000A0D8                            ; ===========================================================================
0000A0D8                            
0000A0D8                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A0D8 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A0DC 117C 0000 0024             		move.b	#0,$24(a0)
0000A0E2 6000 F2D0                  		bra.w	Obj24
0000A0E6                            ; ===========================================================================
0000A0E6                            
0000A0E6                            Obj23_Delete:				; XREF: Obj23_Index
0000A0E6 6100 0000                  		bsr.w	DeleteObject
0000A0EA 4E75                       		rts	
0000A0EC                            ; ===========================================================================
0000A0EC                            
0000A0EC                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A0EC 4A28 0001                  		tst.b	1(a0)
0000A0F0 6AF4                       		bpl.s	Obj23_Delete
0000A0F2 6100 0000                  		bsr.w	SpeedToPos
0000A0F6                            
0000A0F6                            Obj23_Animate2:				; XREF: Obj23_Main
0000A0F6 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0FC 6100 0000                  		bsr.w	AnimateSprite
0000A100 6100 0000                  		bsr.w	DisplaySprite
0000A104 4E75                       		rts	
0000A106                            ; ===========================================================================
0000A106                            Ani_obj22:
0000A106                            	include "_anim\obj22.asm"
0000A106                            ; ---------------------------------------------------------------------------
0000A106                            ; Animation script - Buzz Bomber enemy
0000A106                            ; ---------------------------------------------------------------------------
0000A106 0000                       		dc.w byte_9A1E-Ani_obj22
0000A108 0000                       		dc.w byte_9A22-Ani_obj22
0000A10A 0000                       		dc.w byte_9A26-Ani_obj22
0000A10C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A110 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A114 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A118                            		even
0000A118                            		even
0000A118                            
0000A118                            Ani_obj23:
0000A118                            	include "_anim\obj23.asm"
0000A118                            ; ---------------------------------------------------------------------------
0000A118                            ; Animation script - missile that Buzz Bomber throws
0000A118                            ; ---------------------------------------------------------------------------
0000A118 0000                       		dc.w byte_9A2E-Ani_obj23
0000A11A 0000                       		dc.w byte_9A32-Ani_obj23
0000A11C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A120 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A124                            		even
0000A124                            		even
0000A124                            
0000A124                            ; ---------------------------------------------------------------------------
0000A124                            ; Sprite mappings - Buzz Bomber	enemy
0000A124                            ; ---------------------------------------------------------------------------
0000A124                            Map_obj22:
0000A124                            	include "_maps\obj22.asm"
0000A124                            Map_e97a:
0000A124 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A126 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A128 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A12A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A12C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A12E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A130 06                         Map_e97a_C: 	dc.b $6
0000A131 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A136 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A13B 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A140 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A145 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A14A F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A14F 06                         Map_e97a_2B: 	dc.b $6
0000A150 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A155 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A15A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A15F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A164 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A169 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A16E 07                         Map_e97a_4A: 	dc.b $7
0000A16F 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A174 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A179 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A17E 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A183 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A188 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A18D F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A192 07                         Map_e97a_6E: 	dc.b $7
0000A193 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A198 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A19D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A1A2 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A1A7 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A1AC F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A1B1 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A1B6 06                         Map_e97a_92: 	dc.b $6
0000A1B7 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1BC 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1C1 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1C6 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1CB F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A1D0 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A1D5 04                         Map_e97a_B1: 	dc.b $4
0000A1D6 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1DB 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1E0 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1E5 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1EA                            	even
0000A1EA                            	even
0000A1EA                            
0000A1EA                            ; ---------------------------------------------------------------------------
0000A1EA                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1EA                            ; ---------------------------------------------------------------------------
0000A1EA                            Map_obj23:
0000A1EA                            	include "_maps\obj23.asm"
0000A1EA                            ; ---------------------------------------------------------------------------
0000A1EA                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1EA                            ; ---------------------------------------------------------------------------
0000A1EA 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A1EE 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A1F2 01                         byte_9B0E:	dc.b 1
0000A1F3 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A1F8 01                         byte_9B14:	dc.b 1
0000A1F9 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A1FE 01                         byte_9B1A:	dc.b 1
0000A1FF F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A204 01                         byte_9B20:	dc.b 1
0000A205 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A20A                            		even
0000A20A                            		even
0000A20A                            
0000A20A                            ; ===========================================================================
0000A20A                            ; ---------------------------------------------------------------------------
0000A20A                            ; Object 25 - rings
0000A20A                            ; ---------------------------------------------------------------------------
0000A20A                            
0000A20A                            Obj25:					; XREF: Obj_Index
0000A20A 7000                       		moveq	#0,d0
0000A20C 1028 0024                  		move.b	$24(a0),d0
0000A210 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A214 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A218                            ; ===========================================================================
0000A218 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A21A 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A21C 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A21E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A220 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A222                            ; ---------------------------------------------------------------------------
0000A222                            ; Distances between rings (format: horizontal, vertical)
0000A222                            ; ---------------------------------------------------------------------------
0000A222 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A224 1800                       		dc.b $18, 0		; horizontal normal
0000A226 2000                       		dc.b $20, 0		; horizontal wide
0000A228 0010                       		dc.b 0,	$10		; vertical tight
0000A22A 0018                       		dc.b 0,	$18		; vertical normal
0000A22C 0020                       		dc.b 0,	$20		; vertical wide
0000A22E 1010                       		dc.b $10, $10		; diagonal
0000A230 1818                       		dc.b $18, $18
0000A232 2020                       		dc.b $20, $20
0000A234 F010                       		dc.b $F0, $10
0000A236 E818                       		dc.b $E8, $18
0000A238 E020                       		dc.b $E0, $20
0000A23A 1008                       		dc.b $10, 8
0000A23C 1810                       		dc.b $18, $10
0000A23E F008                       		dc.b $F0, 8
0000A240 E810                       		dc.b $E8, $10
0000A242                            ; ===========================================================================
0000A242                            
0000A242                            Obj25_Main:				; XREF: Obj25_Index
0000A242 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A246 7000                       		moveq	#0,d0
0000A248 1028 0023                  		move.b	$23(a0),d0
0000A24C 45F2 0002                  		lea	2(a2,d0.w),a2
0000A250 1812                       		move.b	(a2),d4
0000A252 1228 0028                  		move.b	$28(a0),d1
0000A256 1001                       		move.b	d1,d0
0000A258 0241 0007                  		andi.w	#7,d1
0000A25C 0C41 0007                  		cmpi.w	#7,d1
0000A260 6600                       		bne.s	loc_9B80
0000A262 7206                       		moveq	#6,d1
0000A264                            
0000A264                            loc_9B80:
0000A264 4841                       		swap	d1
0000A266 323C 0000                  		move.w	#0,d1
0000A26A E808                       		lsr.b	#4,d0
0000A26C D040                       		add.w	d0,d0
0000A26E 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A272 4885                       		ext.w	d5
0000A274 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A278 4886                       		ext.w	d6
0000A27A 2248                       		movea.l	a0,a1
0000A27C 3428 0008                  		move.w	8(a0),d2
0000A280 3628 000C                  		move.w	$C(a0),d3
0000A284 E20C                       		lsr.b	#1,d4
0000A286 6500                       		bcs.s	loc_9C02
0000A288 0892 0007                  		bclr	#7,(a2)
0000A28C 6000                       		bra.s	loc_9BBA
0000A28E                            ; ===========================================================================
0000A28E                            
0000A28E                            Obj25_MakeRings:
0000A28E 4841                       		swap	d1
0000A290 E20C                       		lsr.b	#1,d4
0000A292 6500                       		bcs.s	loc_9C02
0000A294 0892 0007                  		bclr	#7,(a2)
0000A298 6100 0000                  		bsr.w	SingleObjLoad
0000A29C 6600                       		bne.s	loc_9C0E
0000A29E                            
0000A29E                            loc_9BBA:				; XREF: Obj25_Main
0000A29E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A2A2 5429 0024                  		addq.b	#2,$24(a1)
0000A2A6 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A2AA 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A2B0 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A2B4 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A2BC 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A2C2 137C 0004 0001             		move.b	#4,1(a1)
0000A2C8 137C 0002 0018             		move.b	#2,$18(a1)
0000A2CE 137C 0047 0020             		move.b	#$47,$20(a1)
0000A2D4 137C 0008 0019             		move.b	#8,$19(a1)
0000A2DA 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A2E0 1341 0034                  		move.b	d1,$34(a1)
0000A2E4                            
0000A2E4                            loc_9C02:
0000A2E4 5241                       		addq.w	#1,d1
0000A2E6 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A2E8 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A2EA 4841                       		swap	d1
0000A2EC 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A2F0                            
0000A2F0                            loc_9C0E:
0000A2F0 0812 0000                  		btst	#0,(a2)
0000A2F4 6600 0000                  		bne.w	DeleteObject
0000A2F8                            
0000A2F8                            Obj25_Animate:				; XREF: Obj25_Index
0000A2F8 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A2FE 6100 0000                  		bsr.w	DisplaySprite
0000A302 3028 0032                  		move.w	$32(a0),d0
0000A306 0240 FF80                  		andi.w	#$FF80,d0
0000A30A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A30E 0441 0080                  		subi.w	#$80,d1
0000A312 0241 FF80                  		andi.w	#$FF80,d1
0000A316 9041                       		sub.w	d1,d0
0000A318 0C40 0280                  		cmpi.w	#$280,d0
0000A31C 6200                       		bhi.s	Obj25_Delete
0000A31E 4E75                       		rts	
0000A320                            ; ===========================================================================
0000A320                            
0000A320                            Obj25_Collect:				; XREF: Obj25_Index
0000A320 5428 0024                  		addq.b	#2,$24(a0)
0000A324 117C 0000 0020             		move.b	#0,$20(a0)
0000A32A 117C 0001 0018             		move.b	#1,$18(a0)
0000A330 6100 0000                  		bsr.w	CollectRing
0000A334 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A338 7000                       		moveq	#0,d0
0000A33A 1028 0023                  		move.b	$23(a0),d0
0000A33E 1228 0034                  		move.b	$34(a0),d1
0000A342 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A346                            
0000A346                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A346 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A34C 6100 0000                  		bsr.w	AnimateSprite
0000A350 6000 0000                  		bra.w	DisplaySprite
0000A354                            ; ===========================================================================
0000A354                            
0000A354                            Obj25_Delete:				; XREF: Obj25_Index
0000A354 6000 0000                  		bra.w	DeleteObject
0000A358                            
0000A358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A358                            
0000A358                            
0000A358                            CollectRing:				; XREF: Obj25_Collect
0000A358 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A35C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A362 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A366 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A36C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A36E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A374 6700                       		beq.s	loc_9CA4
0000A376 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A37C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A37E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A384 6600                       		bne.s	Obj25_PlaySnd
0000A386                            
0000A386                            loc_9CA4:
0000A386 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A38A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A38E 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A392                            
0000A392                            Obj25_PlaySnd:
0000A392 4EF9 0000 13B6             		jmp	(PlaySound_Special).l
0000A398                            ; End of function CollectRing
0000A398                            
0000A398                            ; ===========================================================================
0000A398                            ; ---------------------------------------------------------------------------
0000A398                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A398                            ; ---------------------------------------------------------------------------
0000A398                            
0000A398                            Obj37:					; XREF: Obj_Index
0000A398 7000                       		moveq	#0,d0
0000A39A 1028 0024                  		move.b	$24(a0),d0
0000A39E 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A3A2 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A3A6                            ; ===========================================================================
0000A3A6 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A3A8 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A3AA 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A3AC 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A3AE 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A3B0                            ; ===========================================================================
0000A3B0                            
0000A3B0                            Obj37_CountRings:			; XREF: Obj37_Index
0000A3B0 2248                       		movea.l	a0,a1
0000A3B2 7A00                       		moveq	#0,d5
0000A3B4 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A3B8 7020                       		moveq	#32,d0
0000A3BA BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A3BC 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A3BE 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A3C0                            
0000A3C0                            loc_9CDE:
0000A3C0 5345                       		subq.w	#1,d5
0000A3C2 383C 0288                  		move.w	#$288,d4
0000A3C6 6000                       		bra.s	Obj37_MakeRings
0000A3C8                            ; ===========================================================================
0000A3C8                            
0000A3C8                            Obj37_Loop:
0000A3C8 6100 0000                  		bsr.w	SingleObjLoad
0000A3CC 6600 0000                  		bne.w	Obj37_ResetCounter
0000A3D0                            
0000A3D0                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A3D0 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A3D4 5429 0024                  		addq.b	#2,$24(a1)
0000A3D8 137C 0008 0016             		move.b	#8,$16(a1)
0000A3DE 137C 0008 0017             		move.b	#8,$17(a1)
0000A3E4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3F0 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A3F8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A3FE 137C 0004 0001             		move.b	#4,1(a1)
0000A404 137C 0003 0018             		move.b	#3,$18(a1)
0000A40A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A410 137C 0008 0019             		move.b	#8,$19(a1)
0000A416 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A41C 4A44                       		tst.w	d4
0000A41E 6B00                       		bmi.s	loc_9D62
0000A420 3004                       		move.w	d4,d0
0000A422 6100 8734                  		bsr.w	CalcSine
0000A426 3404                       		move.w	d4,d2
0000A428 E04A                       		lsr.w	#8,d2
0000A42A E560                       		asl.w	d2,d0
0000A42C E561                       		asl.w	d2,d1
0000A42E 3400                       		move.w	d0,d2
0000A430 3601                       		move.w	d1,d3
0000A432 0604 0010                  		addi.b	#$10,d4
0000A436 6400                       		bcc.s	loc_9D62
0000A438 0444 0080                  		subi.w	#$80,d4
0000A43C 6400                       		bcc.s	loc_9D62
0000A43E 383C 0288                  		move.w	#$288,d4
0000A442                            
0000A442                            loc_9D62:
0000A442 3342 0010                  		move.w	d2,$10(a1)
0000A446 3343 0012                  		move.w	d3,$12(a1)
0000A44A 4442                       		neg.w	d2
0000A44C 4444                       		neg.w	d4
0000A44E 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A452                            
0000A452                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A452 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A458 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A45E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A464 303C 00C6                  		move.w	#$C6,d0
0000A468 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A46E                            
0000A46E                            Obj37_Bounce:				; XREF: Obj37_Index
0000A46E 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A474 6100 0000                  		bsr.w	SpeedToPos
0000A478 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A47E 6B00                       		bmi.s	Obj37_ChkDel
0000A480 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A484 D007                       		add.b	d7,d0
0000A486 0200 0003                  		andi.b	#3,d0
0000A48A 6600                       		bne.s	Obj37_ChkDel
0000A48C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A492 4A41                       		tst.w	d1
0000A494 6A00                       		bpl.s	Obj37_ChkDel
0000A496 D368 000C                  		add.w	d1,$C(a0)
0000A49A 3028 0012                  		move.w	$12(a0),d0
0000A49E E440                       		asr.w	#2,d0
0000A4A0 9168 0012                  		sub.w	d0,$12(a0)
0000A4A4 4468 0012                  		neg.w	$12(a0)
0000A4A8                            
0000A4A8                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A4A8 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A4AC 6700                       		beq.s	Obj37_Delete
0000A4AE 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A4B2 0640 00E0                  		addi.w	#$E0,d0
0000A4B6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A4BA 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A4BC 6000 0000                  		bra.w	DisplaySprite
0000A4C0                            ; ===========================================================================
0000A4C0                            
0000A4C0                            Obj37_Collect:				; XREF: Obj37_Index
0000A4C0 5428 0024                  		addq.b	#2,$24(a0)
0000A4C4 117C 0000 0020             		move.b	#0,$20(a0)
0000A4CA 117C 0001 0018             		move.b	#1,$18(a0)
0000A4D0 6100 FE86                  		bsr.w	CollectRing
0000A4D4                            
0000A4D4                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A4D4 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A4DA 6100 0000                  		bsr.w	AnimateSprite
0000A4DE 6000 0000                  		bra.w	DisplaySprite
0000A4E2                            ; ===========================================================================
0000A4E2                            
0000A4E2                            Obj37_Delete:				; XREF: Obj37_Index
0000A4E2 6000 0000                  		bra.w	DeleteObject
0000A4E6                            ; ===========================================================================
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6                            ; Object 4B - giant ring for entry to special stage
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6                            
0000A4E6                            Obj4B:					; XREF: Obj_Index
0000A4E6 7000                       		moveq	#0,d0
0000A4E8 1028 0024                  		move.b	$24(a0),d0
0000A4EC 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A4F0 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A4F4                            ; ===========================================================================
0000A4F4 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A4F6 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A4F8 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A4FA 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A4FC                            ; ===========================================================================
0000A4FC                            
0000A4FC                            Obj4B_Main:				; XREF: Obj4B_Index
0000A4FC 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A504 317C 2400 0002             		move.w	#$2400,2(a0)
0000A50A 0028 0004 0001             		ori.b	#4,1(a0)
0000A510 117C 0040 0019             		move.b	#$40,$19(a0)
0000A516 4A28 0001                  		tst.b	1(a0)
0000A51A 6A00                       		bpl.s	Obj4B_Animate
0000A51C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A522 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A526 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A52C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A52E 4E75                       		rts	
0000A530                            ; ===========================================================================
0000A530                            
0000A530                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A530 5428 0024                  		addq.b	#2,$24(a0)
0000A534 117C 0002 0018             		move.b	#2,$18(a0)
0000A53A 117C 0052 0020             		move.b	#$52,$20(a0)
0000A540 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A546                            
0000A546                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A546 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A54C 3028 0008                  		move.w	8(a0),d0
0000A550 0240 FF80                  		andi.w	#$FF80,d0
0000A554 3238 F700                  		move.w	($FFFFF700).w,d1
0000A558 0441 0080                  		subi.w	#$80,d1
0000A55C 0241 FF80                  		andi.w	#$FF80,d1
0000A560 9041                       		sub.w	d1,d0
0000A562 0C40 0280                  		cmpi.w	#$280,d0
0000A566 6200 0000                  		bhi.w	DeleteObject
0000A56A 6000 0000                  		bra.w	DisplaySprite
0000A56E                            ; ===========================================================================
0000A56E                            
0000A56E                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A56E 5528 0024                  		subq.b	#2,$24(a0)
0000A572 117C 0000 0020             		move.b	#0,$20(a0)
0000A578 6100 0000                  		bsr.w	SingleObjLoad
0000A57C 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A580 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A584 3368 0008 0008             		move.w	8(a0),8(a1)
0000A58A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A590 2348 003C                  		move.l	a0,$3C(a1)
0000A594 3038 D008                  		move.w	($FFFFD008).w,d0
0000A598 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A59C 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A59E 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A5A4                            
0000A5A4                            Obj4B_PlaySnd:
0000A5A4 303C 00C3                  		move.w	#$C3,d0
0000A5A8 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A5AE 6096                       		bra.s	Obj4B_Animate
0000A5B0                            ; ===========================================================================
0000A5B0                            
0000A5B0                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A5B0 6000 0000                  		bra.w	DeleteObject
0000A5B4                            ; ===========================================================================
0000A5B4                            ; ---------------------------------------------------------------------------
0000A5B4                            ; Object 7C - flash effect when	you collect the	giant ring
0000A5B4                            ; ---------------------------------------------------------------------------
0000A5B4                            
0000A5B4                            Obj7C:					; XREF: Obj_Index
0000A5B4 7000                       		moveq	#0,d0
0000A5B6 1028 0024                  		move.b	$24(a0),d0
0000A5BA 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A5BE 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A5C2                            ; ===========================================================================
0000A5C2 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A5C4 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A5C6 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A5C8                            ; ===========================================================================
0000A5C8                            
0000A5C8                            Obj7C_Main:				; XREF: Obj7C_Index
0000A5C8 5428 0024                  		addq.b	#2,$24(a0)
0000A5CC 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A5D4 317C 2462 0002             		move.w	#$2462,2(a0)
0000A5DA 0028 0004 0001             		ori.b	#4,1(a0)
0000A5E0 117C 0000 0018             		move.b	#0,$18(a0)
0000A5E6 117C 0020 0019             		move.b	#$20,$19(a0)
0000A5EC 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A5F2                            
0000A5F2                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A5F2 6100                       		bsr.s	Obj7C_Collect
0000A5F4 3028 0008                  		move.w	8(a0),d0
0000A5F8 0240 FF80                  		andi.w	#$FF80,d0
0000A5FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A600 0441 0080                  		subi.w	#$80,d1
0000A604 0241 FF80                  		andi.w	#$FF80,d1
0000A608 9041                       		sub.w	d1,d0
0000A60A 0C40 0280                  		cmpi.w	#$280,d0
0000A60E 6200 0000                  		bhi.w	DeleteObject
0000A612 6000 0000                  		bra.w	DisplaySprite
0000A616                            
0000A616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A616                            
0000A616                            
0000A616                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A616 5328 001E                  		subq.b	#1,$1E(a0)
0000A61A 6A00                       		bpl.s	locret_9F76
0000A61C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A622 5228 001A                  		addq.b	#1,$1A(a0)
0000A626 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A62C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A62E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A634 6600                       		bne.s	locret_9F76	; if not, branch
0000A636 2268 003C                  		movea.l	$3C(a0),a1
0000A63A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A640 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A646 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A64C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A650 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A654                            
0000A654                            locret_9F76:
0000A654 4E75                       		rts	
0000A656                            ; ===========================================================================
0000A656                            
0000A656                            Obj7C_End:				; XREF: Obj7C_Collect
0000A656 5428 0024                  		addq.b	#2,$24(a0)
0000A65A 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A660 588F                       		addq.l	#4,sp
0000A662 4E75                       		rts	
0000A664                            ; End of function Obj7C_Collect
0000A664                            
0000A664                            ; ===========================================================================
0000A664                            
0000A664                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A664 6000 0000                  		bra.w	DeleteObject
0000A668                            ; ===========================================================================
0000A668                            Ani_obj25:
0000A668                            	include "_anim\obj25.asm"
0000A668                            ; ---------------------------------------------------------------------------
0000A668                            ; Animation script - ring
0000A668                            ; ---------------------------------------------------------------------------
0000A668 0000                       		dc.w byte_9F8C-Ani_obj25
0000A66A 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A670                            		even
0000A670                            		even
0000A670                            
0000A670                            ; ---------------------------------------------------------------------------
0000A670                            ; Sprite mappings - rings
0000A670                            ; ---------------------------------------------------------------------------
0000A670                            Map_obj25:
0000A670                            	include "_maps\obj25.asm"
0000A670                            ; ---------------------------------------------------------------------------
0000A670                            ; Sprite mappings - rings
0000A670                            ; ---------------------------------------------------------------------------
0000A670 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A674 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A678 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A67C 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A680 01                         byte_9FA2:	dc.b 1
0000A681 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A686 01                         byte_9FA8:	dc.b 1
0000A687 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A68C 01                         byte_9FAE:	dc.b 1
0000A68D F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A692 01                         byte_9FB4:	dc.b 1
0000A693 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A698 01                         byte_9FBA:	dc.b 1
0000A699 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A69E 01                         byte_9FC0:	dc.b 1
0000A69F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A6A4 01                         byte_9FC6:	dc.b 1
0000A6A5 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A6AA 01                         byte_9FCC:	dc.b 1
0000A6AB F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A6B0                            		even
0000A6B0                            		even
0000A6B0                            
0000A6B0                            ; ---------------------------------------------------------------------------
0000A6B0                            ; Sprite mappings - giant ring
0000A6B0                            ; ---------------------------------------------------------------------------
0000A6B0                            Map_obj4B:
0000A6B0                            	include "_maps\obj4B.asm"
0000A6B0                            ; ---------------------------------------------------------------------------
0000A6B0                            ; Sprite mappings - giant ring
0000A6B0                            ; ---------------------------------------------------------------------------
0000A6B0 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A6B4 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A6B8 0A                         byte_9FDA:	dc.b $A
0000A6B9 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A6BE E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A6C3 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A6C8 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A6CD F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A6D2 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A6D7 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A6DC 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A6E1 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A6E6 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A6EB 08                         byte_A00D:	dc.b 8
0000A6EC E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A6F1 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A6F6 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A6FB F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A700 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A705 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A70A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A70F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A714 04                         byte_A036:	dc.b 4
0000A715 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A71A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A71F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A724 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A729 08                         byte_A04B:	dc.b 8
0000A72A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A72F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A734 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A739 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A73E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A743 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A748 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A74D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A752                            		even
0000A752                            		even
0000A752                            
0000A752                            ; ---------------------------------------------------------------------------
0000A752                            ; Sprite mappings - flash effect when you collect the giant ring
0000A752                            ; ---------------------------------------------------------------------------
0000A752                            Map_obj7C:
0000A752                            	include "_maps\obj7C.asm"
0000A752                            ; ---------------------------------------------------------------------------
0000A752                            ; Sprite mappings - flash effect when you collect the giant ring
0000A752                            ; ---------------------------------------------------------------------------
0000A752 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A756 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A75A 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A75E 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A762 02                         byte_A084:	dc.b 2
0000A763 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A768 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A76D 04                         byte_A08F:	dc.b 4
0000A76E E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A773 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A778 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A77D 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A782 04                         byte_A0A4:	dc.b 4
0000A783 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A788 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A78D 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A792 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A797 04                         byte_A0B9:	dc.b 4
0000A798 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A79D E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A7A2 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A7A7 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A7AC 04                         byte_A0CE:	dc.b 4
0000A7AD E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A7B2 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A7B7 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A7BC 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A7C1 04                         byte_A0E3:	dc.b 4
0000A7C2 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A7C7 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A7CC 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A7D1 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A7D6 02                         byte_A0F8:	dc.b 2
0000A7D7 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A7DC 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A7E1 04                         byte_A103:	dc.b 4
0000A7E2 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A7E7 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A7EC 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A7F1 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A7F6                            		even
0000A7F6                            		even
0000A7F6                            
0000A7F6                            ; ===========================================================================
0000A7F6                            ; ---------------------------------------------------------------------------
0000A7F6                            ; Object 26 - monitors
0000A7F6                            ; ---------------------------------------------------------------------------
0000A7F6                            
0000A7F6                            Obj26:					; XREF: Obj_Index
0000A7F6 7000                       		moveq	#0,d0
0000A7F8 1028 0024                  		move.b	$24(a0),d0
0000A7FC 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A800 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A804                            ; ===========================================================================
0000A804 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A806 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A808 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A80A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A80C 0000                       		dc.w Obj26_Display-Obj26_Index
0000A80E                            ; ===========================================================================
0000A80E                            
0000A80E                            Obj26_Main:				; XREF: Obj26_Index
0000A80E 5428 0024                  		addq.b	#2,$24(a0)
0000A812 117C 000E 0016             		move.b	#$E,$16(a0)
0000A818 117C 000E 0017             		move.b	#$E,$17(a0)
0000A81E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A826 317C 0680 0002             		move.w	#$680,2(a0)
0000A82C 117C 0004 0001             		move.b	#4,1(a0)
0000A832 117C 0003 0018             		move.b	#3,$18(a0)
0000A838 117C 000F 0019             		move.b	#$F,$19(a0)
0000A83E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A842 7000                       		moveq	#0,d0
0000A844 1028 0023                  		move.b	$23(a0),d0
0000A848 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A84E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A854 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A856 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A85C 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A862 4E75                       		rts	
0000A864                            ; ===========================================================================
0000A864                            
0000A864                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A864 117C 0046 0020             		move.b	#$46,$20(a0)
0000A86A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A870                            
0000A870                            Obj26_Solid:				; XREF: Obj26_Index
0000A870 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A874 6700                       		beq.s	loc_A1EC	; if not, branch
0000A876 5500                       		subq.b	#2,d0
0000A878 6600                       		bne.s	Obj26_Fall
0000A87A 7200                       		moveq	#0,d1
0000A87C 1228 0019                  		move.b	$19(a0),d1
0000A880 0641 000B                  		addi.w	#$B,d1
0000A884 6100 D37C                  		bsr.w	ExitPlatform
0000A888 0829 0003 0022             		btst	#3,$22(a1)
0000A88E 6600 0000                  		bne.w	loc_A1BC
0000A892 4228 0025                  		clr.b	$25(a0)
0000A896 6000 0000                  		bra.w	Obj26_Animate
0000A89A                            ; ===========================================================================
0000A89A                            
0000A89A                            loc_A1BC:				; XREF: Obj26_Solid
0000A89A 363C 0010                  		move.w	#$10,d3
0000A89E 3428 0008                  		move.w	8(a0),d2
0000A8A2 6100 D8BC                  		bsr.w	MvSonicOnPtfm
0000A8A6 6000 0000                  		bra.w	Obj26_Animate
0000A8AA                            ; ===========================================================================
0000A8AA                            
0000A8AA                            Obj26_Fall:				; XREF: Obj26_Solid
0000A8AA 6100 0000                  		bsr.w	ObjectFall
0000A8AE 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8B4 4A41                       		tst.w	d1
0000A8B6 6A00 0000                  		bpl.w	Obj26_Animate
0000A8BA D368 000C                  		add.w	d1,$C(a0)
0000A8BE 4268 0012                  		clr.w	$12(a0)
0000A8C2 4228 0025                  		clr.b	$25(a0)
0000A8C6 6000 0000                  		bra.w	Obj26_Animate
0000A8CA                            ; ===========================================================================
0000A8CA                            
0000A8CA                            loc_A1EC:				; XREF: Obj26_Solid
0000A8CA 323C 001A                  		move.w	#$1A,d1
0000A8CE 343C 000F                  		move.w	#$F,d2
0000A8D2 6100 0000                  		bsr.w	Obj26_SolidSides
0000A8D6 6700 0000                  		beq.w	loc_A25C
0000A8DA 4A69 0012                  		tst.w	$12(a1)
0000A8DE 6B00                       		bmi.s	loc_A20A
0000A8E0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A8E6 6700                       		beq.s	loc_A25C	; if yes, branch
0000A8E8                            
0000A8E8                            loc_A20A:
0000A8E8 4A41                       		tst.w	d1
0000A8EA 6A00                       		bpl.s	loc_A220
0000A8EC 9769 000C                  		sub.w	d3,$C(a1)
0000A8F0 6100 D1FE                  		bsr.w	loc_74AE
0000A8F4 117C 0002 0025             		move.b	#2,$25(a0)
0000A8FA 6000 0000                  		bra.w	Obj26_Animate
0000A8FE                            ; ===========================================================================
0000A8FE                            
0000A8FE                            loc_A220:
0000A8FE 4A40                       		tst.w	d0
0000A900 6700 0000                  		beq.w	loc_A246
0000A904 6B00                       		bmi.s	loc_A230
0000A906 4A69 0010                  		tst.w	$10(a1)
0000A90A 6B00                       		bmi.s	loc_A246
0000A90C 6000                       		bra.s	loc_A236
0000A90E                            ; ===========================================================================
0000A90E                            
0000A90E                            loc_A230:
0000A90E 4A69 0010                  		tst.w	$10(a1)
0000A912 6A00                       		bpl.s	loc_A246
0000A914                            
0000A914                            loc_A236:
0000A914 9169 0008                  		sub.w	d0,8(a1)
0000A918 337C 0000 0014             		move.w	#0,$14(a1)
0000A91E 337C 0000 0010             		move.w	#0,$10(a1)
0000A924                            
0000A924                            loc_A246:
0000A924 0829 0001 0022             		btst	#1,$22(a1)
0000A92A 6600                       		bne.s	loc_A26A
0000A92C 08E9 0005 0022             		bset	#5,$22(a1)
0000A932 08E8 0005 0022             		bset	#5,$22(a0)
0000A938 6000                       		bra.s	Obj26_Animate
0000A93A                            ; ===========================================================================
0000A93A                            
0000A93A                            loc_A25C:
0000A93A 0828 0005 0022             		btst	#5,$22(a0)
0000A940 6700                       		beq.s	Obj26_Animate
0000A942 337C 0001 001C             		move.w	#1,$1C(a1)
0000A948                            
0000A948                            loc_A26A:
0000A948 08A8 0005 0022             		bclr	#5,$22(a0)
0000A94E 08A9 0005 0022             		bclr	#5,$22(a1)
0000A954                            
0000A954                            Obj26_Animate:				; XREF: Obj26_Index
0000A954 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A95A 6100 0000                  		bsr.w	AnimateSprite
0000A95E                            
0000A95E                            Obj26_Display:				; XREF: Obj26_Index
0000A95E 6100 0000                  		bsr.w	DisplaySprite
0000A962 3028 0008                  		move.w	8(a0),d0
0000A966 0240 FF80                  		andi.w	#$FF80,d0
0000A96A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A96E 0441 0080                  		subi.w	#$80,d1
0000A972 0241 FF80                  		andi.w	#$FF80,d1
0000A976 9041                       		sub.w	d1,d0
0000A978 0C40 0280                  		cmpi.w	#$280,d0
0000A97C 6200 0000                  		bhi.w	DeleteObject
0000A980 4E75                       		rts	
0000A982                            ; ===========================================================================
0000A982                            
0000A982                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A982 5428 0024                  		addq.b	#2,$24(a0)
0000A986 117C 0000 0020             		move.b	#0,$20(a0)
0000A98C 6100 0000                  		bsr.w	SingleObjLoad
0000A990 6600                       		bne.s	Obj26_Explode
0000A992 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A996 3368 0008 0008             		move.w	8(a0),8(a1)
0000A99C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9A2 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A9A8 7400                       		moveq	#0,d2	; GMZ
0000A9AA 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A9AC                            
0000A9AC                            Obj26_Explode:
0000A9AC 6100 0000                  		bsr.w	SingleObjLoad
0000A9B0 6600                       		bne.s	Obj26_SetBroken
0000A9B2 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A9B6 5429 0024                  		addq.b	#2,$24(a1)
0000A9BA 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A9BE 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9CA                            
0000A9CA                            Obj26_NextExplosion:
0000A9CA 5802                       		addq.b	#4,d2
0000A9CC 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A9D0                            
0000A9D0                            Obj26_SetBroken:
0000A9D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A9D4 7000                       		moveq	#0,d0
0000A9D6 1028 0023                  		move.b	$23(a0),d0
0000A9DA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A9E0 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A9E6 6000 0000                  		bra.w	DisplaySprite
0000A9EA                            ; ===========================================================================
0000A9EA                            ; ---------------------------------------------------------------------------
0000A9EA                            ; Object 2E - contents of monitors
0000A9EA                            ; ---------------------------------------------------------------------------
0000A9EA                            
0000A9EA                            Obj2E:					; XREF: Obj_Index
0000A9EA 7000                       		moveq	#0,d0
0000A9EC 1028 0024                  		move.b	$24(a0),d0
0000A9F0 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A9F4 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A9F8 6000 0000                  		bra.w	DisplaySprite
0000A9FC                            ; ===========================================================================
0000A9FC 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A9FE 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AA00 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AA02                            ; ===========================================================================
0000AA02                            
0000AA02                            Obj2E_Main:				; XREF: Obj2E_Index
0000AA02 5428 0024                  		addq.b	#2,$24(a0)
0000AA06 317C 0680 0002             		move.w	#$680,2(a0)
0000AA0C 117C 0024 0001             		move.b	#$24,1(a0)
0000AA12 117C 0003 0018             		move.b	#3,$18(a0)
0000AA18 117C 0008 0019             		move.b	#8,$19(a0)
0000AA1E 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AA24 7000                       		moveq	#0,d0
0000AA26 1028 001C                  		move.b	$1C(a0),d0
0000AA2A 5400                       		addq.b	#2,d0
0000AA2C 1140 001A                  		move.b	d0,$1A(a0)
0000AA30 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AA36 D000                       		add.b	d0,d0
0000AA38 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AA3C 5249                       		addq.w	#1,a1
0000AA3E 2149 0004                  		move.l	a1,4(a0)
0000AA42                            
0000AA42                            Obj2E_Move:				; XREF: Obj2E_Index
0000AA42 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AA46 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AA4A 6100 0000                  		bsr.w	SpeedToPos
0000AA4E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AA54 4E75                       		rts	
0000AA56                            ; ===========================================================================
0000AA56                            
0000AA56                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AA56 5428 0024                  		addq.b	#2,$24(a0)
0000AA5A 317C 001D 001E             		move.w	#29,$1E(a0)
0000AA60 1028 001C                  		move.b	$1C(a0),d0
0000AA64 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AA68 6600                       		bne.s	Obj2E_ChkSonic
0000AA6A 4E75                       		rts			; Eggman monitor does nothing
0000AA6C                            ; ===========================================================================
0000AA6C                            
0000AA6C                            Obj2E_ChkSonic:
0000AA6C 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AA70 6600                       		bne.s	Obj2E_ChkShoes
0000AA72                            
0000AA72                            ExtraLife:
0000AA72 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AA76 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AA7A 303C 0088                  		move.w	#$88,d0
0000AA7E 4EF9 0000 13B0             		jmp	(PlaySound).l	; play extra life music
0000AA84                            ; ===========================================================================
0000AA84                            
0000AA84                            Obj2E_ChkShoes:
0000AA84 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AA88 6600                       		bne.s	Obj2E_ChkShield
0000AA8A 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AA90 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AA96 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AA9C 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AAA2 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AAA8 303C 00E2                  		move.w	#$E2,d0
0000AAAC 4EF9 0000 13B0             		jmp	(PlaySound).l	; Speed	up the music
0000AAB2                            ; ===========================================================================
0000AAB2                            
0000AAB2                            Obj2E_ChkShield:
0000AAB2 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AAB6 6600                       		bne.s	Obj2E_ChkInvinc
0000AAB8 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AABE 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AAC4 303C 00AF                  		move.w	#$AF,d0
0000AAC8 4EF9 0000 13B0             		jmp	(PlaySound).l	; play shield sound
0000AACE                            ; ===========================================================================
0000AACE                            
0000AACE                            Obj2E_ChkInvinc:
0000AACE 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AAD2 6600                       		bne.s	Obj2E_ChkRings
0000AAD4 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AADA 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AAE0 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AAE6 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AAEC 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AAF2 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AAF8 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AAFE 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AB04 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AB0A 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AB10 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AB14 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AB16 303C 0087                  		move.w	#$87,d0
0000AB1A 4EF9 0000 13B0             		jmp	(PlaySound).l	; play invincibility music
0000AB20                            ; ===========================================================================
0000AB20                            
0000AB20                            Obj2E_NoMusic:
0000AB20 4E75                       		rts	
0000AB22                            ; ===========================================================================
0000AB22                            
0000AB22                            Obj2E_ChkRings:
0000AB22 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AB26 6600                       		bne.s	Obj2E_ChkS
0000AB28 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AB2E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AB34 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AB3A 6500                       		bcs.s	Obj2E_RingSound
0000AB3C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AB42 6700 FF2E                  		beq.w	ExtraLife
0000AB46 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AB4C 6500                       		bcs.s	Obj2E_RingSound
0000AB4E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AB54 6700 FF1C                  		beq.w	ExtraLife
0000AB58                            
0000AB58                            Obj2E_RingSound:
0000AB58 303C 00B5                  		move.w	#$B5,d0
0000AB5C 4EF9 0000 13B0             		jmp	(PlaySound).l	; play ring sound
0000AB62                            ; ===========================================================================
0000AB62                            
0000AB62                            Obj2E_ChkS:
0000AB62 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AB66 6600                       		bne.s	Obj2E_ChkEnd
0000AB68                            		; nop	
0000AB68 7201                       		moveq	#1,d1
0000AB6A B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AB6E                            
0000AB6E                            Obj2E_ChkEnd:
0000AB6E 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AB70                            ; ===========================================================================
0000AB70                            
0000AB70                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AB70 5368 001E                  		subq.w	#1,$1E(a0)
0000AB74 6B00 0000                  		bmi.w	DeleteObject
0000AB78 4E75                       		rts	
0000AB7A                            ; ---------------------------------------------------------------------------
0000AB7A                            ; Subroutine to	make the sides of a monitor solid
0000AB7A                            ; ---------------------------------------------------------------------------
0000AB7A                            
0000AB7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB7A                            
0000AB7A                            
0000AB7A                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AB7A 43F8 D000                  		lea	($FFFFD000).w,a1
0000AB7E 3029 0008                  		move.w	8(a1),d0
0000AB82 9068 0008                  		sub.w	8(a0),d0
0000AB86 D041                       		add.w	d1,d0
0000AB88 6B00                       		bmi.s	loc_A4E6
0000AB8A 3601                       		move.w	d1,d3
0000AB8C D643                       		add.w	d3,d3
0000AB8E B043                       		cmp.w	d3,d0
0000AB90 6200                       		bhi.s	loc_A4E6
0000AB92 1629 0016                  		move.b	$16(a1),d3
0000AB96 4883                       		ext.w	d3
0000AB98 D443                       		add.w	d3,d2
0000AB9A 3629 000C                  		move.w	$C(a1),d3
0000AB9E 9668 000C                  		sub.w	$C(a0),d3
0000ABA2 D642                       		add.w	d2,d3
0000ABA4 6B00                       		bmi.s	loc_A4E6
0000ABA6 D442                       		add.w	d2,d2
0000ABA8 B642                       		cmp.w	d2,d3
0000ABAA 6400                       		bcc.s	loc_A4E6
0000ABAC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000ABB0 6B00                       		bmi.s	loc_A4E6
0000ABB2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000ABB8 6400                       		bcc.s	loc_A4E6
0000ABBA 4A78 FE08                  		tst.w	($FFFFFE08).w
0000ABBE 6600                       		bne.s	loc_A4E6
0000ABC0 B240                       		cmp.w	d0,d1
0000ABC2 6400                       		bcc.s	loc_A4DC
0000ABC4 D241                       		add.w	d1,d1
0000ABC6 9041                       		sub.w	d1,d0
0000ABC8                            
0000ABC8                            loc_A4DC:
0000ABC8 0C43 0010                  		cmpi.w	#$10,d3
0000ABCC 6500                       		bcs.s	loc_A4EA
0000ABCE                            
0000ABCE                            loc_A4E2:
0000ABCE 7201                       		moveq	#1,d1
0000ABD0 4E75                       		rts	
0000ABD2                            ; ===========================================================================
0000ABD2                            
0000ABD2                            loc_A4E6:
0000ABD2 7200                       		moveq	#0,d1
0000ABD4 4E75                       		rts	
0000ABD6                            ; ===========================================================================
0000ABD6                            
0000ABD6                            loc_A4EA:
0000ABD6 7200                       		moveq	#0,d1
0000ABD8 1228 0019                  		move.b	$19(a0),d1
0000ABDC 5841                       		addq.w	#4,d1
0000ABDE 3401                       		move.w	d1,d2
0000ABE0 D442                       		add.w	d2,d2
0000ABE2 D269 0008                  		add.w	8(a1),d1
0000ABE6 9268 0008                  		sub.w	8(a0),d1
0000ABEA 6BE2                       		bmi.s	loc_A4E2
0000ABEC B242                       		cmp.w	d2,d1
0000ABEE 64DE                       		bcc.s	loc_A4E2
0000ABF0 72FF                       		moveq	#-1,d1
0000ABF2 4E75                       		rts	
0000ABF4                            ; End of function Obj26_SolidSides
0000ABF4                            
0000ABF4                            ; ===========================================================================
0000ABF4                            Ani_obj26:
0000ABF4                            	include "_anim\obj26.asm"
0000ABF4                            ; ---------------------------------------------------------------------------
0000ABF4                            ; Animation script - monitors
0000ABF4                            ; ---------------------------------------------------------------------------
0000ABF4 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000ABFA 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AC00 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AC06 0000                       		dc.w byte_A582-Ani_obj26
0000AC08 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AC0E 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AC1A 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AC26 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AC32 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AC3E 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AC4A 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AC56 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AC62 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AC6E 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AC76                            		even
0000AC76                            		even
0000AC76                            
0000AC76                            ; ---------------------------------------------------------------------------
0000AC76                            ; Sprite mappings - monitors
0000AC76                            ; ---------------------------------------------------------------------------
0000AC76                            Map_obj26:
0000AC76                            	include "_maps\obj26.asm"
0000AC76                            ; ================================================================================
0000AC76                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AC76                            ; ================================================================================
0000AC76                            
0000AC76                            DATAY1U343IF3L:
0000AC76 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AC7A 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AC7E 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AC82 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AC86 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AC8A 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AC8E 05                         DATAY1U343IF3L_0: dc.b $5
0000AC8F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC94 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC99 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC9E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACA3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACA8 06                         DATAY1U343IF3L_1: dc.b $6
0000ACA9 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000ACAE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACB3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACB8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACBD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACC2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACC7 05                         DATAY1U343IF3L_2: dc.b $5
0000ACC8 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACCD 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACD2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACD7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACDC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACE1 05                         DATAY1U343IF3L_3: dc.b $5
0000ACE2 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACE7 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACEC E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACF1 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACF6 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACFB 06                         DATAY1U343IF3L_4: dc.b $6
0000ACFC F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AD01 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD06 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD0B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD10 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD15 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD1A 06                         DATAY1U343IF3L_5: dc.b $6
0000AD1B F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AD20 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD25 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD2A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD2F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD34 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD39 06                         DATAY1U343IF3L_6: dc.b $6
0000AD3A F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AD3F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD44 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD49 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD4E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD53 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD58 06                         DATAY1U343IF3L_7: dc.b $6
0000AD59 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AD5E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD63 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD68 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD6D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD72 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD77 06                         DATAY1U343IF3L_8: dc.b $6
0000AD78 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AD7D E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD82 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD87 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD8C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD91 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD96 06                         DATAY1U343IF3L_9: dc.b $6
0000AD97 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AD9C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ADA1 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADA6 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADAB 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADB0 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADB5 05                         DATAY1U343IF3L_A: dc.b $5
0000ADB6 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ADBB 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADC0 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADC5 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADCA 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADCF 01                         DATAY1U343IF3L_B: dc.b $1
0000ADD0 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000ADD6 00                         	even
0000ADD6 00                         	even
0000ADD6                            
0000ADD6                            ; ===========================================================================
0000ADD6                            ; ---------------------------------------------------------------------------
0000ADD6                            ; Object 0E - Sonic on the title screen
0000ADD6                            ; ---------------------------------------------------------------------------
0000ADD6                            
0000ADD6                            Obj0E:					; XREF: Obj_Index
0000ADD6 7000                       		moveq	#0,d0
0000ADD8 1028 0024                  		move.b	$24(a0),d0
0000ADDC 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000ADE0 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000ADE4                            ; ===========================================================================
0000ADE4 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000ADE6 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000ADE8 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000ADEA 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000ADEC                            ; ===========================================================================
0000ADEC                            
0000ADEC                            Obj0E_Main:				; XREF: Obj0E_Index
0000ADEC 5428 0024                  		addq.b	#2,$24(a0)
0000ADF0 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ADF6 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ADFC 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AE04 317C 2300 0002             		move.w	#$2300,2(a0)
0000AE0A 117C 0001 0018             		move.b	#1,$18(a0)
0000AE10 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AE16 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE1C 6100 0000                  		bsr.w	AnimateSprite
0000AE20                            
0000AE20                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AE20 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AE24 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AE26 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AE2A 6000 0000                  		bra.w	DisplaySprite
0000AE2E                            ; ===========================================================================
0000AE2E                            
0000AE2E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AE2E 4E75                       		rts	
0000AE30                            ; ===========================================================================
0000AE30                            
0000AE30                            Obj0E_Move:				; XREF: Obj0E_Index
0000AE30 5168 000A                  		subq.w	#8,$A(a0)
0000AE34 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AE3A 6600                       		bne.s	Obj0E_Display
0000AE3C 5428 0024                  		addq.b	#2,$24(a0)
0000AE40                            
0000AE40                            Obj0E_Display:
0000AE40 6000 0000                  		bra.w	DisplaySprite
0000AE44                            ; ===========================================================================
0000AE44 4E75                       		rts	
0000AE46                            ; ===========================================================================
0000AE46                            
0000AE46                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AE46 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE4C 6100 0000                  		bsr.w	AnimateSprite
0000AE50 6000 0000                  		bra.w	DisplaySprite
0000AE54                            ; ===========================================================================
0000AE54 4E75                       		rts	
0000AE56                            ; ===========================================================================
0000AE56                            ; ---------------------------------------------------------------------------
0000AE56                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AE56                            ; ---------------------------------------------------------------------------
0000AE56                            
0000AE56                            Obj0F:					; XREF: Obj_Index
0000AE56 7000                       		moveq	#0,d0
0000AE58 1028 0024                  		move.b	$24(a0),d0
0000AE5C 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AE60 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AE64 6000 0000                  		bra.w	DisplaySprite
0000AE68                            ; ===========================================================================
0000AE68 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AE6A 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AE6C 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AE6E                            ; ===========================================================================
0000AE6E                            
0000AE6E                            Obj0F_Main:				; XREF: Obj0F_Index
0000AE6E 5428 0024                  		addq.b	#2,$24(a0)
0000AE72 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AE78 317C 0130 000A             		move.w	#$130,$A(a0)
0000AE7E 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AE86 317C 0200 0002             		move.w	#$200,2(a0)
0000AE8C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AE92 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AE94 5428 0024                  		addq.b	#2,$24(a0)
0000AE98 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AE9E 6600                       		bne.s	locret_A6F8	; if not, branch
0000AEA0 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AEA6 317C 0170 0008             		move.w	#$170,8(a0)
0000AEAC 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AEB2                            
0000AEB2                            locret_A6F8:				; XREF: Obj0F_Index
0000AEB2 4E75                       		rts	
0000AEB4                            ; ===========================================================================
0000AEB4                            
0000AEB4                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AEB4 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AEBA 6000 0000                  		bra.w	AnimateSprite
0000AEBE                            ; ===========================================================================
0000AEBE                            Ani_obj0E:
0000AEBE                            	include "_anim\obj0E.asm"
0000AEBE                            ; ---------------------------------------------------------------------------
0000AEBE                            ; Animation script - Sonic on the title screen
0000AEBE                            ; ---------------------------------------------------------------------------
0000AEBE 0000                       		dc.w byte_A706-Ani_obj0E
0000AEC0 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AECC                            		even
0000AECC                            		even
0000AECC                            
0000AECC                            Ani_obj0F:
0000AECC                            	include "_anim\obj0F.asm"
0000AECC                            ; ---------------------------------------------------------------------------
0000AECC                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AECC                            ; ---------------------------------------------------------------------------
0000AECC 0000                       		dc.w byte_A714-Ani_obj0F
0000AECE 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AED2                            		even
0000AED2                            		even
0000AED2                            
0000AED2                            ; ---------------------------------------------------------------------------
0000AED2                            ; Subroutine to	animate	a sprite using an animation script
0000AED2                            ; ---------------------------------------------------------------------------
0000AED2                            
0000AED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AED2                            
0000AED2                            
0000AED2                            AnimateSprite:
0000AED2 7000                       		moveq	#0,d0
0000AED4 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AED8 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AEDC 6700                       		beq.s	Anim_Run	; if not, branch
0000AEDE 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AEE2 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AEE8 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AEEE                            
0000AEEE                            Anim_Run:
0000AEEE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AEF2 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AEF4 D040                       		add.w	d0,d0
0000AEF6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AEFA 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AEFE 7200                       		moveq	#0,d1
0000AF00 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AF04 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AF08 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AF0A                            
0000AF0A                            Anim_Next:
0000AF0A 1200                       		move.b	d0,d1
0000AF0C 0200 001F                  		andi.b	#$1F,d0
0000AF10 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AF14 1028 0022                  		move.b	$22(a0),d0
0000AF18 E719                       		rol.b	#3,d1
0000AF1A B101                       		eor.b	d0,d1
0000AF1C 0201 0003                  		andi.b	#3,d1
0000AF20 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AF26 8328 0001                  		or.b	d1,1(a0)
0000AF2A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AF2E                            
0000AF2E                            Anim_Wait:
0000AF2E 4E75                       		rts	
0000AF30                            ; ===========================================================================
0000AF30                            
0000AF30                            Anim_End_FF:
0000AF30 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AF32 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AF34 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AF3A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AF3E 60CA                       		bra.s	Anim_Next
0000AF40                            ; ===========================================================================
0000AF40                            
0000AF40                            Anim_End_FE:
0000AF40 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AF42 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AF44 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AF48 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AF4C 9200                       		sub.b	d0,d1
0000AF4E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AF52 60B6                       		bra.s	Anim_Next
0000AF54                            ; ===========================================================================
0000AF54                            
0000AF54                            Anim_End_FD:
0000AF54 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AF56 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AF58 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AF5E                            
0000AF5E                            Anim_End_FC:
0000AF5E 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AF60 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AF62 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AF66                            
0000AF66                            Anim_End_FB:
0000AF66 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AF68 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AF6A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AF70 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AF74                            
0000AF74                            Anim_End_FA:
0000AF74 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AF76 6600                       		bne.s	Anim_End	; if not, branch
0000AF78 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AF7C                            
0000AF7C                            Anim_End:
0000AF7C 4E75                       		rts	
0000AF7E                            ; End of function AnimateSprite
0000AF7E                            
0000AF7E                            ; ===========================================================================
0000AF7E                            ; ---------------------------------------------------------------------------
0000AF7E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF7E                            ; ---------------------------------------------------------------------------
0000AF7E                            Map_obj0F:
0000AF7E                            	include "_maps\obj0F.asm"
0000AF7E                            ; ---------------------------------------------------------------------------
0000AF7E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF7E                            ; ---------------------------------------------------------------------------
0000AF7E 0000                       		dc.w byte_A7CD-Map_obj0F
0000AF80 0000                       		dc.w byte_A7CC-Map_obj0F
0000AF82 0000                       		dc.w byte_A7EB-Map_obj0F
0000AF84 0000                       		dc.w byte_A882-Map_obj0F
0000AF86 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AF87 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AF8C 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AF91 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AF96 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AF9B 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AFA0 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AFA5 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AFA6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFAB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFB0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFB5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFBA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFBF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFC4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFC9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFCE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFD3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFD8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFDD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFE2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFE7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFEC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFF1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFF6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFFB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B000 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B005 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B00A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B00F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B014 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B019 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B01E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B023 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B028 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B02D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B032 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B037 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B03C 01                         byte_A882:	dc.b 1			; "TM"
0000B03D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B042                            		even
0000B042                            		even
0000B042                            
0000B042                            ; ---------------------------------------------------------------------------
0000B042                            ; Sprite mappings - Sonic on the title screen
0000B042                            ; ---------------------------------------------------------------------------
0000B042                            Map_obj0E:
0000B042                            	include "_maps\obj0E.asm"
0000B042                            ; ================================================================================
0000B042                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B042                            ; ================================================================================
0000B042                            
0000B042                            DATAGKI0HYDQBXP:
0000B042 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B046 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B04A 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B04E 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B052 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B053 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B058 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B05D 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B062 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B067 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B06C 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B071 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B076 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B07B 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B07C 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B081 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B086 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B08B 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B090 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B095 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B09A 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B09F 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B0A4 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B0A9 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B0AE 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B0B3 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B0B4 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B0B9 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B0BE F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B0C3 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B0C8 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B0CD 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B0D2 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B0D7 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B0DC 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B0E1 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B0E6 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B0EB 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B0EC FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B0F1 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B0F6 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B0FB 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B100 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B105 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B10A 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B10F 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B114 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B119 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B11E 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B11F F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B124 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B129 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B12E 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B133 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B138 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B13D 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B142 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B147 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B14C 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B151 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B156 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B15B 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B160 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B165 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B16A 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B16F 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B170 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B175 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B17A 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B17F 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B184 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B189 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B18E 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B193 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B198 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B19D 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B1A2 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B1A7 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B1A8 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B1AD 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B1B2 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B1B7 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B1BC 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B1C1 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B1C6 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B1CB 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B1D0 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B1D5 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B1DA 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B1DF 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B1E4 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B1E9 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B1EE 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B1F3 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B1F4 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B1F9 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B1FE 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B203 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B208 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B20D 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B212 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B217 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B21C 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B221 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B226 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B22B 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B230 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B235 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B23A 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B240 00                         	even
0000B240 00                         	even
0000B240                            
0000B240                            ; ===========================================================================
0000B240                            ; ---------------------------------------------------------------------------
0000B240                            ; Object 2B - Chopper enemy (GHZ)
0000B240                            ; ---------------------------------------------------------------------------
0000B240                            
0000B240                            Obj2B:					; XREF: Obj_Index
0000B240 7000                       		moveq	#0,d0
0000B242 1028 0024                  		move.b	$24(a0),d0
0000B246 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B24A 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B24E 6000 0000                  		bra.w	MarkObjGone
0000B252                            ; ===========================================================================
0000B252 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B254 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B256                            ; ===========================================================================
0000B256                            
0000B256                            Obj2B_Main:				; XREF: Obj2B_Index
0000B256 5428 0024                  		addq.b	#2,$24(a0)
0000B25A 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B262 317C 047B 0002             		move.w	#$47B,2(a0)
0000B268 117C 0004 0001             		move.b	#4,1(a0)
0000B26E 117C 0004 0018             		move.b	#4,$18(a0)
0000B274 117C 0009 0020             		move.b	#9,$20(a0)
0000B27A 117C 0010 0019             		move.b	#$10,$19(a0)
0000B280 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B286 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B28C                            
0000B28C                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B28C 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B292 6100 FC3E                  		bsr.w	AnimateSprite
0000B296 6100 0000                  		bsr.w	SpeedToPos
0000B29A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B2A0 3028 0030                  		move.w	$30(a0),d0
0000B2A4 B068 000C                  		cmp.w	$C(a0),d0
0000B2A8 6400                       		bcc.s	Obj2B_ChgAni
0000B2AA 3140 000C                  		move.w	d0,$C(a0)
0000B2AE 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B2B4                            
0000B2B4                            Obj2B_ChgAni:
0000B2B4 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B2BA 0440 00C0                  		subi.w	#$C0,d0
0000B2BE B068 000C                  		cmp.w	$C(a0),d0
0000B2C2 6400                       		bcc.s	locret_ABB6
0000B2C4 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B2CA 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B2CE 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B2D0 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B2D6                            
0000B2D6                            locret_ABB6:
0000B2D6 4E75                       		rts	
0000B2D8                            ; ===========================================================================
0000B2D8                            Ani_obj2B:
0000B2D8                            	include "_anim\obj2B.asm"
0000B2D8                            ; ---------------------------------------------------------------------------
0000B2D8                            ; Animation script - Chopper enemy
0000B2D8                            ; ---------------------------------------------------------------------------
0000B2D8 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B2DA 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B2DC 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B2DE 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B2E2 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B2E6 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B2EA 00                         		even
0000B2EA 00                         		even
0000B2EA                            
0000B2EA                            ; ---------------------------------------------------------------------------
0000B2EA                            ; Sprite mappings - Chopper enemy (GHZ)
0000B2EA                            ; ---------------------------------------------------------------------------
0000B2EA                            Map_obj2B:
0000B2EA                            	include "_maps\obj2B.asm"
0000B2EA                            Map_1ff1:
0000B2EA 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B2EC 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B2EE 02                         Map_1ff1_4: 	dc.b $2
0000B2EF E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B2F4 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2F9 02                         Map_1ff1_F: 	dc.b $2
0000B2FA E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B2FF 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B304                            	even
0000B304                            	even
0000B304                            
0000B304                            ; ===========================================================================
0000B304                            ; ---------------------------------------------------------------------------
0000B304                            ; Object 2C - Jaws enemy (LZ)
0000B304                            ; ---------------------------------------------------------------------------
0000B304                            
0000B304                            Obj2C:					; XREF: Obj_Index
0000B304 7000                       		moveq	#0,d0
0000B306 1028 0024                  		move.b	$24(a0),d0
0000B30A 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B30E 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B312                            ; ===========================================================================
0000B312 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B314 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B316                            ; ===========================================================================
0000B316                            
0000B316                            Obj2C_Main:				; XREF: Obj2C_Index
0000B316 5428 0024                  		addq.b	#2,$24(a0)
0000B31A 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B322 317C 2486 0002             		move.w	#$2486,2(a0)
0000B328 0028 0004 0001             		ori.b	#4,1(a0)
0000B32E 117C 000A 0020             		move.b	#$A,$20(a0)
0000B334 117C 0004 0018             		move.b	#4,$18(a0)
0000B33A 117C 0010 0019             		move.b	#$10,$19(a0)
0000B340 7000                       		moveq	#0,d0
0000B342 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B346 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B348 5340                       		subq.w	#1,d0
0000B34A 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B34E 3140 0032                  		move.w	d0,$32(a0)
0000B352 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B358 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B35E 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B360 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B364                            
0000B364                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B364 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B368 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B36A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B370 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B374 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B37A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B380                            
0000B380                            Obj2C_Animate:
0000B380 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B386 6100 FB4A                  		bsr.w	AnimateSprite
0000B38A 6100 0000                  		bsr.w	SpeedToPos
0000B38E 6000 0000                  		bra.w	MarkObjGone
0000B392                            ; ===========================================================================
0000B392                            Ani_obj2C:
0000B392                            	include "_anim\obj2C.asm"
0000B392                            ; ---------------------------------------------------------------------------
0000B392                            ; Animation script - Jaws enemy
0000B392                            ; ---------------------------------------------------------------------------
0000B392 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B394 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B39A                            		even
0000B39A                            		even
0000B39A                            
0000B39A                            ; ---------------------------------------------------------------------------
0000B39A                            ; Sprite mappings - Jaws enemy (LZ)
0000B39A                            ; ---------------------------------------------------------------------------
0000B39A                            Map_obj2C:
0000B39A                            	include "_maps\obj2C.asm"
0000B39A                            ; ---------------------------------------------------------------------------
0000B39A                            ; Sprite mappings - Jaws enemy (LZ)
0000B39A                            ; ---------------------------------------------------------------------------
0000B39A 0000                       		dc.w byte_AC78-Map_obj2C
0000B39C 0000                       		dc.w byte_AC83-Map_obj2C
0000B39E 0000                       		dc.w byte_AC8E-Map_obj2C
0000B3A0 0000                       		dc.w byte_AC99-Map_obj2C
0000B3A2 02                         byte_AC78:	dc.b 2
0000B3A3 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3A8 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B3AD 02                         byte_AC83:	dc.b 2
0000B3AE F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3B3 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B3B8 02                         byte_AC8E:	dc.b 2
0000B3B9 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3BE F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B3C3 02                         byte_AC99:	dc.b 2
0000B3C4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3C9 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B3CE                            		even
0000B3CE                            		even
0000B3CE                            
0000B3CE                            ; ===========================================================================
0000B3CE                            ; ---------------------------------------------------------------------------
0000B3CE                            ; Object 2D - Burrobot enemy (LZ)
0000B3CE                            ; ---------------------------------------------------------------------------
0000B3CE                            
0000B3CE                            Obj2D:					; XREF: Obj_Index
0000B3CE 7000                       		moveq	#0,d0
0000B3D0 1028 0024                  		move.b	$24(a0),d0
0000B3D4 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B3D8 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B3DC                            ; ===========================================================================
0000B3DC 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B3DE 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B3E0                            ; ===========================================================================
0000B3E0                            
0000B3E0                            Obj2D_Main:				; XREF: Obj2D_Index
0000B3E0 5428 0024                  		addq.b	#2,$24(a0)
0000B3E4 117C 0013 0016             		move.b	#$13,$16(a0)
0000B3EA 117C 0008 0017             		move.b	#8,$17(a0)
0000B3F0 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B3F8 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B3FE 0028 0004 0001             		ori.b	#4,1(a0)
0000B404 117C 0004 0018             		move.b	#4,$18(a0)
0000B40A 117C 0005 0020             		move.b	#5,$20(a0)
0000B410 117C 000C 0019             		move.b	#$C,$19(a0)
0000B416 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B41A 117C 0002 001C             		move.b	#2,$1C(a0)
0000B420                            
0000B420                            Obj2D_Action:				; XREF: Obj2D_Index
0000B420 7000                       		moveq	#0,d0
0000B422 1028 0025                  		move.b	$25(a0),d0
0000B426 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B42A 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B42E 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B434 6100 FA9C                  		bsr.w	AnimateSprite
0000B438 6000 0000                  		bra.w	MarkObjGone
0000B43C                            ; ===========================================================================
0000B43C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B43E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B440 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B442 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B444                            ; ===========================================================================
0000B444                            
0000B444                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B444 5368 0030                  		subq.w	#1,$30(a0)
0000B448 6A00                       		bpl.s	locret_AD42
0000B44A 5428 0025                  		addq.b	#2,$25(a0)
0000B44E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B454 317C 0080 0010             		move.w	#$80,$10(a0)
0000B45A 117C 0001 001C             		move.b	#1,$1C(a0)
0000B460 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B466 6700                       		beq.s	locret_AD42
0000B468 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B46C                            
0000B46C                            locret_AD42:
0000B46C 4E75                       		rts	
0000B46E                            ; ===========================================================================
0000B46E                            
0000B46E                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B46E 5368 0030                  		subq.w	#1,$30(a0)
0000B472 6B00                       		bmi.s	loc_AD84
0000B474 6100 0000                  		bsr.w	SpeedToPos
0000B478 0868 0000 0032             		bchg	#0,$32(a0)
0000B47E 6600                       		bne.s	loc_AD78
0000B480 3628 0008                  		move.w	8(a0),d3
0000B484 0643 000C                  		addi.w	#$C,d3
0000B488 0828 0000 0022             		btst	#0,$22(a0)
0000B48E 6600                       		bne.s	loc_AD6A
0000B490 0443 0018                  		subi.w	#$18,d3
0000B494                            
0000B494                            loc_AD6A:
0000B494 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B49A 0C41 000C                  		cmpi.w	#$C,d1
0000B49E 6C00                       		bge.s	loc_AD84
0000B4A0 4E75                       		rts	
0000B4A2                            ; ===========================================================================
0000B4A2                            
0000B4A2                            loc_AD78:				; XREF: Obj2D_Move
0000B4A2 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4A8 D368 000C                  		add.w	d1,$C(a0)
0000B4AC 4E75                       		rts	
0000B4AE                            ; ===========================================================================
0000B4AE                            
0000B4AE                            loc_AD84:				; XREF: Obj2D_Move
0000B4AE 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B4B4 6700                       		beq.s	loc_ADA4
0000B4B6 5528 0025                  		subq.b	#2,$25(a0)
0000B4BA 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B4C0 317C 0000 0010             		move.w	#0,$10(a0)
0000B4C6 117C 0000 001C             		move.b	#0,$1C(a0)
0000B4CC 4E75                       		rts	
0000B4CE                            ; ===========================================================================
0000B4CE                            
0000B4CE                            loc_ADA4:
0000B4CE 5428 0025                  		addq.b	#2,$25(a0)
0000B4D2 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B4D8 117C 0002 001C             		move.b	#2,$1C(a0)
0000B4DE 4E75                       		rts	
0000B4E0                            ; ===========================================================================
0000B4E0                            
0000B4E0                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B4E0 6100 0000                  		bsr.w	SpeedToPos
0000B4E4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B4EA 6B00                       		bmi.s	locret_ADF0
0000B4EC 117C 0003 001C             		move.b	#3,$1C(a0)
0000B4F2 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4F8 4A41                       		tst.w	d1
0000B4FA 6A00                       		bpl.s	locret_ADF0
0000B4FC D368 000C                  		add.w	d1,$C(a0)
0000B500 317C 0000 0012             		move.w	#0,$12(a0)
0000B506 117C 0001 001C             		move.b	#1,$1C(a0)
0000B50C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B512 5528 0025                  		subq.b	#2,$25(a0)
0000B516 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B51A                            
0000B51A                            locret_ADF0:
0000B51A 4E75                       		rts	
0000B51C                            ; ===========================================================================
0000B51C                            
0000B51C                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B51C 343C 0060                  		move.w	#$60,d2
0000B520 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B524 6400                       		bcc.s	locret_AE20
0000B526 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B52A 9068 000C                  		sub.w	$C(a0),d0
0000B52E 6400                       		bcc.s	locret_AE20
0000B530 0C40 FF80                  		cmpi.w	#-$80,d0
0000B534 6500                       		bcs.s	locret_AE20
0000B536 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B53A 6600                       		bne.s	locret_AE20
0000B53C 5528 0025                  		subq.b	#2,$25(a0)
0000B540 3141 0010                  		move.w	d1,$10(a0)
0000B544 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B54A                            
0000B54A                            locret_AE20:
0000B54A 4E75                       		rts	
0000B54C                            
0000B54C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B54C                            
0000B54C                            
0000B54C                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B54C 323C 0080                  		move.w	#$80,d1
0000B550 08E8 0000 0022             		bset	#0,$22(a0)
0000B556 3038 D008                  		move.w	($FFFFD008).w,d0
0000B55A 9068 0008                  		sub.w	8(a0),d0
0000B55E 6400                       		bcc.s	loc_AE40
0000B560 4440                       		neg.w	d0
0000B562 4441                       		neg.w	d1
0000B564 08A8 0000 0022             		bclr	#0,$22(a0)
0000B56A                            
0000B56A                            loc_AE40:
0000B56A B042                       		cmp.w	d2,d0
0000B56C 4E75                       		rts	
0000B56E                            ; End of function Obj2D_ChkSonic2
0000B56E                            
0000B56E                            ; ===========================================================================
0000B56E                            Ani_obj2D:
0000B56E                            	include "_anim\obj2D.asm"
0000B56E                            ; ---------------------------------------------------------------------------
0000B56E                            ; Animation script - Burrobot enemy but craig
0000B56E                            ; ---------------------------------------------------------------------------
0000B56E 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B570 0000                       		dc.w byte_AE50-Ani_obj2D
0000B572 0000                       		dc.w byte_AE54-Ani_obj2D
0000B574 0000                       		dc.w byte_AE58-Ani_obj2D
0000B576 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B579 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B57D 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B58B 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B58E                            		even
0000B58E                            		even
0000B58E                            
0000B58E                            ; ---------------------------------------------------------------------------
0000B58E                            ; Sprite mappings - Burrobot enemy (LZ)
0000B58E                            ; ---------------------------------------------------------------------------
0000B58E                            Map_obj2D:
0000B58E                            	include "_maps\obj2D.asm"
0000B58E                            Map_e3a3:
0000B58E 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B590 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B592 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B594 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B596 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B598 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B59A 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B59C 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B59E 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B5A0 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B5A2 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B5A4 02                         Map_e3a3_16: 	dc.b $2
0000B5A5 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B5AA 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B5AF 02                         Map_e3a3_21: 	dc.b $2
0000B5B0 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B5B5 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B5BA 02                         Map_e3a3_2C: 	dc.b $2
0000B5BB EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B5C0 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B5C5 02                         Map_e3a3_37: 	dc.b $2
0000B5C6 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B5CB FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B5D0 02                         Map_e3a3_42: 	dc.b $2
0000B5D1 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B5D6 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B5DB 02                         Map_e3a3_4D: 	dc.b $2
0000B5DC EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B5E1 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B5E6 02                         Map_e3a3_58: 	dc.b $2
0000B5E7 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B5EC FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B5F1 02                         Map_e3a3_63: 	dc.b $2
0000B5F2 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B5F7 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B5FC 02                         Map_e3a3_6E: 	dc.b $2
0000B5FD EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B602 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B607 02                         Map_e3a3_79: 	dc.b $2
0000B608 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B60D 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B612 02                         Map_e3a3_84: 	dc.b $2
0000B613 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B618 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B61E 00                         	even
0000B61E 00                         	even
0000B61E                            
0000B61E                            ; ===========================================================================
0000B61E                            ; ---------------------------------------------------------------------------
0000B61E                            ; Object 2F - large moving platforms (MZ)
0000B61E                            ; ---------------------------------------------------------------------------
0000B61E                            
0000B61E                            Obj2F:					; XREF: Obj_Index
0000B61E 7000                       		moveq	#0,d0
0000B620 1028 0024                  		move.b	$24(a0),d0
0000B624 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B628 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B62C                            ; ===========================================================================
0000B62C 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B62E 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B630                            
0000B630 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B632 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B634 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B636 0140                       		dc.b 1,	$40
0000B638 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B63A 0220                       		dc.b 2,	$20
0000B63C                            ; ===========================================================================
0000B63C                            
0000B63C                            Obj2F_Main:				; XREF: Obj2F_Index
0000B63C 5428 0024                  		addq.b	#2,$24(a0)
0000B640 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B648 317C C000 0002             		move.w	#$C000,2(a0)
0000B64E 117C 0004 0001             		move.b	#4,1(a0)
0000B654 117C 0005 0018             		move.b	#5,$18(a0)
0000B65A 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B660 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B666 7000                       		moveq	#0,d0
0000B668 1028 0028                  		move.b	$28(a0),d0
0000B66C E448                       		lsr.w	#2,d0
0000B66E 0240 001C                  		andi.w	#$1C,d0
0000B672 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B676 3019                       		move.w	(a1)+,d0
0000B678 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B67C 214A 0030                  		move.l	a2,$30(a0)
0000B680 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B684 1151 0019                  		move.b	(a1),$19(a0)
0000B688 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B68E 117C 0040 0016             		move.b	#$40,$16(a0)
0000B694 08E8 0004 0001             		bset	#4,1(a0)
0000B69A                            
0000B69A                            Obj2F_Action:				; XREF: Obj2F_Index
0000B69A 6100 0000                  		bsr.w	Obj2F_Types
0000B69E 4A28 0025                  		tst.b	$25(a0)
0000B6A2 6700                       		beq.s	Obj2F_Solid
0000B6A4 7200                       		moveq	#0,d1
0000B6A6 1228 0019                  		move.b	$19(a0),d1
0000B6AA 0641 000B                  		addi.w	#$B,d1
0000B6AE 6100 C552                  		bsr.w	ExitPlatform
0000B6B2 0829 0003 0022             		btst	#3,$22(a1)
0000B6B8 6600 0000                  		bne.w	Obj2F_Slope
0000B6BC 4228 0025                  		clr.b	$25(a0)
0000B6C0 6000                       		bra.s	Obj2F_Display
0000B6C2                            ; ===========================================================================
0000B6C2                            
0000B6C2                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B6C2 7200                       		moveq	#0,d1
0000B6C4 1228 0019                  		move.b	$19(a0),d1
0000B6C8 0641 000B                  		addi.w	#$B,d1
0000B6CC 2468 0030                  		movea.l	$30(a0),a2
0000B6D0 3428 0008                  		move.w	8(a0),d2
0000B6D4 6100 D51C                  		bsr.w	SlopeObject2
0000B6D8 6000                       		bra.s	Obj2F_Display
0000B6DA                            ; ===========================================================================
0000B6DA                            
0000B6DA                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B6DA 7200                       		moveq	#0,d1
0000B6DC 1228 0019                  		move.b	$19(a0),d1
0000B6E0 0641 000B                  		addi.w	#$B,d1
0000B6E4 343C 0020                  		move.w	#$20,d2
0000B6E8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B6EE 6600                       		bne.s	loc_AF8E
0000B6F0 343C 0030                  		move.w	#$30,d2
0000B6F4                            
0000B6F4                            loc_AF8E:
0000B6F4 2468 0030                  		movea.l	$30(a0),a2
0000B6F8 6100 0000                  		bsr.w	SolidObject2F
0000B6FC                            
0000B6FC                            Obj2F_Display:				; XREF: Obj2F_Action
0000B6FC 6100 0000                  		bsr.w	DisplaySprite
0000B700 6000 0000                  		bra.w	Obj2F_ChkDel
0000B704                            
0000B704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B704                            
0000B704                            
0000B704                            Obj2F_Types:				; XREF: Obj2F_Action
0000B704 7000                       		moveq	#0,d0
0000B706 1028 0028                  		move.b	$28(a0),d0
0000B70A 0240 0007                  		andi.w	#7,d0
0000B70E D040                       		add.w	d0,d0
0000B710 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B714 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B718                            ; End of function Obj2F_Types
0000B718                            
0000B718                            ; ===========================================================================
0000B718 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B71A 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B71C 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B71E 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B720 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B722 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B724                            ; ===========================================================================
0000B724                            
0000B724                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B724 4E75                       		rts			; type 00 platform doesn't move
0000B726                            ; ===========================================================================
0000B726                            
0000B726                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B726 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B72A 323C 0020                  		move.w	#$20,d1
0000B72E 6000                       		bra.s	Obj2F_Move
0000B730                            ; ===========================================================================
0000B730                            
0000B730                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B730 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B734 323C 0030                  		move.w	#$30,d1
0000B738 6000                       		bra.s	Obj2F_Move
0000B73A                            ; ===========================================================================
0000B73A                            
0000B73A                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B73A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B73E 323C 0040                  		move.w	#$40,d1
0000B742 6000                       		bra.s	Obj2F_Move
0000B744                            ; ===========================================================================
0000B744                            
0000B744                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B744 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B748 323C 0060                  		move.w	#$60,d1
0000B74C                            
0000B74C                            Obj2F_Move:
0000B74C 0828 0003 0028             		btst	#3,$28(a0)
0000B752 6700                       		beq.s	loc_AFF2
0000B754 4440                       		neg.w	d0
0000B756 D041                       		add.w	d1,d0
0000B758                            
0000B758                            loc_AFF2:
0000B758 3228 002C                  		move.w	$2C(a0),d1
0000B75C 9240                       		sub.w	d0,d1
0000B75E 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B762 4E75                       		rts	
0000B764                            ; ===========================================================================
0000B764                            
0000B764                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B764 1028 0034                  		move.b	$34(a0),d0
0000B768 4A28 0025                  		tst.b	$25(a0)
0000B76C 6600                       		bne.s	loc_B010
0000B76E 5500                       		subq.b	#2,d0
0000B770 6400                       		bcc.s	loc_B01C
0000B772 7000                       		moveq	#0,d0
0000B774 6000                       		bra.s	loc_B01C
0000B776                            ; ===========================================================================
0000B776                            
0000B776                            loc_B010:
0000B776 5800                       		addq.b	#4,d0
0000B778 0C00 0040                  		cmpi.b	#$40,d0
0000B77C 6500                       		bcs.s	loc_B01C
0000B77E 103C 0040                  		move.b	#$40,d0
0000B782                            
0000B782                            loc_B01C:
0000B782 1140 0034                  		move.b	d0,$34(a0)
0000B786 4EB9 0000 2B58             		jsr	(CalcSine).l
0000B78C E848                       		lsr.w	#4,d0
0000B78E 3200                       		move.w	d0,d1
0000B790 D068 002C                  		add.w	$2C(a0),d0
0000B794 3140 000C                  		move.w	d0,$C(a0)
0000B798 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B79E 6600                       		bne.s	loc_B07A
0000B7A0 4A28 0035                  		tst.b	$35(a0)
0000B7A4 6600                       		bne.s	loc_B07A
0000B7A6 117C 0001 0035             		move.b	#1,$35(a0)
0000B7AC 6100 0000                  		bsr.w	SingleObjLoad2
0000B7B0 6600                       		bne.s	loc_B07A
0000B7B2 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B7B6 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7BC 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B7C2 5069 002C                  		addq.w	#8,$2C(a1)
0000B7C6 5769 002C                  		subq.w	#3,$2C(a1)
0000B7CA 0469 0040 0008             		subi.w	#$40,8(a1)
0000B7D0 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B7D6 2348 0038                  		move.l	a0,$38(a1)
0000B7DA 2448                       		movea.l	a0,a2
0000B7DC 6100                       		bsr.s	sub_B09C
0000B7DE                            
0000B7DE                            loc_B07A:
0000B7DE 7400                       		moveq	#0,d2
0000B7E0 45E8 0036                  		lea	$36(a0),a2
0000B7E4 141A                       		move.b	(a2)+,d2
0000B7E6 5302                       		subq.b	#1,d2
0000B7E8 6500                       		bcs.s	locret_B09A
0000B7EA                            
0000B7EA                            loc_B086:
0000B7EA 7000                       		moveq	#0,d0
0000B7EC 101A                       		move.b	(a2)+,d0
0000B7EE ED48                       		lsl.w	#6,d0
0000B7F0 0640 D000                  		addi.w	#-$3000,d0
0000B7F4 3240                       		movea.w	d0,a1
0000B7F6 3341 003C                  		move.w	d1,$3C(a1)
0000B7FA 51CA FFEE                  		dbf	d2,loc_B086
0000B7FE                            
0000B7FE                            locret_B09A:
0000B7FE 4E75                       		rts	
0000B800                            
0000B800                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B800                            
0000B800                            
0000B800                            sub_B09C:
0000B800 45EA 0036                  		lea	$36(a2),a2
0000B804 7000                       		moveq	#0,d0
0000B806 1012                       		move.b	(a2),d0
0000B808 5212                       		addq.b	#1,(a2)
0000B80A 45F2 0001                  		lea	1(a2,d0.w),a2
0000B80E 3009                       		move.w	a1,d0
0000B810 0440 D000                  		subi.w	#-$3000,d0
0000B814 EC48                       		lsr.w	#6,d0
0000B816 0240 007F                  		andi.w	#$7F,d0
0000B81A 1480                       		move.b	d0,(a2)
0000B81C 4E75                       		rts	
0000B81E                            ; End of function sub_B09C
0000B81E                            
0000B81E                            ; ===========================================================================
0000B81E                            
0000B81E                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B81E 4A28 0035                  		tst.b	$35(a0)
0000B822 6700                       		beq.s	loc_B0C6
0000B824 4A28 0001                  		tst.b	1(a0)
0000B828 6A00                       		bpl.s	Obj2F_DelFlames
0000B82A                            
0000B82A                            loc_B0C6:
0000B82A 3028 002A                  		move.w	$2A(a0),d0
0000B82E 0240 FF80                  		andi.w	#$FF80,d0
0000B832 3238 F700                  		move.w	($FFFFF700).w,d1
0000B836 0441 0080                  		subi.w	#$80,d1
0000B83A 0241 FF80                  		andi.w	#$FF80,d1
0000B83E 9041                       		sub.w	d1,d0
0000B840 0C40 0280                  		cmpi.w	#$280,d0
0000B844 6200 0000                  		bhi.w	DeleteObject
0000B848 4E75                       		rts	
0000B84A                            ; ===========================================================================
0000B84A                            
0000B84A                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B84A 7400                       		moveq	#0,d2
0000B84C                            
0000B84C                            loc_B0E8:
0000B84C 45E8 0036                  		lea	$36(a0),a2
0000B850 1412                       		move.b	(a2),d2
0000B852 421A                       		clr.b	(a2)+
0000B854 5302                       		subq.b	#1,d2
0000B856 6500                       		bcs.s	locret_B116
0000B858                            
0000B858                            loc_B0F4:
0000B858 7000                       		moveq	#0,d0
0000B85A 1012                       		move.b	(a2),d0
0000B85C 421A                       		clr.b	(a2)+
0000B85E ED48                       		lsl.w	#6,d0
0000B860 0640 D000                  		addi.w	#-$3000,d0
0000B864 3240                       		movea.w	d0,a1
0000B866 6100 0000                  		bsr.w	DeleteObject2
0000B86A 51CA FFEC                  		dbf	d2,loc_B0F4
0000B86E 117C 0000 0035             		move.b	#0,$35(a0)
0000B874 117C 0000 0034             		move.b	#0,$34(a0)
0000B87A                            
0000B87A                            locret_B116:
0000B87A 4E75                       		rts	
0000B87C                            ; ===========================================================================
0000B87C                            ; ---------------------------------------------------------------------------
0000B87C                            ; Collision data for large moving platforms (MZ)
0000B87C                            ; ---------------------------------------------------------------------------
0000B87C                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B8C8                            		even
0000B8C8                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B8F4                            		even
0000B8F4                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B940                            		even
0000B940                            ; ===========================================================================
0000B940                            ; ---------------------------------------------------------------------------
0000B940                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B940                            ; (appears when	you walk on sinking platforms)
0000B940                            ; ---------------------------------------------------------------------------
0000B940                            
0000B940                            Obj35:					; XREF: Obj_Index
0000B940 7000                       		moveq	#0,d0
0000B942 1028 0024                  		move.b	$24(a0),d0
0000B946 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B94A 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B94E                            ; ===========================================================================
0000B94E 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B950 0000                       		dc.w loc_B238-Obj35_Index
0000B952 0000                       		dc.w Obj35_Move-Obj35_Index
0000B954                            ; ===========================================================================
0000B954                            
0000B954                            Obj35_Main:				; XREF: Obj35_Index
0000B954 5428 0024                  		addq.b	#2,$24(a0)
0000B958 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B960 317C 0345 0002             		move.w	#$345,2(a0)
0000B966 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B96C 117C 0004 0001             		move.b	#4,1(a0)
0000B972 117C 0001 0018             		move.b	#1,$18(a0)
0000B978 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B97E 117C 0008 0019             		move.b	#8,$19(a0)
0000B984 303C 00C8                  		move.w	#$C8,d0
0000B988 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play flame sound
0000B98E 4A28 0028                  		tst.b	$28(a0)
0000B992 6700                       		beq.s	loc_B238
0000B994 5428 0024                  		addq.b	#2,$24(a0)
0000B998 6000 0000                  		bra.w	Obj35_Move
0000B99C                            ; ===========================================================================
0000B99C                            
0000B99C                            loc_B238:				; XREF: Obj35_Index
0000B99C 2268 0030                  		movea.l	$30(a0),a1
0000B9A0 3228 0008                  		move.w	8(a0),d1
0000B9A4 9268 002A                  		sub.w	$2A(a0),d1
0000B9A8 0641 000C                  		addi.w	#$C,d1
0000B9AC 3001                       		move.w	d1,d0
0000B9AE E248                       		lsr.w	#1,d0
0000B9B0 1031 0000                  		move.b	(a1,d0.w),d0
0000B9B4 4440                       		neg.w	d0
0000B9B6 D068 002C                  		add.w	$2C(a0),d0
0000B9BA 3400                       		move.w	d0,d2
0000B9BC D068 003C                  		add.w	$3C(a0),d0
0000B9C0 3140 000C                  		move.w	d0,$C(a0)
0000B9C4 0C41 0084                  		cmpi.w	#$84,d1
0000B9C8 6400                       		bcc.s	loc_B2B0
0000B9CA 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B9D2 0C41 0080                  		cmpi.w	#$80,d1
0000B9D6 6400                       		bcc.s	loc_B2B0
0000B9D8 2028 0008                  		move.l	8(a0),d0
0000B9DC 0680 0008 0000             		addi.l	#$80000,d0
0000B9E2 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B9E8 6600                       		bne.s	loc_B2B0
0000B9EA 6100 0000                  		bsr.w	SingleObjLoad2
0000B9EE 6600                       		bne.s	loc_B2B0
0000B9F0 12BC 0035                  		move.b	#$35,0(a1)
0000B9F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000B9FA 3342 002C                  		move.w	d2,$2C(a1)
0000B9FE 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BA04 137C 0001 0028             		move.b	#1,$28(a1)
0000BA0A 2468 0038                  		movea.l	$38(a0),a2
0000BA0E 6100 FDF0                  		bsr.w	sub_B09C
0000BA12                            
0000BA12                            loc_B2B0:
0000BA12 6000                       		bra.s	Obj35_Animate
0000BA14                            ; ===========================================================================
0000BA14                            
0000BA14                            Obj35_Move:				; XREF: Obj35_Index
0000BA14 3028 002C                  		move.w	$2C(a0),d0
0000BA18 D068 003C                  		add.w	$3C(a0),d0
0000BA1C 3140 000C                  		move.w	d0,$C(a0)
0000BA20                            
0000BA20                            Obj35_Animate:				; XREF: loc_B238
0000BA20 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BA26 6100 F4AA                  		bsr.w	AnimateSprite
0000BA2A 6000 0000                  		bra.w	DisplaySprite
0000BA2E                            ; ===========================================================================
0000BA2E                            Ani_obj35:
0000BA2E                            	include "_anim\obj35.asm"
0000BA2E                            ; ---------------------------------------------------------------------------
0000BA2E                            ; Animation script - fireball that sits on the	floor (MZ)
0000BA2E                            ; ---------------------------------------------------------------------------
0000BA2E 0000                       		dc.w byte_B2CE-Ani_obj35
0000BA30 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BA36                            		even
0000BA36                            		even
0000BA36                            
0000BA36                            ; ---------------------------------------------------------------------------
0000BA36                            ; Sprite mappings - large moving platforms (MZ)
0000BA36                            ; ---------------------------------------------------------------------------
0000BA36                            Map_obj2F:
0000BA36                            	include "_maps\obj2F.asm"
0000BA36                            ; ---------------------------------------------------------------------------
0000BA36                            ; Sprite mappings - large moving platforms (MZ)
0000BA36                            ; ---------------------------------------------------------------------------
0000BA36 0000                       		dc.w byte_B2DA-Map_obj2F
0000BA38 0000                       		dc.w byte_B31C-Map_obj2F
0000BA3A 0000                       		dc.w byte_B34F-Map_obj2F
0000BA3C 0D                         byte_B2DA:	dc.b $D
0000BA3D D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BA42 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BA47 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA4C D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BA51 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BA56 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA5B D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BA60 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BA65 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BA6A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA6F 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BA74 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BA79 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BA7E 0A                         byte_B31C:	dc.b $A
0000BA7F D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BA84 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BA89 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA8E C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BA93 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BA98 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA9D C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BAA2 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BAA7 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BAAC E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BAB1 06                         byte_B34F:	dc.b 6
0000BAB2 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BAB7 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BABC 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BAC1 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BAC6 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BACB 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BAD0                            		even
0000BAD0                            		even
0000BAD0                            
0000BAD0                            ; ---------------------------------------------------------------------------
0000BAD0                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BAD0                            ; ---------------------------------------------------------------------------
0000BAD0                            Map_obj14:
0000BAD0                            	include "_maps\obj14.asm"
0000BAD0                            ; --------------------------------------------------------------------------------
0000BAD0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BAD0                            ; --------------------------------------------------------------------------------
0000BAD0                            
0000BAD0                            SME_C6wT7:	
0000BAD0 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BAD4 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BAD8 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BADC 01                         SME_C6wT7_C:	dc.b 1	
0000BADD E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BAE2 01                         SME_C6wT7_12:	dc.b 1	
0000BAE3 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BAE8 02                         SME_C6wT7_18:	dc.b 2	
0000BAE9 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BAEE E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BAF3 01                         SME_C6wT7_23:	dc.b 1	
0000BAF4 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAF9 01                         SME_C6wT7_29:	dc.b 1	
0000BAFA F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAFF 01                         SME_C6wT7_2F:	dc.b 1	
0000BB00 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BB06 00                         		even
0000BB06 00                         		even
0000BB06                            
0000BB06                            ; ===========================================================================
0000BB06                            ; ---------------------------------------------------------------------------
0000BB06                            ; Object 30 - large green glassy blocks	(MZ)
0000BB06                            ; ---------------------------------------------------------------------------
0000BB06                            
0000BB06                            Obj30:					; XREF: Obj_Index
0000BB06 7000                       		moveq	#0,d0
0000BB08 1028 0024                  		move.b	$24(a0),d0
0000BB0C 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BB10 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BB14 3028 0008                  		move.w	8(a0),d0
0000BB18 0240 FF80                  		andi.w	#$FF80,d0
0000BB1C 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB20 0441 0080                  		subi.w	#$80,d1
0000BB24 0241 FF80                  		andi.w	#$FF80,d1
0000BB28 9041                       		sub.w	d1,d0
0000BB2A 0C40 0280                  		cmpi.w	#$280,d0
0000BB2E 6200 0000                  		bhi.w	Obj30_Delete
0000BB32 6000 0000                  		bra.w	DisplaySprite
0000BB36                            ; ===========================================================================
0000BB36                            
0000BB36                            Obj30_Delete:
0000BB36 6000 0000                  		bra.w	DeleteObject
0000BB3A                            ; ===========================================================================
0000BB3A 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BB3C 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BB3E 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BB40 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BB42 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BB44                            
0000BB44 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BB47 0400 01                    		dc.b 4,	0, 1
0000BB4A 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BB4D 0800 01                    		dc.b 8,	0, 1
0000BB50                            ; ===========================================================================
0000BB50                            
0000BB50                            Obj30_Main:				; XREF: Obj30_Index
0000BB50 45F9 0000 BB44             		lea	(Obj30_Vars1).l,a2
0000BB56 7201                       		moveq	#1,d1
0000BB58 117C 0048 0016             		move.b	#$48,$16(a0)
0000BB5E 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BB64 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BB66 45F9 0000 BB4A             		lea	(Obj30_Vars2).l,a2
0000BB6C 7201                       		moveq	#1,d1
0000BB6E 117C 0038 0016             		move.b	#$38,$16(a0)
0000BB74                            
0000BB74                            loc_B40C:
0000BB74 2248                       		movea.l	a0,a1
0000BB76 6000                       		bra.s	Obj30_Load	; load main object
0000BB78                            ; ===========================================================================
0000BB78                            
0000BB78                            Obj30_Loop:
0000BB78 6100 0000                  		bsr.w	SingleObjLoad2
0000BB7C 6600                       		bne.s	loc_B480
0000BB7E                            
0000BB7E                            Obj30_Load:				; XREF: Obj30_Main
0000BB7E 135A 0024                  		move.b	(a2)+,$24(a1)
0000BB82 12BC 0030                  		move.b	#$30,0(a1)
0000BB86 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB8C 101A                       		move.b	(a2)+,d0
0000BB8E 4880                       		ext.w	d0
0000BB90 D068 000C                  		add.w	$C(a0),d0
0000BB94 3340 000C                  		move.w	d0,$C(a1)
0000BB98 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BBA0 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BBA6 137C 0004 0001             		move.b	#4,1(a1)
0000BBAC 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BBB2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BBB8 137C 0020 0019             		move.b	#$20,$19(a1)
0000BBBE 137C 0004 0018             		move.b	#4,$18(a1)
0000BBC4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BBC8 2348 003C                  		move.l	a0,$3C(a1)
0000BBCC 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BBD0                            
0000BBD0 137C 0010 0019             		move.b	#$10,$19(a1)
0000BBD6 137C 0003 0018             		move.b	#3,$18(a1)
0000BBDC 5029 0028                  		addq.b	#8,$28(a1)
0000BBE0 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BBE6                            
0000BBE6                            loc_B480:
0000BBE6 317C 0090 0032             		move.w	#$90,$32(a0)
0000BBEC 08E8 0004 0001             		bset	#4,1(a0)
0000BBF2                            
0000BBF2                            Obj30_Block012:				; XREF: Obj30_Index
0000BBF2 6100 0000                  		bsr.w	Obj30_Types
0000BBF6 323C 002B                  		move.w	#$2B,d1
0000BBFA 343C 0048                  		move.w	#$48,d2
0000BBFE 363C 0049                  		move.w	#$49,d3
0000BC02 3828 0008                  		move.w	8(a0),d4
0000BC06 6000 0000                  		bra.w	SolidObject
0000BC0A                            ; ===========================================================================
0000BC0A                            
0000BC0A                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BC0A 2268 003C                  		movea.l	$3C(a0),a1
0000BC0E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC14 6000 0000                  		bra.w	Obj30_Types
0000BC18                            ; ===========================================================================
0000BC18                            
0000BC18                            Obj30_Block34:				; XREF: Obj30_Index
0000BC18 6100 0000                  		bsr.w	Obj30_Types
0000BC1C 323C 002B                  		move.w	#$2B,d1
0000BC20 343C 0038                  		move.w	#$38,d2
0000BC24 363C 0039                  		move.w	#$39,d3
0000BC28 3828 0008                  		move.w	8(a0),d4
0000BC2C 6000 0000                  		bra.w	SolidObject
0000BC30                            ; ===========================================================================
0000BC30                            
0000BC30                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BC30 2268 003C                  		movea.l	$3C(a0),a1
0000BC34 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC3A 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BC40 6000 0002                  		bra.w	*+4
0000BC44                            
0000BC44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC44                            
0000BC44                            
0000BC44                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BC44 7000                       		moveq	#0,d0
0000BC46 1028 0028                  		move.b	$28(a0),d0
0000BC4A 0240 0007                  		andi.w	#7,d0
0000BC4E D040                       		add.w	d0,d0
0000BC50 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BC54 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BC58                            ; End of function Obj30_Types
0000BC58                            
0000BC58                            ; ===========================================================================
0000BC58 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BC5A 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BC5C 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BC5E 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BC60 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BC62                            ; ===========================================================================
0000BC62                            
0000BC62                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BC62 4E75                       		rts	
0000BC64                            ; ===========================================================================
0000BC64                            
0000BC64                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BC64 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC68 323C 0040                  		move.w	#$40,d1
0000BC6C 6000                       		bra.s	loc_B514
0000BC6E                            ; ===========================================================================
0000BC6E                            
0000BC6E                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BC6E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC72 323C 0040                  		move.w	#$40,d1
0000BC76 4440                       		neg.w	d0
0000BC78 D041                       		add.w	d1,d0
0000BC7A                            
0000BC7A                            loc_B514:				; XREF: Obj30_Type01
0000BC7A 0828 0003 0028             		btst	#3,$28(a0)
0000BC80 6700                       		beq.s	loc_B526
0000BC82 4440                       		neg.w	d0
0000BC84 D041                       		add.w	d1,d0
0000BC86 E208                       		lsr.b	#1,d0
0000BC88 0640 0020                  		addi.w	#$20,d0
0000BC8C                            
0000BC8C                            loc_B526:
0000BC8C 6000 0000                  		bra.w	loc_B5EE
0000BC90                            ; ===========================================================================
0000BC90                            
0000BC90                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BC90 0828 0003 0028             		btst	#3,$28(a0)
0000BC96 6700                       		beq.s	loc_B53E
0000BC98 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC9C 0440 0010                  		subi.w	#$10,d0
0000BCA0 6000 0000                  		bra.w	loc_B5EE
0000BCA4                            ; ===========================================================================
0000BCA4                            
0000BCA4                            loc_B53E:
0000BCA4 0828 0003 0022             		btst	#3,$22(a0)
0000BCAA 6600                       		bne.s	loc_B54E
0000BCAC 08A8 0000 0034             		bclr	#0,$34(a0)
0000BCB2 6000                       		bra.s	loc_B582
0000BCB4                            ; ===========================================================================
0000BCB4                            
0000BCB4                            loc_B54E:
0000BCB4 4A28 0034                  		tst.b	$34(a0)
0000BCB8 6600                       		bne.s	loc_B582
0000BCBA 117C 0001 0034             		move.b	#1,$34(a0)
0000BCC0 08E8 0000 0035             		bset	#0,$35(a0)
0000BCC6 6700                       		beq.s	loc_B582
0000BCC8 08E8 0007 0034             		bset	#7,$34(a0)
0000BCCE 317C 0010 0036             		move.w	#$10,$36(a0)
0000BCD4 117C 000A 0038             		move.b	#$A,$38(a0)
0000BCDA 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BCE0 6600                       		bne.s	loc_B582
0000BCE2 317C 0040 0036             		move.w	#$40,$36(a0)
0000BCE8                            
0000BCE8                            loc_B582:
0000BCE8 4A28 0034                  		tst.b	$34(a0)
0000BCEC 6A00                       		bpl.s	loc_B5AA
0000BCEE 4A28 0038                  		tst.b	$38(a0)
0000BCF2 6700                       		beq.s	loc_B594
0000BCF4 5328 0038                  		subq.b	#1,$38(a0)
0000BCF8 6600                       		bne.s	loc_B5AA
0000BCFA                            
0000BCFA                            loc_B594:
0000BCFA 4A68 0032                  		tst.w	$32(a0)
0000BCFE 6700                       		beq.s	loc_B5A4
0000BD00 5368 0032                  		subq.w	#1,$32(a0)
0000BD04 5368 0036                  		subq.w	#1,$36(a0)
0000BD08 6600                       		bne.s	loc_B5AA
0000BD0A                            
0000BD0A                            loc_B5A4:
0000BD0A 08A8 0007 0034             		bclr	#7,$34(a0)
0000BD10                            
0000BD10                            loc_B5AA:
0000BD10 3028 0032                  		move.w	$32(a0),d0
0000BD14 6000                       		bra.s	loc_B5EE
0000BD16                            ; ===========================================================================
0000BD16                            
0000BD16                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BD16 0828 0003 0028             		btst	#3,$28(a0)
0000BD1C 6700                       		beq.s	Obj30_ChkSwitch
0000BD1E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BD22 0440 0010                  		subi.w	#$10,d0
0000BD26 6000                       		bra.s	loc_B5EE
0000BD28                            ; ===========================================================================
0000BD28                            
0000BD28                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BD28 4A28 0034                  		tst.b	$34(a0)
0000BD2C 6600                       		bne.s	loc_B5E0
0000BD2E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BD32 7000                       		moveq	#0,d0
0000BD34 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BD38 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BD3A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BD3E 6700                       		beq.s	loc_B5EA	; if not, branch
0000BD40 117C 0001 0034             		move.b	#1,$34(a0)
0000BD46                            
0000BD46                            loc_B5E0:
0000BD46 4A68 0032                  		tst.w	$32(a0)
0000BD4A 6700                       		beq.s	loc_B5EA
0000BD4C 5568 0032                  		subq.w	#2,$32(a0)
0000BD50                            
0000BD50                            loc_B5EA:
0000BD50 3028 0032                  		move.w	$32(a0),d0
0000BD54                            
0000BD54                            loc_B5EE:
0000BD54 3228 0030                  		move.w	$30(a0),d1
0000BD58 9240                       		sub.w	d0,d1
0000BD5A 3141 000C                  		move.w	d1,$C(a0)
0000BD5E 4E75                       		rts	
0000BD60                            ; ===========================================================================
0000BD60                            ; ---------------------------------------------------------------------------
0000BD60                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD60                            ; ---------------------------------------------------------------------------
0000BD60                            Map_obj30:
0000BD60                            	include "_maps\obj30.asm"
0000BD60                            ; ---------------------------------------------------------------------------
0000BD60                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD60                            ; ---------------------------------------------------------------------------
0000BD60 0000                       		dc.w byte_B600-Map_obj30
0000BD62 0000                       		dc.w byte_B63D-Map_obj30
0000BD64 0000                       		dc.w byte_B648-Map_obj30
0000BD66 0C                         byte_B600:	dc.b $C
0000BD67 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BD6C B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BD71 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BD76 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BD7B E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BD80 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BD85 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BD8A 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BD8F 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BD94 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BD99 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BD9E 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BDA3 02                         byte_B63D:	dc.b 2
0000BDA4 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BDA9 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BDAE 0A                         byte_B648:	dc.b $A
0000BDAF C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BDB4 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BDB9 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BDBE D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BDC3 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BDC8 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BDCD 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BDD2 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BDD7 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BDDC 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BDE2 00                         		even
0000BDE2 00                         		even
0000BDE2                            
0000BDE2                            ; ===========================================================================
0000BDE2                            ; ---------------------------------------------------------------------------
0000BDE2                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BDE2                            ; ---------------------------------------------------------------------------
0000BDE2                            
0000BDE2                            Obj31:					; XREF: Obj_Index
0000BDE2 7000                       		moveq	#0,d0
0000BDE4 1028 0024                  		move.b	$24(a0),d0
0000BDE8 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BDEC 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BDF0                            ; ===========================================================================
0000BDF0 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BDF2 0000                       		dc.w loc_B798-Obj31_Index
0000BDF4 0000                       		dc.w loc_B7FE-Obj31_Index
0000BDF6 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BDF8 0000                       		dc.w loc_B7E2-Obj31_Index
0000BDFA                            
0000BDFA 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BDFC 0100                       		dc.b 1,	0
0000BDFE                            
0000BDFE 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BE01 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BE04 08CC 03                    		dc.b 8,	$CC, 3
0000BE07 06F0 02                    		dc.b 6,	$F0, 2
0000BE0A                            
0000BE0A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BE0E 5000 7800                  		dc.w $5000, $7800
0000BE12 3800 5800                  		dc.w $3800, $5800
0000BE16 B800                       		dc.w $B800
0000BE18                            ; ===========================================================================
0000BE18                            
0000BE18                            Obj31_Main:				; XREF: Obj31_Index
0000BE18 7000                       		moveq	#0,d0
0000BE1A 1028 0028                  		move.b	$28(a0),d0
0000BE1E 6A00                       		bpl.s	loc_B6CE
0000BE20 0240 007F                  		andi.w	#$7F,d0
0000BE24 D040                       		add.w	d0,d0
0000BE26 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BE2A 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BE2E 101A                       		move.b	(a2)+,d0
0000BE30 1140 0028                  		move.b	d0,$28(a0)
0000BE34                            
0000BE34                            loc_B6CE:
0000BE34 0200 000F                  		andi.b	#$F,d0
0000BE38 D040                       		add.w	d0,d0
0000BE3A 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BE3E 4A40                       		tst.w	d0
0000BE40 6600                       		bne.s	loc_B6E0
0000BE42 3142 0032                  		move.w	d2,$32(a0)
0000BE46                            
0000BE46                            loc_B6E0:
0000BE46 45F9 0000 BDFE             		lea	(Obj31_Var).l,a2
0000BE4C 2248                       		movea.l	a0,a1
0000BE4E 7203                       		moveq	#3,d1
0000BE50 6000                       		bra.s	Obj31_MakeStomper
0000BE52                            ; ===========================================================================
0000BE52                            
0000BE52                            Obj31_Loop:
0000BE52 6100 0000                  		bsr.w	SingleObjLoad2
0000BE56 6600 0000                  		bne.w	Obj31_SetSize
0000BE5A                            
0000BE5A                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BE5A 135A 0024                  		move.b	(a2)+,$24(a1)
0000BE5E 12BC 0031                  		move.b	#$31,0(a1)
0000BE62 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE68 101A                       		move.b	(a2)+,d0
0000BE6A 4880                       		ext.w	d0
0000BE6C D068 000C                  		add.w	$C(a0),d0
0000BE70 3340 000C                  		move.w	d0,$C(a1)
0000BE74 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BE7C 337C 0300 0002             		move.w	#$300,2(a1)
0000BE82 137C 0004 0001             		move.b	#4,1(a1)
0000BE88 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BE8E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BE94 137C 0010 0019             		move.b	#$10,$19(a1)
0000BE9A 3342 0034                  		move.w	d2,$34(a1)
0000BE9E 137C 0004 0018             		move.b	#4,$18(a1)
0000BEA4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BEA8 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BEAE 6600                       		bne.s	loc_B76A
0000BEB0 5341                       		subq.w	#1,d1
0000BEB2 1028 0028                  		move.b	$28(a0),d0
0000BEB6 0240 00F0                  		andi.w	#$F0,d0
0000BEBA 0C40 0020                  		cmpi.w	#$20,d0
0000BEBE 679A                       		beq.s	Obj31_MakeStomper
0000BEC0 137C 0038 0019             		move.b	#$38,$19(a1)
0000BEC6 137C 0090 0020             		move.b	#$90,$20(a1)
0000BECC 5241                       		addq.w	#1,d1
0000BECE                            
0000BECE                            loc_B76A:
0000BECE 2348 003C                  		move.l	a0,$3C(a1)
0000BED2 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BED6                            
0000BED6 137C 0003 0018             		move.b	#3,$18(a1)
0000BEDC                            
0000BEDC                            Obj31_SetSize:
0000BEDC 7000                       		moveq	#0,d0
0000BEDE 1028 0028                  		move.b	$28(a0),d0
0000BEE2 E648                       		lsr.w	#3,d0
0000BEE4 0200 000E                  		andi.b	#$E,d0
0000BEE8 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BEEC 115A 0019                  		move.b	(a2)+,$19(a0)
0000BEF0 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BEF4 6000                       		bra.s	loc_B798
0000BEF6                            ; ===========================================================================
0000BEF6 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BEF8 3009                       		dc.b $30, 9
0000BEFA 100A                       		dc.b $10, $A
0000BEFC                            ; ===========================================================================
0000BEFC                            
0000BEFC                            loc_B798:				; XREF: Obj31_Index
0000BEFC 6100 0000                  		bsr.w	Obj31_Types
0000BF00 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BF06 7200                       		moveq	#0,d1
0000BF08 1228 0019                  		move.b	$19(a0),d1
0000BF0C 0641 000B                  		addi.w	#$B,d1
0000BF10 343C 000C                  		move.w	#$C,d2
0000BF14 363C 000D                  		move.w	#$D,d3
0000BF18 3828 0008                  		move.w	8(a0),d4
0000BF1C 6100 0000                  		bsr.w	SolidObject
0000BF20 0828 0003 0022             		btst	#3,$22(a0)
0000BF26 6700                       		beq.s	Obj31_Display
0000BF28 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF2E 6400                       		bcc.s	Obj31_Display
0000BF30 2448                       		movea.l	a0,a2
0000BF32 41F8 D000                  		lea	($FFFFD000).w,a0
0000BF36 4EB9 0000 0000             		jsr	KillSonic
0000BF3C 204A                       		movea.l	a2,a0
0000BF3E                            
0000BF3E                            Obj31_Display:
0000BF3E 6100 0000                  		bsr.w	DisplaySprite
0000BF42 6000 0000                  		bra.w	Obj31_ChkDel
0000BF46                            ; ===========================================================================
0000BF46                            
0000BF46                            loc_B7E2:				; XREF: Obj31_Index
0000BF46 117C 0080 0016             		move.b	#$80,$16(a0)
0000BF4C 08E8 0004 0001             		bset	#4,1(a0)
0000BF52 2268 003C                  		movea.l	$3C(a0),a1
0000BF56 1029 0032                  		move.b	$32(a1),d0
0000BF5A EA08                       		lsr.b	#5,d0
0000BF5C 5600                       		addq.b	#3,d0
0000BF5E 1140 001A                  		move.b	d0,$1A(a0)
0000BF62                            
0000BF62                            loc_B7FE:				; XREF: Obj31_Index
0000BF62 2268 003C                  		movea.l	$3C(a0),a1
0000BF66 7000                       		moveq	#0,d0
0000BF68 1029 0032                  		move.b	$32(a1),d0
0000BF6C D068 0030                  		add.w	$30(a0),d0
0000BF70 3140 000C                  		move.w	d0,$C(a0)
0000BF74                            
0000BF74                            Obj31_Display2:				; XREF: Obj31_Index
0000BF74 6100 0000                  		bsr.w	DisplaySprite
0000BF78                            
0000BF78                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BF78 3028 0008                  		move.w	8(a0),d0
0000BF7C 0240 FF80                  		andi.w	#$FF80,d0
0000BF80 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF84 0441 0080                  		subi.w	#$80,d1
0000BF88 0241 FF80                  		andi.w	#$FF80,d1
0000BF8C 9041                       		sub.w	d1,d0
0000BF8E 0C40 0280                  		cmpi.w	#$280,d0
0000BF92 6200 0000                  		bhi.w	DeleteObject
0000BF96 4E75                       		rts	
0000BF98                            ; ===========================================================================
0000BF98                            
0000BF98                            Obj31_Types:				; XREF: loc_B798
0000BF98 1028 0028                  		move.b	$28(a0),d0
0000BF9C 0240 000F                  		andi.w	#$F,d0
0000BFA0 D040                       		add.w	d0,d0
0000BFA2 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BFA6 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BFAA                            ; ===========================================================================
0000BFAA 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BFAC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFAE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFB0 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFB2 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFB4 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFB6 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFB8                            ; ===========================================================================
0000BFB8                            
0000BFB8                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BFB8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BFBC 7000                       		moveq	#0,d0
0000BFBE 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BFC2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BFC6 6700                       		beq.s	loc_B8A8	; if not, branch
0000BFC8 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BFCC 6A00                       		bpl.s	loc_B872
0000BFCE 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BFD4 6700                       		beq.s	loc_B8A0
0000BFD6                            
0000BFD6                            loc_B872:
0000BFD6 4A68 0032                  		tst.w	$32(a0)
0000BFDA 6700                       		beq.s	loc_B8A0
0000BFDC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BFE0 0200 000F                  		andi.b	#$F,d0
0000BFE4 6600                       		bne.s	loc_B892
0000BFE6 4A28 0001                  		tst.b	1(a0)
0000BFEA 6A00                       		bpl.s	loc_B892
0000BFEC 303C 00C7                  		move.w	#$C7,d0
0000BFF0 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BFF6                            
0000BFF6                            loc_B892:
0000BFF6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFFC 6400                       		bcc.s	Obj31_Restart
0000BFFE 317C 0000 0032             		move.w	#0,$32(a0)
0000C004                            
0000C004                            loc_B8A0:
0000C004 317C 0000 0012             		move.w	#0,$12(a0)
0000C00A 6000                       		bra.s	Obj31_Restart
0000C00C                            ; ===========================================================================
0000C00C                            
0000C00C                            loc_B8A8:				; XREF: Obj31_Type00
0000C00C 3228 0034                  		move.w	$34(a0),d1
0000C010 B268 0032                  		cmp.w	$32(a0),d1
0000C014 6700                       		beq.s	Obj31_Restart
0000C016 3028 0012                  		move.w	$12(a0),d0
0000C01A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C020 D168 0032                  		add.w	d0,$32(a0)
0000C024 B268 0032                  		cmp.w	$32(a0),d1
0000C028 6200                       		bhi.s	Obj31_Restart
0000C02A 3141 0032                  		move.w	d1,$32(a0)
0000C02E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C034 4A28 0001                  		tst.b	1(a0)
0000C038 6A00                       		bpl.s	Obj31_Restart
0000C03A 303C 00BD                  		move.w	#$BD,d0
0000C03E 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C044                            
0000C044                            Obj31_Restart:
0000C044 7000                       		moveq	#0,d0
0000C046 1028 0032                  		move.b	$32(a0),d0
0000C04A D068 0030                  		add.w	$30(a0),d0
0000C04E 3140 000C                  		move.w	d0,$C(a0)
0000C052 4E75                       		rts	
0000C054                            ; ===========================================================================
0000C054                            
0000C054                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C054 4A68 0036                  		tst.w	$36(a0)
0000C058 6700                       		beq.s	loc_B938
0000C05A 4A68 0038                  		tst.w	$38(a0)
0000C05E 6700                       		beq.s	loc_B902
0000C060 5368 0038                  		subq.w	#1,$38(a0)
0000C064 6000                       		bra.s	loc_B97C
0000C066                            ; ===========================================================================
0000C066                            
0000C066                            loc_B902:
0000C066 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C06A 0200 000F                  		andi.b	#$F,d0
0000C06E 6600                       		bne.s	loc_B91C
0000C070 4A28 0001                  		tst.b	1(a0)
0000C074 6A00                       		bpl.s	loc_B91C
0000C076 303C 00C7                  		move.w	#$C7,d0
0000C07A 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C080                            
0000C080                            loc_B91C:
0000C080 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C086 6400                       		bcc.s	loc_B97C
0000C088 317C 0000 0032             		move.w	#0,$32(a0)
0000C08E 317C 0000 0012             		move.w	#0,$12(a0)
0000C094 317C 0000 0036             		move.w	#0,$36(a0)
0000C09A 6000                       		bra.s	loc_B97C
0000C09C                            ; ===========================================================================
0000C09C                            
0000C09C                            loc_B938:				; XREF: Obj31_Type01
0000C09C 3228 0034                  		move.w	$34(a0),d1
0000C0A0 B268 0032                  		cmp.w	$32(a0),d1
0000C0A4 6700                       		beq.s	loc_B97C
0000C0A6 3028 0012                  		move.w	$12(a0),d0
0000C0AA 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C0B0 D168 0032                  		add.w	d0,$32(a0)
0000C0B4 B268 0032                  		cmp.w	$32(a0),d1
0000C0B8 6200                       		bhi.s	loc_B97C
0000C0BA 3141 0032                  		move.w	d1,$32(a0)
0000C0BE 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C0C4 317C 0001 0036             		move.w	#1,$36(a0)
0000C0CA 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C0D0 4A28 0001                  		tst.b	1(a0)
0000C0D4 6A00                       		bpl.s	loc_B97C
0000C0D6 303C 00BD                  		move.w	#$BD,d0
0000C0DA 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C0E0                            
0000C0E0                            loc_B97C:
0000C0E0 6000 FF62                  		bra.w	Obj31_Restart
0000C0E4                            ; ===========================================================================
0000C0E4                            
0000C0E4                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C0E4 3038 D008                  		move.w	($FFFFD008).w,d0
0000C0E8 9068 0008                  		sub.w	8(a0),d0
0000C0EC 6400                       		bcc.s	loc_B98C
0000C0EE 4440                       		neg.w	d0
0000C0F0                            
0000C0F0                            loc_B98C:
0000C0F0 0C40 0090                  		cmpi.w	#$90,d0
0000C0F4 6400                       		bcc.s	loc_B996
0000C0F6 5228 0028                  		addq.b	#1,$28(a0)
0000C0FA                            
0000C0FA                            loc_B996:
0000C0FA 6000 FF48                  		bra.w	Obj31_Restart
0000C0FE                            ; ===========================================================================
0000C0FE                            ; ---------------------------------------------------------------------------
0000C0FE                            ; Object 45 - spiked metal block from beta version (MZ)
0000C0FE                            ; ---------------------------------------------------------------------------
0000C0FE                            
0000C0FE                            Obj45:					; XREF: Obj_Index
0000C0FE 7000                       		moveq	#0,d0
0000C100 1028 0024                  		move.b	$24(a0),d0
0000C104 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C108 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C10C                            ; ===========================================================================
0000C10C 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C10E 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C110 0000                       		dc.w loc_BA8E-Obj45_Index
0000C112 0000                       		dc.w Obj45_Display-Obj45_Index
0000C114 0000                       		dc.w loc_BA7A-Obj45_Index
0000C116                            
0000C116 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C119 04E4 01                    		dc.b	4, $E4,	  1
0000C11C 0834 03                    		dc.b	8, $34,	  3
0000C11F 0628 02                    		dc.b	6, $28,	  2
0000C122                            
0000C122 3800                       word_B9BE:	dc.w $3800
0000C124 A000                       		dc.w -$6000
0000C126 5000                       		dc.w $5000
0000C128                            ; ===========================================================================
0000C128                            
0000C128                            Obj45_Main:				; XREF: Obj45_Index
0000C128 7000                       		moveq	#0,d0
0000C12A 1028 0028                  		move.b	$28(a0),d0
0000C12E D040                       		add.w	d0,d0
0000C130 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C134 45F9 0000 C116             		lea	(Obj45_Var).l,a2
0000C13A 2248                       		movea.l	a0,a1
0000C13C 7203                       		moveq	#3,d1
0000C13E 6000                       		bra.s	Obj45_Load
0000C140                            ; ===========================================================================
0000C140                            
0000C140                            Obj45_Loop:
0000C140 6100 0000                  		bsr.w	SingleObjLoad2
0000C144 6600                       		bne.s	loc_BA52
0000C146                            
0000C146                            Obj45_Load:				; XREF: Obj45_Main
0000C146 135A 0024                  		move.b	(a2)+,$24(a1)
0000C14A 12BC 0045                  		move.b	#$45,0(a1)
0000C14E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C154 101A                       		move.b	(a2)+,d0
0000C156 4880                       		ext.w	d0
0000C158 D068 0008                  		add.w	8(a0),d0
0000C15C 3340 0008                  		move.w	d0,8(a1)
0000C160 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C168 337C 0300 0002             		move.w	#$300,2(a1)
0000C16E 137C 0004 0001             		move.b	#4,1(a1)
0000C174 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C17A 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C180 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C186 137C 0020 0019             		move.b	#$20,$19(a1)
0000C18C 3342 0034                  		move.w	d2,$34(a1)
0000C190 137C 0004 0018             		move.b	#4,$18(a1)
0000C196 0C12 0001                  		cmpi.b	#1,(a2)
0000C19A 6600                       		bne.s	loc_BA40
0000C19C 137C 0091 0020             		move.b	#$91,$20(a1)
0000C1A2                            
0000C1A2                            loc_BA40:
0000C1A2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C1A6 2348 003C                  		move.l	a0,$3C(a1)
0000C1AA 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C1AE                            
0000C1AE 137C 0003 0018             		move.b	#3,$18(a1)
0000C1B4                            
0000C1B4                            loc_BA52:
0000C1B4 117C 0010 0019             		move.b	#$10,$19(a0)
0000C1BA                            
0000C1BA                            Obj45_Solid:				; XREF: Obj45_Index
0000C1BA 3F28 0008                  		move.w	8(a0),-(sp)
0000C1BE 6100 0000                  		bsr.w	Obj45_Move
0000C1C2 323C 0017                  		move.w	#$17,d1
0000C1C6 343C 0020                  		move.w	#$20,d2
0000C1CA 363C 0020                  		move.w	#$20,d3
0000C1CE 381F                       		move.w	(sp)+,d4
0000C1D0 6100 0000                  		bsr.w	SolidObject
0000C1D4 6100 0000                  		bsr.w	DisplaySprite
0000C1D8 6000 0000                  		bra.w	Obj45_ChkDel
0000C1DC                            ; ===========================================================================
0000C1DC                            
0000C1DC                            loc_BA7A:				; XREF: Obj45_Index
0000C1DC 2268 003C                  		movea.l	$3C(a0),a1
0000C1E0 1029 0032                  		move.b	$32(a1),d0
0000C1E4 0600 0010                  		addi.b	#$10,d0
0000C1E8 EA08                       		lsr.b	#5,d0
0000C1EA 5600                       		addq.b	#3,d0
0000C1EC 1140 001A                  		move.b	d0,$1A(a0)
0000C1F0                            
0000C1F0                            loc_BA8E:				; XREF: Obj45_Index
0000C1F0 2268 003C                  		movea.l	$3C(a0),a1
0000C1F4 7000                       		moveq	#0,d0
0000C1F6 1029 0032                  		move.b	$32(a1),d0
0000C1FA 4440                       		neg.w	d0
0000C1FC D068 0030                  		add.w	$30(a0),d0
0000C200 3140 0008                  		move.w	d0,8(a0)
0000C204                            
0000C204                            Obj45_Display:				; XREF: Obj45_Index
0000C204 6100 0000                  		bsr.w	DisplaySprite
0000C208                            
0000C208                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C208 3028 003A                  		move.w	$3A(a0),d0
0000C20C 0240 FF80                  		andi.w	#$FF80,d0
0000C210 3238 F700                  		move.w	($FFFFF700).w,d1
0000C214 0441 0080                  		subi.w	#$80,d1
0000C218 0241 FF80                  		andi.w	#$FF80,d1
0000C21C 9041                       		sub.w	d1,d0
0000C21E 0C40 0280                  		cmpi.w	#$280,d0
0000C222 6200 0000                  		bhi.w	DeleteObject
0000C226 4E75                       		rts	
0000C228                            
0000C228                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C228                            
0000C228                            
0000C228                            Obj45_Move:				; XREF: Obj45_Solid
0000C228 7000                       		moveq	#0,d0
0000C22A 1028 0028                  		move.b	$28(a0),d0
0000C22E D040                       		add.w	d0,d0
0000C230 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C234 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C238                            ; End of function Obj45_Move
0000C238                            
0000C238                            ; ===========================================================================
0000C238 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C23A 0000                       		dc.w loc_BADA-off_BAD6
0000C23C                            ; ===========================================================================
0000C23C                            
0000C23C                            loc_BADA:				; XREF: off_BAD6
0000C23C 4A68 0036                  		tst.w	$36(a0)
0000C240 6700                       		beq.s	loc_BB08
0000C242 4A68 0038                  		tst.w	$38(a0)
0000C246 6700                       		beq.s	loc_BAEC
0000C248 5368 0038                  		subq.w	#1,$38(a0)
0000C24C 6000                       		bra.s	loc_BB3C
0000C24E                            ; ===========================================================================
0000C24E                            
0000C24E                            loc_BAEC:
0000C24E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C254 6400                       		bcc.s	loc_BB3C
0000C256 317C 0000 0032             		move.w	#0,$32(a0)
0000C25C 317C 0000 0010             		move.w	#0,$10(a0)
0000C262 317C 0000 0036             		move.w	#0,$36(a0)
0000C268 6000                       		bra.s	loc_BB3C
0000C26A                            ; ===========================================================================
0000C26A                            
0000C26A                            loc_BB08:				; XREF: loc_BADA
0000C26A 3228 0034                  		move.w	$34(a0),d1
0000C26E B268 0032                  		cmp.w	$32(a0),d1
0000C272 6700                       		beq.s	loc_BB3C
0000C274 3028 0010                  		move.w	$10(a0),d0
0000C278 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C27E D168 0032                  		add.w	d0,$32(a0)
0000C282 B268 0032                  		cmp.w	$32(a0),d1
0000C286 6200                       		bhi.s	loc_BB3C
0000C288 3141 0032                  		move.w	d1,$32(a0)
0000C28C 317C 0000 0010             		move.w	#0,$10(a0)
0000C292 317C 0001 0036             		move.w	#1,$36(a0)
0000C298 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C29E                            
0000C29E                            loc_BB3C:
0000C29E 7000                       		moveq	#0,d0
0000C2A0 1028 0032                  		move.b	$32(a0),d0
0000C2A4 4440                       		neg.w	d0
0000C2A6 D068 0030                  		add.w	$30(a0),d0
0000C2AA 3140 0008                  		move.w	d0,8(a0)
0000C2AE 4E75                       		rts	
0000C2B0                            ; ===========================================================================
0000C2B0                            ; ---------------------------------------------------------------------------
0000C2B0                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C2B0                            ; ---------------------------------------------------------------------------
0000C2B0                            Map_obj31:
0000C2B0                            	include "_maps\obj31.asm"
0000C2B0                            ; ---------------------------------------------------------------------------
0000C2B0                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C2B0                            ; ---------------------------------------------------------------------------
0000C2B0 0000                       		dc.w byte_BB64-Map_obj31
0000C2B2 0000                       		dc.w byte_BB7E-Map_obj31
0000C2B4 0000                       		dc.w byte_BB98-Map_obj31
0000C2B6 0000                       		dc.w byte_BB9E-Map_obj31
0000C2B8 0000                       		dc.w byte_BBA9-Map_obj31
0000C2BA 0000                       		dc.w byte_BBBE-Map_obj31
0000C2BC 0000                       		dc.w byte_BBDD-Map_obj31
0000C2BE 0000                       		dc.w byte_BC06-Map_obj31
0000C2C0 0000                       		dc.w byte_BC06-Map_obj31
0000C2C2 0000                       		dc.w byte_BC39-Map_obj31
0000C2C4 0000                       		dc.w byte_BC53-Map_obj31
0000C2C6 05                         byte_BB64:	dc.b 5
0000C2C7 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C2CC F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C2D1 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C2D6 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C2DB F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C2E0 05                         byte_BB7E:	dc.b 5
0000C2E1 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C2E6 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C2EB F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C2F0 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C2F5 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C2FA 01                         byte_BB98:	dc.b 1
0000C2FB DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C300 02                         byte_BB9E:	dc.b 2
0000C301 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C306 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C30B 04                         byte_BBA9:	dc.b 4
0000C30C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C311 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C316 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C31B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C320 06                         byte_BBBE:	dc.b 6
0000C321 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C326 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C32B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C330 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C335 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C33A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C33F 08                         byte_BBDD:	dc.b 8
0000C340 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C345 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C34A C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C34F D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C354 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C359 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C35E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C363 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C368 0A                         byte_BC06:	dc.b $A
0000C369 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C36E 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C373 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C378 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C37D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C382 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C387 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C38C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C391 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C396 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C39B 05                         byte_BC39:	dc.b 5
0000C39C F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C3A1 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C3A6 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C3AB F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C3B0 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C3B5 01                         byte_BC53:	dc.b 1
0000C3B6 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C3BC 00                         		even
0000C3BC 00                         		even
0000C3BC                            
0000C3BC                            ; ---------------------------------------------------------------------------
0000C3BC                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3BC                            ; ---------------------------------------------------------------------------
0000C3BC                            Map_obj45:
0000C3BC                            	include "_maps\obj45.asm"
0000C3BC                            ; ---------------------------------------------------------------------------
0000C3BC                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3BC                            ; ---------------------------------------------------------------------------
0000C3BC 0000                       		dc.w byte_BC6C-Map_obj45
0000C3BE 0000                       		dc.w byte_BC7C-Map_obj45
0000C3C0 0000                       		dc.w byte_BC8C-Map_obj45
0000C3C2 0000                       		dc.w byte_BC92-Map_obj45
0000C3C4 0000                       		dc.w byte_BC9D-Map_obj45
0000C3C6 0000                       		dc.w byte_BCB2-Map_obj45
0000C3C8 0000                       		dc.w byte_BCD1-Map_obj45
0000C3CA 0000                       		dc.w byte_BCFA-Map_obj45
0000C3CC 0000                       		dc.w byte_BCFA-Map_obj45
0000C3CE 03                         byte_BC6C:	dc.b 3
0000C3CF E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C3D4 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C3D9 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C3DE 03                         byte_BC7C:	dc.b 3
0000C3DF E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C3E4 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C3E9 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C3EE 01                         byte_BC8C:	dc.b 1
0000C3EF F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C3F4 02                         byte_BC92:	dc.b 2
0000C3F5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3FA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3FF 04                         byte_BC9D:	dc.b 4
0000C400 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C405 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C40A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C40F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C414 06                         byte_BCB2:	dc.b 6
0000C415 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C41A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C41F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C424 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C429 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C42E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C433 08                         byte_BCD1:	dc.b 8
0000C434 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C439 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C43E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C443 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C448 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C44D F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C452 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C457 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C45C 08                         byte_BCFA:	dc.b 8
0000C45D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C462 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C467 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C46C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C471 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C476 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C47B F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C480 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C485 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C48A F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C490 00                         		even
0000C490 00                         		even
0000C490                            
0000C490                            ; ===========================================================================
0000C490                            ; ---------------------------------------------------------------------------
0000C490                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C490                            ; ---------------------------------------------------------------------------
0000C490                            
0000C490                            Obj32:					; XREF: Obj_Index
0000C490 7000                       		moveq	#0,d0
0000C492 1028 0024                  		move.b	$24(a0),d0
0000C496 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C49A 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C49E                            ; ===========================================================================
0000C49E 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C4A0 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C4A2                            ; ===========================================================================
0000C4A2                            
0000C4A2                            Obj32_Main:				; XREF: Obj32_Index
0000C4A2 5428 0024                  		addq.b	#2,$24(a0)
0000C4A6 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C4AE 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C4B4 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C4BA 6700                       		beq.s	loc_BD60
0000C4BC 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C4C2                            
0000C4C2                            loc_BD60:
0000C4C2 117C 0004 0001             		move.b	#4,1(a0)
0000C4C8 117C 0010 0019             		move.b	#$10,$19(a0)
0000C4CE 117C 0004 0018             		move.b	#4,$18(a0)
0000C4D4 5668 000C                  		addq.w	#3,$C(a0)
0000C4D8                            
0000C4D8                            Obj32_Pressed:				; XREF: Obj32_Index
0000C4D8 4A28 0001                  		tst.b	1(a0)
0000C4DC 6A00                       		bpl.s	Obj32_Display
0000C4DE 323C 001B                  		move.w	#$1B,d1
0000C4E2 343C 0005                  		move.w	#5,d2
0000C4E6 363C 0005                  		move.w	#5,d3
0000C4EA 3828 0008                  		move.w	8(a0),d4
0000C4EE 6100 0000                  		bsr.w	SolidObject
0000C4F2 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C4F8 1028 0028                  		move.b	$28(a0),d0
0000C4FC 0240 000F                  		andi.w	#$F,d0
0000C500 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C504 47F3 0000                  		lea	(a3,d0.w),a3
0000C508 7600                       		moveq	#0,d3
0000C50A 0828 0006 0028             		btst	#6,$28(a0)
0000C510 6700                       		beq.s	loc_BDB2
0000C512 7607                       		moveq	#7,d3
0000C514                            
0000C514                            loc_BDB2:
0000C514 4A28 0028                  		tst.b	$28(a0)
0000C518 6A00                       		bpl.s	loc_BDBE
0000C51A 6100 0000                  		bsr.w	Obj32_MZBlock
0000C51E 6600                       		bne.s	loc_BDC8
0000C520                            
0000C520                            loc_BDBE:
0000C520 4A28 0025                  		tst.b	$25(a0)
0000C524 6600                       		bne.s	loc_BDC8
0000C526 0793                       		bclr	d3,(a3)
0000C528 6000                       		bra.s	loc_BDDE
0000C52A                            ; ===========================================================================
0000C52A                            
0000C52A                            loc_BDC8:
0000C52A 4A13                       		tst.b	(a3)
0000C52C 6600                       		bne.s	loc_BDD6
0000C52E 303C 00CD                  		move.w	#$CD,d0
0000C532 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play switch sound
0000C538                            
0000C538                            loc_BDD6:
0000C538 07D3                       		bset	d3,(a3)
0000C53A 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C540                            
0000C540                            loc_BDDE:
0000C540 0828 0005 0028             		btst	#5,$28(a0)
0000C546 6700                       		beq.s	Obj32_Display
0000C548 5328 001E                  		subq.b	#1,$1E(a0)
0000C54C 6A00                       		bpl.s	Obj32_Display
0000C54E 117C 0007 001E             		move.b	#7,$1E(a0)
0000C554 0868 0001 001A             		bchg	#1,$1A(a0)
0000C55A                            
0000C55A                            Obj32_Display:
0000C55A 6100 0000                  		bsr.w	DisplaySprite
0000C55E 3028 0008                  		move.w	8(a0),d0
0000C562 0240 FF80                  		andi.w	#$FF80,d0
0000C566 3238 F700                  		move.w	($FFFFF700).w,d1
0000C56A 0441 0080                  		subi.w	#$80,d1
0000C56E 0241 FF80                  		andi.w	#$FF80,d1
0000C572 9041                       		sub.w	d1,d0
0000C574 0C40 0280                  		cmpi.w	#$280,d0
0000C578 6200 0000                  		bhi.w	Obj32_Delete
0000C57C 4E75                       		rts	
0000C57E                            ; ===========================================================================
0000C57E                            
0000C57E                            Obj32_Delete:
0000C57E 6100 0000                  		bsr.w	DeleteObject
0000C582 4E75                       		rts	
0000C584                            
0000C584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C584                            
0000C584                            
0000C584                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C584 3F03                       		move.w	d3,-(sp)
0000C586 3428 0008                  		move.w	8(a0),d2
0000C58A 3628 000C                  		move.w	$C(a0),d3
0000C58E 0442 0010                  		subi.w	#$10,d2
0000C592 5143                       		subq.w	#8,d3
0000C594 383C 0020                  		move.w	#$20,d4
0000C598 3A3C 0010                  		move.w	#$10,d5
0000C59C 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C5A0 3C3C 005F                  		move.w	#$5F,d6
0000C5A4                            
0000C5A4                            Obj32_MZLoop:
0000C5A4 4A29 0001                  		tst.b	1(a1)
0000C5A8 6A00                       		bpl.s	loc_BE4E
0000C5AA 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C5AE 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C5B0                            
0000C5B0                            loc_BE4E:
0000C5B0 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C5B4 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C5B8                            
0000C5B8 361F                       		move.w	(sp)+,d3
0000C5BA 7000                       		moveq	#0,d0
0000C5BC                            
0000C5BC                            locret_BE5A:
0000C5BC 4E75                       		rts	
0000C5BE                            ; ===========================================================================
0000C5BE 1010                       Obj32_MZData:	dc.b $10, $10
0000C5C0                            ; ===========================================================================
0000C5C0                            
0000C5C0                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C5C0 7001                       		moveq	#1,d0
0000C5C2 0240 003F                  		andi.w	#$3F,d0
0000C5C6 D040                       		add.w	d0,d0
0000C5C8 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C5CC 121A                       		move.b	(a2)+,d1
0000C5CE 4881                       		ext.w	d1
0000C5D0 3029 0008                  		move.w	8(a1),d0
0000C5D4 9041                       		sub.w	d1,d0
0000C5D6 9042                       		sub.w	d2,d0
0000C5D8 6400                       		bcc.s	loc_BE80
0000C5DA D241                       		add.w	d1,d1
0000C5DC D041                       		add.w	d1,d0
0000C5DE 6500                       		bcs.s	loc_BE84
0000C5E0 60CE                       		bra.s	loc_BE4E
0000C5E2                            ; ===========================================================================
0000C5E2                            
0000C5E2                            loc_BE80:
0000C5E2 B044                       		cmp.w	d4,d0
0000C5E4 62CA                       		bhi.s	loc_BE4E
0000C5E6                            
0000C5E6                            loc_BE84:
0000C5E6 121A                       		move.b	(a2)+,d1
0000C5E8 4881                       		ext.w	d1
0000C5EA 3029 000C                  		move.w	$C(a1),d0
0000C5EE 9041                       		sub.w	d1,d0
0000C5F0 9043                       		sub.w	d3,d0
0000C5F2 6400                       		bcc.s	loc_BE9A
0000C5F4 D241                       		add.w	d1,d1
0000C5F6 D041                       		add.w	d1,d0
0000C5F8 6500                       		bcs.s	loc_BE9E
0000C5FA 60B4                       		bra.s	loc_BE4E
0000C5FC                            ; ===========================================================================
0000C5FC                            
0000C5FC                            loc_BE9A:
0000C5FC B045                       		cmp.w	d5,d0
0000C5FE 62B0                       		bhi.s	loc_BE4E
0000C600                            
0000C600                            loc_BE9E:
0000C600 361F                       		move.w	(sp)+,d3
0000C602 7001                       		moveq	#1,d0
0000C604 4E75                       		rts	
0000C606                            ; End of function Obj32_MZBlock
0000C606                            
0000C606                            ; ===========================================================================
0000C606                            ; ---------------------------------------------------------------------------
0000C606                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C606                            ; ---------------------------------------------------------------------------
0000C606                            Map_obj32:
0000C606                            	include "_maps\obj32.asm"
0000C606                            ; ---------------------------------------------------------------------------
0000C606                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C606                            ; ---------------------------------------------------------------------------
0000C606 0000                       		dc.w byte_BEAC-Map_obj32
0000C608 0000                       		dc.w byte_BEB7-Map_obj32
0000C60A 0000                       		dc.w byte_BEC2-Map_obj32
0000C60C 0000                       		dc.w byte_BEB7-Map_obj32
0000C60E 02                         byte_BEAC:	dc.b 2
0000C60F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C614 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C619 02                         byte_BEB7:	dc.b 2
0000C61A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C61F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C624 02                         byte_BEC2:	dc.b 2
0000C625 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C62A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C62F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C634                            		even
0000C634                            		even
0000C634                            
0000C634                            ; ===========================================================================
0000C634                            ; ---------------------------------------------------------------------------
0000C634                            ; Object 33 - pushable blocks (MZ, LZ)
0000C634                            ; ---------------------------------------------------------------------------
0000C634                            
0000C634                            Obj33:					; XREF: Obj_Index
0000C634 7000                       		moveq	#0,d0
0000C636 1028 0024                  		move.b	$24(a0),d0
0000C63A 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C63E 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C642                            ; ===========================================================================
0000C642 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C644 0000                       		dc.w loc_BF6E-Obj33_Index
0000C646 0000                       		dc.w loc_C02C-Obj33_Index
0000C648                            
0000C648 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C64A 4001                       		dc.b $40, 1
0000C64C                            ; ===========================================================================
0000C64C                            
0000C64C                            Obj33_Main:				; XREF: Obj33_Index
0000C64C 5428 0024                  		addq.b	#2,$24(a0)
0000C650 117C 000F 0016             		move.b	#$F,$16(a0)
0000C656 117C 000F 0017             		move.b	#$F,$17(a0)
0000C65C 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C664 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C66A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C670 6600                       		bne.s	loc_BF16
0000C672 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C678                            
0000C678                            loc_BF16:
0000C678 117C 0004 0001             		move.b	#4,1(a0)
0000C67E 117C 0003 0018             		move.b	#3,$18(a0)
0000C684 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C68A 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C690 7000                       		moveq	#0,d0
0000C692 1028 0028                  		move.b	$28(a0),d0
0000C696 D040                       		add.w	d0,d0
0000C698 0240 000E                  		andi.w	#$E,d0
0000C69C 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C6A0 115A 0019                  		move.b	(a2)+,$19(a0)
0000C6A4 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C6A8 4A28 0028                  		tst.b	$28(a0)
0000C6AC 6700                       		beq.s	Obj33_ChkGone
0000C6AE 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C6B4                            
0000C6B4                            Obj33_ChkGone:
0000C6B4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C6B8 7000                       		moveq	#0,d0
0000C6BA 1028 0023                  		move.b	$23(a0),d0
0000C6BE 6700                       		beq.s	loc_BF6E
0000C6C0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C6C6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C6CC 6600 0000                  		bne.w	DeleteObject
0000C6D0                            
0000C6D0                            loc_BF6E:				; XREF: Obj33_Index
0000C6D0 4A28 0032                  		tst.b	$32(a0)
0000C6D4 6600 0000                  		bne.w	loc_C046
0000C6D8 7200                       		moveq	#0,d1
0000C6DA 1228 0019                  		move.b	$19(a0),d1
0000C6DE 0641 000B                  		addi.w	#$B,d1
0000C6E2 343C 0010                  		move.w	#$10,d2
0000C6E6 363C 0011                  		move.w	#$11,d3
0000C6EA 3828 0008                  		move.w	8(a0),d4
0000C6EE 6100 0000                  		bsr.w	loc_C186
0000C6F2 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C6F8 6600                       		bne.s	loc_BFC6	; if not, branch
0000C6FA 08A8 0007 0028             		bclr	#7,$28(a0)
0000C700 3028 0008                  		move.w	8(a0),d0
0000C704 0C40 0A20                  		cmpi.w	#$A20,d0
0000C708 6500                       		bcs.s	loc_BFC6
0000C70A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C70E 6400                       		bcc.s	loc_BFC6
0000C710 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C714 0440 001C                  		subi.w	#$1C,d0
0000C718 3140 000C                  		move.w	d0,$C(a0)
0000C71C 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C722 08E8 0007 0028             		bset	#7,$28(a0)
0000C728                            
0000C728                            loc_BFC6:
0000C728 3028 0008                  		move.w	8(a0),d0
0000C72C 0240 FF80                  		andi.w	#$FF80,d0
0000C730 3238 F700                  		move.w	($FFFFF700).w,d1
0000C734 0441 0080                  		subi.w	#$80,d1
0000C738 0241 FF80                  		andi.w	#$FF80,d1
0000C73C 9041                       		sub.w	d1,d0
0000C73E 0C40 0280                  		cmpi.w	#$280,d0
0000C742 6200                       		bhi.s	loc_BFE6
0000C744 6000 0000                  		bra.w	DisplaySprite
0000C748                            ; ===========================================================================
0000C748                            
0000C748                            loc_BFE6:
0000C748 3028 0034                  		move.w	$34(a0),d0
0000C74C 0240 FF80                  		andi.w	#$FF80,d0
0000C750 3238 F700                  		move.w	($FFFFF700).w,d1
0000C754 0441 0080                  		subi.w	#$80,d1
0000C758 0241 FF80                  		andi.w	#$FF80,d1
0000C75C 9041                       		sub.w	d1,d0
0000C75E 0C40 0280                  		cmpi.w	#$280,d0
0000C762 6200                       		bhi.s	loc_C016
0000C764 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C76A 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C770 117C 0004 0024             		move.b	#4,$24(a0)
0000C776 6000                       		bra.s	loc_C02C
0000C778                            ; ===========================================================================
0000C778                            
0000C778                            loc_C016:
0000C778 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C77C 7000                       		moveq	#0,d0
0000C77E 1028 0023                  		move.b	$23(a0),d0
0000C782 6700                       		beq.s	loc_C028
0000C784 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C78A                            
0000C78A                            loc_C028:
0000C78A 6000 0000                  		bra.w	DeleteObject
0000C78E                            ; ===========================================================================
0000C78E                            
0000C78E                            loc_C02C:				; XREF: Obj33_Index
0000C78E 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C792 6700                       		beq.s	locret_C044
0000C794 117C 0002 0024             		move.b	#2,$24(a0)
0000C79A 4228 0032                  		clr.b	$32(a0)
0000C79E 4268 0010                  		clr.w	$10(a0)
0000C7A2 4268 0012                  		clr.w	$12(a0)
0000C7A6                            
0000C7A6                            locret_C044:
0000C7A6 4E75                       		rts	
0000C7A8                            ; ===========================================================================
0000C7A8                            
0000C7A8                            loc_C046:				; XREF: loc_BF6E
0000C7A8 3F28 0008                  		move.w	8(a0),-(sp)
0000C7AC 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C7B2 6400                       		bcc.s	loc_C056
0000C7B4 6100 0000                  		bsr.w	SpeedToPos
0000C7B8                            
0000C7B8                            loc_C056:
0000C7B8 0828 0001 0022             		btst	#1,$22(a0)
0000C7BE 6700                       		beq.s	loc_C0A0
0000C7C0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7C6 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7CC 4A41                       		tst.w	d1
0000C7CE 6A00 0000                  		bpl.w	loc_C09E
0000C7D2 D368 000C                  		add.w	d1,$C(a0)
0000C7D6 4268 0012                  		clr.w	$12(a0)
0000C7DA 08A8 0001 0022             		bclr	#1,$22(a0)
0000C7E0 3011                       		move.w	(a1),d0
0000C7E2 0240 03FF                  		andi.w	#$3FF,d0
0000C7E6 0C40 016A                  		cmpi.w	#$16A,d0
0000C7EA 6500                       		bcs.s	loc_C09E
0000C7EC 3028 0030                  		move.w	$30(a0),d0
0000C7F0 E640                       		asr.w	#3,d0
0000C7F2 3140 0010                  		move.w	d0,$10(a0)
0000C7F6 117C 0001 0032             		move.b	#1,$32(a0)
0000C7FC 4268 000E                  		clr.w	$E(a0)
0000C800                            
0000C800                            loc_C09E:
0000C800 6000                       		bra.s	loc_C0E6
0000C802                            ; ===========================================================================
0000C802                            
0000C802                            loc_C0A0:
0000C802 4A68 0010                  		tst.w	$10(a0)
0000C806 6700 0000                  		beq.w	loc_C0D6
0000C80A 6B00                       		bmi.s	loc_C0BC
0000C80C 7600                       		moveq	#0,d3
0000C80E 1628 0019                  		move.b	$19(a0),d3
0000C812 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C818 4A41                       		tst.w	d1		; has block touched a wall?
0000C81A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C81C 6000                       		bra.s	loc_C0E6
0000C81E                            ; ===========================================================================
0000C81E                            
0000C81E                            loc_C0BC:
0000C81E 7600                       		moveq	#0,d3
0000C820 1628 0019                  		move.b	$19(a0),d3
0000C824 4643                       		not.w	d3
0000C826 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C82C 4A41                       		tst.w	d1		; has block touched a wall?
0000C82E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C830 6000                       		bra.s	loc_C0E6
0000C832                            ; ===========================================================================
0000C832                            
0000C832                            Obj33_StopPush:
0000C832 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C836 6000                       		bra.s	loc_C0E6
0000C838                            ; ===========================================================================
0000C838                            
0000C838                            loc_C0D6:
0000C838 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C840 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C846 6400                       		bcc.s	loc_C104
0000C848                            
0000C848                            loc_C0E6:
0000C848 7200                       		moveq	#0,d1
0000C84A 1228 0019                  		move.b	$19(a0),d1
0000C84E 0641 000B                  		addi.w	#$B,d1
0000C852 343C 0010                  		move.w	#$10,d2
0000C856 363C 0011                  		move.w	#$11,d3
0000C85A 381F                       		move.w	(sp)+,d4
0000C85C 6100 0000                  		bsr.w	loc_C186
0000C860 6100                       		bsr.s	Obj33_ChkLava
0000C862 6000 FEC4                  		bra.w	loc_BFC6
0000C866                            ; ===========================================================================
0000C866                            
0000C866                            loc_C104:
0000C866 381F                       		move.w	(sp)+,d4
0000C868 43F8 D000                  		lea	($FFFFD000).w,a1
0000C86C 08A9 0003 0022             		bclr	#3,$22(a1)
0000C872 08A8 0003 0022             		bclr	#3,$22(a0)
0000C878 6000 FECE                  		bra.w	loc_BFE6
0000C87C                            ; ===========================================================================
0000C87C                            
0000C87C                            Obj33_ChkLava:
0000C87C 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C882 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C884 343C FFE0                  		move.w	#-$20,d2
0000C888 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C88E 6700                       		beq.s	Obj33_LoadLava
0000C890 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C896 6700                       		beq.s	Obj33_LoadLava
0000C898 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C89E 6700                       		beq.s	Obj33_LoadLava
0000C8A0 4E75                       		rts	
0000C8A2                            ; ===========================================================================
0000C8A2                            
0000C8A2                            Obj33_ChkLava2:
0000C8A2 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C8A8 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C8AA 343C 0020                  		move.w	#$20,d2
0000C8AE 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C8B4 6700                       		beq.s	Obj33_LoadLava
0000C8B6 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C8BC 6700                       		beq.s	Obj33_LoadLava
0000C8BE                            
0000C8BE                            Obj33_NoLava:
0000C8BE 4E75                       		rts	
0000C8C0                            ; ===========================================================================
0000C8C0                            
0000C8C0                            Obj33_LoadLava:
0000C8C0 6100 0000                  		bsr.w	SingleObjLoad
0000C8C4 6600                       		bne.s	locret_C184
0000C8C6 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C8CA 3368 0008 0008             		move.w	8(a0),8(a1)
0000C8D0 D569 0008                  		add.w	d2,8(a1)
0000C8D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C8DA 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C8E0 2348 003C                  		move.l	a0,$3C(a1)
0000C8E4                            
0000C8E4                            locret_C184:
0000C8E4 4E75                       		rts	
0000C8E6                            ; ===========================================================================
0000C8E6                            
0000C8E6                            loc_C186:				; XREF: loc_BF6E
0000C8E6 1028 0025                  		move.b	$25(a0),d0
0000C8EA 6700 0000                  		beq.w	loc_C218
0000C8EE 5500                       		subq.b	#2,d0
0000C8F0 6600                       		bne.s	loc_C1AA
0000C8F2 6100 B30E                  		bsr.w	ExitPlatform
0000C8F6 0829 0003 0022             		btst	#3,$22(a1)
0000C8FC 6600                       		bne.s	loc_C1A4
0000C8FE 4228 0025                  		clr.b	$25(a0)
0000C902 4E75                       		rts	
0000C904                            ; ===========================================================================
0000C904                            
0000C904                            loc_C1A4:
0000C904 3404                       		move.w	d4,d2
0000C906 6000 B858                  		bra.w	MvSonicOnPtfm
0000C90A                            ; ===========================================================================
0000C90A                            
0000C90A                            loc_C1AA:
0000C90A 5500                       		subq.b	#2,d0
0000C90C 6600                       		bne.s	loc_C1F2
0000C90E 6100 0000                  		bsr.w	SpeedToPos
0000C912 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C918 4EB9 0000 0000             		jsr	ObjHitFloor
0000C91E 4A41                       		tst.w	d1
0000C920 6A00 0000                  		bpl.w	locret_C1F0
0000C924 D368 000C                  		add.w	d1,$C(a0)
0000C928 4268 0012                  		clr.w	$12(a0)
0000C92C 4228 0025                  		clr.b	$25(a0)
0000C930 3011                       		move.w	(a1),d0
0000C932 0240 03FF                  		andi.w	#$3FF,d0
0000C936 0C40 016A                  		cmpi.w	#$16A,d0
0000C93A 6500                       		bcs.s	locret_C1F0
0000C93C 3028 0030                  		move.w	$30(a0),d0
0000C940 E640                       		asr.w	#3,d0
0000C942 3140 0010                  		move.w	d0,$10(a0)
0000C946 117C 0001 0032             		move.b	#1,$32(a0)
0000C94C 4268 000E                  		clr.w	$E(a0)
0000C950                            
0000C950                            locret_C1F0:
0000C950 4E75                       		rts	
0000C952                            ; ===========================================================================
0000C952                            
0000C952                            loc_C1F2:
0000C952 6100 0000                  		bsr.w	SpeedToPos
0000C956 3028 0008                  		move.w	8(a0),d0
0000C95A 0240 000C                  		andi.w	#$C,d0
0000C95E 6600 0000                  		bne.w	locret_C2E4
0000C962 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C968 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C96E 4268 0010                  		clr.w	$10(a0)
0000C972 5528 0025                  		subq.b	#2,$25(a0)
0000C976 4E75                       		rts	
0000C978                            ; ===========================================================================
0000C978                            
0000C978                            loc_C218:
0000C978 6100 0000                  		bsr.w	loc_FAC8
0000C97C 4A44                       		tst.w	d4
0000C97E 6700 0000                  		beq.w	locret_C2E4
0000C982 6B00 0000                  		bmi.w	locret_C2E4
0000C986 4A28 0032                  		tst.b	$32(a0)
0000C98A 6700                       		beq.s	loc_C230
0000C98C 6000 0000                  		bra.w	locret_C2E4
0000C990                            ; ===========================================================================
0000C990                            
0000C990                            loc_C230:
0000C990 4A40                       		tst.w	d0
0000C992 6700 0000                  		beq.w	locret_C2E4
0000C996 6B00                       		bmi.s	loc_C268
0000C998 0829 0000 0022             		btst	#0,$22(a1)
0000C99E 6600 0000                  		bne.w	locret_C2E4
0000C9A2 3F00                       		move.w	d0,-(sp)
0000C9A4 7600                       		moveq	#0,d3
0000C9A6 1628 0019                  		move.b	$19(a0),d3
0000C9AA 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C9B0 301F                       		move.w	(sp)+,d0
0000C9B2 4A41                       		tst.w	d1
0000C9B4 6B00 0000                  		bmi.w	locret_C2E4
0000C9B8 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C9C0 7001                       		moveq	#1,d0
0000C9C2 323C 0040                  		move.w	#$40,d1
0000C9C6 6000                       		bra.s	loc_C294
0000C9C8                            ; ===========================================================================
0000C9C8                            
0000C9C8                            loc_C268:
0000C9C8 0829 0000 0022             		btst	#0,$22(a1)
0000C9CE 6700                       		beq.s	locret_C2E4
0000C9D0 3F00                       		move.w	d0,-(sp)
0000C9D2 7600                       		moveq	#0,d3
0000C9D4 1628 0019                  		move.b	$19(a0),d3
0000C9D8 4643                       		not.w	d3
0000C9DA 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9E0 301F                       		move.w	(sp)+,d0
0000C9E2 4A41                       		tst.w	d1
0000C9E4 6B00                       		bmi.s	locret_C2E4
0000C9E6 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C9EE 70FF                       		moveq	#-1,d0
0000C9F0 323C FFC0                  		move.w	#-$40,d1
0000C9F4                            
0000C9F4                            loc_C294:
0000C9F4 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9F8 D169 0008                  		add.w	d0,8(a1)
0000C9FC 3341 0014                  		move.w	d1,$14(a1)
0000CA00 337C 0000 0010             		move.w	#0,$10(a1)
0000CA06 3F00                       		move.w	d0,-(sp)
0000CA08 303C 00A7                  		move.w	#$A7,d0
0000CA0C 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CA12 301F                       		move.w	(sp)+,d0
0000CA14 4A28 0028                  		tst.b	$28(a0)
0000CA18 6B00                       		bmi.s	locret_C2E4
0000CA1A 3F00                       		move.w	d0,-(sp)
0000CA1C 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA22 301F                       		move.w	(sp)+,d0
0000CA24 0C41 0004                  		cmpi.w	#4,d1
0000CA28 6F00                       		ble.s	loc_C2E0
0000CA2A 317C 0400 0010             		move.w	#$400,$10(a0)
0000CA30 4A40                       		tst.w	d0
0000CA32 6A00                       		bpl.s	loc_C2D8
0000CA34 4468 0010                  		neg.w	$10(a0)
0000CA38                            
0000CA38                            loc_C2D8:
0000CA38 117C 0006 0025             		move.b	#6,$25(a0)
0000CA3E 6000                       		bra.s	locret_C2E4
0000CA40                            ; ===========================================================================
0000CA40                            
0000CA40                            loc_C2E0:
0000CA40 D368 000C                  		add.w	d1,$C(a0)
0000CA44                            
0000CA44                            locret_C2E4:
0000CA44 4E75                       		rts	
0000CA46                            ; ===========================================================================
0000CA46                            ; ---------------------------------------------------------------------------
0000CA46                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA46                            ; ---------------------------------------------------------------------------
0000CA46                            Map_obj33:
0000CA46                            	include "_maps\obj33.asm"
0000CA46                            ; ---------------------------------------------------------------------------
0000CA46                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA46                            ; ---------------------------------------------------------------------------
0000CA46 0000                       		dc.w byte_C2EA-Map_obj33
0000CA48 0000                       		dc.w byte_C2F0-Map_obj33
0000CA4A 01                         byte_C2EA:	dc.b 1
0000CA4B F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CA50 04                         byte_C2F0:	dc.b 4
0000CA51 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CA56 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CA5B F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CA60 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CA66 00                         		even
0000CA66 00                         		even
0000CA66                            
0000CA66                            ; ===========================================================================
0000CA66                            ; ---------------------------------------------------------------------------
0000CA66                            ; Object 34 - zone title cards
0000CA66                            ; ---------------------------------------------------------------------------
0000CA66                            Obj34:					; XREF: Obj_Index
0000CA66 7000                       		moveq	#0,d0
0000CA68 1028 0024                  		move.b	$24(a0),d0
0000CA6C 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CA70 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CA74                            ; ===========================================================================
0000CA74 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CA76 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CA78 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA7A 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA7C                            ; ===========================================================================
0000CA7C                            
0000CA7C                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CA7C 2248                       		movea.l	a0,a1
0000CA7E 7000                       		moveq	#0,d0
0000CA80 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CA84 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CA8A 6600                       		bne.s	Obj34_CheckFZ
0000CA8C 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CA8E                            
0000CA8E                            Obj34_CheckFZ:
0000CA8E 3400                       		move.w	d0,d2
0000CA90 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CA96 6600                       		bne.s	Obj34_LoadConfig
0000CA98 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CA9A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CA9C                            
0000CA9C                            Obj34_LoadConfig:
0000CA9C 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CAA2 E948                       		lsl.w	#4,d0
0000CAA4 D6C0                       		adda.w	d0,a3
0000CAA6 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CAAC 7203                       		moveq	#3,d1
0000CAAE                            
0000CAAE                            Obj34_Loop:
0000CAAE 12BC 0034                  		move.b	#$34,0(a1)
0000CAB2 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CAB6 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CABA 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CABE 335A 000A                  		move.w	(a2)+,$A(a1)
0000CAC2 135A 0024                  		move.b	(a2)+,$24(a1)
0000CAC6 101A                       		move.b	(a2)+,d0
0000CAC8 6600                       		bne.s	Obj34_ActNumber
0000CACA 1002                       		move.b	d2,d0
0000CACC                            
0000CACC                            Obj34_ActNumber:
0000CACC 0C00 0007                  		cmpi.b	#7,d0
0000CAD0 6600                       		bne.s	Obj34_MakeSprite
0000CAD2 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CAD6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CADC 6600                       		bne.s	Obj34_MakeSprite
0000CADE 5300                       		subq.b	#1,d0
0000CAE0                            
0000CAE0                            Obj34_MakeSprite:
0000CAE0 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CAE4 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CAEC 337C 8580 0002             		move.w	#$8580,2(a1)
0000CAF2 137C 0078 0019             		move.b	#$78,$19(a1)
0000CAF8 137C 0000 0001             		move.b	#0,1(a1)
0000CAFE 137C 0000 0018             		move.b	#0,$18(a1)
0000CB04 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CB0A 43E9 0040                  		lea	$40(a1),a1	; next object
0000CB0E 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CB12                            
0000CB12                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CB12 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB14 3028 0030                  		move.w	$30(a0),d0
0000CB18 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CB1C 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CB1E 6C00                       		bge.s	Obj34_Move
0000CB20 4441                       		neg.w	d1
0000CB22                            
0000CB22                            Obj34_Move:
0000CB22 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB26                            
0000CB26                            loc_C3C8:
0000CB26 3028 0008                  		move.w	8(a0),d0
0000CB2A 6B00                       		bmi.s	locret_C3D8
0000CB2C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB30 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CB32 6000 0000                  		bra.w	DisplaySprite
0000CB36                            ; ===========================================================================
0000CB36                            
0000CB36                            locret_C3D8:
0000CB36 4E75                       		rts	
0000CB38                            ; ===========================================================================
0000CB38                            
0000CB38                            Obj34_Wait:				; XREF: Obj34_Index
0000CB38 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CB3C 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CB3E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CB42 6000 0000                  		bra.w	DisplaySprite
0000CB46                            ; ===========================================================================
0000CB46                            
0000CB46                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CB46 4A28 0001                  		tst.b	1(a0)
0000CB4A 6A00                       		bpl.s	Obj34_ChangeArt
0000CB4C 7220                       		moveq	#$20,d1
0000CB4E 3028 0032                  		move.w	$32(a0),d0
0000CB52 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CB56 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CB58 6C00                       		bge.s	Obj34_Move2
0000CB5A 4441                       		neg.w	d1
0000CB5C                            
0000CB5C                            Obj34_Move2:
0000CB5C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB60 3028 0008                  		move.w	8(a0),d0
0000CB64 6B00                       		bmi.s	locret_C412
0000CB66 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB6A 6400                       		bcc.s	locret_C412	; if yes, branch
0000CB6C 6000 0000                  		bra.w	DisplaySprite
0000CB70                            ; ===========================================================================
0000CB70                            
0000CB70                            locret_C412:
0000CB70 4E75                       		rts	
0000CB72                            ; ===========================================================================
0000CB72                            
0000CB72                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CB72 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CB78 6600                       		bne.s	Obj34_Delete
0000CB7A 7002                       		moveq	#2,d0
0000CB7C 4EB9 0000 159A             		jsr	(LoadPLC).l	; load explosion patterns
0000CB82 7000                       		moveq	#0,d0
0000CB84 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB88 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000CB8C 4EB9 0000 159A             		jsr	(LoadPLC).l	; load animal patterns
0000CB92                            
0000CB92                            Obj34_Delete:
0000CB92 6000 0000                  		bra.w	DeleteObject
0000CB96                            
0000CB96                            ; ===========================================================================
0000CB96                            Obj34_AnimalPLC:
0000CB96 15                         		dc.b $15	; "GHZ"
0000CB97 16                         		dc.b $16
0000CB98 17                         		dc.b $17
0000CB99 18                         		dc.b $18
0000CB9A 19                         		dc.b $19
0000CB9B 1A                         		dc.b $1A	; "SBZ"
0000CB9C 15                         		dc.b $15	; Ending (placeholder?
0000CB9D 1A                         		dc.b $1A	; MAKOTO
0000CB9E                            	even
0000CB9E 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CBA0 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CBA2 00E4                       		dc.w $E4
0000CBA4 0206                       		dc.b 2,	6
0000CBA6 00EA                       		dc.w $EA
0000CBA8 0207                       		dc.b 2,	7
0000CBAA 00E0                       		dc.w $E0
0000CBAC 020A                       		dc.b 2,	$A
0000CBAE                            ; ---------------------------------------------------------------------------
0000CBAE                            ; Title	card configuration data
0000CBAE                            ; Format:
0000CBAE                            ; 4 bytes per item (YYYY XXXX)
0000CBAE                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CBAE                            ; ---------------------------------------------------------------------------
0000CBAE 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CBBE 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CBCE 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CBDE 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CBEE 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CBFE 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CC0E 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CC1E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CC2E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CC3E                            ; ===========================================================================
0000CC3E                            ; ---------------------------------------------------------------------------
0000CC3E                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CC3E                            ; ---------------------------------------------------------------------------
0000CC3E                            
0000CC3E                            Obj39:					; XREF: Obj_Index
0000CC3E 7000                       		moveq	#0,d0
0000CC40 1028 0024                  		move.b	$24(a0),d0
0000CC44 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CC48 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CC4C                            ; ===========================================================================
0000CC4C 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CC4E 0000                       		dc.w loc_C50C-Obj39_Index
0000CC50 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CC52                            ; ===========================================================================
0000CC52                            
0000CC52                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CC52 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC56 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CC58 4E75                       		rts	
0000CC5A                            ; ===========================================================================
0000CC5A                            
0000CC5A                            Obj39_Main:
0000CC5A 5428 0024                  		addq.b	#2,$24(a0)
0000CC5E 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CC64 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CC6A 6700                       		beq.s	loc_C4EC	; if not, branch
0000CC6C 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CC72                            
0000CC72                            loc_C4EC:
0000CC72 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CC78 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CC80 317C 855E 0002             		move.w	#$855E,2(a0)
0000CC86 117C 0000 0001             		move.b	#0,1(a0)
0000CC8C 117C 0000 0018             		move.b	#0,$18(a0)
0000CC92                            
0000CC92                            loc_C50C:				; XREF: Obj39_Index
0000CC92 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC94 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CC9A 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CC9C 6500                       		bcs.s	Obj39_Move
0000CC9E 4441                       		neg.w	d1
0000CCA0                            
0000CCA0                            Obj39_Move:
0000CCA0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCA4 6000 0000                  		bra.w	DisplaySprite
0000CCA8                            ; ===========================================================================
0000CCA8                            
0000CCA8                            Obj39_SetWait:				; XREF: Obj39_Main
0000CCA8 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CCAE 5428 0024                  		addq.b	#2,$24(a0)
0000CCB2 4E75                       		rts	
0000CCB4                            ; ===========================================================================
0000CCB4                            
0000CCB4                            Obj39_Wait:				; XREF: Obj39_Index
0000CCB4 1038 F605                  		move.b	($FFFFF605).w,d0
0000CCB8 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CCBC 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CCBE 0828 0000 001A             		btst	#0,$1A(a0)
0000CCC4 6600                       		bne.s	Obj39_Display
0000CCC6 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CCCA 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CCCC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CCD0 6000 0000                  		bra.w	DisplaySprite
0000CCD4                            ; ===========================================================================
0000CCD4                            
0000CCD4                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CCD4 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CCD8 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CCDA 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CCE0 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CCE4 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CCE6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CCEC 6000                       		bra.s	Obj39_Display
0000CCEE                            ; ===========================================================================
0000CCEE                            
0000CCEE                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CCEE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CCF4                            
0000CCF4                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CCF4 6000 0000                  		bra.w	DisplaySprite
0000CCF8                            ; ===========================================================================
0000CCF8                            ; ---------------------------------------------------------------------------
0000CCF8                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CCF8                            ; ---------------------------------------------------------------------------
0000CCF8                            
0000CCF8                            Obj3A:					; XREF: Obj_Index
0000CCF8 7000                       		moveq	#0,d0
0000CCFA 1028 0024                  		move.b	$24(a0),d0
0000CCFE 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CD02 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CD06                            ; ===========================================================================
0000CD06 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CD08 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CD0A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CD0C 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CD0E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CD10 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CD12 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CD14 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CD16 0000                       		dc.w loc_C766-Obj3A_Index
0000CD18                            ; ===========================================================================
0000CD18                            
0000CD18                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CD18 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CD1C 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CD1E 4E75                       		rts	
0000CD20                            ; ===========================================================================
0000CD20                            
0000CD20                            Obj3A_Main:
0000CD20 2248                       		movea.l	a0,a1
0000CD22 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CD28 7206                       		moveq	#6,d1
0000CD2A                            
0000CD2A                            Obj3A_Loop:
0000CD2A 12BC 003A                  		move.b	#$3A,0(a1)
0000CD2E 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CD32 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CD36 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CD3A 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD3E 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD42 101A                       		move.b	(a2)+,d0
0000CD44 0C00 0006                  		cmpi.b	#6,d0
0000CD48 6600                       		bne.s	loc_C5CA
0000CD4A D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CD4E                            
0000CD4E                            loc_C5CA:
0000CD4E 1340 001A                  		move.b	d0,$1A(a1)
0000CD52 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CD5A 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD60 137C 0000 0001             		move.b	#0,1(a1)
0000CD66 43E9 0040                  		lea	$40(a1),a1
0000CD6A 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CD6E                            
0000CD6E                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CD6E 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD70 3028 0030                  		move.w	$30(a0),d0
0000CD74 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD78 6700                       		beq.s	loc_C61A	; if yes, branch
0000CD7A 6C00                       		bge.s	Obj3A_Move
0000CD7C 4441                       		neg.w	d1
0000CD7E                            
0000CD7E                            Obj3A_Move:
0000CD7E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD82                            
0000CD82                            loc_C5FE:				; XREF: loc_C61A
0000CD82 3028 0008                  		move.w	8(a0),d0
0000CD86 6B00                       		bmi.s	locret_C60E
0000CD88 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD8C 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CD8E 6000 0000                  		bra.w	DisplaySprite
0000CD92                            ; ===========================================================================
0000CD92                            
0000CD92                            locret_C60E:
0000CD92 4E75                       		rts	
0000CD94                            ; ===========================================================================
0000CD94                            
0000CD94                            loc_C610:				; XREF: loc_C61A
0000CD94 117C 000E 0024             		move.b	#$E,$24(a0)
0000CD9A 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CD9E                            ; ===========================================================================
0000CD9E                            
0000CD9E                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CD9E 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CDA4 67EE                       		beq.s	loc_C610
0000CDA6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CDAC 66D4                       		bne.s	loc_C5FE
0000CDAE 5428 0024                  		addq.b	#2,$24(a0)
0000CDB2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDB8                            
0000CDB8                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CDB8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CDBC 6600                       		bne.s	Obj3A_Display
0000CDBE 5428 0024                  		addq.b	#2,$24(a0)
0000CDC2                            
0000CDC2                            Obj3A_Display:
0000CDC2 6000 0000                  		bra.w	DisplaySprite
0000CDC6                            ; ===========================================================================
0000CDC6                            
0000CDC6                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CDC6 6100 0000                  		bsr.w	DisplaySprite
0000CDCA 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CDD0 7000                       		moveq	#0,d0
0000CDD2 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CDD6 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CDD8 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDDC 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CDE2                            
0000CDE2                            Obj3A_RingBonus:
0000CDE2 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CDE6 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CDE8 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDEC 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDF2                            
0000CDF2                            Obj3A_ChkBonus:
0000CDF2 4A40                       		tst.w	d0		; is there any bonus?
0000CDF4 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CDF6 303C 00C5                  		move.w	#$C5,d0
0000CDFA 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CE00 5428 0024                  		addq.b	#2,$24(a0)
0000CE04 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CE0A 6600                       		bne.s	Obj3A_SetDelay
0000CE0C 5828 0024                  		addq.b	#4,$24(a0)
0000CE10                            
0000CE10                            Obj3A_SetDelay:
0000CE10 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CE16                            
0000CE16                            locret_C692:
0000CE16 4E75                       		rts	
0000CE18                            ; ===========================================================================
0000CE18                            
0000CE18                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CE18 4EB9 0000 0000             		jsr	AddPoints
0000CE1E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE22 0200 0003                  		andi.b	#3,d0
0000CE26 66EE                       		bne.s	locret_C692
0000CE28 303C 00CD                  		move.w	#$CD,d0
0000CE2C 4EF9 0000 13B6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CE32                            ; ===========================================================================
0000CE32                            
0000CE32                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CE32 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CE36 0240 0007                  		andi.w	#7,d0
0000CE3A E748                       		lsl.w	#3,d0
0000CE3C 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CE40 0241 0003                  		andi.w	#3,d1
0000CE44 D241                       		add.w	d1,d1
0000CE46 D041                       		add.w	d1,d0
0000CE48 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CE4C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CE50 4A40                       		tst.w	d0
0000CE52 6600                       		bne.s	Obj3A_ChkSS
0000CE54 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CE5A 6000                       		bra.s	Obj3A_Display2
0000CE5C                            ; ===========================================================================
0000CE5C                            
0000CE5C                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CE5C 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CE60 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CE64 6700                       		beq.s	loc_C6EA	; if not, branch
0000CE66 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CE6C 6000                       		bra.s	Obj3A_Display2
0000CE6E                            ; ===========================================================================
0000CE6E                            
0000CE6E                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CE6E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE74                            
0000CE74                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CE74 6000 0000                  		bra.w	DisplaySprite
0000CE78                            ; ===========================================================================
0000CE78                            ; ---------------------------------------------------------------------------
0000CE78                            ; Level	order array
0000CE78                            ; ---------------------------------------------------------------------------
0000CE78                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CEB8                            		even
0000CEB8                            ; ===========================================================================
0000CEB8                            
0000CEB8                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CEB8 7220                       		moveq	#$20,d1		; set horizontal speed
0000CEBA 3028 0032                  		move.w	$32(a0),d0
0000CEBE B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CEC2 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CEC4 6C00                       		bge.s	Obj3A_Move2
0000CEC6 4441                       		neg.w	d1
0000CEC8                            
0000CEC8                            Obj3A_Move2:
0000CEC8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CECC 3028 0008                  		move.w	8(a0),d0
0000CED0 6B00                       		bmi.s	locret_C748
0000CED2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CED6 6400                       		bcc.s	locret_C748	; if yes, branch
0000CED8 6000 0000                  		bra.w	DisplaySprite
0000CEDC                            ; ===========================================================================
0000CEDC                            
0000CEDC                            locret_C748:
0000CEDC 4E75                       		rts	
0000CEDE                            ; ===========================================================================
0000CEDE                            
0000CEDE                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CEDE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CEE4 6600 0000                  		bne.w	DeleteObject
0000CEE8 5428 0024                  		addq.b	#2,$24(a0)
0000CEEC 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CEF0 303C 008D                  		move.w	#$8D,d0
0000CEF4 4EF9 0000 13B0             		jmp	(PlaySound).l	; play FZ music
0000CEFA                            ; ===========================================================================
0000CEFA                            
0000CEFA                            loc_C766:				; XREF: Obj3A_Index
0000CEFA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CEFE 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CF04 6700 0000                  		beq.w	DeleteObject
0000CF08 4E75                       		rts	
0000CF0A                            ; ===========================================================================
0000CF0A 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CF10 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CF12 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CF18 0201                       		dc.b 2,	1
0000CF1A 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CF20 0206                       		dc.b 2,	6
0000CF22 0520 0120 00EC             		dc.w $520, $120, $EC
0000CF28 0202                       		dc.b 2,	2
0000CF2A 0540 0120 00FC             		dc.w $540, $120, $FC
0000CF30 0203                       		dc.b 2,	3
0000CF32 0560 0120 010C             		dc.w $560, $120, $10C
0000CF38 0204                       		dc.b 2,	4
0000CF3A 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CF40 0205                       		dc.b 2,	5
0000CF42                            ; ===========================================================================
0000CF42                            ; ---------------------------------------------------------------------------
0000CF42                            ; Object 7E - special stage results screen
0000CF42                            ; ---------------------------------------------------------------------------
0000CF42                            
0000CF42                            Obj7E:					; XREF: Obj_Index
0000CF42 7000                       		moveq	#0,d0
0000CF44 1028 0024                  		move.b	$24(a0),d0
0000CF48 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CF4C 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CF50                            ; ===========================================================================
0000CF50 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CF52 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CF54 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF56 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CF58 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF5A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF5C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF5E 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CF60 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF62 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF64 0000                       		dc.w loc_C91A-Obj7E_Index
0000CF66                            ; ===========================================================================
0000CF66                            
0000CF66                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CF66 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CF6A 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CF6C 4E75                       		rts	
0000CF6E                            ; ===========================================================================
0000CF6E                            
0000CF6E                            Obj7E_Main:
0000CF6E 2248                       		movea.l	a0,a1
0000CF70 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CF76 7203                       		moveq	#3,d1
0000CF78 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CF7E 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CF80 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CF82                            
0000CF82                            Obj7E_Loop:
0000CF82 12BC 007E                  		move.b	#$7E,0(a1)
0000CF86 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CF8A 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF8E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF92 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF96 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CF9A 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CFA2 337C 8580 0002             		move.w	#$8580,2(a1)
0000CFA8 137C 0000 0001             		move.b	#0,1(a1)
0000CFAE 43E9 0040                  		lea	$40(a1),a1
0000CFB2 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CFB6                            
0000CFB6 7007                       		moveq	#7,d0
0000CFB8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CFBC 6700                       		beq.s	loc_C842
0000CFBE 7000                       		moveq	#0,d0
0000CFC0 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CFC4 6600                       		bne.s	loc_C842	; if not, branch
0000CFC6 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CFC8 317C 0018 0008             		move.w	#$18,8(a0)
0000CFCE 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CFD4                            
0000CFD4                            loc_C842:
0000CFD4 1140 001A                  		move.b	d0,$1A(a0)
0000CFD8                            
0000CFD8                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CFD8 7210                       		moveq	#$10,d1		; set horizontal speed
0000CFDA 3028 0030                  		move.w	$30(a0),d0
0000CFDE B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CFE2 6700                       		beq.s	loc_C86C	; if yes, branch
0000CFE4 6C00                       		bge.s	Obj7E_Move
0000CFE6 4441                       		neg.w	d1
0000CFE8                            
0000CFE8                            Obj7E_Move:
0000CFE8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CFEC                            
0000CFEC                            loc_C85A:				; XREF: loc_C86C
0000CFEC 3028 0008                  		move.w	8(a0),d0
0000CFF0 6B00                       		bmi.s	locret_C86A
0000CFF2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CFF6 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CFF8 6000 0000                  		bra.w	DisplaySprite
0000CFFC                            ; ===========================================================================
0000CFFC                            
0000CFFC                            locret_C86A:
0000CFFC 4E75                       		rts	
0000CFFE                            ; ===========================================================================
0000CFFE                            
0000CFFE                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CFFE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D004 66E6                       		bne.s	loc_C85A
0000D006 5428 0024                  		addq.b	#2,$24(a0)
0000D00A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D010 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D016                            
0000D016                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D016 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D01A 6600                       		bne.s	Obj7E_Display
0000D01C 5428 0024                  		addq.b	#2,$24(a0)
0000D020                            
0000D020                            Obj7E_Display:
0000D020 6000 0000                  		bra.w	DisplaySprite
0000D024                            ; ===========================================================================
0000D024                            
0000D024                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D024 6100 0000                  		bsr.w	DisplaySprite
0000D028 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D02E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D032 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D034 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D03A 700A                       		moveq	#10,d0		; add 10 to score
0000D03C 4EB9 0000 0000             		jsr	AddPoints
0000D042 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D046 0200 0003                  		andi.b	#3,d0
0000D04A 6600                       		bne.s	locret_C8EA
0000D04C 303C 00CD                  		move.w	#$CD,d0
0000D050 4EF9 0000 13B6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D056                            ; ===========================================================================
0000D056                            
0000D056                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D056 303C 00C5                  		move.w	#$C5,d0
0000D05A 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D060 5428 0024                  		addq.b	#2,$24(a0)
0000D064 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D06A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D070 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D072 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D078 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D07C                            
0000D07C                            locret_C8EA:
0000D07C 4E75                       		rts	
0000D07E                            ; ===========================================================================
0000D07E                            
0000D07E                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D07E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D084 6000 0000                  		bra.w	DisplaySprite
0000D088                            ; ===========================================================================
0000D088                            
0000D088                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D088 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D08E 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D094 303C 00BF                  		move.w	#$BF,d0
0000D098 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play continues music
0000D09E 5428 0024                  		addq.b	#2,$24(a0)
0000D0A2 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D0A8 6000 0000                  		bra.w	DisplaySprite
0000D0AC                            ; ===========================================================================
0000D0AC                            
0000D0AC                            loc_C91A:				; XREF: Obj7E_Index
0000D0AC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D0B0 0200 000F                  		andi.b	#$F,d0
0000D0B4 6600                       		bne.s	Obj7E_Display2
0000D0B6 0868 0000 001A             		bchg	#0,$1A(a0)
0000D0BC                            
0000D0BC                            Obj7E_Display2:
0000D0BC 6000 0000                  		bra.w	DisplaySprite
0000D0C0                            ; ===========================================================================
0000D0C0 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D0C6 0200                       		dc.b 2,	0		; rountine number, frame number
0000D0C8 0320 0120 0118             		dc.w $320, $120, $118
0000D0CE 0201                       		dc.b 2,	1
0000D0D0 0360 0120 0128             		dc.w $360, $120, $128
0000D0D6 0202                       		dc.b 2,	2
0000D0D8 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D0DE 0203                       		dc.b 2,	3
0000D0E0 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D0E6 0206                       		dc.b 2,	6
0000D0E8                            ; ===========================================================================
0000D0E8                            ; ---------------------------------------------------------------------------
0000D0E8                            ; Object 7F - chaos emeralds from the special stage results screen
0000D0E8                            ; ---------------------------------------------------------------------------
0000D0E8                            
0000D0E8                            Obj7F:					; XREF: Obj_Index
0000D0E8 7000                       		moveq	#0,d0
0000D0EA 1028 0024                  		move.b	$24(a0),d0
0000D0EE 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D0F2 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D0F6                            ; ===========================================================================
0000D0F6 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D0F8 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D0FA                            
0000D0FA                            ; ---------------------------------------------------------------------------
0000D0FA                            ; X-axis positions for chaos emeralds
0000D0FA                            ; ---------------------------------------------------------------------------
0000D0FA 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D106                            ; ===========================================================================
0000D106                            
0000D106                            Obj7F_Main:				; XREF: Obj7F_Index
0000D106 2248                       		movea.l	a0,a1
0000D108 45F9 0000 D0FA             		lea	(Obj7F_PosData).l,a2
0000D10E 7400                       		moveq	#0,d2
0000D110 7200                       		moveq	#0,d1
0000D112 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D116 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D118 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D11C                            
0000D11C                            Obj7F_Loop:
0000D11C 12BC 007F                  		move.b	#$7F,0(a1)
0000D120 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D124 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D12A 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D12E 1633 2000                  		move.b	(a3,d2.w),d3
0000D132 1343 001A                  		move.b	d3,$1A(a1)
0000D136 1343 001C                  		move.b	d3,$1C(a1)
0000D13A 5202                       		addq.b	#1,d2
0000D13C 5429 0024                  		addq.b	#2,$24(a1)
0000D140 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D148 337C 8541 0002             		move.w	#$8541,2(a1)
0000D14E 137C 0000 0001             		move.b	#0,1(a1)
0000D154 43E9 0040                  		lea	$40(a1),a1	; next object
0000D158 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D15C                            
0000D15C                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D15C 1028 001A                  		move.b	$1A(a0),d0
0000D160 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D166 0C00 0006                  		cmpi.b	#6,d0
0000D16A 6600                       		bne.s	Obj7F_Display
0000D16C 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D172                            
0000D172                            Obj7F_Display:
0000D172 6000 0000                  		bra.w	DisplaySprite
0000D176                            ; ===========================================================================
0000D176                            ; ---------------------------------------------------------------------------
0000D176                            ; Sprite mappings - zone title cards
0000D176                            ; ---------------------------------------------------------------------------
0000D176                            Map_obj34:
0000D176                                    include "_maps\obj34.asm"
0000D176                            Map_c5df:
0000D176 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D178 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D17A 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D17C 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D17E 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D180 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D182 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D184 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D186 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D188 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D18A 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D18C 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D18E 0C                         Map_c5df_18: 	dc.b $C
0000D18F F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D194 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D199 F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D19E F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D1A3 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D1A8 F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D1AD F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D1B2 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D1B7 F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D1BC F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D1C1 F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D1C6 F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D1CB 16                         Map_c5df_55: 	dc.b $16
0000D1CC F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D1D1 F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D1D6 F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D1DB F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D1E0 F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D1E5 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D1EA F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D1EF F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D1F4 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D1F9 F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D1FE F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D203 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D208 F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D20D F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D212 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D217 F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D21C F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D221 F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D226 F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D22B F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D230 F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D235 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D23A 05                         Map_c5df_C4: 	dc.b $5
0000D23B F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D240 F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D245 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D24A F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D24F F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D254 11                         Map_c5df_DE: 	dc.b $11
0000D255 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D25A F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D25F F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D264 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D269 F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D26E F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D273 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D278 F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D27D F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D282 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D287 F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D28C F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D291 F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D296 F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D29B F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D2A0 F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D2A5 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D2AA 15                         Map_c5df_134: 	dc.b $15
0000D2AB F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D2B0 F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D2B5 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D2BA F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D2BF F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D2C4 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D2C9 F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D2CE F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D2D3 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D2D8 F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D2DD F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D2E2 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D2E7 F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D2EC F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D2F1 F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D2F6 F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D2FB F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D300 F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D305 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D30A F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D30F F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D314 07                         Map_c5df_19E: 	dc.b $7
0000D315 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D31A F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D31F F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D324 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D329 F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D32E F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D333 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D338 04                         Map_c5df_1C2: 	dc.b $4
0000D339 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D33E F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D343 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D348 F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D34D 02                         Map_c5df_1D7: 	dc.b $2
0000D34E 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D353 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D358 02                         Map_c5df_1E2: 	dc.b $2
0000D359 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D35E F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D363 02                         Map_c5df_1ED: 	dc.b $2
0000D364 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D369 F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D36E 0D                         Map_c5df_1F8: 	dc.b $D
0000D36F E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D374 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D379 EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D37E F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D383 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D388 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D38D 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D392 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D397 EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D39C F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D3A1 FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D3A6 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D3AB 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D3B0 05                         Map_c5df_23A: 	dc.b $5
0000D3B1 F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D3B6 F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D3BB F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D3C0 F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D3C5 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D3CA                            	even
0000D3CA                            	even
0000D3CA                            ; ---------------------------------------------------------------------------
0000D3CA                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D3CA                            ; ---------------------------------------------------------------------------
0000D3CA                            Map_obj39:
0000D3CA                            	include "_maps\obj39.asm"
0000D3CA                            ; ---------------------------------------------------------------------------
0000D3CA                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D3CA                            ; ---------------------------------------------------------------------------
0000D3CA 0000                       		dc.w byte_CBAC-Map_obj39
0000D3CC 0000                       		dc.w byte_CBB7-Map_obj39
0000D3CE 0000                       		dc.w byte_CBC2-Map_obj39
0000D3D0 0000                       		dc.w byte_CBCD-Map_obj39
0000D3D2 02                         byte_CBAC:	dc.b 2
0000D3D3 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D3D8 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D3DD 02                         byte_CBB7:	dc.b 2
0000D3DE F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D3E3 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D3E8 02                         byte_CBC2:	dc.b 2
0000D3E9 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D3EE F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D3F3 02                         byte_CBCD:	dc.b 2
0000D3F4 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D3F9 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D3FE                            		even
0000D3FE                            		even
0000D3FE                            
0000D3FE                            ; ---------------------------------------------------------------------------
0000D3FE                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D3FE                            ; ---------------------------------------------------------------------------
0000D3FE 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D400 0000                       		dc.w byte_CC13-Map_obj3A
0000D402 0000                       		dc.w byte_CC32-Map_obj3A
0000D404 0000                       		dc.w byte_CC51-Map_obj3A
0000D406 0000                       		dc.w byte_CC75-Map_obj3A
0000D408                            		;dc.w byte_CB47-Map_obj3A
0000D408                            		;dc.w byte_CB26-Map_obj3A
0000D408                            		;dc.w byte_CB31-Map_obj3A
0000D408                            		;dc.w byte_CB3C-Map_obj3A
0000D408 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D409 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D40E F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D413 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D418 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D41D F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D422 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D427 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D42C F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D431 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D436 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D43B F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D440 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D445 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D44A F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D44F F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D454 06                         byte_CC13:	dc.b 6			; PASSED
0000D455 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D45A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D45F F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D464 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D469 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D46E F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D473 06                         byte_CC32:	dc.b 6			; SCORE
0000D474 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D479 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D47E F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D483 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D488 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D48D FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D492 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D493 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D498 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D49D F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D4A2 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D4A7 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D4AC F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D4B1 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D4B6 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D4B7 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D4BC F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D4C1 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D4C6 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D4CB FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D4D0 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D4D5 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D4DA                            		even
0000D4DA                            ; ---------------------------------------------------------------------------
0000D4DA                            ; Sprite mappings - special stage results screen
0000D4DA                            ; ---------------------------------------------------------------------------
0000D4DA 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D4DC 0000                       		dc.w byte_CCEE-Map_obj7E
0000D4DE 0000                       		dc.w byte_CD0D-Map_obj7E
0000D4E0                            		;dc.w byte_CB47-Map_obj7E
0000D4E0 0000                       		dc.w byte_CD31-Map_obj7E
0000D4E2 0000                       		dc.w byte_CD46-Map_obj7E
0000D4E4 0000                       		dc.w byte_CD5B-Map_obj7E
0000D4E6 0000                       		dc.w byte_CD6B-Map_obj7E
0000D4E8 0000                       		dc.w byte_CDA8-Map_obj7E
0000D4EA 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D4EB F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D4F0 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D4F5 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D4FA F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D4FF F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D504 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D509 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D50E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D513 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D518 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D51D F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D522 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D527 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D52C 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D52D F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D532 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D537 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D53C F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D541 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D546 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D54B 07                         byte_CD0D:	dc.b 7
0000D54C F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D551 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D556 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D55B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D560 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D565 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D56A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D56F 04                         byte_CD31:	dc.b 4
0000D570 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D575 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D57A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D57F F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D584 04                         byte_CD46:	dc.b 4
0000D585 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D58A F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D58F F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D594 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D599 03                         byte_CD5B:	dc.b 3
0000D59A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D59F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D5A4 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D5A9 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D5AA F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D5AF F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D5B4 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D5B9 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D5BE F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D5C3 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D5C8 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D5CD F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D5D2 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D5D7 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D5DC F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D5E1 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D5E6 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D5E7 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D5EC F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D5F1 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D5F6 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D5FB F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D600 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D605 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D60A F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D60F F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D614 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D619 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D61E F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D623 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D628 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D62D F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D632                            		even
0000D632                            ; ---------------------------------------------------------------------------
0000D632                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D632                            ; ---------------------------------------------------------------------------
0000D632                            Map_obj7F:
0000D632                            	include "_maps\obj7F.asm"
0000D632                            ; ---------------------------------------------------------------------------
0000D632                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D632                            ; ---------------------------------------------------------------------------
0000D632 0000                       		dc.w byte_CE02-Map_obj7F
0000D634 0000                       		dc.w byte_CE08-Map_obj7F
0000D636 0000                       		dc.w byte_CE0E-Map_obj7F
0000D638 0000                       		dc.w byte_CE14-Map_obj7F
0000D63A 0000                       		dc.w byte_CE1A-Map_obj7F
0000D63C 0000                       		dc.w byte_CE20-Map_obj7F
0000D63E 0000                       		dc.w byte_CE26-Map_obj7F
0000D640 01                         byte_CE02:	dc.b 1
0000D641 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D646 01                         byte_CE08:	dc.b 1
0000D647 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D64C 01                         byte_CE0E:	dc.b 1
0000D64D F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D652 01                         byte_CE14:	dc.b 1
0000D653 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D658 01                         byte_CE1A:	dc.b 1
0000D659 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D65E 01                         byte_CE20:	dc.b 1
0000D65F F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D664 00                         byte_CE26:	dc.b 0			; Blank frame
0000D666 00                         		even
0000D666 00                         		even
0000D666                            
0000D666                            ; ===========================================================================
0000D666                            ; ---------------------------------------------------------------------------
0000D666                            ; Object 36 - spikes
0000D666                            ; ---------------------------------------------------------------------------
0000D666                            
0000D666                            Obj36:					; XREF: Obj_Index
0000D666 7000                       		moveq	#0,d0
0000D668 1028 0024                  		move.b	$24(a0),d0
0000D66C 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D670 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D674                            ; ===========================================================================
0000D674 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D676 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D678                            
0000D678 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D67A 0110                       		dc.b 1,	$10
0000D67C 0204                       		dc.b 2,	4
0000D67E 031C                       		dc.b 3,	$1C
0000D680 0440                       		dc.b 4,	$40
0000D682 0510                       		dc.b 5,	$10
0000D684                            ; ===========================================================================
0000D684                            
0000D684                            Obj36_Main:				; XREF: Obj36_Index
0000D684 5428 0024                  		addq.b	#2,$24(a0)
0000D688 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D690 317C 051B 0002             		move.w	#$51B,2(a0)
0000D696 0028 0004 0001             		ori.b	#4,1(a0)
0000D69C 117C 0004 0018             		move.b	#4,$18(a0)
0000D6A2 1028 0028                  		move.b	$28(a0),d0
0000D6A6 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D6AC 0240 00F0                  		andi.w	#$F0,d0
0000D6B0 43F9 0000 D678             		lea	(Obj36_Var).l,a1
0000D6B6 E648                       		lsr.w	#3,d0
0000D6B8 D2C0                       		adda.w	d0,a1
0000D6BA 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D6BE 1159 0019                  		move.b	(a1)+,$19(a0)
0000D6C2 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D6C8 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D6CE                            
0000D6CE                            Obj36_Solid:				; XREF: Obj36_Index
0000D6CE 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D6D2 343C 0004                  		move.w	#4,d2
0000D6D6 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D6DC 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D6DE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D6E4 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D6E6 343C 0014                  		move.w	#$14,d2
0000D6EA                            
0000D6EA                            ; Spikes types $1x and $5x face	sideways
0000D6EA                            
0000D6EA                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D6EA 323C 001B                  		move.w	#$1B,d1
0000D6EE 3602                       		move.w	d2,d3
0000D6F0 5243                       		addq.w	#1,d3
0000D6F2 3828 0008                  		move.w	8(a0),d4
0000D6F6 6100 0000                  		bsr.w	SolidObject
0000D6FA 0828 0003 0022             		btst	#3,$22(a0)
0000D700 6600                       		bne.s	Obj36_Display
0000D702 0C44 0001                  		cmpi.w	#1,d4
0000D706 6700                       		beq.s	Obj36_Hurt
0000D708 6000                       		bra.s	Obj36_Display
0000D70A                            ; ===========================================================================
0000D70A                            
0000D70A                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D70A                            
0000D70A                            Obj36_Upright:				; XREF: Obj36_Solid
0000D70A 7200                       		moveq	#0,d1
0000D70C 1228 0019                  		move.b	$19(a0),d1
0000D710 0641 000B                  		addi.w	#$B,d1
0000D714 343C 0010                  		move.w	#$10,d2
0000D718 363C 0011                  		move.w	#$11,d3
0000D71C 3828 0008                  		move.w	8(a0),d4
0000D720 6100 0000                  		bsr.w	SolidObject
0000D724 0828 0003 0022             		btst	#3,$22(a0)
0000D72A 6600                       		bne.s	Obj36_Hurt
0000D72C 4A44                       		tst.w	d4
0000D72E 6A00                       		bpl.s	Obj36_Display
0000D730                            
0000D730                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D730 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D734 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D736 2F08                       		move.l	a0,-(sp)
0000D738 2448                       		movea.l	a0,a2
0000D73A 41F8 D000                  		lea	($FFFFD000).w,a0
0000D73E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D744 6400                       		bcc.s	loc_CF20
0000D746 2628 000C                  		move.l	$C(a0),d3
0000D74A 3028 0012                  		move.w	$12(a0),d0
0000D74E 48C0                       		ext.l	d0
0000D750 E180                       		asl.l	#8,d0
0000D752 9680                       		sub.l	d0,d3
0000D754 2143 000C                  		move.l	d3,$C(a0)
0000D758 4EB9 0000 0000             		jsr	HurtSonic
0000D75E                            
0000D75E                            loc_CF20:
0000D75E 205F                       		movea.l	(sp)+,a0
0000D760                            
0000D760                            Obj36_Display:
0000D760 6100 0000                  		bsr.w	DisplaySprite
0000D764 3028 0030                  		move.w	$30(a0),d0
0000D768 0240 FF80                  		andi.w	#$FF80,d0
0000D76C 3238 F700                  		move.w	($FFFFF700).w,d1
0000D770 0441 0080                  		subi.w	#$80,d1
0000D774 0241 FF80                  		andi.w	#$FF80,d1
0000D778 9041                       		sub.w	d1,d0
0000D77A 0C40 0280                  		cmpi.w	#$280,d0
0000D77E 6200 0000                  		bhi.w	DeleteObject
0000D782 4E75                       		rts	
0000D784                            ; ===========================================================================
0000D784                            
0000D784                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D784 7000                       		moveq	#0,d0
0000D786 1028 0028                  		move.b	$28(a0),d0
0000D78A D040                       		add.w	d0,d0
0000D78C 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D790 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D794                            ; ===========================================================================
0000D794 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D796 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D798 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D79A                            ; ===========================================================================
0000D79A                            
0000D79A                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D79A 4E75                       		rts			; don't move the object
0000D79C                            ; ===========================================================================
0000D79C                            
0000D79C                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D79C 6100 0000                  		bsr.w	Obj36_Wait
0000D7A0 7000                       		moveq	#0,d0
0000D7A2 1028 0034                  		move.b	$34(a0),d0
0000D7A6 D068 0032                  		add.w	$32(a0),d0
0000D7AA 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D7AE 4E75                       		rts	
0000D7B0                            ; ===========================================================================
0000D7B0                            
0000D7B0                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D7B0 6100 0000                  		bsr.w	Obj36_Wait
0000D7B4 7000                       		moveq	#0,d0
0000D7B6 1028 0034                  		move.b	$34(a0),d0
0000D7BA D068 0030                  		add.w	$30(a0),d0
0000D7BE 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D7C2 4E75                       		rts	
0000D7C4                            ; ===========================================================================
0000D7C4                            
0000D7C4                            Obj36_Wait:
0000D7C4 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D7C8 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D7CA 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D7CE 6600                       		bne.s	locret_CFE6
0000D7D0 4A28 0001                  		tst.b	1(a0)
0000D7D4 6A00                       		bpl.s	locret_CFE6
0000D7D6 303C 00B6                  		move.w	#$B6,d0
0000D7DA 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D7E0 6000                       		bra.s	locret_CFE6
0000D7E2                            ; ===========================================================================
0000D7E2                            
0000D7E2                            loc_CFA4:
0000D7E2 4A68 0036                  		tst.w	$36(a0)
0000D7E6 6700                       		beq.s	loc_CFC6
0000D7E8 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D7EE 6400                       		bcc.s	locret_CFE6
0000D7F0 317C 0000 0034             		move.w	#0,$34(a0)
0000D7F6 317C 0000 0036             		move.w	#0,$36(a0)
0000D7FC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D802 6000                       		bra.s	locret_CFE6
0000D804                            ; ===========================================================================
0000D804                            
0000D804                            loc_CFC6:
0000D804 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D80A 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D810 6500                       		bcs.s	locret_CFE6
0000D812 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D818 317C 0001 0036             		move.w	#1,$36(a0)
0000D81E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D824                            
0000D824                            locret_CFE6:
0000D824 4E75                       		rts	
0000D826                            ; ===========================================================================
0000D826                            ; ---------------------------------------------------------------------------
0000D826                            ; Sprite mappings - spikes
0000D826                            ; ---------------------------------------------------------------------------
0000D826                            Map_obj36:
0000D826                            	include "_maps\obj36.asm"
0000D826                            Map_obj36_inner:
0000D826 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D828 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D82A 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D82C 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D82E 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D830 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D832 03                         Map_obj36_inner_C: 	dc.b $3
0000D833 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D838 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D83D F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D842 03                         Map_obj36_inner_1C: 	dc.b $3
0000D843 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D848 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D84D 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000D852 01                         Map_obj36_inner_2C: 	dc.b $1
0000D853 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D858 03                         Map_obj36_inner_32: 	dc.b $3
0000D859 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000D85E F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D863 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000D868 06                         Map_obj36_inner_42: 	dc.b $6
0000D869 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000D86E F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000D873 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000D878 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000D87D F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000D882 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000D887 01                         Map_obj36_inner_61: 	dc.b $1
0000D888 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D88E 00                         	even
0000D88E 00                         	even
0000D88E                            
0000D88E                            ; ===========================================================================
0000D88E                            ; ---------------------------------------------------------------------------
0000D88E                            ; Object 3B - purple rock (GHZ)
0000D88E                            ; ---------------------------------------------------------------------------
0000D88E                            
0000D88E                            Obj3B:					; XREF: Obj_Index
0000D88E 7000                       		moveq	#0,d0
0000D890 1028 0024                  		move.b	$24(a0),d0
0000D894 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D898 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D89C                            ; ===========================================================================
0000D89C 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D89E 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D8A0                            ; ===========================================================================
0000D8A0                            
0000D8A0                            Obj3B_Main:				; XREF: Obj3B_Index
0000D8A0 5428 0024                  		addq.b	#2,$24(a0)
0000D8A4 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D8AC 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D8B2 117C 0004 0001             		move.b	#4,1(a0)
0000D8B8 117C 0013 0019             		move.b	#$13,$19(a0)
0000D8BE 117C 0004 0018             		move.b	#4,$18(a0)
0000D8C4                            
0000D8C4                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D8C4 323C 001B                  		move.w	#$1B,d1
0000D8C8 343C 0010                  		move.w	#$10,d2
0000D8CC 363C 0010                  		move.w	#$10,d3
0000D8D0 3828 0008                  		move.w	8(a0),d4
0000D8D4 6100 0000                  		bsr.w	SolidObject
0000D8D8 6100 0000                  		bsr.w	DisplaySprite
0000D8DC 3028 0008                  		move.w	8(a0),d0
0000D8E0 0240 FF80                  		andi.w	#$FF80,d0
0000D8E4 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8E8 0441 0080                  		subi.w	#$80,d1
0000D8EC 0241 FF80                  		andi.w	#$FF80,d1
0000D8F0 9041                       		sub.w	d1,d0
0000D8F2 0C40 0280                  		cmpi.w	#$280,d0
0000D8F6 6200 0000                  		bhi.w	DeleteObject
0000D8FA 4E75                       		rts	
0000D8FC                            ; ===========================================================================
0000D8FC                            ; ---------------------------------------------------------------------------
0000D8FC                            ; Object 49 - waterfall	sound effect (GHZ)
0000D8FC                            ; ---------------------------------------------------------------------------
0000D8FC                            
0000D8FC                            Obj49:					; XREF: Obj_Index
0000D8FC 7000                       		moveq	#0,d0
0000D8FE 1028 0024                  		move.b	$24(a0),d0
0000D902 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D906 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D90A                            ; ===========================================================================
0000D90A 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D90C 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D90E                            ; ===========================================================================
0000D90E                            
0000D90E                            Obj49_Main:				; XREF: Obj49_Index
0000D90E 5428 0024                  		addq.b	#2,$24(a0)
0000D912 117C 0004 0001             		move.b	#4,1(a0)
0000D918                            
0000D918                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D918 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D91C 0200 003F                  		andi.b	#$3F,d0
0000D920 6600                       		bne.s	Obj49_ChkDel
0000D922 303C 00D0                  		move.w	#$D0,d0
0000D926 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D92C                            
0000D92C                            Obj49_ChkDel:
0000D92C 3028 0008                  		move.w	8(a0),d0
0000D930 0240 FF80                  		andi.w	#$FF80,d0
0000D934 3238 F700                  		move.w	($FFFFF700).w,d1
0000D938 0441 0080                  		subi.w	#$80,d1
0000D93C 0241 FF80                  		andi.w	#$FF80,d1
0000D940 9041                       		sub.w	d1,d0
0000D942 0C40 0280                  		cmpi.w	#$280,d0
0000D946 6200 0000                  		bhi.w	DeleteObject
0000D94A 4E75                       		rts	
0000D94C                            ; ===========================================================================
0000D94C                            ; ---------------------------------------------------------------------------
0000D94C                            ; Sprite mappings - purple rock	(GHZ)
0000D94C                            ; ---------------------------------------------------------------------------
0000D94C                            Map_obj3B:
0000D94C                            	include "_maps\obj3B.asm"
0000D94C                            ; ---------------------------------------------------------------------------
0000D94C                            ; Sprite mappings - purple rock	(GHZ)
0000D94C                            ; ---------------------------------------------------------------------------
0000D94C 0000                       		dc.w byte_D110-Map_obj3B
0000D94E 02                         byte_D110:	dc.b 2
0000D94F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D954 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D95A 00                         		even
0000D95A 00                         		even
0000D95A                            
0000D95A                            ; ===========================================================================
0000D95A                            ; ---------------------------------------------------------------------------
0000D95A                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D95A                            ; ---------------------------------------------------------------------------
0000D95A                            
0000D95A                            Obj3C:					; XREF: Obj_Index
0000D95A 7000                       		moveq	#0,d0
0000D95C 1028 0024                  		move.b	$24(a0),d0
0000D960 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D964 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D968 6000 0000                  		bra.w	MarkObjGone
0000D96C                            ; ===========================================================================
0000D96C 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D96E 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D970 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D972                            ; ===========================================================================
0000D972                            
0000D972                            Obj3C_Main:				; XREF: Obj3C_Index
0000D972 5428 0024                  		addq.b	#2,$24(a0)
0000D976 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D97E 317C 450F 0002             		move.w	#$450F,2(a0)
0000D984 117C 0004 0001             		move.b	#4,1(a0)
0000D98A 117C 0010 0019             		move.b	#$10,$19(a0)
0000D990 117C 0004 0018             		move.b	#4,$18(a0)
0000D996 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D99C                            
0000D99C                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D99C 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D9A2 323C 001B                  		move.w	#$1B,d1
0000D9A6 343C 0020                  		move.w	#$20,d2
0000D9AA 363C 0020                  		move.w	#$20,d3
0000D9AE 3828 0008                  		move.w	8(a0),d4
0000D9B2 6100 0000                  		bsr.w	SolidObject
0000D9B6 0828 0005 0022             		btst	#5,$22(a0)
0000D9BC 6600                       		bne.s	Obj3C_ChkRoll
0000D9BE                            
0000D9BE                            locret_D180:
0000D9BE 4E75                       		rts	
0000D9C0                            ; ===========================================================================
0000D9C0                            
0000D9C0                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D9C0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D9C6 66F6                       		bne.s	locret_D180	; if not, branch
0000D9C8 3028 0030                  		move.w	$30(a0),d0
0000D9CC 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D9CE 4440                       		neg.w	d0
0000D9D0                            
0000D9D0                            Obj3C_ChkSpeed:
0000D9D0 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D9D4 65E8                       		bcs.s	locret_D180	; if not, branch
0000D9D6 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D9DC 5869 0008                  		addq.w	#4,8(a1)
0000D9E0 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D9E6 3028 0008                  		move.w	8(a0),d0
0000D9EA B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D9EE 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D9F0 5169 0008                  		subq.w	#8,8(a1)
0000D9F4 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D9FA                            
0000D9FA                            Obj3C_Smash:
0000D9FA 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DA00 08A8 0005 0022             		bclr	#5,$22(a0)
0000DA06 08A9 0005 0022             		bclr	#5,$22(a1)
0000DA0C 7207                       		moveq	#7,d1		; load 8 fragments
0000DA0E 343C 0070                  		move.w	#$70,d2
0000DA12 6100                       		bsr.s	SmashObject
0000DA14                            
0000DA14                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DA14 6100 0000                  		bsr.w	SpeedToPos
0000DA18 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DA1E 6100 0000                  		bsr.w	DisplaySprite
0000DA22 4A28 0001                  		tst.b	1(a0)
0000DA26 6A00 0000                  		bpl.w	DeleteObject
0000DA2A 4E75                       		rts	
0000DA2C                            
0000DA2C                            ; ---------------------------------------------------------------------------
0000DA2C                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DA2C                            ; ---------------------------------------------------------------------------
0000DA2C                            
0000DA2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA2C                            
0000DA2C                            
0000DA2C                            SmashObject:				; XREF: Obj3C_Smash
0000DA2C 7000                       		moveq	#0,d0
0000DA2E 1028 001A                  		move.b	$1A(a0),d0
0000DA32 D040                       		add.w	d0,d0
0000DA34 2668 0004                  		movea.l	4(a0),a3
0000DA38 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DA3C 524B                       		addq.w	#1,a3
0000DA3E 08E8 0005 0001             		bset	#5,1(a0)
0000DA44 1810                       		move.b	0(a0),d4
0000DA46 1A28 0001                  		move.b	1(a0),d5
0000DA4A 2248                       		movea.l	a0,a1
0000DA4C 6000                       		bra.s	Smash_LoadFrag
0000DA4E                            ; ===========================================================================
0000DA4E                            
0000DA4E                            Smash_Loop:
0000DA4E 6100 0000                  		bsr.w	SingleObjLoad
0000DA52 6600                       		bne.s	Smash_PlaySnd
0000DA54 5A4B                       		addq.w	#5,a3
0000DA56                            
0000DA56                            Smash_LoadFrag:				; XREF: SmashObject
0000DA56 137C 0004 0024             		move.b	#4,$24(a1)
0000DA5C 1284                       		move.b	d4,0(a1)
0000DA5E 234B 0004                  		move.l	a3,4(a1)
0000DA62 1345 0001                  		move.b	d5,1(a1)
0000DA66 3368 0008 0008             		move.w	8(a0),8(a1)
0000DA6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DA72 3368 0002 0002             		move.w	2(a0),2(a1)
0000DA78 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DA7E 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DA84 335C 0010                  		move.w	(a4)+,$10(a1)
0000DA88 335C 0012                  		move.w	(a4)+,$12(a1)
0000DA8C B3C8                       		cmpa.l	a0,a1
0000DA8E 6400                       		bcc.s	loc_D268
0000DA90 2F08                       		move.l	a0,-(sp)
0000DA92 2049                       		movea.l	a1,a0
0000DA94 6100 0000                  		bsr.w	SpeedToPos
0000DA98 D568 0012                  		add.w	d2,$12(a0)
0000DA9C 205F                       		movea.l	(sp)+,a0
0000DA9E 6100 0000                  		bsr.w	DisplaySprite2
0000DAA2                            
0000DAA2                            loc_D268:
0000DAA2 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DAA6                            
0000DAA6                            Smash_PlaySnd:
0000DAA6 303C 00CB                  		move.w	#$CB,d0
0000DAAA 4EF9 0000 13B6             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DAB0                            ; End of function SmashObject
0000DAB0                            
0000DAB0                            ; ===========================================================================
0000DAB0                            ; Smashed block	fragment speeds
0000DAB0                            ;
0000DAB0 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DAB4 0600 FF00                  		dc.w $600, $FF00
0000DAB8 0600 0100                  		dc.w $600, $100
0000DABC 0400 0500                  		dc.w $400, $500
0000DAC0 0600 FA00                  		dc.w $600, $FA00
0000DAC4 0800 FE00                  		dc.w $800, $FE00
0000DAC8 0800 0200                  		dc.w $800, $200
0000DACC 0600 0600                  		dc.w $600, $600
0000DAD0                            
0000DAD0 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DAD4 F800 FE00                  		dc.w $F800, $FE00
0000DAD8 F800 0200                  		dc.w $F800, $200
0000DADC FA00 0600                  		dc.w $FA00, $600
0000DAE0 FC00 FB00                  		dc.w $FC00, $FB00
0000DAE4 FA00 FF00                  		dc.w $FA00, $FF00
0000DAE8 FA00 0100                  		dc.w $FA00, $100
0000DAEC FC00 0500                  		dc.w $FC00, $500
0000DAF0                            ; ---------------------------------------------------------------------------
0000DAF0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DAF0                            ; ---------------------------------------------------------------------------
0000DAF0                            Map_obj3C:
0000DAF0                            	include "_maps\obj3C.asm"
0000DAF0                            ; ---------------------------------------------------------------------------
0000DAF0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DAF0                            ; ---------------------------------------------------------------------------
0000DAF0 0000                       		dc.w byte_D2BC-Map_obj3C
0000DAF2 0000                       		dc.w byte_D2E5-Map_obj3C
0000DAF4 0000                       		dc.w byte_D30E-Map_obj3C
0000DAF6 08                         byte_D2BC:	dc.b 8
0000DAF7 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DAFC F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DB01 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DB06 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DB0B E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DB10 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DB15 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DB1A 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DB1F 08                         byte_D2E5:	dc.b 8
0000DB20 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB25 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB2A 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB2F 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB34 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DB39 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DB3E 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DB43 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DB48 08                         byte_D30E:	dc.b 8
0000DB49 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB4E F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB53 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB58 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB5D E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DB62 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DB67 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DB6C 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DB72 00                         		even
0000DB72 00                         		even
0000DB72                            
0000DB72                            ; ---------------------------------------------------------------------------
0000DB72                            ; Object code loading subroutine
0000DB72                            ; ---------------------------------------------------------------------------
0000DB72                            
0000DB72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB72                            
0000DB72                            
0000DB72                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DB72 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DB76 7E7F                       		moveq	#$7F,d7
0000DB78 7000                       		moveq	#0,d0
0000DB7A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DB80 6400                       		bcc.s	loc_D362
0000DB82                            
0000DB82                            loc_D348:
0000DB82 1010                       		move.b	(a0),d0		; load object number from RAM
0000DB84 6700                       		beq.s	loc_D358
0000DB86 D040                       		add.w	d0,d0
0000DB88 D040                       		add.w	d0,d0
0000DB8A 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DB8E 4E91                       		jsr	(a1)		; run the object's code
0000DB90 7000                       		moveq	#0,d0
0000DB92                            
0000DB92                            loc_D358:
0000DB92 41E8 0040                  		lea	$40(a0),a0	; next object
0000DB96 51CF FFEA                  		dbf	d7,loc_D348
0000DB9A 4E75                       		rts	
0000DB9C                            ; ===========================================================================
0000DB9C                            
0000DB9C                            loc_D362:
0000DB9C 7E1F                       		moveq	#$1F,d7
0000DB9E 61E2                       		bsr.s	loc_D348
0000DBA0 7E5F                       		moveq	#$5F,d7
0000DBA2                            
0000DBA2                            loc_D368:
0000DBA2 7000                       		moveq	#0,d0
0000DBA4 1010                       		move.b	(a0),d0
0000DBA6 6700                       		beq.s	loc_D378
0000DBA8 4A28 0001                  		tst.b	1(a0)
0000DBAC 6A00                       		bpl.s	loc_D378
0000DBAE 6100 0000                  		bsr.w	DisplaySprite
0000DBB2                            
0000DBB2                            loc_D378:
0000DBB2 41E8 0040                  		lea	$40(a0),a0
0000DBB6                            
0000DBB6                            loc_D37C:
0000DBB6 51CF FFEA                  		dbf	d7,loc_D368
0000DBBA 4E75                       		rts	
0000DBBC                            ; End of function ObjectsLoad
0000DBBC                            
0000DBBC                            ; ===========================================================================
0000DBBC                            ; ---------------------------------------------------------------------------
0000DBBC                            ; Object pointers
0000DBBC                            ; ---------------------------------------------------------------------------
0000DBBC                            Obj_Index:
0000DBBC                            	include "_inc\Object pointers.asm"
0000DBBC                            ; ---------------------------------------------------------------------------
0000DBBC                            ; Object pointers
0000DBBC                            ; ---------------------------------------------------------------------------
0000DBBC 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DBCC 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DBDC 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DBEC 0000 0000 0000 ADD6 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DBFC 0000 796E 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DC0C 0000 7F94 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DC1C 0000 87E2 0000 88DC 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DC2C 0000 8F26 0000 9214 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DC3C 0000 0000 0000 9ED2 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DC4C 0000 A20A 0000 A7F6 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DC5C 0000 9B2E 0000 8FFC 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DC6C 0000 B3CE 0000 A9EA 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DC7C 0000 BDE2 0000 C490 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DC8C 0000 B940 0000 D666 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DC9C 0000 CC3E 0000 CCF8 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DCAC 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DCBC 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DCCC 0000 C0FE 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DCDC 0000 D8FC 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DCEC 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DCFC 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DD0C 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DD1C 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DD2C 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DD3C 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DD4C 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DD5C 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DD6C 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DD7C 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DD8C 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DD9C 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DDAC 0000 0000 0000 CF42 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DDBC 0000 53CC 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DDCC 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DDDC 0000 5A86 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDDC 0000 5A86 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDEC                            
0000DDEC                            ; ---------------------------------------------------------------------------
0000DDEC                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DDEC                            ; ---------------------------------------------------------------------------
0000DDEC                            
0000DDEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDEC                            
0000DDEC                            _objectFall: 
0000DDEC                            ObjectFall:
0000DDEC 2428 0008                  		move.l	8(a0),d2
0000DDF0 2628 000C                  		move.l	$C(a0),d3
0000DDF4 3028 0010                  		move.w	$10(a0),d0
0000DDF8 48C0                       		ext.l	d0
0000DDFA E180                       		asl.l	#8,d0
0000DDFC D480                       		add.l	d0,d2
0000DDFE 3028 0012                  		move.w	$12(a0),d0
0000DE02 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DE08 48C0                       		ext.l	d0
0000DE0A E180                       		asl.l	#8,d0
0000DE0C D680                       		add.l	d0,d3
0000DE0E 2142 0008                  		move.l	d2,8(a0)
0000DE12 2143 000C                  		move.l	d3,$C(a0)
0000DE16 4E75                       		rts	
0000DE18                            ; End of function ObjectFall
0000DE18                            
0000DE18                            ; ---------------------------------------------------------------------------
0000DE18                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DE18                            ; ---------------------------------------------------------------------------
0000DE18                            
0000DE18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE18                            
0000DE18                            
0000DE18                            ObjectFallNoJump:
0000DE18 2428 0008                  		move.l	8(a0),d2
0000DE1C 2628 000C                  		move.l	$C(a0),d3
0000DE20 3028 0010                  		move.w	$10(a0),d0
0000DE24 48C0                       		ext.l	d0
0000DE26 E180                       		asl.l	#8,d0
0000DE28 D480                       		add.l	d0,d2
0000DE2A                            ;		cmpi.b	#1,obID(a0)
0000DE2A                            ;		beq.s	ObjectFallSonic
0000DE2A 3028 000C                  		move.w	$C(a0),d0
0000DE2E 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000DE32                            ;		ext.l	d0
0000DE32                            ;		asl.l	#8,d0
0000DE32                            ;		add.l	d0,d3
0000DE32 2142 0008                  		move.l	d2,$8(a0)
0000DE36                            ;		move.l	d3,obY(a0)
0000DE36 4E75                       		rts	
0000DE38                            
0000DE38                            ; End of function ObjectFall
0000DE38                            
0000DE38                            JumpFallSonic:
0000DE38 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000DE3E                                    
0000DE3E E180                               asl.l    #8,d0                ; Apply X speed
0000DE40 D1A8 0008                          add.l    d0,$8(a0)
0000DE44                                    
0000DE44 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000DE48 4A41                               tst.w    d1                ; Are we falling?
0000DE4A 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000DE4C 4440                               neg.w    d0                ; Make Y movement go up
0000DE4E                                    
0000DE4E                            .SetYSpeed:
0000DE4E 48C0                               ext.l    d0                ; Apply Y speed
0000DE50 E180                               asl.l    #8,d0
0000DE52 D1A8 000C                          add.l    d0,$C(a0)
0000DE56 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000DE5C 4E75                               rts
0000DE5E                            
0000DE5E                            ; ---------------------------------------------------------------------------
0000DE5E                            ; Subroutine translating object	speed to update	object position
0000DE5E                            ; ---------------------------------------------------------------------------
0000DE5E                            
0000DE5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE5E                            
0000DE5E                            _objectSetSpeed:
0000DE5E                            SpeedToPos:
0000DE5E 2428 0008                  		move.l	8(a0),d2
0000DE62 2628 000C                  		move.l	$C(a0),d3
0000DE66 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DE6A 48C0                       		ext.l	d0
0000DE6C E180                       		asl.l	#8,d0		; multiply speed by $100
0000DE6E D480                       		add.l	d0,d2		; add to x-axis	position
0000DE70 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DE74 48C0                       		ext.l	d0
0000DE76 E180                       		asl.l	#8,d0		; multiply by $100
0000DE78 D680                       		add.l	d0,d3		; add to y-axis	position
0000DE7A 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DE7E 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DE82 4E75                       		rts	
0000DE84                            ; End of function SpeedToPos
0000DE84                            
0000DE84                            ; ---------------------------------------------------------------------------
0000DE84                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DE84                            ; ---------------------------------------------------------------------------
0000DE84                            
0000DE84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE84                            
0000DE84                            _objectDraw:
0000DE84                            DisplaySprite:
0000DE84 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DE88 3028 0018                  		move.w	$18(a0),d0
0000DE8C E248                       		lsr.w	#1,d0
0000DE8E 0240 0380                  		andi.w	#$380,d0
0000DE92 D2C0                       		adda.w	d0,a1
0000DE94 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DE98 6400                       		bcc.s	locret_D620
0000DE9A 5451                       		addq.w	#2,(a1)
0000DE9C D2D1                       		adda.w	(a1),a1
0000DE9E 3288                       		move.w	a0,(a1)
0000DEA0                            
0000DEA0                            locret_D620:
0000DEA0 4E75                       		rts	
0000DEA2                            ; End of function DisplaySprite
0000DEA2                            
0000DEA2                            ; ---------------------------------------------------------------------------
0000DEA2                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DEA2                            ; ---------------------------------------------------------------------------
0000DEA2                            
0000DEA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEA2                            
0000DEA2                            _objectDrawChild: 
0000DEA2                            DisplaySprite2:
0000DEA2 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DEA6 3029 0018                  		move.w	$18(a1),d0
0000DEAA E248                       		lsr.w	#1,d0
0000DEAC 0240 0380                  		andi.w	#$380,d0
0000DEB0 D4C0                       		adda.w	d0,a2
0000DEB2 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DEB6 6400                       		bcc.s	locret_D63E
0000DEB8 5452                       		addq.w	#2,(a2)
0000DEBA D4D2                       		adda.w	(a2),a2
0000DEBC 3489                       		move.w	a1,(a2)
0000DEBE                            
0000DEBE                            locret_D63E:
0000DEBE 4E75                       		rts	
0000DEC0                            ; End of function DisplaySprite2
0000DEC0                            
0000DEC0                            ; ---------------------------------------------------------------------------
0000DEC0                            ; Subroutine to	delete an object
0000DEC0                            ; ---------------------------------------------------------------------------
0000DEC0                            
0000DEC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEC0                            
0000DEC0                            _objectDelete: 
0000DEC0                            DeleteObject:
0000DEC0 2248                       		movea.l	a0,a1
0000DEC2                            
0000DEC2                            DeleteObject2:
0000DEC2 7200                       		moveq	#0,d1
0000DEC4 700F                       		moveq	#$F,d0
0000DEC6                            
0000DEC6                            loc_D646:
0000DEC6 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DEC8 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DECC 4E75                       		rts	
0000DECE                            ; End of function DeleteObject
0000DECE                            
0000DECE                            ; ===========================================================================
0000DECE 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DED2 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DED6 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DEDA 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DEDE                            ; ---------------------------------------------------------------------------
0000DEDE                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DEDE                            ; ---------------------------------------------------------------------------
0000DEDE                            
0000DEDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEDE                            
0000DEDE                            DrawObjects:
0000DEDE                            BuildSprites:				; XREF: TitleScreen; et al
0000DEDE 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DEE2 7A00                       		moveq	#0,d5
0000DEE4 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DEE8 7E07                       		moveq	#7,d7
0000DEEA                            
0000DEEA                            loc_D66A:
0000DEEA 4A54                       		tst.w	(a4)
0000DEEC 6700 0000                  		beq.w	loc_D72E
0000DEF0 7C02                       		moveq	#2,d6
0000DEF2                            
0000DEF2                            loc_D672:
0000DEF2 3074 6000                  		movea.w	(a4,d6.w),a0
0000DEF6 4A10                       		tst.b	(a0)
0000DEF8 6700 0000                  		beq.w	loc_D726
0000DEFC 08A8 0007 0001             		bclr	#7,1(a0)
0000DF02 1028 0001                  		move.b	1(a0),d0
0000DF06 1800                       		move.b	d0,d4
0000DF08 0240 000C                  		andi.w	#$C,d0
0000DF0C 6700                       		beq.s	loc_D6DE
0000DF0E 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DF12 7000                       		moveq	#0,d0
0000DF14 1028 0019                  		move.b	$19(a0),d0
0000DF18 3628 0008                  		move.w	8(a0),d3
0000DF1C 9651                       		sub.w	(a1),d3
0000DF1E 3203                       		move.w	d3,d1
0000DF20 D240                       		add.w	d0,d1
0000DF22 6B00 0000                  		bmi.w	loc_D726
0000DF26 3203                       		move.w	d3,d1
0000DF28 9240                       		sub.w	d0,d1
0000DF2A 0C41 0140                  		cmpi.w	#$140,d1
0000DF2E 6C00                       		bge.s	loc_D726
0000DF30 0643 0080                  		addi.w	#$80,d3
0000DF34 0804 0004                  		btst	#4,d4
0000DF38 6700                       		beq.s	loc_D6E8
0000DF3A 7000                       		moveq	#0,d0
0000DF3C 1028 0016                  		move.b	$16(a0),d0
0000DF40 3428 000C                  		move.w	$C(a0),d2
0000DF44 9469 0004                  		sub.w	4(a1),d2
0000DF48 3202                       		move.w	d2,d1
0000DF4A D240                       		add.w	d0,d1
0000DF4C 6B00                       		bmi.s	loc_D726
0000DF4E 3202                       		move.w	d2,d1
0000DF50 9240                       		sub.w	d0,d1
0000DF52 0C41 00E0                  		cmpi.w	#$E0,d1
0000DF56 6C00                       		bge.s	loc_D726
0000DF58 0642 0080                  		addi.w	#$80,d2
0000DF5C 6000                       		bra.s	loc_D700
0000DF5E                            ; ===========================================================================
0000DF5E                            
0000DF5E                            loc_D6DE:
0000DF5E 3428 000A                  		move.w	$A(a0),d2
0000DF62 3628 0008                  		move.w	8(a0),d3
0000DF66 6000                       		bra.s	loc_D700
0000DF68                            ; ===========================================================================
0000DF68                            
0000DF68                            loc_D6E8:
0000DF68 3428 000C                  		move.w	$C(a0),d2
0000DF6C 9469 0004                  		sub.w	4(a1),d2
0000DF70 0642 0080                  		addi.w	#$80,d2
0000DF74 0C42 0060                  		cmpi.w	#$60,d2
0000DF78 6500                       		bcs.s	loc_D726
0000DF7A 0C42 0180                  		cmpi.w	#$180,d2
0000DF7E 6400                       		bcc.s	loc_D726
0000DF80                            
0000DF80                            loc_D700:
0000DF80 2268 0004                  		movea.l	4(a0),a1
0000DF84 7200                       		moveq	#0,d1
0000DF86 0804 0005                  		btst	#5,d4
0000DF8A 6600                       		bne.s	loc_D71C
0000DF8C 1228 001A                  		move.b	$1A(a0),d1
0000DF90 D201                       		add.b	d1,d1
0000DF92 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DF96 1219                       		move.b	(a1)+,d1
0000DF98 5301                       		subq.b	#1,d1
0000DF9A 6B00                       		bmi.s	loc_D720
0000DF9C                            
0000DF9C                            loc_D71C:
0000DF9C 6100 0000                  		bsr.w	sub_D750
0000DFA0                            
0000DFA0                            loc_D720:
0000DFA0 08E8 0007 0001             		bset	#7,1(a0)
0000DFA6                            
0000DFA6                            loc_D726:
0000DFA6 5446                       		addq.w	#2,d6
0000DFA8 5554                       		subq.w	#2,(a4)
0000DFAA 6600 FF46                  		bne.w	loc_D672
0000DFAE                            
0000DFAE                            loc_D72E:
0000DFAE 49EC 0080                  		lea	$80(a4),a4
0000DFB2 51CF FF36                  		dbf	d7,loc_D66A
0000DFB6 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DFBA 0C05 0050                  		cmpi.b	#$50,d5
0000DFBE 6700                       		beq.s	loc_D748
0000DFC0 24BC 0000 0000             		move.l	#0,(a2)
0000DFC6 4E75                       		rts	
0000DFC8                            ; ===========================================================================
0000DFC8                            
0000DFC8                            loc_D748:
0000DFC8 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DFCE 4E75                       		rts	
0000DFD0                            ; End of function BuildSprites
0000DFD0                            
0000DFD0                            
0000DFD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFD0                            
0000DFD0                            
0000DFD0                            sub_D750:				; XREF: BuildSprites
0000DFD0 3668 0002                  		movea.w	2(a0),a3
0000DFD4 0804 0000                  		btst	#0,d4
0000DFD8 6600                       		bne.s	loc_D796
0000DFDA 0804 0001                  		btst	#1,d4
0000DFDE 6600 0000                  		bne.w	loc_D7E4
0000DFE2                            ; End of function sub_D750
0000DFE2                            
0000DFE2                            
0000DFE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFE2                            
0000DFE2                            
0000DFE2                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DFE2 0C05 0050                  		cmpi.b	#$50,d5
0000DFE6 6700                       		beq.s	locret_D794
0000DFE8 1019                       		move.b	(a1)+,d0
0000DFEA 4880                       		ext.w	d0
0000DFEC D042                       		add.w	d2,d0
0000DFEE 34C0                       		move.w	d0,(a2)+
0000DFF0 14D9                       		move.b	(a1)+,(a2)+
0000DFF2 5205                       		addq.b	#1,d5
0000DFF4 14C5                       		move.b	d5,(a2)+
0000DFF6 1019                       		move.b	(a1)+,d0
0000DFF8 E148                       		lsl.w	#8,d0
0000DFFA 1019                       		move.b	(a1)+,d0
0000DFFC D04B                       		add.w	a3,d0
0000DFFE 34C0                       		move.w	d0,(a2)+
0000E000 1019                       		move.b	(a1)+,d0
0000E002 4880                       		ext.w	d0
0000E004 D043                       		add.w	d3,d0
0000E006 0240 01FF                  		andi.w	#$1FF,d0
0000E00A 6600                       		bne.s	loc_D78E
0000E00C 5240                       		addq.w	#1,d0
0000E00E                            
0000E00E                            loc_D78E:
0000E00E 34C0                       		move.w	d0,(a2)+
0000E010 51C9 FFD0                  		dbf	d1,sub_D762
0000E014                            
0000E014                            locret_D794:
0000E014 4E75                       		rts	
0000E016                            ; End of function sub_D762
0000E016                            
0000E016                            ; ===========================================================================
0000E016                            
0000E016                            loc_D796:
0000E016 0804 0001                  		btst	#1,d4
0000E01A 6600 0000                  		bne.w	loc_D82A
0000E01E                            
0000E01E                            loc_D79E:
0000E01E 0C05 0050                  		cmpi.b	#$50,d5
0000E022 6700                       		beq.s	locret_D7E2
0000E024 1019                       		move.b	(a1)+,d0
0000E026 4880                       		ext.w	d0
0000E028 D042                       		add.w	d2,d0
0000E02A 34C0                       		move.w	d0,(a2)+
0000E02C 1819                       		move.b	(a1)+,d4
0000E02E 14C4                       		move.b	d4,(a2)+
0000E030 5205                       		addq.b	#1,d5
0000E032 14C5                       		move.b	d5,(a2)+
0000E034 1019                       		move.b	(a1)+,d0
0000E036 E148                       		lsl.w	#8,d0
0000E038 1019                       		move.b	(a1)+,d0
0000E03A D04B                       		add.w	a3,d0
0000E03C 0A40 0800                  		eori.w	#$800,d0
0000E040 34C0                       		move.w	d0,(a2)+
0000E042 1019                       		move.b	(a1)+,d0
0000E044 4880                       		ext.w	d0
0000E046 4440                       		neg.w	d0
0000E048 D804                       		add.b	d4,d4
0000E04A 0244 0018                  		andi.w	#$18,d4
0000E04E 5044                       		addq.w	#8,d4
0000E050 9044                       		sub.w	d4,d0
0000E052 D043                       		add.w	d3,d0
0000E054 0240 01FF                  		andi.w	#$1FF,d0
0000E058 6600                       		bne.s	loc_D7DC
0000E05A 5240                       		addq.w	#1,d0
0000E05C                            
0000E05C                            loc_D7DC:
0000E05C 34C0                       		move.w	d0,(a2)+
0000E05E 51C9 FFBE                  		dbf	d1,loc_D79E
0000E062                            
0000E062                            locret_D7E2:
0000E062 4E75                       		rts	
0000E064                            ; ===========================================================================
0000E064                            
0000E064                            loc_D7E4:				; XREF: sub_D750
0000E064 0C05 0050                  		cmpi.b	#$50,d5
0000E068 6700                       		beq.s	locret_D828
0000E06A 1019                       		move.b	(a1)+,d0
0000E06C 1811                       		move.b	(a1),d4
0000E06E 4880                       		ext.w	d0
0000E070 4440                       		neg.w	d0
0000E072 E70C                       		lsl.b	#3,d4
0000E074 0244 0018                  		andi.w	#$18,d4
0000E078 5044                       		addq.w	#8,d4
0000E07A 9044                       		sub.w	d4,d0
0000E07C D042                       		add.w	d2,d0
0000E07E 34C0                       		move.w	d0,(a2)+
0000E080 14D9                       		move.b	(a1)+,(a2)+
0000E082 5205                       		addq.b	#1,d5
0000E084 14C5                       		move.b	d5,(a2)+
0000E086 1019                       		move.b	(a1)+,d0
0000E088 E148                       		lsl.w	#8,d0
0000E08A 1019                       		move.b	(a1)+,d0
0000E08C D04B                       		add.w	a3,d0
0000E08E 0A40 1000                  		eori.w	#$1000,d0
0000E092 34C0                       		move.w	d0,(a2)+
0000E094 1019                       		move.b	(a1)+,d0
0000E096 4880                       		ext.w	d0
0000E098 D043                       		add.w	d3,d0
0000E09A 0240 01FF                  		andi.w	#$1FF,d0
0000E09E 6600                       		bne.s	loc_D822
0000E0A0 5240                       		addq.w	#1,d0
0000E0A2                            
0000E0A2                            loc_D822:
0000E0A2 34C0                       		move.w	d0,(a2)+
0000E0A4 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E0A8                            
0000E0A8                            locret_D828:
0000E0A8 4E75                       		rts	
0000E0AA                            ; ===========================================================================
0000E0AA                            
0000E0AA                            loc_D82A:
0000E0AA 0C05 0050                  		cmpi.b	#$50,d5
0000E0AE 6700                       		beq.s	locret_D87C
0000E0B0 1019                       		move.b	(a1)+,d0
0000E0B2 1811                       		move.b	(a1),d4
0000E0B4 4880                       		ext.w	d0
0000E0B6 4440                       		neg.w	d0
0000E0B8 E70C                       		lsl.b	#3,d4
0000E0BA 0244 0018                  		andi.w	#$18,d4
0000E0BE 5044                       		addq.w	#8,d4
0000E0C0 9044                       		sub.w	d4,d0
0000E0C2 D042                       		add.w	d2,d0
0000E0C4 34C0                       		move.w	d0,(a2)+
0000E0C6 1819                       		move.b	(a1)+,d4
0000E0C8 14C4                       		move.b	d4,(a2)+
0000E0CA 5205                       		addq.b	#1,d5
0000E0CC 14C5                       		move.b	d5,(a2)+
0000E0CE 1019                       		move.b	(a1)+,d0
0000E0D0 E148                       		lsl.w	#8,d0
0000E0D2 1019                       		move.b	(a1)+,d0
0000E0D4 D04B                       		add.w	a3,d0
0000E0D6 0A40 1800                  		eori.w	#$1800,d0
0000E0DA 34C0                       		move.w	d0,(a2)+
0000E0DC 1019                       		move.b	(a1)+,d0
0000E0DE 4880                       		ext.w	d0
0000E0E0 4440                       		neg.w	d0
0000E0E2 D804                       		add.b	d4,d4
0000E0E4 0244 0018                  		andi.w	#$18,d4
0000E0E8 5044                       		addq.w	#8,d4
0000E0EA 9044                       		sub.w	d4,d0
0000E0EC D043                       		add.w	d3,d0
0000E0EE 0240 01FF                  		andi.w	#$1FF,d0
0000E0F2 6600                       		bne.s	loc_D876
0000E0F4 5240                       		addq.w	#1,d0
0000E0F6                            
0000E0F6                            loc_D876:
0000E0F6 34C0                       		move.w	d0,(a2)+
0000E0F8 51C9 FFB0                  		dbf	d1,loc_D82A
0000E0FC                            
0000E0FC                            locret_D87C:
0000E0FC 4E75                       		rts	
0000E0FE                            ; ---------------------------------------------------------------------------
0000E0FE                            ; Subroutine to	check if an object is on the screen
0000E0FE                            ; ---------------------------------------------------------------------------
0000E0FE                            
0000E0FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0FE                            
0000E0FE                            
0000E0FE                            ChkObjOnScreen:
0000E0FE 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E102 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E106 6B00                       		bmi.s	NotOnScreen
0000E108 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E10C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E10E                            
0000E10E 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E112 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E116 6B00                       		bmi.s	NotOnScreen
0000E118 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E11C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E11E                            
0000E11E 7000                       		moveq	#0,d0		; set flag to 0
0000E120 4E75                       		rts	
0000E122                            ; ===========================================================================
0000E122                            
0000E122                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E122 7001                       		moveq	#1,d0		; set flag to 1
0000E124 4E75                       		rts	
0000E126                            ; End of function ChkObjOnScreen
0000E126                            
0000E126                            
0000E126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E126                            
0000E126                            
0000E126                            ChkObjOnScreen2:
0000E126 7200                       		moveq	#0,d1
0000E128 1228 0019                  		move.b	$19(a0),d1
0000E12C 3028 0008                  		move.w	8(a0),d0
0000E130 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E134 D041                       		add.w	d1,d0
0000E136 6B00                       		bmi.s	NotOnScreen2
0000E138 D241                       		add.w	d1,d1
0000E13A 9041                       		sub.w	d1,d0
0000E13C 0C40 0140                  		cmpi.w	#320,d0
0000E140 6C00                       		bge.s	NotOnScreen2
0000E142                            
0000E142 3228 000C                  		move.w	$C(a0),d1
0000E146 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E14A 6B00                       		bmi.s	NotOnScreen2
0000E14C 0C41 00E0                  		cmpi.w	#224,d1
0000E150 6C00                       		bge.s	NotOnScreen2
0000E152                            
0000E152 7000                       		moveq	#0,d0
0000E154 4E75                       		rts	
0000E156                            ; ===========================================================================
0000E156                            
0000E156                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E156 7001                       		moveq	#1,d0
0000E158 4E75                       		rts	
0000E15A                            ; End of function ChkObjOnScreen2
0000E15A                            
0000E15A                            ; ---------------------------------------------------------------------------
0000E15A                            ; Subroutine to	load a level's objects
0000E15A                            ; ---------------------------------------------------------------------------
0000E15A                            
0000E15A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E15A                            
0000E15A                            
0000E15A                            ObjPosLoad:				; XREF: Level; et al
0000E15A 7000                       		moveq	#0,d0
0000E15C 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E160 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E164 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E168                            ; End of function ObjPosLoad
0000E168                            
0000E168                            ; ===========================================================================
0000E168 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E16A 0000                       		dc.w OPL_Next-OPL_Index
0000E16C                            ; ===========================================================================
0000E16C                            
0000E16C                            OPL_Main:				; XREF: OPL_Index
0000E16C 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E170 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E174 ED08                       		lsl.b	#6,d0
0000E176 E848                       		lsr.w	#4,d0
0000E178 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E17E 2248                       		movea.l	a0,a1
0000E180 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E184 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E188 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E18C D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E190 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E194 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E198 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E19C 34FC 0101                  		move.w	#$101,(a2)+
0000E1A0 303C 005E                  		move.w	#$5E,d0
0000E1A4                            
0000E1A4                            OPL_ClrList:
0000E1A4 429A                       		clr.l	(a2)+
0000E1A6 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E1AA                            
0000E1AA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E1AE 7400                       		moveq	#0,d2
0000E1B0 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E1B4 0446 0080                  		subi.w	#$80,d6
0000E1B8 6400                       		bcc.s	loc_D93C
0000E1BA 7C00                       		moveq	#0,d6
0000E1BC                            
0000E1BC                            loc_D93C:
0000E1BC 0246 FF80                  		andi.w	#$FF80,d6
0000E1C0 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E1C4                            
0000E1C4                            loc_D944:
0000E1C4 BC50                       		cmp.w	(a0),d6
0000E1C6 6300                       		bls.s	loc_D956
0000E1C8 4A28 0004                  		tst.b	4(a0)
0000E1CC 6A00                       		bpl.s	loc_D952
0000E1CE 1412                       		move.b	(a2),d2
0000E1D0 5212                       		addq.b	#1,(a2)
0000E1D2                            
0000E1D2                            loc_D952:
0000E1D2 5C48                       		addq.w	#6,a0
0000E1D4 60EE                       		bra.s	loc_D944
0000E1D6                            ; ===========================================================================
0000E1D6                            
0000E1D6                            loc_D956:
0000E1D6 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1DA 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E1DE 0446 0080                  		subi.w	#$80,d6
0000E1E2 6500                       		bcs.s	loc_D976
0000E1E4                            
0000E1E4                            loc_D964:
0000E1E4 BC50                       		cmp.w	(a0),d6
0000E1E6 6300                       		bls.s	loc_D976
0000E1E8 4A28 0004                  		tst.b	4(a0)
0000E1EC 6A00                       		bpl.s	loc_D972
0000E1EE 522A 0001                  		addq.b	#1,1(a2)
0000E1F2                            
0000E1F2                            loc_D972:
0000E1F2 5C48                       		addq.w	#6,a0
0000E1F4 60EE                       		bra.s	loc_D964
0000E1F6                            ; ===========================================================================
0000E1F6                            
0000E1F6                            loc_D976:
0000E1F6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E1FA 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E200                            
0000E200                            OPL_Next:				; XREF: OPL_Index
0000E200 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E204 7400                       		moveq	#0,d2
0000E206 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E20A 0246 FF80                  		andi.w	#$FF80,d6
0000E20E BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E212 6700 0000                  		beq.w	locret_DA3A
0000E216 6C00                       		bge.s	loc_D9F6
0000E218 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E21C 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E220 0446 0080                  		subi.w	#$80,d6
0000E224 6500                       		bcs.s	loc_D9D2
0000E226                            
0000E226                            loc_D9A6:
0000E226 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E22A 6C00                       		bge.s	loc_D9D2
0000E22C 5D48                       		subq.w	#6,a0
0000E22E 4A28 0004                  		tst.b	4(a0)
0000E232 6A00                       		bpl.s	loc_D9BC
0000E234 532A 0001                  		subq.b	#1,1(a2)
0000E238 142A 0001                  		move.b	1(a2),d2
0000E23C                            
0000E23C                            loc_D9BC:
0000E23C 6100 0000                  		bsr.w	loc_DA3C
0000E240 6600                       		bne.s	loc_D9C6
0000E242 5D48                       		subq.w	#6,a0
0000E244 60E0                       		bra.s	loc_D9A6
0000E246                            ; ===========================================================================
0000E246                            
0000E246                            loc_D9C6:
0000E246 4A28 0004                  		tst.b	4(a0)
0000E24A 6A00                       		bpl.s	loc_D9D0
0000E24C 522A 0001                  		addq.b	#1,1(a2)
0000E250                            
0000E250                            loc_D9D0:
0000E250 5C48                       		addq.w	#6,a0
0000E252                            
0000E252                            loc_D9D2:
0000E252 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E256 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E25A 0646 0300                  		addi.w	#$300,d6
0000E25E                            
0000E25E                            loc_D9DE:
0000E25E BC68 FFFA                  		cmp.w	-6(a0),d6
0000E262 6E00                       		bgt.s	loc_D9F0
0000E264 4A28 FFFE                  		tst.b	-2(a0)
0000E268 6A00                       		bpl.s	loc_D9EC
0000E26A 5312                       		subq.b	#1,(a2)
0000E26C                            
0000E26C                            loc_D9EC:
0000E26C 5D48                       		subq.w	#6,a0
0000E26E 60EE                       		bra.s	loc_D9DE
0000E270                            ; ===========================================================================
0000E270                            
0000E270                            loc_D9F0:
0000E270 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E274 4E75                       		rts	
0000E276                            ; ===========================================================================
0000E276                            
0000E276                            loc_D9F6:
0000E276 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E27A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E27E 0646 0280                  		addi.w	#$280,d6
0000E282                            
0000E282                            loc_DA02:
0000E282 BC50                       		cmp.w	(a0),d6
0000E284 6300                       		bls.s	loc_DA16
0000E286 4A28 0004                  		tst.b	4(a0)
0000E28A 6A00                       		bpl.s	loc_DA10
0000E28C 1412                       		move.b	(a2),d2
0000E28E 5212                       		addq.b	#1,(a2)
0000E290                            
0000E290                            loc_DA10:
0000E290 6100 0000                  		bsr.w	loc_DA3C
0000E294 67EC                       		beq.s	loc_DA02
0000E296                            
0000E296                            loc_DA16:
0000E296 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E29A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E29E 0446 0300                  		subi.w	#$300,d6
0000E2A2 6500                       		bcs.s	loc_DA36
0000E2A4                            
0000E2A4                            loc_DA24:
0000E2A4 BC50                       		cmp.w	(a0),d6
0000E2A6 6300                       		bls.s	loc_DA36
0000E2A8 4A28 0004                  		tst.b	4(a0)
0000E2AC 6A00                       		bpl.s	loc_DA32
0000E2AE 522A 0001                  		addq.b	#1,1(a2)
0000E2B2                            
0000E2B2                            loc_DA32:
0000E2B2 5C48                       		addq.w	#6,a0
0000E2B4 60EE                       		bra.s	loc_DA24
0000E2B6                            ; ===========================================================================
0000E2B6                            
0000E2B6                            loc_DA36:
0000E2B6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E2BA                            
0000E2BA                            locret_DA3A:
0000E2BA 4E75                       		rts	
0000E2BC                            ; ===========================================================================
0000E2BC                            
0000E2BC                            loc_DA3C:
0000E2BC 4A28 0004                  		tst.b	4(a0)
0000E2C0 6A00                       		bpl.s	OPL_MakeItem
0000E2C2 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E2C8 6700                       		beq.s	OPL_MakeItem
0000E2CA 5C48                       		addq.w	#6,a0
0000E2CC 7000                       		moveq	#0,d0
0000E2CE 4E75                       		rts	
0000E2D0                            ; ===========================================================================
0000E2D0                            
0000E2D0                            OPL_MakeItem:
0000E2D0 6100 0000                  		bsr.w	SingleObjLoad
0000E2D4 6600                       		bne.s	locret_DA8A
0000E2D6 3358 0008                  		move.w	(a0)+,8(a1)
0000E2DA 3018                       		move.w	(a0)+,d0
0000E2DC 3200                       		move.w	d0,d1
0000E2DE 0240 0FFF                  		andi.w	#$FFF,d0
0000E2E2 3340 000C                  		move.w	d0,$C(a1)
0000E2E6 E559                       		rol.w	#2,d1
0000E2E8 0201 0003                  		andi.b	#3,d1
0000E2EC 1341 0001                  		move.b	d1,1(a1)
0000E2F0 1341 0022                  		move.b	d1,$22(a1)
0000E2F4 1018                       		move.b	(a0)+,d0
0000E2F6 6A00                       		bpl.s	loc_DA80
0000E2F8 0200 007F                  		andi.b	#$7F,d0
0000E2FC 1342 0023                  		move.b	d2,$23(a1)
0000E300                            
0000E300                            loc_DA80:
0000E300 1280                       		move.b	d0,0(a1)
0000E302 1358 0028                  		move.b	(a0)+,$28(a1)
0000E306 7000                       		moveq	#0,d0
0000E308                            
0000E308                            locret_DA8A:
0000E308 4E75                       		rts	
0000E30A                            ; ---------------------------------------------------------------------------
0000E30A                            ; Single object	loading	subroutine
0000E30A                            ; ---------------------------------------------------------------------------
0000E30A                            
0000E30A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E30A                            
0000E30A                            
0000E30A                            SingleObjLoad:
0000E30A 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E30E 303C 005F                  		move.w	#$5F,d0
0000E312                            
0000E312                            loc_DA94:
0000E312 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E314 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E316 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E31A 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E31E                            
0000E31E                            locret_DAA0:
0000E31E 4E75                       		rts	
0000E320                            ; End of function SingleObjLoad
0000E320                            
0000E320                            
0000E320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E320                            
0000E320                            
0000E320                            SingleObjLoad2:
0000E320 2248                       		movea.l	a0,a1
0000E322 303C F000                  		move.w	#-$1000,d0
0000E326 9048                       		sub.w	a0,d0
0000E328 EC48                       		lsr.w	#6,d0
0000E32A 5340                       		subq.w	#1,d0
0000E32C 6500                       		bcs.s	locret_DABC
0000E32E                            
0000E32E                            loc_DAB0:
0000E32E 4A11                       		tst.b	(a1)
0000E330 6700                       		beq.s	locret_DABC
0000E332 43E9 0040                  		lea	$40(a1),a1
0000E336 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E33A                            
0000E33A                            locret_DABC:
0000E33A 4E75                       		rts	
0000E33C                            ; End of function SingleObjLoad2
0000E33C                            
0000E33C                            ; ===========================================================================
0000E33C                            ; ---------------------------------------------------------------------------
0000E33C                            ; Object 41 - springs
0000E33C                            ; ---------------------------------------------------------------------------
0000E33C                            
0000E33C                            Obj41:					; XREF: Obj_Index
0000E33C 7000                       		moveq	#0,d0
0000E33E 1028 0024                  		move.b	$24(a0),d0
0000E342 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E346 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E34A 6100 FB38                  		bsr.w	DisplaySprite
0000E34E 3028 0008                  		move.w	8(a0),d0
0000E352 0240 FF80                  		andi.w	#$FF80,d0
0000E356 3238 F700                  		move.w	($FFFFF700).w,d1
0000E35A 0441 0080                  		subi.w	#$80,d1
0000E35E 0241 FF80                  		andi.w	#$FF80,d1
0000E362 9041                       		sub.w	d1,d0
0000E364 0C40 0280                  		cmpi.w	#$280,d0
0000E368 6200 FB56                  		bhi.w	DeleteObject
0000E36C 4E75                       		rts	
0000E36E                            ; ===========================================================================
0000E36E 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E370 0000                       		dc.w Obj41_Up-Obj41_Index
0000E372 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E374 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E376 0000                       		dc.w Obj41_LR-Obj41_Index
0000E378 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E37A 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E37C 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E37E 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E380 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E382                            
0000E382 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E384 F600                       		dc.w -$A00		; power	of yellow spring
0000E386                            ; ===========================================================================
0000E386                            
0000E386                            Obj41_Main:				; XREF: Obj41_Index
0000E386 5428 0024                  		addq.b	#2,$24(a0)
0000E38A 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E392 317C 0523 0002             		move.w	#$523,2(a0)
0000E398 0028 0004 0001             		ori.b	#4,1(a0)
0000E39E 117C 0010 0019             		move.b	#$10,$19(a0)
0000E3A4 117C 0004 0018             		move.b	#4,$18(a0)
0000E3AA 1028 0028                  		move.b	$28(a0),d0
0000E3AE 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E3B2 6700                       		beq.s	loc_DB54	; if not, branch
0000E3B4 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E3BA 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3C0 117C 0003 001A             		move.b	#3,$1A(a0)
0000E3C6 317C 0533 0002             		move.w	#$533,2(a0)
0000E3CC 117C 0008 0019             		move.b	#8,$19(a0)
0000E3D2                            
0000E3D2                            loc_DB54:
0000E3D2 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E3D6 6700                       		beq.s	loc_DB66	; if not, branch
0000E3D8 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E3DE 08E8 0001 0022             		bset	#1,$22(a0)
0000E3E4                            
0000E3E4                            loc_DB66:
0000E3E4 0800 0001                  		btst	#1,d0
0000E3E8 6700                       		beq.s	loc_DB72
0000E3EA 08E8 0005 0002             		bset	#5,2(a0)
0000E3F0                            
0000E3F0                            loc_DB72:
0000E3F0 0240 000F                  		andi.w	#$F,d0
0000E3F4 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E3FA 4E75                       		rts	
0000E3FC                            ; ===========================================================================
0000E3FC                            
0000E3FC                            Obj41_Up:				; XREF: Obj41_Index
0000E3FC 323C 001B                  		move.w	#$1B,d1
0000E400 343C 0008                  		move.w	#8,d2
0000E404 363C 0010                  		move.w	#$10,d3
0000E408 3828 0008                  		move.w	8(a0),d4
0000E40C 6100 0000                  		bsr.w	SolidObject
0000E410 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E414 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E416 4E75                       		rts	
0000E418                            ; ===========================================================================
0000E418                            
0000E418                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E418 5428 0024                  		addq.b	#2,$24(a0)
0000E41C 5069 000C                  		addq.w	#8,$C(a1)
0000E420 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E426 08E9 0001 0022             		bset	#1,$22(a1)
0000E42C 08A9 0003 0022             		bclr	#3,$22(a1)
0000E432 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E438 137C 0002 0024             		move.b	#2,$24(a1)
0000E43E 08A8 0003 0022             		bclr	#3,$22(a0)
0000E444 4228 0025                  		clr.b	$25(a0)
0000E448 303C 00CC                  		move.w	#$CC,d0
0000E44C 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play spring sound
0000E452                            
0000E452                            Obj41_AniUp:				; XREF: Obj41_Index
0000E452 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E458 6000 CA78                  		bra.w	AnimateSprite
0000E45C                            ; ===========================================================================
0000E45C                            
0000E45C                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E45C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E462 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E466 4E75                       		rts	
0000E468                            ; ===========================================================================
0000E468                            
0000E468                            Obj41_LR:				; XREF: Obj41_Index
0000E468 323C 0013                  		move.w	#$13,d1
0000E46C 343C 000E                  		move.w	#$E,d2
0000E470 363C 000F                  		move.w	#$F,d3
0000E474 3828 0008                  		move.w	8(a0),d4
0000E478 6100 0000                  		bsr.w	SolidObject
0000E47C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E482 6600                       		bne.s	loc_DC0C
0000E484 117C 0008 0024             		move.b	#8,$24(a0)
0000E48A                            
0000E48A                            loc_DC0C:
0000E48A 0828 0005 0022             		btst	#5,$22(a0)
0000E490 6600                       		bne.s	Obj41_BounceLR
0000E492 4E75                       		rts	
0000E494                            ; ===========================================================================
0000E494                            
0000E494                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E494 5428 0024                  		addq.b	#2,$24(a0)
0000E498 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E49E 5069 0008                  		addq.w	#8,8(a1)
0000E4A2 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E4A8 6600                       		bne.s	loc_DC36	; if yes, branch
0000E4AA 0469 0010 0008             		subi.w	#$10,8(a1)
0000E4B0 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E4B4                            
0000E4B4                            loc_DC36:
0000E4B4 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E4BA 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E4C0 0869 0000 0022             		bchg	#0,$22(a1)
0000E4C6 0829 0002 0022             		btst	#2,$22(a1)
0000E4CC 6600                       		bne.s	loc_DC56
0000E4CE 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E4D4                            
0000E4D4                            loc_DC56:
0000E4D4 08A8 0005 0022             		bclr	#5,$22(a0)
0000E4DA 08A9 0005 0022             		bclr	#5,$22(a1)
0000E4E0 303C 00CC                  		move.w	#$CC,d0
0000E4E4 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play spring sound
0000E4EA                            
0000E4EA                            Obj41_AniLR:				; XREF: Obj41_Index
0000E4EA 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E4F0 6000 C9E0                  		bra.w	AnimateSprite
0000E4F4                            ; ===========================================================================
0000E4F4                            
0000E4F4                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E4F4 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E4FA 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E4FE 4E75                       		rts	
0000E500                            ; ===========================================================================
0000E500                            
0000E500                            Obj41_Dwn:				; XREF: Obj41_Index
0000E500 323C 001B                  		move.w	#$1B,d1
0000E504 343C 0008                  		move.w	#8,d2
0000E508 363C 0010                  		move.w	#$10,d3
0000E50C 3828 0008                  		move.w	8(a0),d4
0000E510 6100 0000                  		bsr.w	SolidObject
0000E514 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E51A 6600                       		bne.s	loc_DCA4
0000E51C 117C 000E 0024             		move.b	#$E,$24(a0)
0000E522                            
0000E522                            loc_DCA4:
0000E522 4A28 0025                  		tst.b	$25(a0)
0000E526 6600                       		bne.s	locret_DCAE
0000E528 4A44                       		tst.w	d4
0000E52A 6B00                       		bmi.s	Obj41_BounceDwn
0000E52C                            
0000E52C                            locret_DCAE:
0000E52C 4E75                       		rts	
0000E52E                            ; ===========================================================================
0000E52E                            
0000E52E                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E52E 5428 0024                  		addq.b	#2,$24(a0)
0000E532 5169 000C                  		subq.w	#8,$C(a1)
0000E536 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E53C 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E540 08E9 0001 0022             		bset	#1,$22(a1)
0000E546 08A9 0003 0022             		bclr	#3,$22(a1)
0000E54C 137C 0002 0024             		move.b	#2,$24(a1)
0000E552 08A8 0003 0022             		bclr	#3,$22(a0)
0000E558 4228 0025                  		clr.b	$25(a0)
0000E55C 303C 00CC                  		move.w	#$CC,d0
0000E560 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play spring sound
0000E566                            
0000E566                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E566 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E56C 6000 C964                  		bra.w	AnimateSprite
0000E570                            ; ===========================================================================
0000E570                            
0000E570                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E570 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E576 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E57A 4E75                       		rts	
0000E57C                            ; ===========================================================================
0000E57C                            Ani_obj41:
0000E57C                            	include "_anim\obj41.asm"
0000E57C                            ; ---------------------------------------------------------------------------
0000E57C                            ; Animation script - springs
0000E57C                            ; ---------------------------------------------------------------------------
0000E57C 0000                       		dc.w byte_DD02-Ani_obj41
0000E57E 0000                       		dc.w byte_DD0E-Ani_obj41
0000E580 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E58C 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E598                            		even
0000E598                            		even
0000E598                            
0000E598                            ; ---------------------------------------------------------------------------
0000E598                            ; Sprite mappings - springs
0000E598                            ; ---------------------------------------------------------------------------
0000E598                            Map_obj41:
0000E598                            	include "_maps\obj41.asm"
0000E598                            ; ---------------------------------------------------------------------------
0000E598                            ; Sprite mappings - springs
0000E598                            ; ---------------------------------------------------------------------------
0000E598 0000                       		dc.w byte_DD26-Map_obj41
0000E59A 0000                       		dc.w byte_DD31-Map_obj41
0000E59C 0000                       		dc.w byte_DD37-Map_obj41
0000E59E 0000                       		dc.w byte_DD47-Map_obj41
0000E5A0 0000                       		dc.w byte_DD4D-Map_obj41
0000E5A2 0000                       		dc.w byte_DD53-Map_obj41
0000E5A4 02                         byte_DD26:	dc.b 2
0000E5A5 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E5AA 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E5AF 01                         byte_DD31:	dc.b 1
0000E5B0 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E5B5 03                         byte_DD37:	dc.b 3
0000E5B6 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E5BB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E5C0 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E5C5 01                         byte_DD47:	dc.b 1
0000E5C6 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E5CB 01                         byte_DD4D:	dc.b 1
0000E5CC F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E5D1 04                         byte_DD53:	dc.b 4
0000E5D2 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E5D7 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E5DC F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E5E1 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E5E6                            		even
0000E5E6                            		even
0000E5E6                            
0000E5E6                            ; ===========================================================================
0000E5E6                            ; ---------------------------------------------------------------------------
0000E5E6                            ; Object 42 - Newtron enemy (GHZ)
0000E5E6                            ; ---------------------------------------------------------------------------
0000E5E6                            
0000E5E6                            Obj42:					; XREF: Obj_Index
0000E5E6 7000                       		moveq	#0,d0
0000E5E8 1028 0024                  		move.b	$24(a0),d0
0000E5EC 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E5F0 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E5F4                            ; ===========================================================================
0000E5F4 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E5F6 0000                       		dc.w Obj42_Action-Obj42_Index
0000E5F8 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E5FA                            ; ===========================================================================
0000E5FA                            
0000E5FA                            Obj42_Main:				; XREF: Obj42_Index
0000E5FA 5428 0024                  		addq.b	#2,$24(a0)
0000E5FE 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E606 317C 049B 0002             		move.w	#$49B,2(a0)
0000E60C 117C 0004 0001             		move.b	#4,1(a0)
0000E612 117C 0004 0018             		move.b	#4,$18(a0)
0000E618 117C 0014 0019             		move.b	#$14,$19(a0)
0000E61E 117C 0010 0016             		move.b	#$10,$16(a0)
0000E624 117C 0008 0017             		move.b	#8,$17(a0)
0000E62A                            
0000E62A                            Obj42_Action:				; XREF: Obj42_Index
0000E62A 7000                       		moveq	#0,d0
0000E62C 1028 0025                  		move.b	$25(a0),d0
0000E630 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E634 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E638 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E63E 6100 C892                  		bsr.w	AnimateSprite
0000E642 6000 0000                  		bra.w	MarkObjGone
0000E646                            ; ===========================================================================
0000E646 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E648 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E64A 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E64C 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E64E 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E650                            ; ===========================================================================
0000E650                            
0000E650                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E650 08E8 0000 0022             		bset	#0,$22(a0)
0000E656 3038 D008                  		move.w	($FFFFD008).w,d0
0000E65A 9068 0008                  		sub.w	8(a0),d0
0000E65E 6400                       		bcc.s	loc_DDEA
0000E660 4440                       		neg.w	d0
0000E662 08A8 0000 0022             		bclr	#0,$22(a0)
0000E668                            
0000E668                            loc_DDEA:
0000E668 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E66C 6400                       		bcc.s	locret_DE12	; if not, branch
0000E66E 5428 0025                  		addq.b	#2,$25(a0)
0000E672 117C 0001 001C             		move.b	#1,$1C(a0)
0000E678 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E67C 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E67E 317C 249B 0002             		move.w	#$249B,2(a0)
0000E684 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E68A 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E690                            
0000E690                            locret_DE12:
0000E690 4E75                       		rts	
0000E692                            ; ===========================================================================
0000E692                            
0000E692                            Obj42_Type00:				; XREF: Obj42_Index2
0000E692 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E698 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E69A 08E8 0000 0022             		bset	#0,$22(a0)
0000E6A0 3038 D008                  		move.w	($FFFFD008).w,d0
0000E6A4 9068 0008                  		sub.w	8(a0),d0
0000E6A8 6400                       		bcc.s	locret_DE32
0000E6AA 08A8 0000 0022             		bclr	#0,$22(a0)
0000E6B0                            
0000E6B0                            locret_DE32:
0000E6B0 4E75                       		rts	
0000E6B2                            ; ===========================================================================
0000E6B2                            
0000E6B2                            Obj42_Fall:				; XREF: Obj42_Type00
0000E6B2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E6B8 6600                       		bne.s	loc_DE42
0000E6BA 117C 000C 0020             		move.b	#$C,$20(a0)
0000E6C0                            
0000E6C0                            loc_DE42:
0000E6C0 6100 F72A                  		bsr.w	ObjectFall
0000E6C4 6100 0000                  		bsr.w	ObjHitFloor
0000E6C8 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E6CA 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E6CC D368 000C                  		add.w	d1,$C(a0)
0000E6D0 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E6D6 5428 0025                  		addq.b	#2,$25(a0)
0000E6DA 117C 0002 001C             		move.b	#2,$1C(a0)
0000E6E0 0828 0005 0002             		btst	#5,2(a0)
0000E6E6 6700                       		beq.s	Obj42_Move
0000E6E8 5228 001C                  		addq.b	#1,$1C(a0)
0000E6EC                            
0000E6EC                            Obj42_Move:
0000E6EC 117C 000D 0020             		move.b	#$D,$20(a0)
0000E6F2 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E6F8 0828 0000 0022             		btst	#0,$22(a0)
0000E6FE 6600                       		bne.s	locret_DE86
0000E700 4468 0010                  		neg.w	$10(a0)
0000E704                            
0000E704                            locret_DE86:
0000E704 4E75                       		rts	
0000E706                            ; ===========================================================================
0000E706                            
0000E706                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E706 6100 F756                  		bsr.w	SpeedToPos
0000E70A 6100 0000                  		bsr.w	ObjHitFloor
0000E70E 0C41 FFF8                  		cmpi.w	#-8,d1
0000E712 6D00                       		blt.s	loc_DEA2
0000E714 0C41 000C                  		cmpi.w	#$C,d1
0000E718 6C00                       		bge.s	loc_DEA2
0000E71A D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E71E 4E75                       		rts	
0000E720                            ; ===========================================================================
0000E720                            
0000E720                            loc_DEA2:
0000E720 5428 0025                  		addq.b	#2,$25(a0)
0000E724 4E75                       		rts	
0000E726                            ; ===========================================================================
0000E726                            
0000E726                            Obj42_Speed:				; XREF: Obj42_Index2
0000E726 6100 F736                  		bsr.w	SpeedToPos
0000E72A 4E75                       		rts	
0000E72C                            ; ===========================================================================
0000E72C                            
0000E72C                            Obj42_Type01:				; XREF: Obj42_Index2
0000E72C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E732 6600                       		bne.s	Obj42_FireMissile
0000E734 117C 000C 0020             		move.b	#$C,$20(a0)
0000E73A                            
0000E73A                            Obj42_FireMissile:
0000E73A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E740 6600                       		bne.s	locret_DF14
0000E742 4A28 0032                  		tst.b	$32(a0)
0000E746 6600                       		bne.s	locret_DF14
0000E748 117C 0001 0032             		move.b	#1,$32(a0)
0000E74E 6100 FBBA                  		bsr.w	SingleObjLoad
0000E752 6600                       		bne.s	locret_DF14
0000E754 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E758 3368 0008 0008             		move.w	8(a0),8(a1)
0000E75E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E764 5169 000C                  		subq.w	#8,$C(a1)
0000E768 337C 0200 0010             		move.w	#$200,$10(a1)
0000E76E 303C 0014                  		move.w	#$14,d0
0000E772 0828 0000 0022             		btst	#0,$22(a0)
0000E778 6600                       		bne.s	loc_DF04
0000E77A 4440                       		neg.w	d0
0000E77C 4469 0010                  		neg.w	$10(a1)
0000E780                            
0000E780                            loc_DF04:
0000E780 D169 0008                  		add.w	d0,8(a1)
0000E784 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E78A 137C 0001 0028             		move.b	#1,$28(a1)
0000E790                            
0000E790                            locret_DF14:
0000E790 4E75                       		rts	
0000E792                            ; ===========================================================================
0000E792                            
0000E792                            Obj42_Delete:				; XREF: Obj42_Index
0000E792 6000 F72C                  		bra.w	DeleteObject
0000E796                            ; ===========================================================================
0000E796                            Ani_obj42:
0000E796                            	include "_anim\obj42.asm"
0000E796                            ; ---------------------------------------------------------------------------
0000E796                            ; Animation script - Newtron enemy
0000E796                            ; ---------------------------------------------------------------------------
0000E796 0000                       		dc.w byte_DF24-Ani_obj42
0000E798 0000                       		dc.w byte_DF28-Ani_obj42
0000E79A 0000                       		dc.w byte_DF30-Ani_obj42
0000E79C 0000                       		dc.w byte_DF34-Ani_obj42
0000E79E 0000                       		dc.w byte_DF38-Ani_obj42
0000E7A0 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E7A4 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E7AC 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E7B0 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E7B4 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E7BE                            		even
0000E7BE                            		even
0000E7BE                            
0000E7BE                            ; ---------------------------------------------------------------------------
0000E7BE                            ; Sprite mappings - Newtron enemy (GHZ)
0000E7BE                            ; ---------------------------------------------------------------------------
0000E7BE                            Map_obj42:
0000E7BE                            	include "_maps\obj42.asm"
0000E7BE                            ; ---------------------------------------------------------------------------
0000E7BE                            ; Sprite mappings - Newtron enemy (GHZ)
0000E7BE                            ; ---------------------------------------------------------------------------
0000E7BE 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E7C2 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E7C6 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E7CA 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E7CE 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E7D2 0000                       		dc.w byte_DFF8-Map_obj42
0000E7D4 03                         byte_DF58:	dc.b 3
0000E7D5 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E7DA F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E7DF FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E7E4 03                         byte_DF68:	dc.b 3
0000E7E5 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E7EA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E7EF FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E7F4 03                         byte_DF78:	dc.b 3
0000E7F5 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E7FA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E7FF FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E804 04                         byte_DF88:	dc.b 4
0000E805 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E80A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E80F FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E814 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E819 03                         byte_DF9D:	dc.b 3
0000E81A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E81F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E824 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E829 02                         byte_DFAD:	dc.b 2
0000E82A F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E82F F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E834 03                         byte_DFB8:	dc.b 3
0000E835 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E83A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E83F FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E844 03                         byte_DFC8:	dc.b 3
0000E845 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E84A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E84F FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E854 03                         byte_DFD8:	dc.b 3
0000E855 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E85A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E85F FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E864 03                         byte_DFE8:	dc.b 3
0000E865 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E86A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E86F FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E874 00                         byte_DFF8:	dc.b 0
0000E876 00                         		even
0000E876 00                         		even
0000E876                            
0000E876                            ; ===========================================================================
0000E876                            ; ---------------------------------------------------------------------------
0000E876                            ; Object 43 - Roller enemy (SYZ)
0000E876                            ; ---------------------------------------------------------------------------
0000E876                            
0000E876                            Obj43:					; XREF: Obj_Index
0000E876 7000                       		moveq	#0,d0
0000E878 1028 0024                  		move.b	$24(a0),d0
0000E87C 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E880 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E884                            ; ===========================================================================
0000E884 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E886 0000                       		dc.w Obj43_Action-Obj43_Index
0000E888                            ; ===========================================================================
0000E888                            
0000E888                            Obj43_Main:				; XREF: Obj43_Index
0000E888 117C 000E 0016             		move.b	#$E,$16(a0)
0000E88E 117C 0008 0017             		move.b	#8,$17(a0)
0000E894 6100 F556                  		bsr.w	ObjectFall
0000E898 6100 0000                  		bsr.w	ObjHitFloor
0000E89C 4A41                       		tst.w	d1
0000E89E 6A00                       		bpl.s	locret_E052
0000E8A0 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E8A4 317C 0000 0012             		move.w	#0,$12(a0)
0000E8AA 5428 0024                  		addq.b	#2,$24(a0)
0000E8AE 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E8B6 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E8BC 117C 0004 0001             		move.b	#4,1(a0)
0000E8C2 117C 0004 0018             		move.b	#4,$18(a0)
0000E8C8 117C 0010 0019             		move.b	#$10,$19(a0)
0000E8CE                            
0000E8CE                            locret_E052:
0000E8CE 4E75                       		rts	
0000E8D0                            ; ===========================================================================
0000E8D0                            
0000E8D0                            Obj43_Action:				; XREF: Obj43_Index
0000E8D0 7000                       		moveq	#0,d0
0000E8D2 1028 0025                  		move.b	$25(a0),d0
0000E8D6 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E8DA 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E8DE 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E8E4 6100 C5EC                  		bsr.w	AnimateSprite
0000E8E8 3028 0008                  		move.w	8(a0),d0
0000E8EC 0240 FF80                  		andi.w	#$FF80,d0
0000E8F0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E8F4 0441 0080                  		subi.w	#$80,d1
0000E8F8 0241 FF80                  		andi.w	#$FF80,d1
0000E8FC 9041                       		sub.w	d1,d0
0000E8FE 0C40 0280                  		cmpi.w	#$280,d0
0000E902 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E906 6000 F57C                  		bra.w	DisplaySprite
0000E90A                            ; ===========================================================================
0000E90A                            
0000E90A                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E90A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E90E 7000                       		moveq	#0,d0
0000E910 1028 0023                  		move.b	$23(a0),d0
0000E914 6700                       		beq.s	Obj43_Delete
0000E916 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E91C                            
0000E91C                            Obj43_Delete:
0000E91C 6000 F5A2                  		bra.w	DeleteObject
0000E920                            ; ===========================================================================
0000E920 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E922 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E924 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E926 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E928                            ; ===========================================================================
0000E928                            
0000E928                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E928 3038 D008                  		move.w	($FFFFD008).w,d0
0000E92C 0440 0100                  		subi.w	#$100,d0
0000E930 6500                       		bcs.s	loc_E0D2
0000E932 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E936 6500                       		bcs.s	loc_E0D2
0000E938 5828 0025                  		addq.b	#4,$25(a0)
0000E93C 117C 0002 001C             		move.b	#2,$1C(a0)
0000E942 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E948 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E94E                            
0000E94E                            loc_E0D2:
0000E94E 588F                       		addq.l	#4,sp
0000E950 4E75                       		rts	
0000E952                            ; ===========================================================================
0000E952                            
0000E952                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E952 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E958 6700                       		beq.s	loc_E0F8
0000E95A 5368 0030                  		subq.w	#1,$30(a0)
0000E95E 6A00                       		bpl.s	locret_E0F6
0000E960 117C 0001 001C             		move.b	#1,$1C(a0)
0000E966 317C 0700 0010             		move.w	#$700,$10(a0)
0000E96C 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E972                            
0000E972                            locret_E0F6:
0000E972 4E75                       		rts	
0000E974                            ; ===========================================================================
0000E974                            
0000E974                            loc_E0F8:
0000E974 5428 0025                  		addq.b	#2,$25(a0)
0000E978 4E75                       		rts	
0000E97A                            ; ===========================================================================
0000E97A                            
0000E97A                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E97A 6100 0000                  		bsr.w	Obj43_Stop
0000E97E 6100 F4DE                  		bsr.w	SpeedToPos
0000E982 6100 0000                  		bsr.w	ObjHitFloor
0000E986 0C41 FFF8                  		cmpi.w	#-8,d1
0000E98A 6D00                       		blt.s	Obj43_Jump
0000E98C 0C41 000C                  		cmpi.w	#$C,d1
0000E990 6C00                       		bge.s	Obj43_Jump
0000E992 D368 000C                  		add.w	d1,$C(a0)
0000E996 4E75                       		rts	
0000E998                            ; ===========================================================================
0000E998                            
0000E998                            Obj43_Jump:
0000E998 5428 0025                  		addq.b	#2,$25(a0)
0000E99C 08E8 0000 0032             		bset	#0,$32(a0)
0000E9A2 6700                       		beq.s	locret_E12E
0000E9A4 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E9AA                            
0000E9AA                            locret_E12E:
0000E9AA 4E75                       		rts	
0000E9AC                            ; ===========================================================================
0000E9AC                            
0000E9AC                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E9AC 6100 F43E                  		bsr.w	ObjectFall
0000E9B0 4A68 0012                  		tst.w	$12(a0)
0000E9B4 6B00                       		bmi.s	locret_E150
0000E9B6 6100 0000                  		bsr.w	ObjHitFloor
0000E9BA 4A41                       		tst.w	d1
0000E9BC 6A00                       		bpl.s	locret_E150
0000E9BE D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E9C2 5528 0025                  		subq.b	#2,$25(a0)
0000E9C6 317C 0000 0012             		move.w	#0,$12(a0)
0000E9CC                            
0000E9CC                            locret_E150:
0000E9CC 4E75                       		rts	
0000E9CE                            
0000E9CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9CE                            
0000E9CE                            
0000E9CE                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E9CE 4A28 0032                  		tst.b	$32(a0)
0000E9D2 6B00                       		bmi.s	locret_E188
0000E9D4 3038 D008                  		move.w	($FFFFD008).w,d0
0000E9D8 0440 0030                  		subi.w	#$30,d0
0000E9DC 9068 0008                  		sub.w	8(a0),d0
0000E9E0 6400                       		bcc.s	locret_E188
0000E9E2 117C 0000 001C             		move.b	#0,$1C(a0)
0000E9E8 117C 000E 0020             		move.b	#$E,$20(a0)
0000E9EE 4268 0010                  		clr.w	$10(a0)
0000E9F2 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E9F8 117C 0002 0025             		move.b	#2,$25(a0)
0000E9FE 08E8 0007 0032             		bset	#7,$32(a0)
0000EA04                            
0000EA04                            locret_E188:
0000EA04 4E75                       		rts	
0000EA06                            ; End of function Obj43_Stop
0000EA06                            
0000EA06                            ; ===========================================================================
0000EA06                            Ani_obj43:
0000EA06                            	include "_anim\obj43.asm"
0000EA06                            ; ---------------------------------------------------------------------------
0000EA06                            ; Animation script - Roller enemy
0000EA06                            ; ---------------------------------------------------------------------------
0000EA06 0000                       		dc.w byte_E190-Ani_obj43
0000EA08 0000                       		dc.w byte_E196-Ani_obj43
0000EA0A 0000                       		dc.w byte_E19C-Ani_obj43
0000EA0C 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EA12 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EA18 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EA1E 00                         		even
0000EA1E 00                         		even
0000EA1E                            
0000EA1E                            ; ---------------------------------------------------------------------------
0000EA1E                            ; Sprite mappings - Roller enemy (SYZ)
0000EA1E                            ; ---------------------------------------------------------------------------
0000EA1E                            Map_obj43:
0000EA1E                            	include "_maps\obj43.asm"
0000EA1E                            Map_61da:
0000EA1E 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EA20 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EA22 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EA24 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EA26 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EA28 02                         Map_61da_A: 	dc.b $2
0000EA29 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EA2E F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EA33 02                         Map_61da_15: 	dc.b $2
0000EA34 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EA39 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EA3E 01                         Map_61da_20: 	dc.b $1
0000EA3F F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EA44 01                         Map_61da_26: 	dc.b $1
0000EA45 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EA4A 01                         Map_61da_2C: 	dc.b $1
0000EA4B F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EA50                            	even
0000EA50                            	even
0000EA50                            
0000EA50                            ; ===========================================================================
0000EA50                            ; ---------------------------------------------------------------------------
0000EA50                            ; Object 44 - walls (GHZ)
0000EA50                            ; ---------------------------------------------------------------------------
0000EA50                            
0000EA50                            Obj44:					; XREF: Obj_Index
0000EA50 7000                       		moveq	#0,d0
0000EA52 1028 0024                  		move.b	$24(a0),d0
0000EA56 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EA5A 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EA5E                            ; ===========================================================================
0000EA5E 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EA60 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EA62 0000                       		dc.w Obj44_Display-Obj44_Index
0000EA64                            ; ===========================================================================
0000EA64                            
0000EA64                            Obj44_Main:				; XREF: Obj44_Index
0000EA64 5428 0024                  		addq.b	#2,$24(a0)
0000EA68 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EA70 317C 434C 0002             		move.w	#$434C,2(a0)
0000EA76 0028 0004 0001             		ori.b	#4,1(a0)
0000EA7C 117C 0008 0019             		move.b	#8,$19(a0)
0000EA82 117C 0006 0018             		move.b	#6,$18(a0)
0000EA88 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EA8E 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EA94 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EA96 5428 0024                  		addq.b	#2,$24(a0)
0000EA9A 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EA9C                            ; ===========================================================================
0000EA9C                            
0000EA9C                            Obj44_Solid:				; XREF: Obj44_Index
0000EA9C 323C 0013                  		move.w	#$13,d1
0000EAA0 343C 0028                  		move.w	#$28,d2
0000EAA4 6100 A684                  		bsr.w	Obj44_SolidWall
0000EAA8                            
0000EAA8                            Obj44_Display:				; XREF: Obj44_Index
0000EAA8 6100 F3DA                  		bsr.w	DisplaySprite
0000EAAC 3028 0008                  		move.w	8(a0),d0
0000EAB0 0240 FF80                  		andi.w	#$FF80,d0
0000EAB4 3238 F700                  		move.w	($FFFFF700).w,d1
0000EAB8 0441 0080                  		subi.w	#$80,d1
0000EABC 0241 FF80                  		andi.w	#$FF80,d1
0000EAC0 9041                       		sub.w	d1,d0
0000EAC2 0C40 0280                  		cmpi.w	#$280,d0
0000EAC6 6200 F3F8                  		bhi.w	DeleteObject
0000EACA 4E75                       		rts	
0000EACC                            ; ===========================================================================
0000EACC                            ; ---------------------------------------------------------------------------
0000EACC                            ; Sprite mappings - walls (GHZ)
0000EACC                            ; ---------------------------------------------------------------------------
0000EACC                            Map_obj44:
0000EACC                            	include "_maps\obj44.asm"
0000EACC                            ; ---------------------------------------------------------------------------
0000EACC                            ; Sprite mappings - walls (GHZ)
0000EACC                            ; ---------------------------------------------------------------------------
0000EACC 0000                       		dc.w byte_E256-Map_obj44
0000EACE 0000                       		dc.w byte_E26B-Map_obj44
0000EAD0 0000                       		dc.w byte_E280-Map_obj44
0000EAD2 04                         byte_E256:	dc.b 4
0000EAD3 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EAD8 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EADD 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EAE2 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EAE7 04                         byte_E26B:	dc.b 4
0000EAE8 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EAED F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EAF2 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EAF7 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EAFC 04                         byte_E280:	dc.b 4
0000EAFD E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EB02 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EB07 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EB0C 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EB12 00                         		even
0000EB12 00                         		even
0000EB12                            
0000EB12                            ; ===========================================================================
0000EB12                            ; ---------------------------------------------------------------------------
0000EB12                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EB12                            ; ---------------------------------------------------------------------------
0000EB12                            
0000EB12                            Obj13:					; XREF: Obj_Index
0000EB12 7000                       		moveq	#0,d0
0000EB14 1028 0024                  		move.b	$24(a0),d0
0000EB18 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EB1C 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EB20 6000 0000                  		bra.w	Obj14_ChkDel
0000EB24                            ; ===========================================================================
0000EB24 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EB26 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EB28                            ; ---------------------------------------------------------------------------
0000EB28                            ;
0000EB28                            ; Lava ball production rates
0000EB28                            ;
0000EB28 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EB2E                            ; ===========================================================================
0000EB2E                            
0000EB2E                            Obj13_Main:				; XREF: Obj13_Index
0000EB2E 5428 0024                  		addq.b	#2,$24(a0)
0000EB32 1028 0028                  		move.b	$28(a0),d0
0000EB36 E848                       		lsr.w	#4,d0
0000EB38 0240 000F                  		andi.w	#$F,d0
0000EB3C 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EB42 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EB48 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EB4E                            
0000EB4E                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EB4E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EB52 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EB54 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EB5A 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EB5E 6600                       		bne.s	locret_E302
0000EB60 6100 F7A8                  		bsr.w	SingleObjLoad
0000EB64 6600                       		bne.s	locret_E302
0000EB66 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EB6A 3368 0008 0008             		move.w	8(a0),8(a1)
0000EB70 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EB76 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EB7C                            
0000EB7C                            locret_E302:
0000EB7C 4E75                       		rts	
0000EB7E                            ; ===========================================================================
0000EB7E                            ; ---------------------------------------------------------------------------
0000EB7E                            ; Object 14 - lava balls (MZ, SLZ)
0000EB7E                            ; ---------------------------------------------------------------------------
0000EB7E                            
0000EB7E                            Obj14:					; XREF: Obj_Index
0000EB7E 7000                       		moveq	#0,d0
0000EB80 1028 0024                  		move.b	$24(a0),d0
0000EB84 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EB88 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EB8C 6000 F2F6                  		bra.w	DisplaySprite
0000EB90                            ; ===========================================================================
0000EB90 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EB92 0000                       		dc.w Obj14_Action-Obj14_Index
0000EB94 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EB96                            
0000EB96 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EBA0 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EBA8                            ; ===========================================================================
0000EBA8                            
0000EBA8                            Obj14_Main:				; XREF: Obj14_Index
0000EBA8 5428 0024                  		addq.b	#2,$24(a0)
0000EBAC 117C 0008 0016             		move.b	#8,$16(a0)
0000EBB2 117C 0008 0017             		move.b	#8,$17(a0)
0000EBB8 217C 0000 BAD0 0004        		move.l	#Map_obj14,4(a0)
0000EBC0 317C 0345 0002             		move.w	#$345,2(a0)
0000EBC6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EBCC 6600                       		bne.s	loc_E35A
0000EBCE 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EBD4                            
0000EBD4                            loc_E35A:
0000EBD4 117C 0004 0001             		move.b	#4,1(a0)
0000EBDA 117C 0003 0018             		move.b	#3,$18(a0)
0000EBE0 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EBE6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EBEC 4A28 0029                  		tst.b	$29(a0)
0000EBF0 6700                       		beq.s	Obj14_SetSpeed
0000EBF2 5428 0018                  		addq.b	#2,$18(a0)
0000EBF6                            
0000EBF6                            Obj14_SetSpeed:
0000EBF6 7000                       		moveq	#0,d0
0000EBF8 1028 0028                  		move.b	$28(a0),d0
0000EBFC D040                       		add.w	d0,d0
0000EBFE 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EC04 117C 0008 0019             		move.b	#8,$19(a0)
0000EC0A 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EC10 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EC12 117C 0010 0019             		move.b	#$10,$19(a0)
0000EC18 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EC1E 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EC24 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EC2A                            
0000EC2A                            Obj14_PlaySnd:
0000EC2A 303C 00AE                  		move.w	#$AE,d0
0000EC2E 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EC34                            
0000EC34                            Obj14_Action:				; XREF: Obj14_Index
0000EC34 7000                       		moveq	#0,d0
0000EC36 1028 0028                  		move.b	$28(a0),d0
0000EC3A D040                       		add.w	d0,d0
0000EC3C 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EC40 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EC44 6100 F218                  		bsr.w	SpeedToPos
0000EC48 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EC4E 6100 C282                  		bsr.w	AnimateSprite
0000EC52                            
0000EC52                            Obj14_ChkDel:				; XREF: Obj13
0000EC52 3028 0008                  		move.w	8(a0),d0
0000EC56 0240 FF80                  		andi.w	#$FF80,d0
0000EC5A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC5E 0441 0080                  		subi.w	#$80,d1
0000EC62 0241 FF80                  		andi.w	#$FF80,d1
0000EC66 9041                       		sub.w	d1,d0
0000EC68 0C40 0280                  		cmpi.w	#$280,d0
0000EC6C 6200 F252                  		bhi.w	DeleteObject
0000EC70 4E75                       		rts	
0000EC72                            ; ===========================================================================
0000EC72 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EC76 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EC7A 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EC7E 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EC82 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EC84                            ; ===========================================================================
0000EC84                            ; lavaball types 00-03 fly up and fall back down
0000EC84                            
0000EC84                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EC84 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EC8A 3028 0030                  		move.w	$30(a0),d0
0000EC8E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EC92 6400                       		bcc.s	loc_E41E	; if not, branch
0000EC94 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EC98                            
0000EC98                            loc_E41E:
0000EC98 08A8 0001 0022             		bclr	#1,$22(a0)
0000EC9E 4A68 0012                  		tst.w	$12(a0)
0000ECA2 6A00                       		bpl.s	locret_E430
0000ECA4 08E8 0001 0022             		bset	#1,$22(a0)
0000ECAA                            
0000ECAA                            locret_E430:
0000ECAA 4E75                       		rts	
0000ECAC                            ; ===========================================================================
0000ECAC                            ; lavaball type	04 flies up until it hits the ceiling
0000ECAC                            
0000ECAC                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000ECAC 08E8 0001 0022             		bset	#1,$22(a0)
0000ECB2 6100 0000                  		bsr.w	ObjHitCeiling
0000ECB6 4A41                       		tst.w	d1
0000ECB8 6A00                       		bpl.s	locret_E452
0000ECBA 117C 0008 0028             		move.b	#8,$28(a0)
0000ECC0 117C 0001 001C             		move.b	#1,$1C(a0)
0000ECC6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000ECCC                            
0000ECCC                            locret_E452:
0000ECCC 4E75                       		rts	
0000ECCE                            ; ===========================================================================
0000ECCE                            ; lavaball type	05 falls down until it hits the	floor
0000ECCE                            
0000ECCE                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000ECCE 08A8 0001 0022             		bclr	#1,$22(a0)
0000ECD4 6100 0000                  		bsr.w	ObjHitFloor
0000ECD8 4A41                       		tst.w	d1
0000ECDA 6A00                       		bpl.s	locret_E474
0000ECDC 117C 0008 0028             		move.b	#8,$28(a0)
0000ECE2 117C 0001 001C             		move.b	#1,$1C(a0)
0000ECE8 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000ECEE                            
0000ECEE                            locret_E474:
0000ECEE 4E75                       		rts	
0000ECF0                            ; ===========================================================================
0000ECF0                            ; lavaball types 06-07 move sideways
0000ECF0                            
0000ECF0                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000ECF0 08E8 0000 0022             		bset	#0,$22(a0)
0000ECF6 76F8                       		moveq	#-8,d3
0000ECF8 6100 0000                  		bsr.w	ObjHitWallLeft
0000ECFC 4A41                       		tst.w	d1
0000ECFE 6A00                       		bpl.s	locret_E498
0000ED00 117C 0008 0028             		move.b	#8,$28(a0)
0000ED06 117C 0003 001C             		move.b	#3,$1C(a0)
0000ED0C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ED12                            
0000ED12                            locret_E498:
0000ED12 4E75                       		rts	
0000ED14                            ; ===========================================================================
0000ED14                            
0000ED14                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000ED14 08A8 0000 0022             		bclr	#0,$22(a0)
0000ED1A 7608                       		moveq	#8,d3
0000ED1C 6100 0000                  		bsr.w	ObjHitWallRight
0000ED20 4A41                       		tst.w	d1
0000ED22 6A00                       		bpl.s	locret_E4BC
0000ED24 117C 0008 0028             		move.b	#8,$28(a0)
0000ED2A 117C 0003 001C             		move.b	#3,$1C(a0)
0000ED30 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ED36                            
0000ED36                            locret_E4BC:
0000ED36 4E75                       		rts	
0000ED38                            ; ===========================================================================
0000ED38                            
0000ED38                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000ED38 4E75                       		rts	
0000ED3A                            ; ===========================================================================
0000ED3A                            
0000ED3A                            Obj14_Delete:				; XREF: Obj14_Index
0000ED3A 6000 F184                  		bra.w	DeleteObject
0000ED3E                            ; ===========================================================================
0000ED3E                            Ani_obj14:
0000ED3E                            	include "_anim\obj14.asm"
0000ED3E                            ; ---------------------------------------------------------------------------
0000ED3E                            ; Animation script - lava balls
0000ED3E                            ; ---------------------------------------------------------------------------
0000ED3E 0000                       		dc.w byte_E4CC-Ani_obj14
0000ED40 0000                       		dc.w byte_E4D2-Ani_obj14
0000ED42 0000                       		dc.w byte_E4D6-Ani_obj14
0000ED44 0000                       		dc.w byte_E4DC-Ani_obj14
0000ED46 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000ED4C 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000ED50 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000ED56 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000ED5A                            		even
0000ED5A                            		even
0000ED5A                            
0000ED5A                            ; ===========================================================================
0000ED5A                            ; ---------------------------------------------------------------------------
0000ED5A                            ; Object 6D - flame thrower (SBZ)
0000ED5A                            ; ---------------------------------------------------------------------------
0000ED5A                            
0000ED5A                            Obj6D:					; XREF: Obj_Index
0000ED5A 7000                       		moveq	#0,d0
0000ED5C 1028 0024                  		move.b	$24(a0),d0
0000ED60 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000ED64 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000ED68                            ; ===========================================================================
0000ED68 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000ED6A 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000ED6C                            ; ===========================================================================
0000ED6C                            
0000ED6C                            Obj6D_Main:				; XREF: Obj6D_Index
0000ED6C 5428 0024                  		addq.b	#2,$24(a0)
0000ED70 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000ED78 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000ED7E 0028 0004 0001             		ori.b	#4,1(a0)
0000ED84 117C 0001 0018             		move.b	#1,$18(a0)
0000ED8A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED90 117C 000C 0019             		move.b	#$C,$19(a0)
0000ED96 1028 0028                  		move.b	$28(a0),d0
0000ED9A 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000ED9E D040                       		add.w	d0,d0		; multiply by 2
0000EDA0 3140 0030                  		move.w	d0,$30(a0)
0000EDA4 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EDA8 1028 0028                  		move.b	$28(a0),d0
0000EDAC 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EDB0 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EDB2 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EDB6 117C 000A 0036             		move.b	#$A,$36(a0)
0000EDBC 0828 0001 0022             		btst	#1,$22(a0)
0000EDC2 6700                       		beq.s	Obj6D_Action
0000EDC4 117C 0002 001C             		move.b	#2,$1C(a0)
0000EDCA 117C 0015 0036             		move.b	#$15,$36(a0)
0000EDD0                            
0000EDD0                            Obj6D_Action:				; XREF: Obj6D_Index
0000EDD0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EDD4 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EDD6 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EDDC 0868 0000 001C             		bchg	#0,$1C(a0)
0000EDE2 6700                       		beq.s	loc_E57A
0000EDE4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EDEA 303C 00B3                  		move.w	#$B3,d0
0000EDEE 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play flame sound
0000EDF4                            
0000EDF4                            loc_E57A:
0000EDF4 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EDFA 6100 C0D6                  		bsr.w	AnimateSprite
0000EDFE 117C 0000 0020             		move.b	#0,$20(a0)
0000EE04 1028 0036                  		move.b	$36(a0),d0
0000EE08 B028 001A                  		cmp.b	$1A(a0),d0
0000EE0C 6600                       		bne.s	Obj6D_ChkDel
0000EE0E 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EE14                            
0000EE14                            Obj6D_ChkDel:
0000EE14 3028 0008                  		move.w	8(a0),d0
0000EE18 0240 FF80                  		andi.w	#$FF80,d0
0000EE1C 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE20 0441 0080                  		subi.w	#$80,d1
0000EE24 0241 FF80                  		andi.w	#$FF80,d1
0000EE28 9041                       		sub.w	d1,d0
0000EE2A 0C40 0280                  		cmpi.w	#$280,d0
0000EE2E 6200 F090                  		bhi.w	DeleteObject
0000EE32 6000 F050                  		bra.w	DisplaySprite
0000EE36                            ; ===========================================================================
0000EE36                            Ani_obj6D:
0000EE36                            	include "_anim\obj6D.asm"
0000EE36                            ; ---------------------------------------------------------------------------
0000EE36                            ; Animation script - flamethrower (SBZ)
0000EE36                            ; ---------------------------------------------------------------------------
0000EE36 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EE38 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EE3A 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EE3C 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EE3E 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EE4C 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EE56 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EE64 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EE6E                            		even
0000EE6E                            		even
0000EE6E                            
0000EE6E                            ; ---------------------------------------------------------------------------
0000EE6E                            ; Sprite mappings - flame thrower (SBZ)
0000EE6E                            ; ---------------------------------------------------------------------------
0000EE6E                            Map_obj6D:
0000EE6E                            	include "_maps\obj6D.asm"
0000EE6E                            ; ---------------------------------------------------------------------------
0000EE6E                            ; Sprite mappings - flame thrower (SBZ)
0000EE6E                            ; ---------------------------------------------------------------------------
0000EE6E 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EE72 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EE76 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EE7A 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EE7E 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EE82 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EE86 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EE8A 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EE8E 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EE92 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EE96 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EE9A 01                         byte_E620:	dc.b 1
0000EE9B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEA0 02                         byte_E626:	dc.b 2
0000EEA1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEA6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEAB 02                         byte_E631:	dc.b 2
0000EEAC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEB1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEB6 03                         byte_E63C:	dc.b 3
0000EEB7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEBC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEC1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEC6 03                         byte_E64C:	dc.b 3
0000EEC7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EECC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EED1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EED6 04                         byte_E65C:	dc.b 4
0000EED7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEDC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEE1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEE6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEEB 04                         byte_E671:	dc.b 4
0000EEEC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EEF1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEF6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEFB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF00 05                         byte_E686:	dc.b 5
0000EF01 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EF06 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF0B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF10 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF15 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF1A 05                         byte_E6A0:	dc.b 5
0000EF1B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF20 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF25 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF2A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF2F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF34 06                         byte_E6BA:	dc.b 6
0000EF35 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EF3A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EF3F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF44 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EF49 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF4E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF53 06                         byte_E6D9:	dc.b 6
0000EF54 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EF59 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF5E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EF63 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF68 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF6D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF72 01                         byte_E6F8:	dc.b 1
0000EF73 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF78 02                         byte_E6FE:	dc.b 2
0000EF79 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF7E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF83 02                         byte_E709:	dc.b 2
0000EF84 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF89 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF8E 03                         byte_E714:	dc.b 3
0000EF8F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF94 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF99 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF9E 03                         byte_E724:	dc.b 3
0000EF9F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFA4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFA9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFAE 04                         byte_E734:	dc.b 4
0000EFAF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EFB4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EFB9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFBE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFC3 04                         byte_E749:	dc.b 4
0000EFC4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EFC9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFCE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFD3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFD8 05                         byte_E75E:	dc.b 5
0000EFD9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EFDE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EFE3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EFE8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFED 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFF2 05                         byte_E778:	dc.b 5
0000EFF3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EFF8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EFFD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F002 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F007 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F00C 06                         byte_E792:	dc.b 6
0000F00D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F012 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F017 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F01C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F021 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F026 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F02B 06                         byte_E7B1:	dc.b 6
0000F02C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F031 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F036 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F03B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F040 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F045 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F04A                            		even
0000F04A                            		even
0000F04A                            
0000F04A                            ; ===========================================================================
0000F04A                            ; ---------------------------------------------------------------------------
0000F04A                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F04A                            ; ---------------------------------------------------------------------------
0000F04A                            
0000F04A                            Obj46:					; XREF: Obj_Index
0000F04A 7000                       		moveq	#0,d0
0000F04C 1028 0024                  		move.b	$24(a0),d0
0000F050 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F054 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F058                            ; ===========================================================================
0000F058 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F05A 0000                       		dc.w Obj46_Action-Obj46_Index
0000F05C                            ; ===========================================================================
0000F05C                            
0000F05C                            Obj46_Main:				; XREF: Obj46_Index
0000F05C 5428 0024                  		addq.b	#2,$24(a0)
0000F060 117C 000F 0016             		move.b	#$F,$16(a0)
0000F066 117C 000F 0017             		move.b	#$F,$17(a0)
0000F06C 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F074 317C 4000 0002             		move.w	#$4000,2(a0)
0000F07A 117C 0004 0001             		move.b	#4,1(a0)
0000F080 117C 0003 0018             		move.b	#3,$18(a0)
0000F086 117C 0010 0019             		move.b	#$10,$19(a0)
0000F08C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F092 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F098                            
0000F098                            Obj46_Action:				; XREF: Obj46_Index
0000F098 4A28 0001                  		tst.b	1(a0)
0000F09C 6A00                       		bpl.s	Obj46_ChkDel
0000F09E 7000                       		moveq	#0,d0
0000F0A0 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F0A4 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F0A8 D040                       		add.w	d0,d0
0000F0AA 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F0AE 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F0B2 323C 001B                  		move.w	#$1B,d1
0000F0B6 343C 0010                  		move.w	#$10,d2
0000F0BA 363C 0011                  		move.w	#$11,d3
0000F0BE 3828 0008                  		move.w	8(a0),d4
0000F0C2 6100 0000                  		bsr.w	SolidObject
0000F0C6                            
0000F0C6                            Obj46_ChkDel:
0000F0C6 6100 EDBC                  		bsr.w	DisplaySprite
0000F0CA 3028 0008                  		move.w	8(a0),d0
0000F0CE 0240 FF80                  		andi.w	#$FF80,d0
0000F0D2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0D6 0441 0080                  		subi.w	#$80,d1
0000F0DA 0241 FF80                  		andi.w	#$FF80,d1
0000F0DE 9041                       		sub.w	d1,d0
0000F0E0 0C40 0280                  		cmpi.w	#$280,d0
0000F0E4 6200 EDDA                  		bhi.w	DeleteObject
0000F0E8 4E75                       		rts	
0000F0EA                            ; ===========================================================================
0000F0EA 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F0EC 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F0EE 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F0F0 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F0F2 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F0F4                            ; ===========================================================================
0000F0F4                            
0000F0F4                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F0F4 4E75                       		rts	
0000F0F6                            ; ===========================================================================
0000F0F6                            
0000F0F6                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F0F6 3038 D008                  		move.w	($FFFFD008).w,d0
0000F0FA 9068 0008                  		sub.w	8(a0),d0
0000F0FE 6400                       		bcc.s	loc_E888
0000F100 4440                       		neg.w	d0
0000F102                            
0000F102                            loc_E888:
0000F102 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F106 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F108 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F10E                            
0000F10E                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F10E 7000                       		moveq	#0,d0
0000F110 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F114 0828 0003 0028             		btst	#3,$28(a0)
0000F11A 6700                       		beq.s	loc_E8A8
0000F11C 4440                       		neg.w	d0
0000F11E 0640 0010                  		addi.w	#$10,d0
0000F122                            
0000F122                            loc_E8A8:
0000F122 3228 0030                  		move.w	$30(a0),d1
0000F126 9240                       		sub.w	d0,d1
0000F128 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F12C 4E75                       		rts	
0000F12E                            ; ===========================================================================
0000F12E                            
0000F12E                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F12E 6100 ED2E                  		bsr.w	SpeedToPos
0000F132 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F138 6100 0000                  		bsr.w	ObjHitFloor
0000F13C 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F13E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F142 D368 000C                  		add.w	d1,$C(a0)
0000F146 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F14A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F150 117C 0004 0028             		move.b	#4,$28(a0)
0000F156 3011                       		move.w	(a1),d0
0000F158 0240 03FF                  		andi.w	#$3FF,d0
0000F15C 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F160 6400                       		bcc.s	locret_E8EE
0000F162 117C 0000 0028             		move.b	#0,$28(a0)
0000F168                            
0000F168                            locret_E8EE:
0000F168 4E75                       		rts	
0000F16A                            ; ===========================================================================
0000F16A                            
0000F16A                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F16A 7000                       		moveq	#0,d0
0000F16C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F170 E648                       		lsr.w	#3,d0
0000F172 3228 0030                  		move.w	$30(a0),d1
0000F176 9240                       		sub.w	d0,d1
0000F178 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F17C 4E75                       		rts	
0000F17E                            ; ===========================================================================
0000F17E                            ; ---------------------------------------------------------------------------
0000F17E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F17E                            ; ---------------------------------------------------------------------------
0000F17E                            Map_obj46:
0000F17E                            	include "_maps\obj46.asm"
0000F17E                            ; ---------------------------------------------------------------------------
0000F17E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F17E                            ; ---------------------------------------------------------------------------
0000F17E 0000                       		dc.w byte_E906-Map_obj46
0000F180 01                         byte_E906:	dc.b 1
0000F181 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F186                            		even
0000F186                            		even
0000F186                            
0000F186                            ; ===========================================================================
0000F186                            ; ---------------------------------------------------------------------------
0000F186                            ; Object 12 - lamp (SYZ)
0000F186                            ; ---------------------------------------------------------------------------
0000F186                            
0000F186                            Obj12:					; XREF: Obj_Index
0000F186 7000                       		moveq	#0,d0
0000F188 1028 0024                  		move.b	$24(a0),d0
0000F18C 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F190 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F194                            ; ===========================================================================
0000F194 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F196 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F198                            ; ===========================================================================
0000F198                            
0000F198                            Obj12_Main:				; XREF: Obj12_Index
0000F198 5428 0024                  		addq.b	#2,$24(a0)
0000F19C 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F1A4 317C 0000 0002             		move.w	#0,2(a0)
0000F1AA 117C 0004 0001             		move.b	#4,1(a0)
0000F1B0 117C 0010 0019             		move.b	#$10,$19(a0)
0000F1B6 117C 0006 0018             		move.b	#6,$18(a0)
0000F1BC                            
0000F1BC                            Obj12_Animate:				; XREF: Obj12_Index
0000F1BC 5328 001E                  		subq.b	#1,$1E(a0)
0000F1C0 6A00                       		bpl.s	Obj12_ChkDel
0000F1C2 117C 0007 001E             		move.b	#7,$1E(a0)
0000F1C8 5228 001A                  		addq.b	#1,$1A(a0)
0000F1CC 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F1D2 6500                       		bcs.s	Obj12_ChkDel
0000F1D4 117C 0000 001A             		move.b	#0,$1A(a0)
0000F1DA                            
0000F1DA                            Obj12_ChkDel:
0000F1DA 3028 0008                  		move.w	8(a0),d0
0000F1DE 0240 FF80                  		andi.w	#$FF80,d0
0000F1E2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F1E6 0441 0080                  		subi.w	#$80,d1
0000F1EA 0241 FF80                  		andi.w	#$FF80,d1
0000F1EE 9041                       		sub.w	d1,d0
0000F1F0 0C40 0280                  		cmpi.w	#$280,d0
0000F1F4 6200 ECCA                  		bhi.w	DeleteObject
0000F1F8 6000 EC8A                  		bra.w	DisplaySprite
0000F1FC                            ; ===========================================================================
0000F1FC                            ; ---------------------------------------------------------------------------
0000F1FC                            ; Sprite mappings - lamp (SYZ)
0000F1FC                            ; ---------------------------------------------------------------------------
0000F1FC                            Map_obj12:
0000F1FC                            	include "_maps\obj12.asm"
0000F1FC                            ; ---------------------------------------------------------------------------
0000F1FC                            ; Sprite mappings - lamp (SYZ)
0000F1FC                            ; ---------------------------------------------------------------------------
0000F1FC 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F200 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F204 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F208 02                         byte_E98E:	dc.b 2
0000F209 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F20E 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F213 02                         byte_E999:	dc.b 2
0000F214 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F219 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F21E 02                         byte_E9A4:	dc.b 2
0000F21F F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F224 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F229 02                         byte_E9AF:	dc.b 2
0000F22A F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F22F 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F234 02                         byte_E9BA:	dc.b 2
0000F235 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F23A 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F23F 02                         byte_E9C5:	dc.b 2
0000F240 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F245 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F24A                            		even
0000F24A                            		even
0000F24A                            
0000F24A                            ; ===========================================================================
0000F24A                            ; ---------------------------------------------------------------------------
0000F24A                            ; Object 47 - pinball bumper (SYZ)
0000F24A                            ; ---------------------------------------------------------------------------
0000F24A                            
0000F24A                            Obj47:					; XREF: Obj_Index
0000F24A 7000                       		moveq	#0,d0
0000F24C 1028 0024                  		move.b	$24(a0),d0
0000F250 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F254 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F258                            ; ===========================================================================
0000F258 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F25A 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F25C                            ; ===========================================================================
0000F25C                            
0000F25C                            Obj47_Main:				; XREF: Obj47_Index
0000F25C 5428 0024                  		addq.b	#2,$24(a0)
0000F260 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F268 317C 0380 0002             		move.w	#$380,2(a0)
0000F26E 117C 0004 0001             		move.b	#4,1(a0)
0000F274 117C 0010 0019             		move.b	#$10,$19(a0)
0000F27A 117C 0001 0018             		move.b	#1,$18(a0)
0000F280 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F286                            
0000F286                            Obj47_Hit:				; XREF: Obj47_Index
0000F286 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F28A 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F28E 4228 0021                  		clr.b	$21(a0)
0000F292 43F8 D000                  		lea	($FFFFD000).w,a1
0000F296 3228 0008                  		move.w	8(a0),d1
0000F29A 3428 000C                  		move.w	$C(a0),d2
0000F29E 9269 0008                  		sub.w	8(a1),d1
0000F2A2 9469 000C                  		sub.w	$C(a1),d2
0000F2A6 4EB9 0000 2E26             		jsr	(CalcAngle).l
0000F2AC 4EB9 0000 2B58             		jsr	(CalcSine).l
0000F2B2 C3FC F900                  		muls.w	#-$700,d1
0000F2B6 E081                       		asr.l	#8,d1
0000F2B8 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F2BC C1FC F900                  		muls.w	#-$700,d0
0000F2C0 E080                       		asr.l	#8,d0
0000F2C2 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F2C6 08E9 0001 0022             		bset	#1,$22(a1)
0000F2CC 08A9 0004 0022             		bclr	#4,$22(a1)
0000F2D2 08A9 0005 0022             		bclr	#5,$22(a1)
0000F2D8 4229 003C                  		clr.b	$3C(a1)
0000F2DC 117C 0001 001C             		move.b	#1,$1C(a0)
0000F2E2 303C 00B4                  		move.w	#$B4,d0
0000F2E6 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F2EC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2F0 7000                       		moveq	#0,d0
0000F2F2 1028 0023                  		move.b	$23(a0),d0
0000F2F6 6700                       		beq.s	Obj47_Score
0000F2F8 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F2FE 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F300 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F304                            
0000F304                            Obj47_Score:
0000F304 7001                       		moveq	#1,d0
0000F306 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F30C 6100 EFFC                  		bsr.w	SingleObjLoad
0000F310 6600                       		bne.s	Obj47_Display
0000F312 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F316 3368 0008 0008             		move.w	8(a0),8(a1)
0000F31C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F322 137C 0004 001A             		move.b	#4,$1A(a1)
0000F328                            
0000F328                            Obj47_Display:
0000F328 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F32E 6100 BBA2                  		bsr.w	AnimateSprite
0000F332 3028 0008                  		move.w	8(a0),d0
0000F336 0240 FF80                  		andi.w	#$FF80,d0
0000F33A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F33E 0441 0080                  		subi.w	#$80,d1
0000F342 0241 FF80                  		andi.w	#$FF80,d1
0000F346 9041                       		sub.w	d1,d0
0000F348 0C40 0280                  		cmpi.w	#$280,d0
0000F34C 6200                       		bhi.s	Obj47_ChkHit
0000F34E 6000 EB34                  		bra.w	DisplaySprite
0000F352                            ; ===========================================================================
0000F352                            
0000F352                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F352 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F356 7000                       		moveq	#0,d0
0000F358 1028 0023                  		move.b	$23(a0),d0
0000F35C 6700                       		beq.s	Obj47_Delete
0000F35E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F364                            
0000F364                            Obj47_Delete:
0000F364 6000 EB5A                  		bra.w	DeleteObject
0000F368                            ; ===========================================================================
0000F368                            Ani_obj47:
0000F368                            	include "_anim\obj47.asm"
0000F368                            ; ---------------------------------------------------------------------------
0000F368                            ; Animation script - flamethrower (SBZ)
0000F368                            ; ---------------------------------------------------------------------------
0000F368 0000                       		dc.w byte_EAF4-Ani_obj47
0000F36A 0000                       		dc.w byte_EAF8-Ani_obj47
0000F36C 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F370 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F378                            		even
0000F378                            		even
0000F378                            
0000F378                            ; ---------------------------------------------------------------------------
0000F378                            ; Sprite mappings - pinball bumper (SYZ)
0000F378                            ; ---------------------------------------------------------------------------
0000F378                            Map_obj47:
0000F378                            	include "_maps\obj47.asm"
0000F378                            ; ---------------------------------------------------------------------------
0000F378                            ; Sprite mappings - pinball bumper (SYZ)
0000F378                            ; ---------------------------------------------------------------------------
0000F378 0000                       		dc.w byte_EB06-Map_obj47
0000F37A 0000                       		dc.w byte_EB11-Map_obj47
0000F37C 0000                       		dc.w byte_EB1C-Map_obj47
0000F37E 02                         byte_EB06:	dc.b 2
0000F37F F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F384 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F389 02                         byte_EB11:	dc.b 2
0000F38A F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F38F F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F394 02                         byte_EB1C:	dc.b 2
0000F395 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F39A F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F3A0 00                         		even
0000F3A0 00                         		even
0000F3A0                            
0000F3A0                            ; ===========================================================================
0000F3A0                            ; ---------------------------------------------------------------------------
0000F3A0                            ; Object 0D - signpost at the end of a level
0000F3A0                            ; ---------------------------------------------------------------------------
0000F3A0                            
0000F3A0                            Obj0D:					; XREF: Obj_Index
0000F3A0 7000                       		moveq	#0,d0
0000F3A2 1028 0024                  		move.b	$24(a0),d0
0000F3A6 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F3AA 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F3AE 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F3B4 6100 BB1C                  		bsr.w	AnimateSprite
0000F3B8 6100 EACA                  		bsr.w	DisplaySprite
0000F3BC 3028 0008                  		move.w	8(a0),d0
0000F3C0 0240 FF80                  		andi.w	#$FF80,d0
0000F3C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F3C8 0441 0080                  		subi.w	#$80,d1
0000F3CC 0241 FF80                  		andi.w	#$FF80,d1
0000F3D0 9041                       		sub.w	d1,d0
0000F3D2 0C40 0280                  		cmpi.w	#$280,d0
0000F3D6 6200 EAE8                  		bhi.w	DeleteObject
0000F3DA 4E75                       		rts	
0000F3DC                            ; ===========================================================================
0000F3DC 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F3DE 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F3E0 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F3E2 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F3E4 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F3E6                            ; ===========================================================================
0000F3E6                            
0000F3E6                            Obj0D_Main:				; XREF: Obj0D_Index
0000F3E6 5428 0024                  		addq.b	#2,$24(a0)
0000F3EA 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F3F2 317C 0680 0002             		move.w	#$680,2(a0)
0000F3F8 117C 0004 0001             		move.b	#4,1(a0)
0000F3FE 117C 0018 0019             		move.b	#$18,$19(a0)
0000F404 117C 0004 0018             		move.b	#4,$18(a0)
0000F40A                            
0000F40A                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F40A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F40E 9068 0008                  		sub.w	8(a0),d0
0000F412 6500                       		bcs.s	locret_EBBA
0000F414 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F418 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F41A 303C 00CF                  		move.w	#$CF,d0
0000F41E 4EB9 0000 13B0             		jsr	(PlaySound).l	; play signpost	sound
0000F424 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F428 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F42E 5428 0024                  		addq.b	#2,$24(a0)
0000F432                            
0000F432                            locret_EBBA:
0000F432 4E75                       		rts	
0000F434                            ; ===========================================================================
0000F434                            
0000F434                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F434 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F438 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F43A 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F440 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F444 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F44A 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F44C 5428 0024                  		addq.b	#2,$24(a0)
0000F450                            
0000F450                            Obj0D_Sparkle:
0000F450 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F454 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F456 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F45C 7000                       		moveq	#0,d0
0000F45E 1028 0034                  		move.b	$34(a0),d0
0000F462 5428 0034                  		addq.b	#2,$34(a0)
0000F466 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F46C 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F470 6100 EE98                  		bsr.w	SingleObjLoad
0000F474 6600                       		bne.s	locret_EC42
0000F476 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F47A 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F480 101A                       		move.b	(a2)+,d0
0000F482 4880                       		ext.w	d0
0000F484 D068 0008                  		add.w	8(a0),d0
0000F488 3340 0008                  		move.w	d0,8(a1)
0000F48C 101A                       		move.b	(a2)+,d0
0000F48E 4880                       		ext.w	d0
0000F490 D068 000C                  		add.w	$C(a0),d0
0000F494 3340 000C                  		move.w	d0,$C(a1)
0000F498 237C 0000 A670 0004        		move.l	#Map_obj25,4(a1)
0000F4A0 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F4A6 137C 0004 0001             		move.b	#4,1(a1)
0000F4AC 137C 0002 0018             		move.b	#2,$18(a1)
0000F4B2 137C 0008 0019             		move.b	#8,$19(a1)
0000F4B8                            
0000F4B8                            locret_EC42:
0000F4B8 4E75                       		rts	
0000F4BA                            ; ===========================================================================
0000F4BA E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F4BC 0808                       		dc.b	8,   8
0000F4BE F000                       		dc.b -$10,   0
0000F4C0 18F8                       		dc.b  $18,  -8
0000F4C2 00F8                       		dc.b	0,  -8
0000F4C4 1000                       		dc.b  $10,   0
0000F4C6 E808                       		dc.b -$18,   8
0000F4C8 1810                       		dc.b  $18, $10
0000F4CA                            ; ===========================================================================
0000F4CA                            
0000F4CA                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F4CA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F4CE 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F4D2 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F4D8 6600                       		bne.s	loc_EC70
0000F4DA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F4E0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F4E6 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F4E8 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F4EE 6000                       		bra.s	loc_EC70
0000F4F0                            
0000F4F0                            Obj0D_MoveLeft:
0000F4F0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F4F6                            
0000F4F6                            loc_EC70:
0000F4F6 4A38 D000                  		tst.b	($FFFFD000).w
0000F4FA 6700                       		beq.s	loc_EC86
0000F4FC 3038 D008                  		move.w	($FFFFD008).w,d0
0000F500 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F504 0641 0128                  		addi.w	#$128,d1
0000F508 B041                       		cmp.w	d1,d0
0000F50A 6500                       		bcs.s	locret_ECEE
0000F50C                            
0000F50C                            loc_EC86:
0000F50C 5428 0024                  		addq.b	#2,$24(a0)
0000F510                            
0000F510                            ; ---------------------------------------------------------------------------
0000F510                            ; Subroutine to	set up bonuses at the end of an	act
0000F510                            ; ---------------------------------------------------------------------------
0000F510                            
0000F510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F510                            
0000F510                            
0000F510                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F510 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F514 6600                       		bne.s	locret_ECEE
0000F516 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F51C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F520 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F524 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F52A 7010                       		moveq	#$10,d0
0000F52C 4EB9 0000 15CC             		jsr	(LoadPLC2).l	; load title card patterns
0000F532 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F538 7000                       		moveq	#0,d0
0000F53A 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F53E C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F542 7200                       		moveq	#0,d1
0000F544 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F548 D041                       		add.w	d1,d0		; add up your time
0000F54A 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F54E 7214                       		moveq	#$14,d1
0000F550 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F552 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F554 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F556                            
0000F556                            loc_ECD0:
0000F556 D040                       		add.w	d0,d0
0000F558 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F55E 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F562 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F566 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F56A 303C 008E                  		move.w	#$8E,d0
0000F56E 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F574                            
0000F574                            locret_ECEE:
0000F574 4E75                       		rts	
0000F576                            ; End of function GotThroughAct
0000F576                            
0000F576                            ; ===========================================================================
0000F576 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F58A 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F5A0                            ; ===========================================================================
0000F5A0                            
0000F5A0                            locret_ED1A:				; XREF: Obj0D_Index
0000F5A0 4E75                       		rts	
0000F5A2                            ; ===========================================================================
0000F5A2                            Ani_obj0D:
0000F5A2                            	include "_anim\obj0D.asm"
0000F5A2                            ; ---------------------------------------------------------------------------
0000F5A2                            ; Animation script - signpost
0000F5A2                            ; ---------------------------------------------------------------------------
0000F5A2 0000                       		dc.w byte_ED24-Ani_obj0D
0000F5A4 0000                       		dc.w byte_ED28-Ani_obj0D
0000F5A6 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F5A8 0000                       		dc.w byte_ED34-Ani_obj0D
0000F5AA 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F5AE 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F5B4 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F5BA 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F5BE 00                         		even
0000F5BE 00                         		even
0000F5BE                            
0000F5BE                            ; ---------------------------------------------------------------------------
0000F5BE                            ; Sprite mappings - signpost
0000F5BE                            ; ---------------------------------------------------------------------------
0000F5BE                            Map_obj0D:
0000F5BE                            	include "_maps\obj0D.asm"
0000F5BE                            ; ---------------------------------------------------------------------------
0000F5BE                            ; Sprite mappings - signpost
0000F5BE                            ; ---------------------------------------------------------------------------
0000F5BE 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F5C2 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F5C6 0000                       		dc.w byte_ED73-Map_obj0D
0000F5C8 03                         byte_ED42:	dc.b 3
0000F5C9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F5CE F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F5D3 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F5D8 02                         byte_ED52:	dc.b 2
0000F5D9 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F5DE 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F5E3 02                         byte_ED5D:	dc.b 2
0000F5E4 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F5E9 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F5EE 02                         byte_ED68:	dc.b 2
0000F5EF F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F5F4 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F5F9 03                         byte_ED73:	dc.b 3
0000F5FA F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F5FF F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F604 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F60A 00                         		even
0000F60A 00                         		even
0000F60A                            
0000F60A                            ; ===========================================================================
0000F60A                            ; ---------------------------------------------------------------------------
0000F60A                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F60A                            ; ---------------------------------------------------------------------------
0000F60A                            
0000F60A                            Obj4C:					; XREF: Obj_Index
0000F60A 7000                       		moveq	#0,d0
0000F60C 1028 0024                  		move.b	$24(a0),d0
0000F610 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F614 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F618 6000 0000                  		bra.w	Obj4D_ChkDel
0000F61C                            ; ===========================================================================
0000F61C 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F61E 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F620 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F622 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F624 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F626 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F628                            ; ===========================================================================
0000F628                            
0000F628                            Obj4C_Main:				; XREF: Obj4C_Index
0000F628 5428 0024                  		addq.b	#2,$24(a0)
0000F62C 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F634 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F63A 117C 0004 0001             		move.b	#4,1(a0)
0000F640 117C 0001 0018             		move.b	#1,$18(a0)
0000F646 117C 0038 0019             		move.b	#$38,$19(a0)
0000F64C 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F652                            
0000F652                            loc_EDCC:				; XREF: Obj4C_Index
0000F652 5368 0032                  		subq.w	#1,$32(a0)
0000F656 6A00                       		bpl.s	locret_EDF0
0000F658 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F65E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F662 3228 000C                  		move.w	$C(a0),d1
0000F666 B041                       		cmp.w	d1,d0
0000F668 6400                       		bcc.s	locret_EDF0
0000F66A 0441 0170                  		subi.w	#$170,d1
0000F66E B041                       		cmp.w	d1,d0
0000F670 6500                       		bcs.s	locret_EDF0
0000F672 5428 0024                  		addq.b	#2,$24(a0)
0000F676                            
0000F676                            locret_EDF0:
0000F676 4E75                       		rts	
0000F678                            ; ===========================================================================
0000F678                            
0000F678                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F678 5428 0024                  		addq.b	#2,$24(a0)
0000F67C 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F680 6600                       		bne.s	loc_EE18
0000F682 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F686 3368 0008 0008             		move.w	8(a0),8(a1)
0000F68C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F692 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F698 2348 003C                  		move.l	a0,$3C(a1)
0000F69C                            
0000F69C                            loc_EE18:
0000F69C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F6A2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F6A6 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F6A8 117C 0004 001C             		move.b	#4,$1C(a0)
0000F6AE 6000                       		bra.s	Obj4C_Display
0000F6B0                            ; ===========================================================================
0000F6B0                            
0000F6B0                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F6B0 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F6B4 08E9 0001 0022             		bset	#1,$22(a1)
0000F6BA 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F6C0 6000                       		bra.s	Obj4C_Display
0000F6C2                            ; ===========================================================================
0000F6C2                            
0000F6C2                            loc_EE3E:				; XREF: Obj4C_Index
0000F6C2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F6C6 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F6C8 5428 0024                  		addq.b	#2,$24(a0)
0000F6CC 4E75                       		rts	
0000F6CE                            ; ===========================================================================
0000F6CE                            
0000F6CE                            Obj4C_Display:				; XREF: Obj4C_Index
0000F6CE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F6D4 6100 B7FC                  		bsr.w	AnimateSprite
0000F6D8 6100 E7AA                  		bsr.w	DisplaySprite
0000F6DC 4E75                       		rts	
0000F6DE                            ; ===========================================================================
0000F6DE                            
0000F6DE                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F6DE 117C 0000 001C             		move.b	#0,$1C(a0)
0000F6E4 117C 0002 0024             		move.b	#2,$24(a0)
0000F6EA 4A28 0028                  		tst.b	$28(a0)
0000F6EE 6700 E7D0                  		beq.w	DeleteObject
0000F6F2 4E75                       		rts	
0000F6F4                            ; ===========================================================================
0000F6F4                            ; ---------------------------------------------------------------------------
0000F6F4                            ; Object 4D - lava geyser / lavafall (MZ)
0000F6F4                            ; ---------------------------------------------------------------------------
0000F6F4                            
0000F6F4                            Obj4D:					; XREF: Obj_Index
0000F6F4 7000                       		moveq	#0,d0
0000F6F6 1028 0024                  		move.b	$24(a0),d0
0000F6FA 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F6FE 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F702 6000 E780                  		bra.w	DisplaySprite
0000F706                            ; ===========================================================================
0000F706 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F708 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F70A 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F70C 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F70E                            
0000F70E FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F712                            ; ===========================================================================
0000F712                            
0000F712                            Obj4D_Main:				; XREF: Obj4D_Index
0000F712 5428 0024                  		addq.b	#2,$24(a0)
0000F716 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F71C 4A28 0028                  		tst.b	$28(a0)
0000F720 6700                       		beq.s	loc_EEA4
0000F722 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F728                            
0000F728                            loc_EEA4:
0000F728 7000                       		moveq	#0,d0
0000F72A 1028 0028                  		move.b	$28(a0),d0
0000F72E D040                       		add.w	d0,d0
0000F730 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F736 2248                       		movea.l	a0,a1
0000F738 7201                       		moveq	#1,d1
0000F73A 6100                       		bsr.s	Obj4D_MakeLava
0000F73C 6000                       		bra.s	loc_EF10
0000F73E                            ; ===========================================================================
0000F73E                            
0000F73E                            Obj4D_Loop:
0000F73E 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F742 6600                       		bne.s	loc_EF0A
0000F744                            
0000F744                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F744 12BC 004D                  		move.b	#$4D,0(a1)
0000F748 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F750 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F756 137C 0004 0001             		move.b	#4,1(a1)
0000F75C 137C 0020 0019             		move.b	#$20,$19(a1)
0000F762 3368 0008 0008             		move.w	8(a0),8(a1)
0000F768 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F76E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F774 137C 0001 0018             		move.b	#1,$18(a1)
0000F77A 137C 0005 001C             		move.b	#5,$1C(a1)
0000F780 4A28 0028                  		tst.b	$28(a0)
0000F784 6700                       		beq.s	loc_EF0A
0000F786 137C 0002 001C             		move.b	#2,$1C(a1)
0000F78C                            
0000F78C                            loc_EF0A:
0000F78C 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F790 4E75                       		rts	
0000F792                            ; ===========================================================================
0000F792                            
0000F792                            loc_EF10:				; XREF: Obj4D_Main
0000F792 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F798 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F79E 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F7A4 137C 0093 0020             		move.b	#$93,$20(a1)
0000F7AA 137C 0080 0016             		move.b	#$80,$16(a1)
0000F7B0 08E9 0004 0001             		bset	#4,1(a1)
0000F7B6 5829 0024                  		addq.b	#4,$24(a1)
0000F7BA 2348 003C                  		move.l	a0,$3C(a1)
0000F7BE 4A28 0028                  		tst.b	$28(a0)
0000F7C2 6700                       		beq.s	Obj4D_PlaySnd
0000F7C4 7200                       		moveq	#0,d1
0000F7C6 6100 FF76                  		bsr.w	Obj4D_Loop
0000F7CA 5429 0024                  		addq.b	#2,$24(a1)
0000F7CE 08E9 0004 0002             		bset	#4,2(a1)
0000F7D4 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F7DA 137C 0000 0018             		move.b	#0,$18(a1)
0000F7E0 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F7E6 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F7EC 117C 0000 0028             		move.b	#0,$28(a0)
0000F7F2                            
0000F7F2                            Obj4D_PlaySnd:
0000F7F2 303C 00C8                  		move.w	#$C8,d0
0000F7F6 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play flame sound
0000F7FC                            
0000F7FC                            Obj4D_Action:				; XREF: Obj4D_Index
0000F7FC 7000                       		moveq	#0,d0
0000F7FE 1028 0028                  		move.b	$28(a0),d0
0000F802 D040                       		add.w	d0,d0
0000F804 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F808 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F80C 6100 E650                  		bsr.w	SpeedToPos
0000F810 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F816 6100 B6BA                  		bsr.w	AnimateSprite
0000F81A                            
0000F81A                            Obj4D_ChkDel:				; XREF: Obj4C
0000F81A 3028 0008                  		move.w	8(a0),d0
0000F81E 0240 FF80                  		andi.w	#$FF80,d0
0000F822 3238 F700                  		move.w	($FFFFF700).w,d1
0000F826 0441 0080                  		subi.w	#$80,d1
0000F82A 0241 FF80                  		andi.w	#$FF80,d1
0000F82E 9041                       		sub.w	d1,d0
0000F830 0C40 0280                  		cmpi.w	#$280,d0
0000F834 6200 E68A                  		bhi.w	DeleteObject
0000F838 4E75                       		rts	
0000F83A                            ; ===========================================================================
0000F83A 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F83C 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F83E                            ; ===========================================================================
0000F83E                            
0000F83E                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F83E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F844 3028 0030                  		move.w	$30(a0),d0
0000F848 B068 000C                  		cmp.w	$C(a0),d0
0000F84C 6400                       		bcc.s	locret_EFDA
0000F84E 5828 0024                  		addq.b	#4,$24(a0)
0000F852 2268 003C                  		movea.l	$3C(a0),a1
0000F856 137C 0003 001C             		move.b	#3,$1C(a1)
0000F85C                            
0000F85C                            locret_EFDA:
0000F85C 4E75                       		rts	
0000F85E                            ; ===========================================================================
0000F85E                            
0000F85E                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F85E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F864 3028 0030                  		move.w	$30(a0),d0
0000F868 B068 000C                  		cmp.w	$C(a0),d0
0000F86C 6400                       		bcc.s	locret_EFFA
0000F86E 5828 0024                  		addq.b	#4,$24(a0)
0000F872 2268 003C                  		movea.l	$3C(a0),a1
0000F876 137C 0001 001C             		move.b	#1,$1C(a1)
0000F87C                            
0000F87C                            locret_EFFA:
0000F87C 4E75                       		rts	
0000F87E                            ; ===========================================================================
0000F87E                            
0000F87E                            loc_EFFC:				; XREF: Obj4D_Index
0000F87E 2268 003C                  		movea.l	$3C(a0),a1
0000F882 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F888 6700 0000                  		beq.w	Obj4D_Delete
0000F88C 3029 000C                  		move.w	$C(a1),d0
0000F890 0640 0060                  		addi.w	#$60,d0
0000F894 3140 000C                  		move.w	d0,$C(a0)
0000F898 9068 0030                  		sub.w	$30(a0),d0
0000F89C 4440                       		neg.w	d0
0000F89E 7208                       		moveq	#8,d1
0000F8A0 0C40 0040                  		cmpi.w	#$40,d0
0000F8A4 6C00                       		bge.s	loc_F026
0000F8A6 720B                       		moveq	#$B,d1
0000F8A8                            
0000F8A8                            loc_F026:
0000F8A8 0C40 0080                  		cmpi.w	#$80,d0
0000F8AC 6F00                       		ble.s	loc_F02E
0000F8AE 720E                       		moveq	#$E,d1
0000F8B0                            
0000F8B0                            loc_F02E:
0000F8B0 5328 001E                  		subq.b	#1,$1E(a0)
0000F8B4 6A00                       		bpl.s	loc_F04C
0000F8B6 117C 0007 001E             		move.b	#7,$1E(a0)
0000F8BC 5228 001B                  		addq.b	#1,$1B(a0)
0000F8C0 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F8C6 6500                       		bcs.s	loc_F04C
0000F8C8 117C 0000 001B             		move.b	#0,$1B(a0)
0000F8CE                            
0000F8CE                            loc_F04C:
0000F8CE 1028 001B                  		move.b	$1B(a0),d0
0000F8D2 D001                       		add.b	d1,d0
0000F8D4 1140 001A                  		move.b	d0,$1A(a0)
0000F8D8 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F8DC                            ; ===========================================================================
0000F8DC                            
0000F8DC                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F8DC 6000 E5E2                  		bra.w	DeleteObject
0000F8E0                            ; ===========================================================================
0000F8E0                            ; ---------------------------------------------------------------------------
0000F8E0                            ; Object 4E - advancing	wall of	lava (MZ)
0000F8E0                            ; ---------------------------------------------------------------------------
0000F8E0                            
0000F8E0                            Obj4E:					; XREF: Obj_Index
0000F8E0 7000                       		moveq	#0,d0
0000F8E2 1028 0024                  		move.b	$24(a0),d0
0000F8E6 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F8EA 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F8EE                            ; ===========================================================================
0000F8EE 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F8F0 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F8F2 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F8F4 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F8F6 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F8F8                            ; ===========================================================================
0000F8F8                            
0000F8F8                            Obj4E_Main:				; XREF: Obj4E_Index
0000F8F8 5828 0024                  		addq.b	#4,$24(a0)
0000F8FC 2248                       		movea.l	a0,a1
0000F8FE 7201                       		moveq	#1,d1
0000F900 6000                       		bra.s	Obj4E_Main2
0000F902                            ; ===========================================================================
0000F902                            
0000F902                            Obj4E_Loop:
0000F902 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F906 6600                       		bne.s	loc_F0C8
0000F908                            
0000F908                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F908 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F90C 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F914 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F91A 137C 0004 0001             		move.b	#4,1(a1)
0000F920 137C 0050 0019             		move.b	#$50,$19(a1)
0000F926 3368 0008 0008             		move.w	8(a0),8(a1)
0000F92C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F932 137C 0001 0018             		move.b	#1,$18(a1)
0000F938 137C 0000 001C             		move.b	#0,$1C(a1)
0000F93E 137C 0094 0020             		move.b	#$94,$20(a1)
0000F944 2348 003C                  		move.l	a0,$3C(a1)
0000F948                            
0000F948                            loc_F0C8:
0000F948 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F94C                            
0000F94C 5C29 0024                  		addq.b	#6,$24(a1)
0000F950 137C 0004 001A             		move.b	#4,$1A(a1)
0000F956                            
0000F956                            Obj4E_Action:				; XREF: Obj4E_Index
0000F956 3038 D008                  		move.w	($FFFFD008).w,d0
0000F95A 9068 0008                  		sub.w	8(a0),d0
0000F95E 6400                       		bcc.s	Obj4E_ChkSonic
0000F960 4440                       		neg.w	d0
0000F962                            
0000F962                            Obj4E_ChkSonic:
0000F962 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F966 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F968 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F96C 9068 000C                  		sub.w	$C(a0),d0
0000F970 6400                       		bcc.s	loc_F0F4
0000F972 4440                       		neg.w	d0
0000F974                            
0000F974                            loc_F0F4:
0000F974 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F978 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F97A 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F980 6000                       		bra.s	Obj4E_Solid
0000F982                            ; ===========================================================================
0000F982                            
0000F982                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F982 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F986 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F988 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F98E 5528 0024                  		subq.b	#2,$24(a0)
0000F992                            
0000F992                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F992 323C 002B                  		move.w	#$2B,d1
0000F996 343C 0018                  		move.w	#$18,d2
0000F99A 3602                       		move.w	d2,d3
0000F99C 5243                       		addq.w	#1,d3
0000F99E 3828 0008                  		move.w	8(a0),d4
0000F9A2 1028 0024                  		move.b	$24(a0),d0
0000F9A6 3F00                       		move.w	d0,-(sp)
0000F9A8 6100 0000                  		bsr.w	SolidObject
0000F9AC 301F                       		move.w	(sp)+,d0
0000F9AE 1140 0024                  		move.b	d0,$24(a0)
0000F9B2 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F9B8 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F9BA 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F9BE 4228 0036                  		clr.b	$36(a0)
0000F9C2                            
0000F9C2                            Obj4E_Animate:
0000F9C2 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F9C8 6100 B508                  		bsr.w	AnimateSprite
0000F9CC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F9D2 6400                       		bcc.s	Obj4E_ChkDel
0000F9D4 6100 E488                  		bsr.w	SpeedToPos
0000F9D8                            
0000F9D8                            Obj4E_ChkDel:
0000F9D8 6100 E4AA                  		bsr.w	DisplaySprite
0000F9DC 4A28 0036                  		tst.b	$36(a0)
0000F9E0 6600                       		bne.s	locret_F17E
0000F9E2 3028 0008                  		move.w	8(a0),d0
0000F9E6 0240 FF80                  		andi.w	#$FF80,d0
0000F9EA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9EE 0441 0080                  		subi.w	#$80,d1
0000F9F2 0241 FF80                  		andi.w	#$FF80,d1
0000F9F6 9041                       		sub.w	d1,d0
0000F9F8 0C40 0280                  		cmpi.w	#$280,d0
0000F9FC 6200                       		bhi.s	Obj4E_ChkGone
0000F9FE                            
0000F9FE                            locret_F17E:
0000F9FE 4E75                       		rts	
0000FA00                            ; ===========================================================================
0000FA00                            
0000FA00                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FA00 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FA04 7000                       		moveq	#0,d0
0000FA06 1028 0023                  		move.b	$23(a0),d0
0000FA0A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FA10 117C 0008 0024             		move.b	#8,$24(a0)
0000FA16 4E75                       		rts	
0000FA18                            ; ===========================================================================
0000FA18                            
0000FA18                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FA18 2268 003C                  		movea.l	$3C(a0),a1
0000FA1C 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FA22 6700                       		beq.s	Obj4E_Delete
0000FA24 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FA2A 0468 0080 0008             		subi.w	#$80,8(a0)
0000FA30 6000 E452                  		bra.w	DisplaySprite
0000FA34                            ; ===========================================================================
0000FA34                            
0000FA34                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FA34 6000 E48A                  		bra.w	DeleteObject
0000FA38                            ; ===========================================================================
0000FA38                            ; ---------------------------------------------------------------------------
0000FA38                            ; Object 54 - invisible	lava tag (MZ)
0000FA38                            ; ---------------------------------------------------------------------------
0000FA38                            
0000FA38                            Obj54:					; XREF: Obj_Index
0000FA38 7000                       		moveq	#0,d0
0000FA3A 1028 0024                  		move.b	$24(a0),d0
0000FA3E 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FA42 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FA46                            ; ===========================================================================
0000FA46 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FA48 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FA4A                            
0000FA4A 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FA4E                            ; ===========================================================================
0000FA4E                            
0000FA4E                            Obj54_Main:				; XREF: Obj54_Index
0000FA4E 5428 0024                  		addq.b	#2,$24(a0)
0000FA52 7000                       		moveq	#0,d0
0000FA54 1028 0028                  		move.b	$28(a0),d0
0000FA58 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FA5E 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FA66 117C 0084 0001             		move.b	#$84,1(a0)
0000FA6C                            
0000FA6C                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FA6C 3028 0008                  		move.w	8(a0),d0
0000FA70 0240 FF80                  		andi.w	#$FF80,d0
0000FA74 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA78 0441 0080                  		subi.w	#$80,d1
0000FA7C 0241 FF80                  		andi.w	#$FF80,d1
0000FA80 9041                       		sub.w	d1,d0
0000FA82 6B00 E43C                  		bmi.w	DeleteObject
0000FA86 0C40 0280                  		cmpi.w	#$280,d0
0000FA8A 6200 E434                  		bhi.w	DeleteObject
0000FA8E 4E75                       		rts	
0000FA90                            ; ===========================================================================
0000FA90                            ; ---------------------------------------------------------------------------
0000FA90                            ; Sprite mappings - invisible lava tag (MZ)
0000FA90                            ; ---------------------------------------------------------------------------
0000FA90                            Map_obj54:
0000FA90                            	include "_maps\obj54.asm"
0000FA90                            ; ---------------------------------------------------------------------------
0000FA90                            ; Sprite mappings - invisible lava tag (MZ)
0000FA90                            ; ---------------------------------------------------------------------------
0000FA90 0000                       		dc.w byte_F212-Map_obj54
0000FA92 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FA94 00                         		even
0000FA94 00                         		even
0000FA94                            
0000FA94                            Ani_obj4C:
0000FA94                            	include "_anim\obj4C.asm"
0000FA94                            ; ---------------------------------------------------------------------------
0000FA94                            ; Animation script - geyser of lava (MZ)
0000FA94                            ; ---------------------------------------------------------------------------
0000FA94 0000                       		dc.w byte_F220-Ani_obj4C
0000FA96 0000                       		dc.w byte_F22A-Ani_obj4C
0000FA98 0000                       		dc.w byte_F22E-Ani_obj4C
0000FA9A 0000                       		dc.w byte_F232-Ani_obj4C
0000FA9C 0000                       		dc.w byte_F23A-Ani_obj4C
0000FA9E 0000                       		dc.w byte_F23E-Ani_obj4C
0000FAA0 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FAAA 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FAAE 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FAB2 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FABA 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FABE 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FAC2                            		even
0000FAC2                            		even
0000FAC2                            
0000FAC2                            Ani_obj4E:
0000FAC2                            	include "_anim\obj4E.asm"
0000FAC2                            ; ---------------------------------------------------------------------------
0000FAC2                            ; Animation script - advancing wall of lava (MZ)
0000FAC2                            ; ---------------------------------------------------------------------------
0000FAC2 0000                       		dc.w byte_F244-Ani_obj4E
0000FAC4 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FACA                            		even
0000FACA                            		even
0000FACA                            
0000FACA                            ; ---------------------------------------------------------------------------
0000FACA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FACA                            ; ---------------------------------------------------------------------------
0000FACA                            Map_obj4C:
0000FACA                            	include "_maps\obj4C.asm"
0000FACA                            ; ---------------------------------------------------------------------------
0000FACA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FACA                            ; ---------------------------------------------------------------------------
0000FACA 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FACE 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FAD2 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FAD6 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FADA 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FADE 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FAE2 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FAE6 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FAEA 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FAEE 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FAF2 02                         byte_F272:	dc.b 2
0000FAF3 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FAF8 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FAFD 02                         byte_F27D:	dc.b 2
0000FAFE EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FB03 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FB08 04                         byte_F288:	dc.b 4
0000FB09 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FB0E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FB13 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FB18 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FB1D 04                         byte_F29D:	dc.b 4
0000FB1E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FB23 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FB28 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FB2D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FB32 06                         byte_F2B2:	dc.b 6
0000FB33 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FB38 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FB3D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FB42 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FB47 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FB4C E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FB51 06                         byte_F2D1:	dc.b 6
0000FB52 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FB57 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FB5C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FB61 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FB66 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FB6B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FB70 02                         byte_F2F0:	dc.b 2
0000FB71 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FB76 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FB7B 02                         byte_F2FB:	dc.b 2
0000FB7C E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FB81 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FB86 0A                         byte_F306:	dc.b $A
0000FB87 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB8C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB91 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB96 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB9B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FBA0 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FBA5 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FBAA F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FBAF 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FBB4 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FBB9 0A                         byte_F339:	dc.b $A
0000FBBA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FBBF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBC4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBC9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBCE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBD3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBD8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FBDD F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FBE2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FBE7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FBEC 0A                         byte_F36C:	dc.b $A
0000FBED 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FBF2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FBF7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FBFC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC01 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC06 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC0B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FC10 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FC15 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FC1A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FC1F 06                         byte_F39F:	dc.b 6
0000FC20 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FC25 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FC2A B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FC2F B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FC34 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FC39 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FC3E 06                         byte_F3BE:	dc.b 6
0000FC3F 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FC44 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FC49 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FC4E B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FC53 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FC58 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FC5D 06                         byte_F3DD:	dc.b 6
0000FC5E 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC63 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC68 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC6D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC72 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC77 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC7C 10                         byte_F3FC:	dc.b $10
0000FC7D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FC82 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FC87 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FC8C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FC91 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FC96 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FC9B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FCA0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FCA5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FCAA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FCAF 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FCB4 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FCB9 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FCBE 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FCC3 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FCC8 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FCCD 10                         byte_F44D:	dc.b $10
0000FCCE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FCD3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FCD8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FCDD B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FCE2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FCE7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FCEC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FCF1 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FCF6 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FCFB 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FD00 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FD05 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FD0A 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FD0F 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FD14 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FD19 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FD1E 10                         byte_F49E:	dc.b $10
0000FD1F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FD24 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FD29 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FD2E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FD33 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FD38 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FD3D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FD42 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FD47 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FD4C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FD51 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FD56 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FD5B 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FD60 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FD65 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FD6A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FD6F 06                         byte_F4EF:	dc.b 6
0000FD70 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FD75 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FD7A E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FD7F E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FD84 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FD89 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FD8E 06                         byte_F50E:	dc.b 6
0000FD8F E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FD94 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FD99 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FD9E E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FDA3 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FDA8 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FDAD 00                         byte_F52D:	dc.b 0
0000FDAE                            		even
0000FDAE                            		even
0000FDAE                            
0000FDAE                            ; ---------------------------------------------------------------------------
0000FDAE                            ; Sprite mappings - advancing wall of lava (MZ)
0000FDAE                            ; ---------------------------------------------------------------------------
0000FDAE                            Map_obj4E:
0000FDAE                            	include "_maps\obj4E.asm"
0000FDAE                            ; ---------------------------------------------------------------------------
0000FDAE                            ; Sprite mappings - advancing wall of lava (MZ)
0000FDAE                            ; ---------------------------------------------------------------------------
0000FDAE 0000                       		dc.w byte_F538-Map_obj4E
0000FDB0 0000                       		dc.w byte_F566-Map_obj4E
0000FDB2 0000                       		dc.w byte_F594-Map_obj4E
0000FDB4 0000                       		dc.w byte_F5C2-Map_obj4E
0000FDB6 0000                       		dc.w byte_F5F0-Map_obj4E
0000FDB8 09                         byte_F538:	dc.b 9
0000FDB9 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FDBE 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FDC3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDC8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDCD 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDD2 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDD7 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDDC E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDE1 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDE6 09                         byte_F566:	dc.b 9
0000FDE7 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FDEC 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FDF1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDF6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDFB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE00 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE05 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE0A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE0F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE14 09                         byte_F594:	dc.b 9
0000FE15 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FE1A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FE1F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE24 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE29 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE2E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE33 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE38 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE3D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE42 09                         byte_F5C2:	dc.b 9
0000FE43 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FE48 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FE4D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE52 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE57 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE5C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE61 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE66 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE6B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE70 08                         byte_F5F0:	dc.b 8
0000FE71 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FE76 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE7B E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE80 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE85 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE8A 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE8F E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE94 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE9A 00                         		even
0000FE9A 00                         		even
0000FE9A                            
0000FE9A                            ; ===========================================================================
0000FE9A                            ; ---------------------------------------------------------------------------
0000FE9A                            ; Object 40 - Moto Bug enemy (GHZ)
0000FE9A                            ; ---------------------------------------------------------------------------
0000FE9A                            
0000FE9A                            Obj40:					; XREF: Obj_Index
0000FE9A 7000                       		moveq	#0,d0
0000FE9C 1028 0024                  		move.b	$24(a0),d0
0000FEA0 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FEA4 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FEA8                            ; ===========================================================================
0000FEA8 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FEAA 0000                       		dc.w Obj40_Action-Obj40_Index
0000FEAC 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FEAE 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FEB0                            ; ===========================================================================
0000FEB0                            
0000FEB0                            Obj40_Main:				; XREF: Obj40_Index
0000FEB0 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FEB8 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FEBE 117C 0004 0001             		move.b	#4,1(a0)
0000FEC4 117C 0004 0018             		move.b	#4,$18(a0)
0000FECA 117C 0014 0019             		move.b	#$14,$19(a0)
0000FED0 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FED4 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FED6 117C 000E 0016             		move.b	#$E,$16(a0)
0000FEDC 117C 0008 0017             		move.b	#8,$17(a0)
0000FEE2 117C 000C 0020             		move.b	#$C,$20(a0)
0000FEE8 6100 DF02                  		bsr.w	ObjectFall
0000FEEC 4EB9 0000 0000             		jsr	ObjHitFloor
0000FEF2 4A41                       		tst.w	d1
0000FEF4 6A00                       		bpl.s	locret_F68A
0000FEF6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FEFA 317C 0000 0012             		move.w	#0,$12(a0)
0000FF00 5428 0024                  		addq.b	#2,$24(a0)
0000FF04 0868 0000 0022             		bchg	#0,$22(a0)
0000FF0A                            
0000FF0A                            locret_F68A:
0000FF0A 4E75                       		rts	
0000FF0C                            ; ===========================================================================
0000FF0C                            
0000FF0C                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FF0C 5828 0024                  		addq.b	#4,$24(a0)
0000FF10 6000 0000                  		bra.w	Obj40_Animate
0000FF14                            ; ===========================================================================
0000FF14                            
0000FF14                            Obj40_Action:				; XREF: Obj40_Index
0000FF14 7000                       		moveq	#0,d0
0000FF16 1028 0025                  		move.b	$25(a0),d0
0000FF1A 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FF1E 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FF22 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FF28 6100 AFA8                  		bsr.w	AnimateSprite
0000FF2C                            
0000FF2C                            ; ---------------------------------------------------------------------------
0000FF2C                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FF2C                            ; ---------------------------------------------------------------------------
0000FF2C                            
0000FF2C                            MarkObjGone:
0000FF2C 3028 0008                  		move.w	8(a0),d0
0000FF30 0240 FF80                  		andi.w	#$FF80,d0
0000FF34 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF38 0441 0080                  		subi.w	#$80,d1
0000FF3C 0241 FF80                  		andi.w	#$FF80,d1
0000FF40 9041                       		sub.w	d1,d0
0000FF42 0C40 0280                  		cmpi.w	#$280,d0
0000FF46 6200 0000                  		bhi.w	Mark_ChkGone
0000FF4A 6000 DF38                  		bra.w	DisplaySprite
0000FF4E                            ; ===========================================================================
0000FF4E                            
0000FF4E                            Mark_ChkGone:
0000FF4E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FF52 7000                       		moveq	#0,d0
0000FF54 1028 0023                  		move.b	$23(a0),d0
0000FF58 6700                       		beq.s	Mark_Delete
0000FF5A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FF60                            
0000FF60                            Mark_Delete:
0000FF60 6000 DF5E                  		bra.w	DeleteObject
0000FF64                            
0000FF64                            ; ===========================================================================
0000FF64 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FF66 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FF68                            ; ===========================================================================
0000FF68                            
0000FF68                            Obj40_Move:				; XREF: Obj40_Index2
0000FF68 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FF6C 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FF6E 5428 0025                  		addq.b	#2,$25(a0)
0000FF72 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FF78 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF7E 0868 0000 0022             		bchg	#0,$22(a0)
0000FF84 6600                       		bne.s	locret_F70A
0000FF86 4468 0010                  		neg.w	$10(a0)		; change direction
0000FF8A                            
0000FF8A                            locret_F70A:
0000FF8A 4E75                       		rts	
0000FF8C                            ; ===========================================================================
0000FF8C                            
0000FF8C                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FF8C 6100 DED0                  		bsr.w	SpeedToPos
0000FF90 4EB9 0000 0000             		jsr	ObjHitFloor
0000FF96 0C41 FFF8                  		cmpi.w	#-8,d1
0000FF9A 6D00                       		blt.s	Obj40_Pause
0000FF9C 0C41 000C                  		cmpi.w	#$C,d1
0000FFA0 6C00                       		bge.s	Obj40_Pause
0000FFA2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FFA6 5328 0033                  		subq.b	#1,$33(a0)
0000FFAA 6A00                       		bpl.s	locret_F756
0000FFAC 117C 000F 0033             		move.b	#$F,$33(a0)
0000FFB2 6100 E356                  		bsr.w	SingleObjLoad
0000FFB6 6600                       		bne.s	locret_F756
0000FFB8 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FFBC 3368 0008 0008             		move.w	8(a0),8(a1)
0000FFC2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FFC8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FFCE 137C 0002 001C             		move.b	#2,$1C(a1)
0000FFD4                            
0000FFD4                            locret_F756:
0000FFD4 4E75                       		rts	
0000FFD6                            ; ===========================================================================
0000FFD6                            
0000FFD6                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FFD6 5528 0025                  		subq.b	#2,$25(a0)
0000FFDA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FFE0 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FFE6 117C 0000 001C             		move.b	#0,$1C(a0)
0000FFEC 4E75                       		rts	
0000FFEE                            ; ===========================================================================
0000FFEE                            
0000FFEE                            Obj40_Animate:				; XREF: Obj40_Index
0000FFEE 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FFF4 6100 AEDC                  		bsr.w	AnimateSprite
0000FFF8 6000 DE8A                  		bra.w	DisplaySprite
0000FFFC                            ; ===========================================================================
0000FFFC                            
0000FFFC                            Obj40_Delete:				; XREF: Obj40_Index
0000FFFC 6000 DEC2                  		bra.w	DeleteObject
00010000                            ; ===========================================================================
00010000                            Ani_obj40:
00010000                            	include "_anim\obj40.asm"
00010000                            ; ---------------------------------------------------------------------------
00010000                            ; Animation script - Motobug enemy
00010000                            ; ---------------------------------------------------------------------------
00010000 0000                       		dc.w byte_F788-Ani_obj40
00010002 0000                       		dc.w byte_F78C-Ani_obj40
00010004 0000                       		dc.w byte_F792-Ani_obj40
00010006 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0001000A 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00010010 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0001001E                            		even
0001001E                            		even
0001001E                            
0001001E                            ; ---------------------------------------------------------------------------
0001001E                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001001E                            ; ---------------------------------------------------------------------------
0001001E                            Map_obj40:
0001001E                            	include "_maps\obj40.asm"
0001001E                            Map_cedc:
0001001E 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
00010020 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
00010022 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
00010024 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
00010026 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
00010028 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0001002A 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0001002C 04                         Map_cedc_E: 	dc.b $4
0001002D F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010032 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
00010037 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0001003C 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
00010041 04                         Map_cedc_23: 	dc.b $4
00010042 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
00010047 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0001004C F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
00010051 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
00010056 05                         Map_cedc_38: 	dc.b $5
00010057 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0001005C 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
00010061 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010066 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0001006B 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
00010070 01                         Map_cedc_52: 	dc.b $1
00010071 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
00010076 01                         Map_cedc_58: 	dc.b $1
00010077 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0001007C 01                         Map_cedc_5E: 	dc.b $1
0001007D FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
00010082 00                         Map_cedc_64: 	dc.b $0
00010084 00                         	even
00010084 00                         	even
00010084                            
00010084                            ; ===========================================================================
00010084                            ; ---------------------------------------------------------------------------
00010084                            ; Object 4F - blank
00010084                            ; ---------------------------------------------------------------------------
00010084                            
00010084                            Obj4F:					; XREF: Obj_Index
00010084 4E75                       		rts	
00010086                            
00010086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010086                            
00010086                            
00010086                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010086 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001008A D047                       		add.w	d7,d0
0001008C 0240 0003                  		andi.w	#3,d0
00010090 6600                       		bne.s	loc_F836
00010092 7600                       		moveq	#0,d3
00010094 1628 0019                  		move.b	$19(a0),d3
00010098 4A68 0010                  		tst.w	$10(a0)
0001009C 6B00                       		bmi.s	loc_F82C
0001009E 6100 0000                  		bsr.w	ObjHitWallRight
000100A2 4A41                       		tst.w	d1
000100A4 6A00                       		bpl.s	loc_F836
000100A6                            
000100A6                            loc_F828:
000100A6 7001                       		moveq	#1,d0
000100A8 4E75                       		rts	
000100AA                            ; ===========================================================================
000100AA                            
000100AA                            loc_F82C:
000100AA 4643                       		not.w	d3
000100AC 6100 0000                  		bsr.w	ObjHitWallLeft
000100B0 4A41                       		tst.w	d1
000100B2 6BF2                       		bmi.s	loc_F828
000100B4                            
000100B4                            loc_F836:
000100B4 7000                       		moveq	#0,d0
000100B6 4E75                       		rts	
000100B8                            ; End of function Obj50_ChkWall
000100B8                            
000100B8                            ; ===========================================================================
000100B8                            ; ---------------------------------------------------------------------------
000100B8                            ; Object 50 - Yadrin enemy (SYZ)
000100B8                            ; ---------------------------------------------------------------------------
000100B8                            
000100B8                            Obj50:					; XREF: Obj_Index
000100B8 7000                       		moveq	#0,d0
000100BA 1028 0024                  		move.b	$24(a0),d0
000100BE 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
000100C2 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000100C6                            ; ===========================================================================
000100C6 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000100C8 0000                       		dc.w Obj50_Action-Obj50_Index
000100CA                            ; ===========================================================================
000100CA                            
000100CA                            Obj50_Main:				; XREF: Obj50_Index
000100CA 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000100D2 317C 247B 0002             		move.w	#$247B,2(a0)
000100D8 117C 0004 0001             		move.b	#4,1(a0)
000100DE 117C 0004 0018             		move.b	#4,$18(a0)
000100E4 117C 0014 0019             		move.b	#$14,$19(a0)
000100EA 117C 0011 0016             		move.b	#$11,$16(a0)
000100F0 117C 0008 0017             		move.b	#8,$17(a0)
000100F6 117C 00CC 0020             		move.b	#$CC,$20(a0)
000100FC 6100 DCEE                  		bsr.w	ObjectFall
00010100 6100 0000                  		bsr.w	ObjHitFloor
00010104 4A41                       		tst.w	d1
00010106 6A00                       		bpl.s	locret_F89E
00010108 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001010C 317C 0000 0012             		move.w	#0,$12(a0)
00010112 5428 0024                  		addq.b	#2,$24(a0)
00010116 0868 0000 0022             		bchg	#0,$22(a0)
0001011C                            
0001011C                            locret_F89E:
0001011C 4E75                       		rts	
0001011E                            ; ===========================================================================
0001011E                            
0001011E                            Obj50_Action:				; XREF: Obj50_Index
0001011E 7000                       		moveq	#0,d0
00010120 1028 0025                  		move.b	$25(a0),d0
00010124 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010128 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0001012C 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010132 6100 AD9E                  		bsr.w	AnimateSprite
00010136 6000 FDF4                  		bra.w	MarkObjGone
0001013A                            ; ===========================================================================
0001013A 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0001013C 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0001013E                            ; ===========================================================================
0001013E                            
0001013E                            Obj50_Move:				; XREF: Obj50_Index2
0001013E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010142 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010144 5428 0025                  		addq.b	#2,$25(a0)
00010148 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0001014E 117C 0001 001C             		move.b	#1,$1C(a0)
00010154 0868 0000 0022             		bchg	#0,$22(a0)
0001015A 6600                       		bne.s	locret_F8E2
0001015C 4468 0010                  		neg.w	$10(a0)		; change direction
00010160                            
00010160                            locret_F8E2:
00010160 4E75                       		rts	
00010162                            ; ===========================================================================
00010162                            
00010162                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010162 6100 DCFA                  		bsr.w	SpeedToPos
00010166 6100 0000                  		bsr.w	ObjHitFloor
0001016A 0C41 FFF8                  		cmpi.w	#-8,d1
0001016E 6D00                       		blt.s	Obj50_Pause
00010170 0C41 000C                  		cmpi.w	#$C,d1
00010174 6C00                       		bge.s	Obj50_Pause
00010176 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0001017A 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001017E 6600                       		bne.s	Obj50_Pause
00010180 4E75                       		rts	
00010182                            ; ===========================================================================
00010182                            
00010182                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010182 5528 0025                  		subq.b	#2,$25(a0)
00010186 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001018C 317C 0000 0010             		move.w	#0,$10(a0)
00010192 117C 0000 001C             		move.b	#0,$1C(a0)
00010198 4E75                       		rts	
0001019A                            ; ===========================================================================
0001019A                            Ani_obj50:
0001019A                            	include "_anim\obj50.asm"
0001019A                            ; ---------------------------------------------------------------------------
0001019A                            ; Animation script - Yadrin enemy
0001019A                            ; ---------------------------------------------------------------------------
0001019A 0000                       		dc.w byte_F920-Ani_obj50
0001019C 0000                       		dc.w byte_F924-Ani_obj50
0001019E 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000101A2 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000101AC                            		even
000101AC                            		even
000101AC                            
000101AC                            ; ---------------------------------------------------------------------------
000101AC                            ; Sprite mappings - Yadrin enemy (SYZ)
000101AC                            ; ---------------------------------------------------------------------------
000101AC                            Map_obj50:
000101AC                            	include "_maps\obj50.asm"
000101AC                            Map_ff24:
000101AC 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
000101AE 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
000101B0 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
000101B2 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
000101B4 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
000101B6 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
000101B8 05                         Map_ff24_C: 	dc.b $5
000101B9 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000101BE FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000101C3 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101C8 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101CD 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000101D2 05                         Map_ff24_26: 	dc.b $5
000101D3 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000101D8 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000101DD EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101E2 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101E7 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000101EC 05                         Map_ff24_40: 	dc.b $5
000101ED F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000101F2 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000101F7 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101FC F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010201 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010206 05                         Map_ff24_5A: 	dc.b $5
00010207 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001020C FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010211 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010216 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001021B 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010220 05                         Map_ff24_74: 	dc.b $5
00010221 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010226 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001022B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010230 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010235 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001023A 05                         Map_ff24_8E: 	dc.b $5
0001023B F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010240 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010245 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001024A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001024F 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010254                            	even
00010254                            	even
00010254                            
00010254                            ; ---------------------------------------------------------------------------
00010254                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010254                            ;
00010254                            ; variables:
00010254                            ; d1 = width
00010254                            ; d2 = height /	2 (when	jumping)
00010254                            ; d3 = height /	2 (when	walking)
00010254                            ; d4 = x-axis position
00010254                            ; ---------------------------------------------------------------------------
00010254                            
00010254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010254                            
00010254                            
00010254                            SolidObject:
00010254 4A28 0025                  		tst.b	$25(a0)
00010258 6700 0000                  		beq.w	loc_FAC8
0001025C 3401                       		move.w	d1,d2
0001025E D442                       		add.w	d2,d2
00010260 43F8 D000                  		lea	($FFFFD000).w,a1
00010264 0829 0001 0022             		btst	#1,$22(a1)
0001026A 6600                       		bne.s	loc_F9FE
0001026C 3029 0008                  		move.w	8(a1),d0
00010270 9068 0008                  		sub.w	8(a0),d0
00010274 D041                       		add.w	d1,d0
00010276 6B00                       		bmi.s	loc_F9FE
00010278 B042                       		cmp.w	d2,d0
0001027A 6500                       		bcs.s	loc_FA12
0001027C                            
0001027C                            loc_F9FE:
0001027C 08A9 0003 0022             		bclr	#3,$22(a1)
00010282 08A8 0003 0022             		bclr	#3,$22(a0)
00010288 4228 0025                  		clr.b	$25(a0)
0001028C 7800                       		moveq	#0,d4
0001028E 4E75                       		rts	
00010290                            ; ===========================================================================
00010290                            
00010290                            loc_FA12:
00010290 3404                       		move.w	d4,d2
00010292 4EB9 0000 8160             		jsr	MvSonicOnPtfm 
00010298 7800                       		moveq	#0,d4
0001029A 4E75                       		rts	
0001029C                            ; ===========================================================================
0001029C                            
0001029C                            SolidObject71:				; XREF: Obj71_Solid
0001029C 4A28 0025                  		tst.b	$25(a0)
000102A0 6700 0000                  		beq.w	loc_FAD0
000102A4 3401                       		move.w	d1,d2
000102A6 D442                       		add.w	d2,d2
000102A8 43F8 D000                  		lea	($FFFFD000).w,a1
000102AC 0829 0001 0022             		btst	#1,$22(a1)
000102B2 6600                       		bne.s	loc_FA44
000102B4 3029 0008                  		move.w	8(a1),d0
000102B8 9068 0008                  		sub.w	8(a0),d0
000102BC D041                       		add.w	d1,d0
000102BE 6B00                       		bmi.s	loc_FA44
000102C0 B042                       		cmp.w	d2,d0
000102C2 6500                       		bcs.s	loc_FA58
000102C4                            
000102C4                            loc_FA44:
000102C4 08A9 0003 0022             		bclr	#3,$22(a1)
000102CA 08A8 0003 0022             		bclr	#3,$22(a0)
000102D0 4228 0025                  		clr.b	$25(a0)
000102D4 7800                       		moveq	#0,d4
000102D6 4E75                       		rts	
000102D8                            ; ===========================================================================
000102D8                            
000102D8                            loc_FA58:
000102D8 3404                       		move.w	d4,d2
000102DA                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000102DA 7800                       		moveq	#0,d4
000102DC 4E75                       		rts	
000102DE                            ; ===========================================================================
000102DE                            
000102DE                            SolidObject2F:				; XREF: Obj2F_Solid
000102DE 43F8 D000                  		lea	($FFFFD000).w,a1
000102E2 4A28 0001                  		tst.b	1(a0)
000102E6 6A00 0000                  		bpl.w	loc_FB92
000102EA 3029 0008                  		move.w	8(a1),d0
000102EE 9068 0008                  		sub.w	8(a0),d0
000102F2 D041                       		add.w	d1,d0
000102F4 6B00 0000                  		bmi.w	loc_FB92
000102F8 3601                       		move.w	d1,d3
000102FA D643                       		add.w	d3,d3
000102FC B043                       		cmp.w	d3,d0
000102FE 6200 0000                  		bhi.w	loc_FB92
00010302 3A00                       		move.w	d0,d5
00010304 0828 0000 0001             		btst	#0,1(a0)
0001030A 6700                       		beq.s	loc_FA94
0001030C 4645                       		not.w	d5
0001030E DA43                       		add.w	d3,d5
00010310                            
00010310                            loc_FA94:
00010310 E24D                       		lsr.w	#1,d5
00010312 7600                       		moveq	#0,d3
00010314 1632 5000                  		move.b	(a2,d5.w),d3
00010318 9612                       		sub.b	(a2),d3
0001031A 3A28 000C                  		move.w	$C(a0),d5
0001031E 9A43                       		sub.w	d3,d5
00010320 1629 0016                  		move.b	$16(a1),d3
00010324 4883                       		ext.w	d3
00010326 D443                       		add.w	d3,d2
00010328 3629 000C                  		move.w	$C(a1),d3
0001032C 9645                       		sub.w	d5,d3
0001032E 5843                       		addq.w	#4,d3
00010330 D642                       		add.w	d2,d3
00010332 6B00 0000                  		bmi.w	loc_FB92
00010336 3802                       		move.w	d2,d4
00010338 D844                       		add.w	d4,d4
0001033A B644                       		cmp.w	d4,d3
0001033C 6400 0000                  		bcc.w	loc_FB92
00010340 6000 0000                  		bra.w	loc_FB0E
00010344                            ; ===========================================================================
00010344                            
00010344                            loc_FAC8:
00010344 4A28 0001                  		tst.b	1(a0)
00010348 6A00 0000                  		bpl.w	loc_FB92
0001034C                            
0001034C                            loc_FAD0:
0001034C 43F8 D000                  		lea	($FFFFD000).w,a1
00010350 3029 0008                  		move.w	8(a1),d0
00010354 9068 0008                  		sub.w	8(a0),d0
00010358 D041                       		add.w	d1,d0
0001035A 6B00 0000                  		bmi.w	loc_FB92
0001035E 3601                       		move.w	d1,d3
00010360 D643                       		add.w	d3,d3
00010362 B043                       		cmp.w	d3,d0
00010364 6200 0000                  		bhi.w	loc_FB92
00010368 1629 0016                  		move.b	$16(a1),d3
0001036C 4883                       		ext.w	d3
0001036E D443                       		add.w	d3,d2
00010370 3629 000C                  		move.w	$C(a1),d3
00010374 9668 000C                  		sub.w	$C(a0),d3
00010378 5843                       		addq.w	#4,d3
0001037A D642                       		add.w	d2,d3
0001037C 6B00 0000                  		bmi.w	loc_FB92
00010380 3802                       		move.w	d2,d4
00010382 D844                       		add.w	d4,d4
00010384 B644                       		cmp.w	d4,d3
00010386 6400 0000                  		bcc.w	loc_FB92
0001038A                            
0001038A                            loc_FB0E:
0001038A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001038E 6B00 0000                  		bmi.w	loc_FB92
00010392 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010398 6400 0000                  		bcc.w	loc_FB92
0001039C 4A78 FE08                  		tst.w	($FFFFFE08).w
000103A0 6600 0000                  		bne.w	loc_FBAC
000103A4 3A00                       		move.w	d0,d5
000103A6 B240                       		cmp.w	d0,d1
000103A8 6400                       		bcc.s	loc_FB36
000103AA D241                       		add.w	d1,d1
000103AC 9041                       		sub.w	d1,d0
000103AE 3A00                       		move.w	d0,d5
000103B0 4445                       		neg.w	d5
000103B2                            
000103B2                            loc_FB36:
000103B2 3203                       		move.w	d3,d1
000103B4 B443                       		cmp.w	d3,d2
000103B6 6400                       		bcc.s	loc_FB44
000103B8 5943                       		subq.w	#4,d3
000103BA 9644                       		sub.w	d4,d3
000103BC 3203                       		move.w	d3,d1
000103BE 4441                       		neg.w	d1
000103C0                            
000103C0                            loc_FB44:
000103C0 BA41                       		cmp.w	d1,d5
000103C2 6200 0000                  		bhi.w	loc_FBB0
000103C6 0C41 0004                  		cmpi.w	#4,d1
000103CA 6300                       		bls.s	loc_FB8C
000103CC 4A40                       		tst.w	d0
000103CE 6700                       		beq.s	loc_FB70
000103D0 6B00                       		bmi.s	loc_FB5E
000103D2 4A69 0010                  		tst.w	$10(a1)
000103D6 6B00                       		bmi.s	loc_FB70
000103D8 6000                       		bra.s	loc_FB64
000103DA                            ; ===========================================================================
000103DA                            
000103DA                            loc_FB5E:
000103DA 4A69 0010                  		tst.w	$10(a1)
000103DE 6A00                       		bpl.s	loc_FB70
000103E0                            
000103E0                            loc_FB64:
000103E0 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000103E6 337C 0000 0010             		move.w	#0,$10(a1)
000103EC                            
000103EC                            loc_FB70:
000103EC 9169 0008                  		sub.w	d0,8(a1)
000103F0 0829 0001 0022             		btst	#1,$22(a1)
000103F6 6600                       		bne.s	loc_FB8C
000103F8 08E9 0005 0022             		bset	#5,$22(a1)
000103FE 08E8 0005 0022             		bset	#5,$22(a0)
00010404 7801                       		moveq	#1,d4
00010406 4E75                       		rts	
00010408                            ; ===========================================================================
00010408                            
00010408                            loc_FB8C:
00010408 6100                       		bsr.s	loc_FBA0
0001040A 7801                       		moveq	#1,d4
0001040C 4E75                       		rts	
0001040E                            ; ===========================================================================
0001040E                            
0001040E                            loc_FB92:
0001040E 0828 0005 0022             		btst	#5,$22(a0)
00010414 6700                       		beq.s	loc_FBAC
00010416 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001041C                            
0001041C                            loc_FBA0:
0001041C 08A8 0005 0022             		bclr	#5,$22(a0)
00010422 08A9 0005 0022             		bclr	#5,$22(a1)
00010428                            
00010428                            loc_FBAC:
00010428 7800                       		moveq	#0,d4
0001042A 4E75                       		rts	
0001042C                            ; ===========================================================================
0001042C                            
0001042C                            loc_FBB0:
0001042C 4A43                       		tst.w	d3
0001042E 6B00                       		bmi.s	loc_FBBC
00010430 0C43 0010                  		cmpi.w	#$10,d3
00010434 6500                       		bcs.s	loc_FBEE
00010436 60D6                       		bra.s	loc_FB92
00010438                            ; ===========================================================================
00010438                            
00010438                            loc_FBBC:
00010438 4A69 0012                  		tst.w	$12(a1)
0001043C 6700                       		beq.s	loc_FBD6
0001043E 6A00                       		bpl.s	loc_FBD2
00010440 4A43                       		tst.w	d3
00010442 6A00                       		bpl.s	loc_FBD2
00010444 9769 000C                  		sub.w	d3,$C(a1)
00010448 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001044E                            
0001044E                            loc_FBD2:
0001044E 78FF                       		moveq	#-1,d4
00010450 4E75                       		rts	
00010452                            ; ===========================================================================
00010452                            
00010452                            loc_FBD6:
00010452 0829 0001 0022             		btst	#1,$22(a1)
00010458 66F4                       		bne.s	loc_FBD2
0001045A 2F08                       		move.l	a0,-(sp)
0001045C 2049                       		movea.l	a1,a0
0001045E 4EB9 0000 0000             		jsr	KillSonic
00010464 205F                       		movea.l	(sp)+,a0
00010466 78FF                       		moveq	#-1,d4
00010468 4E75                       		rts	
0001046A                            ; ===========================================================================
0001046A                            
0001046A                            loc_FBEE:
0001046A 5943                       		subq.w	#4,d3
0001046C 7200                       		moveq	#0,d1
0001046E 1228 0019                  		move.b	$19(a0),d1
00010472 3401                       		move.w	d1,d2
00010474 D442                       		add.w	d2,d2
00010476 D269 0008                  		add.w	8(a1),d1
0001047A 9268 0008                  		sub.w	8(a0),d1
0001047E 6B00                       		bmi.s	loc_FC28
00010480 B242                       		cmp.w	d2,d1
00010482 6400                       		bcc.s	loc_FC28
00010484 4A69 0012                  		tst.w	$12(a1)
00010488 6B00                       		bmi.s	loc_FC28
0001048A 9769 000C                  		sub.w	d3,$C(a1)
0001048E 5369 000C                  		subq.w	#1,$C(a1)
00010492 6100                       		bsr.s	sub_FC2C
00010494 117C 0002 0025             		move.b	#2,$25(a0)
0001049A 08E8 0003 0022             		bset	#3,$22(a0)
000104A0 78FF                       		moveq	#-1,d4
000104A2 4E75                       		rts	
000104A4                            ; ===========================================================================
000104A4                            
000104A4                            loc_FC28:
000104A4 7800                       		moveq	#0,d4
000104A6 4E75                       		rts	
000104A8                            ; End of function SolidObject
000104A8                            
000104A8                            
000104A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104A8                            
000104A8                            
000104A8                            sub_FC2C:				; XREF: SolidObject
000104A8 0829 0003 0022             		btst	#3,$22(a1)
000104AE 6700                       		beq.s	loc_FC4E
000104B0 7000                       		moveq	#0,d0
000104B2 1029 003D                  		move.b	$3D(a1),d0
000104B6 ED48                       		lsl.w	#6,d0
000104B8 0680 00FF D000             		addi.l	#$FFD000,d0
000104BE 2440                       		movea.l	d0,a2
000104C0 08AA 0003 0022             		bclr	#3,$22(a2)
000104C6 422A 0025                  		clr.b	$25(a2)
000104CA                            
000104CA                            loc_FC4E:
000104CA 3008                       		move.w	a0,d0
000104CC 0440 D000                  		subi.w	#-$3000,d0
000104D0 EC48                       		lsr.w	#6,d0
000104D2 0240 007F                  		andi.w	#$7F,d0
000104D6 1340 003D                  		move.b	d0,$3D(a1)
000104DA 137C 0000 0026             		move.b	#0,$26(a1)
000104E0 337C 0000 0012             		move.w	#0,$12(a1)
000104E6 3369 0010 0014             		move.w	$10(a1),$14(a1)
000104EC 0829 0001 0022             		btst	#1,$22(a1)
000104F2 6700                       		beq.s	loc_FC84
000104F4 2F08                       		move.l	a0,-(sp)
000104F6 2049                       		movea.l	a1,a0
000104F8 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000104FE 205F                       		movea.l	(sp)+,a0
00010500                            
00010500                            loc_FC84:
00010500 08E9 0003 0022             		bset	#3,$22(a1)
00010506 08E8 0003 0022             		bset	#3,$22(a0)
0001050C 4E75                       		rts	
0001050E                            ; End of function sub_FC2C
0001050E                            
0001050E                            ; ===========================================================================
0001050E                            ; ---------------------------------------------------------------------------
0001050E                            ; Object 51 - smashable	green block (MZ)
0001050E                            ; ---------------------------------------------------------------------------
0001050E                            
0001050E                            Obj51:					; XREF: Obj_Index
0001050E 7000                       		moveq	#0,d0
00010510 1028 0024                  		move.b	$24(a0),d0
00010514 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010518 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001051C 6000 FA0E                  		bra.w	MarkObjGone
00010520                            ; ===========================================================================
00010520 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010522 0000                       		dc.w Obj51_Solid-Obj51_Index
00010524 0000                       		dc.w Obj51_Display-Obj51_Index
00010526                            ; ===========================================================================
00010526                            
00010526                            Obj51_Main:				; XREF: Obj51_Index
00010526 5428 0024                  		addq.b	#2,$24(a0)
0001052A 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010532 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010538 117C 0004 0001             		move.b	#4,1(a0)
0001053E 117C 0010 0019             		move.b	#$10,$19(a0)
00010544 117C 0004 0018             		move.b	#4,$18(a0)
0001054A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010550                            
00010550                            Obj51_Solid:				; XREF: Obj51_Index
00010550 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010556 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001055C 323C 001B                  		move.w	#$1B,d1
00010560 343C 0010                  		move.w	#$10,d2
00010564 363C 0011                  		move.w	#$11,d3
00010568 3828 0008                  		move.w	8(a0),d4
0001056C 6100 FCE6                  		bsr.w	SolidObject
00010570 0828 0003 0022             		btst	#3,$22(a0)
00010576 6600                       		bne.s	Obj51_Smash
00010578                            
00010578                            locret_FCFC:
00010578 4E75                       		rts	
0001057A                            ; ===========================================================================
0001057A                            
0001057A                            Obj51_Smash:				; XREF: Obj51_Solid
0001057A 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010580 66F6                       		bne.s	locret_FCFC	; if not, branch
00010582 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010588 08E9 0002 0022             		bset	#2,$22(a1)
0001058E 137C 000E 0016             		move.b	#$E,$16(a1)
00010594 137C 0007 0017             		move.b	#7,$17(a1)
0001059A 137C 0002 001C             		move.b	#2,$1C(a1)
000105A0 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000105A6 08E9 0001 0022             		bset	#1,$22(a1)
000105AC 08A9 0003 0022             		bclr	#3,$22(a1)
000105B2 137C 0002 0024             		move.b	#2,$24(a1)
000105B8 08A8 0003 0022             		bclr	#3,$22(a0)
000105BE 4228 0025                  		clr.b	$25(a0)
000105C2 117C 0001 001A             		move.b	#1,$1A(a0)
000105C8 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000105CE 7203                       		moveq	#3,d1		; set number of	fragments to 4
000105D0 343C 0038                  		move.w	#$38,d2
000105D4 6100 D456                  		bsr.w	SmashObject
000105D8 6100 DD30                  		bsr.w	SingleObjLoad
000105DC 6600                       		bne.s	Obj51_Display
000105DE 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000105E2 3368 0008 0008             		move.w	8(a0),8(a1)
000105E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000105EE 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000105F2 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000105F6 0C42 0006                  		cmpi.w	#6,d2
000105FA 6500                       		bcs.s	Obj51_Bonus
000105FC 7406                       		moveq	#6,d2
000105FE                            
000105FE                            Obj51_Bonus:
000105FE 7000                       		moveq	#0,d0
00010600 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010604 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001060A 6500                       		bcs.s	loc_FD98	; if not, branch
0001060C 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010610 740A                       		moveq	#10,d2
00010612                            
00010612                            loc_FD98:
00010612 4EB9 0000 0000             		jsr	AddPoints
00010618 E24A                       		lsr.w	#1,d2
0001061A 1342 001A                  		move.b	d2,$1A(a1)
0001061E                            
0001061E                            Obj51_Display:				; XREF: Obj51_Index
0001061E 6100 D83E                  		bsr.w	SpeedToPos
00010622 0668 0038 0012             		addi.w	#$38,$12(a0)
00010628 6100 D85A                  		bsr.w	DisplaySprite
0001062C 4A28 0001                  		tst.b	1(a0)
00010630 6A00 D88E                  		bpl.w	DeleteObject
00010634 4E75                       		rts	
00010636                            ; ===========================================================================
00010636 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0001063A FF00 FF00                  		dc.w $FF00, $FF00
0001063E 0200 FE00                  		dc.w $200, $FE00
00010642 0100 FF00                  		dc.w $100, $FF00
00010646                            
00010646 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001064E                            ; ---------------------------------------------------------------------------
0001064E                            ; Sprite mappings - smashable green block (MZ)
0001064E                            ; ---------------------------------------------------------------------------
0001064E                            Map_obj51:
0001064E                            	include "_maps\obj51.asm"
0001064E                            ; ---------------------------------------------------------------------------
0001064E                            ; Sprite mappings - smashable green block (MZ)
0001064E                            ; ---------------------------------------------------------------------------
0001064E 0000                       		dc.w byte_FDD8-Map_obj51
00010650 0000                       		dc.w byte_FDE3-Map_obj51
00010652 02                         byte_FDD8:	dc.b 2
00010653 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010658 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001065D 04                         byte_FDE3:	dc.b 4
0001065E F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010663 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010668 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001066D 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010672                            		even
00010672                            		even
00010672                            
00010672                            ; ===========================================================================
00010672                            ; ---------------------------------------------------------------------------
00010672                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010672                            ; ---------------------------------------------------------------------------
00010672                            
00010672                            Obj52:					; XREF: Obj_Index
00010672 7000                       		moveq	#0,d0
00010674 1028 0024                  		move.b	$24(a0),d0
00010678 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001067C 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010680                            ; ===========================================================================
00010680 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010682 0000                       		dc.w Obj52_Platform-Obj52_Index
00010684 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010686                            
00010686 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010688 2001                       		dc.b $20, 1
0001068A 2002                       		dc.b $20, 2
0001068C 4003                       		dc.b $40, 3
0001068E 3004                       		dc.b $30, 4
00010690                            ; ===========================================================================
00010690                            
00010690                            Obj52_Main:				; XREF: Obj52_Index
00010690 5428 0024                  		addq.b	#2,$24(a0)
00010694 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001069C 317C 42B8 0002             		move.w	#$42B8,2(a0)
000106A2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000106A8 6600                       		bne.s	loc_FE44
000106AA 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000106B2 317C 43BC 0002             		move.w	#$43BC,2(a0)
000106B8 117C 0007 0016             		move.b	#7,$16(a0)
000106BE                            
000106BE                            loc_FE44:
000106BE 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000106C4 6600                       		bne.s	loc_FE60
000106C6 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000106CC 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000106D2 6700                       		beq.s	loc_FE60	; if yes, branch
000106D4 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000106DA                            
000106DA                            loc_FE60:
000106DA 117C 0004 0001             		move.b	#4,1(a0)
000106E0 7000                       		moveq	#0,d0
000106E2 1028 0028                  		move.b	$28(a0),d0
000106E6 E648                       		lsr.w	#3,d0
000106E8 0240 001E                  		andi.w	#$1E,d0
000106EC 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000106F0 115A 0019                  		move.b	(a2)+,$19(a0)
000106F4 115A 001A                  		move.b	(a2)+,$1A(a0)
000106F8 117C 0004 0018             		move.b	#4,$18(a0)
000106FE 3168 0008 0030             		move.w	8(a0),$30(a0)
00010704 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001070A 0228 000F 0028             		andi.b	#$F,$28(a0)
00010710                            
00010710                            Obj52_Platform:				; XREF: Obj52_Index
00010710 6100 0000                  		bsr.w	Obj52_Move
00010714 7200                       		moveq	#0,d1
00010716 1228 0019                  		move.b	$19(a0),d1
0001071A 4EB9 0000 7A8E             		jsr	(PlatformObject).l
00010720 6000                       		bra.s	Obj52_ChkDel
00010722                            ; ===========================================================================
00010722                            
00010722                            Obj52_StandOn:				; XREF: Obj52_Index
00010722 7200                       		moveq	#0,d1
00010724 1228 0019                  		move.b	$19(a0),d1
00010728 4EB9 0000 7C02             		jsr	(ExitPlatform).l
0001072E 3F28 0008                  		move.w	8(a0),-(sp)
00010732 6100 0000                  		bsr.w	Obj52_Move
00010736 341F                       		move.w	(sp)+,d2
00010738 4EB9 0000 816C             		jsr	(MvSonicOnPtfm2).l
0001073E                            
0001073E                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001073E 3028 0030                  		move.w	$30(a0),d0
00010742 0240 FF80                  		andi.w	#$FF80,d0
00010746 3238 F700                  		move.w	($FFFFF700).w,d1
0001074A 0441 0080                  		subi.w	#$80,d1
0001074E 0241 FF80                  		andi.w	#$FF80,d1
00010752 9041                       		sub.w	d1,d0
00010754 0C40 0280                  		cmpi.w	#$280,d0
00010758 6200 D766                  		bhi.w	DeleteObject
0001075C 6000 D726                  		bra.w	DisplaySprite
00010760                            ; ===========================================================================
00010760                            
00010760                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010760 7000                       		moveq	#0,d0
00010762 1028 0028                  		move.b	$28(a0),d0
00010766 0240 000F                  		andi.w	#$F,d0
0001076A D040                       		add.w	d0,d0
0001076C 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010770 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010774                            ; ===========================================================================
00010774 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010778 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001077C 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010780 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010784 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010788 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0001078A                            ; ===========================================================================
0001078A                            
0001078A                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0001078A 4E75                       		rts	
0001078C                            ; ===========================================================================
0001078C                            
0001078C                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001078C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010790 323C 0060                  		move.w	#$60,d1
00010794 0828 0000 0022             		btst	#0,$22(a0)
0001079A 6700                       		beq.s	loc_FF26
0001079C 4440                       		neg.w	d0
0001079E D041                       		add.w	d1,d0
000107A0                            
000107A0                            loc_FF26:
000107A0 3228 0030                  		move.w	$30(a0),d1
000107A4 9240                       		sub.w	d0,d1
000107A6 3141 0008                  		move.w	d1,8(a0)
000107AA 4E75                       		rts	
000107AC                            ; ===========================================================================
000107AC                            
000107AC                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000107AC 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000107B2 6600                       		bne.s	Obj52_02_Wait
000107B4 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000107B8                            
000107B8                            Obj52_02_Wait:
000107B8 4E75                       		rts	
000107BA                            ; ===========================================================================
000107BA                            
000107BA                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000107BA 7600                       		moveq	#0,d3
000107BC 1628 0019                  		move.b	$19(a0),d3
000107C0 6100 0000                  		bsr.w	ObjHitWallRight
000107C4 4A41                       		tst.w	d1		; has the platform hit a wall?
000107C6 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000107C8 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000107CC 3168 0008 0030             		move.w	8(a0),$30(a0)
000107D2 4E75                       		rts	
000107D4                            ; ===========================================================================
000107D4                            
000107D4                            Obj52_03_End:
000107D4 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000107D8 4E75                       		rts	
000107DA                            ; ===========================================================================
000107DA                            
000107DA                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000107DA 7600                       		moveq	#0,d3
000107DC 1628 0019                  		move.b	$19(a0),d3
000107E0 6100 0000                  		bsr.w	ObjHitWallRight
000107E4 4A41                       		tst.w	d1		; has the platform hit a wall?
000107E6 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000107E8 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000107EC 3168 0008 0030             		move.w	8(a0),$30(a0)
000107F2 4E75                       		rts	
000107F4                            ; ===========================================================================
000107F4                            
000107F4                            Obj52_05_End:
000107F4 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000107F8 4E75                       		rts	
000107FA                            ; ===========================================================================
000107FA                            
000107FA                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000107FA 6100 D662                  		bsr.w	SpeedToPos
000107FE 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010804 6100 0000                  		bsr.w	ObjHitFloor
00010808 4A41                       		tst.w	d1		; has platform hit the floor?
0001080A 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001080E D368 000C                  		add.w	d1,$C(a0)
00010812 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010816 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001081A                            
0001081A                            locret_FFA0:
0001081A 4E75                       		rts	
0001081C                            ; ===========================================================================
0001081C                            
0001081C                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001081C 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010820 6700                       		beq.s	Obj52_07_ChkDel
00010822 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010826                            
00010826                            Obj52_07_ChkDel:
00010826 588F                       		addq.l	#4,sp
00010828 3028 0030                  		move.w	$30(a0),d0
0001082C 0240 FF80                  		andi.w	#$FF80,d0
00010830 3238 F700                  		move.w	($FFFFF700).w,d1
00010834 0441 0080                  		subi.w	#$80,d1
00010838 0241 FF80                  		andi.w	#$FF80,d1
0001083C 9041                       		sub.w	d1,d0
0001083E 0C40 0280                  		cmpi.w	#$280,d0
00010842 6200 D67C                  		bhi.w	DeleteObject
00010846 4E75                       		rts	
00010848                            ; ===========================================================================
00010848                            
00010848                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010848 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001084C 323C 0080                  		move.w	#$80,d1
00010850 0828 0000 0022             		btst	#0,$22(a0)
00010856 6700                       		beq.s	loc_FFE2
00010858 4440                       		neg.w	d0
0001085A D041                       		add.w	d1,d0
0001085C                            
0001085C                            loc_FFE2:
0001085C 3228 0032                  		move.w	$32(a0),d1
00010860 9240                       		sub.w	d0,d1
00010862 3141 000C                  		move.w	d1,$C(a0)
00010866 4E75                       		rts	
00010868                            ; ===========================================================================
00010868                            
00010868                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010868 7600                       		moveq	#0,d3
0001086A 1628 0019                  		move.b	$19(a0),d3
0001086E D643                       		add.w	d3,d3
00010870 7208                       		moveq	#8,d1
00010872 0828 0000 0022             		btst	#0,$22(a0)
00010878 6700                       		beq.s	loc_10004
0001087A 4441                       		neg.w	d1
0001087C 4443                       		neg.w	d3
0001087E                            
0001087E                            loc_10004:
0001087E 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010882 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010884 3028 0008                  		move.w	8(a0),d0
00010888 9068 0030                  		sub.w	$30(a0),d0
0001088C B043                       		cmp.w	d3,d0
0001088E 6700                       		beq.s	Obj52_0A_Wait
00010890 D368 0008                  		add.w	d1,8(a0)	; move platform
00010894 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001089A 4E75                       		rts	
0001089C                            ; ===========================================================================
0001089C                            
0001089C                            Obj52_0A_Wait:
0001089C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000108A0 6600                       		bne.s	locret_1002E	; if time remains, branch
000108A2 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000108A8                            
000108A8                            locret_1002E:
000108A8 4E75                       		rts	
000108AA                            ; ===========================================================================
000108AA                            
000108AA                            Obj52_0A_Back:
000108AA 3028 0008                  		move.w	8(a0),d0
000108AE 9068 0030                  		sub.w	$30(a0),d0
000108B2 6700                       		beq.s	Obj52_0A_Reset
000108B4 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000108B8 4E75                       		rts	
000108BA                            ; ===========================================================================
000108BA                            
000108BA                            Obj52_0A_Reset:
000108BA 4268 0036                  		clr.w	$36(a0)
000108BE 5328 0028                  		subq.b	#1,$28(a0)
000108C2 4E75                       		rts	
000108C4                            ; ===========================================================================
000108C4                            ; ---------------------------------------------------------------------------
000108C4                            ; Sprite mappings - moving blocks (MZ, SBZ)
000108C4                            ; ---------------------------------------------------------------------------
000108C4                            Map_obj52:
000108C4                            	include "_maps\obj52mz.asm"
000108C4                            ; ---------------------------------------------------------------------------
000108C4                            ; Sprite mappings - moving blocks (MZ, SBZ)
000108C4                            ; ---------------------------------------------------------------------------
000108C4 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000108C8 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000108CC 0000                       		dc.w byte_1008F-Map_obj52
000108CE 01                         byte_10054:	dc.b 1
000108CF F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000108D4 02                         byte_1005A:	dc.b 2
000108D5 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000108DA F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000108DF 04                         byte_10065:	dc.b 4
000108E0 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000108E5 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000108EA F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000108EF 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000108F4 04                         byte_1007A:	dc.b 4
000108F5 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000108FA F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000108FF F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010904 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010909 03                         byte_1008F:	dc.b 3
0001090A F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001090F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010914 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001091A 00                         		even
0001091A 00                         		even
0001091A                            
0001091A                            ; ---------------------------------------------------------------------------
0001091A                            ; Sprite mappings - moving block (LZ)
0001091A                            ; ---------------------------------------------------------------------------
0001091A                            Map_obj52a:
0001091A                            	include "_maps\obj52lz.asm"
0001091A                            ; ---------------------------------------------------------------------------
0001091A                            ; Sprite mappings - moving block (LZ)
0001091A                            ; ---------------------------------------------------------------------------
0001091A 0000                       		dc.w byte_100A2-Map_obj52a
0001091C 01                         byte_100A2:	dc.b 1
0001091D F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010922                            		even
00010922                            		even
00010922                            
00010922                            ; ===========================================================================
00010922                            ; ---------------------------------------------------------------------------
00010922                            ; Object 55 - Basaran enemy (MZ)
00010922                            ; ---------------------------------------------------------------------------
00010922                            
00010922                            Obj55:					; XREF: Obj_Index
00010922 7000                       		moveq	#0,d0
00010924 1028 0024                  		move.b	$24(a0),d0
00010928 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001092C 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010930                            ; ===========================================================================
00010930 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010932 0000                       		dc.w Obj55_Action-Obj55_Index
00010934                            ; ===========================================================================
00010934                            
00010934                            Obj55_Main:				; XREF: Obj55_Index
00010934 5428 0024                  		addq.b	#2,$24(a0)
00010938 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010940 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010946 117C 0004 0001             		move.b	#4,1(a0)
0001094C 117C 000C 0016             		move.b	#$C,$16(a0)
00010952 117C 0002 0018             		move.b	#2,$18(a0)
00010958 117C 000B 0020             		move.b	#$B,$20(a0)
0001095E 117C 0010 0019             		move.b	#$10,$19(a0)
00010964                            
00010964                            Obj55_Action:				; XREF: Obj55_Index
00010964 7000                       		moveq	#0,d0
00010966 1028 0025                  		move.b	$25(a0),d0
0001096A 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001096E 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010972 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010978 6100 A558                  		bsr.w	AnimateSprite
0001097C 6000 F5AE                  		bra.w	MarkObjGone
00010980                            ; ===========================================================================
00010980 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010982 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010984 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010986 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010988                            ; ===========================================================================
00010988                            
00010988                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010988 343C 0080                  		move.w	#$80,d2
0001098C 6100 0000                  		bsr.w	Obj55_ChkSonic
00010990 6400                       		bcc.s	Obj55_NoDrop
00010992 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010996 3140 0036                  		move.w	d0,$36(a0)
0001099A 9068 000C                  		sub.w	$C(a0),d0
0001099E 6500                       		bcs.s	Obj55_NoDrop
000109A0 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000109A4 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000109A6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000109AA 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000109AC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000109B0 D007                       		add.b	d7,d0
000109B2 0200 0007                  		andi.b	#7,d0
000109B6 6600                       		bne.s	Obj55_NoDrop
000109B8 117C 0001 001C             		move.b	#1,$1C(a0)
000109BE 5428 0025                  		addq.b	#2,$25(a0)
000109C2                            
000109C2                            Obj55_NoDrop:
000109C2 4E75                       		rts	
000109C4                            ; ===========================================================================
000109C4                            
000109C4                            Obj55_DropFly:				; XREF: Obj55_Index2
000109C4 6100 D498                  		bsr.w	SpeedToPos
000109C8 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000109CE 343C 0080                  		move.w	#$80,d2
000109D2 6100 0000                  		bsr.w	Obj55_ChkSonic
000109D6 3028 0036                  		move.w	$36(a0),d0
000109DA 9068 000C                  		sub.w	$C(a0),d0
000109DE 6500                       		bcs.s	Obj55_ChkDel
000109E0 0C40 0010                  		cmpi.w	#$10,d0
000109E4 6400                       		bcc.s	locret_10180
000109E6 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000109EA 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000109F0 117C 0002 001C             		move.b	#2,$1C(a0)
000109F6 5428 0025                  		addq.b	#2,$25(a0)
000109FA                            
000109FA                            locret_10180:
000109FA 4E75                       		rts	
000109FC                            ; ===========================================================================
000109FC                            
000109FC                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000109FC 4A28 0001                  		tst.b	1(a0)
00010A00 6A00 D4BE                  		bpl.w	DeleteObject
00010A04 4E75                       		rts	
00010A06                            ; ===========================================================================
00010A06                            
00010A06                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010A06 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010A0A 0200 000F                  		andi.b	#$F,d0
00010A0E 6600                       		bne.s	loc_101A0
00010A10 303C 00C0                  		move.w	#$C0,d0
00010A14 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play flapping sound
00010A1A                            
00010A1A                            loc_101A0:
00010A1A 6100 D442                  		bsr.w	SpeedToPos
00010A1E 3038 D008                  		move.w	($FFFFD008).w,d0
00010A22 9068 0008                  		sub.w	8(a0),d0
00010A26 6400                       		bcc.s	loc_101B0
00010A28 4440                       		neg.w	d0
00010A2A                            
00010A2A                            loc_101B0:
00010A2A 0C40 0080                  		cmpi.w	#$80,d0
00010A2E 6500                       		bcs.s	locret_101C6
00010A30 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010A34 D007                       		add.b	d7,d0
00010A36 0200 0007                  		andi.b	#7,d0
00010A3A 6600                       		bne.s	locret_101C6
00010A3C 5428 0025                  		addq.b	#2,$25(a0)
00010A40                            
00010A40                            locret_101C6:
00010A40 4E75                       		rts	
00010A42                            ; ===========================================================================
00010A42                            
00010A42                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010A42 6100 D41A                  		bsr.w	SpeedToPos
00010A46 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010A4C 6100 0000                  		bsr.w	ObjHitCeiling
00010A50 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010A52 6A00                       		bpl.s	locret_101F4	; if not, branch
00010A54 9368 000C                  		sub.w	d1,$C(a0)
00010A58 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010A5E 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010A62 4268 0012                  		clr.w	$12(a0)
00010A66 4228 001C                  		clr.b	$1C(a0)
00010A6A 4228 0025                  		clr.b	$25(a0)
00010A6E                            
00010A6E                            locret_101F4:
00010A6E 4E75                       		rts	
00010A70                            ; ===========================================================================
00010A70                            
00010A70                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010A70 323C 0100                  		move.w	#$100,d1
00010A74 08E8 0000 0022             		bset	#0,$22(a0)
00010A7A 3038 D008                  		move.w	($FFFFD008).w,d0
00010A7E 9068 0008                  		sub.w	8(a0),d0
00010A82 6400                       		bcc.s	loc_10214
00010A84 4440                       		neg.w	d0
00010A86 4441                       		neg.w	d1
00010A88 08A8 0000 0022             		bclr	#0,$22(a0)
00010A8E                            
00010A8E                            loc_10214:
00010A8E B042                       		cmp.w	d2,d0
00010A90 4E75                       		rts	
00010A92                            ; ===========================================================================
00010A92 6100 D3CA                  		bsr.w	SpeedToPos
00010A96 6100 D3EC                  		bsr.w	DisplaySprite
00010A9A 4A28 0001                  		tst.b	1(a0)
00010A9E 6A00 D420                  		bpl.w	DeleteObject
00010AA2 4E75                       		rts	
00010AA4                            ; ===========================================================================
00010AA4                            Ani_obj55:
00010AA4                            	include "_anim\obj55.asm"
00010AA4                            ; ---------------------------------------------------------------------------
00010AA4                            ; Animation script - Basaran enemy
00010AA4                            ; ---------------------------------------------------------------------------
00010AA4 0000                       		dc.w byte_10230-Ani_obj55
00010AA6 0000                       		dc.w byte_10234-Ani_obj55
00010AA8 0000                       		dc.w byte_10238-Ani_obj55
00010AAA 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010AAE 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010AB2 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010AB8                            		even
00010AB8                            		even
00010AB8                            
00010AB8                            ; ---------------------------------------------------------------------------
00010AB8                            ; Sprite mappings - Basaran enemy (MZ)
00010AB8                            ; ---------------------------------------------------------------------------
00010AB8                            Map_obj55:
00010AB8                            	include "_maps\obj55.asm"
00010AB8                            ; ---------------------------------------------------------------------------
00010AB8                            ; Sprite mappings - Basaran enemy (MZ)
00010AB8                            ; ---------------------------------------------------------------------------
00010AB8 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010ABC 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010AC0 01                         byte_10246:	dc.b 1
00010AC1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010AC6 03                         byte_1024C:	dc.b 3
00010AC7 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010ACC 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010AD1 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010AD6 04                         byte_1025C:	dc.b 4
00010AD7 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010ADC 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010AE1 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010AE6 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010AEB 04                         byte_10271:	dc.b 4
00010AEC F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010AF1 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010AF6 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010AFB FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010B00                            		even
00010B00                            		even
00010B00                            
00010B00                            ; ===========================================================================
00010B00                            ; ---------------------------------------------------------------------------
00010B00                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010B00                            ; ---------------------------------------------------------------------------
00010B00                            
00010B00                            Obj56:					; XREF: Obj_Index
00010B00 7000                       		moveq	#0,d0
00010B02 1028 0024                  		move.b	$24(a0),d0
00010B06 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010B0A 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010B0E                            ; ===========================================================================
00010B0E 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010B10 0000                       		dc.w Obj56_Action-Obj56_Index
00010B12                            
00010B12 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010B14 2020                       		dc.b  $20, $20
00010B16 1020                       		dc.b  $10, $20
00010B18 201A                       		dc.b  $20, $1A
00010B1A 1027                       		dc.b  $10, $27
00010B1C 1010                       		dc.b  $10, $10
00010B1E 0820                       		dc.b	8, $20
00010B20 4010                       		dc.b  $40, $10
00010B22                            ; ===========================================================================
00010B22                            
00010B22                            Obj56_Main:				; XREF: Obj56_Index
00010B22 5428 0024                  		addq.b	#2,$24(a0)
00010B26 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010B2E 317C 4000 0002             		move.w	#$4000,2(a0)
00010B34 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010B3A 6600                       		bne.s	loc_102C8
00010B3C 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010B42                            
00010B42                            loc_102C8:
00010B42 117C 0004 0001             		move.b	#4,1(a0)
00010B48 117C 0003 0018             		move.b	#3,$18(a0)
00010B4E 7000                       		moveq	#0,d0
00010B50 1028 0028                  		move.b	$28(a0),d0
00010B54 E648                       		lsr.w	#3,d0
00010B56 0240 000E                  		andi.w	#$E,d0
00010B5A 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010B5E 115A 0019                  		move.b	(a2)+,$19(a0)
00010B62 1152 0016                  		move.b	(a2),$16(a0)
00010B66 E248                       		lsr.w	#1,d0
00010B68 1140 001A                  		move.b	d0,$1A(a0)
00010B6C 3168 0008 0034             		move.w	8(a0),$34(a0)
00010B72 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010B78 7000                       		moveq	#0,d0
00010B7A 1012                       		move.b	(a2),d0
00010B7C D040                       		add.w	d0,d0
00010B7E 3140 003A                  		move.w	d0,$3A(a0)
00010B82 7000                       		moveq	#0,d0
00010B84 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010B8A 6700                       		beq.s	loc_10332
00010B8C 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010B90 0240 000F                  		andi.w	#$F,d0
00010B94 5140                       		subq.w	#8,d0
00010B96 6500                       		bcs.s	loc_10332
00010B98 E548                       		lsl.w	#2,d0
00010B9A 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010B9E 45F2 0000                  		lea	(a2,d0.w),a2
00010BA2 4A52                       		tst.w	(a2)
00010BA4 6A00                       		bpl.s	loc_10332
00010BA6 0868 0000 0022             		bchg	#0,$22(a0)
00010BAC                            
00010BAC                            loc_10332:
00010BAC 1028 0028                  		move.b	$28(a0),d0
00010BB0 6A00                       		bpl.s	Obj56_Action
00010BB2 0200 000F                  		andi.b	#$F,d0
00010BB6 1140 003C                  		move.b	d0,$3C(a0)
00010BBA 117C 0005 0028             		move.b	#5,$28(a0)
00010BC0 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010BC6 6600                       		bne.s	Obj56_ChkGone
00010BC8 117C 000C 0028             		move.b	#$C,$28(a0)
00010BCE 317C 0080 003A             		move.w	#$80,$3A(a0)
00010BD4                            
00010BD4                            Obj56_ChkGone:
00010BD4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BD8 7000                       		moveq	#0,d0
00010BDA 1028 0023                  		move.b	$23(a0),d0
00010BDE 6700                       		beq.s	Obj56_Action
00010BE0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010BE6 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010BEC 6700                       		beq.s	Obj56_Action
00010BEE 5228 0028                  		addq.b	#1,$28(a0)
00010BF2 4268 003A                  		clr.w	$3A(a0)
00010BF6                            
00010BF6                            Obj56_Action:				; XREF: Obj56_Index
00010BF6 3F28 0008                  		move.w	8(a0),-(sp)
00010BFA 7000                       		moveq	#0,d0
00010BFC 1028 0028                  		move.b	$28(a0),d0	; get object type
00010C00 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010C04 D040                       		add.w	d0,d0
00010C06 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010C0A 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010C0E 381F                       		move.w	(sp)+,d4
00010C10 4A28 0001                  		tst.b	1(a0)
00010C14 6A00                       		bpl.s	Obj56_ChkDel
00010C16 7200                       		moveq	#0,d1
00010C18 1228 0019                  		move.b	$19(a0),d1
00010C1C 0641 000B                  		addi.w	#$B,d1
00010C20 7400                       		moveq	#0,d2
00010C22 1428 0016                  		move.b	$16(a0),d2
00010C26 3602                       		move.w	d2,d3
00010C28 5243                       		addq.w	#1,d3
00010C2A 6100 F628                  		bsr.w	SolidObject
00010C2E                            
00010C2E                            Obj56_ChkDel:
00010C2E 3028 0034                  		move.w	$34(a0),d0
00010C32 0240 FF80                  		andi.w	#$FF80,d0
00010C36 3238 F700                  		move.w	($FFFFF700).w,d1
00010C3A 0441 0080                  		subi.w	#$80,d1
00010C3E 0241 FF80                  		andi.w	#$FF80,d1
00010C42 9041                       		sub.w	d1,d0
00010C44 0C40 0280                  		cmpi.w	#$280,d0
00010C48 6200 D276                  		bhi.w	DeleteObject
00010C4C 6000 D236                  		bra.w	DisplaySprite
00010C50                            ; ===========================================================================
00010C50 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010C54 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010C58 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010C5C 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010C60 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010C64 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010C68 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010C6C                            ; ===========================================================================
00010C6C                            
00010C6C                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010C6C 4E75                       		rts	
00010C6E                            ; ===========================================================================
00010C6E                            
00010C6E                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010C6E 323C 0040                  		move.w	#$40,d1
00010C72 7000                       		moveq	#0,d0
00010C74 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010C78 6000                       		bra.s	Obj56_Move_LR
00010C7A                            ; ===========================================================================
00010C7A                            
00010C7A                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010C7A 323C 0080                  		move.w	#$80,d1
00010C7E 7000                       		moveq	#0,d0
00010C80 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C84                            
00010C84                            Obj56_Move_LR:
00010C84 0828 0000 0022             		btst	#0,$22(a0)
00010C8A 6700                       		beq.s	loc_10416
00010C8C 4440                       		neg.w	d0
00010C8E D041                       		add.w	d1,d0
00010C90                            
00010C90                            loc_10416:
00010C90 3228 0034                  		move.w	$34(a0),d1
00010C94 9240                       		sub.w	d0,d1
00010C96 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010C9A 4E75                       		rts	
00010C9C                            ; ===========================================================================
00010C9C                            
00010C9C                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010C9C 323C 0040                  		move.w	#$40,d1
00010CA0 7000                       		moveq	#0,d0
00010CA2 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010CA6 6000                       		bra.s	Obj56_Move_UD
00010CA8                            ; ===========================================================================
00010CA8                            
00010CA8                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010CA8 323C 0080                  		move.w	#$80,d1
00010CAC 7000                       		moveq	#0,d0
00010CAE 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010CB2                            
00010CB2                            Obj56_Move_UD:
00010CB2 0828 0000 0022             		btst	#0,$22(a0)
00010CB8 6700                       		beq.s	loc_10444
00010CBA 4440                       		neg.w	d0
00010CBC D041                       		add.w	d1,d0
00010CBE                            
00010CBE                            loc_10444:
00010CBE 3228 0030                  		move.w	$30(a0),d1
00010CC2 9240                       		sub.w	d0,d1
00010CC4 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010CC8 4E75                       		rts	
00010CCA                            ; ===========================================================================
00010CCA                            
00010CCA                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010CCA 4A28 0038                  		tst.b	$38(a0)
00010CCE 6600                       		bne.s	loc_104A4
00010CD0 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010CD6 6600                       		bne.s	loc_1047A	; if not, branch
00010CD8 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010CDE 6600                       		bne.s	loc_1047A
00010CE0 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010CE4 3038 D008                  		move.w	($FFFFD008).w,d0
00010CE8 B068 0008                  		cmp.w	8(a0),d0
00010CEC 6400                       		bcc.s	loc_1047A
00010CEE 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010CF4                            
00010CF4                            loc_1047A:
00010CF4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CF8 7000                       		moveq	#0,d0
00010CFA 1028 003C                  		move.b	$3C(a0),d0
00010CFE 0832 0000 0000             		btst	#0,(a2,d0.w)
00010D04 6700                       		beq.s	loc_104AE
00010D06 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010D0C 6600                       		bne.s	loc_1049E	; if not, branch
00010D0E 0C00 0003                  		cmpi.b	#3,d0
00010D12 6600                       		bne.s	loc_1049E
00010D14 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010D18                            
00010D18                            loc_1049E:
00010D18 117C 0001 0038             		move.b	#1,$38(a0)
00010D1E                            
00010D1E                            loc_104A4:
00010D1E 4A68 003A                  		tst.w	$3A(a0)
00010D22 6700                       		beq.s	loc_104C8
00010D24 5568 003A                  		subq.w	#2,$3A(a0)
00010D28                            
00010D28                            loc_104AE:
00010D28 3028 003A                  		move.w	$3A(a0),d0
00010D2C 0828 0000 0022             		btst	#0,$22(a0)
00010D32 6700                       		beq.s	loc_104BC
00010D34 4440                       		neg.w	d0
00010D36                            
00010D36                            loc_104BC:
00010D36 3228 0030                  		move.w	$30(a0),d1
00010D3A D240                       		add.w	d0,d1
00010D3C 3141 000C                  		move.w	d1,$C(a0)
00010D40 4E75                       		rts	
00010D42                            ; ===========================================================================
00010D42                            
00010D42                            loc_104C8:
00010D42 5228 0028                  		addq.b	#1,$28(a0)
00010D46 4228 0038                  		clr.b	$38(a0)
00010D4A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D4E 7000                       		moveq	#0,d0
00010D50 1028 0023                  		move.b	$23(a0),d0
00010D54 67D2                       		beq.s	loc_104AE
00010D56 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010D5C 60CA                       		bra.s	loc_104AE
00010D5E                            ; ===========================================================================
00010D5E                            
00010D5E                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010D5E 4A28 0038                  		tst.b	$38(a0)
00010D62 6600                       		bne.s	loc_10500
00010D64 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D68 7000                       		moveq	#0,d0
00010D6A 1028 003C                  		move.b	$3C(a0),d0
00010D6E 4A32 0000                  		tst.b	(a2,d0.w)
00010D72 6A00                       		bpl.s	loc_10512
00010D74 117C 0001 0038             		move.b	#1,$38(a0)
00010D7A                            
00010D7A                            loc_10500:
00010D7A 7000                       		moveq	#0,d0
00010D7C 1028 0016                  		move.b	$16(a0),d0
00010D80 D040                       		add.w	d0,d0
00010D82 B068 003A                  		cmp.w	$3A(a0),d0
00010D86 6700                       		beq.s	loc_1052C
00010D88 5468 003A                  		addq.w	#2,$3A(a0)
00010D8C                            
00010D8C                            loc_10512:
00010D8C 3028 003A                  		move.w	$3A(a0),d0
00010D90 0828 0000 0022             		btst	#0,$22(a0)
00010D96 6700                       		beq.s	loc_10520
00010D98 4440                       		neg.w	d0
00010D9A                            
00010D9A                            loc_10520:
00010D9A 3228 0030                  		move.w	$30(a0),d1
00010D9E D240                       		add.w	d0,d1
00010DA0 3141 000C                  		move.w	d1,$C(a0)
00010DA4 4E75                       		rts	
00010DA6                            ; ===========================================================================
00010DA6                            
00010DA6                            loc_1052C:
00010DA6 5328 0028                  		subq.b	#1,$28(a0)
00010DAA 4228 0038                  		clr.b	$38(a0)
00010DAE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010DB2 7000                       		moveq	#0,d0
00010DB4 1028 0023                  		move.b	$23(a0),d0
00010DB8 67D2                       		beq.s	loc_10512
00010DBA 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010DC0 60CA                       		bra.s	loc_10512
00010DC2                            ; ===========================================================================
00010DC2                            
00010DC2                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010DC2 4A28 0038                  		tst.b	$38(a0)
00010DC6 6600                       		bne.s	loc_1055E
00010DC8 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010DCC 6700                       		beq.s	locret_10578
00010DCE 117C 0001 0038             		move.b	#1,$38(a0)
00010DD4 4268 003A                  		clr.w	$3A(a0)
00010DD8                            
00010DD8                            loc_1055E:
00010DD8 5268 0008                  		addq.w	#1,8(a0)
00010DDC 3168 0008 0034             		move.w	8(a0),$34(a0)
00010DE2 5268 003A                  		addq.w	#1,$3A(a0)
00010DE6 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010DEC 6600                       		bne.s	locret_10578
00010DEE 4228 0028                  		clr.b	$28(a0)
00010DF2                            
00010DF2                            locret_10578:
00010DF2 4E75                       		rts	
00010DF4                            ; ===========================================================================
00010DF4                            
00010DF4                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010DF4 4A28 0038                  		tst.b	$38(a0)
00010DF8 6600                       		bne.s	loc_10598
00010DFA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010DFE 7000                       		moveq	#0,d0
00010E00 1028 003C                  		move.b	$3C(a0),d0
00010E04 0832 0000 0000             		btst	#0,(a2,d0.w)
00010E0A 6700                       		beq.s	loc_105A2
00010E0C 117C 0001 0038             		move.b	#1,$38(a0)
00010E12                            
00010E12                            loc_10598:
00010E12 4A68 003A                  		tst.w	$3A(a0)
00010E16 6700                       		beq.s	loc_105C0
00010E18 5568 003A                  		subq.w	#2,$3A(a0)
00010E1C                            
00010E1C                            loc_105A2:
00010E1C 3028 003A                  		move.w	$3A(a0),d0
00010E20 0828 0000 0022             		btst	#0,$22(a0)
00010E26 6700                       		beq.s	loc_105B4
00010E28 4440                       		neg.w	d0
00010E2A 0640 0080                  		addi.w	#$80,d0
00010E2E                            
00010E2E                            loc_105B4:
00010E2E 3228 0034                  		move.w	$34(a0),d1
00010E32 D240                       		add.w	d0,d1
00010E34 3141 0008                  		move.w	d1,8(a0)
00010E38 4E75                       		rts	
00010E3A                            ; ===========================================================================
00010E3A                            
00010E3A                            loc_105C0:
00010E3A 5228 0028                  		addq.b	#1,$28(a0)
00010E3E 4228 0038                  		clr.b	$38(a0)
00010E42 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E46 7000                       		moveq	#0,d0
00010E48 1028 0023                  		move.b	$23(a0),d0
00010E4C 67CE                       		beq.s	loc_105A2
00010E4E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010E54 60C6                       		bra.s	loc_105A2
00010E56                            ; ===========================================================================
00010E56                            
00010E56                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010E56 4A28 0038                  		tst.b	$38(a0)
00010E5A 6600                       		bne.s	loc_105F8
00010E5C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010E60 7000                       		moveq	#0,d0
00010E62 1028 003C                  		move.b	$3C(a0),d0
00010E66 4A32 0000                  		tst.b	(a2,d0.w)
00010E6A 6A00                       		bpl.s	loc_10606
00010E6C 117C 0001 0038             		move.b	#1,$38(a0)
00010E72                            
00010E72                            loc_105F8:
00010E72 303C 0080                  		move.w	#$80,d0
00010E76 B068 003A                  		cmp.w	$3A(a0),d0
00010E7A 6700                       		beq.s	loc_10624
00010E7C 5468 003A                  		addq.w	#2,$3A(a0)
00010E80                            
00010E80                            loc_10606:
00010E80 3028 003A                  		move.w	$3A(a0),d0
00010E84 0828 0000 0022             		btst	#0,$22(a0)
00010E8A 6700                       		beq.s	loc_10618
00010E8C 4440                       		neg.w	d0
00010E8E 0640 0080                  		addi.w	#$80,d0
00010E92                            
00010E92                            loc_10618:
00010E92 3228 0034                  		move.w	$34(a0),d1
00010E96 D240                       		add.w	d0,d1
00010E98 3141 0008                  		move.w	d1,8(a0)
00010E9C 4E75                       		rts	
00010E9E                            ; ===========================================================================
00010E9E                            
00010E9E                            loc_10624:
00010E9E 5328 0028                  		subq.b	#1,$28(a0)
00010EA2 4228 0038                  		clr.b	$38(a0)
00010EA6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010EAA 7000                       		moveq	#0,d0
00010EAC 1028 0023                  		move.b	$23(a0),d0
00010EB0 67CE                       		beq.s	loc_10606
00010EB2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010EB8 60C6                       		bra.s	loc_10606
00010EBA                            ; ===========================================================================
00010EBA                            
00010EBA                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010EBA 323C 0010                  		move.w	#$10,d1
00010EBE 7000                       		moveq	#0,d0
00010EC0 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010EC4 E248                       		lsr.w	#1,d0
00010EC6 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010ECA 6000                       		bra.s	Obj56_Move_Sqr
00010ECC                            ; ===========================================================================
00010ECC                            
00010ECC                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010ECC 323C 0030                  		move.w	#$30,d1
00010ED0 7000                       		moveq	#0,d0
00010ED2 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010ED6 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010EDA 6000                       		bra.s	Obj56_Move_Sqr
00010EDC                            ; ===========================================================================
00010EDC                            
00010EDC                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010EDC 323C 0050                  		move.w	#$50,d1
00010EE0 7000                       		moveq	#0,d0
00010EE2 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010EE6 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010EEA 6000                       		bra.s	Obj56_Move_Sqr
00010EEC                            ; ===========================================================================
00010EEC                            
00010EEC                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010EEC 323C 0070                  		move.w	#$70,d1
00010EF0 7000                       		moveq	#0,d0
00010EF2 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010EF6 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010EFA                            
00010EFA                            Obj56_Move_Sqr:
00010EFA 4A43                       		tst.w	d3
00010EFC 6600                       		bne.s	loc_1068E
00010EFE 5228 0022                  		addq.b	#1,$22(a0)
00010F02 0228 0003 0022             		andi.b	#3,$22(a0)
00010F08                            
00010F08                            loc_1068E:
00010F08 1428 0022                  		move.b	$22(a0),d2
00010F0C 0202 0003                  		andi.b	#3,d2
00010F10 6600                       		bne.s	loc_106AE
00010F12 9041                       		sub.w	d1,d0
00010F14 D068 0034                  		add.w	$34(a0),d0
00010F18 3140 0008                  		move.w	d0,8(a0)
00010F1C 4441                       		neg.w	d1
00010F1E D268 0030                  		add.w	$30(a0),d1
00010F22 3141 000C                  		move.w	d1,$C(a0)
00010F26 4E75                       		rts	
00010F28                            ; ===========================================================================
00010F28                            
00010F28                            loc_106AE:
00010F28 5302                       		subq.b	#1,d2
00010F2A 6600                       		bne.s	loc_106CC
00010F2C 5341                       		subq.w	#1,d1
00010F2E 9041                       		sub.w	d1,d0
00010F30 4440                       		neg.w	d0
00010F32 D068 0030                  		add.w	$30(a0),d0
00010F36 3140 000C                  		move.w	d0,$C(a0)
00010F3A 5241                       		addq.w	#1,d1
00010F3C D268 0034                  		add.w	$34(a0),d1
00010F40 3141 0008                  		move.w	d1,8(a0)
00010F44 4E75                       		rts	
00010F46                            ; ===========================================================================
00010F46                            
00010F46                            loc_106CC:
00010F46 5302                       		subq.b	#1,d2
00010F48 6600                       		bne.s	loc_106EA
00010F4A 5341                       		subq.w	#1,d1
00010F4C 9041                       		sub.w	d1,d0
00010F4E 4440                       		neg.w	d0
00010F50 D068 0034                  		add.w	$34(a0),d0
00010F54 3140 0008                  		move.w	d0,8(a0)
00010F58 5241                       		addq.w	#1,d1
00010F5A D268 0030                  		add.w	$30(a0),d1
00010F5E 3141 000C                  		move.w	d1,$C(a0)
00010F62 4E75                       		rts	
00010F64                            ; ===========================================================================
00010F64                            
00010F64                            loc_106EA:
00010F64 9041                       		sub.w	d1,d0
00010F66 D068 0030                  		add.w	$30(a0),d0
00010F6A 3140 000C                  		move.w	d0,$C(a0)
00010F6E 4441                       		neg.w	d1
00010F70 D268 0034                  		add.w	$34(a0),d1
00010F74 3141 0008                  		move.w	d1,8(a0)
00010F78 4E75                       		rts	
00010F7A                            ; ===========================================================================
00010F7A                            ; ---------------------------------------------------------------------------
00010F7A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010F7A                            ; ---------------------------------------------------------------------------
00010F7A                            Map_obj56:
00010F7A                            	include "_maps\obj56.asm"
00010F7A                            ; ---------------------------------------------------------------------------
00010F7A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010F7A                            ; ---------------------------------------------------------------------------
00010F7A 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010F7E 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010F82 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010F86 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010F8A 01                         byte_10710:	dc.b 1
00010F8B F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010F90 04                         byte_10716:	dc.b 4
00010F91 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010F96 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010F9B 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010FA0 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010FA5 02                         byte_1072B:	dc.b 2
00010FA6 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010FAB 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010FB0 04                         byte_10736:	dc.b 4
00010FB1 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010FB6 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010FBB 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010FC0 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010FC5 03                         byte_1074B:	dc.b 3
00010FC6 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010FCB F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010FD0 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010FD5 01                         byte_1075B:	dc.b 1
00010FD6 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010FDB 02                         byte_10761:	dc.b 2
00010FDC E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010FE1 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010FE6 04                         byte_1076C:	dc.b 4
00010FE7 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010FEC F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010FF1 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010FF6 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010FFC 00                         		even
00010FFC 00                         		even
00010FFC                            
00010FFC                            ; ===========================================================================
00010FFC                            ; ---------------------------------------------------------------------------
00010FFC                            ; Object 57 - spiked balls (SYZ, LZ)
00010FFC                            ; ---------------------------------------------------------------------------
00010FFC                            
00010FFC                            Obj57:					; XREF: Obj_Index
00010FFC 7000                       		moveq	#0,d0
00010FFE 1028 0024                  		move.b	$24(a0),d0
00011002 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00011006 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0001100A                            ; ===========================================================================
0001100A 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001100C 0000                       		dc.w Obj57_Move-Obj57_Index
0001100E 0000                       		dc.w Obj57_Display-Obj57_Index
00011010                            ; ===========================================================================
00011010                            
00011010                            Obj57_Main:				; XREF: Obj57_Index
00011010 5428 0024                  		addq.b	#2,$24(a0)
00011014 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001101C 317C 03BA 0002             		move.w	#$3BA,2(a0)
00011022 117C 0004 0001             		move.b	#4,1(a0)
00011028 117C 0004 0018             		move.b	#4,$18(a0)
0001102E 117C 0008 0019             		move.b	#8,$19(a0)
00011034 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001103A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011040 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011046 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001104C 6600                       		bne.s	loc_107E8
0001104E 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011054 317C 0310 0002             		move.w	#$310,2(a0)
0001105A 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011062                            
00011062                            loc_107E8:
00011062 1228 0028                  		move.b	$28(a0),d1	; get object type
00011066 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001106A 4881                       		ext.w	d1
0001106C E741                       		asl.w	#3,d1		; multiply by 8
0001106E 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011072 1028 0022                  		move.b	$22(a0),d0
00011076 E418                       		ror.b	#2,d0
00011078 0200 00C0                  		andi.b	#-$40,d0
0001107C 1140 0026                  		move.b	d0,$26(a0)
00011080 45E8 0029                  		lea	$29(a0),a2
00011084 1228 0028                  		move.b	$28(a0),d1	; get object type
00011088 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001108C 14FC 0000                  		move.b	#0,(a2)+
00011090 3601                       		move.w	d1,d3
00011092 E94B                       		lsl.w	#4,d3
00011094 1143 003C                  		move.b	d3,$3C(a0)
00011098 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001109A 6500                       		bcs.s	loc_10894
0001109C 0828 0003 0028             		btst	#3,$28(a0)
000110A2 6700                       		beq.s	Obj57_MakeChain
000110A4 5341                       		subq.w	#1,d1
000110A6 6500                       		bcs.s	loc_10894
000110A8                            
000110A8                            Obj57_MakeChain:
000110A8 6100 D260                  		bsr.w	SingleObjLoad
000110AC 6600                       		bne.s	loc_10894
000110AE 5228 0029                  		addq.b	#1,$29(a0)
000110B2 3A09                       		move.w	a1,d5
000110B4 0445 D000                  		subi.w	#-$3000,d5
000110B8 EC4D                       		lsr.w	#6,d5
000110BA 0245 007F                  		andi.w	#$7F,d5
000110BE 14C5                       		move.b	d5,(a2)+
000110C0 137C 0004 0024             		move.b	#4,$24(a1)
000110C6 1290                       		move.b	0(a0),0(a1)
000110C8 2368 0004 0004             		move.l	4(a0),4(a1)
000110CE 3368 0002 0002             		move.w	2(a0),2(a1)
000110D4 1368 0001 0001             		move.b	1(a0),1(a1)
000110DA 1368 0018 0018             		move.b	$18(a0),$18(a1)
000110E0 1368 0019 0019             		move.b	$19(a0),$19(a1)
000110E6 1368 0020 0020             		move.b	$20(a0),$20(a1)
000110EC 0403 0010                  		subi.b	#$10,d3
000110F0 1343 003C                  		move.b	d3,$3C(a1)
000110F4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000110FA 6600                       		bne.s	loc_10890
000110FC 4A03                       		tst.b	d3
000110FE 6600                       		bne.s	loc_10890
00011100 137C 0002 001A             		move.b	#2,$1A(a1)
00011106                            
00011106                            loc_10890:
00011106 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0001110A                            
0001110A                            loc_10894:
0001110A 3A08                       		move.w	a0,d5
0001110C 0445 D000                  		subi.w	#-$3000,d5
00011110 EC4D                       		lsr.w	#6,d5
00011112 0245 007F                  		andi.w	#$7F,d5
00011116 14C5                       		move.b	d5,(a2)+
00011118 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001111E 6600                       		bne.s	Obj57_Move
00011120 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00011126 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001112C                            
0001112C                            Obj57_Move:				; XREF: Obj57_Index
0001112C 6100 0000                  		bsr.w	Obj57_MoveSub
00011130 6000 0000                  		bra.w	Obj57_ChkDel
00011134                            ; ===========================================================================
00011134                            
00011134                            Obj57_MoveSub:				; XREF: Obj57_Move
00011134 3028 003E                  		move.w	$3E(a0),d0
00011138 D168 0026                  		add.w	d0,$26(a0)
0001113C 1028 0026                  		move.b	$26(a0),d0
00011140 4EB9 0000 2B58             		jsr	(CalcSine).l
00011146 3428 0038                  		move.w	$38(a0),d2
0001114A 3628 003A                  		move.w	$3A(a0),d3
0001114E 45E8 0029                  		lea	$29(a0),a2
00011152 7C00                       		moveq	#0,d6
00011154 1C1A                       		move.b	(a2)+,d6
00011156                            
00011156                            Obj57_MoveLoop:
00011156 7800                       		moveq	#0,d4
00011158 181A                       		move.b	(a2)+,d4
0001115A ED4C                       		lsl.w	#6,d4
0001115C 0684 00FF D000             		addi.l	#$FFD000,d4
00011162 2244                       		movea.l	d4,a1
00011164 7800                       		moveq	#0,d4
00011166 1829 003C                  		move.b	$3C(a1),d4
0001116A 2A04                       		move.l	d4,d5
0001116C C9C0                       		muls.w	d0,d4
0001116E E084                       		asr.l	#8,d4
00011170 CBC1                       		muls.w	d1,d5
00011172 E085                       		asr.l	#8,d5
00011174 D842                       		add.w	d2,d4
00011176 DA43                       		add.w	d3,d5
00011178 3344 000C                  		move.w	d4,$C(a1)
0001117C 3345 0008                  		move.w	d5,8(a1)
00011180 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011184 4E75                       		rts	
00011186                            ; ===========================================================================
00011186                            
00011186                            Obj57_ChkDel:				; XREF: Obj57_Move
00011186 3028 003A                  		move.w	$3A(a0),d0
0001118A 0240 FF80                  		andi.w	#$FF80,d0
0001118E 3238 F700                  		move.w	($FFFFF700).w,d1
00011192 0441 0080                  		subi.w	#$80,d1
00011196 0241 FF80                  		andi.w	#$FF80,d1
0001119A 9041                       		sub.w	d1,d0
0001119C 0C40 0280                  		cmpi.w	#$280,d0
000111A0 6200 0000                  		bhi.w	Obj57_Delete
000111A4 6000 CCDE                  		bra.w	DisplaySprite
000111A8                            ; ===========================================================================
000111A8                            
000111A8                            Obj57_Delete:				; XREF: Obj57_ChkDel
000111A8 7400                       		moveq	#0,d2
000111AA 45E8 0029                  		lea	$29(a0),a2
000111AE 141A                       		move.b	(a2)+,d2
000111B0                            
000111B0                            Obj57_DelLoop:
000111B0 7000                       		moveq	#0,d0
000111B2 101A                       		move.b	(a2)+,d0
000111B4 ED48                       		lsl.w	#6,d0
000111B6 0680 00FF D000             		addi.l	#$FFD000,d0
000111BC 2240                       		movea.l	d0,a1
000111BE 6100 CD02                  		bsr.w	DeleteObject2
000111C2 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000111C6                            
000111C6 4E75                       		rts	
000111C8                            ; ===========================================================================
000111C8                            
000111C8                            Obj57_Display:				; XREF: Obj57_Index
000111C8 6000 CCBA                  		bra.w	DisplaySprite
000111CC                            ; ===========================================================================
000111CC                            ; ---------------------------------------------------------------------------
000111CC                            ; Sprite mappings - chain of spiked balls (SYZ)
000111CC                            ; ---------------------------------------------------------------------------
000111CC                            Map_obj57:
000111CC                            	include "_maps\obj57syz.asm"
000111CC                            ; ---------------------------------------------------------------------------
000111CC                            ; Sprite mappings - chain of spiked balls (SYZ)
000111CC                            ; ---------------------------------------------------------------------------
000111CC 0000                       		dc.w byte_10958-Map_obj57
000111CE 01                         byte_10958:	dc.b 1
000111CF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000111D4                            		even
000111D4                            		even
000111D4                            
000111D4                            ; ---------------------------------------------------------------------------
000111D4                            ; Sprite mappings - spiked ball	on a chain (LZ)
000111D4                            ; ---------------------------------------------------------------------------
000111D4                            Map_obj57a:
000111D4                            	include "_maps\obj57lz.asm"
000111D4                            ; ---------------------------------------------------------------------------
000111D4                            ; Sprite mappings - spiked ball	on a chain (LZ)
000111D4                            ; ---------------------------------------------------------------------------
000111D4 0000                       		dc.w byte_10964-Map_obj57a
000111D6 0000                       		dc.w byte_1096A-Map_obj57a
000111D8 0000                       		dc.w byte_10970-Map_obj57a
000111DA 01                         byte_10964:	dc.b 1
000111DB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000111E0 01                         byte_1096A:	dc.b 1
000111E1 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000111E6 01                         byte_10970:	dc.b 1
000111E7 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000111EC                            		even
000111EC                            		even
000111EC                            
000111EC                            ; ===========================================================================
000111EC                            ; ---------------------------------------------------------------------------
000111EC                            ; Object 58 - giant spiked balls (SYZ)
000111EC                            ; ---------------------------------------------------------------------------
000111EC                            
000111EC                            Obj58:					; XREF: Obj_Index
000111EC 7000                       		moveq	#0,d0
000111EE 1028 0024                  		move.b	$24(a0),d0
000111F2 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000111F6 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000111FA                            ; ===========================================================================
000111FA 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000111FC 0000                       		dc.w Obj58_Move-Obj58_Index
000111FE                            ; ===========================================================================
000111FE                            
000111FE                            Obj58_Main:				; XREF: Obj58_Index
000111FE 5428 0024                  		addq.b	#2,$24(a0)
00011202 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0001120A 317C 0396 0002             		move.w	#$396,2(a0)
00011210 117C 0004 0001             		move.b	#4,1(a0)
00011216 117C 0004 0018             		move.b	#4,$18(a0)
0001121C 117C 0018 0019             		move.b	#$18,$19(a0)
00011222 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011228 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001122E 117C 0086 0020             		move.b	#$86,$20(a0)
00011234 1228 0028                  		move.b	$28(a0),d1	; get object type
00011238 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001123C 4881                       		ext.w	d1
0001123E E741                       		asl.w	#3,d1		; multiply by 8
00011240 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011244 1028 0022                  		move.b	$22(a0),d0
00011248 E418                       		ror.b	#2,d0
0001124A 0200 00C0                  		andi.b	#$C0,d0
0001124E 1140 0026                  		move.b	d0,$26(a0)
00011252 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011258                            
00011258                            Obj58_Move:				; XREF: Obj58_Index
00011258 7000                       		moveq	#0,d0
0001125A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001125E 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011262 D040                       		add.w	d0,d0
00011264 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011268 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001126C 3028 003A                  		move.w	$3A(a0),d0
00011270 0240 FF80                  		andi.w	#$FF80,d0
00011274 3238 F700                  		move.w	($FFFFF700).w,d1
00011278 0441 0080                  		subi.w	#$80,d1
0001127C 0241 FF80                  		andi.w	#$FF80,d1
00011280 9041                       		sub.w	d1,d0
00011282 0C40 0280                  		cmpi.w	#$280,d0
00011286 6200 CC38                  		bhi.w	DeleteObject
0001128A 6000 CBF8                  		bra.w	DisplaySprite
0001128E                            ; ===========================================================================
0001128E 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011290 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011292 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011294 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011296                            ; ===========================================================================
00011296                            
00011296                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011296 4E75                       		rts	
00011298                            ; ===========================================================================
00011298                            
00011298                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011298 323C 0060                  		move.w	#$60,d1
0001129C 7000                       		moveq	#0,d0
0001129E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000112A2 0828 0000 0022             		btst	#0,$22(a0)
000112A8 6700                       		beq.s	loc_10A38
000112AA 4440                       		neg.w	d0
000112AC D041                       		add.w	d1,d0
000112AE                            
000112AE                            loc_10A38:
000112AE 3228 003A                  		move.w	$3A(a0),d1
000112B2 9240                       		sub.w	d0,d1
000112B4 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000112B8 4E75                       		rts	
000112BA                            ; ===========================================================================
000112BA                            
000112BA                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000112BA 323C 0060                  		move.w	#$60,d1
000112BE 7000                       		moveq	#0,d0
000112C0 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000112C4 0828 0000 0022             		btst	#0,$22(a0)
000112CA 6700                       		beq.s	loc_10A5C
000112CC 4440                       		neg.w	d0
000112CE 0640 0080                  		addi.w	#$80,d0
000112D2                            
000112D2                            loc_10A5C:
000112D2 3228 0038                  		move.w	$38(a0),d1
000112D6 9240                       		sub.w	d0,d1
000112D8 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000112DC 4E75                       		rts	
000112DE                            ; ===========================================================================
000112DE                            
000112DE                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000112DE 3028 003E                  		move.w	$3E(a0),d0
000112E2 D168 0026                  		add.w	d0,$26(a0)
000112E6 1028 0026                  		move.b	$26(a0),d0
000112EA 4EB9 0000 2B58             		jsr	(CalcSine).l
000112F0 3428 0038                  		move.w	$38(a0),d2
000112F4 3628 003A                  		move.w	$3A(a0),d3
000112F8 7800                       		moveq	#0,d4
000112FA 1828 003C                  		move.b	$3C(a0),d4
000112FE 2A04                       		move.l	d4,d5
00011300 C9C0                       		muls.w	d0,d4
00011302 E084                       		asr.l	#8,d4
00011304 CBC1                       		muls.w	d1,d5
00011306 E085                       		asr.l	#8,d5
00011308 D842                       		add.w	d2,d4
0001130A DA43                       		add.w	d3,d5
0001130C 3144 000C                  		move.w	d4,$C(a0)
00011310 3145 0008                  		move.w	d5,8(a0)
00011314 4E75                       		rts	
00011316                            ; ===========================================================================
00011316                            ; ---------------------------------------------------------------------------
00011316                            ; Sprite mappings - SBZ	spiked ball on a chain
00011316                            ; ---------------------------------------------------------------------------
00011316                            Map_obj15b:
00011316                            	include "_maps\obj15sbz.asm"
00011316                            ; ---------------------------------------------------------------------------
00011316                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011316                            ; ---------------------------------------------------------------------------
00011316 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001131A 0000                       		dc.w byte_10AC6-Map_obj15b
0001131C 05                         byte_10AA6:	dc.b 5
0001131D E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011322 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011327 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001132C F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011331 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011336 01                         byte_10AC0:	dc.b 1
00011337 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001133C 02                         byte_10AC6:	dc.b 2
0001133D F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011342 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011348 00                         		even
00011348 00                         		even
00011348                            
00011348                            ; ===========================================================================
00011348                            ; ---------------------------------------------------------------------------
00011348                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011348                            ; ---------------------------------------------------------------------------
00011348                            
00011348                            Obj59:					; XREF: Obj_Index
00011348 7000                       		moveq	#0,d0
0001134A 1028 0024                  		move.b	$24(a0),d0
0001134E 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011352 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011356 3028 0032                  		move.w	$32(a0),d0
0001135A 0240 FF80                  		andi.w	#$FF80,d0
0001135E 3238 F700                  		move.w	($FFFFF700).w,d1
00011362 0441 0080                  		subi.w	#$80,d1
00011366 0241 FF80                  		andi.w	#$FF80,d1
0001136A 9041                       		sub.w	d1,d0
0001136C 0C40 0280                  		cmpi.w	#$280,d0
00011370 6200 CB4E                  		bhi.w	DeleteObject
00011374 6000 CB0E                  		bra.w	DisplaySprite
00011378                            ; ===========================================================================
00011378 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001137A 0000                       		dc.w Obj59_Platform-Obj59_Index
0001137C 0000                       		dc.w Obj59_Action-Obj59_Index
0001137E 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011380                            
00011380 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011382                            
00011382 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011384 2001                       		dc.b $20, 1
00011386 3401                       		dc.b $34, 1
00011388 1003                       		dc.b $10, 3
0001138A 2003                       		dc.b $20, 3
0001138C 3403                       		dc.b $34, 3
0001138E 1401                       		dc.b $14, 1
00011390 2401                       		dc.b $24, 1
00011392 2C01                       		dc.b $2C, 1
00011394 1403                       		dc.b $14, 3
00011396 2403                       		dc.b $24, 3
00011398 2C03                       		dc.b $2C, 3
0001139A 2005                       		dc.b $20, 5
0001139C 2007                       		dc.b $20, 7
0001139E 3009                       		dc.b $30, 9
000113A0                            ; ===========================================================================
000113A0                            
000113A0                            Obj59_Main:				; XREF: Obj59_Index
000113A0 5428 0024                  		addq.b	#2,$24(a0)
000113A4 7000                       		moveq	#0,d0
000113A6 1028 0028                  		move.b	$28(a0),d0
000113AA 6A00                       		bpl.s	Obj59_Main2
000113AC 5828 0024                  		addq.b	#4,$24(a0)
000113B0 0240 007F                  		andi.w	#$7F,d0
000113B4 C0FC 0006                  		mulu.w	#6,d0
000113B8 3140 003C                  		move.w	d0,$3C(a0)
000113BC 3140 003E                  		move.w	d0,$3E(a0)
000113C0 588F                       		addq.l	#4,sp
000113C2 4E75                       		rts	
000113C4                            ; ===========================================================================
000113C4                            
000113C4                            Obj59_Main2:
000113C4 E648                       		lsr.w	#3,d0
000113C6 0240 001E                  		andi.w	#$1E,d0
000113CA 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000113CE 115A 0019                  		move.b	(a2)+,$19(a0)
000113D2 115A 001A                  		move.b	(a2)+,$1A(a0)
000113D6 7000                       		moveq	#0,d0
000113D8 1028 0028                  		move.b	$28(a0),d0
000113DC D040                       		add.w	d0,d0
000113DE 0240 001E                  		andi.w	#$1E,d0
000113E2 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000113E6 101A                       		move.b	(a2)+,d0
000113E8 E548                       		lsl.w	#2,d0
000113EA 3140 003C                  		move.w	d0,$3C(a0)
000113EE 115A 0028                  		move.b	(a2)+,$28(a0)
000113F2 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000113FA 317C 4000 0002             		move.w	#$4000,2(a0)
00011400 117C 0004 0001             		move.b	#4,1(a0)
00011406 117C 0004 0018             		move.b	#4,$18(a0)
0001140C 3168 0008 0032             		move.w	8(a0),$32(a0)
00011412 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011418                            
00011418                            Obj59_Platform:				; XREF: Obj59_Index
00011418 7200                       		moveq	#0,d1
0001141A 1228 0019                  		move.b	$19(a0),d1
0001141E 4EB9 0000 7A8E             		jsr	(PlatformObject).l
00011424 6000 0000                  		bra.w	Obj59_Types
00011428                            ; ===========================================================================
00011428                            
00011428                            Obj59_Action:				; XREF: Obj59_Index
00011428 7200                       		moveq	#0,d1
0001142A 1228 0019                  		move.b	$19(a0),d1
0001142E 4EB9 0000 7C02             		jsr	(ExitPlatform).l
00011434 3F28 0008                  		move.w	8(a0),-(sp)
00011438 6100 0000                  		bsr.w	Obj59_Types
0001143C 341F                       		move.w	(sp)+,d2
0001143E 4A10                       		tst.b	0(a0)
00011440 6700                       		beq.s	locret_10BD4
00011442 4EF9 0000 816C             		jmp	(MvSonicOnPtfm2).l
00011448                            ; ===========================================================================
00011448                            
00011448                            locret_10BD4:
00011448 4E75                       		rts	
0001144A                            ; ===========================================================================
0001144A                            
0001144A                            Obj59_Types:
0001144A 7000                       		moveq	#0,d0
0001144C 1028 0028                  		move.b	$28(a0),d0
00011450 0240 000F                  		andi.w	#$F,d0
00011454 D040                       		add.w	d0,d0
00011456 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001145A 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001145E                            ; ===========================================================================
0001145E 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011462 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011466 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001146A 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001146E 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011472                            ; ===========================================================================
00011472                            
00011472                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011472 4E75                       		rts	
00011474                            ; ===========================================================================
00011474                            
00011474                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011474 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001147A 6600                       		bne.s	locret_10C0C
0001147C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011480                            
00011480                            locret_10C0C:
00011480 4E75                       		rts	
00011482                            ; ===========================================================================
00011482                            
00011482                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011482 6100 0000                  		bsr.w	Obj59_Move
00011486 3028 0034                  		move.w	$34(a0),d0
0001148A 4440                       		neg.w	d0
0001148C D068 0030                  		add.w	$30(a0),d0
00011490 3140 000C                  		move.w	d0,$C(a0)
00011494 4E75                       		rts	
00011496                            ; ===========================================================================
00011496                            
00011496                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011496 6100 0000                  		bsr.w	Obj59_Move
0001149A 3028 0034                  		move.w	$34(a0),d0
0001149E D068 0030                  		add.w	$30(a0),d0
000114A2 3140 000C                  		move.w	d0,$C(a0)
000114A6 4E75                       		rts	
000114A8                            ; ===========================================================================
000114A8                            
000114A8                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000114A8 6100 0000                  		bsr.w	Obj59_Move
000114AC 3028 0034                  		move.w	$34(a0),d0
000114B0 E240                       		asr.w	#1,d0
000114B2 4440                       		neg.w	d0
000114B4 D068 0030                  		add.w	$30(a0),d0
000114B8 3140 000C                  		move.w	d0,$C(a0)
000114BC 3028 0034                  		move.w	$34(a0),d0
000114C0 D068 0032                  		add.w	$32(a0),d0
000114C4 3140 0008                  		move.w	d0,8(a0)
000114C8 4E75                       		rts	
000114CA                            ; ===========================================================================
000114CA                            
000114CA                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000114CA 6100 0000                  		bsr.w	Obj59_Move
000114CE 3028 0034                  		move.w	$34(a0),d0
000114D2 E240                       		asr.w	#1,d0
000114D4 D068 0030                  		add.w	$30(a0),d0
000114D8 3140 000C                  		move.w	d0,$C(a0)
000114DC 3028 0034                  		move.w	$34(a0),d0
000114E0 4440                       		neg.w	d0
000114E2 D068 0032                  		add.w	$32(a0),d0
000114E6 3140 0008                  		move.w	d0,8(a0)
000114EA 4E75                       		rts	
000114EC                            ; ===========================================================================
000114EC                            
000114EC                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000114EC 6100 0000                  		bsr.w	Obj59_Move
000114F0 3028 0034                  		move.w	$34(a0),d0
000114F4 4440                       		neg.w	d0
000114F6 D068 0030                  		add.w	$30(a0),d0
000114FA 3140 000C                  		move.w	d0,$C(a0)
000114FE 4A28 0028                  		tst.b	$28(a0)
00011502 6700 0000                  		beq.w	loc_10C94
00011506 4E75                       		rts	
00011508                            ; ===========================================================================
00011508                            
00011508                            loc_10C94:
00011508 0828 0003 0022             		btst	#3,$22(a0)
0001150E 6700                       		beq.s	Obj59_Delete
00011510 08E9 0001 0022             		bset	#1,$22(a1)
00011516 08A9 0003 0022             		bclr	#3,$22(a1)
0001151C 137C 0002 0024             		move.b	#2,$24(a1)
00011522                            
00011522                            Obj59_Delete:
00011522 6000 C99C                  		bra.w	DeleteObject
00011526                            
00011526                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011526                            
00011526                            
00011526                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011526 3028 0038                  		move.w	$38(a0),d0
0001152A 4A28 003A                  		tst.b	$3A(a0)
0001152E 6600                       		bne.s	loc_10CC8
00011530 0C40 0800                  		cmpi.w	#$800,d0
00011534 6400                       		bcc.s	loc_10CD0
00011536 0640 0010                  		addi.w	#$10,d0
0001153A 6000                       		bra.s	loc_10CD0
0001153C                            ; ===========================================================================
0001153C                            
0001153C                            loc_10CC8:
0001153C 4A40                       		tst.w	d0
0001153E 6700                       		beq.s	loc_10CD0
00011540 0440 0010                  		subi.w	#$10,d0
00011544                            
00011544                            loc_10CD0:
00011544 3140 0038                  		move.w	d0,$38(a0)
00011548 48C0                       		ext.l	d0
0001154A E180                       		asl.l	#8,d0
0001154C D0A8 0034                  		add.l	$34(a0),d0
00011550 2140 0034                  		move.l	d0,$34(a0)
00011554 4840                       		swap	d0
00011556 3428 003C                  		move.w	$3C(a0),d2
0001155A B042                       		cmp.w	d2,d0
0001155C 6300                       		bls.s	loc_10CF0
0001155E 117C 0001 003A             		move.b	#1,$3A(a0)
00011564                            
00011564                            loc_10CF0:
00011564 D442                       		add.w	d2,d2
00011566 B042                       		cmp.w	d2,d0
00011568 6600                       		bne.s	locret_10CFA
0001156A 4228 0028                  		clr.b	$28(a0)
0001156E                            
0001156E                            locret_10CFA:
0001156E 4E75                       		rts	
00011570                            ; End of function Obj59_Move
00011570                            
00011570                            ; ===========================================================================
00011570                            
00011570                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011570 5368 003C                  		subq.w	#1,$3C(a0)
00011574 6600                       		bne.s	Obj59_ChkDel
00011576 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001157C 6100 CD8C                  		bsr.w	SingleObjLoad
00011580 6600                       		bne.s	Obj59_ChkDel
00011582 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011586 3368 0008 0008             		move.w	8(a0),8(a1)
0001158C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011592 137C 000E 0028             		move.b	#$E,$28(a1)
00011598                            
00011598                            Obj59_ChkDel:
00011598 588F                       		addq.l	#4,sp
0001159A 3028 0008                  		move.w	8(a0),d0
0001159E 0240 FF80                  		andi.w	#$FF80,d0
000115A2 3238 F700                  		move.w	($FFFFF700).w,d1
000115A6 0441 0080                  		subi.w	#$80,d1
000115AA 0241 FF80                  		andi.w	#$FF80,d1
000115AE 9041                       		sub.w	d1,d0
000115B0 0C40 0280                  		cmpi.w	#$280,d0
000115B4 6200 C90A                  		bhi.w	DeleteObject
000115B8 4E75                       		rts	
000115BA                            ; ===========================================================================
000115BA                            ; ---------------------------------------------------------------------------
000115BA                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000115BA                            ; ---------------------------------------------------------------------------
000115BA                            Map_obj59:
000115BA                            	include "_maps\obj59.asm"
000115BA                            ; ---------------------------------------------------------------------------
000115BA                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000115BA                            ; ---------------------------------------------------------------------------
000115BA 0000                       		dc.w byte_10D4A-Map_obj59
000115BC 03                         byte_10D4A:	dc.b 3
000115BD F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000115C2 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000115C7 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000115CC                            		even
000115CC                            		even
000115CC                            
000115CC                            ; ===========================================================================
000115CC                            ; ---------------------------------------------------------------------------
000115CC                            ; Object 5A - platforms	moving in circles (SLZ)
000115CC                            ; ---------------------------------------------------------------------------
000115CC                            
000115CC                            Obj5A:					; XREF: Obj_Index
000115CC 7000                       		moveq	#0,d0
000115CE 1028 0024                  		move.b	$24(a0),d0
000115D2 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000115D6 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000115DA 3028 0032                  		move.w	$32(a0),d0
000115DE 0240 FF80                  		andi.w	#$FF80,d0
000115E2 3238 F700                  		move.w	($FFFFF700).w,d1
000115E6 0441 0080                  		subi.w	#$80,d1
000115EA 0241 FF80                  		andi.w	#$FF80,d1
000115EE 9041                       		sub.w	d1,d0
000115F0 0C40 0280                  		cmpi.w	#$280,d0
000115F4 6200 C8CA                  		bhi.w	DeleteObject
000115F8 6000 C88A                  		bra.w	DisplaySprite
000115FC                            ; ===========================================================================
000115FC 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000115FE 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011600 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011602                            ; ===========================================================================
00011602                            
00011602                            Obj5A_Main:				; XREF: Obj5A_Index
00011602 5428 0024                  		addq.b	#2,$24(a0)
00011606 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001160E 317C 4000 0002             		move.w	#$4000,2(a0)
00011614 117C 0004 0001             		move.b	#4,1(a0)
0001161A 117C 0004 0018             		move.b	#4,$18(a0)
00011620 117C 0018 0019             		move.b	#$18,$19(a0)
00011626 3168 0008 0032             		move.w	8(a0),$32(a0)
0001162C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011632                            
00011632                            Obj5A_Platform:				; XREF: Obj5A_Index
00011632 7200                       		moveq	#0,d1
00011634 1228 0019                  		move.b	$19(a0),d1
00011638 4EB9 0000 7A8E             		jsr	(PlatformObject).l
0001163E 6000 0000                  		bra.w	Obj5A_Types
00011642                            ; ===========================================================================
00011642                            
00011642                            Obj5A_Action:				; XREF: Obj5A_Index
00011642 7200                       		moveq	#0,d1
00011644 1228 0019                  		move.b	$19(a0),d1
00011648 4EB9 0000 7C02             		jsr	(ExitPlatform).l
0001164E 3F28 0008                  		move.w	8(a0),-(sp)
00011652 6100 0000                  		bsr.w	Obj5A_Types
00011656 341F                       		move.w	(sp)+,d2
00011658 4EF9 0000 816C             		jmp	(MvSonicOnPtfm2).l
0001165E                            ; ===========================================================================
0001165E                            
0001165E                            Obj5A_Types:
0001165E 7000                       		moveq	#0,d0
00011660 1028 0028                  		move.b	$28(a0),d0
00011664 0240 000C                  		andi.w	#$C,d0
00011668 E248                       		lsr.w	#1,d0
0001166A 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001166E 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011672                            ; ===========================================================================
00011672 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011674 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011676                            ; ===========================================================================
00011676                            
00011676                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011676 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001167A 0401 0050                  		subi.b	#$50,d1
0001167E 4881                       		ext.w	d1
00011680 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011684 0402 0050                  		subi.b	#$50,d2
00011688 4882                       		ext.w	d2
0001168A 0828 0000 0028             		btst	#0,$28(a0)
00011690 6700                       		beq.s	loc_10E24
00011692 4441                       		neg.w	d1
00011694 4442                       		neg.w	d2
00011696                            
00011696                            loc_10E24:
00011696 0828 0001 0028             		btst	#1,$28(a0)
0001169C 6700                       		beq.s	loc_10E30
0001169E 4441                       		neg.w	d1
000116A0 C342                       		exg	d1,d2
000116A2                            
000116A2                            loc_10E30:
000116A2 D268 0032                  		add.w	$32(a0),d1
000116A6 3141 0008                  		move.w	d1,8(a0)
000116AA D468 0030                  		add.w	$30(a0),d2
000116AE 3142 000C                  		move.w	d2,$C(a0)
000116B2 4E75                       		rts	
000116B4                            ; ===========================================================================
000116B4                            
000116B4                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000116B4 1238 FE80                  		move.b	($FFFFFE80).w,d1
000116B8 0401 0050                  		subi.b	#$50,d1
000116BC 4881                       		ext.w	d1
000116BE 1438 FE84                  		move.b	($FFFFFE84).w,d2
000116C2 0402 0050                  		subi.b	#$50,d2
000116C6 4882                       		ext.w	d2
000116C8 0828 0000 0028             		btst	#0,$28(a0)
000116CE 6700                       		beq.s	loc_10E62
000116D0 4441                       		neg.w	d1
000116D2 4442                       		neg.w	d2
000116D4                            
000116D4                            loc_10E62:
000116D4 0828 0001 0028             		btst	#1,$28(a0)
000116DA 6700                       		beq.s	loc_10E6E
000116DC 4441                       		neg.w	d1
000116DE C342                       		exg	d1,d2
000116E0                            
000116E0                            loc_10E6E:
000116E0 4441                       		neg.w	d1
000116E2 D268 0032                  		add.w	$32(a0),d1
000116E6 3141 0008                  		move.w	d1,8(a0)
000116EA D468 0030                  		add.w	$30(a0),d2
000116EE 3142 000C                  		move.w	d2,$C(a0)
000116F2 4E75                       		rts	
000116F4                            ; ===========================================================================
000116F4                            ; ---------------------------------------------------------------------------
000116F4                            ; Sprite mappings - platforms that move	in circles (SLZ)
000116F4                            ; ---------------------------------------------------------------------------
000116F4                            Map_obj5A:
000116F4                            	include "_maps\obj5A.asm"
000116F4                            ; ---------------------------------------------------------------------------
000116F4                            ; Sprite mappings - platforms that move	in circles (SLZ)
000116F4                            ; ---------------------------------------------------------------------------
000116F4 0000                       		dc.w byte_10E84-Map_obj5A
000116F6 02                         byte_10E84:	dc.b 2
000116F7 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000116FC F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011702 00                         		even
00011702 00                         		even
00011702                            
00011702                            ; ===========================================================================
00011702                            ; ---------------------------------------------------------------------------
00011702                            ; Object 5B - blocks that form a staircase (SLZ)
00011702                            ; ---------------------------------------------------------------------------
00011702                            
00011702                            Obj5B:					; XREF: Obj_Index
00011702 7000                       		moveq	#0,d0
00011704 1028 0024                  		move.b	$24(a0),d0
00011708 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001170C 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011710 3028 0030                  		move.w	$30(a0),d0
00011714 0240 FF80                  		andi.w	#$FF80,d0
00011718 3238 F700                  		move.w	($FFFFF700).w,d1
0001171C 0441 0080                  		subi.w	#$80,d1
00011720 0241 FF80                  		andi.w	#$FF80,d1
00011724 9041                       		sub.w	d1,d0
00011726 0C40 0280                  		cmpi.w	#$280,d0
0001172A 6200 C794                  		bhi.w	DeleteObject
0001172E 6000 C754                  		bra.w	DisplaySprite
00011732                            ; ===========================================================================
00011732 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011734 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011736 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011738                            ; ===========================================================================
00011738                            
00011738                            Obj5B_Main:				; XREF: Obj5B_Index
00011738 5428 0024                  		addq.b	#2,$24(a0)
0001173C 7638                       		moveq	#$38,d3
0001173E 7801                       		moveq	#1,d4
00011740 0828 0000 0022             		btst	#0,$22(a0)
00011746 6700                       		beq.s	loc_10EDA
00011748 763B                       		moveq	#$3B,d3
0001174A 78FF                       		moveq	#-1,d4
0001174C                            
0001174C                            loc_10EDA:
0001174C 3428 0008                  		move.w	8(a0),d2
00011750 2248                       		movea.l	a0,a1
00011752 7203                       		moveq	#3,d1
00011754 6000                       		bra.s	Obj5B_MakeBlocks
00011756                            ; ===========================================================================
00011756                            
00011756                            Obj5B_Loop:
00011756 6100 CBC8                  		bsr.w	SingleObjLoad2
0001175A 6600 0000                  		bne.w	Obj5B_Move
0001175E 137C 0004 0024             		move.b	#4,$24(a1)
00011764                            
00011764                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011764 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011768 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011770 337C 4000 0002             		move.w	#$4000,2(a1)
00011776 137C 0004 0001             		move.b	#4,1(a1)
0001177C 137C 0003 0018             		move.b	#3,$18(a1)
00011782 137C 0010 0019             		move.b	#$10,$19(a1)
00011788 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001178E 3342 0008                  		move.w	d2,8(a1)
00011792 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011798 3368 0008 0030             		move.w	8(a0),$30(a1)
0001179E 3369 000C 0032             		move.w	$C(a1),$32(a1)
000117A4 0642 0020                  		addi.w	#$20,d2
000117A8 1343 0037                  		move.b	d3,$37(a1)
000117AC 2348 003C                  		move.l	a0,$3C(a1)
000117B0 D604                       		add.b	d4,d3
000117B2 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000117B6                            
000117B6                            Obj5B_Move:				; XREF: Obj5B_Index
000117B6 7000                       		moveq	#0,d0
000117B8 1028 0028                  		move.b	$28(a0),d0
000117BC 0240 0007                  		andi.w	#7,d0
000117C0 D040                       		add.w	d0,d0
000117C2 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000117C6 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000117CA                            
000117CA                            Obj5B_Solid:				; XREF: Obj5B_Index
000117CA 2468 003C                  		movea.l	$3C(a0),a2
000117CE 7000                       		moveq	#0,d0
000117D0 1028 0037                  		move.b	$37(a0),d0
000117D4 1032 0000                  		move.b	(a2,d0.w),d0
000117D8 D068 0032                  		add.w	$32(a0),d0
000117DC 3140 000C                  		move.w	d0,$C(a0)
000117E0 7200                       		moveq	#0,d1
000117E2 1228 0019                  		move.b	$19(a0),d1
000117E6 0641 000B                  		addi.w	#$B,d1
000117EA 343C 0010                  		move.w	#$10,d2
000117EE 363C 0011                  		move.w	#$11,d3
000117F2 3828 0008                  		move.w	8(a0),d4
000117F6 6100 EA5C                  		bsr.w	SolidObject
000117FA 4A04                       		tst.b	d4
000117FC 6A00                       		bpl.s	loc_10F92
000117FE 1544 0036                  		move.b	d4,$36(a2)
00011802                            
00011802                            loc_10F92:
00011802 0828 0003 0022             		btst	#3,$22(a0)
00011808 6700                       		beq.s	locret_10FA0
0001180A 157C 0001 0036             		move.b	#1,$36(a2)
00011810                            
00011810                            locret_10FA0:
00011810 4E75                       		rts	
00011812                            ; ===========================================================================
00011812 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011814 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011816 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011818 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001181A                            ; ===========================================================================
0001181A                            
0001181A                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001181A 4A68 0034                  		tst.w	$34(a0)
0001181E 6600                       		bne.s	loc_10FC0
00011820 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011826 6600                       		bne.s	locret_10FBE
00011828 317C 001E 0034             		move.w	#$1E,$34(a0)
0001182E                            
0001182E                            locret_10FBE:
0001182E 4E75                       		rts	
00011830                            ; ===========================================================================
00011830                            
00011830                            loc_10FC0:
00011830 5368 0034                  		subq.w	#1,$34(a0)
00011834 66F8                       		bne.s	locret_10FBE
00011836 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001183A 4E75                       		rts	
0001183C                            ; ===========================================================================
0001183C                            
0001183C                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001183C 4A68 0034                  		tst.w	$34(a0)
00011840 6600                       		bne.s	loc_10FE0
00011842 4A28 0036                  		tst.b	$36(a0)
00011846 6A00                       		bpl.s	locret_10FDE
00011848 317C 003C 0034             		move.w	#$3C,$34(a0)
0001184E                            
0001184E                            locret_10FDE:
0001184E 4E75                       		rts	
00011850                            ; ===========================================================================
00011850                            
00011850                            loc_10FE0:
00011850 5368 0034                  		subq.w	#1,$34(a0)
00011854 6600                       		bne.s	loc_10FEC
00011856 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001185A 4E75                       		rts	
0001185C                            ; ===========================================================================
0001185C                            
0001185C                            loc_10FEC:
0001185C 43E8 0038                  		lea	$38(a0),a1
00011860 3028 0034                  		move.w	$34(a0),d0
00011864 E408                       		lsr.b	#2,d0
00011866 0200 0001                  		andi.b	#1,d0
0001186A 12C0                       		move.b	d0,(a1)+
0001186C 0A00 0001                  		eori.b	#1,d0
00011870 12C0                       		move.b	d0,(a1)+
00011872 0A00 0001                  		eori.b	#1,d0
00011876 12C0                       		move.b	d0,(a1)+
00011878 0A00 0001                  		eori.b	#1,d0
0001187C 12C0                       		move.b	d0,(a1)+
0001187E 4E75                       		rts	
00011880                            ; ===========================================================================
00011880                            
00011880                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011880 43E8 0038                  		lea	$38(a0),a1
00011884 0C11 0080                  		cmpi.b	#$80,(a1)
00011888 6700                       		beq.s	locret_11038
0001188A 5211                       		addq.b	#1,(a1)
0001188C 7200                       		moveq	#0,d1
0001188E 1219                       		move.b	(a1)+,d1
00011890 4841                       		swap	d1
00011892 E289                       		lsr.l	#1,d1
00011894 2401                       		move.l	d1,d2
00011896 E289                       		lsr.l	#1,d1
00011898 2601                       		move.l	d1,d3
0001189A D682                       		add.l	d2,d3
0001189C 4841                       		swap	d1
0001189E 4842                       		swap	d2
000118A0 4843                       		swap	d3
000118A2 12C3                       		move.b	d3,(a1)+
000118A4 12C2                       		move.b	d2,(a1)+
000118A6 12C1                       		move.b	d1,(a1)+
000118A8                            
000118A8                            locret_11038:
000118A8 4E75                       		rts	
000118AA 4E75                       		rts	
000118AC                            ; ===========================================================================
000118AC                            ; ---------------------------------------------------------------------------
000118AC                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000118AC                            ; ---------------------------------------------------------------------------
000118AC                            Map_obj5B:
000118AC                            	include "_maps\obj5B.asm"
000118AC                            ; ---------------------------------------------------------------------------
000118AC                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000118AC                            ; ---------------------------------------------------------------------------
000118AC 0000                       		dc.w byte_1103E-Map_obj5B
000118AE 01                         byte_1103E:	dc.b 1
000118AF F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000118B4                            		even
000118B4                            		even
000118B4                            
000118B4                            ; ===========================================================================
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            ; Object 5C - metal girders in foreground (SLZ)
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            
000118B4                            Obj5C:					; XREF: Obj_Index
000118B4 7000                       		moveq	#0,d0
000118B6 1028 0024                  		move.b	$24(a0),d0
000118BA 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000118BE 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000118C2                            ; ===========================================================================
000118C2 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000118C4 0000                       		dc.w Obj5C_Display-Obj5C_Index
000118C6                            ; ===========================================================================
000118C6                            
000118C6                            Obj5C_Main:				; XREF: Obj5C_Index
000118C6 5428 0024                  		addq.b	#2,$24(a0)
000118CA 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000118D2 317C 83CC 0002             		move.w	#$83CC,2(a0)
000118D8 117C 0010 0019             		move.b	#$10,$19(a0)
000118DE                            
000118DE                            Obj5C_Display:				; XREF: Obj5C_Index
000118DE 2238 F700                  		move.l	($FFFFF700).w,d1
000118E2 D281                       		add.l	d1,d1
000118E4 4841                       		swap	d1
000118E6 4441                       		neg.w	d1
000118E8 3141 0008                  		move.w	d1,8(a0)
000118EC 2238 F704                  		move.l	($FFFFF704).w,d1
000118F0 D281                       		add.l	d1,d1
000118F2 4841                       		swap	d1
000118F4 0241 003F                  		andi.w	#$3F,d1
000118F8 4441                       		neg.w	d1
000118FA 0641 0100                  		addi.w	#$100,d1
000118FE 3141 000A                  		move.w	d1,$A(a0)
00011902 6000 C580                  		bra.w	DisplaySprite
00011906                            ; ===========================================================================
00011906                            ; ---------------------------------------------------------------------------
00011906                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011906                            ; ---------------------------------------------------------------------------
00011906                            Map_obj5C:
00011906                            	include "_maps\obj5C.asm"
00011906                            ; ---------------------------------------------------------------------------
00011906                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011906                            ; ---------------------------------------------------------------------------
00011906 0000                       		dc.w byte_11098-Map_obj5C
00011908 09                         byte_11098:	dc.b 9
00011909 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001190E A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011913 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011918 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001191D 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011922 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011927 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001192C 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011931 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011936                            		even
00011936                            		even
00011936                            
00011936                            ; ===========================================================================
00011936                            ; ---------------------------------------------------------------------------
00011936                            ; Object 1B - water surface (LZ)
00011936                            ; ---------------------------------------------------------------------------
00011936                            
00011936                            Obj1B:					; XREF: Obj_Index
00011936 7000                       		moveq	#0,d0
00011938 1028 0024                  		move.b	$24(a0),d0
0001193C 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011940 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011944                            ; ===========================================================================
00011944 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011946 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011948                            ; ===========================================================================
00011948                            
00011948                            Obj1B_Main:				; XREF: Obj1B_Index
00011948 5428 0024                  		addq.b	#2,$24(a0)
0001194C 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011954 317C C300 0002             		move.w	#$C300,2(a0)
0001195A 117C 0004 0001             		move.b	#4,1(a0)
00011960 117C 0080 0019             		move.b	#$80,$19(a0)
00011966 3168 0008 0030             		move.w	8(a0),$30(a0)
0001196C                            
0001196C                            Obj1B_Action:				; XREF: Obj1B_Index
0001196C 3238 F700                  		move.w	($FFFFF700).w,d1
00011970 0241 FFE0                  		andi.w	#$FFE0,d1
00011974 D268 0030                  		add.w	$30(a0),d1
00011978 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001197E 6700                       		beq.s	loc_11114
00011980 0641 0020                  		addi.w	#$20,d1
00011984                            
00011984                            loc_11114:
00011984 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011988 3238 F646                  		move.w	($FFFFF646).w,d1
0001198C 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011990 4A28 0032                  		tst.b	$32(a0)
00011994 6600                       		bne.s	Obj1B_Animate
00011996 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001199C 6700                       		beq.s	loc_1114A	; if not, branch
0001199E 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000119A2 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000119A8 6000                       		bra.s	Obj1B_Display
000119AA                            ; ===========================================================================
000119AA                            
000119AA                            Obj1B_Animate:				; XREF: loc_11114
000119AA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000119AE 6600                       		bne.s	Obj1B_Display	; if yes, branch
000119B0 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000119B6 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000119BA                            
000119BA                            loc_1114A:				; XREF: loc_11114
000119BA 5328 001E                  		subq.b	#1,$1E(a0)
000119BE 6A00                       		bpl.s	Obj1B_Display
000119C0 117C 0007 001E             		move.b	#7,$1E(a0)
000119C6 5228 001A                  		addq.b	#1,$1A(a0)
000119CA 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000119D0 6500                       		bcs.s	Obj1B_Display
000119D2 117C 0000 001A             		move.b	#0,$1A(a0)
000119D8                            
000119D8                            Obj1B_Display:
000119D8 6000 C4AA                  		bra.w	DisplaySprite
000119DC                            ; ===========================================================================
000119DC                            ; ---------------------------------------------------------------------------
000119DC                            ; Sprite mappings - water surface (LZ)
000119DC                            ; ---------------------------------------------------------------------------
000119DC                            Map_obj1B:
000119DC                            	include "_maps\obj1B.asm"
000119DC                            ; ---------------------------------------------------------------------------
000119DC                            ; Sprite mappings - water surface (LZ)
000119DC                            ; ---------------------------------------------------------------------------
000119DC 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000119E0 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000119E4 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000119E8 03                         byte_11178:	dc.b 3
000119E9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000119EE FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000119F3 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000119F8 03                         byte_11188:	dc.b 3
000119F9 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000119FE FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011A03 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011A08 03                         byte_11198:	dc.b 3
00011A09 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011A0E FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011A13 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011A18 06                         byte_111A8:	dc.b 6
00011A19 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011A1E FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011A23 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011A28 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011A2D FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011A32 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011A37 06                         byte_111C7:	dc.b 6
00011A38 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011A3D FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011A42 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011A47 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011A4C FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011A51 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011A56 06                         byte_111E6:	dc.b 6
00011A57 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011A5C FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011A61 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011A66 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011A6B FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011A70 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011A76 00                         		even
00011A76 00                         		even
00011A76                            
00011A76                            ; ===========================================================================
00011A76                            ; ---------------------------------------------------------------------------
00011A76                            ; Object 0B - pole that	breaks (LZ)
00011A76                            ; ---------------------------------------------------------------------------
00011A76                            
00011A76                            Obj0B:					; XREF: Obj_Index
00011A76 7000                       		moveq	#0,d0
00011A78 1028 0024                  		move.b	$24(a0),d0
00011A7C 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011A80 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011A84                            ; ===========================================================================
00011A84 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011A86 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011A88 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011A8A                            ; ===========================================================================
00011A8A                            
00011A8A                            Obj0B_Main:				; XREF: Obj0B_Index
00011A8A 5428 0024                  		addq.b	#2,$24(a0)
00011A8E 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011A96 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011A9C 117C 0004 0001             		move.b	#4,1(a0)
00011AA2 117C 0008 0019             		move.b	#8,$19(a0)
00011AA8 117C 0004 0018             		move.b	#4,$18(a0)
00011AAE 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011AB4 7000                       		moveq	#0,d0
00011AB6 1028 0028                  		move.b	$28(a0),d0	; get object type
00011ABA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011ABE 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011AC2                            
00011AC2                            Obj0B_Action:				; XREF: Obj0B_Index
00011AC2 4A28 0032                  		tst.b	$32(a0)
00011AC6 6700                       		beq.s	Obj0B_Grab
00011AC8 4A68 0030                  		tst.w	$30(a0)
00011ACC 6700                       		beq.s	Obj0B_MoveUp
00011ACE 5368 0030                  		subq.w	#1,$30(a0)
00011AD2 6600                       		bne.s	Obj0B_MoveUp
00011AD4 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011ADA 6000                       		bra.s	Obj0B_Release
00011ADC                            ; ===========================================================================
00011ADC                            
00011ADC                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011ADC 43F8 D000                  		lea	($FFFFD000).w,a1
00011AE0 3028 000C                  		move.w	$C(a0),d0
00011AE4 0440 0018                  		subi.w	#$18,d0
00011AE8 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011AEE 6700                       		beq.s	Obj0B_MoveDown
00011AF0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011AF4 B069 000C                  		cmp.w	$C(a1),d0
00011AF8 6500                       		bcs.s	Obj0B_MoveDown
00011AFA 3340 000C                  		move.w	d0,$C(a1)
00011AFE                            
00011AFE                            Obj0B_MoveDown:
00011AFE 0640 0024                  		addi.w	#$24,d0
00011B02 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011B08 6700                       		beq.s	Obj0B_LetGo
00011B0A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011B0E B069 000C                  		cmp.w	$C(a1),d0
00011B12 6400                       		bcc.s	Obj0B_LetGo
00011B14 3340 000C                  		move.w	d0,$C(a1)
00011B18                            
00011B18                            Obj0B_LetGo:
00011B18 1038 F603                  		move.b	($FFFFF603).w,d0
00011B1C 0240 0070                  		andi.w	#$70,d0
00011B20 6700                       		beq.s	Obj0B_Display
00011B22                            
00011B22                            Obj0B_Release:				; XREF: Obj0B_Action
00011B22 4228 0020                  		clr.b	$20(a0)
00011B26 5428 0024                  		addq.b	#2,$24(a0)
00011B2A 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011B2E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011B32 4228 0032                  		clr.b	$32(a0)
00011B36 6000                       		bra.s	Obj0B_Display
00011B38                            ; ===========================================================================
00011B38                            
00011B38                            Obj0B_Grab:				; XREF: Obj0B_Action
00011B38 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011B3C 6700                       		beq.s	Obj0B_Display	; if not, branch
00011B3E 43F8 D000                  		lea	($FFFFD000).w,a1
00011B42 3028 0008                  		move.w	8(a0),d0
00011B46 0640 0014                  		addi.w	#$14,d0
00011B4A B069 0008                  		cmp.w	8(a1),d0
00011B4E 6400                       		bcc.s	Obj0B_Display
00011B50 4228 0021                  		clr.b	$21(a0)
00011B54 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011B5A 6400                       		bcc.s	Obj0B_Display
00011B5C 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011B60 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011B64 3028 0008                  		move.w	8(a0),d0
00011B68 0640 0014                  		addi.w	#$14,d0
00011B6C 3340 0008                  		move.w	d0,8(a1)
00011B70 08A9 0000 0022             		bclr	#0,$22(a1)
00011B76 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011B7C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011B82 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011B88 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011B8E                            
00011B8E                            Obj0B_Display:				; XREF: Obj0B_Index
00011B8E 6000 E39C                  		bra.w	MarkObjGone
00011B92                            ; ===========================================================================
00011B92                            ; ---------------------------------------------------------------------------
00011B92                            ; Sprite mappings - pole that breaks (LZ)
00011B92                            ; ---------------------------------------------------------------------------
00011B92                            Map_obj0B:
00011B92                            	include "_maps\obj0B.asm"
00011B92                            ; ---------------------------------------------------------------------------
00011B92                            ; Sprite mappings - pole that breaks (LZ)
00011B92                            ; ---------------------------------------------------------------------------
00011B92 0000                       		dc.w byte_11326-Map_obj0B
00011B94 0000                       		dc.w byte_11331-Map_obj0B
00011B96 02                         byte_11326:	dc.b 2			; normal pole
00011B97 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011B9C 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011BA1 04                         byte_11331:	dc.b 4			; broken pole
00011BA2 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011BA7 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011BAC 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011BB1 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011BB6                            		even
00011BB6                            		even
00011BB6                            
00011BB6                            ; ===========================================================================
00011BB6                            ; ---------------------------------------------------------------------------
00011BB6                            ; Object 0C - flapping door (LZ)
00011BB6                            ; ---------------------------------------------------------------------------
00011BB6                            
00011BB6                            Obj0C:					; XREF: Obj_Index
00011BB6 7000                       		moveq	#0,d0
00011BB8 1028 0024                  		move.b	$24(a0),d0
00011BBC 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011BC0 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011BC4                            ; ===========================================================================
00011BC4 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011BC6 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011BC8                            ; ===========================================================================
00011BC8                            
00011BC8                            Obj0C_Main:				; XREF: Obj0C_Index
00011BC8 5428 0024                  		addq.b	#2,$24(a0)
00011BCC 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011BD4 317C 4328 0002             		move.w	#$4328,2(a0)
00011BDA 0028 0004 0001             		ori.b	#4,1(a0)
00011BE0 117C 0028 0019             		move.b	#$28,$19(a0)
00011BE6 7000                       		moveq	#0,d0
00011BE8 1028 0028                  		move.b	$28(a0),d0	; get object type
00011BEC C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011BF0 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011BF4                            
00011BF4                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011BF4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011BF8 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011BFA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011C00 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011C06 4A28 0001                  		tst.b	1(a0)
00011C0A 6A00                       		bpl.s	Obj0C_Solid
00011C0C 303C 00BB                  		move.w	#$BB,d0
00011C10 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play door sound
00011C16                            
00011C16                            Obj0C_Solid:
00011C16 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011C1C 6100 92B4                  		bsr.w	AnimateSprite
00011C20 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011C24 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011C28 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011C2A 3038 D008                  		move.w	($FFFFD008).w,d0
00011C2E B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011C32 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011C34 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011C3A 323C 0013                  		move.w	#$13,d1
00011C3E 343C 0020                  		move.w	#$20,d2
00011C42 3602                       		move.w	d2,d3
00011C44 5243                       		addq.w	#1,d3
00011C46 3828 0008                  		move.w	8(a0),d4
00011C4A 6100 E608                  		bsr.w	SolidObject	; make the door	solid
00011C4E                            
00011C4E                            Obj0C_Display:
00011C4E 6000 E2DC                  		bra.w	MarkObjGone
00011C52                            ; ===========================================================================
00011C52                            Ani_obj0C:
00011C52                            	include "_anim\obj0C.asm"
00011C52                            ; ---------------------------------------------------------------------------
00011C52                            ; Animation script - flapping door (LZ)
00011C52                            ; ---------------------------------------------------------------------------
00011C52 0000                       		dc.w byte_113E6-Ani_obj0C
00011C54 0000                       		dc.w byte_113EC-Ani_obj0C
00011C56 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011C5C 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011C62                            		even
00011C62                            		even
00011C62                            
00011C62                            ; ---------------------------------------------------------------------------
00011C62                            ; Sprite mappings - flapping door (LZ)
00011C62                            ; ---------------------------------------------------------------------------
00011C62                            Map_obj0C:
00011C62                            	include "_maps\obj0C.asm"
00011C62                            ; ---------------------------------------------------------------------------
00011C62                            ; Sprite mappings - flapping door (LZ)
00011C62                            ; ---------------------------------------------------------------------------
00011C62 0000                       		dc.w byte_113F8-Map_obj0C
00011C64 0000                       		dc.w byte_11403-Map_obj0C
00011C66 0000                       		dc.w byte_1140E-Map_obj0C
00011C68 02                         byte_113F8:	dc.b 2
00011C69 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011C6E 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011C73 02                         byte_11403:	dc.b 2
00011C74 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011C79 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011C7E 02                         byte_1140E:	dc.b 2
00011C7F D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011C84 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011C8A 00                         		even
00011C8A 00                         		even
00011C8A                            
00011C8A                            ; ===========================================================================
00011C8A                            ; ---------------------------------------------------------------------------
00011C8A                            ; Object 71 - invisible	solid blocks
00011C8A                            ; ---------------------------------------------------------------------------
00011C8A                            
00011C8A                            Obj71:					; XREF: Obj_Index
00011C8A 7000                       		moveq	#0,d0
00011C8C 1028 0024                  		move.b	$24(a0),d0
00011C90 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011C94 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011C98                            ; ===========================================================================
00011C98 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011C9A 0000                       		dc.w Obj71_Solid-Obj71_Index
00011C9C                            ; ===========================================================================
00011C9C                            
00011C9C                            Obj71_Main:				; XREF: Obj71_Index
00011C9C 5428 0024                  		addq.b	#2,$24(a0)
00011CA0 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011CA8 317C 8680 0002             		move.w	#$8680,2(a0)
00011CAE 0028 0004 0001             		ori.b	#4,1(a0)
00011CB4 1028 0028                  		move.b	$28(a0),d0	; get object type
00011CB8 1200                       		move.b	d0,d1
00011CBA 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011CBE 0640 0010                  		addi.w	#$10,d0
00011CC2 E248                       		lsr.w	#1,d0
00011CC4 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011CC8 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011CCC 5241                       		addq.w	#1,d1
00011CCE E749                       		lsl.w	#3,d1
00011CD0 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011CD4                            
00011CD4                            Obj71_Solid:				; XREF: Obj71_Index
00011CD4 6100 C428                  		bsr.w	ChkObjOnScreen
00011CD8 6600                       		bne.s	Obj71_ChkDel
00011CDA 7200                       		moveq	#0,d1
00011CDC 1228 0019                  		move.b	$19(a0),d1
00011CE0 0641 000B                  		addi.w	#$B,d1
00011CE4 7400                       		moveq	#0,d2
00011CE6 1428 0016                  		move.b	$16(a0),d2
00011CEA 3602                       		move.w	d2,d3
00011CEC 5243                       		addq.w	#1,d3
00011CEE 3828 0008                  		move.w	8(a0),d4
00011CF2 6100 E5A8                  		bsr.w	SolidObject71
00011CF6                            
00011CF6                            Obj71_ChkDel:
00011CF6 3028 0008                  		move.w	8(a0),d0
00011CFA 0240 FF80                  		andi.w	#$FF80,d0
00011CFE 3238 F700                  		move.w	($FFFFF700).w,d1
00011D02 0441 0080                  		subi.w	#$80,d1
00011D06 0241 FF80                  		andi.w	#$FF80,d1
00011D0A 9041                       		sub.w	d1,d0
00011D0C 0C40 0280                  		cmpi.w	#$280,d0
00011D10 6200                       		bhi.s	Obj71_Delete
00011D12 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011D16 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011D18 4EFA C16A                  		jmp	DisplaySprite	; if yes, display the object
00011D1C                            ; ===========================================================================
00011D1C                            
00011D1C                            Obj71_NoDisplay:
00011D1C 4E75                       		rts	
00011D1E                            ; ===========================================================================
00011D1E                            
00011D1E                            Obj71_Delete:
00011D1E 4EFA C1A0                  		jmp	DeleteObject
00011D22                            ; ===========================================================================
00011D22                            ; ---------------------------------------------------------------------------
00011D22                            ; Sprite mappings - invisible solid blocks
00011D22                            ; ---------------------------------------------------------------------------
00011D22                            Map_obj71:
00011D22                            	include "_maps\obj71.asm"
00011D22                            ; ---------------------------------------------------------------------------
00011D22                            ; Sprite mappings - invisible solid blocks
00011D22                            ; ---------------------------------------------------------------------------
00011D22 0000                       		dc.w byte_114BC-Map_obj71
00011D24 0000                       		dc.w byte_114D1-Map_obj71
00011D26 0000                       		dc.w byte_114E6-Map_obj71
00011D28 04                         byte_114BC:	dc.b 4
00011D29 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011D2E F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011D33 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011D38 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011D3D 04                         byte_114D1:	dc.b 4
00011D3E E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011D43 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011D48 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011D4D 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011D52 04                         byte_114E6:	dc.b 4
00011D53 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011D58 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011D5D 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011D62 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011D68 00                         		even
00011D68 00                         		even
00011D68                            
00011D68                            ; ===========================================================================
00011D68                            ; ---------------------------------------------------------------------------
00011D68                            ; Object 5D - fans (SLZ)
00011D68                            ; ---------------------------------------------------------------------------
00011D68                            
00011D68                            Obj5D:					; XREF: Obj_Index
00011D68 7000                       		moveq	#0,d0
00011D6A 1028 0024                  		move.b	$24(a0),d0
00011D6E 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011D72 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011D76                            ; ===========================================================================
00011D76 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011D78 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011D7A                            ; ===========================================================================
00011D7A                            
00011D7A                            Obj5D_Main:				; XREF: Obj5D_Index
00011D7A 5428 0024                  		addq.b	#2,$24(a0)
00011D7E 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011D86 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011D8C 0028 0004 0001             		ori.b	#4,1(a0)
00011D92 117C 0010 0019             		move.b	#$10,$19(a0)
00011D98 117C 0004 0018             		move.b	#4,$18(a0)
00011D9E                            
00011D9E                            Obj5D_Delay:				; XREF: Obj5D_Index
00011D9E 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011DA4 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011DA6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011DAA 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011DAC 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011DB2 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011DB8 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011DBA 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011DC0                            
00011DC0                            Obj5D_Blow:
00011DC0 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011DC4 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011DC8 43F8 D000                  		lea	($FFFFD000).w,a1
00011DCC 3029 0008                  		move.w	8(a1),d0
00011DD0 9068 0008                  		sub.w	8(a0),d0
00011DD4 0828 0000 0022             		btst	#0,$22(a0)
00011DDA 6600                       		bne.s	Obj5D_ChkSonic
00011DDC 4440                       		neg.w	d0
00011DDE                            
00011DDE                            Obj5D_ChkSonic:
00011DDE 0640 0050                  		addi.w	#$50,d0
00011DE2 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011DE6 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011DE8 3229 000C                  		move.w	$C(a1),d1
00011DEC 0641 0060                  		addi.w	#$60,d1
00011DF0 9268 000C                  		sub.w	$C(a0),d1
00011DF4 6500                       		bcs.s	Obj5D_Animate
00011DF6 0C41 0070                  		cmpi.w	#$70,d1
00011DFA 6400                       		bcc.s	Obj5D_Animate
00011DFC 0440 0050                  		subi.w	#$50,d0
00011E00 6400                       		bcc.s	loc_1159A
00011E02 4640                       		not.w	d0
00011E04 D040                       		add.w	d0,d0
00011E06                            
00011E06                            loc_1159A:
00011E06 0640 0060                  		addi.w	#$60,d0
00011E0A 0828 0000 0022             		btst	#0,$22(a0)
00011E10 6600                       		bne.s	loc_115A8
00011E12 4440                       		neg.w	d0
00011E14                            
00011E14                            loc_115A8:
00011E14 4400                       		neg.b	d0
00011E16 E840                       		asr.w	#4,d0
00011E18 0828 0000 0028             		btst	#0,$28(a0)
00011E1E 6700                       		beq.s	Obj5D_MoveSonic
00011E20 4440                       		neg.w	d0
00011E22                            
00011E22                            Obj5D_MoveSonic:
00011E22 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011E26                            
00011E26                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011E26 5328 001E                  		subq.b	#1,$1E(a0)
00011E2A 6A00                       		bpl.s	Obj5D_ChkDel
00011E2C 117C 0000 001E             		move.b	#0,$1E(a0)
00011E32 5228 001B                  		addq.b	#1,$1B(a0)
00011E36 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011E3C 6500                       		bcs.s	loc_115D8
00011E3E 117C 0000 001B             		move.b	#0,$1B(a0)
00011E44                            
00011E44                            loc_115D8:
00011E44 7000                       		moveq	#0,d0
00011E46 0828 0000 0028             		btst	#0,$28(a0)
00011E4C 6700                       		beq.s	loc_115E4
00011E4E 7002                       		moveq	#2,d0
00011E50                            
00011E50                            loc_115E4:
00011E50 D028 001B                  		add.b	$1B(a0),d0
00011E54 1140 001A                  		move.b	d0,$1A(a0)
00011E58                            
00011E58                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011E58 6100 C02A                  		bsr.w	DisplaySprite
00011E5C 3028 0008                  		move.w	8(a0),d0
00011E60 0240 FF80                  		andi.w	#$FF80,d0
00011E64 3238 F700                  		move.w	($FFFFF700).w,d1
00011E68 0441 0080                  		subi.w	#$80,d1
00011E6C 0241 FF80                  		andi.w	#$FF80,d1
00011E70 9041                       		sub.w	d1,d0
00011E72 0C40 0280                  		cmpi.w	#$280,d0
00011E76 6200 C048                  		bhi.w	DeleteObject
00011E7A 4E75                       		rts	
00011E7C                            ; ===========================================================================
00011E7C                            ; ---------------------------------------------------------------------------
00011E7C                            ; Sprite mappings - fans (SLZ)
00011E7C                            ; ---------------------------------------------------------------------------
00011E7C                            Map_obj5D:
00011E7C                            	include "_maps\obj5D.asm"
00011E7C                            ; ---------------------------------------------------------------------------
00011E7C                            ; Sprite mappings - fans (SLZ)
00011E7C                            ; ---------------------------------------------------------------------------
00011E7C 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011E80 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011E84 0000                       		dc.w byte_1161A-Map_obj5D
00011E86 02                         byte_1161A:	dc.b 2
00011E87 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011E8C 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011E91 02                         byte_11625:	dc.b 2
00011E92 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011E97 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011E9C 02                         byte_11630:	dc.b 2
00011E9D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011EA2 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011EA8 00                         		even
00011EA8 00                         		even
00011EA8                            
00011EA8                            ; ===========================================================================
00011EA8                            ; ---------------------------------------------------------------------------
00011EA8                            ; Object 5E - seesaws (SLZ)
00011EA8                            ; ---------------------------------------------------------------------------
00011EA8                            
00011EA8                            Obj5E:					; XREF: Obj_Index
00011EA8 7000                       		moveq	#0,d0
00011EAA 1028 0024                  		move.b	$24(a0),d0
00011EAE 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011EB2 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011EB6 3028 0030                  		move.w	$30(a0),d0
00011EBA 0240 FF80                  		andi.w	#$FF80,d0
00011EBE 3238 F700                  		move.w	($FFFFF700).w,d1
00011EC2 0441 0080                  		subi.w	#$80,d1
00011EC6 0241 FF80                  		andi.w	#$FF80,d1
00011ECA 9041                       		sub.w	d1,d0
00011ECC 6B00 BFF2                  		bmi.w	DeleteObject
00011ED0 0C40 0280                  		cmpi.w	#$280,d0
00011ED4 6200 BFEA                  		bhi.w	DeleteObject
00011ED8 6000 BFAA                  		bra.w	DisplaySprite
00011EDC                            ; ===========================================================================
00011EDC 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011EDE 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011EE0 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011EE2 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011EE4 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011EE6 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011EE8                            ; ===========================================================================
00011EE8                            
00011EE8                            Obj5E_Main:				; XREF: Obj5E_Index
00011EE8 5428 0024                  		addq.b	#2,$24(a0)
00011EEC 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011EF4 317C 0374 0002             		move.w	#$374,2(a0)
00011EFA 0028 0004 0001             		ori.b	#4,1(a0)
00011F00 117C 0004 0018             		move.b	#4,$18(a0)
00011F06 117C 0030 0019             		move.b	#$30,$19(a0)
00011F0C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011F12 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011F16 6600                       		bne.s	loc_116D2	; if not, branch
00011F18 6100 C406                  		bsr.w	SingleObjLoad2
00011F1C 6600                       		bne.s	loc_116D2
00011F1E 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011F22 5C29 0024                  		addq.b	#6,$24(a1)
00011F26 3368 0008 0008             		move.w	8(a0),8(a1)
00011F2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011F32 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011F38 2348 003C                  		move.l	a0,$3C(a1)
00011F3C                            
00011F3C                            loc_116D2:
00011F3C 0828 0000 0022             		btst	#0,$22(a0)
00011F42 6700                       		beq.s	loc_116E0
00011F44 117C 0002 001A             		move.b	#2,$1A(a0)
00011F4A                            
00011F4A                            loc_116E0:
00011F4A 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011F50                            
00011F50                            Obj5E_Slope:				; XREF: Obj5E_Index
00011F50 1228 003A                  		move.b	$3A(a0),d1
00011F54 6100 0000                  		bsr.w	loc_11766
00011F58 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011F5E 0828 0000 001A             		btst	#0,$1A(a0)
00011F64 6700                       		beq.s	loc_11702
00011F66 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011F6C                            
00011F6C                            loc_11702:
00011F6C 43F8 D000                  		lea	($FFFFD000).w,a1
00011F70 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011F76 323C 0030                  		move.w	#$30,d1
00011F7A 4EB9 0000 7B62             		jsr	(SlopeObject).l
00011F80 4E75                       		rts	
00011F82                            ; ===========================================================================
00011F82                            
00011F82                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011F82 6100 0000                  		bsr.w	loc_1174A
00011F86 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011F8C 0828 0000 001A             		btst	#0,$1A(a0)
00011F92 6700                       		beq.s	loc_11730
00011F94 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011F9A                            
00011F9A                            loc_11730:
00011F9A 323C 0030                  		move.w	#$30,d1
00011F9E 4EB9 0000 7C02             		jsr	(ExitPlatform).l
00011FA4 323C 0030                  		move.w	#$30,d1
00011FA8 3428 0008                  		move.w	8(a0),d2
00011FAC 4EB9 0000 8BF2             		jsr	SlopeObject2
00011FB2 4E75                       		rts	
00011FB4                            ; ===========================================================================
00011FB4                            
00011FB4                            loc_1174A:				; XREF: Obj5E_Slope2
00011FB4 7202                       		moveq	#2,d1
00011FB6 43F8 D000                  		lea	($FFFFD000).w,a1
00011FBA 3028 0008                  		move.w	8(a0),d0
00011FBE 9069 0008                  		sub.w	8(a1),d0
00011FC2 6400                       		bcc.s	loc_1175E
00011FC4 4440                       		neg.w	d0
00011FC6 7200                       		moveq	#0,d1
00011FC8                            
00011FC8                            loc_1175E:
00011FC8 0C40 0008                  		cmpi.w	#8,d0
00011FCC 6400                       		bcc.s	loc_11766
00011FCE 7201                       		moveq	#1,d1
00011FD0                            
00011FD0                            loc_11766:
00011FD0 1028 001A                  		move.b	$1A(a0),d0
00011FD4 B001                       		cmp.b	d1,d0
00011FD6 6700                       		beq.s	locret_11790
00011FD8 6400                       		bcc.s	loc_11772
00011FDA 5400                       		addq.b	#2,d0
00011FDC                            
00011FDC                            loc_11772:
00011FDC 5300                       		subq.b	#1,d0
00011FDE 1140 001A                  		move.b	d0,$1A(a0)
00011FE2 1141 003A                  		move.b	d1,$3A(a0)
00011FE6 08A8 0000 0001             		bclr	#0,1(a0)
00011FEC 0828 0001 001A             		btst	#1,$1A(a0)
00011FF2 6700                       		beq.s	locret_11790
00011FF4 08E8 0000 0001             		bset	#0,1(a0)
00011FFA                            
00011FFA                            locret_11790:
00011FFA 4E75                       		rts	
00011FFC                            ; ===========================================================================
00011FFC                            
00011FFC                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011FFC 5428 0024                  		addq.b	#2,$24(a0)
00012000 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00012008 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001200E 0028 0004 0001             		ori.b	#4,1(a0)
00012014 117C 0004 0018             		move.b	#4,$18(a0)
0001201A 117C 008B 0020             		move.b	#$8B,$20(a0)
00012020 117C 000C 0019             		move.b	#$C,$19(a0)
00012026 3168 0008 0030             		move.w	8(a0),$30(a0)
0001202C 0668 0028 0008             		addi.w	#$28,8(a0)
00012032 3168 000C 0034             		move.w	$C(a0),$34(a0)
00012038 117C 0001 001A             		move.b	#1,$1A(a0)
0001203E 0828 0000 0022             		btst	#0,$22(a0)
00012044 6700                       		beq.s	Obj5E_MoveSpike
00012046 0468 0050 0008             		subi.w	#$50,8(a0)
0001204C 117C 0002 003A             		move.b	#2,$3A(a0)
00012052                            
00012052                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012052 2268 003C                  		movea.l	$3C(a0),a1
00012056 7000                       		moveq	#0,d0
00012058 1028 003A                  		move.b	$3A(a0),d0
0001205C 9029 003A                  		sub.b	$3A(a1),d0
00012060 6700                       		beq.s	loc_1183E
00012062 6400                       		bcc.s	loc_117FC
00012064 4400                       		neg.b	d0
00012066                            
00012066                            loc_117FC:
00012066 323C F7E8                  		move.w	#-$818,d1
0001206A 343C FEEC                  		move.w	#-$114,d2
0001206E 0C00 0001                  		cmpi.b	#1,d0
00012072 6700                       		beq.s	loc_11822
00012074 323C F510                  		move.w	#-$AF0,d1
00012078 343C FF34                  		move.w	#-$CC,d2
0001207C 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012082 6D00                       		blt.s	loc_11822
00012084 323C F200                  		move.w	#-$E00,d1
00012088 343C FF60                  		move.w	#-$A0,d2
0001208C                            
0001208C                            loc_11822:
0001208C 3141 0012                  		move.w	d1,$12(a0)
00012090 3142 0010                  		move.w	d2,$10(a0)
00012094 3028 0008                  		move.w	8(a0),d0
00012098 9068 0030                  		sub.w	$30(a0),d0
0001209C 6400                       		bcc.s	loc_11838
0001209E 4468 0010                  		neg.w	$10(a0)
000120A2                            
000120A2                            loc_11838:
000120A2 5428 0024                  		addq.b	#2,$24(a0)
000120A6 6000                       		bra.s	Obj5E_SpikeFall
000120A8                            ; ===========================================================================
000120A8                            
000120A8                            loc_1183E:				; XREF: Obj5E_MoveSpike
000120A8 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000120AE 7000                       		moveq	#0,d0
000120B0 1029 001A                  		move.b	$1A(a1),d0
000120B4 343C 0028                  		move.w	#$28,d2
000120B8 3228 0008                  		move.w	8(a0),d1
000120BC 9268 0030                  		sub.w	$30(a0),d1
000120C0 6400                       		bcc.s	loc_1185C
000120C2 4442                       		neg.w	d2
000120C4 5440                       		addq.w	#2,d0
000120C6                            
000120C6                            loc_1185C:
000120C6 D040                       		add.w	d0,d0
000120C8 3228 0034                  		move.w	$34(a0),d1
000120CC D272 0000                  		add.w	(a2,d0.w),d1
000120D0 3141 000C                  		move.w	d1,$C(a0)
000120D4 D468 0030                  		add.w	$30(a0),d2
000120D8 3142 0008                  		move.w	d2,8(a0)
000120DC 4268 000E                  		clr.w	$E(a0)
000120E0 4268 000A                  		clr.w	$A(a0)
000120E4 4E75                       		rts	
000120E6                            ; ===========================================================================
000120E6                            
000120E6                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000120E6 4A68 0012                  		tst.w	$12(a0)
000120EA 6A00                       		bpl.s	loc_1189A
000120EC 6100 BCFE                  		bsr.w	ObjectFall
000120F0 3028 0034                  		move.w	$34(a0),d0
000120F4 0440 002F                  		subi.w	#$2F,d0
000120F8 B068 000C                  		cmp.w	$C(a0),d0
000120FC 6E00                       		bgt.s	locret_11898
000120FE 6100 BCEC                  		bsr.w	ObjectFall
00012102                            
00012102                            locret_11898:
00012102 4E75                       		rts	
00012104                            ; ===========================================================================
00012104                            
00012104                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012104 6100 BCE6                  		bsr.w	ObjectFall
00012108 2268 003C                  		movea.l	$3C(a0),a1
0001210C 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012112 7000                       		moveq	#0,d0
00012114 1029 001A                  		move.b	$1A(a1),d0
00012118 3228 0008                  		move.w	8(a0),d1
0001211C 9268 0030                  		sub.w	$30(a0),d1
00012120 6400                       		bcc.s	loc_118BA
00012122 5440                       		addq.w	#2,d0
00012124                            
00012124                            loc_118BA:
00012124 D040                       		add.w	d0,d0
00012126 3228 0034                  		move.w	$34(a0),d1
0001212A D272 0000                  		add.w	(a2,d0.w),d1
0001212E B268 000C                  		cmp.w	$C(a0),d1
00012132 6E00                       		bgt.s	locret_11938
00012134 2268 003C                  		movea.l	$3C(a0),a1
00012138 7202                       		moveq	#2,d1
0001213A 4A68 0010                  		tst.w	$10(a0)
0001213E 6B00                       		bmi.s	Obj5E_Spring
00012140 7200                       		moveq	#0,d1
00012142                            
00012142                            Obj5E_Spring:
00012142 1341 003A                  		move.b	d1,$3A(a1)
00012146 1141 003A                  		move.b	d1,$3A(a0)
0001214A B229 001A                  		cmp.b	$1A(a1),d1
0001214E 6700                       		beq.s	loc_1192C
00012150 08A9 0003 0022             		bclr	#3,$22(a1)
00012156 6700                       		beq.s	loc_1192C
00012158 4229 0025                  		clr.b	$25(a1)
0001215C 137C 0002 0024             		move.b	#2,$24(a1)
00012162 45F8 D000                  		lea	($FFFFD000).w,a2
00012166 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001216C 446A 0012                  		neg.w	$12(a2)
00012170 08EA 0001 0022             		bset	#1,$22(a2)
00012176 08AA 0003 0022             		bclr	#3,$22(a2)
0001217C 422A 003C                  		clr.b	$3C(a2)
00012180 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012186 157C 0002 0024             		move.b	#2,$24(a2)
0001218C 303C 00CC                  		move.w	#$CC,d0
00012190 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play spring sound
00012196                            
00012196                            loc_1192C:
00012196 4268 0010                  		clr.w	$10(a0)
0001219A 4268 0012                  		clr.w	$12(a0)
0001219E 5528 0024                  		subq.b	#2,$24(a0)
000121A2                            
000121A2                            locret_11938:
000121A2 4E75                       		rts	
000121A4                            ; ===========================================================================
000121A4 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000121AE                            
000121AE                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000121DE                            		even
000121DE                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001220E                            		even
0001220E                            ; ---------------------------------------------------------------------------
0001220E                            ; Sprite mappings - seesaws (SLZ)
0001220E                            ; ---------------------------------------------------------------------------
0001220E                            Map_obj5E:
0001220E                            	include "_maps\obj5E.asm"
0001220E                            ; ---------------------------------------------------------------------------
0001220E                            ; Sprite mappings - seesaws (SLZ)
0001220E                            ; ---------------------------------------------------------------------------
0001220E 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012212 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012216 07                         byte_119AC:	dc.b 7
00012217 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001221C DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012221 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012226 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
0001222B FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012230 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012235 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
0001223A 04                         byte_119D0:	dc.b 4
0001223B E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012240 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012245 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
0001224A E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012250 00                         		even
00012250 00                         		even
00012250                            
00012250                            ; ---------------------------------------------------------------------------
00012250                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012250                            ; ---------------------------------------------------------------------------
00012250                            Map_obj5Ea:
00012250                            	include "_maps\obj5Eballs.asm"
00012250                            ; ---------------------------------------------------------------------------
00012250                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012250                            ; ---------------------------------------------------------------------------
00012250 0000                       		dc.w byte_119EA-Map_obj5Ea
00012252 0000                       		dc.w byte_119F0-Map_obj5Ea
00012254 01                         byte_119EA:	dc.b 1
00012255 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001225A 01                         byte_119F0:	dc.b 1
0001225B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012260                            		even
00012260                            		even
00012260                            
00012260                            ; ===========================================================================
00012260                            ; ---------------------------------------------------------------------------
00012260                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012260                            ; ---------------------------------------------------------------------------
00012260                            
00012260                            Obj5F:					; XREF: Obj_Index
00012260 7000                       		moveq	#0,d0
00012262 1028 0024                  		move.b	$24(a0),d0
00012266 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
0001226A 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001226E                            ; ===========================================================================
0001226E 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012270 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012272 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012274 0000                       		dc.w Obj5F_End-Obj5F_Index
00012276                            ; ===========================================================================
00012276                            
00012276                            Obj5F_Main:				; XREF: Obj5F_Index
00012276 5428 0024                  		addq.b	#2,$24(a0)
0001227A 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012282 317C 0400 0002             		move.w	#$400,2(a0)
00012288 0028 0004 0001             		ori.b	#4,1(a0)
0001228E 117C 0003 0018             		move.b	#3,$18(a0)
00012294 117C 000C 0019             		move.b	#$C,$19(a0)
0001229A 1028 0028                  		move.b	$28(a0),d0
0001229E 6700                       		beq.s	loc_11A3C
000122A0 1140 0024                  		move.b	d0,$24(a0)
000122A4 4E75                       		rts	
000122A6                            ; ===========================================================================
000122A6                            
000122A6                            loc_11A3C:
000122A6 117C 009A 0020             		move.b	#$9A,$20(a0)
000122AC 0868 0000 0022             		bchg	#0,$22(a0)
000122B2                            
000122B2                            Obj5F_Action:				; XREF: Obj5F_Index
000122B2 7000                       		moveq	#0,d0
000122B4 1028 0025                  		move.b	$25(a0),d0
000122B8 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000122BC 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000122C0 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000122C6 6100 8C0A                  		bsr.w	AnimateSprite
000122CA 6000 DC60                  		bra.w	MarkObjGone
000122CE                            ; ===========================================================================
000122CE 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000122D0 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000122D2 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000122D4                            ; ===========================================================================
000122D4                            
000122D4                            Obj5F_Walk:				; XREF: Obj5F_Index2
000122D4 6100 0000                  		bsr.w	Obj5F_ChkSonic
000122D8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000122DC 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000122DE 5428 0025                  		addq.b	#2,$25(a0)
000122E2 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000122E8 317C 0010 0010             		move.w	#$10,$10(a0)
000122EE 117C 0001 001C             		move.b	#1,$1C(a0)
000122F4 0868 0000 0022             		bchg	#0,$22(a0)
000122FA 6700                       		beq.s	locret_11A96
000122FC 4468 0010                  		neg.w	$10(a0)		; change direction
00012300                            
00012300                            locret_11A96:
00012300 4E75                       		rts	
00012302                            ; ===========================================================================
00012302                            
00012302                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012302 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012306 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001230A 6B00                       		bmi.s	loc_11AA8
0001230C 6100 BB50                  		bsr.w	SpeedToPos
00012310 4E75                       		rts	
00012312                            ; ===========================================================================
00012312                            
00012312                            loc_11AA8:
00012312 5528 0025                  		subq.b	#2,$25(a0)
00012316 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001231C 4268 0010                  		clr.w	$10(a0)		; stop walking
00012320 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012326 4E75                       		rts	
00012328                            ; ===========================================================================
00012328                            
00012328                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012328 5368 0030                  		subq.w	#1,$30(a0)
0001232C 6A00                       		bpl.s	locret_11AD0
0001232E 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012332 117C 0000 0024             		move.b	#0,$24(a0)
00012338                            
00012338                            locret_11AD0:
00012338 4E75                       		rts	
0001233A                            ; ===========================================================================
0001233A                            
0001233A                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001233A 3038 D008                  		move.w	($FFFFD008).w,d0
0001233E 9068 0008                  		sub.w	8(a0),d0
00012342 6400                       		bcc.s	loc_11ADE
00012344 4440                       		neg.w	d0
00012346                            
00012346                            loc_11ADE:
00012346 0C40 0060                  		cmpi.w	#$60,d0
0001234A 6400                       		bcc.s	locret_11B5E
0001234C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012350 9068 000C                  		sub.w	$C(a0),d0
00012354 6400                       		bcc.s	Obj5F_MakeFuse
00012356 4440                       		neg.w	d0
00012358                            
00012358                            Obj5F_MakeFuse:
00012358 0C40 0060                  		cmpi.w	#$60,d0
0001235C 6400                       		bcc.s	locret_11B5E
0001235E 4A78 FE08                  		tst.w	($FFFFFE08).w
00012362 6600                       		bne.s	locret_11B5E
00012364 117C 0004 0025             		move.b	#4,$25(a0)
0001236A 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012370 4268 0010                  		clr.w	$10(a0)
00012374 117C 0002 001C             		move.b	#2,$1C(a0)
0001237A 6100 BFA4                  		bsr.w	SingleObjLoad2
0001237E 6600                       		bne.s	locret_11B5E
00012380 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012384 3368 0008 0008             		move.w	8(a0),8(a1)
0001238A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012390 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012396 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001239C 137C 0004 0028             		move.b	#4,$28(a1)
000123A2 137C 0003 001C             		move.b	#3,$1C(a1)
000123A8 337C 0010 0012             		move.w	#$10,$12(a1)
000123AE 0828 0001 0022             		btst	#1,$22(a0)
000123B4 6700                       		beq.s	loc_11B54
000123B6 4469 0012                  		neg.w	$12(a1)
000123BA                            
000123BA                            loc_11B54:
000123BA 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000123C0 2348 003C                  		move.l	a0,$3C(a1)
000123C4                            
000123C4                            locret_11B5E:
000123C4 4E75                       		rts	
000123C6                            ; ===========================================================================
000123C6                            
000123C6                            Obj5F_Display:				; XREF: Obj5F_Index
000123C6 6100                       		bsr.s	loc_11B70
000123C8 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000123CE 6100 8B02                  		bsr.w	AnimateSprite
000123D2 6000 DB58                  		bra.w	MarkObjGone
000123D6                            ; ===========================================================================
000123D6                            
000123D6                            loc_11B70:
000123D6 5368 0030                  		subq.w	#1,$30(a0)
000123DA 6B00                       		bmi.s	loc_11B7C
000123DC 6100 BA80                  		bsr.w	SpeedToPos
000123E0 4E75                       		rts	
000123E2                            ; ===========================================================================
000123E2                            
000123E2                            loc_11B7C:
000123E2 4268 0030                  		clr.w	$30(a0)
000123E6 4228 0024                  		clr.b	$24(a0)
000123EA 3168 0034 000C             		move.w	$34(a0),$C(a0)
000123F0 7203                       		moveq	#3,d1
000123F2 2248                       		movea.l	a0,a1
000123F4 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000123FA 6000                       		bra.s	Obj5F_MakeShrap
000123FC                            ; ===========================================================================
000123FC                            
000123FC                            Obj5F_Loop:
000123FC 6100 BF22                  		bsr.w	SingleObjLoad2
00012400 6600                       		bne.s	loc_11BCE
00012402                            
00012402                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012402 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012406 3368 0008 0008             		move.w	8(a0),8(a1)
0001240C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012412 137C 0006 0028             		move.b	#6,$28(a1)
00012418 137C 0004 001C             		move.b	#4,$1C(a1)
0001241E 335A 0010                  		move.w	(a2)+,$10(a1)
00012422 335A 0012                  		move.w	(a2)+,$12(a1)
00012426 137C 0098 0020             		move.b	#$98,$20(a1)
0001242C 08E9 0007 0001             		bset	#7,1(a1)
00012432                            
00012432                            loc_11BCE:
00012432 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012436                            
00012436 117C 0006 0024             		move.b	#6,$24(a0)
0001243C                            
0001243C                            Obj5F_End:				; XREF: Obj5F_Index
0001243C 6100 BA20                  		bsr.w	SpeedToPos
00012440 0668 0018 0012             		addi.w	#$18,$12(a0)
00012446 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001244C 6100 8A84                  		bsr.w	AnimateSprite
00012450 4A28 0001                  		tst.b	1(a0)
00012454 6A00 BA6A                  		bpl.w	DeleteObject
00012458 6000 BA2A                  		bra.w	DisplaySprite
0001245C                            ; ===========================================================================
0001245C FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001246C                            
0001246C                            Ani_obj5F:
0001246C                            	include "_anim\obj5F.asm"
0001246C                            ; ---------------------------------------------------------------------------
0001246C                            ; Animation script - Bomb enemy
0001246C                            ; ---------------------------------------------------------------------------
0001246C 0000                       		dc.w byte_11C12-Ani_obj5F
0001246E 0000                       		dc.w byte_11C16-Ani_obj5F
00012470 0000                       		dc.w byte_11C1C-Ani_obj5F
00012472 0000                       		dc.w byte_11C20-Ani_obj5F
00012474 0000                       		dc.w byte_11C24-Ani_obj5F
00012476 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001247A 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012480 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012484 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012488 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001248C                            		even
0001248C                            		even
0001248C                            
0001248C                            ; ---------------------------------------------------------------------------
0001248C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001248C                            ; ---------------------------------------------------------------------------
0001248C                            Map_obj5F:
0001248C                            	include "_maps\obj5F.asm"
0001248C                            ; ---------------------------------------------------------------------------
0001248C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001248C                            ; ---------------------------------------------------------------------------
0001248C 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012490 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012494 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012498 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001249C 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000124A0 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000124A4 03                         byte_11C40:	dc.b 3
000124A5 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000124AA 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000124AF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124B4 03                         byte_11C50:	dc.b 3
000124B5 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124BA 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000124BF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124C4 03                         byte_11C60:	dc.b 3
000124C5 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000124CA 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000124CF E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000124D4 03                         byte_11C70:	dc.b 3
000124D5 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124DA 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000124DF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124E4 03                         byte_11C80:	dc.b 3
000124E5 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000124EA 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000124EF E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000124F4 03                         byte_11C90:	dc.b 3
000124F5 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124FA 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000124FF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012504 02                         byte_11CA0:	dc.b 2
00012505 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001250A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001250F 02                         byte_11CAB:	dc.b 2
00012510 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012515 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001251A 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001251B E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012520 01                         byte_11CBC:	dc.b 1			; fuse
00012521 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012526 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012527 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001252C 01                         byte_11CC8:	dc.b 1			; fireball
0001252D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012532                            		even
00012532                            		even
00012532                            
00012532                            ; ===========================================================================
00012532                            ; ---------------------------------------------------------------------------
00012532                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012532                            ; ---------------------------------------------------------------------------
00012532                            
00012532                            Obj60:					; XREF: Obj_Index
00012532 7000                       		moveq	#0,d0
00012534 1028 0024                  		move.b	$24(a0),d0
00012538 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001253C 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012540                            ; ===========================================================================
00012540 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012542 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012544 0000                       		dc.w Obj60_Display-Obj60_Index
00012546 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012548 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001254A                            ; ===========================================================================
0001254A                            
0001254A                            Obj60_Main:				; XREF: Obj60_Index
0001254A 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012552 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012558 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001255E 6700                       		beq.s	loc_11D02
00012560 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012566                            
00012566                            loc_11D02:
00012566 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001256C 6600                       		bne.s	loc_11D10
0001256E 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012574                            
00012574                            loc_11D10:
00012574 0028 0004 0001             		ori.b	#4,1(a0)
0001257A 117C 0004 0018             		move.b	#4,$18(a0)
00012580 117C 000B 0020             		move.b	#$B,$20(a0)
00012586 117C 000C 0019             		move.b	#$C,$19(a0)
0001258C 7400                       		moveq	#0,d2
0001258E 45E8 0037                  		lea	$37(a0),a2
00012592 264A                       		movea.l	a2,a3
00012594 524A                       		addq.w	#1,a2
00012596 7203                       		moveq	#3,d1
00012598                            
00012598                            Obj60_MakeOrbs:
00012598 6100 BD86                  		bsr.w	SingleObjLoad2
0001259C 6600                       		bne.s	loc_11D90
0001259E 5213                       		addq.b	#1,(a3)
000125A0 3A09                       		move.w	a1,d5
000125A2 0445 D000                  		subi.w	#-$3000,d5
000125A6 EC4D                       		lsr.w	#6,d5
000125A8 0245 007F                  		andi.w	#$7F,d5
000125AC 14C5                       		move.b	d5,(a2)+
000125AE 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000125B0 137C 0006 0024             		move.b	#6,$24(a1)
000125B6 2368 0004 0004             		move.l	4(a0),4(a1)
000125BC 3368 0002 0002             		move.w	2(a0),2(a1)
000125C2 0029 0004 0001             		ori.b	#4,1(a1)
000125C8 137C 0004 0018             		move.b	#4,$18(a1)
000125CE 137C 0008 0019             		move.b	#8,$19(a1)
000125D4 137C 0003 001A             		move.b	#3,$1A(a1)
000125DA 137C 0098 0020             		move.b	#$98,$20(a1)
000125E0 1342 0026                  		move.b	d2,$26(a1)
000125E4 0602 0040                  		addi.b	#$40,d2
000125E8 2348 003C                  		move.l	a0,$3C(a1)
000125EC 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000125F0                            
000125F0                            loc_11D90:
000125F0 7001                       		moveq	#1,d0
000125F2 0828 0000 0022             		btst	#0,$22(a0)
000125F8 6700                       		beq.s	Obj60_Move
000125FA 4440                       		neg.w	d0
000125FC                            
000125FC                            Obj60_Move:
000125FC 1140 0036                  		move.b	d0,$36(a0)
00012600 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012606 5428 0024                  		addq.b	#2,$24(a0)
0001260A 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012610 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012616 6700                       		beq.s	locret_11DBC	; if not, branch
00012618 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001261C                            
0001261C                            locret_11DBC:
0001261C 4E75                       		rts	
0001261E                            ; ===========================================================================
0001261E                            
0001261E                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001261E 3038 D008                  		move.w	($FFFFD008).w,d0
00012622 9068 0008                  		sub.w	8(a0),d0
00012626 6400                       		bcc.s	loc_11DCA
00012628 4440                       		neg.w	d0
0001262A                            
0001262A                            loc_11DCA:
0001262A 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001262E 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012630 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012634 9068 000C                  		sub.w	$C(a0),d0
00012638 6400                       		bcc.s	loc_11DDC
0001263A 4440                       		neg.w	d0
0001263C                            
0001263C                            loc_11DDC:
0001263C 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012640 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012642 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012646 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012648 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001264E                            
0001264E                            Obj60_Animate:
0001264E 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012654 6100 887C                  		bsr.w	AnimateSprite
00012658 6000 0000                  		bra.w	Obj60_ChkDel
0001265C                            ; ===========================================================================
0001265C                            
0001265C                            Obj60_Display:				; XREF: Obj60_Index
0001265C 6100 B800                  		bsr.w	SpeedToPos
00012660                            
00012660                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012660 3028 0008                  		move.w	8(a0),d0
00012664 0240 FF80                  		andi.w	#$FF80,d0
00012668 3238 F700                  		move.w	($FFFFF700).w,d1
0001266C 0441 0080                  		subi.w	#$80,d1
00012670 0241 FF80                  		andi.w	#$FF80,d1
00012674 9041                       		sub.w	d1,d0
00012676 0C40 0280                  		cmpi.w	#$280,d0
0001267A 6200 0000                  		bhi.w	Obj60_ChkGone
0001267E 6000 B804                  		bra.w	DisplaySprite
00012682                            ; ===========================================================================
00012682                            
00012682                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012682 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012686 7000                       		moveq	#0,d0
00012688 1028 0023                  		move.b	$23(a0),d0
0001268C 6700                       		beq.s	loc_11E34
0001268E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012694                            
00012694                            loc_11E34:
00012694 45E8 0037                  		lea	$37(a0),a2
00012698 7400                       		moveq	#0,d2
0001269A 141A                       		move.b	(a2)+,d2
0001269C 5342                       		subq.w	#1,d2
0001269E 6500                       		bcs.s	Obj60_Delete
000126A0                            
000126A0                            loc_11E40:
000126A0 7000                       		moveq	#0,d0
000126A2 101A                       		move.b	(a2)+,d0
000126A4 ED48                       		lsl.w	#6,d0
000126A6 0680 00FF D000             		addi.l	#$FFD000,d0
000126AC 2240                       		movea.l	d0,a1
000126AE 6100 B812                  		bsr.w	DeleteObject2
000126B2 51CA FFEC                  		dbf	d2,loc_11E40
000126B6                            
000126B6                            Obj60_Delete:
000126B6 6000 B808                  		bra.w	DeleteObject
000126BA                            ; ===========================================================================
000126BA                            
000126BA                            Obj60_MoveOrb:				; XREF: Obj60_Index
000126BA 2268 003C                  		movea.l	$3C(a0),a1
000126BE 0C11 0060                  		cmpi.b	#$60,0(a1)
000126C2 6600 B7FC                  		bne.w	DeleteObject
000126C6 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000126CC 6600                       		bne.s	Obj60_Circle
000126CE 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000126D4 6600                       		bne.s	Obj60_Circle
000126D6 5428 0024                  		addq.b	#2,$24(a0)
000126DA 5329 0037                  		subq.b	#1,$37(a1)
000126DE 6600                       		bne.s	Obj60_FireOrb
000126E0 5429 0024                  		addq.b	#2,$24(a1)
000126E4                            
000126E4                            Obj60_FireOrb:
000126E4 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000126EA 0829 0000 0022             		btst	#0,$22(a1)
000126F0 6700                       		beq.s	Obj60_Display2
000126F2 4468 0010                  		neg.w	$10(a0)
000126F6                            
000126F6                            Obj60_Display2:
000126F6 6000 B78C                  		bra.w	DisplaySprite
000126FA                            ; ===========================================================================
000126FA                            
000126FA                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000126FA 1028 0026                  		move.b	$26(a0),d0
000126FE 4EB9 0000 2B58             		jsr	(CalcSine).l
00012704 E841                       		asr.w	#4,d1
00012706 D269 0008                  		add.w	8(a1),d1
0001270A 3141 0008                  		move.w	d1,8(a0)
0001270E E840                       		asr.w	#4,d0
00012710 D069 000C                  		add.w	$C(a1),d0
00012714 3140 000C                  		move.w	d0,$C(a0)
00012718 1029 0036                  		move.b	$36(a1),d0
0001271C D128 0026                  		add.b	d0,$26(a0)
00012720 6000 B762                  		bra.w	DisplaySprite
00012724                            ; ===========================================================================
00012724                            
00012724                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012724 6100 B738                  		bsr.w	SpeedToPos
00012728 4A28 0001                  		tst.b	1(a0)
0001272C 6A00 B792                  		bpl.w	DeleteObject
00012730 6000 B752                  		bra.w	DisplaySprite
00012734                            ; ===========================================================================
00012734                            Ani_obj60:
00012734                            	include "_anim\obj60.asm"
00012734                            ; ---------------------------------------------------------------------------
00012734                            ; Animation script - Orbinaut enemy
00012734                            ; ---------------------------------------------------------------------------
00012734 0000                       		dc.w byte_11EDA-Ani_obj60
00012736 0000                       		dc.w byte_11EDE-Ani_obj60
00012738 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001273C 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012742                            		even
00012742                            		even
00012742                            
00012742                            ; ---------------------------------------------------------------------------
00012742                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012742                            ; ---------------------------------------------------------------------------
00012742                            Map_obj60:
00012742                            	include "_maps\obj60.asm"
00012742                            ; ---------------------------------------------------------------------------
00012742                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012742                            ; ---------------------------------------------------------------------------
00012742 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012746 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001274A 01                         byte_11EEC:	dc.b 1
0001274B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012750 01                         byte_11EF2:	dc.b 1
00012751 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012756 01                         byte_11EF8:	dc.b 1
00012757 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001275C 01                         byte_11EFE:	dc.b 1
0001275D F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012762                            		even
00012762                            		even
00012762                            
00012762                            ; ===========================================================================
00012762                            ; ---------------------------------------------------------------------------
00012762                            ; Object 16 - harpoon (LZ)
00012762                            ; ---------------------------------------------------------------------------
00012762                            
00012762                            Obj16:					; XREF: Obj_Index
00012762 7000                       		moveq	#0,d0
00012764 1028 0024                  		move.b	$24(a0),d0
00012768 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001276C 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012770                            ; ===========================================================================
00012770 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012772 0000                       		dc.w Obj16_Move-Obj16_Index
00012774 0000                       		dc.w Obj16_Wait-Obj16_Index
00012776                            ; ===========================================================================
00012776                            
00012776                            Obj16_Main:				; XREF: Obj16_Index
00012776 5428 0024                  		addq.b	#2,$24(a0)
0001277A 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012782 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012788 0028 0004 0001             		ori.b	#4,1(a0)
0001278E 117C 0004 0018             		move.b	#4,$18(a0)
00012794 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001279A 117C 0014 0019             		move.b	#$14,$19(a0)
000127A0 317C 003C 0030             		move.w	#60,$30(a0)
000127A6                            
000127A6                            Obj16_Move:				; XREF: Obj16_Index
000127A6 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000127AC 6100 8724                  		bsr.w	AnimateSprite
000127B0 7000                       		moveq	#0,d0
000127B2 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000127B6 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000127BC 6000 D76E                  		bra.w	MarkObjGone
000127C0                            ; ===========================================================================
000127C0 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000127C6                            ; ===========================================================================
000127C6                            
000127C6                            Obj16_Wait:				; XREF: Obj16_Index
000127C6 5368 0030                  		subq.w	#1,$30(a0)
000127CA 6A00                       		bpl.s	Obj16_ChkDel
000127CC 317C 003C 0030             		move.w	#60,$30(a0)
000127D2 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000127D6 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000127DC                            
000127DC                            Obj16_ChkDel:
000127DC 6000 D74E                  		bra.w	MarkObjGone
000127E0                            ; ===========================================================================
000127E0                            Ani_obj16:
000127E0                            	include "_anim\obj16.asm"
000127E0                            ; ---------------------------------------------------------------------------
000127E0                            ; Animation script - harpoon (LZ)
000127E0                            ; ---------------------------------------------------------------------------
000127E0 0000                       		dc.w byte_11F8A-Ani_obj16
000127E2 0000                       		dc.w byte_11F8E-Ani_obj16
000127E4 0000                       		dc.w byte_11F92-Ani_obj16
000127E6 0000                       		dc.w byte_11F96-Ani_obj16
000127E8 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000127EC 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000127F0 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000127F4 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000127F8                            		even
000127F8                            		even
000127F8                            
000127F8                            ; ---------------------------------------------------------------------------
000127F8                            ; Sprite mappings - harpoon (LZ)
000127F8                            ; ---------------------------------------------------------------------------
000127F8                            Map_obj16:
000127F8                            	include "_maps\obj16.asm"
000127F8                            ; ---------------------------------------------------------------------------
000127F8                            ; Sprite mappings - harpoon (LZ)
000127F8                            ; ---------------------------------------------------------------------------
000127F8 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000127FC 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012800 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012804 01                         byte_11FA6:	dc.b 1
00012805 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001280A 01                         byte_11FAC:	dc.b 1
0001280B FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012810 02                         byte_11FB2:	dc.b 2
00012811 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012816 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001281B 01                         byte_11FBD:	dc.b 1
0001281C F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012821 01                         byte_11FC3:	dc.b 1
00012822 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012827 02                         byte_11FC9:	dc.b 2
00012828 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001282D F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012832                            		even
00012832                            		even
00012832                            
00012832                            ; ===========================================================================
00012832                            ; ---------------------------------------------------------------------------
00012832                            ; Object 61 - blocks (LZ)
00012832                            ; ---------------------------------------------------------------------------
00012832                            
00012832                            Obj61:					; XREF: Obj_Index
00012832 7000                       		moveq	#0,d0
00012834 1028 0024                  		move.b	$24(a0),d0
00012838 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001283C 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012840                            ; ===========================================================================
00012840 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012842 0000                       		dc.w Obj61_Action-Obj61_Index
00012844                            
00012844 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012846 200C                       		dc.b $20, $C
00012848 1010                       		dc.b $10, $10
0001284A 1010                       		dc.b $10, $10
0001284C                            ; ===========================================================================
0001284C                            
0001284C                            Obj61_Main:				; XREF: Obj61_Index
0001284C 5428 0024                  		addq.b	#2,$24(a0)
00012850 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012858 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001285E 117C 0004 0001             		move.b	#4,1(a0)
00012864 117C 0003 0018             		move.b	#3,$18(a0)
0001286A 7000                       		moveq	#0,d0
0001286C 1028 0028                  		move.b	$28(a0),d0
00012870 E648                       		lsr.w	#3,d0
00012872 0240 000E                  		andi.w	#$E,d0
00012876 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001287A 115A 0019                  		move.b	(a2)+,$19(a0)
0001287E 1152 0016                  		move.b	(a2),$16(a0)
00012882 E248                       		lsr.w	#1,d0
00012884 1140 001A                  		move.b	d0,$1A(a0)
00012888 3168 0008 0034             		move.w	8(a0),$34(a0)
0001288E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012894 1028 0028                  		move.b	$28(a0),d0
00012898 0200 000F                  		andi.b	#$F,d0
0001289C 6700                       		beq.s	Obj61_Action
0001289E 0C00 0007                  		cmpi.b	#7,d0
000128A2 6700                       		beq.s	Obj61_Action
000128A4 117C 0001 0038             		move.b	#1,$38(a0)
000128AA                            
000128AA                            Obj61_Action:				; XREF: Obj61_Index
000128AA 3F28 0008                  		move.w	8(a0),-(sp)
000128AE 7000                       		moveq	#0,d0
000128B0 1028 0028                  		move.b	$28(a0),d0
000128B4 0240 000F                  		andi.w	#$F,d0
000128B8 D040                       		add.w	d0,d0
000128BA 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000128BE 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000128C2 381F                       		move.w	(sp)+,d4
000128C4 4A28 0001                  		tst.b	1(a0)
000128C8 6A00                       		bpl.s	Obj61_ChkDel
000128CA 7200                       		moveq	#0,d1
000128CC 1228 0019                  		move.b	$19(a0),d1
000128D0 0641 000B                  		addi.w	#$B,d1
000128D4 7400                       		moveq	#0,d2
000128D6 1428 0016                  		move.b	$16(a0),d2
000128DA 3602                       		move.w	d2,d3
000128DC 5243                       		addq.w	#1,d3
000128DE 6100 D974                  		bsr.w	SolidObject
000128E2 1144 003F                  		move.b	d4,$3F(a0)
000128E6 6100 0000                  		bsr.w	loc_12180
000128EA                            
000128EA                            Obj61_ChkDel:
000128EA 3028 0034                  		move.w	$34(a0),d0
000128EE 0240 FF80                  		andi.w	#$FF80,d0
000128F2 3238 F700                  		move.w	($FFFFF700).w,d1
000128F6 0441 0080                  		subi.w	#$80,d1
000128FA 0241 FF80                  		andi.w	#$FF80,d1
000128FE 9041                       		sub.w	d1,d0
00012900 0C40 0280                  		cmpi.w	#$280,d0
00012904 6200 B5BA                  		bhi.w	DeleteObject
00012908 6000 B57A                  		bra.w	DisplaySprite
0001290C                            ; ===========================================================================
0001290C 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012910 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012914 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012918 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001291C                            ; ===========================================================================
0001291C                            
0001291C                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001291C 4E75                       		rts	
0001291E                            ; ===========================================================================
0001291E                            
0001291E                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001291E 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012922 6600                       		bne.s	loc_120D6	; if yes, branch
00012924 0828 0003 0022             		btst	#3,$22(a0)
0001292A 6700                       		beq.s	locret_120D4
0001292C 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012932                            
00012932                            locret_120D4:
00012932 4E75                       		rts	
00012934                            ; ===========================================================================
00012934                            
00012934                            loc_120D6:
00012934 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012938 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001293A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001293E 4228 0038                  		clr.b	$38(a0)
00012942 4E75                       		rts	
00012944                            ; ===========================================================================
00012944                            
00012944                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012944 6100 B518                  		bsr.w	SpeedToPos
00012948 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001294C 6100 0000                  		bsr.w	ObjHitFloor
00012950 4A41                       		tst.w	d1
00012952 6A00 0000                  		bpl.w	locret_12106
00012956 5241                       		addq.w	#1,d1
00012958 D368 000C                  		add.w	d1,$C(a0)
0001295C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012960 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012964                            
00012964                            locret_12106:
00012964 4E75                       		rts	
00012966                            ; ===========================================================================
00012966                            
00012966                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012966 6100 B4F6                  		bsr.w	SpeedToPos
0001296A 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001296E 6100 0000                  		bsr.w	ObjHitCeiling
00012972 4A41                       		tst.w	d1
00012974 6A00 0000                  		bpl.w	locret_12126
00012978 9368 000C                  		sub.w	d1,$C(a0)
0001297C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012980 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012984                            
00012984                            locret_12126:
00012984 4E75                       		rts	
00012986                            ; ===========================================================================
00012986                            
00012986                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012986 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001298C 6600                       		bne.s	locret_12138	; if not, branch
0001298E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012992 4228 0038                  		clr.b	$38(a0)
00012996                            
00012996                            locret_12138:
00012996 4E75                       		rts	
00012998                            ; ===========================================================================
00012998                            
00012998                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012998 3038 F646                  		move.w	($FFFFF646).w,d0
0001299C 9068 000C                  		sub.w	$C(a0),d0
000129A0 6700                       		beq.s	locret_1217E
000129A2 6400                       		bcc.s	loc_12162
000129A4 0C40 FFFE                  		cmpi.w	#-2,d0
000129A8 6C00                       		bge.s	loc_1214E
000129AA 70FE                       		moveq	#-2,d0
000129AC                            
000129AC                            loc_1214E:
000129AC D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000129B0 6100 0000                  		bsr.w	ObjHitCeiling
000129B4 4A41                       		tst.w	d1
000129B6 6A00 0000                  		bpl.w	locret_12160
000129BA 9368 000C                  		sub.w	d1,$C(a0)
000129BE                            
000129BE                            locret_12160:
000129BE 4E75                       		rts	
000129C0                            ; ===========================================================================
000129C0                            
000129C0                            loc_12162:				; XREF: Obj61_Type07
000129C0 0C40 0002                  		cmpi.w	#2,d0
000129C4 6F00                       		ble.s	loc_1216A
000129C6 7002                       		moveq	#2,d0
000129C8                            
000129C8                            loc_1216A:
000129C8 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000129CC 6100 0000                  		bsr.w	ObjHitFloor
000129D0 4A41                       		tst.w	d1
000129D2 6A00 0000                  		bpl.w	locret_1217E
000129D6 5241                       		addq.w	#1,d1
000129D8 D368 000C                  		add.w	d1,$C(a0)
000129DC                            
000129DC                            locret_1217E:
000129DC 4E75                       		rts	
000129DE                            ; ===========================================================================
000129DE                            
000129DE                            loc_12180:				; XREF: Obj61_Action
000129DE 4A28 0038                  		tst.b	$38(a0)
000129E2 6700                       		beq.s	locret_121C0
000129E4 0828 0003 0022             		btst	#3,$22(a0)
000129EA 6600                       		bne.s	loc_1219A
000129EC 4A28 003E                  		tst.b	$3E(a0)
000129F0 6700                       		beq.s	locret_121C0
000129F2 5928 003E                  		subq.b	#4,$3E(a0)
000129F6 6000                       		bra.s	loc_121A6
000129F8                            ; ===========================================================================
000129F8                            
000129F8                            loc_1219A:
000129F8 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000129FE 6700                       		beq.s	locret_121C0
00012A00 5828 003E                  		addq.b	#4,$3E(a0)
00012A04                            
00012A04                            loc_121A6:
00012A04 1028 003E                  		move.b	$3E(a0),d0
00012A08 4EB9 0000 2B58             		jsr	(CalcSine).l
00012A0E 323C 0400                  		move.w	#$400,d1
00012A12 C1C1                       		muls.w	d1,d0
00012A14 4840                       		swap	d0
00012A16 D068 0030                  		add.w	$30(a0),d0
00012A1A 3140 000C                  		move.w	d0,$C(a0)
00012A1E                            
00012A1E                            locret_121C0:
00012A1E 4E75                       		rts	
00012A20                            ; ===========================================================================
00012A20                            ; ---------------------------------------------------------------------------
00012A20                            ; Sprite mappings - blocks (LZ)
00012A20                            ; ---------------------------------------------------------------------------
00012A20                            Map_obj61:
00012A20                            	include "_maps\obj61.asm"
00012A20                            ; ---------------------------------------------------------------------------
00012A20                            ; Sprite mappings - blocks (LZ)
00012A20                            ; ---------------------------------------------------------------------------
00012A20 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012A24 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012A28 01                         byte_121CA:	dc.b 1
00012A29 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012A2E 02                         byte_121D0:	dc.b 2
00012A2F F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012A34 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012A39 01                         byte_121DB:	dc.b 1
00012A3A F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012A3F 01                         byte_121E1:	dc.b 1
00012A40 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012A46 00                         		even
00012A46 00                         		even
00012A46                            
00012A46                            ; ===========================================================================
00012A46                            ; ---------------------------------------------------------------------------
00012A46                            ; Object 62 - gargoyle head (LZ)
00012A46                            ; ---------------------------------------------------------------------------
00012A46                            
00012A46                            Obj62:					; XREF: Obj_Index
00012A46 7000                       		moveq	#0,d0
00012A48 1028 0024                  		move.b	$24(a0),d0
00012A4C 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012A50 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012A54 6000 D4D6                  		bra.w	MarkObjGone
00012A58                            ; ===========================================================================
00012A58 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012A5A 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012A5C 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012A5E 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012A60                            
00012A60 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012A68                            ; ===========================================================================
00012A68                            
00012A68                            Obj62_Main:				; XREF: Obj62_Index
00012A68 5428 0024                  		addq.b	#2,$24(a0)
00012A6C 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012A74 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012A7A 0028 0004 0001             		ori.b	#4,1(a0)
00012A80 117C 0003 0018             		move.b	#3,$18(a0)
00012A86 117C 0010 0019             		move.b	#$10,$19(a0)
00012A8C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012A90 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012A94 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012A9A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012AA0 0228 000F 0028             		andi.b	#$F,$28(a0)
00012AA6                            
00012AA6                            Obj62_MakeFire:				; XREF: Obj62_Index
00012AA6 5328 001E                  		subq.b	#1,$1E(a0)
00012AAA 6600                       		bne.s	Obj62_NoFire
00012AAC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012AB2 6100 B64A                  		bsr.w	ChkObjOnScreen
00012AB6 6600                       		bne.s	Obj62_NoFire
00012AB8 6100 B850                  		bsr.w	SingleObjLoad
00012ABC 6600                       		bne.s	Obj62_NoFire
00012ABE 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012AC2 5829 0024                  		addq.b	#4,$24(a1)
00012AC6 3368 0008 0008             		move.w	8(a0),8(a1)
00012ACC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012AD2 1368 0001 0001             		move.b	1(a0),1(a1)
00012AD8 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012ADE                            
00012ADE                            Obj62_NoFire:
00012ADE 4E75                       		rts	
00012AE0                            ; ===========================================================================
00012AE0                            
00012AE0                            Obj62_FireBall:				; XREF: Obj62_Index
00012AE0 5428 0024                  		addq.b	#2,$24(a0)
00012AE4 117C 0008 0016             		move.b	#8,$16(a0)
00012AEA 117C 0008 0017             		move.b	#8,$17(a0)
00012AF0 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012AF8 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012AFE 0028 0004 0001             		ori.b	#4,1(a0)
00012B04 117C 0004 0018             		move.b	#4,$18(a0)
00012B0A 117C 0098 0020             		move.b	#$98,$20(a0)
00012B10 117C 0008 0019             		move.b	#8,$19(a0)
00012B16 117C 0002 001A             		move.b	#2,$1A(a0)
00012B1C 5068 000C                  		addq.w	#8,$C(a0)
00012B20 317C 0200 0010             		move.w	#$200,$10(a0)
00012B26 0828 0000 0022             		btst	#0,$22(a0)
00012B2C 6600                       		bne.s	Obj62_Sound
00012B2E 4468 0010                  		neg.w	$10(a0)
00012B32                            
00012B32                            Obj62_Sound:
00012B32 303C 00AE                  		move.w	#$AE,d0
00012B36 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012B3C                            
00012B3C                            Obj62_AniFire:				; XREF: Obj62_Index
00012B3C 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012B40 0200 0007                  		andi.b	#7,d0
00012B44 6600                       		bne.s	Obj62_StopFire
00012B46 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012B4C                            
00012B4C                            Obj62_StopFire:
00012B4C 6100 B310                  		bsr.w	SpeedToPos
00012B50 0828 0000 0022             		btst	#0,$22(a0)
00012B56 6600                       		bne.s	Obj62_StopFire2
00012B58 76F8                       		moveq	#-8,d3
00012B5A 6100 0000                  		bsr.w	ObjHitWallLeft
00012B5E 4A41                       		tst.w	d1
00012B60 6B00 B35E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012B64 4E75                       		rts	
00012B66                            ; ===========================================================================
00012B66                            
00012B66                            Obj62_StopFire2:
00012B66 7608                       		moveq	#8,d3
00012B68 6100 0000                  		bsr.w	ObjHitWallRight
00012B6C 4A41                       		tst.w	d1
00012B6E 6B00 B350                  		bmi.w	DeleteObject
00012B72 4E75                       		rts	
00012B74                            ; ===========================================================================
00012B74                            ; ---------------------------------------------------------------------------
00012B74                            ; Sprite mappings - gargoyle head (LZ)
00012B74                            ; ---------------------------------------------------------------------------
00012B74                            Map_obj62:
00012B74                            	include "_maps\obj62.asm"
00012B74                            ; ---------------------------------------------------------------------------
00012B74                            ; Sprite mappings - gargoyle head (LZ)
00012B74                            ; ---------------------------------------------------------------------------
00012B74 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012B78 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012B7C 03                         byte_12320:	dc.b 3
00012B7D F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012B82 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012B87 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012B8C 01                         byte_12330:	dc.b 1
00012B8D FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012B92 01                         byte_12336:	dc.b 1
00012B93 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012B98                            		even
00012B98                            		even
00012B98                            
00012B98                            ; ===========================================================================
00012B98                            ; ---------------------------------------------------------------------------
00012B98                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012B98                            ; ---------------------------------------------------------------------------
00012B98                            
00012B98                            Obj63:					; XREF: Obj_Index
00012B98 7000                       		moveq	#0,d0
00012B9A 1028 0024                  		move.b	$24(a0),d0
00012B9E 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012BA2 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012BA6 3028 0030                  		move.w	$30(a0),d0
00012BAA 0240 FF80                  		andi.w	#$FF80,d0
00012BAE 3238 F700                  		move.w	($FFFFF700).w,d1
00012BB2 0441 0080                  		subi.w	#$80,d1
00012BB6 0241 FF80                  		andi.w	#$FF80,d1
00012BBA 9041                       		sub.w	d1,d0
00012BBC 0C40 0280                  		cmpi.w	#$280,d0
00012BC0 6200                       		bhi.s	loc_1236A
00012BC2                            
00012BC2                            Obj63_Display:				; XREF: loc_1236A
00012BC2 6000 B2C0                  		bra.w	DisplaySprite
00012BC6                            ; ===========================================================================
00012BC6                            
00012BC6                            loc_1236A:				; XREF: Obj63
00012BC6 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012BCC 6600                       		bne.s	loc_12378
00012BCE 0C40 FF80                  		cmpi.w	#-$80,d0
00012BD2 64EE                       		bcc.s	Obj63_Display
00012BD4                            
00012BD4                            loc_12378:
00012BD4 1028 002F                  		move.b	$2F(a0),d0
00012BD8 6A00 B2E6                  		bpl.w	DeleteObject
00012BDC 0240 007F                  		andi.w	#$7F,d0
00012BE0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012BE4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012BEA 6000 B2D4                  		bra.w	DeleteObject
00012BEE                            ; ===========================================================================
00012BEE 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012BF0 0000                       		dc.w loc_124B2-Obj63_Index
00012BF2 0000                       		dc.w loc_124C2-Obj63_Index
00012BF4 0000                       		dc.w loc_124DE-Obj63_Index
00012BF6                            ; ===========================================================================
00012BF6                            
00012BF6                            Obj63_Main:				; XREF: Obj63_Index
00012BF6 1028 0028                  		move.b	$28(a0),d0
00012BFA 6B00 0000                  		bmi.w	loc_12460
00012BFE 5428 0024                  		addq.b	#2,$24(a0)
00012C02 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012C0A 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012C10 0028 0004 0001             		ori.b	#4,1(a0)
00012C16 117C 0010 0019             		move.b	#$10,$19(a0)
00012C1C 117C 0004 0018             		move.b	#4,$18(a0)
00012C22 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012C28 6600                       		bne.s	loc_123E2
00012C2A 5828 0024                  		addq.b	#4,$24(a0)
00012C2E 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012C34 117C 0001 0018             		move.b	#1,$18(a0)
00012C3A 6000 0000                  		bra.w	loc_124DE
00012C3E                            ; ===========================================================================
00012C3E                            
00012C3E                            loc_123E2:
00012C3E 117C 0004 001A             		move.b	#4,$1A(a0)
00012C44 7000                       		moveq	#0,d0
00012C46 1028 0028                  		move.b	$28(a0),d0
00012C4A 3200                       		move.w	d0,d1
00012C4C E648                       		lsr.w	#3,d0
00012C4E 0240 001E                  		andi.w	#$1E,d0
00012C52 45FA 0000                  		lea	Obj63_Data(pc),a2
00012C56 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012C5A 315A 0038                  		move.w	(a2)+,$38(a0)
00012C5E 315A 0030                  		move.w	(a2)+,$30(a0)
00012C62 214A 003C                  		move.l	a2,$3C(a0)
00012C66 0241 000F                  		andi.w	#$F,d1
00012C6A E549                       		lsl.w	#2,d1
00012C6C 1141 0038                  		move.b	d1,$38(a0)
00012C70 117C 0004 003A             		move.b	#4,$3A(a0)
00012C76 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012C7A 6700                       		beq.s	loc_1244C
00012C7C 117C 0001 003B             		move.b	#1,$3B(a0)
00012C82 4428 003A                  		neg.b	$3A(a0)
00012C86 7200                       		moveq	#0,d1
00012C88 1228 0038                  		move.b	$38(a0),d1
00012C8C D228 003A                  		add.b	$3A(a0),d1
00012C90 B228 0039                  		cmp.b	$39(a0),d1
00012C94 6500                       		bcs.s	loc_12448
00012C96 1001                       		move.b	d1,d0
00012C98 7200                       		moveq	#0,d1
00012C9A 4A00                       		tst.b	d0
00012C9C 6A00                       		bpl.s	loc_12448
00012C9E 1228 0039                  		move.b	$39(a0),d1
00012CA2 5901                       		subq.b	#4,d1
00012CA4                            
00012CA4                            loc_12448:
00012CA4 1141 0038                  		move.b	d1,$38(a0)
00012CA8                            
00012CA8                            loc_1244C:
00012CA8 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012CAE 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012CB4 6100 0000                  		bsr.w	Obj63_ChangeDir
00012CB8 6000 0000                  		bra.w	loc_124B2
00012CBC                            ; ===========================================================================
00012CBC                            
00012CBC                            loc_12460:				; XREF: Obj63_Main
00012CBC 1140 002F                  		move.b	d0,$2F(a0)
00012CC0 0240 007F                  		andi.w	#$7F,d0
00012CC4 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012CC8 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012CCE 6600 B1F0                  		bne.w	DeleteObject
00012CD2 D040                       		add.w	d0,d0
00012CD4 0240 001E                  		andi.w	#$1E,d0
00012CD8 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
00012CDE D4F2 0000                  		adda.w	(a2,d0.w),a2
00012CE2 321A                       		move.w	(a2)+,d1
00012CE4 2248                       		movea.l	a0,a1
00012CE6 6000                       		bra.s	Obj63_MakePtfms
00012CE8                            ; ===========================================================================
00012CE8                            
00012CE8                            Obj63_Loop:
00012CE8 6100 B620                  		bsr.w	SingleObjLoad
00012CEC 6600                       		bne.s	loc_124AA
00012CEE                            
00012CEE                            Obj63_MakePtfms:			; XREF: loc_12460
00012CEE 12BC 0063                  		move.b	#$63,0(a1)
00012CF2 335A 0008                  		move.w	(a2)+,8(a1)
00012CF6 335A 000C                  		move.w	(a2)+,$C(a1)
00012CFA 301A                       		move.w	(a2)+,d0
00012CFC 1340 0028                  		move.b	d0,$28(a1)
00012D00                            
00012D00                            loc_124AA:
00012D00 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012D04                            
00012D04 588F                       		addq.l	#4,sp
00012D06 4E75                       		rts	
00012D08                            ; ===========================================================================
00012D08                            
00012D08                            loc_124B2:				; XREF: Obj63_Index
00012D08 7200                       		moveq	#0,d1
00012D0A 1228 0019                  		move.b	$19(a0),d1
00012D0E 4EB9 0000 7A8E             		jsr	(PlatformObject).l
00012D14 6000 0000                  		bra.w	sub_12502
00012D18                            ; ===========================================================================
00012D18                            
00012D18                            loc_124C2:				; XREF: Obj63_Index
00012D18 7200                       		moveq	#0,d1
00012D1A 1228 0019                  		move.b	$19(a0),d1
00012D1E 4EB9 0000 7C02             		jsr	(ExitPlatform).l
00012D24 3F28 0008                  		move.w	8(a0),-(sp)
00012D28 6100 0000                  		bsr.w	sub_12502
00012D2C 341F                       		move.w	(sp)+,d2
00012D2E 4EF9 0000 816C             		jmp	(MvSonicOnPtfm2).l
00012D34                            ; ===========================================================================
00012D34                            
00012D34                            loc_124DE:				; XREF: Obj63_Index
00012D34 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012D38 0240 0003                  		andi.w	#3,d0
00012D3C 6600                       		bne.s	loc_124FC
00012D3E 7201                       		moveq	#1,d1
00012D40 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012D44 6700                       		beq.s	loc_124F2
00012D46 4401                       		neg.b	d1
00012D48                            
00012D48                            loc_124F2:
00012D48 D328 001A                  		add.b	d1,$1A(a0)
00012D4C 0228 0003 001A             		andi.b	#3,$1A(a0)
00012D52                            
00012D52                            loc_124FC:
00012D52 588F                       		addq.l	#4,sp
00012D54 6000 D1D6                  		bra.w	MarkObjGone
00012D58                            
00012D58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012D58                            
00012D58                            
00012D58                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012D58 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012D5C 6700                       		beq.s	loc_12520
00012D5E 4A28 003B                  		tst.b	$3B(a0)
00012D62 6600                       		bne.s	loc_12520
00012D64 117C 0001 003B             		move.b	#1,$3B(a0)
00012D6A 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012D70 4428 003A                  		neg.b	$3A(a0)
00012D74 6000                       		bra.s	loc_12534
00012D76                            ; ===========================================================================
00012D76                            
00012D76                            loc_12520:
00012D76 3028 0008                  		move.w	8(a0),d0
00012D7A B068 0034                  		cmp.w	$34(a0),d0
00012D7E 6600                       		bne.s	loc_1256A
00012D80 3028 000C                  		move.w	$C(a0),d0
00012D84 B068 0036                  		cmp.w	$36(a0),d0
00012D88 6600                       		bne.s	loc_1256A
00012D8A                            
00012D8A                            loc_12534:
00012D8A 7200                       		moveq	#0,d1
00012D8C 1228 0038                  		move.b	$38(a0),d1
00012D90 D228 003A                  		add.b	$3A(a0),d1
00012D94 B228 0039                  		cmp.b	$39(a0),d1
00012D98 6500                       		bcs.s	loc_12552
00012D9A 1001                       		move.b	d1,d0
00012D9C 7200                       		moveq	#0,d1
00012D9E 4A00                       		tst.b	d0
00012DA0 6A00                       		bpl.s	loc_12552
00012DA2 1228 0039                  		move.b	$39(a0),d1
00012DA6 5901                       		subq.b	#4,d1
00012DA8                            
00012DA8                            loc_12552:
00012DA8 1141 0038                  		move.b	d1,$38(a0)
00012DAC 2268 003C                  		movea.l	$3C(a0),a1
00012DB0 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012DB6 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012DBC 6100 0000                  		bsr.w	Obj63_ChangeDir
00012DC0                            
00012DC0                            loc_1256A:
00012DC0 6100 B09C                  		bsr.w	SpeedToPos
00012DC4 4E75                       		rts	
00012DC6                            ; End of function sub_12502
00012DC6                            
00012DC6                            
00012DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012DC6                            
00012DC6                            
00012DC6                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012DC6 7000                       		moveq	#0,d0
00012DC8 343C FF00                  		move.w	#-$100,d2
00012DCC 3028 0008                  		move.w	8(a0),d0
00012DD0 9068 0034                  		sub.w	$34(a0),d0
00012DD4 6400                       		bcc.s	loc_12584
00012DD6 4440                       		neg.w	d0
00012DD8 4442                       		neg.w	d2
00012DDA                            
00012DDA                            loc_12584:
00012DDA 7200                       		moveq	#0,d1
00012DDC 363C FF00                  		move.w	#-$100,d3
00012DE0 3228 000C                  		move.w	$C(a0),d1
00012DE4 9268 0036                  		sub.w	$36(a0),d1
00012DE8 6400                       		bcc.s	loc_12598
00012DEA 4441                       		neg.w	d1
00012DEC 4443                       		neg.w	d3
00012DEE                            
00012DEE                            loc_12598:
00012DEE B240                       		cmp.w	d0,d1
00012DF0 6500                       		bcs.s	loc_125C2
00012DF2 3028 0008                  		move.w	8(a0),d0
00012DF6 9068 0034                  		sub.w	$34(a0),d0
00012DFA 6700                       		beq.s	loc_125AE
00012DFC 48C0                       		ext.l	d0
00012DFE E180                       		asl.l	#8,d0
00012E00 81C1                       		divs.w	d1,d0
00012E02 4440                       		neg.w	d0
00012E04                            
00012E04                            loc_125AE:
00012E04 3140 0010                  		move.w	d0,$10(a0)
00012E08 3143 0012                  		move.w	d3,$12(a0)
00012E0C 4840                       		swap	d0
00012E0E 3140 000A                  		move.w	d0,$A(a0)
00012E12 4268 000E                  		clr.w	$E(a0)
00012E16 4E75                       		rts	
00012E18                            ; ===========================================================================
00012E18                            
00012E18                            loc_125C2:				; XREF: Obj63_ChangeDir
00012E18 3228 000C                  		move.w	$C(a0),d1
00012E1C 9268 0036                  		sub.w	$36(a0),d1
00012E20 6700                       		beq.s	loc_125D4
00012E22 48C1                       		ext.l	d1
00012E24 E181                       		asl.l	#8,d1
00012E26 83C0                       		divs.w	d0,d1
00012E28 4441                       		neg.w	d1
00012E2A                            
00012E2A                            loc_125D4:
00012E2A 3141 0012                  		move.w	d1,$12(a0)
00012E2E 3142 0010                  		move.w	d2,$10(a0)
00012E32 4841                       		swap	d1
00012E34 3141 000E                  		move.w	d1,$E(a0)
00012E38 4268 000A                  		clr.w	$A(a0)
00012E3C 4E75                       		rts	
00012E3E                            ; End of function Obj63_ChangeDir
00012E3E                            
00012E3E                            ; ===========================================================================
00012E3E 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012E40 0000                       		dc.w word_12610-Obj63_Data
00012E42 0000                       		dc.w word_12628-Obj63_Data
00012E44 0000                       		dc.w word_1263C-Obj63_Data
00012E46 0000                       		dc.w word_12650-Obj63_Data
00012E48 0000                       		dc.w word_12668-Obj63_Data
00012E4A 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012E5A 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012E66 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012E76 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012E7E 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012E92 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012EA6 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012EBE 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012ED2                            
00012ED2                            ; ---------------------------------------------------------------------------
00012ED2                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012ED2                            ; ---------------------------------------------------------------------------
00012ED2                            Map_obj63:
00012ED2                            	include "_maps\obj63.asm"
00012ED2                            ; ---------------------------------------------------------------------------
00012ED2                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012ED2                            ; ---------------------------------------------------------------------------
00012ED2 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012ED6 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012EDA 0000                       		dc.w byte_1269E-Map_obj63
00012EDC 01                         byte_12686:	dc.b 1
00012EDD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012EE2 01                         byte_1268C:	dc.b 1
00012EE3 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012EE8 01                         byte_12692:	dc.b 1
00012EE9 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012EEE 01                         byte_12698:	dc.b 1
00012EEF F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012EF4 01                         byte_1269E:	dc.b 1
00012EF5 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012EFA                            		even
00012EFA                            		even
00012EFA                            
00012EFA                            ; ===========================================================================
00012EFA                            ; ---------------------------------------------------------------------------
00012EFA                            ; Object 64 - bubbles (LZ)
00012EFA                            ; ---------------------------------------------------------------------------
00012EFA                            
00012EFA                            Obj64:					; XREF: Obj_Index
00012EFA 7000                       		moveq	#0,d0
00012EFC 1028 0024                  		move.b	$24(a0),d0
00012F00 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012F04 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012F08                            ; ===========================================================================
00012F08 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012F0A 0000                       		dc.w Obj64_Animate-Obj64_Index
00012F0C 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012F0E 0000                       		dc.w Obj64_Display2-Obj64_Index
00012F10 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012F12 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012F14                            ; ===========================================================================
00012F14                            
00012F14                            Obj64_Main:				; XREF: Obj64_Index
00012F14 5428 0024                  		addq.b	#2,$24(a0)
00012F18 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012F20 317C 8348 0002             		move.w	#$8348,2(a0)
00012F26 117C 0084 0001             		move.b	#$84,1(a0)
00012F2C 117C 0010 0019             		move.b	#$10,$19(a0)
00012F32 117C 0001 0018             		move.b	#1,$18(a0)
00012F38 1028 0028                  		move.b	$28(a0),d0	; get object type
00012F3C 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012F3E 5028 0024                  		addq.b	#8,$24(a0)
00012F42 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012F46 1140 0032                  		move.b	d0,$32(a0)
00012F4A 1140 0033                  		move.b	d0,$33(a0)
00012F4E 117C 0006 001C             		move.b	#6,$1C(a0)
00012F54 6000 0000                  		bra.w	Obj64_BblMaker
00012F58                            ; ===========================================================================
00012F58                            
00012F58                            Obj64_Bubble:				; XREF: Obj64_Main
00012F58 1140 001C                  		move.b	d0,$1C(a0)
00012F5C 3168 0008 0030             		move.w	8(a0),$30(a0)
00012F62 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012F68 4EB9 0000 2B32             		jsr	(RandomNumber).l
00012F6E 1140 0026                  		move.b	d0,$26(a0)
00012F72                            
00012F72                            Obj64_Animate:				; XREF: Obj64_Index
00012F72 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012F78 4EB9 0000 AED2             		jsr	AnimateSprite
00012F7E 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012F84 6600                       		bne.s	Obj64_ChkWater
00012F86 117C 0001 002E             		move.b	#1,$2E(a0)
00012F8C                            
00012F8C                            Obj64_ChkWater:				; XREF: Obj64_Index
00012F8C 3038 F646                  		move.w	($FFFFF646).w,d0
00012F90 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012F94 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012F96                            
00012F96                            Obj64_Burst:				; XREF: Obj64_Wobble
00012F96 117C 0006 0024             		move.b	#6,$24(a0)
00012F9C 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012FA0 6000 0000                  		bra.w	Obj64_Display2
00012FA4                            ; ===========================================================================
00012FA4                            
00012FA4                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012FA4 1028 0026                  		move.b	$26(a0),d0
00012FA8 5228 0026                  		addq.b	#1,$26(a0)
00012FAC 0240 007F                  		andi.w	#$7F,d0
00012FB0 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012FB6 1031 0000                  		move.b	(a1,d0.w),d0
00012FBA 4880                       		ext.w	d0
00012FBC D068 0030                  		add.w	$30(a0),d0
00012FC0 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012FC4 4A28 002E                  		tst.b	$2E(a0)
00012FC8 6700                       		beq.s	Obj64_Display
00012FCA 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012FCE 6700                       		beq.s	Obj64_Display	; if not, branch
00012FD0                            
00012FD0 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012FD4 303C 00AD                  		move.w	#$AD,d0
00012FD8 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012FDE 43F8 D000                  		lea	($FFFFD000).w,a1
00012FE2 4269 0010                  		clr.w	$10(a1)
00012FE6 4269 0012                  		clr.w	$12(a1)
00012FEA 4269 0014                  		clr.w	$14(a1)
00012FEE 137C 0015 001C             		move.b	#$15,$1C(a1)
00012FF4 337C 0023 003E             		move.w	#$23,$3E(a1)
00012FFA 137C 0000 003C             		move.b	#0,$3C(a1)
00013000 08A9 0005 0022             		bclr	#5,$22(a1)
00013006 08A9 0004 0022             		bclr	#4,$22(a1)
0001300C 0829 0002 0022             		btst	#2,$22(a1)
00013012 6700 FF82                  		beq.w	Obj64_Burst
00013016 08A9 0002 0022             		bclr	#2,$22(a1)
0001301C 137C 0013 0016             		move.b	#$13,$16(a1)
00013022 137C 0009 0017             		move.b	#9,$17(a1)
00013028 5B69 000C                  		subq.w	#5,$C(a1)
0001302C 6000 FF68                  		bra.w	Obj64_Burst
00013030                            ; ===========================================================================
00013030                            
00013030                            Obj64_Display:				; XREF: Obj64_Wobble
00013030 6100 AE2C                  		bsr.w	SpeedToPos
00013034 4A28 0001                  		tst.b	1(a0)
00013038 6A00                       		bpl.s	Obj64_Delete
0001303A 4EFA AE48                  		jmp	DisplaySprite
0001303E                            ; ===========================================================================
0001303E                            
0001303E                            Obj64_Delete:
0001303E 4EFA AE80                  		jmp	DeleteObject
00013042                            ; ===========================================================================
00013042                            
00013042                            Obj64_Display2:				; XREF: Obj64_Index
00013042 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013048 4EB9 0000 AED2             		jsr	AnimateSprite
0001304E 4A28 0001                  		tst.b	1(a0)
00013052 6A00                       		bpl.s	Obj64_Delete2
00013054 4EFA AE2E                  		jmp	DisplaySprite
00013058                            ; ===========================================================================
00013058                            
00013058                            Obj64_Delete2:
00013058 4EFA AE66                  		jmp	DeleteObject
0001305C                            ; ===========================================================================
0001305C                            
0001305C                            Obj64_Delete3:				; XREF: Obj64_Index
0001305C 6000 AE62                  		bra.w	DeleteObject
00013060                            ; ===========================================================================
00013060                            
00013060                            Obj64_BblMaker:				; XREF: Obj64_Index
00013060 4A68 0036                  		tst.w	$36(a0)
00013064 6600                       		bne.s	loc_12874
00013066 3038 F646                  		move.w	($FFFFF646).w,d0
0001306A B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001306E 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013072 4A28 0001                  		tst.b	1(a0)
00013076 6A00 0000                  		bpl.w	Obj64_ChkDel
0001307A 5368 0038                  		subq.w	#1,$38(a0)
0001307E 6A00 0000                  		bpl.w	loc_12914
00013082 317C 0001 0036             		move.w	#1,$36(a0)
00013088                            
00013088                            loc_1283A:
00013088 4EB9 0000 2B32             		jsr	(RandomNumber).l
0001308E 3200                       		move.w	d0,d1
00013090 0240 0007                  		andi.w	#7,d0
00013094 0C40 0006                  		cmpi.w	#6,d0
00013098 64EE                       		bcc.s	loc_1283A
0001309A                            
0001309A 1140 0034                  		move.b	d0,$34(a0)
0001309E 0241 000C                  		andi.w	#$C,d1
000130A2 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000130A8 D2C1                       		adda.w	d1,a1
000130AA 2149 003C                  		move.l	a1,$3C(a0)
000130AE 5328 0032                  		subq.b	#1,$32(a0)
000130B2 6A00                       		bpl.s	loc_12872
000130B4 1168 0033 0032             		move.b	$33(a0),$32(a0)
000130BA 08E8 0007 0036             		bset	#7,$36(a0)
000130C0                            
000130C0                            loc_12872:
000130C0 6000                       		bra.s	loc_1287C
000130C2                            ; ===========================================================================
000130C2                            
000130C2                            loc_12874:				; XREF: Obj64_BblMaker
000130C2 5368 0038                  		subq.w	#1,$38(a0)
000130C6 6A00 0000                  		bpl.w	loc_12914
000130CA                            
000130CA                            loc_1287C:
000130CA 4EB9 0000 2B32             		jsr	(RandomNumber).l
000130D0 0240 001F                  		andi.w	#$1F,d0
000130D4 3140 0038                  		move.w	d0,$38(a0)
000130D8 6100 B230                  		bsr.w	SingleObjLoad
000130DC 6600                       		bne.s	loc_128F8
000130DE 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000130E2 3368 0008 0008             		move.w	8(a0),8(a1)
000130E8 4EB9 0000 2B32             		jsr	(RandomNumber).l
000130EE 0240 000F                  		andi.w	#$F,d0
000130F2 5140                       		subq.w	#8,d0
000130F4 D169 0008                  		add.w	d0,8(a1)
000130F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000130FE 7000                       		moveq	#0,d0
00013100 1028 0034                  		move.b	$34(a0),d0
00013104 2468 003C                  		movea.l	$3C(a0),a2
00013108 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
0001310E 0828 0007 0036             		btst	#7,$36(a0)
00013114 6700                       		beq.s	loc_128F8
00013116 4EB9 0000 2B32             		jsr	(RandomNumber).l
0001311C 0240 0003                  		andi.w	#3,d0
00013120 6600                       		bne.s	loc_128E4
00013122 08E8 0006 0036             		bset	#6,$36(a0)
00013128 6600                       		bne.s	loc_128F8
0001312A 137C 0002 0028             		move.b	#2,$28(a1)
00013130                            
00013130                            loc_128E4:
00013130 4A28 0034                  		tst.b	$34(a0)
00013134 6600                       		bne.s	loc_128F8
00013136 08E8 0006 0036             		bset	#6,$36(a0)
0001313C 6600                       		bne.s	loc_128F8
0001313E 137C 0002 0028             		move.b	#2,$28(a1)
00013144                            
00013144                            loc_128F8:
00013144 5328 0034                  		subq.b	#1,$34(a0)
00013148 6A00                       		bpl.s	loc_12914
0001314A 4EB9 0000 2B32             		jsr	(RandomNumber).l
00013150 0240 007F                  		andi.w	#$7F,d0
00013154 0640 0080                  		addi.w	#$80,d0
00013158 D168 0038                  		add.w	d0,$38(a0)
0001315C 4268 0036                  		clr.w	$36(a0)
00013160                            
00013160                            loc_12914:
00013160 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013166 4EB9 0000 AED2             		jsr	AnimateSprite
0001316C                            
0001316C                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001316C 3028 0008                  		move.w	8(a0),d0
00013170 0240 FF80                  		andi.w	#$FF80,d0
00013174 3238 F700                  		move.w	($FFFFF700).w,d1
00013178 0441 0080                  		subi.w	#$80,d1
0001317C 0241 FF80                  		andi.w	#$FF80,d1
00013180 9041                       		sub.w	d1,d0
00013182 0C40 0280                  		cmpi.w	#$280,d0
00013186 6200 AD38                  		bhi.w	DeleteObject
0001318A 3038 F646                  		move.w	($FFFFF646).w,d0
0001318E B068 000C                  		cmp.w	$C(a0),d0
00013192 6500 ACF0                  		bcs.w	DisplaySprite
00013196 4E75                       		rts	
00013198                            ; ===========================================================================
00013198                            ; bubble production sequence
00013198                            
00013198                            ; 0 = small bubble, 1 =	large bubble
00013198                            
00013198 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000131AA                            
000131AA                            ; ===========================================================================
000131AA                            
000131AA                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000131AA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000131AE 6B00                       		bmi.s	loc_12998
000131B0 43F8 D000                  		lea	($FFFFD000).w,a1
000131B4 3029 0008                  		move.w	8(a1),d0
000131B8 3228 0008                  		move.w	8(a0),d1
000131BC 0441 0010                  		subi.w	#$10,d1
000131C0 B240                       		cmp.w	d0,d1
000131C2 6400                       		bcc.s	loc_12998
000131C4 0641 0020                  		addi.w	#$20,d1
000131C8 B240                       		cmp.w	d0,d1
000131CA 6500                       		bcs.s	loc_12998
000131CC 3029 000C                  		move.w	$C(a1),d0
000131D0 3228 000C                  		move.w	$C(a0),d1
000131D4 B240                       		cmp.w	d0,d1
000131D6 6400                       		bcc.s	loc_12998
000131D8 0641 0010                  		addi.w	#$10,d1
000131DC B240                       		cmp.w	d0,d1
000131DE 6500                       		bcs.s	loc_12998
000131E0 7001                       		moveq	#1,d0
000131E2 4E75                       		rts	
000131E4                            ; ===========================================================================
000131E4                            
000131E4                            loc_12998:
000131E4 7000                       		moveq	#0,d0
000131E6 4E75                       		rts	
000131E8                            ; ===========================================================================
000131E8                            Ani_obj64:
000131E8                            	include "_anim\obj64.asm"
000131E8                            ; ---------------------------------------------------------------------------
000131E8                            ; Animation script - bubbles (LZ)
000131E8                            ; ---------------------------------------------------------------------------
000131E8 0000                       		dc.w byte_129AA-Ani_obj64
000131EA 0000                       		dc.w byte_129B0-Ani_obj64
000131EC 0000                       		dc.w byte_129B6-Ani_obj64
000131EE 0000                       		dc.w byte_129BE-Ani_obj64
000131F0 0000                       		dc.w byte_129BE-Ani_obj64
000131F2 0000                       		dc.w byte_129C0-Ani_obj64
000131F4 0000                       		dc.w byte_129C6-Ani_obj64
000131F6 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000131FC 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013202 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001320A 04FC                       byte_129BE:	dc.b 4,	$FC
0001320C 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013212 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013218 00                         		even
00013218 00                         		even
00013218                            
00013218                            ; ---------------------------------------------------------------------------
00013218                            ; Sprite mappings - bubbles (LZ)
00013218                            ; ---------------------------------------------------------------------------
00013218                            Map_obj64:
00013218                            	include "_maps\obj64.asm"
00013218                            ; ---------------------------------------------------------------------------
00013218                            ; Sprite mappings - bubbles (LZ)
00013218                            ; ---------------------------------------------------------------------------
00013218 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001321C 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013220 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013224 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013228 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001322C 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013230 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013234 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013238 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001323C 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013240 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013244 0000                       		dc.w byte_12A9C-Map_obj64
00013246 01                         byte_129FA:	dc.b 1
00013247 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001324C 01                         byte_12A00:	dc.b 1
0001324D FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013252 01                         byte_12A06:	dc.b 1
00013253 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013258 01                         byte_12A0C:	dc.b 1
00013259 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001325E 01                         byte_12A12:	dc.b 1
0001325F F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013264 01                         byte_12A18:	dc.b 1
00013265 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001326A 01                         byte_12A1E:	dc.b 1
0001326B F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013270 04                         byte_12A24:	dc.b 4
00013271 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013276 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001327B 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013280 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013285 04                         byte_12A39:	dc.b 4
00013286 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001328B F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013290 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013295 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001329A 01                         byte_12A4E:	dc.b 1
0001329B F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
000132A0 01                         byte_12A54:	dc.b 1
000132A1 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000132A6 01                         byte_12A5A:	dc.b 1
000132A7 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
000132AC 01                         byte_12A60:	dc.b 1
000132AD F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000132B2 01                         byte_12A66:	dc.b 1
000132B3 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000132B8 01                         byte_12A6C:	dc.b 1
000132B9 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000132BE 01                         byte_12A72:	dc.b 1
000132BF F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000132C4 01                         byte_12A78:	dc.b 1
000132C5 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000132CA 01                         byte_12A7E:	dc.b 1
000132CB F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000132D0 01                         byte_12A84:	dc.b 1
000132D1 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000132D6 01                         byte_12A8A:	dc.b 1
000132D7 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000132DC 01                         byte_12A90:	dc.b 1
000132DD F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000132E2 01                         byte_12A96:	dc.b 1
000132E3 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000132E8 00                         byte_12A9C:	dc.b 0
000132EA 00                         		even
000132EA 00                         		even
000132EA                            
000132EA                            ; ===========================================================================
000132EA                            ; ---------------------------------------------------------------------------
000132EA                            ; Object 65 - waterfalls (LZ)
000132EA                            ; ---------------------------------------------------------------------------
000132EA                            
000132EA                            Obj65:					; XREF: Obj_Index
000132EA 7000                       		moveq	#0,d0
000132EC 1028 0024                  		move.b	$24(a0),d0
000132F0 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000132F4 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000132F8                            ; ===========================================================================
000132F8 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000132FA 0000                       		dc.w Obj65_Animate-Obj65_Index
000132FC 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000132FE 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013300 0000                       		dc.w loc_12B36-Obj65_Index
00013302                            ; ===========================================================================
00013302                            
00013302                            Obj65_Main:				; XREF: Obj65_Index
00013302 5828 0024                  		addq.b	#4,$24(a0)
00013306 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
0001330E 317C 4259 0002             		move.w	#$4259,2(a0)
00013314 0028 0004 0001             		ori.b	#4,1(a0)
0001331A 117C 0018 0019             		move.b	#$18,$19(a0)
00013320 117C 0001 0018             		move.b	#1,$18(a0)
00013326 1028 0028                  		move.b	$28(a0),d0	; get object type
0001332A 6A00                       		bpl.s	loc_12AE6
0001332C 08E8 0007 0002             		bset	#7,2(a0)
00013332                            
00013332                            loc_12AE6:
00013332 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013336 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
0001333A 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001333E 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013340 4228 0018                  		clr.b	$18(a0)
00013344 5528 0024                  		subq.b	#2,$24(a0)
00013348 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
0001334E 6700                       		beq.s	loc_12B0A	; if not, branch
00013350 117C 0006 0024             		move.b	#6,$24(a0)
00013356                            
00013356                            loc_12B0A:
00013356 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001335C 6700                       		beq.s	Obj65_Animate	; if not, branch
0001335E 117C 0008 0024             		move.b	#8,$24(a0)
00013364                            
00013364                            Obj65_Animate:				; XREF: Obj65_Index
00013364 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001336A 4EB9 0000 AED2             		jsr	AnimateSprite
00013370                            
00013370                            Obj65_ChkDel:				; XREF: Obj65_Index
00013370 6000 CBBA                  		bra.w	MarkObjGone
00013374                            ; ===========================================================================
00013374                            
00013374                            Obj65_FixHeight:			; XREF: Obj65_Index
00013374 3038 F646                  		move.w	($FFFFF646).w,d0
00013378 0440 0010                  		subi.w	#$10,d0
0001337C 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013380 60E2                       		bra.s	Obj65_Animate
00013382                            ; ===========================================================================
00013382                            
00013382                            loc_12B36:				; XREF: Obj65_Index
00013382 08A8 0007 0002             		bclr	#7,2(a0)
00013388 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001338E 6600                       		bne.s	Obj65_Animate2
00013390 08E8 0007 0002             		bset	#7,2(a0)
00013396                            
00013396                            Obj65_Animate2:
00013396 60CC                       		bra.s	Obj65_Animate
00013398                            ; ===========================================================================
00013398                            Ani_obj65:
00013398                            	include "_anim\obj65.asm"
00013398                            ; ---------------------------------------------------------------------------
00013398                            ; Animation script - waterfall (LZ)
00013398                            ; ---------------------------------------------------------------------------
00013398 0000                       		dc.w byte_12B4E-Ani_obj65
0001339A 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000133A0 00                         		even
000133A0 00                         		even
000133A0                            
000133A0                            ; ---------------------------------------------------------------------------
000133A0                            ; Sprite mappings - waterfalls (LZ)
000133A0                            ; ---------------------------------------------------------------------------
000133A0                            Map_obj65:
000133A0                            	include "_maps\obj65.asm"
000133A0                            ; ---------------------------------------------------------------------------
000133A0                            ; Sprite mappings - waterfalls (LZ)
000133A0                            ; ---------------------------------------------------------------------------
000133A0 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000133A4 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000133A8 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000133AC 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000133B0 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000133B4 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000133B8 01                         byte_12B6C:	dc.b 1
000133B9 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000133BE 02                         byte_12B72:	dc.b 2
000133BF F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000133C4 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000133C9 02                         byte_12B7D:	dc.b 2
000133CA F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000133CF 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000133D4 01                         byte_12B88:	dc.b 1
000133D5 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000133DA 02                         byte_12B8E:	dc.b 2
000133DB F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000133E0 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000133E5 01                         byte_12B99:	dc.b 1
000133E6 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000133EB 01                         byte_12B9F:	dc.b 1
000133EC F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000133F1 01                         byte_12BA5:	dc.b 1
000133F2 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000133F7 02                         byte_12BAB:	dc.b 2
000133F8 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000133FD 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013402 02                         byte_12BB6:	dc.b 2
00013403 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013408 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001340D 02                         byte_12BC1:	dc.b 2
0001340E F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013413 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013418 02                         byte_12BCC:	dc.b 2
00013419 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001341E F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013424 00                         		even
00013424 00                         		even
00013424                            
00013424                            ; ===========================================================================
00013424                            ; ---------------------------------------------------------------------------
00013424                            ; Object 01 - Sonic
00013424                            ; ---------------------------------------------------------------------------
00013424                            
00013424                            Obj01:					; XREF: Obj_Index
00013424 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013428 6700                       		beq.s	Obj01_Normal	; if not, branch
0001342A 4EF9 0000 0000             		jmp	DebugMode
00013430                            ; ===========================================================================
00013430                            
00013430                            Obj01_Normal:
00013430 7000                       		moveq	#0,d0
00013432 1028 0024                  		move.b	$24(a0),d0
00013436 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001343A 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001343E                            ; ===========================================================================
0001343E 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013440 0000                       		dc.w Obj01_Control-Obj01_Index
00013442 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013444 0000                       		dc.w Obj01_Death-Obj01_Index
00013446 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013448                            ; ===========================================================================
00013448                            
00013448                            Player_Maps:
00013448 0000 0000                  	dc.l	Map_Sonic
0001344C 0000 0000                  	dc.l	Map_Sonic ; gronic
00013450 0000 0000                  	dc.l	Map_Sonic ; anakama
00013454 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
00013458                            	; insert player mapping here
00013458                            	
00013458                            Obj01_Main:				; XREF: Obj01_Index
00013458 5428 0024                  		addq.b	#2,$24(a0)
0001345C 117C 0013 0016             		move.b	#$13,$16(a0)
00013462 117C 0009 0017             		move.b	#9,$17(a0)
00013468                            		
00013468 7000                       		moveq	#0,d0
0001346A 1038 FFE8                  		move.b	(v_character),d0
0001346E E548                       		lsl.w	#2,d0
00013470 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013474 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
0001347A                            		
0001347A 317C 0780 0002             		move.w	#$780,2(a0)
00013480 117C 0002 0018             		move.b	#2,$18(a0)
00013486 117C 0018 0019             		move.b	#$18,$19(a0)
0001348C 117C 0004 0001             		move.b	#4,1(a0)
00013492 31FC 0FFF F760             		move.w	#$FFF,($FFFFF760).w ; Sonic's top speed
00013498 31FC 000F F762             		move.w	#$F,($FFFFF762).w ; Sonic's acceleration
0001349E 31FC 0AAA F764             		move.w	#$AAA,($FFFFF764).w ; Sonic's deceleration
000134A4                            
000134A4                            Obj01_Control:				; XREF: Obj01_Index
000134A4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000134A8 6700                       		beq.s	loc_12C58	; if not, branch
000134AA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000134B0 6700                       		beq.s	loc_12C58	; if not, branch
000134B2 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000134B8 4238 F7CC                  		clr.b	($FFFFF7CC).w
000134BC 4E75                       		rts	
000134BE                            ; ===========================================================================
000134BE                            
000134BE                            loc_12C58:
000134BE 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000134C2 6600                       		bne.s	loc_12C64	; if yes, branch
000134C4 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000134CA                            
000134CA                            loc_12C64:
000134CA 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000134D0 6600                       		bne.s	loc_12C7E	; if yes, branch
000134D2 7000                       		moveq	#0,d0
000134D4 1028 0022                  		move.b	$22(a0),d0
000134D8 0240 0006                  		andi.w	#6,d0
000134DC 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000134E0 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000134E4                            
000134E4                            loc_12C7E:
000134E4 6100                       		bsr.s	Sonic_Display
000134E6 6100 0000                  		bsr.w	Sonic_RecordPos
000134EA 6100 0000                  		bsr.w	Sonic_Water
000134EE 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000134F4 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000134FA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000134FE 6700                       		beq.s	loc_12CA6
00013500 4A28 001C                  		tst.b	$1C(a0)
00013504 6600                       		bne.s	loc_12CA6
00013506 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001350C                            
0001350C                            loc_12CA6:
0001350C 6100 0000                  		bsr.w	Sonic_Animate
00013510 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013514 6B00                       		bmi.s	loc_12CB6
00013516 4EB9 0000 0000             		jsr	TouchResponse
0001351C                            
0001351C                            loc_12CB6:
0001351C 6100 0000                  		bsr.w	Sonic_Loops
00013520 6100 0000                  		bsr.w	LoadSonicDynPLC
00013524 4E75                       		rts	
00013526                            ; ===========================================================================
00013526 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013528 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001352A 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001352C 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001352E                            ; ---------------------------------------------------------------------------
0001352E                            ; Music	to play	after invincibility wears off
0001352E                            ; ---------------------------------------------------------------------------
0001352E                            ; ===========================================================================
0001352E                            
0001352E                            Sonic_Display:				; XREF: loc_12C7E
0001352E 3028 0030                  		move.w	$30(a0),d0
00013532 6700                       		beq.s	Obj01_Display
00013534 5368 0030                  		subq.w	#1,$30(a0)
00013538 E648                       		lsr.w	#3,d0
0001353A 6400                       		bcc.s	Obj01_ChkInvin
0001353C                            
0001353C                            Obj01_Display:
0001353C 4EBA A946                  		jsr	DisplaySprite
00013540                            
00013540                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013540                             
00013540                            Obj01_ChkInvin:
00013540 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013544 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013548 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001354C 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013550 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013554 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013558 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001355C 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013560 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013566 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001356A 7000                       		moveq	#0,d0
0001356C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013570                             
00013570 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013576 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013578 43F9 0000 3BB6             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001357E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013580                             
00013580                            Obj01_GetBgm2:
00013580 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013586 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013588 43F9 0000 3BBE             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001358E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013590                             
00013590                            Obj01_GetBgm3:
00013590 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013596 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013598 43F9 0000 3BC6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001359E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000135A0                             
000135A0                            Obj01_GetBgm4:
000135A0 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000135A6 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
000135A8 43F9 0000 3BCE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000135AE                             
000135AE                            Obj01_PlayMusic:
000135AE 1031 0000                  		move.b	(a1,d0.w),d0
000135B2 4EB9 0000 13B0             		jsr	(PlaySound).l	; play normal music
000135B8                             
000135B8                            ; NineKode ends here.
000135B8                            
000135B8                            Obj01_RmvInvin:
000135B8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000135BE                            
000135BE                            Obj01_ChkShoes:
000135BE 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000135C2 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000135C4 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000135C8 6700                       		beq.s	Obj01_ExitChk
000135CA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000135CE 6600                       		bne.s	Obj01_ExitChk
000135D0 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000135D6 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000135DC 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000135E2 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000135E8 303C 00E3                  		move.w	#$E3,d0
000135EC 4EF9 0000 13B0             		jmp	(PlaySound).l	; run music at normal speed
000135F2                            ; ===========================================================================
000135F2                            
000135F2                            Obj01_ExitChk:
000135F2 4E75                       		rts	
000135F4                            
000135F4                            ; ---------------------------------------------------------------------------
000135F4                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000135F4                            ; ---------------------------------------------------------------------------
000135F4                            
000135F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135F4                            
000135F4                            
000135F4                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000135F4 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000135F8 43F8 CB00                  		lea	($FFFFCB00).w,a1
000135FC 43F1 0000                  		lea	(a1,d0.w),a1
00013600 32E8 0008                  		move.w	8(a0),(a1)+
00013604 32E8 000C                  		move.w	$C(a0),(a1)+
00013608 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
0001360C 4E75                       		rts	
0001360E                            ; End of function Sonic_RecordPos
0001360E                            
0001360E                            ; ---------------------------------------------------------------------------
0001360E                            ; Subroutine for Sonic when he's underwater
0001360E                            ; ---------------------------------------------------------------------------
0001360E                            
0001360E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001360E                            
0001360E                            
0001360E                            Sonic_Water:				; XREF: loc_12C7E
0001360E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013614 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013616                            
00013616                            locret_12D80:
00013616 4E75                       		rts	
00013618                            ; ===========================================================================
00013618                            
00013618                            Obj01_InWater:
00013618 3038 F646                  		move.w	($FFFFF646).w,d0
0001361C B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013620 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013622 08E8 0006 0022             		bset	#6,$22(a0)
00013628 66EC                       		bne.s	locret_12D80
0001362A 6100 0000                  		bsr.w	ResumeMusic
0001362E 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013634 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001363A 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013640 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013646 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001364C E0E8 0010                  		asr	$10(a0)
00013650 E0E8 0012                  		asr	$12(a0)
00013654 E0E8 0012                  		asr	$12(a0)
00013658 67BC                       		beq.s	locret_12D80
0001365A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013660 303C 00AA                  		move.w	#$AA,d0
00013664 4EF9 0000 13B6             		jmp	(PlaySound_Special).l ;	play splash sound
0001366A                            ; ===========================================================================
0001366A                            
0001366A                            Obj01_OutWater:
0001366A 08A8 0006 0022             		bclr	#6,$22(a0)
00013670 67A4                       		beq.s	locret_12D80
00013672 6100 0000                  		bsr.w	ResumeMusic
00013676 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001367C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013682 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013688 E1E8 0012                  		asl	$12(a0)
0001368C 6700 FF88                  		beq.w	locret_12D80
00013690 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013696 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001369C 6E00                       		bgt.s	loc_12E0E
0001369E 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000136A4                            
000136A4                            loc_12E0E:
000136A4 303C 00AA                  		move.w	#$AA,d0
000136A8 4EF9 0000 13B6             		jmp	(PlaySound_Special).l ;	play splash sound
000136AE                            ; End of function Sonic_Water
000136AE                            
000136AE                            ; ===========================================================================
000136AE                            ; ---------------------------------------------------------------------------
000136AE                            ; Modes	for controlling	Sonic
000136AE                            ; ---------------------------------------------------------------------------
000136AE                            
000136AE                            Obj01_MdNormal:				; XREF: Obj01_Modes
000136AE 6100 0000                  		bsr.w	Sonic_Jump
000136B2 6100 0000                  		bsr.w	Sonic_SlopeResist
000136B6 6100 0000                  		bsr.w	Sonic_Move
000136BA 6100 0000                  		bsr.w	Sonic_Roll
000136BE 6100 0000                  		bsr.w	Sonic_LevelBound
000136C2 4EBA A79A                  		jsr	SpeedToPos
000136C6 6100 0000                  		bsr.w	Sonic_AnglePos
000136CA 6100 0000                  		bsr.w	Sonic_SlopeRepel
000136CE 4E75                       		rts	
000136D0                            ; ===========================================================================
000136D0                            
000136D0                            Obj01_MdJump:				; XREF: Obj01_Modes
000136D0 6100 0000                  		bsr.w	Sonic_JumpHeight
000136D4 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000136D8 6100 0000                  		bsr.w	Sonic_LevelBound
000136DC 4EBA A70E                  		jsr	ObjectFall
000136E0 0828 0006 0022             		btst	#6,$22(a0)
000136E6 6700                       		beq.s	loc_12E5C
000136E8 0468 0028 0012             		subi.w	#$28,$12(a0)
000136EE                            
000136EE                            loc_12E5C:
000136EE 6100 0000                  		bsr.w	Sonic_JumpAngle
000136F2 6100 0000                  		bsr.w	Sonic_Floor
000136F6 4E75                       		rts	
000136F8                            ; ===========================================================================
000136F8                            
000136F8                            Obj01_MdRoll:				; XREF: Obj01_Modes
000136F8 6100 0000                  		bsr.w	Sonic_Jump
000136FC 6100 0000                  		bsr.w	Sonic_RollRepel
00013700 6100 0000                  		bsr.w	Sonic_RollSpeed
00013704 6100 0000                  		bsr.w	Sonic_LevelBound
00013708 4EBA A754                  		jsr	SpeedToPos
0001370C 6100 0000                  		bsr.w	Sonic_AnglePos
00013710 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013714 4E75                       		rts	
00013716                            ; ===========================================================================
00013716                            
00013716                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013716 6100 0000                  		bsr.w	Sonic_JumpHeight
0001371A 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001371E 6100 0000                  		bsr.w	Sonic_LevelBound
00013722 6100 0000                  		bsr.w	Sonic_AirUnroll
00013726 4EBA A6C4                  		jsr	ObjectFall
0001372A 0828 0006 0022             		btst	#6,$22(a0)
00013730 6700                       		beq.s	loc_12EA6
00013732 0468 0028 0012             		subi.w	#$28,$12(a0)
00013738                            
00013738                            loc_12EA6:
00013738 6100 0000                  		bsr.w	Sonic_JumpAngle
0001373C 6100 0000                  		bsr.w	Sonic_Floor
00013740 4E75                       		rts	
00013742                            ; ---------------------------------------------------------------------------
00013742                            ; Subroutine to	make Sonic walk/run
00013742                            ; ---------------------------------------------------------------------------
00013742                            
00013742                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013742                            
00013742                            
00013742                            Sonic_Move:				; XREF: Obj01_MdNormal
00013742 3C38 F760                  		move.w	($FFFFF760).w,d6
00013746 3A38 F762                  		move.w	($FFFFF762).w,d5
0001374A 3838 F764                  		move.w	($FFFFF764).w,d4
0001374E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013752 6600 0000                  		bne.w	loc_12FEE
00013756 4A68 003E                  		tst.w	$3E(a0)
0001375A 6600 0000                  		bne.w	Obj01_ResetScr
0001375E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013764 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013766 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001376C 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
0001376E 6100 0000                  		bsr.w	Sonic_MoveLeft
00013772                            
00013772                            Obj01_NotLeft:
00013772 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013778 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001377A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013780 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013782 6100 0000                  		bsr.w	Sonic_MoveLeft
00013786 6000                       		bra.s	Obj01_NotRight
00013788                            
00013788                            Obj01_MoveRight:
00013788 6100 0000                  		bsr.w	Sonic_MoveRight
0001378C                            
0001378C                            Obj01_NotRight:
0001378C 1028 0026                  		move.b	$26(a0),d0
00013790 0600 0020                  		addi.b	#$20,d0
00013794 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013798 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001379C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000137A0 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000137A4 08A8 0005 0022             		bclr	#5,$22(a0)
000137AA 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000137B0 0828 0003 0022             		btst	#3,$22(a0)
000137B6 6700                       		beq.s	Sonic_Balance
000137B8 7000                       		moveq	#0,d0
000137BA 1028 003D                  		move.b	$3D(a0),d0
000137BE ED48                       		lsl.w	#6,d0
000137C0 43F8 D000                  		lea	($FFFFD000).w,a1
000137C4 43F1 0000                  		lea	(a1,d0.w),a1
000137C8 4A29 0022                  		tst.b	$22(a1)
000137CC 6B00                       		bmi.s	Sonic_LookUp
000137CE 7200                       		moveq	#0,d1
000137D0 1229 0019                  		move.b	$19(a1),d1
000137D4 3401                       		move.w	d1,d2
000137D6 D442                       		add.w	d2,d2
000137D8 5942                       		subq.w	#4,d2
000137DA D268 0008                  		add.w	8(a0),d1
000137DE 9269 0008                  		sub.w	8(a1),d1
000137E2 0C41 0004                  		cmpi.w	#4,d1
000137E6 6D00                       		blt.s	loc_12F6A
000137E8 B242                       		cmp.w	d2,d1
000137EA 6C00                       		bge.s	loc_12F5A
000137EC 6000                       		bra.s	Sonic_LookUp
000137EE                            ; ===========================================================================
000137EE                            
000137EE                            Sonic_Balance:
000137EE 4EB9 0000 0000             		jsr	ObjHitFloor
000137F4 0C41 000C                  		cmpi.w	#$C,d1
000137F8 6D00                       		blt.s	Sonic_LookUp
000137FA 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013800 6600                       		bne.s	loc_12F62
00013802                            
00013802                            loc_12F5A:
00013802 08A8 0000 0022             		bclr	#0,$22(a0)
00013808 6000                       		bra.s	loc_12F70
0001380A                            ; ===========================================================================
0001380A                            
0001380A                            loc_12F62:
0001380A 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013810 6600                       		bne.s	Sonic_LookUp
00013812                            
00013812                            loc_12F6A:
00013812 08E8 0000 0022             		bset	#0,$22(a0)
00013818                            
00013818                            loc_12F70:
00013818 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001381E 6000                       		bra.s	Obj01_ResetScr
00013820                            ; ===========================================================================
00013820                            
00013820                            Sonic_LookUp:
00013820 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013826 6700                       		beq.s	Sonic_Duck	; if not, branch
00013828 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001382E 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013834 6700                       		beq.s	loc_12FC2
00013836 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001383A 6000                       		bra.s	loc_12FC2
0001383C                            ; ===========================================================================
0001383C                            
0001383C                            Sonic_Duck:
0001383C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013842 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013844 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001384A 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013850 6700                       		beq.s	loc_12FC2
00013852 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013856 6000                       		bra.s	loc_12FC2
00013858                            ; ===========================================================================
00013858                            
00013858                            Obj01_ResetScr:
00013858 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001385E 6700                       		beq.s	loc_12FC2	; if yes, branch
00013860 6400                       		bcc.s	loc_12FBE
00013862 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013866                            
00013866                            loc_12FBE:
00013866 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001386A                            
0001386A                            loc_12FC2:
0001386A 1038 F602                  		move.b	($FFFFF602).w,d0
0001386E 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013872 6600                       		bne.s	loc_12FEE	; if yes, branch
00013874 3028 0014                  		move.w	$14(a0),d0
00013878 6700                       		beq.s	loc_12FEE
0001387A 6B00                       		bmi.s	loc_12FE2
0001387C 9045                       		sub.w	d5,d0
0001387E 6400                       		bcc.s	loc_12FDC
00013880 303C 0000                  		move.w	#0,d0
00013884                            
00013884                            loc_12FDC:
00013884 3140 0014                  		move.w	d0,$14(a0)
00013888 6000                       		bra.s	loc_12FEE
0001388A                            ; ===========================================================================
0001388A                            
0001388A                            loc_12FE2:
0001388A D045                       		add.w	d5,d0
0001388C 6400                       		bcc.s	loc_12FEA
0001388E 303C 0000                  		move.w	#0,d0
00013892                            
00013892                            loc_12FEA:
00013892 3140 0014                  		move.w	d0,$14(a0)
00013896                            
00013896                            loc_12FEE:
00013896 1028 0026                  		move.b	$26(a0),d0
0001389A 4EB9 0000 2B58             		jsr	(CalcSine).l
000138A0 C3E8 0014                  		muls.w	$14(a0),d1
000138A4 E081                       		asr.l	#8,d1
000138A6 3141 0010                  		move.w	d1,$10(a0)
000138AA C1E8 0014                  		muls.w	$14(a0),d0
000138AE E080                       		asr.l	#8,d0
000138B0 3140 0012                  		move.w	d0,$12(a0)
000138B4                            
000138B4                            loc_1300C:
000138B4 1028 0026                  		move.b	$26(a0),d0
000138B8 0600 0040                  		addi.b	#$40,d0
000138BC 6B00                       		bmi.s	locret_1307C
000138BE 123C 0040                  		move.b	#$40,d1
000138C2 4A68 0014                  		tst.w	$14(a0)
000138C6 6700                       		beq.s	locret_1307C
000138C8 6B00                       		bmi.s	loc_13024
000138CA 4441                       		neg.w	d1
000138CC                            
000138CC                            loc_13024:
000138CC 1028 0026                  		move.b	$26(a0),d0
000138D0 D001                       		add.b	d1,d0
000138D2 3F00                       		move.w	d0,-(sp)
000138D4 6100 0000                  		bsr.w	Sonic_WalkSpeed
000138D8 301F                       		move.w	(sp)+,d0
000138DA 4A41                       		tst.w	d1
000138DC 6A00                       		bpl.s	locret_1307C
000138DE E141                       		asl.w	#8,d1
000138E0 0600 0020                  		addi.b	#$20,d0
000138E4 0200 00C0                  		andi.b	#$C0,d0
000138E8 6700                       		beq.s	loc_13078
000138EA 0C00 0040                  		cmpi.b	#$40,d0
000138EE 6700                       		beq.s	loc_13066
000138F0 0C00 0080                  		cmpi.b	#$80,d0
000138F4 6700                       		beq.s	loc_13060
000138F6 D368 0010                  		add.w	d1,$10(a0)
000138FA 08E8 0005 0022             		bset	#5,$22(a0)
00013900 317C 0000 0014             		move.w	#0,$14(a0)
00013906 4E75                       		rts	
00013908                            ; ===========================================================================
00013908                            
00013908                            loc_13060:
00013908 9368 0012                  		sub.w	d1,$12(a0)
0001390C 4E75                       		rts	
0001390E                            ; ===========================================================================
0001390E                            
0001390E                            loc_13066:
0001390E 9368 0010                  		sub.w	d1,$10(a0)
00013912 08E8 0005 0022             		bset	#5,$22(a0)
00013918 317C 0000 0014             		move.w	#0,$14(a0)
0001391E 4E75                       		rts	
00013920                            ; ===========================================================================
00013920                            
00013920                            loc_13078:
00013920 D368 0012                  		add.w	d1,$12(a0)
00013924                            
00013924                            locret_1307C:
00013924 4E75                       		rts	
00013926                            ; End of function Sonic_Move
00013926                            
00013926                            
00013926                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013926                            
00013926                            
00013926                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013926 3028 0014                  		move.w	$14(a0),d0
0001392A 6700                       		beq.s	loc_13086
0001392C 6A00                       		bpl.s	loc_130B2
0001392E                            
0001392E                            loc_13086:
0001392E 08E8 0000 0022             		bset	#0,$22(a0)
00013934 6600                       		bne.s	loc_1309A
00013936 08A8 0005 0022             		bclr	#5,$22(a0)
0001393C 117C 0001 001D             		move.b	#1,$1D(a0)
00013942                            
00013942                            loc_1309A:
00013942 9045                       		sub.w	d5,d0
00013944 3206                       		move.w	d6,d1
00013946 4441                       		neg.w	d1
00013948 B041                       		cmp.w	d1,d0
0001394A 6E00                       		bgt.s	loc_130A6
0001394C 3001                       		move.w	d1,d0
0001394E                            
0001394E                            loc_130A6:
0001394E 3140 0014                  		move.w	d0,$14(a0)
00013952 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013958 4E75                       		rts	
0001395A                            ; ===========================================================================
0001395A                            
0001395A                            loc_130B2:				; XREF: Sonic_MoveLeft
0001395A 9044                       		sub.w	d4,d0
0001395C 6400                       		bcc.s	loc_130BA
0001395E 303C FF80                  		move.w	#-$80,d0
00013962                            
00013962                            loc_130BA:
00013962 3140 0014                  		move.w	d0,$14(a0)
00013966 1028 0026                  		move.b	$26(a0),d0
0001396A 0600 0020                  		addi.b	#$20,d0
0001396E 0200 00C0                  		andi.b	#$C0,d0
00013972 6600                       		bne.s	locret_130E8
00013974 0C40 0400                  		cmpi.w	#$400,d0
00013978 6D00                       		blt.s	locret_130E8
0001397A 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013980 08A8 0000 0022             		bclr	#0,$22(a0)
00013986 303C 00A4                  		move.w	#$A4,d0
0001398A 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play stopping sound
00013990                            
00013990                            locret_130E8:
00013990 4E75                       		rts	
00013992                            ; End of function Sonic_MoveLeft
00013992                            
00013992                            
00013992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013992                            
00013992                            
00013992                            Sonic_MoveRight:			; XREF: Sonic_Move
00013992 3028 0014                  		move.w	$14(a0),d0
00013996 6B00                       		bmi.s	loc_13118
00013998 08A8 0000 0022             		bclr	#0,$22(a0)
0001399E 6700                       		beq.s	loc_13104
000139A0 08A8 0005 0022             		bclr	#5,$22(a0)
000139A6 117C 0001 001D             		move.b	#1,$1D(a0)
000139AC                            
000139AC                            loc_13104:
000139AC D045                       		add.w	d5,d0
000139AE B046                       		cmp.w	d6,d0
000139B0 6D00                       		blt.s	loc_1310C
000139B2 3006                       		move.w	d6,d0
000139B4                            
000139B4                            loc_1310C:
000139B4 3140 0014                  		move.w	d0,$14(a0)
000139B8 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000139BE 4E75                       		rts	
000139C0                            ; ===========================================================================
000139C0                            
000139C0                            loc_13118:				; XREF: Sonic_MoveRight
000139C0 D044                       		add.w	d4,d0
000139C2 6400                       		bcc.s	loc_13120
000139C4 303C 0080                  		move.w	#$80,d0
000139C8                            
000139C8                            loc_13120:
000139C8 3140 0014                  		move.w	d0,$14(a0)
000139CC 1028 0026                  		move.b	$26(a0),d0
000139D0 0600 0020                  		addi.b	#$20,d0
000139D4 0200 00C0                  		andi.b	#$C0,d0
000139D8 6600                       		bne.s	locret_1314E
000139DA 0C40 FC00                  		cmpi.w	#-$400,d0
000139DE 6E00                       		bgt.s	locret_1314E
000139E0 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000139E6 08E8 0000 0022             		bset	#0,$22(a0)
000139EC 303C 00A4                  		move.w	#$A4,d0
000139F0 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play stopping sound
000139F6                            
000139F6                            locret_1314E:
000139F6 4E75                       		rts	
000139F8                            ; End of function Sonic_MoveRight
000139F8                            
000139F8                            ; ---------------------------------------------------------------------------
000139F8                            ; Subroutine to	change Sonic's speed as he rolls
000139F8                            ; ---------------------------------------------------------------------------
000139F8                            
000139F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139F8                            
000139F8                            
000139F8                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000139F8 3C38 F760                  		move.w	($FFFFF760).w,d6
000139FC E346                       		asl.w	#1,d6
000139FE 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A02 E245                       		asr.w	#1,d5
00013A04 3838 F764                  		move.w	($FFFFF764).w,d4
00013A08 E444                       		asr.w	#2,d4
00013A0A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013A0E 6600 0000                  		bne.w	loc_131CC
00013A12 4A68 003E                  		tst.w	$3E(a0)
00013A16 6600                       		bne.s	loc_13188
00013A18 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A1E 6700                       		beq.s	loc_1317C	; if not, branch
00013A20 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A26 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013A28 6100 0000                  		bsr.w	Sonic_RollLeft
00013A2C                            
00013A2C                            loc_1317C:
00013A2C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A32 6700                       		beq.s	loc_13188	; if not, branch
00013A34 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A3A 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013A3C 6100 0000                  		bsr.w	Sonic_RollLeft
00013A40 6000                       		bra.s	loc_13188
00013A42                            
00013A42                            SonicRS_RollRight:
00013A42 6100 0000                  		bsr.w	Sonic_RollRight
00013A46                            
00013A46                            loc_13188:
00013A46 3028 0014                  		move.w	$14(a0),d0
00013A4A 6700                       		beq.s	loc_131AA
00013A4C 6B00                       		bmi.s	loc_1319E
00013A4E 9045                       		sub.w	d5,d0
00013A50 6400                       		bcc.s	loc_13198
00013A52 303C 0000                  		move.w	#0,d0
00013A56                            
00013A56                            loc_13198:
00013A56 3140 0014                  		move.w	d0,$14(a0)
00013A5A 6000                       		bra.s	loc_131AA
00013A5C                            ; ===========================================================================
00013A5C                            
00013A5C                            loc_1319E:				; XREF: Sonic_RollSpeed
00013A5C D045                       		add.w	d5,d0
00013A5E 6400                       		bcc.s	loc_131A6
00013A60 303C 0000                  		move.w	#0,d0
00013A64                            
00013A64                            loc_131A6:
00013A64 3140 0014                  		move.w	d0,$14(a0)
00013A68                            
00013A68                            loc_131AA:
00013A68 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013A6C 6600                       		bne.s	loc_131CC	; if yes, branch
00013A6E 08A8 0002 0022             		bclr	#2,$22(a0)
00013A74 117C 0013 0016             		move.b	#$13,$16(a0)
00013A7A 117C 0009 0017             		move.b	#9,$17(a0)
00013A80 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013A86 5B68 000C                  		subq.w	#5,$C(a0)
00013A8A                            
00013A8A                            loc_131CC:
00013A8A 1028 0026                  		move.b	$26(a0),d0
00013A8E 4EB9 0000 2B58             		jsr	(CalcSine).l
00013A94 C1E8 0014                  		muls.w	$14(a0),d0
00013A98 E080                       		asr.l	#8,d0
00013A9A 3140 0012                  		move.w	d0,$12(a0)
00013A9E C3E8 0014                  		muls.w	$14(a0),d1
00013AA2 E081                       		asr.l	#8,d1
00013AA4 0C41 1000                  		cmpi.w	#$1000,d1
00013AA8 6F00                       		ble.s	loc_131F0
00013AAA 323C 1000                  		move.w	#$1000,d1
00013AAE                            
00013AAE                            loc_131F0:
00013AAE 0C41 F000                  		cmpi.w	#-$1000,d1
00013AB2 6C00                       		bge.s	loc_131FA
00013AB4 323C F000                  		move.w	#-$1000,d1
00013AB8                            
00013AB8                            loc_131FA:
00013AB8 3141 0010                  		move.w	d1,$10(a0)
00013ABC 6000 FDF6                  		bra.w	loc_1300C
00013AC0                            ; End of function Sonic_RollSpeed
00013AC0                            
00013AC0                            
00013AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AC0                            
00013AC0                            
00013AC0                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013AC0 3028 0014                  		move.w	$14(a0),d0
00013AC4 6700                       		beq.s	loc_1320A
00013AC6 6A00                       		bpl.s	loc_13218
00013AC8                            
00013AC8                            loc_1320A:
00013AC8 08E8 0000 0022             		bset	#0,$22(a0)
00013ACE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013AD4 4E75                       		rts	
00013AD6                            ; ===========================================================================
00013AD6                            
00013AD6                            loc_13218:
00013AD6 9044                       		sub.w	d4,d0
00013AD8 6400                       		bcc.s	loc_13220
00013ADA 303C FF80                  		move.w	#-$80,d0
00013ADE                            
00013ADE                            loc_13220:
00013ADE 3140 0014                  		move.w	d0,$14(a0)
00013AE2 4E75                       		rts	
00013AE4                            ; End of function Sonic_RollLeft
00013AE4                            
00013AE4                            
00013AE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AE4                            
00013AE4                            
00013AE4                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013AE4 3028 0014                  		move.w	$14(a0),d0
00013AE8 6B00                       		bmi.s	loc_1323A
00013AEA 08A8 0000 0022             		bclr	#0,$22(a0)
00013AF0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013AF6 4E75                       		rts	
00013AF8                            ; ===========================================================================
00013AF8                            
00013AF8                            loc_1323A:
00013AF8 D044                       		add.w	d4,d0
00013AFA 6400                       		bcc.s	loc_13242
00013AFC 303C 0080                  		move.w	#$80,d0
00013B00                            
00013B00                            loc_13242:
00013B00 3140 0014                  		move.w	d0,$14(a0)
00013B04 4E75                       		rts	
00013B06                            ; End of function Sonic_RollRight
00013B06                            
00013B06                            Sonic_AirUnroll:
00013B06                            		
00013B06 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013B0A 6600                       		bne.s	@timer
00013B0C 1038 F605                  		move.b	($FFFFF605).w,d0
00013B10 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013B14 6700                       		beq.s	@end	; if not, branch
00013B16 08A8 0002 0022             		bclr	#2,$22(a0)
00013B1C 117C 0013 0016             		move.b	#$13,$16(a0)
00013B22 117C 0009 0017             		move.b	#9,$17(a0)
00013B28 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013B2E 303C 00A5                  		move.w	#$A5,d0
00013B32 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play fart sound
00013B38 2028 0010                  		move.l	$10(a0),d0
00013B3C D080                       		add.l	d0,d0
00013B3E 2140 0010                  		move.l	d0,$10(a0)
00013B42 5B68 000C                  		subq.w	#5,$C(a0)
00013B46                            	@end:
00013B46 4E75                       		rts
00013B48                            	@timer:
00013B48 5328 003A                  		subq.b	#1,$3A(a0)
00013B4C 4E75                       		rts
00013B4E                            
00013B4E                            ; ---------------------------------------------------------------------------
00013B4E                            ; Subroutine to	change Sonic's direction while jumping
00013B4E                            ; ---------------------------------------------------------------------------
00013B4E                            
00013B4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B4E                            
00013B4E                            
00013B4E                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B4E 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B52 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B56 E345                       		asl.w	#1,d5
00013B58 0828 0004 0022             		btst	#4,$22(a0)
00013B5E 6600                       		bne.s	Obj01_ResetScr2
00013B60 3028 0010                  		move.w	$10(a0),d0
00013B64 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B6A 6700                       		beq.s	loc_13278	; if not, branch
00013B6C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B72 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013B74 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013B78 6E00                       		bgt.s	loc_13278
00013B7A 3001                       		move.w	d1,d0
00013B7C                            
00013B7C                            loc_13278:
00013B7C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013B82 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013B84 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B8A 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013B8C 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013B90 6E00                       		bgt.s	Obj01_JumpMove
00013B92 3001                       		move.w	d1,d0
00013B94 6000                       		bra.s	Obj01_JumpMove
00013B96                            
00013B96                            SonicCJD_JumpLeft:
00013B96 08E8 0000 0022             		bset	#0,$22(a0)
00013B9C 9045                       		sub.w	d5,d0
00013B9E 3206                       		move.w	d6,d1
00013BA0 4441                       		neg.w	d1
00013BA2 B041                       		cmp.w	d1,d0
00013BA4                            		; bgt.s	loc_13278
00013BA4                            		; move.w	d1,d0
00013BA4 4E75                       		rts
00013BA6                            
00013BA6                            SonicCJD_JumpRight:
00013BA6 08A8 0000 0022             		bclr	#0,$22(a0)
00013BAC D045                       		add.w	d5,d0
00013BAE B046                       		cmp.w	d6,d0
00013BB0 6D00                       		blt.s	Obj01_JumpMove
00013BB2 3006                       		move.w	d6,d0
00013BB4                            
00013BB4                            Obj01_JumpMove:
00013BB4 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013BB8                            
00013BB8                            Obj01_ResetScr2:
00013BB8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013BBE 6700                       		beq.s	loc_132A4	; if yes, branch
00013BC0 6400                       		bcc.s	loc_132A0
00013BC2 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013BC6                            
00013BC6                            loc_132A0:
00013BC6 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013BCA                            
00013BCA                            loc_132A4:
00013BCA 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013BD0 6500                       		bcs.s	locret_132D2	; if yes, branch
00013BD2 3028 0010                  		move.w	$10(a0),d0
00013BD6 3200                       		move.w	d0,d1
00013BD8 EA41                       		asr.w	#5,d1
00013BDA 6700                       		beq.s	locret_132D2
00013BDC 6B00                       		bmi.s	loc_132C6
00013BDE 9041                       		sub.w	d1,d0
00013BE0 6400                       		bcc.s	loc_132C0
00013BE2 303C 0000                  		move.w	#0,d0
00013BE6                            
00013BE6                            loc_132C0:
00013BE6 3140 0010                  		move.w	d0,$10(a0)
00013BEA 4E75                       		rts	
00013BEC                            ; ===========================================================================
00013BEC                            
00013BEC                            loc_132C6:
00013BEC 9041                       		sub.w	d1,d0
00013BEE 6500                       		bcs.s	loc_132CE
00013BF0 303C 0000                  		move.w	#0,d0
00013BF4                            
00013BF4                            loc_132CE:
00013BF4 3140 0010                  		move.w	d0,$10(a0)
00013BF8                            
00013BF8                            locret_132D2:
00013BF8 4E75                       		rts	
00013BFA                            ; End of function Sonic_ChgJumpDir
00013BFA                            
00013BFA                            ; ===========================================================================
00013BFA                            ; ---------------------------------------------------------------------------
00013BFA                            ; Unused subroutine to squash Sonic
00013BFA                            ; ---------------------------------------------------------------------------
00013BFA 1028 0026                  		move.b	$26(a0),d0
00013BFE 0600 0020                  		addi.b	#$20,d0
00013C02 0200 00C0                  		andi.b	#$C0,d0
00013C06 6600                       		bne.s	locret_13302
00013C08 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013C0C 4A41                       		tst.w	d1
00013C0E 6A00                       		bpl.s	locret_13302
00013C10 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013C16 317C 0000 0010             		move.w	#0,$10(a0)
00013C1C 317C 0000 0012             		move.w	#0,$12(a0)
00013C22 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013C28                            
00013C28                            locret_13302:
00013C28 4E75                       		rts	
00013C2A                            ; ---------------------------------------------------------------------------
00013C2A                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013C2A                            ; ---------------------------------------------------------------------------
00013C2A                            
00013C2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C2A                            
00013C2A                            
00013C2A                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013C2A 2228 0008                  		move.l	8(a0),d1
00013C2E 3028 0010                  		move.w	$10(a0),d0
00013C32 48C0                       		ext.l	d0
00013C34 E180                       		asl.l	#8,d0
00013C36 D280                       		add.l	d0,d1
00013C38 4841                       		swap	d1
00013C3A 3038 F728                  		move.w	($FFFFF728).w,d0
00013C3E 0640 0010                  		addi.w	#$10,d0
00013C42 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013C44 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013C46 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013C4A 0640 0128                  		addi.w	#$128,d0
00013C4E 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013C52 6600                       		bne.s	loc_13332
00013C54 0640 0040                  		addi.w	#$40,d0
00013C58                            
00013C58                            loc_13332:
00013C58 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013C5A 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013C5C                            
00013C5C                            loc_13336:
00013C5C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013C60 0640 00E0                  		addi.w	#$E0,d0
00013C64 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013C68 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013C6A 4E75                       		rts	
00013C6C                            ; ===========================================================================
00013C6C                            
00013C6C                            Boundary_Bottom:
00013C6C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013C72                            		; bne.w	KillSonic	; if not, kill Sonic
00013C72 6600 0000                  		bne.w	CallKillSonic	; GMZ
00013C76 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013C7C                            		; bcs.w	KillSonic
00013C7C 6500 0000                  		bcs.w	CallKillSonic	; GMZ
00013C80 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013C84 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013C8A 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013C90 4E75                       		rts	
00013C92                            
00013C92                            CallKillSonic:
00013C92 4EF9 0000 0000             		jmp	KillSonic	; GMZ
00013C98                            ; ===========================================================================
00013C98                            
00013C98                            Boundary_Sides:
00013C98 3140 0008                  		move.w	d0,8(a0)
00013C9C 317C 0000 000A             		move.w	#0,$A(a0)
00013CA2 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013CA8 317C 0000 0014             		move.w	#0,$14(a0)
00013CAE 60AC                       		bra.s	loc_13336
00013CB0                            ; End of function Sonic_LevelBound
00013CB0                            
00013CB0                            ; ---------------------------------------------------------------------------
00013CB0                            ; Subroutine allowing Sonic to roll when he's moving
00013CB0                            ; ---------------------------------------------------------------------------
00013CB0                            
00013CB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CB0                            
00013CB0                            
00013CB0                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013CB0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013CB4 6600                       		bne.s	Obj01_NoRoll
00013CB6 3028 0014                  		move.w	$14(a0),d0
00013CBA 6A00                       		bpl.s	loc_13392
00013CBC 4440                       		neg.w	d0
00013CBE                            
00013CBE                            loc_13392:
00013CBE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013CC2 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013CC4 1038 F602                  		move.b	($FFFFF602).w,d0
00013CC8 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013CCC 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013CCE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013CD4 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013CD6                            
00013CD6                            Obj01_NoRoll:
00013CD6 4E75                       		rts	
00013CD8                            ; ===========================================================================
00013CD8                            
00013CD8                            Obj01_ChkRoll:
00013CD8 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013CDE 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013CE0 4E75                       		rts	
00013CE2                            ; ===========================================================================
00013CE2                            
00013CE2                            Obj01_DoRoll:
00013CE2 08E8 0002 0022             		bset	#2,$22(a0)
00013CE8 117C 000E 0016             		move.b	#$E,$16(a0)
00013CEE 117C 0007 0017             		move.b	#7,$17(a0)
00013CF4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013CFA 5A68 000C                  		addq.w	#5,$C(a0)
00013CFE 303C 00BE                  		move.w	#$BE,d0
00013D02 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play rolling sound
00013D08 4A68 0014                  		tst.w	$14(a0)
00013D0C 6600                       		bne.s	locret_133E8
00013D0E 317C 0200 0014             		move.w	#$200,$14(a0)
00013D14                            
00013D14                            locret_133E8:
00013D14 4E75                       		rts	
00013D16                            ; End of function Sonic_Roll
00013D16                            
00013D16                            ; ---------------------------------------------------------------------------
00013D16                            ; Subroutine allowing Sonic to jump
00013D16                            ; ---------------------------------------------------------------------------
00013D16                            
00013D16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D16                            
00013D16                            
00013D16                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013D16 1038 F603                  		move.b	($FFFFF603).w,d0
00013D1A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013D1E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013D22 7000                       		moveq	#0,d0
00013D24 1028 0026                  		move.b	$26(a0),d0
00013D28 0600 0080                  		addi.b	#$80,d0
00013D2C 6100 0000                  		bsr.w	sub_14D48
00013D30 0C41 0006                  		cmpi.w	#6,d1
00013D34 6D00 0000                  		blt.w	locret_1348E
00013D38 343C 0680                  		move.w	#$680,d2
00013D3C 0828 0006 0022             		btst	#6,$22(a0)
00013D42 6700                       		beq.s	loc_1341C
00013D44 343C 0380                  		move.w	#$380,d2
00013D48                            
00013D48                            loc_1341C:
00013D48 7000                       		moveq	#0,d0
00013D4A 1028 0026                  		move.b	$26(a0),d0
00013D4E 0400 0040                  		subi.b	#$40,d0
00013D52 4EB9 0000 2B58             		jsr	(CalcSine).l
00013D58 C3C2                       		muls.w	d2,d1
00013D5A E081                       		asr.l	#8,d1
00013D5C D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013D60 C1C2                       		muls.w	d2,d0
00013D62 E080                       		asr.l	#8,d0
00013D64 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013D68 08E8 0001 0022             		bset	#1,$22(a0)
00013D6E 08A8 0005 0022             		bclr	#5,$22(a0)
00013D74 588F                       		addq.l	#4,sp
00013D76 117C 0001 003C             		move.b	#1,$3C(a0)
00013D7C 4228 0038                  		clr.b	$38(a0)
00013D80 303C 00A0                  		move.w	#$A0,d0
00013D84 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play jumping sound
00013D8A 117C 0013 0016             		move.b	#$13,$16(a0)
00013D90 117C 0009 0017             		move.b	#9,$17(a0)
00013D96 0828 0002 0022             		btst	#2,$22(a0)
00013D9C 6600                       		bne.s	loc_13490
00013D9E 117C 000E 0016             		move.b	#$E,$16(a0)
00013DA4 117C 0007 0017             		move.b	#7,$17(a0)
00013DAA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013DB0 08E8 0002 0022             		bset	#2,$22(a0)
00013DB6 5A68 000C                  		addq.w	#5,$C(a0)
00013DBA 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013DC0                            
00013DC0                            locret_1348E:
00013DC0 4E75                       		rts	
00013DC2                            ; ===========================================================================
00013DC2                            
00013DC2                            loc_13490:
00013DC2 08E8 0004 0022             		bset	#4,$22(a0)
00013DC8 4E75                       		rts	
00013DCA                            ; End of function Sonic_Jump
00013DCA                            
00013DCA                            
00013DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DCA                            
00013DCA                            
00013DCA                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013DCA 4A28 003C                  		tst.b	$3C(a0)
00013DCE 6700                       		beq.s	loc_134C4
00013DD0 323C FC00                  		move.w	#-$400,d1
00013DD4 0828 0006 0022             		btst	#6,$22(a0)
00013DDA 6700                       		beq.s	loc_134AE
00013DDC 323C FE00                  		move.w	#-$200,d1
00013DE0                            
00013DE0                            loc_134AE:
00013DE0 B268 0012                  		cmp.w	$12(a0),d1
00013DE4 6F00                       		ble.s	locret_134C2
00013DE6 1038 F602                  		move.b	($FFFFF602).w,d0
00013DEA 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013DEE 6600                       		bne.s	locret_134C2	; if yes, branch
00013DF0 3141 0012                  		move.w	d1,$12(a0)
00013DF4                            
00013DF4                            locret_134C2:
00013DF4 4E75                       		rts	
00013DF6                            ; ===========================================================================
00013DF6                            
00013DF6                            loc_134C4:
00013DF6 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013DFC 6C00                       		bge.s	locret_134D2
00013DFE 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013E04                            
00013E04                            locret_134D2:
00013E04 4E75                       		rts	
00013E06                            ; End of function Sonic_JumpHeight
00013E06                            
00013E06                            ; ---------------------------------------------------------------------------
00013E06                            ; Subroutine to	slow Sonic walking up a	slope
00013E06                            ; ---------------------------------------------------------------------------
00013E06                            
00013E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E06                            
00013E06                            
00013E06                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013E06 1028 0026                  		move.b	$26(a0),d0
00013E0A 0600 0060                  		addi.b	#$60,d0
00013E0E 0C00 00C0                  		cmpi.b	#$C0,d0
00013E12 6400                       		bcc.s	locret_13508
00013E14 1028 0026                  		move.b	$26(a0),d0
00013E18 4EB9 0000 2B58             		jsr	(CalcSine).l
00013E1E C1FC 0020                  		muls.w	#$20,d0
00013E22 E080                       		asr.l	#8,d0
00013E24 4A68 0014                  		tst.w	$14(a0)
00013E28 6700                       		beq.s	locret_13508
00013E2A 6B00                       		bmi.s	loc_13504
00013E2C 4A40                       		tst.w	d0
00013E2E 6700                       		beq.s	locret_13502
00013E30 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013E34                            
00013E34                            locret_13502:
00013E34 4E75                       		rts	
00013E36                            ; ===========================================================================
00013E36                            
00013E36                            loc_13504:
00013E36 D168 0014                  		add.w	d0,$14(a0)
00013E3A                            
00013E3A                            locret_13508:
00013E3A 4E75                       		rts	
00013E3C                            ; End of function Sonic_SlopeResist
00013E3C                            
00013E3C                            ; ---------------------------------------------------------------------------
00013E3C                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013E3C                            ; ---------------------------------------------------------------------------
00013E3C                            
00013E3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E3C                            
00013E3C                            
00013E3C                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013E3C 1028 0026                  		move.b	$26(a0),d0
00013E40 0600 0060                  		addi.b	#$60,d0
00013E44 0C00 00C0                  		cmpi.b	#-$40,d0
00013E48 6400                       		bcc.s	locret_13544
00013E4A 1028 0026                  		move.b	$26(a0),d0
00013E4E 4EB9 0000 2B58             		jsr	(CalcSine).l
00013E54 C1FC 0050                  		muls.w	#$50,d0
00013E58 E080                       		asr.l	#8,d0
00013E5A 4A68 0014                  		tst.w	$14(a0)
00013E5E 6B00                       		bmi.s	loc_1353A
00013E60 4A40                       		tst.w	d0
00013E62 6A00                       		bpl.s	loc_13534
00013E64 E480                       		asr.l	#2,d0
00013E66                            
00013E66                            loc_13534:
00013E66 D168 0014                  		add.w	d0,$14(a0)
00013E6A 4E75                       		rts	
00013E6C                            ; ===========================================================================
00013E6C                            
00013E6C                            loc_1353A:
00013E6C 4A40                       		tst.w	d0
00013E6E 6B00                       		bmi.s	loc_13540
00013E70 E480                       		asr.l	#2,d0
00013E72                            
00013E72                            loc_13540:
00013E72 D168 0014                  		add.w	d0,$14(a0)
00013E76                            
00013E76                            locret_13544:
00013E76 4E75                       		rts	
00013E78                            ; End of function Sonic_RollRepel
00013E78                            
00013E78                            ; ---------------------------------------------------------------------------
00013E78                            ; Subroutine to	push Sonic down	a slope
00013E78                            ; ---------------------------------------------------------------------------
00013E78                            
00013E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E78                            
00013E78                            
00013E78                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013E78 4E71                       		nop	
00013E7A 4A28 0038                  		tst.b	$38(a0)
00013E7E 6600                       		bne.s	locret_13580
00013E80 4A68 003E                  		tst.w	$3E(a0)
00013E84 6600                       		bne.s	loc_13582
00013E86 1028 0026                  		move.b	$26(a0),d0
00013E8A 0600 0020                  		addi.b	#$20,d0
00013E8E 0200 00C0                  		andi.b	#$C0,d0
00013E92 6700                       		beq.s	locret_13580
00013E94 3028 0014                  		move.w	$14(a0),d0
00013E98 6A00                       		bpl.s	loc_1356A
00013E9A 4440                       		neg.w	d0
00013E9C                            
00013E9C                            loc_1356A:
00013E9C 0C40 0280                  		cmpi.w	#$280,d0
00013EA0 6400                       		bcc.s	locret_13580
00013EA2 4268 0014                  		clr.w	$14(a0)
00013EA6 08E8 0001 0022             		bset	#1,$22(a0)
00013EAC 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013EB2                            
00013EB2                            locret_13580:
00013EB2 4E75                       		rts	
00013EB4                            ; ===========================================================================
00013EB4                            
00013EB4                            loc_13582:
00013EB4 5368 003E                  		subq.w	#1,$3E(a0)
00013EB8 4E75                       		rts	
00013EBA                            ; End of function Sonic_SlopeRepel
00013EBA                            
00013EBA                            ; ---------------------------------------------------------------------------
00013EBA                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013EBA                            ; ---------------------------------------------------------------------------
00013EBA                            
00013EBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EBA                            
00013EBA                            
00013EBA                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013EBA 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013EBE 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013EC0 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013EC2                            
00013EC2 5400                       		addq.b	#2,d0		; increase angle
00013EC4 6400                       		bcc.s	loc_13596
00013EC6 7000                       		moveq	#0,d0
00013EC8                            
00013EC8                            loc_13596:
00013EC8 6000                       		bra.s	loc_1359E
00013ECA                            ; ===========================================================================
00013ECA                            
00013ECA                            loc_13598:
00013ECA 5500                       		subq.b	#2,d0		; decrease angle
00013ECC 6400                       		bcc.s	loc_1359E
00013ECE 7000                       		moveq	#0,d0
00013ED0                            
00013ED0                            loc_1359E:
00013ED0 1140 0026                  		move.b	d0,$26(a0)
00013ED4                            
00013ED4                            locret_135A2:
00013ED4 4E75                       		rts	
00013ED6                            ; End of function Sonic_JumpAngle
00013ED6                            
00013ED6                            ; ---------------------------------------------------------------------------
00013ED6                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013ED6                            ; ---------------------------------------------------------------------------
00013ED6                            
00013ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ED6                            
00013ED6                            
00013ED6                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013ED6 3228 0010                  		move.w	$10(a0),d1
00013EDA 3428 0012                  		move.w	$12(a0),d2
00013EDE 4EB9 0000 2E26             		jsr	(CalcAngle).l
00013EE4 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013EE8 0400 0020                  		subi.b	#$20,d0
00013EEC 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013EF0 0200 00C0                  		andi.b	#$C0,d0
00013EF4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013EF8 0C00 0040                  		cmpi.b	#$40,d0
00013EFC 6700 0000                  		beq.w	loc_13680
00013F00 0C00 0080                  		cmpi.b	#$80,d0
00013F04 6700 0000                  		beq.w	loc_136E2
00013F08 0C00 00C0                  		cmpi.b	#-$40,d0
00013F0C 6700 0000                  		beq.w	loc_1373E
00013F10 6100 0000                  		bsr.w	Sonic_HitWall
00013F14 4A41                       		tst.w	d1
00013F16 6A00                       		bpl.s	loc_135F0
00013F18 9368 0008                  		sub.w	d1,8(a0)
00013F1C 317C 0000 0010             		move.w	#0,$10(a0)
00013F22                            
00013F22                            loc_135F0:
00013F22 6100 0000                  		bsr.w	sub_14EB4
00013F26 4A41                       		tst.w	d1
00013F28 6A00                       		bpl.s	loc_13602
00013F2A D368 0008                  		add.w	d1,8(a0)
00013F2E 317C 0000 0010             		move.w	#0,$10(a0)
00013F34                            
00013F34                            loc_13602:
00013F34 6100 0000                  		bsr.w	Sonic_HitFloor
00013F38 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013F3C 4A41                       		tst.w	d1
00013F3E 6A00                       		bpl.s	locret_1367E
00013F40 1428 0012                  		move.b	$12(a0),d2
00013F44 5002                       		addq.b	#8,d2
00013F46 4402                       		neg.b	d2
00013F48 B202                       		cmp.b	d2,d1
00013F4A 6C00                       		bge.s	loc_1361E
00013F4C B002                       		cmp.b	d2,d0
00013F4E 6D00                       		blt.s	locret_1367E
00013F50                            
00013F50                            loc_1361E:
00013F50 D368 000C                  		add.w	d1,$C(a0)
00013F54 1143 0026                  		move.b	d3,$26(a0)
00013F58 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F5C 117C 0000 001C             		move.b	#0,$1C(a0)
00013F62 1003                       		move.b	d3,d0
00013F64 0600 0020                  		addi.b	#$20,d0
00013F68 0200 0040                  		andi.b	#$40,d0
00013F6C 6600                       		bne.s	loc_1365C
00013F6E 1003                       		move.b	d3,d0
00013F70 0600 0010                  		addi.b	#$10,d0
00013F74 0200 0020                  		andi.b	#$20,d0
00013F78 6700                       		beq.s	loc_1364E
00013F7A E0E8 0012                  		asr	$12(a0)
00013F7E 6000                       		bra.s	loc_13670
00013F80                            ; ===========================================================================
00013F80                            
00013F80                            loc_1364E:
00013F80 317C 0000 0012             		move.w	#0,$12(a0)
00013F86 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F8C 4E75                       		rts	
00013F8E                            ; ===========================================================================
00013F8E                            
00013F8E                            loc_1365C:
00013F8E 317C 0000 0010             		move.w	#0,$10(a0)
00013F94 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013F9A 6F00                       		ble.s	loc_13670
00013F9C 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013FA2                            
00013FA2                            loc_13670:
00013FA2 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FA8 4A03                       		tst.b	d3
00013FAA 6A00                       		bpl.s	locret_1367E
00013FAC 4468 0014                  		neg.w	$14(a0)
00013FB0                            
00013FB0                            locret_1367E:
00013FB0 4E75                       		rts	
00013FB2                            ; ===========================================================================
00013FB2                            
00013FB2                            loc_13680:
00013FB2 6100 0000                  		bsr.w	Sonic_HitWall
00013FB6 4A41                       		tst.w	d1
00013FB8 6A00                       		bpl.s	loc_1369A
00013FBA 9368 0008                  		sub.w	d1,8(a0)
00013FBE 317C 0000 0010             		move.w	#0,$10(a0)
00013FC4 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FCA 4E75                       		rts	
00013FCC                            ; ===========================================================================
00013FCC                            
00013FCC                            loc_1369A:
00013FCC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FD0 4A41                       		tst.w	d1
00013FD2 6A00                       		bpl.s	loc_136B4
00013FD4 9368 000C                  		sub.w	d1,$C(a0)
00013FD8 4A68 0012                  		tst.w	$12(a0)
00013FDC 6A00                       		bpl.s	locret_136B2
00013FDE 317C 0000 0012             		move.w	#0,$12(a0)
00013FE4                            
00013FE4                            locret_136B2:
00013FE4 4E75                       		rts	
00013FE6                            ; ===========================================================================
00013FE6                            
00013FE6                            loc_136B4:
00013FE6 4A68 0012                  		tst.w	$12(a0)
00013FEA 6B00                       		bmi.s	locret_136E0
00013FEC 6100 0000                  		bsr.w	Sonic_HitFloor
00013FF0 4A41                       		tst.w	d1
00013FF2 6A00                       		bpl.s	locret_136E0
00013FF4 D368 000C                  		add.w	d1,$C(a0)
00013FF8 1143 0026                  		move.b	d3,$26(a0)
00013FFC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014000 117C 0000 001C             		move.b	#0,$1C(a0)
00014006 317C 0000 0012             		move.w	#0,$12(a0)
0001400C 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014012                            
00014012                            locret_136E0:
00014012 4E75                       		rts	
00014014                            ; ===========================================================================
00014014                            
00014014                            loc_136E2:
00014014 6100 0000                  		bsr.w	Sonic_HitWall
00014018 4A41                       		tst.w	d1
0001401A 6A00                       		bpl.s	loc_136F4
0001401C 9368 0008                  		sub.w	d1,8(a0)
00014020 317C 0000 0010             		move.w	#0,$10(a0)
00014026                            
00014026                            loc_136F4:
00014026 6100 0000                  		bsr.w	sub_14EB4
0001402A 4A41                       		tst.w	d1
0001402C 6A00                       		bpl.s	loc_13706
0001402E D368 0008                  		add.w	d1,8(a0)
00014032 317C 0000 0010             		move.w	#0,$10(a0)
00014038                            
00014038                            loc_13706:
00014038 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001403C 4A41                       		tst.w	d1
0001403E 6A00                       		bpl.s	locret_1373C
00014040 9368 000C                  		sub.w	d1,$C(a0)
00014044 1003                       		move.b	d3,d0
00014046 0600 0020                  		addi.b	#$20,d0
0001404A 0200 0040                  		andi.b	#$40,d0
0001404E 6600                       		bne.s	loc_13726
00014050 317C 0000 0012             		move.w	#0,$12(a0)
00014056 4E75                       		rts	
00014058                            ; ===========================================================================
00014058                            
00014058                            loc_13726:
00014058 1143 0026                  		move.b	d3,$26(a0)
0001405C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014060 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014066 4A03                       		tst.b	d3
00014068 6A00                       		bpl.s	locret_1373C
0001406A 4468 0014                  		neg.w	$14(a0)
0001406E                            
0001406E                            locret_1373C:
0001406E 4E75                       		rts	
00014070                            ; ===========================================================================
00014070                            
00014070                            loc_1373E:
00014070 6100 0000                  		bsr.w	sub_14EB4
00014074 4A41                       		tst.w	d1
00014076 6A00                       		bpl.s	loc_13758
00014078 D368 0008                  		add.w	d1,8(a0)
0001407C 317C 0000 0010             		move.w	#0,$10(a0)
00014082 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014088 4E75                       		rts	
0001408A                            ; ===========================================================================
0001408A                            
0001408A                            loc_13758:
0001408A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001408E 4A41                       		tst.w	d1
00014090 6A00                       		bpl.s	loc_13772
00014092 9368 000C                  		sub.w	d1,$C(a0)
00014096 4A68 0012                  		tst.w	$12(a0)
0001409A 6A00                       		bpl.s	locret_13770
0001409C 317C 0000 0012             		move.w	#0,$12(a0)
000140A2                            
000140A2                            locret_13770:
000140A2 4E75                       		rts	
000140A4                            ; ===========================================================================
000140A4                            
000140A4                            loc_13772:
000140A4 4A68 0012                  		tst.w	$12(a0)
000140A8 6B00                       		bmi.s	locret_1379E
000140AA 6100 0000                  		bsr.w	Sonic_HitFloor
000140AE 4A41                       		tst.w	d1
000140B0 6A00                       		bpl.s	locret_1379E
000140B2 D368 000C                  		add.w	d1,$C(a0)
000140B6 1143 0026                  		move.b	d3,$26(a0)
000140BA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000140BE 117C 0000 001C             		move.b	#0,$1C(a0)
000140C4 317C 0000 0012             		move.w	#0,$12(a0)
000140CA 3168 0010 0014             		move.w	$10(a0),$14(a0)
000140D0                            
000140D0                            locret_1379E:
000140D0 4E75                       		rts	
000140D2                            ; End of function Sonic_Floor
000140D2                            
000140D2                            ; ---------------------------------------------------------------------------
000140D2                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000140D2                            ; ---------------------------------------------------------------------------
000140D2                            
000140D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140D2                            
000140D2                            
000140D2                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000140D2 0828 0004 0022             		btst	#4,$22(a0)
000140D8 6700                       		beq.s	loc_137AE
000140DA 4E71                       		nop	
000140DC 4E71                       		nop	
000140DE 4E71                       		nop	
000140E0                            
000140E0                            loc_137AE:
000140E0 08A8 0005 0022             		bclr	#5,$22(a0)
000140E6 08A8 0001 0022             		bclr	#1,$22(a0)
000140EC 08A8 0004 0022             		bclr	#4,$22(a0)
000140F2 0828 0002 0022             		btst	#2,$22(a0)
000140F8 6700                       		beq.s	loc_137E4
000140FA 08A8 0002 0022             		bclr	#2,$22(a0)
00014100 117C 0013 0016             		move.b	#$13,$16(a0)
00014106 117C 0009 0017             		move.b	#9,$17(a0)
0001410C 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00014112 5B68 000C                  		subq.w	#5,$C(a0)
00014116                            
00014116                            loc_137E4:
00014116 117C 0000 003C             		move.b	#0,$3C(a0)
0001411C 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00014122 4E75                       		rts	
00014124                            ; End of function Sonic_ResetOnFloor
00014124                            
00014124                            ; ===========================================================================
00014124                            ; ---------------------------------------------------------------------------
00014124                            ; Sonic	when he	gets hurt
00014124                            ; ---------------------------------------------------------------------------
00014124                            
00014124                            Obj01_Hurt:				; XREF: Obj01_Index
00014124 4EBA 9D38                  		jsr	SpeedToPos
00014128 0668 0030 0012             		addi.w	#$30,$12(a0)
0001412E 0828 0006 0022             		btst	#6,$22(a0)
00014134 6700                       		beq.s	loc_1380C
00014136 0468 0020 0012             		subi.w	#$20,$12(a0)
0001413C                            
0001413C                            loc_1380C:
0001413C 6100 0000                  		bsr.w	Sonic_HurtStop
00014140 6100 FAE8                  		bsr.w	Sonic_LevelBound
00014144 6100 F4AE                  		bsr.w	Sonic_RecordPos
00014148 6100 0000                  		bsr.w	Sonic_Animate
0001414C 6100 0000                  		bsr.w	LoadSonicDynPLC
00014150 4EFA 9D32                  		jmp	DisplaySprite
00014154                            
00014154                            ; ---------------------------------------------------------------------------
00014154                            ; Subroutine to	stop Sonic falling after he's been hurt
00014154                            ; ---------------------------------------------------------------------------
00014154                            
00014154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014154                            
00014154                            
00014154                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014154 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014158 0640 00E0                  		addi.w	#$E0,d0
0001415C B068 000C                  		cmp.w	$C(a0),d0
00014160 6500 0000                  		bcs.w	KillSonic
00014164 6100 FD70                  		bsr.w	Sonic_Floor
00014168 0828 0001 0022             		btst	#1,$22(a0)
0001416E 6600                       		bne.s	locret_13860
00014170 7000                       		moveq	#0,d0
00014172 3140 0012                  		move.w	d0,$12(a0)
00014176 3140 0010                  		move.w	d0,$10(a0)
0001417A 3140 0014                  		move.w	d0,$14(a0)
0001417E 117C 0000 001C             		move.b	#0,$1C(a0)
00014184 5528 0024                  		subq.b	#2,$24(a0)
00014188 317C 0078 0030             		move.w	#$78,$30(a0)
0001418E                            
0001418E                            locret_13860:
0001418E 4E75                       		rts	
00014190                            ; End of function Sonic_HurtStop
00014190                            
00014190                            ; ===========================================================================
00014190                            ; ---------------------------------------------------------------------------
00014190                            ; Sonic	when he	dies
00014190                            ; ---------------------------------------------------------------------------
00014190                            
00014190                            Obj01_Death:				; XREF: Obj01_Index
00014190 6100 0000                  		bsr.w	GameOver
00014194 4EBA 9C56                  		jsr	ObjectFall
00014198 6100 F45A                  		bsr.w	Sonic_RecordPos
0001419C 6100 0000                  		bsr.w	Sonic_Animate
000141A0 6100 0000                  		bsr.w	LoadSonicDynPLC
000141A4 4EFA 9CDE                  		jmp	DisplaySprite
000141A8                            
000141A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141A8                            
000141A8                            
000141A8                            GameOver:				; XREF: Obj01_Death
000141A8 3038 F72E                  		move.w	($FFFFF72E).w,d0
000141AC 0640 0100                  		addi.w	#$100,d0
000141B0 B068 000C                  		cmp.w	$C(a0),d0
000141B4 6400 0000                  		bcc.w	locret_13900
000141B8 317C FFC8 0012             		move.w	#-$38,$12(a0)
000141BE 5428 0024                  		addq.b	#2,$24(a0)
000141C2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000141C6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000141CA 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000141CE 6600                       		bne.s	loc_138D4
000141D0 317C 0000 003A             		move.w	#0,$3A(a0)
000141D6 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000141DC 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000141E2 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000141E8 4238 FE1A                  		clr.b	($FFFFFE1A).w
000141EC                            
000141EC                            loc_138C2:
000141EC 303C 008F                  		move.w	#$8F,d0
000141F0 4EB9 0000 13B0             		jsr	(PlaySound).l	; play game over music
000141F6 7003                       		moveq	#3,d0
000141F8 4EF9 0000 159A             		jmp	(LoadPLC).l	; load game over patterns
000141FE                            ; ===========================================================================
000141FE                            
000141FE                            loc_138D4:
000141FE 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014204 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014208 6700                       		beq.s	locret_13900	; if not, branch
0001420A 317C 0000 003A             		move.w	#0,$3A(a0)
00014210 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014216 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001421C 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014222 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014228 60C2                       		bra.s	loc_138C2
0001422A                            ; ===========================================================================
0001422A                            
0001422A                            locret_13900:
0001422A 4E75                       		rts	
0001422C                            ; End of function GameOver
0001422C                            
0001422C                            ; ===========================================================================
0001422C                            ; ---------------------------------------------------------------------------
0001422C                            ; Sonic	when the level is restarted
0001422C                            ; ---------------------------------------------------------------------------
0001422C                            
0001422C                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001422C 4A68 003A                  		tst.w	$3A(a0)
00014230 6700                       		beq.s	locret_13914
00014232 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014236 6600                       		bne.s	locret_13914
00014238 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001423E                            
0001423E                            locret_13914:
0001423E 4E75                       		rts	
00014240                            
00014240                            ; ---------------------------------------------------------------------------
00014240                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014240                            ; ---------------------------------------------------------------------------
00014240                            
00014240                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014240                            
00014240                            
00014240                            Sonic_Loops:				; XREF: Obj01_Control
00014240                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014240                            ;		beq.s	loc_13926	; if yes, branch
00014240                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
00014240                            ;		bne.w	locret_139C2	; if not, branch
00014240                            ;		this is commented out, please do more plane messups id love that
00014240                            ;loc_13926:
00014240 3028 000C                  		move.w	$C(a0),d0
00014244 E248                       		lsr.w	#1,d0
00014246 0240 0380                  		andi.w	#$380,d0
0001424A 1228 0008                  		move.b	8(a0),d1
0001424E 0241 007F                  		andi.w	#$7F,d1
00014252 D041                       		add.w	d1,d0
00014254 43F8 A400                  		lea	($FFFFA400).w,a1
00014258 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001425C B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014260 6700 FA76                  		beq.w	Obj01_ChkRoll
00014264 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014268 6700 FA6E                  		beq.w	Obj01_ChkRoll
0001426C B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014270 6700                       		beq.s	loc_13976
00014272 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014276 6700                       		beq.s	loc_13966
00014278 08A8 0006 0001             		bclr	#6,1(a0)
0001427E 4E75                       		rts	
00014280                            ; ===========================================================================
00014280                            
00014280                            loc_13966:
00014280 0828 0001 0022             		btst	#1,$22(a0)
00014286 6700                       		beq.s	loc_13976
00014288 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001428E 4E75                       		rts	
00014290                            ; ===========================================================================
00014290                            
00014290                            loc_13976:
00014290 3428 0008                  		move.w	8(a0),d2
00014294 0C02 002C                  		cmpi.b	#$2C,d2
00014298 6400                       		bcc.s	loc_13988
0001429A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000142A0 4E75                       		rts	
000142A2                            ; ===========================================================================
000142A2                            
000142A2                            loc_13988:
000142A2 0C02 00E0                  		cmpi.b	#-$20,d2
000142A6 6500                       		bcs.s	loc_13996
000142A8 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000142AE 4E75                       		rts	
000142B0                            ; ===========================================================================
000142B0                            
000142B0                            loc_13996:
000142B0 0828 0006 0001             		btst	#6,1(a0)
000142B6 6600                       		bne.s	loc_139B2
000142B8 1228 0026                  		move.b	$26(a0),d1
000142BC 6700                       		beq.s	locret_139C2
000142BE 0C01 0080                  		cmpi.b	#-$80,d1
000142C2 6200                       		bhi.s	locret_139C2
000142C4 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000142CA 4E75                       		rts	
000142CC                            ; ===========================================================================
000142CC                            
000142CC                            loc_139B2:
000142CC 1228 0026                  		move.b	$26(a0),d1
000142D0 0C01 0080                  		cmpi.b	#-$80,d1
000142D4 6300                       		bls.s	locret_139C2
000142D6 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000142DC                            
000142DC                            locret_139C2:
000142DC 4E75                       		rts	
000142DE                            ; End of function Sonic_Loops
000142DE                            
000142DE                            ; ---------------------------------------------------------------------------
000142DE                            ; Subroutine to	animate	Sonic's sprites
000142DE                            ; ---------------------------------------------------------------------------
000142DE                            
000142DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142DE                            
000142DE                            Player_Anim:
000142DE 0000 0000                  	dc.l	SonicAniData
000142E2 0000 0000                  	dc.l	SonicAniData ; gronic
000142E6 0000 0000                  	dc.l	SonicAniData ; anakama
000142EA 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
000142EE                            
000142EE                            	; Insert more animation data for other characters here
000142EE                            	
000142EE                            Sonic_Animate:				; XREF: Obj01_Control; et al
000142EE 7000                       			moveq	#0,d0
000142F0 1038 FFE8                  		move.b	(v_character),d0
000142F4 E548                       		lsl.w	#2,d0
000142F6 43FA FFE6                  		lea 	Player_Anim(pc),a1
000142FA                            		
000142FA 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000142FE                            	
000142FE 7000                       		moveq	#0,d0
00014300 1028 001C                  		move.b	$1C(a0),d0
00014304 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014308 6700                       		beq.s	SAnim_Do	; if not, branch
0001430A 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0001430E 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014314 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001431A                            
0001431A                            SAnim_Do:
0001431A D040                       		add.w	d0,d0
0001431C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014320 1011                       		move.b	(a1),d0
00014322 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014324 1228 0022                  		move.b	$22(a0),d1
00014328 0201 0001                  		andi.b	#1,d1
0001432C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014332 8328 0001                  		or.b	d1,1(a0)
00014336 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001433A 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
0001433C 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014340                            
00014340                            SAnim_Do2:
00014340 7200                       		moveq	#0,d1
00014342 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014346 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001434A 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
0001434C                            
0001434C                            SAnim_Next:
0001434C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014350 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014354                            
00014354                            SAnim_Delay:
00014354 4E75                       		rts	
00014356                            ; ===========================================================================
00014356                            
00014356                            SAnim_End_FF:
00014356 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014358 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001435A 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014360 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014364 60E6                       		bra.s	SAnim_Next
00014366                            ; ===========================================================================
00014366                            
00014366                            SAnim_End_FE:
00014366 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014368 6600                       		bne.s	SAnim_End_FD	; if not, branch
0001436A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001436E 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014372 9200                       		sub.b	d0,d1
00014374 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014378 60D2                       		bra.s	SAnim_Next
0001437A                            ; ===========================================================================
0001437A                            
0001437A                            SAnim_End_FD:
0001437A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001437C 6600                       		bne.s	SAnim_End	; if not, branch
0001437E 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014384                            
00014384                            SAnim_End:
00014384 4E75                       		rts	
00014386                            ; ===========================================================================
00014386                            
00014386                            SAnim_WalkRun:				; XREF: SAnim_Do
00014386 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001438A 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
0001438C 5200                       		addq.b	#1,d0		; is animation walking/running?
0001438E 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014392 7200                       		moveq	#0,d1
00014394 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014398 1428 0022                  		move.b	$22(a0),d2
0001439C 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000143A0 6600                       		bne.s	loc_13A70	; if yes, branch
000143A2 4600                       		not.b	d0		; reverse angle
000143A4                            
000143A4                            loc_13A70:
000143A4 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000143A8 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000143AA 7203                       		moveq	#3,d1
000143AC                            
000143AC                            loc_13A78:
000143AC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000143B2 B302                       		eor.b	d1,d2
000143B4 8528 0001                  		or.b	d2,1(a0)
000143B8 0828 0005 0022             		btst	#5,$22(a0)
000143BE 6600 0000                  		bne.w	SAnim_Push
000143C2 E808                       		lsr.b	#4,d0		; divide angle by $10
000143C4 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000143C8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000143CC 6A00                       		bpl.s	loc_13A9C
000143CE 4442                       		neg.w	d2
000143D0                            
000143D0                            loc_13A9C:
000143D0 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000143D6 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000143DA 6400                       		bcc.s	loc_13AB4	; if yes, branch
000143DC 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000143E2 1200                       		move.b	d0,d1
000143E4 E209                       		lsr.b	#1,d1
000143E6 D001                       		add.b	d1,d0
000143E8                            
000143E8                            loc_13AB4:
000143E8 D000                       		add.b	d0,d0
000143EA 1600                       		move.b	d0,d3
000143EC 4442                       		neg.w	d2
000143EE 0642 0800                  		addi.w	#$800,d2
000143F2 6A00                       		bpl.s	loc_13AC2
000143F4 7400                       		moveq	#0,d2
000143F6                            
000143F6                            loc_13AC2:
000143F6 E04A                       		lsr.w	#8,d2
000143F8 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000143FC 6100 FF42                  		bsr.w	SAnim_Do2
00014400 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014404 4E75                       		rts	
00014406                            ; ===========================================================================
00014406                            
00014406                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014406 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014408 6600                       		bne.s	SAnim_Push	; if not, branch
0001440A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001440E 6A00                       		bpl.s	loc_13ADE
00014410 4442                       		neg.w	d2
00014412                            
00014412                            loc_13ADE:
00014412 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014418 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001441C 6400                       		bcc.s	loc_13AF0	; if yes, branch
0001441E 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014424                            
00014424                            loc_13AF0:
00014424 4442                       		neg.w	d2
00014426 0642 0400                  		addi.w	#$400,d2
0001442A 6A00                       		bpl.s	loc_13AFA
0001442C 7400                       		moveq	#0,d2
0001442E                            
0001442E                            loc_13AFA:
0001442E E04A                       		lsr.w	#8,d2
00014430 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014434 1228 0022                  		move.b	$22(a0),d1
00014438 0201 0001                  		andi.b	#1,d1
0001443C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014442 8328 0001                  		or.b	d1,1(a0)
00014446 6000 FEF8                  		bra.w	SAnim_Do2
0001444A                            ; ===========================================================================
0001444A                            
0001444A                            SAnim_Push:				; XREF: SAnim_RollJump
0001444A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001444E 6B00                       		bmi.s	loc_13B1E
00014450 4442                       		neg.w	d2
00014452                            
00014452                            loc_13B1E:
00014452 0642 0800                  		addi.w	#$800,d2
00014456 6A00                       		bpl.s	loc_13B26
00014458 7400                       		moveq	#0,d2
0001445A                            
0001445A                            loc_13B26:
0001445A EC4A                       		lsr.w	#6,d2
0001445C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014460 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014466 1228 0022                  		move.b	$22(a0),d1
0001446A 0201 0001                  		andi.b	#1,d1
0001446E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014474 8328 0001                  		or.b	d1,1(a0)
00014478 6000 FEC6                  		bra.w	SAnim_Do2
0001447C                            ; End of function Sonic_Animate
0001447C                            
0001447C                            ; ===========================================================================
0001447C                            SonicAniData:
0001447C                            	include "_anim\Sonic.asm"
0001447C                            ; ---------------------------------------------------------------------------
0001447C                            ; Animation script - Sonic
0001447C                            ; ---------------------------------------------------------------------------
0001447C 0000                       		dc.w SonAni_Walk-SonicAniData
0001447E 0000                       		dc.w SonAni_Run-SonicAniData
00014480 0000                       		dc.w SonAni_Roll-SonicAniData
00014482 0000                       		dc.w SonAni_Roll2-SonicAniData
00014484 0000                       		dc.w SonAni_Push-SonicAniData
00014486 0000                       		dc.w SonAni_Wait-SonicAniData
00014488 0000                       		dc.w SonAni_Balance-SonicAniData
0001448A 0000                       		dc.w SonAni_LookUp-SonicAniData
0001448C 0000                       		dc.w SonAni_Duck-SonicAniData
0001448E 0000                       		dc.w SonAni_Warp1-SonicAniData
00014490 0000                       		dc.w SonAni_Warp2-SonicAniData
00014492 0000                       		dc.w SonAni_Warp3-SonicAniData
00014494 0000                       		dc.w SonAni_Warp4-SonicAniData
00014496 0000                       		dc.w SonAni_Stop-SonicAniData
00014498 0000                       		dc.w SonAni_Float1-SonicAniData
0001449A 0000                       		dc.w SonAni_Float2-SonicAniData
0001449C 0000                       		dc.w SonAni_Spring-SonicAniData
0001449E 0000                       		dc.w SonAni_LZHang-SonicAniData
000144A0 0000                       		dc.w SonAni_Leap1-SonicAniData
000144A2 0000                       		dc.w SonAni_Leap2-SonicAniData
000144A4 0000                       		dc.w SonAni_Surf-SonicAniData
000144A6 0000                       		dc.w SonAni_Bubble-SonicAniData
000144A8 0000                       		dc.w SonAni_Death1-SonicAniData
000144AA 0000                       		dc.w SonAni_Drown-SonicAniData
000144AC 0000                       		dc.w SonAni_Death2-SonicAniData
000144AE 0000                       		dc.w SonAni_Shrink-SonicAniData
000144B0 0000                       		dc.w SonAni_Hurt-SonicAniData
000144B2 0000                       		dc.w SonAni_LZSlide-SonicAniData
000144B4 0000                       		dc.w SonAni_Blank-SonicAniData
000144B6 0000                       		dc.w SonAni_Float3-SonicAniData
000144B8 0000                       		dc.w SonAni_Float4-SonicAniData
000144BA FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
000144C4 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000144CC FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000144D4 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000144DC FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000144E4 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000144FA 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000144FE 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014502 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014506 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
0001450A 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
0001450E 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014512 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014516 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
0001451A 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001451E 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014526 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001452A 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001452E 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014534 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001453A 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001453E 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014546 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001454A 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
0001454E 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014552 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
0001455C 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014560 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014564 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014568 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014570 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014574                            		even
00014574                            		even
00014574                            
00014574                            ; ---------------------------------------------------------------------------
00014574                            ; Sonic	pattern	loading	subroutine
00014574                            ; ---------------------------------------------------------------------------
00014574                            
00014574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014574                            Player_DPLC:
00014574 0000 0000                  	dc.l	SonicDynPLC
00014578 0000 0000                  	dc.l	SonicDynPLC ; gronic
0001457C 0000 0000                  	dc.l	SonicDynPLC ; anakama
00014580 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
00014584                            	; add pointers for player dplc here
00014584                            Player_Art:
00014584 0000 0000                  	dc.l	Art_Sonic
00014588 0000 0000                  	dc.l	Art_Sonic ; gronic
0001458C 0000 0000                  	dc.l	Art_Sonic ; anakama
00014590 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
00014594                            	; add pointers for player art here
00014594                            
00014594                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014594 7000                       		moveq	#0,d0
00014596 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001459A B038 F766                  		cmp.b	($FFFFF766).w,d0
0001459E 6700                       		beq.s	locret_13C96
000145A0 11C0 F766                  		move.b	d0,($FFFFF766).w
000145A4                            		
000145A4 323C 0000                  		move.w	#0,d1
000145A8 1238 FFE8                  		move.b	(v_character),d1
000145AC E549                       		lsl.w	#2,d1
000145AE 45FA FFC4                  		lea 	Player_DPLC(pc),a2
000145B2                            
000145B2 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
000145B6                            		
000145B6 D040                       		add.w	d0,d0
000145B8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000145BC 7200                       		moveq	#0,d1
000145BE 121A                       		move.b	(a2)+,d1	; read "number of entries" value
000145C0 5301                       		subq.b	#1,d1
000145C2 6B00                       		bmi.s	locret_13C96
000145C4 47F8 C800                  		lea	($FFFFC800).w,a3
000145C8 11FC 0001 F767             		move.b	#1,($FFFFF767).w
000145CE                            
000145CE                            SPLC_ReadEntry:
000145CE 303C 0000                  		move.w	#0,d0
000145D2 1038 FFE8                  		move.b	(v_character),d0
000145D6 E548                       		lsl.w	#2,d0
000145D8 43FA FFAA                  		lea 	Player_Art(pc),a1
000145DC                            
000145DC 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000145E0                            
000145E0 7400                       		moveq	#0,d2
000145E2 141A                       		move.b	(a2)+,d2
000145E4 3002                       		move.w	d2,d0
000145E6 E808                       		lsr.b	#4,d0
000145E8 E14A                       		lsl.w	#8,d2
000145EA 141A                       		move.b	(a2)+,d2
000145EC EB4A                       		lsl.w	#5,d2
000145EE D3C2                       		adda.l	d2,a1
000145F0                            
000145F0                            SPLC_LoadTile:
000145F0 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000145F4 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000145F8 47EB 0020                  		lea	$20(a3),a3	; next tile
000145FC 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014600                            
00014600 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014604                            
00014604                            locret_13C96:
00014604 4E75                       		rts	
00014606                            ; End of function LoadSonicDynPLC
00014606                            
00014606                            ; ===========================================================================
00014606                            ; ---------------------------------------------------------------------------
00014606                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014606                            ; ---------------------------------------------------------------------------
00014606                            
00014606                            Obj0A:					; XREF: Obj_Index
00014606 7000                       		moveq	#0,d0
00014608 1028 0024                  		move.b	$24(a0),d0
0001460C 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014610 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014614                            ; ===========================================================================
00014614 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014618 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001461C 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014620 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014624 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014626                            ; ===========================================================================
00014626                            
00014626                            Obj0A_Main:				; XREF: Obj0A_Index
00014626 5428 0024                  		addq.b	#2,$24(a0)
0001462A 217C 0001 3218 0004        		move.l	#Map_obj64,4(a0)
00014632 317C 8348 0002             		move.w	#$8348,2(a0)
00014638 117C 0084 0001             		move.b	#$84,1(a0)
0001463E 117C 0010 0019             		move.b	#$10,$19(a0)
00014644 117C 0001 0018             		move.b	#1,$18(a0)
0001464A 1028 0028                  		move.b	$28(a0),d0
0001464E 6A00                       		bpl.s	loc_13D00
00014650 5028 0024                  		addq.b	#8,$24(a0)
00014654 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001465C 317C 0440 0002             		move.w	#$440,2(a0)
00014662 0240 007F                  		andi.w	#$7F,d0
00014666 1140 0033                  		move.b	d0,$33(a0)
0001466A 6000 0000                  		bra.w	Obj0A_Countdown
0001466E                            ; ===========================================================================
0001466E                            
0001466E                            loc_13D00:
0001466E 1140 001C                  		move.b	d0,$1C(a0)
00014672 3168 0008 0030             		move.w	8(a0),$30(a0)
00014678 317C FF78 0012             		move.w	#-$88,$12(a0)
0001467E                            
0001467E                            Obj0A_Animate:				; XREF: Obj0A_Index
0001467E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014684 4EB9 0000 AED2             		jsr	AnimateSprite
0001468A                            
0001468A                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001468A 3038 F646                  		move.w	($FFFFF646).w,d0
0001468E B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014692 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014694 117C 0006 0024             		move.b	#6,$24(a0)
0001469A 5E28 001C                  		addq.b	#7,$1C(a0)
0001469E 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000146A4 6700                       		beq.s	Obj0A_Display
000146A6 6000                       		bra.s	Obj0A_Display
000146A8                            ; ===========================================================================
000146A8                            
000146A8                            Obj0A_Wobble:
000146A8 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000146AC 6700                       		beq.s	loc_13D44
000146AE 5868 0030                  		addq.w	#4,$30(a0)
000146B2                            
000146B2                            loc_13D44:
000146B2 1028 0026                  		move.b	$26(a0),d0
000146B6 5228 0026                  		addq.b	#1,$26(a0)
000146BA 0240 007F                  		andi.w	#$7F,d0
000146BE 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000146C4 1031 0000                  		move.b	(a1,d0.w),d0
000146C8 4880                       		ext.w	d0
000146CA D068 0030                  		add.w	$30(a0),d0
000146CE 3140 0008                  		move.w	d0,8(a0)
000146D2 6100                       		bsr.s	Obj0A_ShowNumber
000146D4 4EBA 9788                  		jsr	SpeedToPos
000146D8 4A28 0001                  		tst.b	1(a0)
000146DC 6A00                       		bpl.s	Obj0A_Delete
000146DE 4EFA 97A4                  		jmp	DisplaySprite
000146E2                            ; ===========================================================================
000146E2                            
000146E2                            Obj0A_Delete:
000146E2 4EFA 97DC                  		jmp	DeleteObject
000146E6                            ; ===========================================================================
000146E6                            
000146E6                            Obj0A_Display:				; XREF: Obj0A_Index
000146E6 6100                       		bsr.s	Obj0A_ShowNumber
000146E8 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000146EE 4EB9 0000 AED2             		jsr	AnimateSprite
000146F4 4EFA 978E                  		jmp	DisplaySprite
000146F8                            ; ===========================================================================
000146F8                            
000146F8                            Obj0A_Delete2:				; XREF: Obj0A_Index
000146F8 4EFA 97C6                  		jmp	DeleteObject
000146FC                            ; ===========================================================================
000146FC                            
000146FC                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000146FC 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014702 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014704 5368 0038                  		subq.w	#1,$38(a0)
00014708 6600                       		bne.s	Obj0A_Display2
0001470A 117C 000E 0024             		move.b	#$E,$24(a0)
00014710 5E28 001C                  		addq.b	#7,$1C(a0)
00014714 60D0                       		bra.s	Obj0A_Display
00014716                            ; ===========================================================================
00014716                            
00014716                            Obj0A_Display2:
00014716 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001471C 4EB9 0000 AED2             		jsr	AnimateSprite
00014722 4A28 0001                  		tst.b	1(a0)
00014726 6A00                       		bpl.s	Obj0A_Delete3
00014728 4EFA 975A                  		jmp	DisplaySprite
0001472C                            ; ===========================================================================
0001472C                            
0001472C                            Obj0A_Delete3:
0001472C 4EFA 9792                  		jmp	DeleteObject
00014730                            ; ===========================================================================
00014730                            
00014730                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014730 4A68 0038                  		tst.w	$38(a0)
00014734 6700                       		beq.s	locret_13E1A
00014736 5368 0038                  		subq.w	#1,$38(a0)
0001473A 6600                       		bne.s	locret_13E1A
0001473C 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014742 6400                       		bcc.s	locret_13E1A
00014744 317C 000F 0038             		move.w	#$F,$38(a0)
0001474A 4268 0012                  		clr.w	$12(a0)
0001474E 117C 0080 0001             		move.b	#$80,1(a0)
00014754 3028 0008                  		move.w	8(a0),d0
00014758 9078 F700                  		sub.w	($FFFFF700).w,d0
0001475C 0640 0080                  		addi.w	#$80,d0
00014760 3140 0008                  		move.w	d0,8(a0)
00014764 3028 000C                  		move.w	$C(a0),d0
00014768 9078 F704                  		sub.w	($FFFFF704).w,d0
0001476C 0640 0080                  		addi.w	#$80,d0
00014770 3140 000A                  		move.w	d0,$A(a0)
00014774 117C 000C 0024             		move.b	#$C,$24(a0)
0001477A                            
0001477A                            locret_13E1A:
0001477A 4E75                       		rts	
0001477C                            ; ===========================================================================
0001477C                            Obj0A_WobbleData:
0001477C 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001478D 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001479E 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000147AF 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000147BF FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000147CC FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000147D9 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000147E6 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000147F3 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000147FC                            ; ===========================================================================
000147FC                            
000147FC                            Obj0A_Countdown:			; XREF: Obj0A_Index
000147FC 4A68 002C                  		tst.w	$2C(a0)
00014800 6600 0000                  		bne.w	loc_13F86
00014804 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001480A 6400 0000                  		bcc.w	locret_1408C
0001480E 0838 0006 D022             		btst	#6,($FFFFD022).w
00014814 6700 0000                  		beq.w	locret_1408C
00014818 5368 0038                  		subq.w	#1,$38(a0)
0001481C 6A00 0000                  		bpl.w	loc_13FAC
00014820 317C 003B 0038             		move.w	#59,$38(a0)
00014826 317C 0001 0036             		move.w	#1,$36(a0)
0001482C 4EB9 0000 2B32             		jsr	(RandomNumber).l
00014832 0240 0001                  		andi.w	#1,d0
00014836 1140 0034                  		move.b	d0,$34(a0)
0001483A 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001483E 0C40 0019                  		cmpi.w	#$19,d0
00014842 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014844 0C40 0014                  		cmpi.w	#$14,d0
00014848 6700                       		beq.s	Obj0A_WarnSound
0001484A 0C40 000F                  		cmpi.w	#$F,d0
0001484E 6700                       		beq.s	Obj0A_WarnSound
00014850 0C40 000C                  		cmpi.w	#$C,d0
00014854 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014856 6600                       		bne.s	loc_13F02
00014858 303C 0092                  		move.w	#$92,d0
0001485C 4EB9 0000 13B0             		jsr	(PlaySound).l	; play countdown music
00014862                            
00014862                            loc_13F02:
00014862 5328 0032                  		subq.b	#1,$32(a0)
00014866 6A00                       		bpl.s	Obj0A_ReduceAir
00014868 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001486E 08E8 0007 0036             		bset	#7,$36(a0)
00014874 6000                       		bra.s	Obj0A_ReduceAir
00014876                            ; ===========================================================================
00014876                            
00014876                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014876 303C 00C2                  		move.w	#$C2,d0
0001487A 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014880                            
00014880                            Obj0A_ReduceAir:
00014880 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014884 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014888 6100 0000                  		bsr.w	ResumeMusic
0001488C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014892 303C 00B2                  		move.w	#$B2,d0
00014896 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play drowning sound
0001489C 117C 000A 0034             		move.b	#$A,$34(a0)
000148A2 317C 0001 0036             		move.w	#1,$36(a0)
000148A8 317C 0078 002C             		move.w	#$78,$2C(a0)
000148AE 2F08                       		move.l	a0,-(sp)
000148B0 41F8 D000                  		lea	($FFFFD000).w,a0
000148B4 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
000148B8 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000148BE 08E8 0001 0022             		bset	#1,$22(a0)
000148C4 08E8 0007 0002             		bset	#7,2(a0)
000148CA 317C 0000 0012             		move.w	#0,$12(a0)
000148D0 317C 0000 0010             		move.w	#0,$10(a0)
000148D6 317C 0000 0014             		move.w	#0,$14(a0)
000148DC 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000148E2 205F                       		movea.l	(sp)+,a0
000148E4 4E75                       		rts	
000148E6                            ; ===========================================================================
000148E6                            
000148E6                            loc_13F86:
000148E6 5368 002C                  		subq.w	#1,$2C(a0)
000148EA 6600                       		bne.s	loc_13F94
000148EC 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000148F2 4E75                       		rts	
000148F4                            ; ===========================================================================
000148F4                            
000148F4                            loc_13F94:
000148F4 2F08                       		move.l	a0,-(sp)
000148F6 41F8 D000                  		lea	($FFFFD000).w,a0
000148FA 4EBA 9562                  		jsr	SpeedToPos
000148FE 0668 0010 0012             		addi.w	#$10,$12(a0)
00014904 205F                       		movea.l	(sp)+,a0
00014906 6000                       		bra.s	loc_13FAC
00014908                            ; ===========================================================================
00014908                            
00014908                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014908 6000                       		bra.s	Obj0A_MakeItem
0001490A                            ; ===========================================================================
0001490A                            
0001490A                            loc_13FAC:
0001490A 4A68 0036                  		tst.w	$36(a0)
0001490E 6700 0000                  		beq.w	locret_1408C
00014912 5368 003A                  		subq.w	#1,$3A(a0)
00014916 6A00 0000                  		bpl.w	locret_1408C
0001491A                            
0001491A                            Obj0A_MakeItem:
0001491A 4EB9 0000 2B32             		jsr	(RandomNumber).l
00014920 0240 000F                  		andi.w	#$F,d0
00014924 3140 003A                  		move.w	d0,$3A(a0)
00014928 4EBA 99E0                  		jsr	SingleObjLoad
0001492C 6600 0000                  		bne.w	locret_1408C
00014930 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014934 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001493A 7006                       		moveq	#6,d0
0001493C 0838 0000 D022             		btst	#0,($FFFFD022).w
00014942 6700                       		beq.s	loc_13FF2
00014944 4440                       		neg.w	d0
00014946 137C 0040 0026             		move.b	#$40,$26(a1)
0001494C                            
0001494C                            loc_13FF2:
0001494C D169 0008                  		add.w	d0,8(a1)
00014950 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014956 137C 0006 0028             		move.b	#6,$28(a1)
0001495C 4A68 002C                  		tst.w	$2C(a0)
00014960 6700 0000                  		beq.w	loc_1403E
00014964 0268 0007 003A             		andi.w	#7,$3A(a0)
0001496A 0668 0000 003A             		addi.w	#0,$3A(a0)
00014970 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014974 0440 000C                  		subi.w	#$C,d0
00014978 3340 000C                  		move.w	d0,$C(a1)
0001497C 4EB9 0000 2B32             		jsr	(RandomNumber).l
00014982 1340 0026                  		move.b	d0,$26(a1)
00014986 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001498A 0200 0003                  		andi.b	#3,d0
0001498E 6600                       		bne.s	loc_14082
00014990 137C 000E 0028             		move.b	#$E,$28(a1)
00014996 6000                       		bra.s	loc_14082
00014998                            ; ===========================================================================
00014998                            
00014998                            loc_1403E:
00014998 0828 0007 0036             		btst	#7,$36(a0)
0001499E 6700                       		beq.s	loc_14082
000149A0 3438 FE14                  		move.w	($FFFFFE14).w,d2
000149A4 E24A                       		lsr.w	#1,d2
000149A6 4EB9 0000 2B32             		jsr	(RandomNumber).l
000149AC 0240 0003                  		andi.w	#3,d0
000149B0 6600                       		bne.s	loc_1406A
000149B2 08E8 0006 0036             		bset	#6,$36(a0)
000149B8 6600                       		bne.s	loc_14082
000149BA 1342 0028                  		move.b	d2,$28(a1)
000149BE 337C 001C 0038             		move.w	#$1C,$38(a1)
000149C4                            
000149C4                            loc_1406A:
000149C4 4A28 0034                  		tst.b	$34(a0)
000149C8 6600                       		bne.s	loc_14082
000149CA 08E8 0006 0036             		bset	#6,$36(a0)
000149D0 6600                       		bne.s	loc_14082
000149D2 1342 0028                  		move.b	d2,$28(a1)
000149D6 337C 001C 0038             		move.w	#$1C,$38(a1)
000149DC                            
000149DC                            loc_14082:
000149DC 5328 0034                  		subq.b	#1,$34(a0)
000149E0 6A00                       		bpl.s	locret_1408C
000149E2 4268 0036                  		clr.w	$36(a0)
000149E6                            
000149E6                            locret_1408C:
000149E6 4E75                       		rts	
000149E8                            
000149E8                            ; ---------------------------------------------------------------------------
000149E8                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000149E8                            ; ---------------------------------------------------------------------------
000149E8                            
000149E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149E8                            
000149E8                            
000149E8                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000149E8 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000149EE                             
000149EE                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
000149EE                             
000149EE 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
000149F2                             
000149F2 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000149F8 6600                       		bne.s	Air_GetBgm2	; if not, branch
000149FA 43F9 0000 3BB6             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014A00 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014A02                             
00014A02                            Air_GetBgm2:
00014A02 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014A08 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014A0A 43F9 0000 3BBE             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014A10 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014A12                             
00014A12                            Air_GetBgm3:
00014A12 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014A18 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014A1A 43F9 0000 3BC6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014A20 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014A22                             
00014A22                            Air_GetBgm4:
00014A22 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014A28 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014A2A 43F9 0000 3BCE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014A30                             
00014A30                            Air_PlayMusic:
00014A30 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014A34                             
00014A34                            loc_140A6:
00014A34 4EB9 0000 13B0             		jsr	(PlaySound).l
00014A3A                             
00014A3A                            ; NineKode ends here
00014A3A                            
00014A3A                            loc_140AC:
00014A3A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014A40 4238 D372                  		clr.b	($FFFFD372).w
00014A44 4E75                       		rts	
00014A46                            ; End of function ResumeMusic
00014A46                            
00014A46                            ; ===========================================================================
00014A46                            Ani_obj0A:
00014A46                            	include "_anim\obj0A.asm"
00014A46                            ; ---------------------------------------------------------------------------
00014A46                            ; Animation script - countdown numbers and bubbles (LZ)
00014A46                            ; ---------------------------------------------------------------------------
00014A46 0000                       		dc.w byte_140D6-Ani_obj0A
00014A48 0000                       		dc.w byte_140E0-Ani_obj0A
00014A4A 0000                       		dc.w byte_140EA-Ani_obj0A
00014A4C 0000                       		dc.w byte_140F4-Ani_obj0A
00014A4E 0000                       		dc.w byte_140FE-Ani_obj0A
00014A50 0000                       		dc.w byte_14108-Ani_obj0A
00014A52 0000                       		dc.w byte_14112-Ani_obj0A
00014A54 0000                       		dc.w byte_14118-Ani_obj0A
00014A56 0000                       		dc.w byte_14120-Ani_obj0A
00014A58 0000                       		dc.w byte_14128-Ani_obj0A
00014A5A 0000                       		dc.w byte_14130-Ani_obj0A
00014A5C 0000                       		dc.w byte_14138-Ani_obj0A
00014A5E 0000                       		dc.w byte_14140-Ani_obj0A
00014A60 0000                       		dc.w byte_14148-Ani_obj0A
00014A62 0000                       		dc.w byte_1414A-Ani_obj0A
00014A64 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014A6E 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014A78 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014A82 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014A8C 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014A96 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014AA0 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014AA6 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014AAE 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014AB6 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014ABE 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014AC6 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014ACE 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014AD6 0EFC                       byte_14148:	dc.b $E, $FC
00014AD8 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014ADE                            		even
00014ADE                            		even
00014ADE                            
00014ADE                            ; ---------------------------------------------------------------------------
00014ADE                            ; Sprite mappings - drowning countdown numbers (LZ)
00014ADE                            ; ---------------------------------------------------------------------------
00014ADE                            Map_obj0A:
00014ADE                            	include "_maps\obj0A.asm"
00014ADE                            ; ---------------------------------------------------------------------------
00014ADE                            ; Sprite mappings - drowning countdown numbers (LZ)
00014ADE                            ; ---------------------------------------------------------------------------
00014ADE 0000                       		dc.w byte_14152-Map_obj0A
00014AE0 01                         byte_14152:	dc.b 1
00014AE1 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014AE6                            		even
00014AE6                            		even
00014AE6                            
00014AE6                            ; ===========================================================================
00014AE6                            ; ---------------------------------------------------------------------------
00014AE6                            ; Object 38 - shield and invincibility stars
00014AE6                            ; ---------------------------------------------------------------------------
00014AE6                            
00014AE6                            Obj38:					; XREF: Obj_Index
00014AE6 7000                       		moveq	#0,d0
00014AE8 1028 0024                  		move.b	$24(a0),d0
00014AEC 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014AF0 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014AF4                            ; ===========================================================================
00014AF4 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014AF6 0000                       		dc.w Obj38_Shield-Obj38_Index
00014AF8 0000                       		dc.w Obj38_Stars-Obj38_Index
00014AFA                            ; ===========================================================================
00014AFA                            
00014AFA                            Obj38_Main:				; XREF: Obj38_Index
00014AFA 5428 0024                  		addq.b	#2,$24(a0)
00014AFE 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014B06 117C 0004 0001             		move.b	#4,1(a0)
00014B0C 117C 0001 0018             		move.b	#1,$18(a0)
00014B12 117C 0010 0019             		move.b	#$10,$19(a0)
00014B18 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014B1C 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014B1E 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014B24 4E75                       		rts	
00014B26                            ; ===========================================================================
00014B26                            
00014B26                            Obj38_DoStars:
00014B26 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014B2A 317C 055C 0002             		move.w	#$55C,2(a0)
00014B30 4E75                       		rts	
00014B32                            ; ===========================================================================
00014B32                            
00014B32                            Obj38_Shield:				; XREF: Obj38_Index
00014B32 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014B36 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014B38 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014B3C 6700                       		beq.s	Obj38_Delete	; if not, branch
00014B3E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014B44 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014B4A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B50 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014B56 4EB9 0000 AED2             		jsr	AnimateSprite
00014B5C 4EFA 9326                  		jmp	DisplaySprite
00014B60                            ; ===========================================================================
00014B60                            
00014B60                            Obj38_RmvShield:
00014B60 4E75                       		rts	
00014B62                            ; ===========================================================================
00014B62                            
00014B62                            Obj38_Delete:
00014B62 4EFA 935C                  		jmp	DeleteObject
00014B66                            ; ===========================================================================
00014B66                            
00014B66                            Obj38_Stars:				; XREF: Obj38_Index
00014B66 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014B6A 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014B6C 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014B70 1228 001C                  		move.b	$1C(a0),d1
00014B74 5301                       		subq.b	#1,d1
00014B76 6000                       		bra.s	Obj38_StarTrail
00014B78                            ; ===========================================================================
00014B78 E909                       		lsl.b	#4,d1
00014B7A 5801                       		addq.b	#4,d1
00014B7C 9001                       		sub.b	d1,d0
00014B7E 1228 0030                  		move.b	$30(a0),d1
00014B82 9001                       		sub.b	d1,d0
00014B84 5801                       		addq.b	#4,d1
00014B86 0201 000F                  		andi.b	#$F,d1
00014B8A 1141 0030                  		move.b	d1,$30(a0)
00014B8E 6000                       		bra.s	Obj38_StarTrail2a
00014B90                            ; ===========================================================================
00014B90                            
00014B90                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014B90 E709                       		lsl.b	#3,d1
00014B92 1401                       		move.b	d1,d2
00014B94 D201                       		add.b	d1,d1
00014B96 D202                       		add.b	d2,d1
00014B98 5801                       		addq.b	#4,d1
00014B9A 9001                       		sub.b	d1,d0
00014B9C 1228 0030                  		move.b	$30(a0),d1
00014BA0 9001                       		sub.b	d1,d0
00014BA2 5801                       		addq.b	#4,d1
00014BA4 0C01 0018                  		cmpi.b	#$18,d1
00014BA8 6500                       		bcs.s	Obj38_StarTrail2
00014BAA 7200                       		moveq	#0,d1
00014BAC                            
00014BAC                            Obj38_StarTrail2:
00014BAC 1141 0030                  		move.b	d1,$30(a0)
00014BB0                            
00014BB0                            Obj38_StarTrail2a:
00014BB0 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014BB4 43F1 0000                  		lea	(a1,d0.w),a1
00014BB8 3159 0008                  		move.w	(a1)+,8(a0)
00014BBC 3159 000C                  		move.w	(a1)+,$C(a0)
00014BC0 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014BC6 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014BCC 4EB9 0000 AED2             		jsr	AnimateSprite
00014BD2 4EFA 92B0                  		jmp	DisplaySprite
00014BD6                            ; ===========================================================================
00014BD6                            
00014BD6                            Obj38_Delete2:				; XREF: Obj38_Stars
00014BD6 4EFA 92E8                  		jmp	DeleteObject
00014BDA                            ; ===========================================================================
00014BDA                            ; ---------------------------------------------------------------------------
00014BDA                            ; Object 4A - special stage entry from beta
00014BDA                            ; ---------------------------------------------------------------------------
00014BDA                            
00014BDA                            Obj4A:					; XREF: Obj_Index
00014BDA 7000                       		moveq	#0,d0
00014BDC 1028 0024                  		move.b	$24(a0),d0
00014BE0 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014BE4 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014BE8                            ; ===========================================================================
00014BE8 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014BEA 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014BEC 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014BEE                            ; ===========================================================================
00014BEE                            
00014BEE                            Obj4A_Main:				; XREF: Obj4A_Index
00014BEE 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014BF2 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014BF4 4E75                       		rts	
00014BF6                            ; ===========================================================================
00014BF6                            
00014BF6                            Obj4A_Main2:
00014BF6 5428 0024                  		addq.b	#2,$24(a0)
00014BFA 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014C02 117C 0004 0001             		move.b	#4,1(a0)
00014C08 117C 0001 0018             		move.b	#1,$18(a0)
00014C0E 117C 0038 0019             		move.b	#$38,$19(a0)
00014C14 317C 0541 0002             		move.w	#$541,2(a0)
00014C1A 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014C20                            
00014C20                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014C20 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014C26 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014C2C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014C32 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014C38 4EB9 0000 AED2             		jsr	AnimateSprite
00014C3E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014C44 6600                       		bne.s	Obj4A_Display
00014C46 4A38 D000                  		tst.b	($FFFFD000).w
00014C4A 6700                       		beq.s	Obj4A_Display
00014C4C 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014C52 303C 00A8                  		move.w	#$A8,d0
00014C56 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014C5C                            
00014C5C                            Obj4A_Display:
00014C5C 4EFA 9226                  		jmp	DisplaySprite
00014C60                            ; ===========================================================================
00014C60                            
00014C60                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014C60 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014C64 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014C66 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014C6C 4EFA 9252                  		jmp	DeleteObject
00014C70                            ; ===========================================================================
00014C70                            
00014C70                            Obj4A_Wait:
00014C70 4E75                       		rts	
00014C72                            ; ===========================================================================
00014C72                            ; ---------------------------------------------------------------------------
00014C72                            ; Object 08 - water splash (LZ)
00014C72                            ; ---------------------------------------------------------------------------
00014C72                            
00014C72                            Obj08:					; XREF: Obj_Index
00014C72 7000                       		moveq	#0,d0
00014C74 1028 0024                  		move.b	$24(a0),d0
00014C78 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014C7C 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014C80                            ; ===========================================================================
00014C80 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014C82 0000                       		dc.w Obj08_Display-Obj08_Index
00014C84 0000                       		dc.w Obj08_Delete-Obj08_Index
00014C86                            ; ===========================================================================
00014C86                            
00014C86                            Obj08_Main:				; XREF: Obj08_Index
00014C86 5428 0024                  		addq.b	#2,$24(a0)
00014C8A 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014C92 0028 0004 0001             		ori.b	#4,1(a0)
00014C98 117C 0001 0018             		move.b	#1,$18(a0)
00014C9E 117C 0010 0019             		move.b	#$10,$19(a0)
00014CA4 317C 4259 0002             		move.w	#$4259,2(a0)
00014CAA 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014CB0                            
00014CB0                            Obj08_Display:				; XREF: Obj08_Index
00014CB0 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014CB6 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014CBC 4EB9 0000 AED2             		jsr	AnimateSprite
00014CC2 4EFA 91C0                  		jmp	DisplaySprite
00014CC6                            ; ===========================================================================
00014CC6                            
00014CC6                            Obj08_Delete:				; XREF: Obj08_Index
00014CC6 4EFA 91F8                  		jmp	DeleteObject	; delete when animation	is complete
00014CCA                            ; ===========================================================================
00014CCA                            Ani_obj38:
00014CCA                            	include "_anim\obj38.asm"
00014CCA                            ; ---------------------------------------------------------------------------
00014CCA                            ; Animation script - shield and invincibility stars
00014CCA                            ; ---------------------------------------------------------------------------
00014CCA 0000                       		dc.w byte_14356-Ani_obj38
00014CCC 0000                       		dc.w byte_1435E-Ani_obj38
00014CCE 0000                       		dc.w byte_14364-Ani_obj38
00014CD0 0000                       		dc.w byte_1437E-Ani_obj38
00014CD2 0000                       		dc.w byte_14398-Ani_obj38
00014CD4 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014CDC 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014CE2 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014CF3 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014CFC 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014D0D 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014D16 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014D27 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014D30                            		even
00014D30                            		even
00014D30                            
00014D30                            ; ---------------------------------------------------------------------------
00014D30                            ; Sprite mappings - shield and invincibility stars
00014D30                            ; ---------------------------------------------------------------------------
00014D30                            Map_obj38:
00014D30                            	include "_maps\obj38.asm"
00014D30                            ; ---------------------------------------------------------------------------
00014D30                            ; Sprite mappings - shield and invincibility stars
00014D30                            ; ---------------------------------------------------------------------------
00014D30 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014D34 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014D38 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014D3C 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014D40 04                         byte_143C2:	dc.b 4
00014D41 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014D46 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014D4B 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014D50 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014D55 04                         byte_143D7:	dc.b 4
00014D56 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014D5B E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014D60 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014D65 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014D6A 04                         byte_143EC:	dc.b 4
00014D6B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014D70 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014D75 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014D7A 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014D7F 04                         byte_14401:	dc.b 4
00014D80 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014D85 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014D8A 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014D8F 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014D94 04                         byte_14416:	dc.b 4
00014D95 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014D9A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014D9F 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014DA4 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014DA9 04                         byte_1442B:	dc.b 4
00014DAA E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014DAF E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014DB4 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014DB9 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014DBE 04                         byte_14440:	dc.b 4
00014DBF E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014DC4 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014DC9 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014DCE 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014DD4 00                         		even
00014DD4 00                         		even
00014DD4                            
00014DD4                            Ani_obj4A:
00014DD4                            	include "_anim\obj4A.asm"
00014DD4                            ; ---------------------------------------------------------------------------
00014DD4                            ; Animation script - special stage entry effect from beta
00014DD4                            ; ---------------------------------------------------------------------------
00014DD4 0000                       		dc.w byte_14458-Ani_obj4A
00014DD6 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014DEA                            		even
00014DEA                            		even
00014DEA                            
00014DEA                            ; ---------------------------------------------------------------------------
00014DEA                            ; Sprite mappings - special stage entry	from beta
00014DEA                            ; ---------------------------------------------------------------------------
00014DEA                            Map_obj4A:
00014DEA                            	include "_maps\obj4A.asm"
00014DEA                            ; ---------------------------------------------------------------------------
00014DEA                            ; Sprite mappings - special stage entry	from beta
00014DEA                            ; ---------------------------------------------------------------------------
00014DEA 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014DEE 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014DF2 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014DF6 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014DFA 03                         byte_1447C:	dc.b 3
00014DFB F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014E00 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014E05 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014E0A 03                         byte_1448C:	dc.b 3
00014E0B F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014E10 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014E15 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014E1A 05                         byte_1449C:	dc.b 5
00014E1B E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014E20 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014E25 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014E2A 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014E2F 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014E34 09                         byte_144B6:	dc.b 9
00014E35 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014E3A F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014E3F 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014E44 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014E49 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014E4E F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014E53 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014E58 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014E5D F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014E62 12                         byte_144E4:	dc.b $12
00014E63 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014E68 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014E6D F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014E72 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014E77 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014E7C 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014E81 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014E86 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014E8B 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014E90 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014E95 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014E9A 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014E9F F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014EA4 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014EA9 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014EAE F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014EB3 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014EB8 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014EBD 11                         byte_1453F:	dc.b $11
00014EBE F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014EC3 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014EC8 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014ECD 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014ED2 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014ED7 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014EDC 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014EE1 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014EE6 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014EEB 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014EF0 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014EF5 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014EFA F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014EFF 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014F04 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014F09 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014F0E 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014F13 09                         byte_14595:	dc.b 9
00014F14 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014F19 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014F1E 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014F23 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014F28 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014F2D FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014F32 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014F37 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014F3C 04                         		dc.b 4
00014F3D 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014F42                            		even
00014F42                            		even
00014F42                            
00014F42                            Ani_obj08:
00014F42                            	include "_anim\obj08.asm"
00014F42                            ; ---------------------------------------------------------------------------
00014F42                            ; Animation script - water splash (LZ)
00014F42                            ; ---------------------------------------------------------------------------
00014F42 0000                       		dc.w byte_145C6-Ani_obj08
00014F44 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014F4A                            		even
00014F4A                            		even
00014F4A                            
00014F4A                            ; ---------------------------------------------------------------------------
00014F4A                            ; Sprite mappings - water splash (LZ)
00014F4A                            ; ---------------------------------------------------------------------------
00014F4A                            Map_obj08:
00014F4A                            	include "_maps\obj08.asm"
00014F4A                            ; ---------------------------------------------------------------------------
00014F4A                            ; Sprite mappings - water splash (LZ)
00014F4A                            ; ---------------------------------------------------------------------------
00014F4A 0000                       		dc.w byte_145D2-Map_obj08
00014F4C 0000                       		dc.w byte_145DD-Map_obj08
00014F4E 0000                       		dc.w byte_145E8-Map_obj08
00014F50 02                         byte_145D2:	dc.b 2
00014F51 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014F56 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014F5B 02                         byte_145DD:	dc.b 2
00014F5C E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014F61 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014F66 01                         byte_145E8:	dc.b 1
00014F67 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014F6C                            		even
00014F6C                            		even
00014F6C                            
00014F6C                            ; ---------------------------------------------------------------------------
00014F6C                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014F6C                            ; ---------------------------------------------------------------------------
00014F6C                            
00014F6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F6C                            
00014F6C                            
00014F6C                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014F6C 0828 0003 0022             		btst	#3,$22(a0)
00014F72 6700                       		beq.s	loc_14602
00014F74 7000                       		moveq	#0,d0
00014F76 11C0 F768                  		move.b	d0,($FFFFF768).w
00014F7A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014F7E 4E75                       		rts	
00014F80                            ; ===========================================================================
00014F80                            
00014F80                            loc_14602:
00014F80 7003                       		moveq	#3,d0
00014F82 11C0 F768                  		move.b	d0,($FFFFF768).w
00014F86 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014F8A 1028 0026                  		move.b	$26(a0),d0
00014F8E 0600 0020                  		addi.b	#$20,d0
00014F92 6A00                       		bpl.s	loc_14624
00014F94 1028 0026                  		move.b	$26(a0),d0
00014F98 6A00                       		bpl.s	loc_1461E
00014F9A 5300                       		subq.b	#1,d0
00014F9C                            
00014F9C                            loc_1461E:
00014F9C 0600 0020                  		addi.b	#$20,d0
00014FA0 6000                       		bra.s	loc_14630
00014FA2                            ; ===========================================================================
00014FA2                            
00014FA2                            loc_14624:
00014FA2 1028 0026                  		move.b	$26(a0),d0
00014FA6 6A00                       		bpl.s	loc_1462C
00014FA8 5200                       		addq.b	#1,d0
00014FAA                            
00014FAA                            loc_1462C:
00014FAA 0600 001F                  		addi.b	#$1F,d0
00014FAE                            
00014FAE                            loc_14630:
00014FAE 0200 00C0                  		andi.b	#$C0,d0
00014FB2 0C00 0040                  		cmpi.b	#$40,d0
00014FB6 6700 0000                  		beq.w	Sonic_WalkVertL
00014FBA 0C00 0080                  		cmpi.b	#$80,d0
00014FBE 6700 0000                  		beq.w	Sonic_WalkCeiling
00014FC2 0C00 00C0                  		cmpi.b	#$C0,d0
00014FC6 6700 0000                  		beq.w	Sonic_WalkVertR
00014FCA 3428 000C                  		move.w	$C(a0),d2
00014FCE 3628 0008                  		move.w	8(a0),d3
00014FD2 7000                       		moveq	#0,d0
00014FD4 1028 0016                  		move.b	$16(a0),d0
00014FD8 4880                       		ext.w	d0
00014FDA D440                       		add.w	d0,d2
00014FDC 1028 0017                  		move.b	$17(a0),d0
00014FE0 4880                       		ext.w	d0
00014FE2 D640                       		add.w	d0,d3
00014FE4 49F8 F768                  		lea	($FFFFF768).w,a4
00014FE8 367C 0010                  		movea.w	#$10,a3
00014FEC 3C3C 0000                  		move.w	#0,d6
00014FF0 7A0D                       		moveq	#$D,d5
00014FF2 6100 0000                  		bsr.w	FindFloor
00014FF6 3F01                       		move.w	d1,-(sp)
00014FF8 3428 000C                  		move.w	$C(a0),d2
00014FFC 3628 0008                  		move.w	8(a0),d3
00015000 7000                       		moveq	#0,d0
00015002 1028 0016                  		move.b	$16(a0),d0
00015006 4880                       		ext.w	d0
00015008 D440                       		add.w	d0,d2
0001500A 1028 0017                  		move.b	$17(a0),d0
0001500E 4880                       		ext.w	d0
00015010 4440                       		neg.w	d0
00015012 D640                       		add.w	d0,d3
00015014 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015018 367C 0010                  		movea.w	#$10,a3
0001501C 3C3C 0000                  		move.w	#0,d6
00015020 7A0D                       		moveq	#$D,d5
00015022 6100 0000                  		bsr.w	FindFloor
00015026 301F                       		move.w	(sp)+,d0
00015028 6100 0000                  		bsr.w	Sonic_Angle
0001502C 4A41                       		tst.w	d1
0001502E 6700                       		beq.s	locret_146BE
00015030 6A00                       		bpl.s	loc_146C0
00015032 0C41 FFF2                  		cmpi.w	#-$E,d1
00015036 6D00                       		blt.s	locret_146E6
00015038 D368 000C                  		add.w	d1,$C(a0)
0001503C                            
0001503C                            locret_146BE:
0001503C 4E75                       		rts	
0001503E                            ; ===========================================================================
0001503E                            
0001503E                            loc_146C0:
0001503E 0C41 000E                  		cmpi.w	#$E,d1
00015042 6E00                       		bgt.s	loc_146CC
00015044                            
00015044                            loc_146C6:
00015044 D368 000C                  		add.w	d1,$C(a0)
00015048 4E75                       		rts	
0001504A                            ; ===========================================================================
0001504A                            
0001504A                            loc_146CC:
0001504A 4A28 0038                  		tst.b	$38(a0)
0001504E 66F4                       		bne.s	loc_146C6
00015050 08E8 0001 0022             		bset	#1,$22(a0)
00015056 08A8 0005 0022             		bclr	#5,$22(a0)
0001505C 117C 0001 001D             		move.b	#1,$1D(a0)
00015062 4E75                       		rts	
00015064                            ; ===========================================================================
00015064                            
00015064                            locret_146E6:
00015064 4E75                       		rts	
00015066                            ; End of function Sonic_AnglePos
00015066                            
00015066                            ; ===========================================================================
00015066 2428 0008                  		move.l	8(a0),d2
0001506A 3028 0010                  		move.w	$10(a0),d0
0001506E 48C0                       		ext.l	d0
00015070 E180                       		asl.l	#8,d0
00015072 9480                       		sub.l	d0,d2
00015074 2142 0008                  		move.l	d2,8(a0)
00015078 303C 0038                  		move.w	#$38,d0
0001507C 48C0                       		ext.l	d0
0001507E E180                       		asl.l	#8,d0
00015080 9680                       		sub.l	d0,d3
00015082 2143 000C                  		move.l	d3,$C(a0)
00015086 4E75                       		rts	
00015088                            ; ===========================================================================
00015088                            
00015088                            locret_1470A:
00015088 4E75                       		rts	
0001508A                            ; ===========================================================================
0001508A 2628 000C                  		move.l	$C(a0),d3
0001508E 3028 0012                  		move.w	$12(a0),d0
00015092 0440 0038                  		subi.w	#$38,d0
00015096 3140 0012                  		move.w	d0,$12(a0)
0001509A 48C0                       		ext.l	d0
0001509C E180                       		asl.l	#8,d0
0001509E 9680                       		sub.l	d0,d3
000150A0 2143 000C                  		move.l	d3,$C(a0)
000150A4 4E75                       		rts	
000150A6 4E75                       		rts	
000150A8                            ; ===========================================================================
000150A8 2428 0008                  		move.l	8(a0),d2
000150AC 2628 000C                  		move.l	$C(a0),d3
000150B0 3028 0010                  		move.w	$10(a0),d0
000150B4 48C0                       		ext.l	d0
000150B6 E180                       		asl.l	#8,d0
000150B8 9480                       		sub.l	d0,d2
000150BA 3028 0012                  		move.w	$12(a0),d0
000150BE 48C0                       		ext.l	d0
000150C0 E180                       		asl.l	#8,d0
000150C2 9680                       		sub.l	d0,d3
000150C4 2142 0008                  		move.l	d2,8(a0)
000150C8 2143 000C                  		move.l	d3,$C(a0)
000150CC 4E75                       		rts	
000150CE                            
000150CE                            ; ---------------------------------------------------------------------------
000150CE                            ; Subroutine to	change Sonic's angle as he walks along the floor
000150CE                            ; ---------------------------------------------------------------------------
000150CE                            
000150CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150CE                            
000150CE                            
000150CE                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000150CE 1438 F76A                  		move.b	($FFFFF76A).w,d2
000150D2 B240                       		cmp.w	d0,d1
000150D4 6F00                       		ble.s	loc_1475E
000150D6 1438 F768                  		move.b	($FFFFF768).w,d2
000150DA 3200                       		move.w	d0,d1
000150DC                            
000150DC                            loc_1475E:
000150DC 0802 0000                  		btst	#0,d2
000150E0 6600                       		bne.s	loc_1476A
000150E2 1142 0026                  		move.b	d2,$26(a0)
000150E6 4E75                       		rts	
000150E8                            ; ===========================================================================
000150E8                            
000150E8                            loc_1476A:
000150E8 1428 0026                  		move.b	$26(a0),d2
000150EC 0602 0020                  		addi.b	#$20,d2
000150F0 0202 00C0                  		andi.b	#$C0,d2
000150F4 1142 0026                  		move.b	d2,$26(a0)
000150F8 4E75                       		rts	
000150FA                            ; End of function Sonic_Angle
000150FA                            
000150FA                            ; ---------------------------------------------------------------------------
000150FA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000150FA                            ; ---------------------------------------------------------------------------
000150FA                            
000150FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150FA                            
000150FA                            
000150FA                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000150FA 3428 000C                  		move.w	$C(a0),d2
000150FE 3628 0008                  		move.w	8(a0),d3
00015102 7000                       		moveq	#0,d0
00015104 1028 0017                  		move.b	$17(a0),d0
00015108 4880                       		ext.w	d0
0001510A 4440                       		neg.w	d0
0001510C D440                       		add.w	d0,d2
0001510E 1028 0016                  		move.b	$16(a0),d0
00015112 4880                       		ext.w	d0
00015114 D640                       		add.w	d0,d3
00015116 49F8 F768                  		lea	($FFFFF768).w,a4
0001511A 367C 0010                  		movea.w	#$10,a3
0001511E 3C3C 0000                  		move.w	#0,d6
00015122 7A0D                       		moveq	#$D,d5
00015124 6100 0000                  		bsr.w	FindWall
00015128 3F01                       		move.w	d1,-(sp)
0001512A 3428 000C                  		move.w	$C(a0),d2
0001512E 3628 0008                  		move.w	8(a0),d3
00015132 7000                       		moveq	#0,d0
00015134 1028 0017                  		move.b	$17(a0),d0
00015138 4880                       		ext.w	d0
0001513A D440                       		add.w	d0,d2
0001513C 1028 0016                  		move.b	$16(a0),d0
00015140 4880                       		ext.w	d0
00015142 D640                       		add.w	d0,d3
00015144 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015148 367C 0010                  		movea.w	#$10,a3
0001514C 3C3C 0000                  		move.w	#0,d6
00015150 7A0D                       		moveq	#$D,d5
00015152 6100 0000                  		bsr.w	FindWall
00015156 301F                       		move.w	(sp)+,d0
00015158 6100 FF74                  		bsr.w	Sonic_Angle
0001515C 4A41                       		tst.w	d1
0001515E 6700                       		beq.s	locret_147F0
00015160 6A00                       		bpl.s	loc_147F2
00015162 0C41 FFF2                  		cmpi.w	#-$E,d1
00015166 6D00 FF20                  		blt.w	locret_1470A
0001516A D368 0008                  		add.w	d1,8(a0)
0001516E                            
0001516E                            locret_147F0:
0001516E 4E75                       		rts	
00015170                            ; ===========================================================================
00015170                            
00015170                            loc_147F2:
00015170 0C41 000E                  		cmpi.w	#$E,d1
00015174 6E00                       		bgt.s	loc_147FE
00015176                            
00015176                            loc_147F8:
00015176 D368 0008                  		add.w	d1,8(a0)
0001517A 4E75                       		rts	
0001517C                            ; ===========================================================================
0001517C                            
0001517C                            loc_147FE:
0001517C 4A28 0038                  		tst.b	$38(a0)
00015180 66F4                       		bne.s	loc_147F8
00015182 08E8 0001 0022             		bset	#1,$22(a0)
00015188 08A8 0005 0022             		bclr	#5,$22(a0)
0001518E 117C 0001 001D             		move.b	#1,$1D(a0)
00015194 4E75                       		rts	
00015196                            ; End of function Sonic_WalkVertR
00015196                            
00015196                            ; ---------------------------------------------------------------------------
00015196                            ; Subroutine allowing Sonic to walk upside-down
00015196                            ; ---------------------------------------------------------------------------
00015196                            
00015196                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015196                            
00015196                            
00015196                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015196 3428 000C                  		move.w	$C(a0),d2
0001519A 3628 0008                  		move.w	8(a0),d3
0001519E 7000                       		moveq	#0,d0
000151A0 1028 0016                  		move.b	$16(a0),d0
000151A4 4880                       		ext.w	d0
000151A6 9440                       		sub.w	d0,d2
000151A8 0A42 000F                  		eori.w	#$F,d2
000151AC 1028 0017                  		move.b	$17(a0),d0
000151B0 4880                       		ext.w	d0
000151B2 D640                       		add.w	d0,d3
000151B4 49F8 F768                  		lea	($FFFFF768).w,a4
000151B8 367C FFF0                  		movea.w	#-$10,a3
000151BC 3C3C 1000                  		move.w	#$1000,d6
000151C0 7A0D                       		moveq	#$D,d5
000151C2 6100 0000                  		bsr.w	FindFloor
000151C6 3F01                       		move.w	d1,-(sp)
000151C8 3428 000C                  		move.w	$C(a0),d2
000151CC 3628 0008                  		move.w	8(a0),d3
000151D0 7000                       		moveq	#0,d0
000151D2 1028 0016                  		move.b	$16(a0),d0
000151D6 4880                       		ext.w	d0
000151D8 9440                       		sub.w	d0,d2
000151DA 0A42 000F                  		eori.w	#$F,d2
000151DE 1028 0017                  		move.b	$17(a0),d0
000151E2 4880                       		ext.w	d0
000151E4 9640                       		sub.w	d0,d3
000151E6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151EA 367C FFF0                  		movea.w	#-$10,a3
000151EE 3C3C 1000                  		move.w	#$1000,d6
000151F2 7A0D                       		moveq	#$D,d5
000151F4 6100 0000                  		bsr.w	FindFloor
000151F8 301F                       		move.w	(sp)+,d0
000151FA 6100 FED2                  		bsr.w	Sonic_Angle
000151FE 4A41                       		tst.w	d1
00015200 6700                       		beq.s	locret_14892
00015202 6A00                       		bpl.s	loc_14894
00015204 0C41 FFF2                  		cmpi.w	#-$E,d1
00015208 6D00 FE5A                  		blt.w	locret_146E6
0001520C 9368 000C                  		sub.w	d1,$C(a0)
00015210                            
00015210                            locret_14892:
00015210 4E75                       		rts	
00015212                            ; ===========================================================================
00015212                            
00015212                            loc_14894:
00015212 0C41 000E                  		cmpi.w	#$E,d1
00015216 6E00                       		bgt.s	loc_148A0
00015218                            
00015218                            loc_1489A:
00015218 9368 000C                  		sub.w	d1,$C(a0)
0001521C 4E75                       		rts	
0001521E                            ; ===========================================================================
0001521E                            
0001521E                            loc_148A0:
0001521E 4A28 0038                  		tst.b	$38(a0)
00015222 66F4                       		bne.s	loc_1489A
00015224 08E8 0001 0022             		bset	#1,$22(a0)
0001522A 08A8 0005 0022             		bclr	#5,$22(a0)
00015230 117C 0001 001D             		move.b	#1,$1D(a0)
00015236 4E75                       		rts	
00015238                            ; End of function Sonic_WalkCeiling
00015238                            
00015238                            ; ---------------------------------------------------------------------------
00015238                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015238                            ; ---------------------------------------------------------------------------
00015238                            
00015238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015238                            
00015238                            
00015238                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00015238 3428 000C                  		move.w	$C(a0),d2
0001523C 3628 0008                  		move.w	8(a0),d3
00015240 7000                       		moveq	#0,d0
00015242 1028 0017                  		move.b	$17(a0),d0
00015246 4880                       		ext.w	d0
00015248 9440                       		sub.w	d0,d2
0001524A 1028 0016                  		move.b	$16(a0),d0
0001524E 4880                       		ext.w	d0
00015250 9640                       		sub.w	d0,d3
00015252 0A43 000F                  		eori.w	#$F,d3
00015256 49F8 F768                  		lea	($FFFFF768).w,a4
0001525A 367C FFF0                  		movea.w	#-$10,a3
0001525E 3C3C 0800                  		move.w	#$800,d6
00015262 7A0D                       		moveq	#$D,d5
00015264 6100 0000                  		bsr.w	FindWall
00015268 3F01                       		move.w	d1,-(sp)
0001526A 3428 000C                  		move.w	$C(a0),d2
0001526E 3628 0008                  		move.w	8(a0),d3
00015272 7000                       		moveq	#0,d0
00015274 1028 0017                  		move.b	$17(a0),d0
00015278 4880                       		ext.w	d0
0001527A D440                       		add.w	d0,d2
0001527C 1028 0016                  		move.b	$16(a0),d0
00015280 4880                       		ext.w	d0
00015282 9640                       		sub.w	d0,d3
00015284 0A43 000F                  		eori.w	#$F,d3
00015288 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001528C 367C FFF0                  		movea.w	#-$10,a3
00015290 3C3C 0800                  		move.w	#$800,d6
00015294 7A0D                       		moveq	#$D,d5
00015296 6100 0000                  		bsr.w	FindWall
0001529A 301F                       		move.w	(sp)+,d0
0001529C 6100 FE30                  		bsr.w	Sonic_Angle
000152A0 4A41                       		tst.w	d1
000152A2 6700                       		beq.s	locret_14934
000152A4 6A00                       		bpl.s	loc_14936
000152A6 0C41 FFF2                  		cmpi.w	#-$E,d1
000152AA 6D00 FDDC                  		blt.w	locret_1470A
000152AE 9368 0008                  		sub.w	d1,8(a0)
000152B2                            
000152B2                            locret_14934:
000152B2 4E75                       		rts	
000152B4                            ; ===========================================================================
000152B4                            
000152B4                            loc_14936:
000152B4 0C41 000E                  		cmpi.w	#$E,d1
000152B8 6E00                       		bgt.s	loc_14942
000152BA                            
000152BA                            loc_1493C:
000152BA 9368 0008                  		sub.w	d1,8(a0)
000152BE 4E75                       		rts	
000152C0                            ; ===========================================================================
000152C0                            
000152C0                            loc_14942:
000152C0 4A28 0038                  		tst.b	$38(a0)
000152C4 66F4                       		bne.s	loc_1493C
000152C6 08E8 0001 0022             		bset	#1,$22(a0)
000152CC 08A8 0005 0022             		bclr	#5,$22(a0)
000152D2 117C 0001 001D             		move.b	#1,$1D(a0)
000152D8 4E75                       		rts	
000152DA                            ; End of function Sonic_WalkVertL
000152DA                            
000152DA                            ; ---------------------------------------------------------------------------
000152DA                            ; Subroutine to	find which tile	the object is standing on
000152DA                            ; ---------------------------------------------------------------------------
000152DA                            
000152DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152DA                            
000152DA                            
000152DA                            Floor_ChkTile:				; XREF: FindFloor; et al
000152DA 3002                       		move.w	d2,d0
000152DC E248                       		lsr.w	#1,d0
000152DE 0240 0380                  		andi.w	#$380,d0
000152E2 3203                       		move.w	d3,d1
000152E4 E049                       		lsr.w	#8,d1
000152E6 0241 007F                  		andi.w	#$7F,d1
000152EA D041                       		add.w	d1,d0
000152EC 72FF                       		moveq	#-1,d1
000152EE 43F8 A400                  		lea	($FFFFA400).w,a1
000152F2 1231 0000                  		move.b	(a1,d0.w),d1
000152F6 6700                       		beq.s	loc_14996
000152F8 6B00                       		bmi.s	loc_1499A
000152FA 5301                       		subq.b	#1,d1
000152FC 4881                       		ext.w	d1
000152FE EE59                       		ror.w	#7,d1
00015300 3002                       		move.w	d2,d0
00015302 D040                       		add.w	d0,d0
00015304 0240 01E0                  		andi.w	#$1E0,d0
00015308 D240                       		add.w	d0,d1
0001530A 3003                       		move.w	d3,d0
0001530C E648                       		lsr.w	#3,d0
0001530E 0240 001E                  		andi.w	#$1E,d0
00015312 D240                       		add.w	d0,d1
00015314                            
00015314                            loc_14996:
00015314 2241                       		movea.l	d1,a1
00015316 4E75                       		rts	
00015318                            ; ===========================================================================
00015318                            
00015318                            loc_1499A:
00015318 0241 007F                  		andi.w	#$7F,d1
0001531C 0828 0006 0001             		btst	#6,1(a0)
00015322 6700                       		beq.s	loc_149B2
00015324 5241                       		addq.w	#1,d1
00015326 0C41 0029                  		cmpi.w	#$29,d1
0001532A 6600                       		bne.s	loc_149B2
0001532C 323C 0051                  		move.w	#$51,d1
00015330                            
00015330                            loc_149B2:
00015330 5301                       		subq.b	#1,d1
00015332 EE59                       		ror.w	#7,d1
00015334 3002                       		move.w	d2,d0
00015336 D040                       		add.w	d0,d0
00015338 0240 01E0                  		andi.w	#$1E0,d0
0001533C D240                       		add.w	d0,d1
0001533E 3003                       		move.w	d3,d0
00015340 E648                       		lsr.w	#3,d0
00015342 0240 001E                  		andi.w	#$1E,d0
00015346 D240                       		add.w	d0,d1
00015348 2241                       		movea.l	d1,a1
0001534A 4E75                       		rts	
0001534C                            ; End of function Floor_ChkTile
0001534C                            
0001534C                            
0001534C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001534C                            
0001534C                            
0001534C                            FindFloor:				; XREF: Sonic_AnglePos; et al
0001534C 618C                       		bsr.s	Floor_ChkTile
0001534E 3011                       		move.w	(a1),d0
00015350 3800                       		move.w	d0,d4
00015352 0240 07FF                  		andi.w	#$7FF,d0
00015356 6700                       		beq.s	loc_149DE
00015358 0B04                       		btst	d5,d4
0001535A 6600                       		bne.s	loc_149EC
0001535C                            
0001535C                            loc_149DE:
0001535C D44B                       		add.w	a3,d2
0001535E 6100 0000                  		bsr.w	FindFloor2
00015362 944B                       		sub.w	a3,d2
00015364 0641 0010                  		addi.w	#$10,d1
00015368 4E75                       		rts	
0001536A                            ; ===========================================================================
0001536A                            
0001536A                            loc_149EC:
0001536A 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
0001536E 1032 0000                  		move.b	(a2,d0.w),d0
00015372 0240 00FF                  		andi.w	#$FF,d0
00015376 67E4                       		beq.s	loc_149DE
00015378 45F9 0000 0000             		lea	(AngleMap).l,a2
0001537E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015382 E948                       		lsl.w	#4,d0
00015384 3203                       		move.w	d3,d1
00015386 0804 000B                  		btst	#$B,d4
0001538A 6700                       		beq.s	loc_14A12
0001538C 4641                       		not.w	d1
0001538E 4414                       		neg.b	(a4)
00015390                            
00015390                            loc_14A12:
00015390 0804 000C                  		btst	#$C,d4
00015394 6700                       		beq.s	loc_14A22
00015396 0614 0040                  		addi.b	#$40,(a4)
0001539A 4414                       		neg.b	(a4)
0001539C 0414 0040                  		subi.b	#$40,(a4)
000153A0                            
000153A0                            loc_14A22:
000153A0 0241 000F                  		andi.w	#$F,d1
000153A4 D240                       		add.w	d0,d1
000153A6 45F9 0000 0000             		lea	(CollArray1).l,a2
000153AC 1032 1000                  		move.b	(a2,d1.w),d0
000153B0 4880                       		ext.w	d0
000153B2 BD44                       		eor.w	d6,d4
000153B4 0804 000C                  		btst	#$C,d4
000153B8 6700                       		beq.s	loc_14A3E
000153BA 4440                       		neg.w	d0
000153BC                            
000153BC                            loc_14A3E:
000153BC 4A40                       		tst.w	d0
000153BE 679C                       		beq.s	loc_149DE
000153C0 6B00                       		bmi.s	loc_14A5A
000153C2 0C00 0010                  		cmpi.b	#$10,d0
000153C6 6700                       		beq.s	loc_14A66
000153C8 3202                       		move.w	d2,d1
000153CA 0241 000F                  		andi.w	#$F,d1
000153CE D041                       		add.w	d1,d0
000153D0 323C 000F                  		move.w	#$F,d1
000153D4 9240                       		sub.w	d0,d1
000153D6 4E75                       		rts	
000153D8                            ; ===========================================================================
000153D8                            
000153D8                            loc_14A5A:
000153D8 3202                       		move.w	d2,d1
000153DA 0241 000F                  		andi.w	#$F,d1
000153DE D041                       		add.w	d1,d0
000153E0 6A00 FF7A                  		bpl.w	loc_149DE
000153E4                            
000153E4                            loc_14A66:
000153E4 944B                       		sub.w	a3,d2
000153E6 6100 0000                  		bsr.w	FindFloor2
000153EA D44B                       		add.w	a3,d2
000153EC 0441 0010                  		subi.w	#$10,d1
000153F0 4E75                       		rts	
000153F2                            ; End of function FindFloor
000153F2                            
000153F2                            
000153F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153F2                            
000153F2                            
000153F2                            FindFloor2:				; XREF: FindFloor
000153F2 6100 FEE6                  		bsr.w	Floor_ChkTile
000153F6 3011                       		move.w	(a1),d0
000153F8 3800                       		move.w	d0,d4
000153FA 0240 07FF                  		andi.w	#$7FF,d0
000153FE 6700                       		beq.s	loc_14A86
00015400 0B04                       		btst	d5,d4
00015402 6600                       		bne.s	loc_14A94
00015404                            
00015404                            loc_14A86:
00015404 323C 000F                  		move.w	#$F,d1
00015408 3002                       		move.w	d2,d0
0001540A 0240 000F                  		andi.w	#$F,d0
0001540E 9240                       		sub.w	d0,d1
00015410 4E75                       		rts	
00015412                            ; ===========================================================================
00015412                            
00015412                            loc_14A94:
00015412 2478 F796                  		movea.l	($FFFFF796).w,a2
00015416 1032 0000                  		move.b	(a2,d0.w),d0
0001541A 0240 00FF                  		andi.w	#$FF,d0
0001541E 67E4                       		beq.s	loc_14A86
00015420 45F9 0000 0000             		lea	(AngleMap).l,a2
00015426 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001542A E948                       		lsl.w	#4,d0
0001542C 3203                       		move.w	d3,d1
0001542E 0804 000B                  		btst	#$B,d4
00015432 6700                       		beq.s	loc_14ABA
00015434 4641                       		not.w	d1
00015436 4414                       		neg.b	(a4)
00015438                            
00015438                            loc_14ABA:
00015438 0804 000C                  		btst	#$C,d4
0001543C 6700                       		beq.s	loc_14ACA
0001543E 0614 0040                  		addi.b	#$40,(a4)
00015442 4414                       		neg.b	(a4)
00015444 0414 0040                  		subi.b	#$40,(a4)
00015448                            
00015448                            loc_14ACA:
00015448 0241 000F                  		andi.w	#$F,d1
0001544C D240                       		add.w	d0,d1
0001544E 45F9 0000 0000             		lea	(CollArray1).l,a2
00015454 1032 1000                  		move.b	(a2,d1.w),d0
00015458 4880                       		ext.w	d0
0001545A BD44                       		eor.w	d6,d4
0001545C 0804 000C                  		btst	#$C,d4
00015460 6700                       		beq.s	loc_14AE6
00015462 4440                       		neg.w	d0
00015464                            
00015464                            loc_14AE6:
00015464 4A40                       		tst.w	d0
00015466 679C                       		beq.s	loc_14A86
00015468 6B00                       		bmi.s	loc_14AFC
0001546A 3202                       		move.w	d2,d1
0001546C 0241 000F                  		andi.w	#$F,d1
00015470 D041                       		add.w	d1,d0
00015472 323C 000F                  		move.w	#$F,d1
00015476 9240                       		sub.w	d0,d1
00015478 4E75                       		rts	
0001547A                            ; ===========================================================================
0001547A                            
0001547A                            loc_14AFC:
0001547A 3202                       		move.w	d2,d1
0001547C 0241 000F                  		andi.w	#$F,d1
00015480 D041                       		add.w	d1,d0
00015482 6A00 FF80                  		bpl.w	loc_14A86
00015486 4641                       		not.w	d1
00015488 4E75                       		rts	
0001548A                            ; End of function FindFloor2
0001548A                            
0001548A                            
0001548A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001548A                            
0001548A                            
0001548A                            FindWall:				; XREF: Sonic_WalkVertR; et al
0001548A 6100 FE4E                  		bsr.w	Floor_ChkTile
0001548E 3011                       		move.w	(a1),d0
00015490 3800                       		move.w	d0,d4
00015492 0240 07FF                  		andi.w	#$7FF,d0
00015496 6700                       		beq.s	loc_14B1E
00015498 0B04                       		btst	d5,d4
0001549A 6600                       		bne.s	loc_14B2C
0001549C                            
0001549C                            loc_14B1E:
0001549C D64B                       		add.w	a3,d3
0001549E 6100 0000                  		bsr.w	FindWall2
000154A2 964B                       		sub.w	a3,d3
000154A4 0641 0010                  		addi.w	#$10,d1
000154A8 4E75                       		rts	
000154AA                            ; ===========================================================================
000154AA                            
000154AA                            loc_14B2C:
000154AA 2478 F796                  		movea.l	($FFFFF796).w,a2
000154AE 1032 0000                  		move.b	(a2,d0.w),d0
000154B2 0240 00FF                  		andi.w	#$FF,d0
000154B6 67E4                       		beq.s	loc_14B1E
000154B8 45F9 0000 0000             		lea	(AngleMap).l,a2
000154BE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000154C2 E948                       		lsl.w	#4,d0
000154C4 3202                       		move.w	d2,d1
000154C6 0804 000C                  		btst	#$C,d4
000154CA 6700                       		beq.s	loc_14B5A
000154CC 4641                       		not.w	d1
000154CE 0614 0040                  		addi.b	#$40,(a4)
000154D2 4414                       		neg.b	(a4)
000154D4 0414 0040                  		subi.b	#$40,(a4)
000154D8                            
000154D8                            loc_14B5A:
000154D8 0804 000B                  		btst	#$B,d4
000154DC 6700                       		beq.s	loc_14B62
000154DE 4414                       		neg.b	(a4)
000154E0                            
000154E0                            loc_14B62:
000154E0 0241 000F                  		andi.w	#$F,d1
000154E4 D240                       		add.w	d0,d1
000154E6 45F9 0000 0000             		lea	(CollArray2).l,a2
000154EC 1032 1000                  		move.b	(a2,d1.w),d0
000154F0 4880                       		ext.w	d0
000154F2 BD44                       		eor.w	d6,d4
000154F4 0804 000B                  		btst	#$B,d4
000154F8 6700                       		beq.s	loc_14B7E
000154FA 4440                       		neg.w	d0
000154FC                            
000154FC                            loc_14B7E:
000154FC 4A40                       		tst.w	d0
000154FE 679C                       		beq.s	loc_14B1E
00015500 6B00                       		bmi.s	loc_14B9A
00015502 0C00 0010                  		cmpi.b	#$10,d0
00015506 6700                       		beq.s	loc_14BA6
00015508 3203                       		move.w	d3,d1
0001550A 0241 000F                  		andi.w	#$F,d1
0001550E D041                       		add.w	d1,d0
00015510 323C 000F                  		move.w	#$F,d1
00015514 9240                       		sub.w	d0,d1
00015516 4E75                       		rts	
00015518                            ; ===========================================================================
00015518                            
00015518                            loc_14B9A:
00015518 3203                       		move.w	d3,d1
0001551A 0241 000F                  		andi.w	#$F,d1
0001551E D041                       		add.w	d1,d0
00015520 6A00 FF7A                  		bpl.w	loc_14B1E
00015524                            
00015524                            loc_14BA6:
00015524 964B                       		sub.w	a3,d3
00015526 6100 0000                  		bsr.w	FindWall2
0001552A D64B                       		add.w	a3,d3
0001552C 0441 0010                  		subi.w	#$10,d1
00015530 4E75                       		rts	
00015532                            ; End of function FindWall
00015532                            
00015532                            
00015532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015532                            
00015532                            
00015532                            FindWall2:				; XREF: FindWall
00015532 6100 FDA6                  		bsr.w	Floor_ChkTile
00015536 3011                       		move.w	(a1),d0
00015538 3800                       		move.w	d0,d4
0001553A 0240 07FF                  		andi.w	#$7FF,d0
0001553E 6700                       		beq.s	loc_14BC6
00015540 0B04                       		btst	d5,d4
00015542 6600                       		bne.s	loc_14BD4
00015544                            
00015544                            loc_14BC6:
00015544 323C 000F                  		move.w	#$F,d1
00015548 3003                       		move.w	d3,d0
0001554A 0240 000F                  		andi.w	#$F,d0
0001554E 9240                       		sub.w	d0,d1
00015550 4E75                       		rts	
00015552                            ; ===========================================================================
00015552                            
00015552                            loc_14BD4:
00015552 2478 F796                  		movea.l	($FFFFF796).w,a2
00015556 1032 0000                  		move.b	(a2,d0.w),d0
0001555A 0240 00FF                  		andi.w	#$FF,d0
0001555E 67E4                       		beq.s	loc_14BC6
00015560 45F9 0000 0000             		lea	(AngleMap).l,a2
00015566 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001556A E948                       		lsl.w	#4,d0
0001556C 3202                       		move.w	d2,d1
0001556E 0804 000C                  		btst	#$C,d4
00015572 6700                       		beq.s	loc_14C02
00015574 4641                       		not.w	d1
00015576 0614 0040                  		addi.b	#$40,(a4)
0001557A 4414                       		neg.b	(a4)
0001557C 0414 0040                  		subi.b	#$40,(a4)
00015580                            
00015580                            loc_14C02:
00015580 0804 000B                  		btst	#$B,d4
00015584 6700                       		beq.s	loc_14C0A
00015586 4414                       		neg.b	(a4)
00015588                            
00015588                            loc_14C0A:
00015588 0241 000F                  		andi.w	#$F,d1
0001558C D240                       		add.w	d0,d1
0001558E 45F9 0000 0000             		lea	(CollArray2).l,a2
00015594 1032 1000                  		move.b	(a2,d1.w),d0
00015598 4880                       		ext.w	d0
0001559A BD44                       		eor.w	d6,d4
0001559C 0804 000B                  		btst	#$B,d4
000155A0 6700                       		beq.s	loc_14C26
000155A2 4440                       		neg.w	d0
000155A4                            
000155A4                            loc_14C26:
000155A4 4A40                       		tst.w	d0
000155A6 679C                       		beq.s	loc_14BC6
000155A8 6B00                       		bmi.s	loc_14C3C
000155AA 3203                       		move.w	d3,d1
000155AC 0241 000F                  		andi.w	#$F,d1
000155B0 D041                       		add.w	d1,d0
000155B2 323C 000F                  		move.w	#$F,d1
000155B6 9240                       		sub.w	d0,d1
000155B8 4E75                       		rts	
000155BA                            ; ===========================================================================
000155BA                            
000155BA                            loc_14C3C:
000155BA 3203                       		move.w	d3,d1
000155BC 0241 000F                  		andi.w	#$F,d1
000155C0 D041                       		add.w	d1,d0
000155C2 6A00 FF80                  		bpl.w	loc_14BC6
000155C6 4641                       		not.w	d1
000155C8 4E75                       		rts	
000155CA                            ; End of function FindWall2
000155CA                            
000155CA                            ; ---------------------------------------------------------------------------
000155CA                            ; Unused floor/wall subroutine - logs something	to do with collision
000155CA                            ; ---------------------------------------------------------------------------
000155CA                            
000155CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155CA                            
000155CA                            
000155CA                            FloorLog_Unk:				; XREF: Level
000155CA 4E75                       		rts	
000155CC                            
000155CC 43F9 0000 0000             		lea	(CollArray1).l,a1
000155D2 45F9 0000 0000             		lea	(CollArray1).l,a2
000155D8 363C 00FF                  		move.w	#$FF,d3
000155DC                            
000155DC                            loc_14C5E:
000155DC 7A10                       		moveq	#$10,d5
000155DE 343C 000F                  		move.w	#$F,d2
000155E2                            
000155E2                            loc_14C64:
000155E2 7800                       		moveq	#0,d4
000155E4 323C 000F                  		move.w	#$F,d1
000155E8                            
000155E8                            loc_14C6A:
000155E8 3019                       		move.w	(a1)+,d0
000155EA EAA8                       		lsr.l	d5,d0
000155EC D944                       		addx.w	d4,d4
000155EE 51C9 FFF8                  		dbf	d1,loc_14C6A
000155F2                            
000155F2 34C4                       		move.w	d4,(a2)+
000155F4 92FC 0020                  		suba.w	#$20,a1
000155F8 5345                       		subq.w	#1,d5
000155FA 51CA FFE6                  		dbf	d2,loc_14C64
000155FE                            
000155FE D2FC 0020                  		adda.w	#$20,a1
00015602 51CB FFD8                  		dbf	d3,loc_14C5E
00015606                            
00015606 43F9 0000 0000             		lea	(CollArray1).l,a1
0001560C 45F9 0000 0000             		lea	(CollArray2).l,a2
00015612 6100                       		bsr.s	FloorLog_Unk2
00015614 43F9 0000 0000             		lea	(CollArray1).l,a1
0001561A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015620                            
00015620                            ; End of function FloorLog_Unk
00015620                            
00015620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015620                            
00015620                            
00015620                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015620 363C 0FFF                  		move.w	#$FFF,d3
00015624                            
00015624                            loc_14CA6:
00015624 7400                       		moveq	#0,d2
00015626 323C 000F                  		move.w	#$F,d1
0001562A 3019                       		move.w	(a1)+,d0
0001562C 6700                       		beq.s	loc_14CD4
0001562E 6B00                       		bmi.s	loc_14CBE
00015630                            
00015630                            loc_14CB2:
00015630 E248                       		lsr.w	#1,d0
00015632 6400                       		bcc.s	loc_14CB8
00015634 5202                       		addq.b	#1,d2
00015636                            
00015636                            loc_14CB8:
00015636 51C9 FFF8                  		dbf	d1,loc_14CB2
0001563A                            
0001563A 6000                       		bra.s	loc_14CD6
0001563C                            ; ===========================================================================
0001563C                            
0001563C                            loc_14CBE:
0001563C 0C40 FFFF                  		cmpi.w	#-1,d0
00015640 6700                       		beq.s	loc_14CD0
00015642                            
00015642                            loc_14CC4:
00015642 E348                       		lsl.w	#1,d0
00015644 6400                       		bcc.s	loc_14CCA
00015646 5302                       		subq.b	#1,d2
00015648                            
00015648                            loc_14CCA:
00015648 51C9 FFF8                  		dbf	d1,loc_14CC4
0001564C                            
0001564C 6000                       		bra.s	loc_14CD6
0001564E                            ; ===========================================================================
0001564E                            
0001564E                            loc_14CD0:
0001564E 303C 0010                  		move.w	#$10,d0
00015652                            
00015652                            loc_14CD4:
00015652 3400                       		move.w	d0,d2
00015654                            
00015654                            loc_14CD6:
00015654 14C2                       		move.b	d2,(a2)+
00015656 51CB FFCC                  		dbf	d3,loc_14CA6
0001565A                            
0001565A 4E75                       		rts	
0001565C                            
0001565C                            ; End of function FloorLog_Unk2
0001565C                            
0001565C                            
0001565C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001565C                            
0001565C                            
0001565C                            Sonic_WalkSpeed:			; XREF: Sonic_Move
0001565C 2628 0008                  		move.l	8(a0),d3
00015660 2428 000C                  		move.l	$C(a0),d2
00015664 3228 0010                  		move.w	$10(a0),d1
00015668 48C1                       		ext.l	d1
0001566A E181                       		asl.l	#8,d1
0001566C D681                       		add.l	d1,d3
0001566E 3228 0012                  		move.w	$12(a0),d1
00015672 48C1                       		ext.l	d1
00015674 E181                       		asl.l	#8,d1
00015676 D481                       		add.l	d1,d2
00015678 4842                       		swap	d2
0001567A 4843                       		swap	d3
0001567C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015680 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015684 1200                       		move.b	d0,d1
00015686 0600 0020                  		addi.b	#$20,d0
0001568A 6A00                       		bpl.s	loc_14D1A
0001568C 1001                       		move.b	d1,d0
0001568E 6A00                       		bpl.s	loc_14D14
00015690 5300                       		subq.b	#1,d0
00015692                            
00015692                            loc_14D14:
00015692 0600 0020                  		addi.b	#$20,d0
00015696 6000                       		bra.s	loc_14D24
00015698                            ; ===========================================================================
00015698                            
00015698                            loc_14D1A:
00015698 1001                       		move.b	d1,d0
0001569A 6A00                       		bpl.s	loc_14D20
0001569C 5200                       		addq.b	#1,d0
0001569E                            
0001569E                            loc_14D20:
0001569E 0600 001F                  		addi.b	#$1F,d0
000156A2                            
000156A2                            loc_14D24:
000156A2 0200 00C0                  		andi.b	#$C0,d0
000156A6 6700 0000                  		beq.w	loc_14DF0
000156AA 0C00 0080                  		cmpi.b	#$80,d0
000156AE 6700 0000                  		beq.w	loc_14F7C
000156B2 0201 0038                  		andi.b	#$38,d1
000156B6 6600                       		bne.s	loc_14D3C
000156B8 5042                       		addq.w	#8,d2
000156BA                            
000156BA                            loc_14D3C:
000156BA 0C00 0040                  		cmpi.b	#$40,d0
000156BE 6700 0000                  		beq.w	loc_1504A
000156C2 6000 0000                  		bra.w	loc_14EBC
000156C6                            
000156C6                            ; End of function Sonic_WalkSpeed
000156C6                            
000156C6                            
000156C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156C6                            
000156C6                            
000156C6                            sub_14D48:				; XREF: Sonic_Jump
000156C6 11C0 F768                  		move.b	d0,($FFFFF768).w
000156CA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000156CE 0600 0020                  		addi.b	#$20,d0
000156D2 0200 00C0                  		andi.b	#$C0,d0
000156D6 0C00 0040                  		cmpi.b	#$40,d0
000156DA 6700 0000                  		beq.w	loc_14FD6
000156DE 0C00 0080                  		cmpi.b	#$80,d0
000156E2 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000156E6 0C00 00C0                  		cmpi.b	#$C0,d0
000156EA 6700 0000                  		beq.w	sub_14E50
000156EE                            
000156EE                            ; End of function sub_14D48
000156EE                            
000156EE                            ; ---------------------------------------------------------------------------
000156EE                            ; Subroutine to	make Sonic land	on the floor after jumping
000156EE                            ; ---------------------------------------------------------------------------
000156EE                            
000156EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156EE                            
000156EE                            
000156EE                            Sonic_HitFloor:				; XREF: Sonic_Floor
000156EE 3428 000C                  		move.w	$C(a0),d2
000156F2 3628 0008                  		move.w	8(a0),d3
000156F6 7000                       		moveq	#0,d0
000156F8 1028 0016                  		move.b	$16(a0),d0
000156FC 4880                       		ext.w	d0
000156FE D440                       		add.w	d0,d2
00015700 1028 0017                  		move.b	$17(a0),d0
00015704 4880                       		ext.w	d0
00015706 D640                       		add.w	d0,d3
00015708 49F8 F768                  		lea	($FFFFF768).w,a4
0001570C 367C 0010                  		movea.w	#$10,a3
00015710 3C3C 0000                  		move.w	#0,d6
00015714 7A0D                       		moveq	#$D,d5
00015716 6100 FC34                  		bsr.w	FindFloor
0001571A 3F01                       		move.w	d1,-(sp)
0001571C 3428 000C                  		move.w	$C(a0),d2
00015720 3628 0008                  		move.w	8(a0),d3
00015724 7000                       		moveq	#0,d0
00015726 1028 0016                  		move.b	$16(a0),d0
0001572A 4880                       		ext.w	d0
0001572C D440                       		add.w	d0,d2
0001572E 1028 0017                  		move.b	$17(a0),d0
00015732 4880                       		ext.w	d0
00015734 9640                       		sub.w	d0,d3
00015736 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001573A 367C 0010                  		movea.w	#$10,a3
0001573E 3C3C 0000                  		move.w	#0,d6
00015742 7A0D                       		moveq	#$D,d5
00015744 6100 FC06                  		bsr.w	FindFloor
00015748 301F                       		move.w	(sp)+,d0
0001574A 143C 0000                  		move.b	#0,d2
0001574E                            
0001574E                            loc_14DD0:
0001574E 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015752 B240                       		cmp.w	d0,d1
00015754 6F00                       		ble.s	loc_14DDE
00015756 1638 F768                  		move.b	($FFFFF768).w,d3
0001575A C141                       		exg	d0,d1
0001575C                            
0001575C                            loc_14DDE:
0001575C 0803 0000                  		btst	#0,d3
00015760 6700                       		beq.s	locret_14DE6
00015762 1602                       		move.b	d2,d3
00015764                            
00015764                            locret_14DE6:
00015764 4E75                       		rts	
00015766                            
00015766                            ; End of function Sonic_HitFloor
00015766                            
00015766                            ; ===========================================================================
00015766 3428 000C                  		move.w	$C(a0),d2
0001576A 3628 0008                  		move.w	8(a0),d3
0001576E                            
0001576E                            loc_14DF0:				; XREF: Sonic_WalkSpeed
0001576E 0642 000A                  		addi.w	#$A,d2
00015772 49F8 F768                  		lea	($FFFFF768).w,a4
00015776 367C 0010                  		movea.w	#$10,a3
0001577A 3C3C 0000                  		move.w	#0,d6
0001577E 7A0E                       		moveq	#$E,d5
00015780 6100 FBCA                  		bsr.w	FindFloor
00015784 143C 0000                  		move.b	#0,d2
00015788                            
00015788                            loc_14E0A:				; XREF: sub_14EB4
00015788 1638 F768                  		move.b	($FFFFF768).w,d3
0001578C 0803 0000                  		btst	#0,d3
00015790 6700                       		beq.s	locret_14E16
00015792 1602                       		move.b	d2,d3
00015794                            
00015794                            locret_14E16:
00015794 4E75                       		rts	
00015796                            
00015796                            ; ---------------------------------------------------------------------------
00015796                            ; Subroutine allowing objects to interact with the floor
00015796                            ; ---------------------------------------------------------------------------
00015796                            
00015796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015796                            
00015796                            
00015796                            ObjHitFloor:
00015796 3628 0008                  		move.w	8(a0),d3
0001579A                            
0001579A                            ; End of function ObjHitFloor
0001579A                            
0001579A                            
0001579A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001579A                            
0001579A                            
0001579A                            ObjHitFloor2:
0001579A 3428 000C                  		move.w	$C(a0),d2
0001579E 7000                       		moveq	#0,d0
000157A0 1028 0016                  		move.b	$16(a0),d0
000157A4 4880                       		ext.w	d0
000157A6 D440                       		add.w	d0,d2
000157A8 49F8 F768                  		lea	($FFFFF768).w,a4
000157AC 18BC 0000                  		move.b	#0,(a4)
000157B0 367C 0010                  		movea.w	#$10,a3
000157B4 3C3C 0000                  		move.w	#0,d6
000157B8 7A0D                       		moveq	#$D,d5
000157BA 6100 FB90                  		bsr.w	FindFloor
000157BE 1638 F768                  		move.b	($FFFFF768).w,d3
000157C2 0803 0000                  		btst	#0,d3
000157C6 6700                       		beq.s	locret_14E4E
000157C8 163C 0000                  		move.b	#0,d3
000157CC                            
000157CC                            locret_14E4E:
000157CC 4E75                       		rts	
000157CE                            ; End of function ObjHitFloor2
000157CE                            
000157CE                            
000157CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157CE                            
000157CE                            
000157CE                            sub_14E50:				; XREF: sub_14D48
000157CE 3428 000C                  		move.w	$C(a0),d2
000157D2 3628 0008                  		move.w	8(a0),d3
000157D6 7000                       		moveq	#0,d0
000157D8 1028 0017                  		move.b	$17(a0),d0
000157DC 4880                       		ext.w	d0
000157DE 9440                       		sub.w	d0,d2
000157E0 1028 0016                  		move.b	$16(a0),d0
000157E4 4880                       		ext.w	d0
000157E6 D640                       		add.w	d0,d3
000157E8 49F8 F768                  		lea	($FFFFF768).w,a4
000157EC 367C 0010                  		movea.w	#$10,a3
000157F0 3C3C 0000                  		move.w	#0,d6
000157F4 7A0E                       		moveq	#$E,d5
000157F6 6100 FC92                  		bsr.w	FindWall
000157FA 3F01                       		move.w	d1,-(sp)
000157FC 3428 000C                  		move.w	$C(a0),d2
00015800 3628 0008                  		move.w	8(a0),d3
00015804 7000                       		moveq	#0,d0
00015806 1028 0017                  		move.b	$17(a0),d0
0001580A 4880                       		ext.w	d0
0001580C D440                       		add.w	d0,d2
0001580E 1028 0016                  		move.b	$16(a0),d0
00015812 4880                       		ext.w	d0
00015814 D640                       		add.w	d0,d3
00015816 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001581A 367C 0010                  		movea.w	#$10,a3
0001581E 3C3C 0000                  		move.w	#0,d6
00015822 7A0E                       		moveq	#$E,d5
00015824 6100 FC64                  		bsr.w	FindWall
00015828 301F                       		move.w	(sp)+,d0
0001582A 143C 00C0                  		move.b	#-$40,d2
0001582E 6000 FF1E                  		bra.w	loc_14DD0
00015832                            
00015832                            ; End of function sub_14E50
00015832                            
00015832                            
00015832                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015832                            
00015832                            
00015832                            sub_14EB4:				; XREF: Sonic_Floor
00015832 3428 000C                  		move.w	$C(a0),d2
00015836 3628 0008                  		move.w	8(a0),d3
0001583A                            
0001583A                            loc_14EBC:
0001583A 0643 000A                  		addi.w	#$A,d3
0001583E 49F8 F768                  		lea	($FFFFF768).w,a4
00015842 367C 0010                  		movea.w	#$10,a3
00015846 3C3C 0000                  		move.w	#0,d6
0001584A 7A0E                       		moveq	#$E,d5
0001584C 6100 FC3C                  		bsr.w	FindWall
00015850 143C 00C0                  		move.b	#-$40,d2
00015854 6000 FF32                  		bra.w	loc_14E0A
00015858                            
00015858                            ; End of function sub_14EB4
00015858                            
00015858                            ; ---------------------------------------------------------------------------
00015858                            ; Subroutine to	detect when an object hits a wall to its right
00015858                            ; ---------------------------------------------------------------------------
00015858                            
00015858                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015858                            
00015858                            
00015858                            ObjHitWallRight:
00015858 D668 0008                  		add.w	8(a0),d3
0001585C 3428 000C                  		move.w	$C(a0),d2
00015860 49F8 F768                  		lea	($FFFFF768).w,a4
00015864 18BC 0000                  		move.b	#0,(a4)
00015868 367C 0010                  		movea.w	#$10,a3
0001586C 3C3C 0000                  		move.w	#0,d6
00015870 7A0E                       		moveq	#$E,d5
00015872 6100 FC16                  		bsr.w	FindWall
00015876 1638 F768                  		move.b	($FFFFF768).w,d3
0001587A 0803 0000                  		btst	#0,d3
0001587E 6700                       		beq.s	locret_14F06
00015880 163C 00C0                  		move.b	#-$40,d3
00015884                            
00015884                            locret_14F06:
00015884 4E75                       		rts	
00015886                            
00015886                            ; End of function ObjHitWallRight
00015886                            
00015886                            ; ---------------------------------------------------------------------------
00015886                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015886                            ; touches them
00015886                            ; ---------------------------------------------------------------------------
00015886                            
00015886                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015886                            
00015886                            
00015886                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015886 3428 000C                  		move.w	$C(a0),d2
0001588A 3628 0008                  		move.w	8(a0),d3
0001588E 7000                       		moveq	#0,d0
00015890 1028 0016                  		move.b	$16(a0),d0
00015894 4880                       		ext.w	d0
00015896 9440                       		sub.w	d0,d2
00015898 0A42 000F                  		eori.w	#$F,d2
0001589C 1028 0017                  		move.b	$17(a0),d0
000158A0 4880                       		ext.w	d0
000158A2 D640                       		add.w	d0,d3
000158A4 49F8 F768                  		lea	($FFFFF768).w,a4
000158A8 367C FFF0                  		movea.w	#-$10,a3
000158AC 3C3C 1000                  		move.w	#$1000,d6
000158B0 7A0E                       		moveq	#$E,d5
000158B2 6100 FA98                  		bsr.w	FindFloor
000158B6 3F01                       		move.w	d1,-(sp)
000158B8 3428 000C                  		move.w	$C(a0),d2
000158BC 3628 0008                  		move.w	8(a0),d3
000158C0 7000                       		moveq	#0,d0
000158C2 1028 0016                  		move.b	$16(a0),d0
000158C6 4880                       		ext.w	d0
000158C8 9440                       		sub.w	d0,d2
000158CA 0A42 000F                  		eori.w	#$F,d2
000158CE 1028 0017                  		move.b	$17(a0),d0
000158D2 4880                       		ext.w	d0
000158D4 9640                       		sub.w	d0,d3
000158D6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158DA 367C FFF0                  		movea.w	#-$10,a3
000158DE 3C3C 1000                  		move.w	#$1000,d6
000158E2 7A0E                       		moveq	#$E,d5
000158E4 6100 FA66                  		bsr.w	FindFloor
000158E8 301F                       		move.w	(sp)+,d0
000158EA 143C 0080                  		move.b	#-$80,d2
000158EE 6000 FE5E                  		bra.w	loc_14DD0
000158F2                            ; End of function Sonic_DontRunOnWalls
000158F2                            
000158F2                            ; ===========================================================================
000158F2 3428 000C                  		move.w	$C(a0),d2
000158F6 3628 0008                  		move.w	8(a0),d3
000158FA                            
000158FA                            loc_14F7C:
000158FA 0442 000A                  		subi.w	#$A,d2
000158FE 0A42 000F                  		eori.w	#$F,d2
00015902 49F8 F768                  		lea	($FFFFF768).w,a4
00015906 367C FFF0                  		movea.w	#-$10,a3
0001590A 3C3C 1000                  		move.w	#$1000,d6
0001590E 7A0E                       		moveq	#$E,d5
00015910 6100 FA3A                  		bsr.w	FindFloor
00015914 143C 0080                  		move.b	#-$80,d2
00015918 6000 FE6E                  		bra.w	loc_14E0A
0001591C                            
0001591C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001591C                            
0001591C                            
0001591C                            ObjHitCeiling:
0001591C 3428 000C                  		move.w	$C(a0),d2
00015920 3628 0008                  		move.w	8(a0),d3
00015924 7000                       		moveq	#0,d0
00015926 1028 0016                  		move.b	$16(a0),d0
0001592A 4880                       		ext.w	d0
0001592C 9440                       		sub.w	d0,d2
0001592E 0A42 000F                  		eori.w	#$F,d2
00015932 49F8 F768                  		lea	($FFFFF768).w,a4
00015936 367C FFF0                  		movea.w	#-$10,a3
0001593A 3C3C 1000                  		move.w	#$1000,d6
0001593E 7A0E                       		moveq	#$E,d5
00015940 6100 FA0A                  		bsr.w	FindFloor
00015944 1638 F768                  		move.b	($FFFFF768).w,d3
00015948 0803 0000                  		btst	#0,d3
0001594C 6700                       		beq.s	locret_14FD4
0001594E 163C 0080                  		move.b	#-$80,d3
00015952                            
00015952                            locret_14FD4:
00015952 4E75                       		rts	
00015954                            ; End of function ObjHitCeiling
00015954                            
00015954                            ; ===========================================================================
00015954                            
00015954                            loc_14FD6:				; XREF: sub_14D48
00015954 3428 000C                  		move.w	$C(a0),d2
00015958 3628 0008                  		move.w	8(a0),d3
0001595C 7000                       		moveq	#0,d0
0001595E 1028 0017                  		move.b	$17(a0),d0
00015962 4880                       		ext.w	d0
00015964 9440                       		sub.w	d0,d2
00015966 1028 0016                  		move.b	$16(a0),d0
0001596A 4880                       		ext.w	d0
0001596C 9640                       		sub.w	d0,d3
0001596E 0A43 000F                  		eori.w	#$F,d3
00015972 49F8 F768                  		lea	($FFFFF768).w,a4
00015976 367C FFF0                  		movea.w	#-$10,a3
0001597A 3C3C 0800                  		move.w	#$800,d6
0001597E 7A0E                       		moveq	#$E,d5
00015980 6100 FB08                  		bsr.w	FindWall
00015984 3F01                       		move.w	d1,-(sp)
00015986 3428 000C                  		move.w	$C(a0),d2
0001598A 3628 0008                  		move.w	8(a0),d3
0001598E 7000                       		moveq	#0,d0
00015990 1028 0017                  		move.b	$17(a0),d0
00015994 4880                       		ext.w	d0
00015996 D440                       		add.w	d0,d2
00015998 1028 0016                  		move.b	$16(a0),d0
0001599C 4880                       		ext.w	d0
0001599E 9640                       		sub.w	d0,d3
000159A0 0A43 000F                  		eori.w	#$F,d3
000159A4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000159A8 367C FFF0                  		movea.w	#-$10,a3
000159AC 3C3C 0800                  		move.w	#$800,d6
000159B0 7A0E                       		moveq	#$E,d5
000159B2 6100 FAD6                  		bsr.w	FindWall
000159B6 301F                       		move.w	(sp)+,d0
000159B8 143C 0040                  		move.b	#$40,d2
000159BC 6000 FD90                  		bra.w	loc_14DD0
000159C0                            
000159C0                            ; ---------------------------------------------------------------------------
000159C0                            ; Subroutine to	stop Sonic when	he jumps at a wall
000159C0                            ; ---------------------------------------------------------------------------
000159C0                            
000159C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C0                            
000159C0                            
000159C0                            Sonic_HitWall:				; XREF: Sonic_Floor
000159C0 3428 000C                  		move.w	$C(a0),d2
000159C4 3628 0008                  		move.w	8(a0),d3
000159C8                            
000159C8                            loc_1504A:
000159C8 0443 000A                  		subi.w	#$A,d3
000159CC 0A43 000F                  		eori.w	#$F,d3
000159D0 49F8 F768                  		lea	($FFFFF768).w,a4
000159D4 367C FFF0                  		movea.w	#-$10,a3
000159D8 3C3C 0800                  		move.w	#$800,d6
000159DC 7A0E                       		moveq	#$E,d5
000159DE 6100 FAAA                  		bsr.w	FindWall
000159E2 143C 0040                  		move.b	#$40,d2
000159E6 6000 FDA0                  		bra.w	loc_14E0A
000159EA                            ; End of function Sonic_HitWall
000159EA                            
000159EA                            ; ---------------------------------------------------------------------------
000159EA                            ; Subroutine to	detect when an object hits a wall to its left
000159EA                            ; ---------------------------------------------------------------------------
000159EA                            
000159EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159EA                            
000159EA                            
000159EA                            ObjHitWallLeft:
000159EA D668 0008                  		add.w	8(a0),d3
000159EE 3428 000C                  		move.w	$C(a0),d2
000159F2 49F8 F768                  		lea	($FFFFF768).w,a4
000159F6 18BC 0000                  		move.b	#0,(a4)
000159FA 367C FFF0                  		movea.w	#-$10,a3
000159FE 3C3C 0800                  		move.w	#$800,d6
00015A02 7A0E                       		moveq	#$E,d5
00015A04 6100 FA84                  		bsr.w	FindWall
00015A08 1638 F768                  		move.b	($FFFFF768).w,d3
00015A0C 0803 0000                  		btst	#0,d3
00015A10 6700                       		beq.s	locret_15098
00015A12 163C 0040                  		move.b	#$40,d3
00015A16                            
00015A16                            locret_15098:
00015A16 4E75                       		rts	
00015A18                            ; End of function ObjHitWallLeft
00015A18                            
00015A18                            ; ===========================================================================
00015A18                            ; ---------------------------------------------------------------------------
00015A18                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015A18                            ; ---------------------------------------------------------------------------
00015A18                            
00015A18                            Obj66:					; XREF: Obj_Index
00015A18 7000                       		moveq	#0,d0
00015A1A 1028 0024                  		move.b	$24(a0),d0
00015A1E 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015A22 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015A26                            ; ===========================================================================
00015A26 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015A28 0000                       		dc.w Obj66_Action-Obj66_Index
00015A2A 0000                       		dc.w Obj66_Display-Obj66_Index
00015A2C 0000                       		dc.w Obj66_Release-Obj66_Index
00015A2E                            ; ===========================================================================
00015A2E                            
00015A2E                            Obj66_Main:				; XREF: Obj66_Index
00015A2E 5428 0024                  		addq.b	#2,$24(a0)
00015A32 323C 0001                  		move.w	#1,d1
00015A36 2248                       		movea.l	a0,a1
00015A38 6000                       		bra.s	Obj66_MakeItem
00015A3A                            ; ===========================================================================
00015A3A                            
00015A3A                            Obj66_Loop:
00015A3A 6100 88CE                  		bsr.w	SingleObjLoad
00015A3E 6600                       		bne.s	loc_150FE
00015A40 12BC 0066                  		move.b	#$66,0(a1)
00015A44 5829 0024                  		addq.b	#4,$24(a1)
00015A48 3368 0008 0008             		move.w	8(a0),8(a1)
00015A4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015A54 137C 0003 0018             		move.b	#3,$18(a1)
00015A5A 137C 0010 001A             		move.b	#$10,$1A(a1)
00015A60                            
00015A60                            Obj66_MakeItem:				; XREF: Obj66_Main
00015A60 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015A68 337C 4348 0002             		move.w	#$4348,2(a1)
00015A6E 0029 0004 0001             		ori.b	#4,1(a1)
00015A74 137C 0038 0019             		move.b	#$38,$19(a1)
00015A7A                            
00015A7A                            loc_150FE:
00015A7A 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015A7E                            
00015A7E 117C 0030 0019             		move.b	#$30,$19(a0)
00015A84 117C 0004 0018             		move.b	#4,$18(a0)
00015A8A 317C 003C 0030             		move.w	#$3C,$30(a0)
00015A90 117C 0001 0034             		move.b	#1,$34(a0)
00015A96 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015A9C                            
00015A9C                            Obj66_Action:				; XREF: Obj66_Index
00015A9C 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015AA0 4A28 0001                  		tst.b	1(a0)
00015AA4 6A00 0000                  		bpl.w	Obj66_Display
00015AA8 323C 0030                  		move.w	#$30,d1
00015AAC 3401                       		move.w	d1,d2
00015AAE 3602                       		move.w	d2,d3
00015AB0 5243                       		addq.w	#1,d3
00015AB2 3828 0008                  		move.w	8(a0),d4
00015AB6 6100 A79C                  		bsr.w	SolidObject
00015ABA 0828 0005 0022             		btst	#5,$22(a0)
00015AC0 6700 0000                  		beq.w	Obj66_Display
00015AC4 43F8 D000                  		lea	($FFFFD000).w,a1
00015AC8 720E                       		moveq	#$E,d1
00015ACA 3029 0008                  		move.w	8(a1),d0
00015ACE B068 0008                  		cmp.w	8(a0),d0
00015AD2 6500                       		bcs.s	Obj66_GrabSonic
00015AD4 7207                       		moveq	#7,d1
00015AD6                            
00015AD6                            Obj66_GrabSonic:
00015AD6 B228 001A                  		cmp.b	$1A(a0),d1
00015ADA 6600                       		bne.s	Obj66_Display
00015ADC 1141 0032                  		move.b	d1,$32(a0)
00015AE0 5828 0024                  		addq.b	#4,$24(a0)
00015AE4 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015AEA 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015AF0 337C 0800 0014             		move.w	#$800,$14(a1)
00015AF6 337C 0000 0010             		move.w	#0,$10(a1)
00015AFC 337C 0000 0012             		move.w	#0,$12(a1)
00015B02 08A8 0005 0022             		bclr	#5,$22(a0)
00015B08 08A9 0005 0022             		bclr	#5,$22(a1)
00015B0E 08E9 0001 0022             		bset	#1,$22(a1)
00015B14 3429 0008                  		move.w	8(a1),d2
00015B18 3629 000C                  		move.w	$C(a1),d3
00015B1C 6100 0000                  		bsr.w	Obj66_ChgPos
00015B20 D569 0008                  		add.w	d2,8(a1)
00015B24 D769 000C                  		add.w	d3,$C(a1)
00015B28 E0E9 0008                  		asr	8(a1)
00015B2C E0E9 000C                  		asr	$C(a1)
00015B30                            
00015B30                            Obj66_Display:				; XREF: Obj66_Index
00015B30 6000 A3FA                  		bra.w	MarkObjGone
00015B34                            ; ===========================================================================
00015B34                            
00015B34                            Obj66_Release:				; XREF: Obj66_Index
00015B34 1028 001A                  		move.b	$1A(a0),d0
00015B38 0C00 0004                  		cmpi.b	#4,d0
00015B3C 6700                       		beq.s	loc_151C8
00015B3E 0C00 0007                  		cmpi.b	#7,d0
00015B42 6600                       		bne.s	loc_151F8
00015B44                            
00015B44                            loc_151C8:
00015B44 B028 0032                  		cmp.b	$32(a0),d0
00015B48 6700                       		beq.s	loc_151F8
00015B4A 43F8 D000                  		lea	($FFFFD000).w,a1
00015B4E 337C 0000 0010             		move.w	#0,$10(a1)
00015B54 337C 0800 0012             		move.w	#$800,$12(a1)
00015B5A 0C00 0004                  		cmpi.b	#4,d0
00015B5E 6700                       		beq.s	loc_151F0
00015B60 337C 0800 0010             		move.w	#$800,$10(a1)
00015B66 337C 0800 0012             		move.w	#$800,$12(a1)
00015B6C                            
00015B6C                            loc_151F0:
00015B6C 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015B70 5928 0024                  		subq.b	#4,$24(a0)
00015B74                            
00015B74                            loc_151F8:
00015B74 6100                       		bsr.s	Obj66_ChkSwitch
00015B76 6100                       		bsr.s	Obj66_ChgPos
00015B78 6000 A3B2                  		bra.w	MarkObjGone
00015B7C                            
00015B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B7C                            
00015B7C                            
00015B7C                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015B7C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015B80 7000                       		moveq	#0,d0
00015B82 1028 0038                  		move.b	$38(a0),d0
00015B86 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015B8C 6700                       		beq.s	loc_15224	; if not, branch
00015B8E 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015B92 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015B94 4428 0034                  		neg.b	$34(a0)
00015B98 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015B9E 6000                       		bra.s	Obj66_Animate
00015BA0                            ; ===========================================================================
00015BA0                            
00015BA0                            loc_15224:
00015BA0 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015BA4                            
00015BA4                            Obj66_Animate:
00015BA4 5328 001E                  		subq.b	#1,$1E(a0)
00015BA8 6A00                       		bpl.s	locret_15246
00015BAA 117C 0007 001E             		move.b	#7,$1E(a0)
00015BB0 1228 0034                  		move.b	$34(a0),d1
00015BB4 1028 001A                  		move.b	$1A(a0),d0
00015BB8 D001                       		add.b	d1,d0
00015BBA 0200 000F                  		andi.b	#$F,d0
00015BBE 1140 001A                  		move.b	d0,$1A(a0)
00015BC2                            
00015BC2                            locret_15246:
00015BC2 4E75                       		rts	
00015BC4                            ; End of function Obj66_ChkSwitch
00015BC4                            
00015BC4                            
00015BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BC4                            
00015BC4                            
00015BC4                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015BC4 43F8 D000                  		lea	($FFFFD000).w,a1
00015BC8 7000                       		moveq	#0,d0
00015BCA 1028 001A                  		move.b	$1A(a0),d0
00015BCE D040                       		add.w	d0,d0
00015BD0 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015BD4 101A                       		move.b	(a2)+,d0
00015BD6 4880                       		ext.w	d0
00015BD8 D068 0008                  		add.w	8(a0),d0
00015BDC 3340 0008                  		move.w	d0,8(a1)
00015BE0 101A                       		move.b	(a2)+,d0
00015BE2 4880                       		ext.w	d0
00015BE4 D068 000C                  		add.w	$C(a0),d0
00015BE8 3340 000C                  		move.w	d0,$C(a1)
00015BEC 4E75                       		rts	
00015BEE                            ; End of function Obj66_ChgPos
00015BEE                            
00015BEE                            ; ===========================================================================
00015BEE E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015BF2 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015BF6 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015BFA 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015BFE 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015C02 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015C06 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015C0A E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015C0E                            ; ---------------------------------------------------------------------------
00015C0E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015C0E                            ; ---------------------------------------------------------------------------
00015C0E                            Map_obj66:
00015C0E                            	include "_maps\obj66.asm"
00015C0E                            ; ---------------------------------------------------------------------------
00015C0E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015C0E                            ; ---------------------------------------------------------------------------
00015C0E 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015C12 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015C16 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015C1A 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015C1E 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015C22 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015C26 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015C2A 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015C2E 0000                       		dc.w byte_154A4-Map_obj66
00015C30 06                         byte_152B4:	dc.b 6
00015C31 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015C36 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015C3B E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015C40 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015C45 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015C4A 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015C4F 06                         byte_152D3:	dc.b 6
00015C50 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015C55 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015C5A F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015C5F F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015C64 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015C69 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015C6E 06                         byte_152F2:	dc.b 6
00015C6F 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015C74 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015C79 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015C7E 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015C83 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015C88 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015C8D 06                         byte_15311:	dc.b 6
00015C8E 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015C93 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015C98 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015C9D 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015CA2 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015CA7 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015CAC 06                         byte_15330:	dc.b 6
00015CAD 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015CB2 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015CB7 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015CBC 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015CC1 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015CC6 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015CCB 06                         byte_1534F:	dc.b 6
00015CCC 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015CD1 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015CD6 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015CDB 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015CE0 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015CE5 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015CEA 06                         byte_1536E:	dc.b 6
00015CEB 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015CF0 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015CF5 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015CFA 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015CFF 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015D04 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015D09 06                         byte_1538D:	dc.b 6
00015D0A 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015D0F F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015D14 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015D19 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015D1E 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015D23 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015D28 06                         byte_153AC:	dc.b 6
00015D29 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015D2E 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015D33 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015D38 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015D3D 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015D42 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015D47 06                         byte_153CB:	dc.b 6
00015D48 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015D4D E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015D52 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015D57 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015D5C F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015D61 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015D66 06                         byte_153EA:	dc.b 6
00015D67 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015D6C E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015D71 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015D76 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015D7B E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015D80 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015D85 06                         byte_15409:	dc.b 6
00015D86 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015D8B D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015D90 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015D95 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015D9A E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015D9F E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015DA4 06                         byte_15428:	dc.b 6
00015DA5 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015DAA D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015DAF C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015DB4 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015DB9 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015DBE E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015DC3 06                         byte_15447:	dc.b 6
00015DC4 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015DC9 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015DCE CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015DD3 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015DD8 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015DDD E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015DE2 06                         byte_15466:	dc.b 6
00015DE3 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015DE8 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015DED D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015DF2 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015DF7 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015DFC E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015E01 06                         byte_15485:	dc.b 6
00015E02 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015E07 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015E0C DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015E11 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015E16 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015E1B F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015E20 0C                         byte_154A4:	dc.b $C
00015E21 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015E26 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015E2B E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015E30 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015E35 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015E3A E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015E3F 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015E44 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015E49 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015E4E 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015E53 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015E58 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015E5E 00                         		even
00015E5E 00                         		even
00015E5E                            
00015E5E                            ; ===========================================================================
00015E5E                            ; ---------------------------------------------------------------------------
00015E5E                            ; Object 67 - disc that	you run	around (SBZ)
00015E5E                            ; ---------------------------------------------------------------------------
00015E5E                            
00015E5E                            Obj67:					; XREF: Obj_Index
00015E5E 7000                       		moveq	#0,d0
00015E60 1028 0024                  		move.b	$24(a0),d0
00015E64 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015E68 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015E6C                            ; ===========================================================================
00015E6C 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015E6E 0000                       		dc.w Obj67_Action-Obj67_Index
00015E70                            ; ===========================================================================
00015E70                            
00015E70                            Obj67_Main:				; XREF: Obj67_Index
00015E70 5428 0024                  		addq.b	#2,$24(a0)
00015E74 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015E7C 317C C344 0002             		move.w	#$C344,2(a0)
00015E82 117C 0004 0001             		move.b	#4,1(a0)
00015E88 117C 0004 0018             		move.b	#4,$18(a0)
00015E8E 117C 0008 0019             		move.b	#8,$19(a0)
00015E94 3168 0008 0032             		move.w	8(a0),$32(a0)
00015E9A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015EA0 117C 0018 0034             		move.b	#$18,$34(a0)
00015EA6 117C 0048 0038             		move.b	#$48,$38(a0)
00015EAC 1228 0028                  		move.b	$28(a0),d1	; get object type
00015EB0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015EB4 6700                       		beq.s	loc_15546
00015EB6 117C 0010 0034             		move.b	#$10,$34(a0)
00015EBC 117C 0038 0038             		move.b	#$38,$38(a0)
00015EC2                            
00015EC2                            loc_15546:
00015EC2 1228 0028                  		move.b	$28(a0),d1	; get object type
00015EC6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015ECA 4881                       		ext.w	d1
00015ECC E741                       		asl.w	#3,d1
00015ECE 3141 0036                  		move.w	d1,$36(a0)
00015ED2 1028 0022                  		move.b	$22(a0),d0
00015ED6 E418                       		ror.b	#2,d0
00015ED8 0200 00C0                  		andi.b	#-$40,d0
00015EDC 1140 0026                  		move.b	d0,$26(a0)
00015EE0                            
00015EE0                            Obj67_Action:				; XREF: Obj67_Index
00015EE0 6100 0000                  		bsr.w	Obj67_MoveSonic
00015EE4 6100 0000                  		bsr.w	Obj67_MoveSpot
00015EE8 6000 0000                  		bra.w	Obj67_ChkDel
00015EEC                            ; ===========================================================================
00015EEC                            
00015EEC                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015EEC 7400                       		moveq	#0,d2
00015EEE 1428 0038                  		move.b	$38(a0),d2
00015EF2 3602                       		move.w	d2,d3
00015EF4 D643                       		add.w	d3,d3
00015EF6 43F8 D000                  		lea	($FFFFD000).w,a1
00015EFA 3029 0008                  		move.w	8(a1),d0
00015EFE 9068 0032                  		sub.w	$32(a0),d0
00015F02 D042                       		add.w	d2,d0
00015F04 B043                       		cmp.w	d3,d0
00015F06 6400                       		bcc.s	loc_155A8
00015F08 3229 000C                  		move.w	$C(a1),d1
00015F0C 9268 0030                  		sub.w	$30(a0),d1
00015F10 D242                       		add.w	d2,d1
00015F12 B243                       		cmp.w	d3,d1
00015F14 6400                       		bcc.s	loc_155A8
00015F16 0829 0001 0022             		btst	#1,$22(a1)
00015F1C 6700                       		beq.s	loc_155B8
00015F1E 4228 003A                  		clr.b	$3A(a0)
00015F22 4E75                       		rts	
00015F24                            ; ===========================================================================
00015F24                            
00015F24                            loc_155A8:
00015F24 4A28 003A                  		tst.b	$3A(a0)
00015F28 6700                       		beq.s	locret_155B6
00015F2A 4229 0038                  		clr.b	$38(a1)
00015F2E 4228 003A                  		clr.b	$3A(a0)
00015F32                            
00015F32                            locret_155B6:
00015F32 4E75                       		rts	
00015F34                            ; ===========================================================================
00015F34                            
00015F34                            loc_155B8:
00015F34 4A28 003A                  		tst.b	$3A(a0)
00015F38 6600                       		bne.s	loc_155E2
00015F3A 117C 0001 003A             		move.b	#1,$3A(a0)
00015F40 0829 0002 0022             		btst	#2,$22(a1)
00015F46 6600                       		bne.s	loc_155D0
00015F48 4229 001C                  		clr.b	$1C(a1)
00015F4C                            
00015F4C                            loc_155D0:
00015F4C 08A9 0005 0022             		bclr	#5,$22(a1)
00015F52 137C 0001 001D             		move.b	#1,$1D(a1)
00015F58 137C 0001 0038             		move.b	#1,$38(a1)
00015F5E                            
00015F5E                            loc_155E2:
00015F5E 3029 0014                  		move.w	$14(a1),d0
00015F62 4A68 0036                  		tst.w	$36(a0)
00015F66 6A00                       		bpl.s	loc_15608
00015F68 0C40 FC00                  		cmpi.w	#-$400,d0
00015F6C 6F00                       		ble.s	loc_155FA
00015F6E 337C FC00 0014             		move.w	#-$400,$14(a1)
00015F74 4E75                       		rts	
00015F76                            ; ===========================================================================
00015F76                            
00015F76                            loc_155FA:
00015F76 0C40 F100                  		cmpi.w	#-$F00,d0
00015F7A 6C00                       		bge.s	locret_15606
00015F7C 337C F100 0014             		move.w	#-$F00,$14(a1)
00015F82                            
00015F82                            locret_15606:
00015F82 4E75                       		rts	
00015F84                            ; ===========================================================================
00015F84                            
00015F84                            loc_15608:
00015F84 0C40 0400                  		cmpi.w	#$400,d0
00015F88 6C00                       		bge.s	loc_15616
00015F8A 337C 0400 0014             		move.w	#$400,$14(a1)
00015F90 4E75                       		rts	
00015F92                            ; ===========================================================================
00015F92                            
00015F92                            loc_15616:
00015F92 0C40 0F00                  		cmpi.w	#$F00,d0
00015F96 6F00                       		ble.s	locret_15622
00015F98 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015F9E                            
00015F9E                            locret_15622:
00015F9E 4E75                       		rts	
00015FA0                            ; ===========================================================================
00015FA0                            
00015FA0                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015FA0 3028 0036                  		move.w	$36(a0),d0
00015FA4 D168 0026                  		add.w	d0,$26(a0)
00015FA8 1028 0026                  		move.b	$26(a0),d0
00015FAC 4EB9 0000 2B58             		jsr	(CalcSine).l
00015FB2 3428 0030                  		move.w	$30(a0),d2
00015FB6 3628 0032                  		move.w	$32(a0),d3
00015FBA 7800                       		moveq	#0,d4
00015FBC 1828 0034                  		move.b	$34(a0),d4
00015FC0 E14C                       		lsl.w	#8,d4
00015FC2 2A04                       		move.l	d4,d5
00015FC4 C9C0                       		muls.w	d0,d4
00015FC6 4844                       		swap	d4
00015FC8 CBC1                       		muls.w	d1,d5
00015FCA 4845                       		swap	d5
00015FCC D842                       		add.w	d2,d4
00015FCE DA43                       		add.w	d3,d5
00015FD0 3144 000C                  		move.w	d4,$C(a0)
00015FD4 3145 0008                  		move.w	d5,8(a0)
00015FD8 4E75                       		rts	
00015FDA                            ; ===========================================================================
00015FDA                            
00015FDA                            Obj67_ChkDel:				; XREF: Obj67_Action
00015FDA 3028 0032                  		move.w	$32(a0),d0
00015FDE 0240 FF80                  		andi.w	#-$80,d0
00015FE2 3238 F700                  		move.w	($FFFFF700).w,d1
00015FE6 0441 0080                  		subi.w	#$80,d1
00015FEA 0241 FF80                  		andi.w	#-$80,d1
00015FEE 9041                       		sub.w	d1,d0
00015FF0 0C40 0280                  		cmpi.w	#$280,d0
00015FF4 6200                       		bhi.s	Obj67_Delete
00015FF6 4EF9 0000 DE84             		jmp	DisplaySprite
00015FFC                            ; ===========================================================================
00015FFC                            
00015FFC                            Obj67_Delete:
00015FFC 4EF9 0000 DEC0             		jmp	DeleteObject
00016002                            ; ===========================================================================
00016002                            ; ---------------------------------------------------------------------------
00016002                            ; Sprite mappings - disc that you run around (SBZ)
00016002                            ; (It's just a small blob that moves around in a circle. The disc itself is
00016002                            ; part of the level tiles.)
00016002                            ; ---------------------------------------------------------------------------
00016002                            Map_obj67:
00016002                            	include "_maps\obj67.asm"
00016002                            ; ---------------------------------------------------------------------------
00016002                            ; Sprite mappings - disc that you run around (SBZ)
00016002                            ; (It's just a small blob that moves around in a circle. The disc itself is
00016002                            ; part of the level tiles.)
00016002                            ; ---------------------------------------------------------------------------
00016002 0000                       		dc.w byte_15688-Map_obj67
00016004 01                         byte_15688:	dc.b 1
00016005 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001600A                            		even
0001600A                            		even
0001600A                            
0001600A                            ; ===========================================================================
0001600A                            ; ---------------------------------------------------------------------------
0001600A                            ; Object 68 - conveyor belts (SBZ)
0001600A                            ; ---------------------------------------------------------------------------
0001600A                            
0001600A                            Obj68:					; XREF: Obj_Index
0001600A 7000                       		moveq	#0,d0
0001600C 1028 0024                  		move.b	$24(a0),d0
00016010 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00016014 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00016018                            ; ===========================================================================
00016018 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001601A 0000                       		dc.w Obj68_Action-Obj68_Index
0001601C                            ; ===========================================================================
0001601C                            
0001601C                            Obj68_Main:				; XREF: Obj68_Index
0001601C 5428 0024                  		addq.b	#2,$24(a0)
00016020 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00016026 1228 0028                  		move.b	$28(a0),d1	; get object type
0001602A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001602E 6700                       		beq.s	loc_156BA	; if zero, branch
00016030 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00016036                            
00016036                            loc_156BA:
00016036 1228 0028                  		move.b	$28(a0),d1	; get object type
0001603A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001603E 4881                       		ext.w	d1
00016040 E841                       		asr.w	#4,d1
00016042 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00016046                            
00016046                            Obj68_Action:				; XREF: Obj68_Index
00016046 6100                       		bsr.s	Obj68_MoveSonic
00016048 3028 0008                  		move.w	8(a0),d0
0001604C 0240 FF80                  		andi.w	#$FF80,d0
00016050 3238 F700                  		move.w	($FFFFF700).w,d1
00016054 0441 0080                  		subi.w	#$80,d1
00016058 0241 FF80                  		andi.w	#$FF80,d1
0001605C 9041                       		sub.w	d1,d0
0001605E 0C40 0280                  		cmpi.w	#$280,d0
00016062 6200                       		bhi.s	Obj68_Delete
00016064 4E75                       		rts	
00016066                            ; ===========================================================================
00016066                            
00016066                            Obj68_Delete:
00016066 4EF9 0000 DEC0             		jmp	DeleteObject
0001606C                            ; ===========================================================================
0001606C                            
0001606C                            Obj68_MoveSonic:			; XREF: Obj68_Action
0001606C 7400                       		moveq	#0,d2
0001606E 1428 0038                  		move.b	$38(a0),d2
00016072 3602                       		move.w	d2,d3
00016074 D643                       		add.w	d3,d3
00016076 43F8 D000                  		lea	($FFFFD000).w,a1
0001607A 3029 0008                  		move.w	8(a1),d0
0001607E 9068 0008                  		sub.w	8(a0),d0
00016082 D042                       		add.w	d2,d0
00016084 B043                       		cmp.w	d3,d0
00016086 6400                       		bcc.s	locret_1572E
00016088 3229 000C                  		move.w	$C(a1),d1
0001608C 9268 000C                  		sub.w	$C(a0),d1
00016090 0641 0030                  		addi.w	#$30,d1
00016094 0C41 0030                  		cmpi.w	#$30,d1
00016098 6400                       		bcc.s	locret_1572E
0001609A 0829 0001 0022             		btst	#1,$22(a1)
000160A0 6600                       		bne.s	locret_1572E
000160A2 3028 0036                  		move.w	$36(a0),d0
000160A6 D169 0008                  		add.w	d0,8(a1)
000160AA                            
000160AA                            locret_1572E:
000160AA 4E75                       		rts	
000160AC                            
000160AC                            ; ===========================================================================
000160AC                            ; ---------------------------------------------------------------------------
000160AC                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000160AC                            ; ---------------------------------------------------------------------------
000160AC                            
000160AC                            Obj69:					; XREF: Obj_Index
000160AC 7000                       		moveq	#0,d0
000160AE 1028 0024                  		move.b	$24(a0),d0
000160B2 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000160B6 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000160BA                            ; ===========================================================================
000160BA 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000160BC 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000160BE 0000                       		dc.w Obj69_Spinner-Obj69_Index
000160C0                            ; ===========================================================================
000160C0                            
000160C0                            Obj69_Main:				; XREF: Obj69_Index
000160C0 5428 0024                  		addq.b	#2,$24(a0)
000160C4 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000160CC 317C 4492 0002             		move.w	#$4492,2(a0)
000160D2 0028 0004 0001             		ori.b	#4,1(a0)
000160D8 117C 0080 0019             		move.b	#$80,$19(a0)
000160DE 7000                       		moveq	#0,d0
000160E0 1028 0028                  		move.b	$28(a0),d0
000160E4 0240 000F                  		andi.w	#$F,d0
000160E8 C0FC 003C                  		mulu.w	#$3C,d0
000160EC 3140 0032                  		move.w	d0,$32(a0)
000160F0 4A28 0028                  		tst.b	$28(a0)
000160F4 6A00                       		bpl.s	Obj69_Trapdoor
000160F6 5428 0024                  		addq.b	#2,$24(a0)
000160FA 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00016102 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016108 117C 0010 0019             		move.b	#$10,$19(a0)
0001610E 117C 0002 001C             		move.b	#2,$1C(a0)
00016114 7000                       		moveq	#0,d0
00016116 1028 0028                  		move.b	$28(a0),d0	; get object type
0001611A 3200                       		move.w	d0,d1
0001611C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016120 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016124 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00016128 3140 0032                  		move.w	d0,$32(a0)
0001612C 0241 0070                  		andi.w	#$70,d1
00016130 0641 0010                  		addi.w	#$10,d1
00016134 E549                       		lsl.w	#2,d1
00016136 5341                       		subq.w	#1,d1
00016138 3141 0036                  		move.w	d1,$36(a0)
0001613C 6000                       		bra.s	Obj69_Spinner
0001613E                            ; ===========================================================================
0001613E                            
0001613E                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001613E 5368 0030                  		subq.w	#1,$30(a0)
00016142 6A00                       		bpl.s	Obj69_Animate
00016144 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001614A 0868 0000 001C             		bchg	#0,$1C(a0)
00016150 4A28 0001                  		tst.b	1(a0)
00016154 6A00                       		bpl.s	Obj69_Animate
00016156 303C 00BB                  		move.w	#$BB,d0
0001615A 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play door sound
00016160                            
00016160                            Obj69_Animate:
00016160 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016166 4EB9 0000 AED2             		jsr	AnimateSprite
0001616C 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016170 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016172 323C 004B                  		move.w	#$4B,d1
00016176 343C 000C                  		move.w	#$C,d2
0001617A 3602                       		move.w	d2,d3
0001617C 5243                       		addq.w	#1,d3
0001617E 3828 0008                  		move.w	8(a0),d4
00016182 6100 A0D0                  		bsr.w	SolidObject
00016186 6000 9DA4                  		bra.w	MarkObjGone
0001618A                            ; ===========================================================================
0001618A                            
0001618A                            Obj69_NotSolid:
0001618A 0828 0003 0022             		btst	#3,$22(a0)
00016190 6700                       		beq.s	Obj69_Display
00016192 43F8 D000                  		lea	($FFFFD000).w,a1
00016196 08A9 0003 0022             		bclr	#3,$22(a1)
0001619C 08A8 0003 0022             		bclr	#3,$22(a0)
000161A2 4228 0025                  		clr.b	$25(a0)
000161A6                            
000161A6                            Obj69_Display:
000161A6 6000 9D84                  		bra.w	MarkObjGone
000161AA                            ; ===========================================================================
000161AA                            
000161AA                            Obj69_Spinner:				; XREF: Obj69_Index
000161AA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000161AE C068 0036                  		and.w	$36(a0),d0
000161B2 6600                       		bne.s	Obj69_Delay
000161B4 117C 0001 0034             		move.b	#1,$34(a0)
000161BA                            
000161BA                            Obj69_Delay:
000161BA 4A28 0034                  		tst.b	$34(a0)
000161BE 6700                       		beq.s	Obj69_Animate2
000161C0 5368 0030                  		subq.w	#1,$30(a0)
000161C4 6A00                       		bpl.s	Obj69_Animate2
000161C6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000161CC 4228 0034                  		clr.b	$34(a0)
000161D0 0868 0000 001C             		bchg	#0,$1C(a0)
000161D6                            
000161D6                            Obj69_Animate2:
000161D6 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000161DC 4EB9 0000 AED2             		jsr	AnimateSprite
000161E2 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000161E6 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000161E8 323C 001B                  		move.w	#$1B,d1
000161EC 343C 0007                  		move.w	#7,d2
000161F0 3602                       		move.w	d2,d3
000161F2 5243                       		addq.w	#1,d3
000161F4 3828 0008                  		move.w	8(a0),d4
000161F8 6100 A05A                  		bsr.w	SolidObject
000161FC 6000 9D2E                  		bra.w	MarkObjGone
00016200                            ; ===========================================================================
00016200                            
00016200                            Obj69_NotSolid2:
00016200 0828 0003 0022             		btst	#3,$22(a0)
00016206 6700                       		beq.s	Obj69_Display2
00016208 43F8 D000                  		lea	($FFFFD000).w,a1
0001620C 08A9 0003 0022             		bclr	#3,$22(a1)
00016212 08A8 0003 0022             		bclr	#3,$22(a0)
00016218 4228 0025                  		clr.b	$25(a0)
0001621C                            
0001621C                            Obj69_Display2:
0001621C 6000 9D0E                  		bra.w	MarkObjGone
00016220                            ; ===========================================================================
00016220                            Ani_obj69:
00016220                            	include "_anim\obj69.asm"
00016220                            ; ---------------------------------------------------------------------------
00016220                            ; Animation script - trapdoor (SBZ)
00016220                            ; ---------------------------------------------------------------------------
00016220 0000                       		dc.w byte_158AC-Ani_obj69
00016222 0000                       		dc.w byte_158B2-Ani_obj69
00016224 0000                       		dc.w byte_158B8-Ani_obj69
00016226 0000                       		dc.w byte_158CC-Ani_obj69
00016228 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001622E 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016234 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016241 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016248 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016255 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001625C                            		even
0001625C                            		even
0001625C                            
0001625C                            ; ---------------------------------------------------------------------------
0001625C                            ; Sprite mappings - trapdoor (SBZ)
0001625C                            ; ---------------------------------------------------------------------------
0001625C                            Map_obj69:
0001625C                            	include "_maps\obj69.asm"
0001625C                            ; ---------------------------------------------------------------------------
0001625C                            ; Sprite mappings - trapdoor (SBZ)
0001625C                            ; ---------------------------------------------------------------------------
0001625C 0000                       		dc.w byte_158E6-Map_obj69
0001625E 0000                       		dc.w byte_158FB-Map_obj69
00016260 0000                       		dc.w byte_15924-Map_obj69
00016262 04                         byte_158E6:	dc.b 4
00016263 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016268 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001626D F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016272 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016277 08                         byte_158FB:	dc.b 8
00016278 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001627D 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016282 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016287 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001628C F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016291 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016296 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001629B 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000162A0 04                         byte_15924:	dc.b 4
000162A1 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000162A6 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000162AB 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000162B0 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000162B6 00                         		even
000162B6 00                         		even
000162B6                            
000162B6                            ; ---------------------------------------------------------------------------
000162B6                            ; Sprite mappings - spinning platforms (SBZ)
000162B6                            ; ---------------------------------------------------------------------------
000162B6                            Map_obj69a:
000162B6                            	include "_maps\obj69a.asm"
000162B6                            ; ---------------------------------------------------------------------------
000162B6                            ; Sprite mappings - spinning platforms (SBZ)
000162B6                            ; ---------------------------------------------------------------------------
000162B6 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000162BA 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000162BE 0000                       		dc.w byte_15970-Map_obj69a
000162C0 02                         byte_15944:	dc.b 2
000162C1 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000162C6 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000162CB 02                         byte_1594F:	dc.b 2
000162CC F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000162D1 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000162D6 02                         byte_1595A:	dc.b 2
000162D7 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000162DC 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000162E1 02                         byte_15965:	dc.b 2
000162E2 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000162E7 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000162EC 02                         byte_15970:	dc.b 2
000162ED F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000162F2 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000162F8 00                         		even
000162F8 00                         		even
000162F8                            
000162F8                            ; ===========================================================================
000162F8                            ; ---------------------------------------------------------------------------
000162F8                            ; Object 6A - ground saws and pizza cutters (SBZ)
000162F8                            ; ---------------------------------------------------------------------------
000162F8                            
000162F8                            Obj6A:					; XREF: Obj_Index
000162F8 7000                       		moveq	#0,d0
000162FA 1028 0024                  		move.b	$24(a0),d0
000162FE 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016302 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016306                            ; ===========================================================================
00016306 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00016308 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001630A                            ; ===========================================================================
0001630A                            
0001630A                            Obj6A_Main:				; XREF: Obj6A_Index
0001630A 5428 0024                  		addq.b	#2,$24(a0)
0001630E 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016316 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001631C 117C 0004 0001             		move.b	#4,1(a0)
00016322 117C 0004 0018             		move.b	#4,$18(a0)
00016328 117C 0020 0019             		move.b	#$20,$19(a0)
0001632E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016334 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001633A 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016340 6400                       		bcc.s	Obj6A_Action
00016342 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016348                            
00016348                            Obj6A_Action:				; XREF: Obj6A_Index
00016348 7000                       		moveq	#0,d0
0001634A 1028 0028                  		move.b	$28(a0),d0
0001634E 0240 0007                  		andi.w	#7,d0
00016352 D040                       		add.w	d0,d0
00016354 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016358 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
0001635C 3028 003A                  		move.w	$3A(a0),d0
00016360 0240 FF80                  		andi.w	#$FF80,d0
00016364 3238 F700                  		move.w	($FFFFF700).w,d1
00016368 0441 0080                  		subi.w	#$80,d1
0001636C 0241 FF80                  		andi.w	#$FF80,d1
00016370 9041                       		sub.w	d1,d0
00016372 0C40 0280                  		cmpi.w	#$280,d0
00016376 6200                       		bhi.s	Obj6A_Delete
00016378 4EF9 0000 DE84             		jmp	DisplaySprite
0001637E                            ; ===========================================================================
0001637E                            
0001637E                            Obj6A_Delete:
0001637E 4EF9 0000 DEC0             		jmp	DeleteObject
00016384                            ; ===========================================================================
00016384 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016388 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
0001638C 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
0001638E                            ; ===========================================================================
0001638E                            
0001638E                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
0001638E 4E75                       		rts	
00016390                            ; ===========================================================================
00016390                            
00016390                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016390 323C 0060                  		move.w	#$60,d1
00016394 7000                       		moveq	#0,d0
00016396 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001639A 0828 0000 0022             		btst	#0,$22(a0)
000163A0 6700                       		beq.s	Obj6A_Animate01
000163A2 4440                       		neg.w	d0
000163A4 D041                       		add.w	d1,d0
000163A6                            
000163A6                            Obj6A_Animate01:
000163A6 3228 003A                  		move.w	$3A(a0),d1
000163AA 9240                       		sub.w	d0,d1
000163AC 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000163B0 5328 001E                  		subq.b	#1,$1E(a0)
000163B4 6A00                       		bpl.s	loc_15A46
000163B6 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000163BC 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000163C2                            
000163C2                            loc_15A46:
000163C2 4A28 0001                  		tst.b	1(a0)
000163C6 6A00                       		bpl.s	locret_15A60
000163C8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000163CC 0240 000F                  		andi.w	#$F,d0
000163D0 6600                       		bne.s	locret_15A60
000163D2 303C 00B0                  		move.w	#$B0,d0
000163D6 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play saw sound
000163DC                            
000163DC                            locret_15A60:
000163DC 4E75                       		rts	
000163DE                            ; ===========================================================================
000163DE                            
000163DE                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000163DE 323C 0030                  		move.w	#$30,d1
000163E2 7000                       		moveq	#0,d0
000163E4 1038 FE64                  		move.b	($FFFFFE64).w,d0
000163E8 0828 0000 0022             		btst	#0,$22(a0)
000163EE 6700                       		beq.s	Obj6A_Animate02
000163F0 4440                       		neg.w	d0
000163F2 0640 0080                  		addi.w	#$80,d0
000163F6                            
000163F6                            Obj6A_Animate02:
000163F6 3228 0038                  		move.w	$38(a0),d1
000163FA 9240                       		sub.w	d0,d1
000163FC 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016400 5328 001E                  		subq.b	#1,$1E(a0)
00016404 6A00                       		bpl.s	loc_15A96
00016406 117C 0002 001E             		move.b	#2,$1E(a0)
0001640C 0868 0000 001A             		bchg	#0,$1A(a0)
00016412                            
00016412                            loc_15A96:
00016412 4A28 0001                  		tst.b	1(a0)
00016416 6A00                       		bpl.s	locret_15AB0
00016418 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001641C 0C00 0018                  		cmpi.b	#$18,d0
00016420 6600                       		bne.s	locret_15AB0
00016422 303C 00B0                  		move.w	#$B0,d0
00016426 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play saw sound
0001642C                            
0001642C                            locret_15AB0:
0001642C 4E75                       		rts	
0001642E                            ; ===========================================================================
0001642E                            
0001642E                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001642E 4A28 003D                  		tst.b	$3D(a0)
00016432 6600                       		bne.s	Obj6A_Animate03
00016434 3038 D008                  		move.w	($FFFFD008).w,d0
00016438 0440 00C0                  		subi.w	#$C0,d0
0001643C 6500                       		bcs.s	loc_15B02
0001643E 9068 0008                  		sub.w	8(a0),d0
00016442 6500                       		bcs.s	loc_15B02
00016444 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016448 0440 0080                  		subi.w	#$80,d0
0001644C B068 000C                  		cmp.w	$C(a0),d0
00016450 6400                       		bcc.s	locret_15B04
00016452 0640 0100                  		addi.w	#$100,d0
00016456 B068 000C                  		cmp.w	$C(a0),d0
0001645A 6500                       		bcs.s	locret_15B04
0001645C 117C 0001 003D             		move.b	#1,$3D(a0)
00016462 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016468 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001646E 117C 0002 001A             		move.b	#2,$1A(a0)
00016474 303C 00B0                  		move.w	#$B0,d0
00016478 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play saw sound
0001647E                            
0001647E                            loc_15B02:
0001647E 588F                       		addq.l	#4,sp
00016480                            
00016480                            locret_15B04:
00016480 4E75                       		rts	
00016482                            ; ===========================================================================
00016482                            
00016482                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016482 4EB9 0000 DE5E             		jsr	SpeedToPos
00016488 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001648E 5328 001E                  		subq.b	#1,$1E(a0)
00016492 6A00                       		bpl.s	locret_15B24
00016494 117C 0002 001E             		move.b	#2,$1E(a0)
0001649A 0868 0000 001A             		bchg	#0,$1A(a0)
000164A0                            
000164A0                            locret_15B24:
000164A0 4E75                       		rts	
000164A2                            ; ===========================================================================
000164A2                            
000164A2                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000164A2 4A28 003D                  		tst.b	$3D(a0)
000164A6 6600                       		bne.s	Obj6A_Animate04
000164A8 3038 D008                  		move.w	($FFFFD008).w,d0
000164AC 0640 00E0                  		addi.w	#$E0,d0
000164B0 9068 0008                  		sub.w	8(a0),d0
000164B4 6400                       		bcc.s	loc_15B74
000164B6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000164BA 0440 0080                  		subi.w	#$80,d0
000164BE B068 000C                  		cmp.w	$C(a0),d0
000164C2 6400                       		bcc.s	locret_15B76
000164C4 0640 0100                  		addi.w	#$100,d0
000164C8 B068 000C                  		cmp.w	$C(a0),d0
000164CC 6500                       		bcs.s	locret_15B76
000164CE 117C 0001 003D             		move.b	#1,$3D(a0)
000164D4 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000164DA 117C 00A2 0020             		move.b	#$A2,$20(a0)
000164E0 117C 0002 001A             		move.b	#2,$1A(a0)
000164E6 303C 00B0                  		move.w	#$B0,d0
000164EA 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play saw sound
000164F0                            
000164F0                            loc_15B74:
000164F0 588F                       		addq.l	#4,sp
000164F2                            
000164F2                            locret_15B76:
000164F2 4E75                       		rts	
000164F4                            ; ===========================================================================
000164F4                            
000164F4                            Obj6A_Animate04:
000164F4 4EB9 0000 DE5E             		jsr	SpeedToPos
000164FA 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016500 5328 001E                  		subq.b	#1,$1E(a0)
00016504 6A00                       		bpl.s	locret_15B96
00016506 117C 0002 001E             		move.b	#2,$1E(a0)
0001650C 0868 0000 001A             		bchg	#0,$1A(a0)
00016512                            
00016512                            locret_15B96:
00016512 4E75                       		rts	
00016514                            ; ===========================================================================
00016514                            ; ---------------------------------------------------------------------------
00016514                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016514                            ; ---------------------------------------------------------------------------
00016514                            Map_obj6A:
00016514                            	include "_maps\obj6A.asm"
00016514                            ; ---------------------------------------------------------------------------
00016514                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016514                            ; ---------------------------------------------------------------------------
00016514 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016518 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001651C 07                         byte_15BA0:	dc.b 7
0001651D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016522 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016527 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001652C E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016531 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016536 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001653B 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016540 07                         byte_15BC4:	dc.b 7
00016541 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016546 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001654B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016550 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016555 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001655A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001655F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016564 04                         byte_15BE8:	dc.b 4
00016565 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001656A E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001656F 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016574 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016579 04                         byte_15BFD:	dc.b 4
0001657A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001657F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016584 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016589 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001658E                            		even
0001658E                            		even
0001658E                            
0001658E                            ; ===========================================================================
0001658E                            ; ---------------------------------------------------------------------------
0001658E                            ; Object 6B - stomper (SBZ)
0001658E                            ; ---------------------------------------------------------------------------
0001658E                            
0001658E                            Obj6B:					; XREF: Obj_Index
0001658E 7000                       		moveq	#0,d0
00016590 1028 0024                  		move.b	$24(a0),d0
00016594 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016598 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001659C                            ; ===========================================================================
0001659C 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
0001659E 0000                       		dc.w Obj6B_Action-Obj6B_Index
000165A0                            
000165A0 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000165A4 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000165A8 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000165AC 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000165B0 8040 0005                  		dc.b  $80, $40,	  0,   5
000165B4                            ; ===========================================================================
000165B4                            
000165B4                            Obj6B_Main:				; XREF: Obj6B_Index
000165B4 5428 0024                  		addq.b	#2,$24(a0)
000165B8 7000                       		moveq	#0,d0
000165BA 1028 0028                  		move.b	$28(a0),d0
000165BE E448                       		lsr.w	#2,d0
000165C0 0240 001C                  		andi.w	#$1C,d0
000165C4 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000165C8 115B 0019                  		move.b	(a3)+,$19(a0)
000165CC 115B 0016                  		move.b	(a3)+,$16(a0)
000165D0 E448                       		lsr.w	#2,d0
000165D2 1140 001A                  		move.b	d0,$1A(a0)
000165D6 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000165DE 317C 22C0 0002             		move.w	#$22C0,2(a0)
000165E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000165EA 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000165EC 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000165F2 6700                       		beq.s	Obj6B_SBZ3
000165F4                            
000165F4                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000165F4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165F8 7000                       		moveq	#0,d0
000165FA 1028 0023                  		move.b	$23(a0),d0
000165FE 6700                       		beq.s	Obj6B_Delete
00016600 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016606                            
00016606                            Obj6B_Delete:
00016606 4EF9 0000 DEC0             		jmp	DeleteObject
0001660C                            ; ===========================================================================
0001660C                            
0001660C                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001660C 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016612 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016618 6600                       		bne.s	Obj6B_SBZ12
0001661A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001661E 7000                       		moveq	#0,d0
00016620 1028 0023                  		move.b	$23(a0),d0
00016624 6700                       		beq.s	Obj6B_SBZ12
00016626 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001662C 6700                       		beq.s	Obj6B_SBZ12
0001662E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016632 60C0                       		bra.s	Obj6B_ChkGone
00016634                            ; ===========================================================================
00016634                            
00016634                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016634 0028 0004 0001             		ori.b	#4,1(a0)
0001663A 117C 0004 0018             		move.b	#4,$18(a0)
00016640 3168 0008 0034             		move.w	8(a0),$34(a0)
00016646 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001664C 7000                       		moveq	#0,d0
0001664E 101B                       		move.b	(a3)+,d0
00016650 3140 003C                  		move.w	d0,$3C(a0)
00016654 7000                       		moveq	#0,d0
00016656 1028 0028                  		move.b	$28(a0),d0
0001665A 6A00                       		bpl.s	Obj6B_Action
0001665C 0200 000F                  		andi.b	#$F,d0
00016660 1140 003E                  		move.b	d0,$3E(a0)
00016664 1153 0028                  		move.b	(a3),$28(a0)
00016668 0C13 0005                  		cmpi.b	#5,(a3)
0001666C 6600                       		bne.s	Obj6B_ChkGone2
0001666E 08E8 0004 0001             		bset	#4,1(a0)
00016674                            
00016674                            Obj6B_ChkGone2:
00016674 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016678 7000                       		moveq	#0,d0
0001667A 1028 0023                  		move.b	$23(a0),d0
0001667E 6700                       		beq.s	Obj6B_Action
00016680 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016686                            
00016686                            Obj6B_Action:				; XREF: Obj6B_Index
00016686 3F28 0008                  		move.w	8(a0),-(sp)
0001668A 7000                       		moveq	#0,d0
0001668C 1028 0028                  		move.b	$28(a0),d0
00016690 0240 000F                  		andi.w	#$F,d0
00016694 D040                       		add.w	d0,d0
00016696 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
0001669A 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
0001669E 381F                       		move.w	(sp)+,d4
000166A0 4A28 0001                  		tst.b	1(a0)
000166A4 6A00                       		bpl.s	Obj6B_ChkDel
000166A6 7200                       		moveq	#0,d1
000166A8 1228 0019                  		move.b	$19(a0),d1
000166AC 0641 000B                  		addi.w	#$B,d1
000166B0 7400                       		moveq	#0,d2
000166B2 1428 0016                  		move.b	$16(a0),d2
000166B6 3602                       		move.w	d2,d3
000166B8 5243                       		addq.w	#1,d3
000166BA 6100 9B98                  		bsr.w	SolidObject
000166BE                            
000166BE                            Obj6B_ChkDel:
000166BE 3028 0034                  		move.w	$34(a0),d0
000166C2 0240 FF80                  		andi.w	#$FF80,d0
000166C6 3238 F700                  		move.w	($FFFFF700).w,d1
000166CA 0441 0080                  		subi.w	#$80,d1
000166CE 0241 FF80                  		andi.w	#$FF80,d1
000166D2 9041                       		sub.w	d1,d0
000166D4 0C40 0280                  		cmpi.w	#$280,d0
000166D8 6200                       		bhi.s	loc_15D64
000166DA 4EF9 0000 DE84             		jmp	DisplaySprite
000166E0                            ; ===========================================================================
000166E0                            
000166E0                            loc_15D64:
000166E0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000166E6 6600                       		bne.s	Obj6B_Delete2
000166E8 4238 F7CB                  		clr.b	($FFFFF7CB).w
000166EC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000166F0 7000                       		moveq	#0,d0
000166F2 1028 0023                  		move.b	$23(a0),d0
000166F6 6700                       		beq.s	Obj6B_Delete2
000166F8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000166FE                            
000166FE                            Obj6B_Delete2:
000166FE 4EF9 0000 DEC0             		jmp	DeleteObject
00016704                            ; ===========================================================================
00016704 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016708 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001670C 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016710                            ; ===========================================================================
00016710                            
00016710                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016710 4E75                       		rts	
00016712                            ; ===========================================================================
00016712                            
00016712                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016712 4A28 0038                  		tst.b	$38(a0)
00016716 6600                       		bne.s	loc_15DB4
00016718 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001671C 7000                       		moveq	#0,d0
0001671E 1028 003E                  		move.b	$3E(a0),d0
00016722 0832 0000 0000             		btst	#0,(a2,d0.w)
00016728 6700                       		beq.s	loc_15DC2
0001672A 117C 0001 0038             		move.b	#1,$38(a0)
00016730                            
00016730                            loc_15DB4:
00016730 3028 003C                  		move.w	$3C(a0),d0
00016734 B068 003A                  		cmp.w	$3A(a0),d0
00016738 6700                       		beq.s	loc_15DE0
0001673A 5468 003A                  		addq.w	#2,$3A(a0)
0001673E                            
0001673E                            loc_15DC2:
0001673E 3028 003A                  		move.w	$3A(a0),d0
00016742 0828 0000 0022             		btst	#0,$22(a0)
00016748 6700                       		beq.s	loc_15DD4
0001674A 4440                       		neg.w	d0
0001674C 0640 0080                  		addi.w	#$80,d0
00016750                            
00016750                            loc_15DD4:
00016750 3228 0034                  		move.w	$34(a0),d1
00016754 9240                       		sub.w	d0,d1
00016756 3141 0008                  		move.w	d1,8(a0)
0001675A 4E75                       		rts	
0001675C                            ; ===========================================================================
0001675C                            
0001675C                            loc_15DE0:
0001675C 5228 0028                  		addq.b	#1,$28(a0)
00016760 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016766 4228 0038                  		clr.b	$38(a0)
0001676A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001676E 7000                       		moveq	#0,d0
00016770 1028 0023                  		move.b	$23(a0),d0
00016774 67C8                       		beq.s	loc_15DC2
00016776 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001677C 60C0                       		bra.s	loc_15DC2
0001677E                            ; ===========================================================================
0001677E                            
0001677E                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
0001677E 4A28 0038                  		tst.b	$38(a0)
00016782 6600                       		bne.s	loc_15E14
00016784 5368 0036                  		subq.w	#1,$36(a0)
00016788 6600                       		bne.s	loc_15E1E
0001678A 117C 0001 0038             		move.b	#1,$38(a0)
00016790                            
00016790                            loc_15E14:
00016790 4A68 003A                  		tst.w	$3A(a0)
00016794 6700                       		beq.s	loc_15E3C
00016796 5568 003A                  		subq.w	#2,$3A(a0)
0001679A                            
0001679A                            loc_15E1E:
0001679A 3028 003A                  		move.w	$3A(a0),d0
0001679E 0828 0000 0022             		btst	#0,$22(a0)
000167A4 6700                       		beq.s	loc_15E30
000167A6 4440                       		neg.w	d0
000167A8 0640 0080                  		addi.w	#$80,d0
000167AC                            
000167AC                            loc_15E30:
000167AC 3228 0034                  		move.w	$34(a0),d1
000167B0 9240                       		sub.w	d0,d1
000167B2 3141 0008                  		move.w	d1,8(a0)
000167B6 4E75                       		rts	
000167B8                            ; ===========================================================================
000167B8                            
000167B8                            loc_15E3C:
000167B8 5328 0028                  		subq.b	#1,$28(a0)
000167BC 4228 0038                  		clr.b	$38(a0)
000167C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167C4 7000                       		moveq	#0,d0
000167C6 1028 0023                  		move.b	$23(a0),d0
000167CA 67CE                       		beq.s	loc_15E1E
000167CC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000167D2 60C6                       		bra.s	loc_15E1E
000167D4                            ; ===========================================================================
000167D4                            
000167D4                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000167D4 4A28 0038                  		tst.b	$38(a0)
000167D8 6600                       		bne.s	loc_15E7C
000167DA 4A68 003A                  		tst.w	$3A(a0)
000167DE 6700                       		beq.s	loc_15E6A
000167E0 5368 003A                  		subq.w	#1,$3A(a0)
000167E4 6000                       		bra.s	loc_15E8E
000167E6                            ; ===========================================================================
000167E6                            
000167E6                            loc_15E6A:
000167E6 5368 0036                  		subq.w	#1,$36(a0)
000167EA 6A00                       		bpl.s	loc_15E8E
000167EC 317C 003C 0036             		move.w	#$3C,$36(a0)
000167F2 117C 0001 0038             		move.b	#1,$38(a0)
000167F8                            
000167F8                            loc_15E7C:
000167F8 5068 003A                  		addq.w	#8,$3A(a0)
000167FC 3028 003A                  		move.w	$3A(a0),d0
00016800 B068 003C                  		cmp.w	$3C(a0),d0
00016804 6600                       		bne.s	loc_15E8E
00016806 4228 0038                  		clr.b	$38(a0)
0001680A                            
0001680A                            loc_15E8E:
0001680A 3028 003A                  		move.w	$3A(a0),d0
0001680E 0828 0000 0022             		btst	#0,$22(a0)
00016814 6700                       		beq.s	loc_15EA0
00016816 4440                       		neg.w	d0
00016818 0640 0038                  		addi.w	#$38,d0
0001681C                            
0001681C                            loc_15EA0:
0001681C 3228 0030                  		move.w	$30(a0),d1
00016820 D240                       		add.w	d0,d1
00016822 3141 000C                  		move.w	d1,$C(a0)
00016826 4E75                       		rts	
00016828                            ; ===========================================================================
00016828                            
00016828                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016828 4A28 0038                  		tst.b	$38(a0)
0001682C 6600                       		bne.s	loc_15ED0
0001682E 4A68 003A                  		tst.w	$3A(a0)
00016832 6700                       		beq.s	loc_15EBE
00016834 5168 003A                  		subq.w	#8,$3A(a0)
00016838 6000                       		bra.s	loc_15EF0
0001683A                            ; ===========================================================================
0001683A                            
0001683A                            loc_15EBE:
0001683A 5368 0036                  		subq.w	#1,$36(a0)
0001683E 6A00                       		bpl.s	loc_15EF0
00016840 317C 003C 0036             		move.w	#$3C,$36(a0)
00016846 117C 0001 0038             		move.b	#1,$38(a0)
0001684C                            
0001684C                            loc_15ED0:
0001684C 3028 003A                  		move.w	$3A(a0),d0
00016850 B068 003C                  		cmp.w	$3C(a0),d0
00016854 6700                       		beq.s	loc_15EE0
00016856 5068 003A                  		addq.w	#8,$3A(a0)
0001685A 6000                       		bra.s	loc_15EF0
0001685C                            ; ===========================================================================
0001685C                            
0001685C                            loc_15EE0:
0001685C 5368 0036                  		subq.w	#1,$36(a0)
00016860 6A00                       		bpl.s	loc_15EF0
00016862 317C 003C 0036             		move.w	#$3C,$36(a0)
00016868 4228 0038                  		clr.b	$38(a0)
0001686C                            
0001686C                            loc_15EF0:
0001686C 3028 003A                  		move.w	$3A(a0),d0
00016870 0828 0000 0022             		btst	#0,$22(a0)
00016876 6700                       		beq.s	loc_15F02
00016878 4440                       		neg.w	d0
0001687A 0640 0038                  		addi.w	#$38,d0
0001687E                            
0001687E                            loc_15F02:
0001687E 3228 0030                  		move.w	$30(a0),d1
00016882 D240                       		add.w	d0,d1
00016884 3141 000C                  		move.w	d1,$C(a0)
00016888 4E75                       		rts	
0001688A                            ; ===========================================================================
0001688A                            
0001688A                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
0001688A 4A28 0038                  		tst.b	$38(a0)
0001688E 6600                       		bne.s	loc_15F3E
00016890 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016894 7000                       		moveq	#0,d0
00016896 1028 003E                  		move.b	$3E(a0),d0
0001689A 0832 0000 0000             		btst	#0,(a2,d0.w)
000168A0 6700                       		beq.s	locret_15F5C
000168A2 117C 0001 0038             		move.b	#1,$38(a0)
000168A8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000168AC 7000                       		moveq	#0,d0
000168AE 1028 0023                  		move.b	$23(a0),d0
000168B2 6700                       		beq.s	loc_15F3E
000168B4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000168BA                            
000168BA                            loc_15F3E:
000168BA 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000168C2 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000168CA 3168 0008 0034             		move.w	8(a0),$34(a0)
000168D0 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000168D6 6700                       		beq.s	loc_15F5E
000168D8                            
000168D8                            locret_15F5C:
000168D8 4E75                       		rts	
000168DA                            ; ===========================================================================
000168DA                            
000168DA                            loc_15F5E:
000168DA 4228 0028                  		clr.b	$28(a0)
000168DE 4228 0038                  		clr.b	$38(a0)
000168E2 4E75                       		rts	
000168E4                            ; ===========================================================================
000168E4                            ; ---------------------------------------------------------------------------
000168E4                            ; Sprite mappings - stomper and	platforms (SBZ)
000168E4                            ; ---------------------------------------------------------------------------
000168E4                            Map_obj6B:
000168E4                            	include "_maps\obj6B.asm"
000168E4                            ; ---------------------------------------------------------------------------
000168E4                            ; Sprite mappings - stomper and	platforms (SBZ)
000168E4                            ; ---------------------------------------------------------------------------
000168E4 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000168E8 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000168EC 0000                       		dc.w byte_15FB0-Map_obj6B
000168EE 04                         byte_15F72:	dc.b 4
000168EF F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000168F4 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000168F9 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000168FE F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016903 08                         byte_15F87:	dc.b 8
00016904 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016909 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001690E E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016913 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016918 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001691D 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016922 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016927 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001692C 0E                         byte_15FB0:	dc.b $E
0001692D C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016932 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016937 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001693C C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016941 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016946 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001694B C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016950 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016955 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
0001695A E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001695F E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016964 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016969 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001696E 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016974 00                         		even
00016974 00                         		even
00016974                            
00016974                            ; ===========================================================================
00016974                            ; ---------------------------------------------------------------------------
00016974                            ; Object 6C - vanishing	platforms (SBZ)
00016974                            ; ---------------------------------------------------------------------------
00016974                            
00016974                            Obj6C:					; XREF: Obj_Index
00016974 7000                       		moveq	#0,d0
00016976 1028 0024                  		move.b	$24(a0),d0
0001697A 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
0001697E 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016982                            ; ===========================================================================
00016982 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016984 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016986 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016988 0000                       		dc.w loc_16068-Obj6C_Index
0001698A                            ; ===========================================================================
0001698A                            
0001698A                            Obj6C_Main:				; XREF: Obj6C_Index
0001698A 5C28 0024                  		addq.b	#6,$24(a0)
0001698E 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016996 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001699C 0028 0004 0001             		ori.b	#4,1(a0)
000169A2 117C 0010 0019             		move.b	#$10,$19(a0)
000169A8 117C 0004 0018             		move.b	#4,$18(a0)
000169AE 7000                       		moveq	#0,d0
000169B0 1028 0028                  		move.b	$28(a0),d0	; get object type
000169B4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000169B8 5240                       		addq.w	#1,d0		; add 1
000169BA EF48                       		lsl.w	#7,d0		; multiply by $80
000169BC 3200                       		move.w	d0,d1
000169BE 5340                       		subq.w	#1,d0
000169C0 3140 0030                  		move.w	d0,$30(a0)
000169C4 3140 0032                  		move.w	d0,$32(a0)
000169C8 7000                       		moveq	#0,d0
000169CA 1028 0028                  		move.b	$28(a0),d0	; get object type
000169CE 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000169D2 0641 0080                  		addi.w	#$80,d1
000169D6 C0C1                       		mulu.w	d1,d0
000169D8 E088                       		lsr.l	#8,d0
000169DA 3140 0036                  		move.w	d0,$36(a0)
000169DE 5341                       		subq.w	#1,d1
000169E0 3141 0038                  		move.w	d1,$38(a0)
000169E4                            
000169E4                            loc_16068:				; XREF: Obj6C_Index
000169E4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000169E8 9068 0036                  		sub.w	$36(a0),d0
000169EC C068 0038                  		and.w	$38(a0),d0
000169F0 6600                       		bne.s	Obj6C_Animate
000169F2 5928 0024                  		subq.b	#4,$24(a0)
000169F6 6000                       		bra.s	Obj6C_Vanish
000169F8                            ; ===========================================================================
000169F8                            
000169F8                            Obj6C_Animate:
000169F8 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000169FE 4EB9 0000 AED2             		jsr	AnimateSprite
00016A04 6000 9526                  		bra.w	MarkObjGone
00016A08                            ; ===========================================================================
00016A08                            
00016A08                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016A08 5368 0030                  		subq.w	#1,$30(a0)
00016A0C 6A00                       		bpl.s	loc_160AA
00016A0E 317C 007F 0030             		move.w	#127,$30(a0)
00016A14 4A28 001C                  		tst.b	$1C(a0)
00016A18 6700                       		beq.s	loc_160A4
00016A1A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016A20                            
00016A20                            loc_160A4:
00016A20 0868 0000 001C             		bchg	#0,$1C(a0)
00016A26                            
00016A26                            loc_160AA:
00016A26 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016A2C 4EB9 0000 AED2             		jsr	AnimateSprite
00016A32 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016A38 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016A3A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016A40 6600                       		bne.s	loc_160D6
00016A42 7200                       		moveq	#0,d1
00016A44 1228 0019                  		move.b	$19(a0),d1
00016A48 4EB9 0000 7A8E             		jsr	(PlatformObject).l
00016A4E 6000 94DC                  		bra.w	MarkObjGone
00016A52                            ; ===========================================================================
00016A52                            
00016A52                            loc_160D6:
00016A52 7200                       		moveq	#0,d1
00016A54 1228 0019                  		move.b	$19(a0),d1
00016A58 4EB9 0000 7C02             		jsr	(ExitPlatform).l
00016A5E 3428 0008                  		move.w	8(a0),d2
00016A62 4EB9 0000 816C             		jsr	(MvSonicOnPtfm2).l
00016A68 6000 94C2                  		bra.w	MarkObjGone
00016A6C                            ; ===========================================================================
00016A6C                            
00016A6C                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016A6C 0828 0003 0022             		btst	#3,$22(a0)
00016A72 6700                       		beq.s	Obj6C_Display
00016A74 43F8 D000                  		lea	($FFFFD000).w,a1
00016A78 08A9 0003 0022             		bclr	#3,$22(a1)
00016A7E 08A8 0003 0022             		bclr	#3,$22(a0)
00016A84 117C 0002 0024             		move.b	#2,$24(a0)
00016A8A 4228 0025                  		clr.b	$25(a0)
00016A8E                            
00016A8E                            Obj6C_Display:
00016A8E 6000 949C                  		bra.w	MarkObjGone
00016A92                            ; ===========================================================================
00016A92                            Ani_obj6C:
00016A92                            	include "_anim\obj6C.asm"
00016A92                            ; ---------------------------------------------------------------------------
00016A92                            ; Animation script - vanishing platforms (SBZ)
00016A92                            ; ---------------------------------------------------------------------------
00016A92 0000                       		dc.w byte_1611A-Ani_obj6C
00016A94 0000                       		dc.w byte_16122-Ani_obj6C
00016A96 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016A9E 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016AA6                            		even
00016AA6                            		even
00016AA6                            
00016AA6                            ; ---------------------------------------------------------------------------
00016AA6                            ; Sprite mappings - vanishing platforms	(SBZ)
00016AA6                            ; ---------------------------------------------------------------------------
00016AA6                            Map_obj6C:
00016AA6                            	include "_maps\obj6C.asm"
00016AA6                            ; ---------------------------------------------------------------------------
00016AA6                            ; Sprite mappings - vanishing platforms	(SBZ)
00016AA6                            ; ---------------------------------------------------------------------------
00016AA6 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016AAA 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016AAE 01                         byte_16132:	dc.b 1
00016AAF F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016AB4 01                         byte_16138:	dc.b 1
00016AB5 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016ABA 01                         byte_1613E:	dc.b 1
00016ABB F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016AC0 00                         byte_16144:	dc.b 0
00016AC2 00                         		even
00016AC2 00                         		even
00016AC2                            
00016AC2                            ; ===========================================================================
00016AC2                            ; ---------------------------------------------------------------------------
00016AC2                            ; Object 6E - electrocution orbs (SBZ)
00016AC2                            ; ---------------------------------------------------------------------------
00016AC2                            
00016AC2                            Obj6E:					; XREF: Obj_Index
00016AC2 7000                       		moveq	#0,d0
00016AC4 1028 0024                  		move.b	$24(a0),d0
00016AC8 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016ACC 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016AD0                            ; ===========================================================================
00016AD0 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016AD2 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016AD4                            ; ===========================================================================
00016AD4                            
00016AD4                            Obj6E_Main:				; XREF: Obj6E_Index
00016AD4 5428 0024                  		addq.b	#2,$24(a0)
00016AD8 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016AE0 317C 047E 0002             		move.w	#$47E,2(a0)
00016AE6 0028 0004 0001             		ori.b	#4,1(a0)
00016AEC 117C 0028 0019             		move.b	#$28,$19(a0)
00016AF2 7000                       		moveq	#0,d0
00016AF4 1028 0028                  		move.b	$28(a0),d0	; read object type
00016AF8 E948                       		lsl.w	#4,d0		; multiply by $10
00016AFA 5340                       		subq.w	#1,d0
00016AFC 3140 0034                  		move.w	d0,$34(a0)
00016B00                            
00016B00                            Obj6E_Shock:				; XREF: Obj6E_Index
00016B00 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016B04 C068 0034                  		and.w	$34(a0),d0
00016B08 6600                       		bne.s	Obj6E_Animate
00016B0A 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016B10 4A28 0001                  		tst.b	1(a0)
00016B14 6A00                       		bpl.s	Obj6E_Animate
00016B16 303C 00B1                  		move.w	#$B1,d0
00016B1A 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play electricity sound
00016B20                            
00016B20                            Obj6E_Animate:
00016B20 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016B26 4EB9 0000 AED2             		jsr	AnimateSprite
00016B2C 117C 0000 0020             		move.b	#0,$20(a0)
00016B32 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016B38 6600                       		bne.s	Obj6E_Display	; if not, branch
00016B3A 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016B40                            
00016B40                            Obj6E_Display:
00016B40 6000 93EA                  		bra.w	MarkObjGone
00016B44                            ; ===========================================================================
00016B44                            Ani_obj6E:
00016B44                            	include "_anim\obj6E.asm"
00016B44                            ; ---------------------------------------------------------------------------
00016B44                            ; Animation script - electrocution orbs (SBZ)
00016B44                            ; ---------------------------------------------------------------------------
00016B44 0000                       		dc.w byte_161CC-Ani_obj6E
00016B46 0000                       		dc.w byte_161D0-Ani_obj6E
00016B48 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016B4C 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016B5C                            		even
00016B5C                            		even
00016B5C                            
00016B5C                            ; ---------------------------------------------------------------------------
00016B5C                            ; Sprite mappings - electrocution orbs (SBZ)
00016B5C                            ; ---------------------------------------------------------------------------
00016B5C                            Map_obj6E:
00016B5C                            	include "_maps\obj6E.asm"
00016B5C                            Map_26ed:
00016B5C 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016B5E 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016B60 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016B62 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016B64 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016B66 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016B68 01                         Map_26ed_C: 	dc.b $1
00016B69 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016B6E 02                         Map_26ed_12: 	dc.b $2
00016B6F F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B74 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B79 06                         Map_26ed_1D: 	dc.b $6
00016B7A F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B7F 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B84 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016B89 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B8E F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B93 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B98 08                         Map_26ed_3C: 	dc.b $8
00016B99 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B9E 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BA3 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016BA8 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016BAD F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016BB2 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016BB7 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016BBC F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016BC1 06                         Map_26ed_65: 	dc.b $6
00016BC2 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016BC7 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BCC F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016BD1 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016BD6 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016BDB F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016BE0 04                         Map_26ed_84: 	dc.b $4
00016BE1 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016BE6 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BEB F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016BF0 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016BF6 00                         	even
00016BF6 00                         	even
00016BF6                            
00016BF6                            ; ===========================================================================
00016BF6                            ; ---------------------------------------------------------------------------
00016BF6                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016BF6                            ; ---------------------------------------------------------------------------
00016BF6                            
00016BF6                            Obj6F:					; XREF: Obj_Index
00016BF6 7000                       		moveq	#0,d0
00016BF8 1028 0024                  		move.b	$24(a0),d0
00016BFC 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016C00 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016C04 3028 0030                  		move.w	$30(a0),d0
00016C08 0240 FF80                  		andi.w	#$FF80,d0
00016C0C 3238 F700                  		move.w	($FFFFF700).w,d1
00016C10 0441 0080                  		subi.w	#$80,d1
00016C14 0241 FF80                  		andi.w	#$FF80,d1
00016C18 9041                       		sub.w	d1,d0
00016C1A 0C40 0280                  		cmpi.w	#$280,d0
00016C1E 6200                       		bhi.s	loc_1629A
00016C20                            
00016C20                            Obj6F_Display:
00016C20 4EF9 0000 DE84             		jmp	DisplaySprite
00016C26                            ; ===========================================================================
00016C26                            
00016C26                            loc_1629A:
00016C26 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016C2C 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016C2E 0C40 FF80                  		cmpi.w	#-$80,d0
00016C32 64EC                       		bcc.s	Obj6F_Display
00016C34                            
00016C34                            Obj6F_Act1or2:
00016C34 1028 002F                  		move.b	$2F(a0),d0
00016C38 6A00                       		bpl.s	Obj6F_Delete
00016C3A 0240 007F                  		andi.w	#$7F,d0
00016C3E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016C42 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016C48                            
00016C48                            Obj6F_Delete:
00016C48 4EF9 0000 DEC0             		jmp	DeleteObject
00016C4E                            ; ===========================================================================
00016C4E 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016C50 0000                       		dc.w loc_163D8-Obj6F_Index
00016C52                            ; ===========================================================================
00016C52                            
00016C52                            Obj6F_Main:				; XREF: Obj6F_Index
00016C52 1028 0028                  		move.b	$28(a0),d0
00016C56 6B00 0000                  		bmi.w	loc_16380
00016C5A 5428 0024                  		addq.b	#2,$24(a0)
00016C5E 217C 0001 62B6 0004        		move.l	#Map_obj69a,4(a0)
00016C66 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016C6C 117C 0010 0019             		move.b	#$10,$19(a0)
00016C72 0028 0004 0001             		ori.b	#4,1(a0)
00016C78 117C 0004 0018             		move.b	#4,$18(a0)
00016C7E 7000                       		moveq	#0,d0
00016C80 1028 0028                  		move.b	$28(a0),d0
00016C84 3200                       		move.w	d0,d1
00016C86 E648                       		lsr.w	#3,d0
00016C88 0240 001E                  		andi.w	#$1E,d0
00016C8C 45FA 0000                  		lea	off_164A6(pc),a2
00016C90 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C94 315A 0038                  		move.w	(a2)+,$38(a0)
00016C98 315A 0030                  		move.w	(a2)+,$30(a0)
00016C9C 214A 003C                  		move.l	a2,$3C(a0)
00016CA0 0241 000F                  		andi.w	#$F,d1
00016CA4 E549                       		lsl.w	#2,d1
00016CA6 1141 0038                  		move.b	d1,$38(a0)
00016CAA 117C 0004 003A             		move.b	#4,$3A(a0)
00016CB0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016CB4 6700                       		beq.s	loc_16356
00016CB6 117C 0001 003B             		move.b	#1,$3B(a0)
00016CBC 4428 003A                  		neg.b	$3A(a0)
00016CC0 7200                       		moveq	#0,d1
00016CC2 1228 0038                  		move.b	$38(a0),d1
00016CC6 D228 003A                  		add.b	$3A(a0),d1
00016CCA B228 0039                  		cmp.b	$39(a0),d1
00016CCE 6500                       		bcs.s	loc_16352
00016CD0 1001                       		move.b	d1,d0
00016CD2 7200                       		moveq	#0,d1
00016CD4 4A00                       		tst.b	d0
00016CD6 6A00                       		bpl.s	loc_16352
00016CD8 1228 0039                  		move.b	$39(a0),d1
00016CDC 5901                       		subq.b	#4,d1
00016CDE                            
00016CDE                            loc_16352:
00016CDE 1141 0038                  		move.b	d1,$38(a0)
00016CE2                            
00016CE2                            loc_16356:
00016CE2 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016CE8 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016CEE 4A41                       		tst.w	d1
00016CF0 6600                       		bne.s	loc_1636C
00016CF2 117C 0001 001C             		move.b	#1,$1C(a0)
00016CF8                            
00016CF8                            loc_1636C:
00016CF8 0C41 0008                  		cmpi.w	#8,d1
00016CFC 6600                       		bne.s	loc_16378
00016CFE 117C 0000 001C             		move.b	#0,$1C(a0)
00016D04                            
00016D04                            loc_16378:
00016D04 6100 C0C0                  		bsr.w	Obj63_ChangeDir
00016D08 6000 0000                  		bra.w	loc_163D8
00016D0C                            ; ===========================================================================
00016D0C                            
00016D0C                            loc_16380:				; XREF: Obj6F_Main
00016D0C 1140 002F                  		move.b	d0,$2F(a0)
00016D10 0240 007F                  		andi.w	#$7F,d0
00016D14 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016D18 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016D1E 6700                       		beq.s	loc_1639A
00016D20 4EF9 0000 DEC0             		jmp	DeleteObject
00016D26                            ; ===========================================================================
00016D26                            
00016D26                            loc_1639A:
00016D26 D040                       		add.w	d0,d0
00016D28 0240 001E                  		andi.w	#$1E,d0
00016D2C 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
00016D32 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016D36 321A                       		move.w	(a2)+,d1
00016D38 2248                       		movea.l	a0,a1
00016D3A 6000                       		bra.s	Obj6F_LoadPform
00016D3C                            ; ===========================================================================
00016D3C                            
00016D3C                            Obj6F_Loop:
00016D3C 4EB9 0000 E30A             		jsr	SingleObjLoad
00016D42 6600                       		bne.s	loc_163D0
00016D44                            
00016D44                            Obj6F_LoadPform:			; XREF: loc_1639A
00016D44 12BC 006F                  		move.b	#$6F,0(a1)
00016D48 335A 0008                  		move.w	(a2)+,8(a1)
00016D4C 335A 000C                  		move.w	(a2)+,$C(a1)
00016D50 301A                       		move.w	(a2)+,d0
00016D52 1340 0028                  		move.b	d0,$28(a1)
00016D56                            
00016D56                            loc_163D0:
00016D56 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016D5A                            
00016D5A 588F                       		addq.l	#4,sp
00016D5C 4E75                       		rts	
00016D5E                            ; ===========================================================================
00016D5E                            
00016D5E                            loc_163D8:				; XREF: Obj6F_Index
00016D5E 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016D64 4EB9 0000 AED2             		jsr	AnimateSprite
00016D6A 4A28 001A                  		tst.b	$1A(a0)
00016D6E 6600                       		bne.s	loc_16404
00016D70 3F28 0008                  		move.w	8(a0),-(sp)
00016D74 6100 0000                  		bsr.w	loc_16424
00016D78 323C 001B                  		move.w	#$1B,d1
00016D7C 343C 0007                  		move.w	#7,d2
00016D80 3602                       		move.w	d2,d3
00016D82 5243                       		addq.w	#1,d3
00016D84 381F                       		move.w	(sp)+,d4
00016D86 6000 94CC                  		bra.w	SolidObject
00016D8A                            ; ===========================================================================
00016D8A                            
00016D8A                            loc_16404:
00016D8A 0828 0003 0022             		btst	#3,$22(a0)
00016D90 6700                       		beq.s	loc_16420
00016D92 43F8 D000                  		lea	($FFFFD000).w,a1
00016D96 08A9 0003 0022             		bclr	#3,$22(a1)
00016D9C 08A8 0003 0022             		bclr	#3,$22(a0)
00016DA2 4228 0025                  		clr.b	$25(a0)
00016DA6                            
00016DA6                            loc_16420:
00016DA6 6000 0002                  		bra.w	*+4
00016DAA                            
00016DAA                            loc_16424:
00016DAA 3028 0008                  		move.w	8(a0),d0
00016DAE B068 0034                  		cmp.w	$34(a0),d0
00016DB2 6600                       		bne.s	loc_16484
00016DB4 3028 000C                  		move.w	$C(a0),d0
00016DB8 B068 0036                  		cmp.w	$36(a0),d0
00016DBC 6600                       		bne.s	loc_16484
00016DBE 7200                       		moveq	#0,d1
00016DC0 1228 0038                  		move.b	$38(a0),d1
00016DC4 D228 003A                  		add.b	$3A(a0),d1
00016DC8 B228 0039                  		cmp.b	$39(a0),d1
00016DCC 6500                       		bcs.s	loc_16456
00016DCE 1001                       		move.b	d1,d0
00016DD0 7200                       		moveq	#0,d1
00016DD2 4A00                       		tst.b	d0
00016DD4 6A00                       		bpl.s	loc_16456
00016DD6 1228 0039                  		move.b	$39(a0),d1
00016DDA 5901                       		subq.b	#4,d1
00016DDC                            
00016DDC                            loc_16456:
00016DDC 1141 0038                  		move.b	d1,$38(a0)
00016DE0 2268 003C                  		movea.l	$3C(a0),a1
00016DE4 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016DEA 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016DF0 4A41                       		tst.w	d1
00016DF2 6600                       		bne.s	loc_16474
00016DF4 117C 0001 001C             		move.b	#1,$1C(a0)
00016DFA                            
00016DFA                            loc_16474:
00016DFA 0C41 0008                  		cmpi.w	#8,d1
00016DFE 6600                       		bne.s	loc_16480
00016E00 117C 0000 001C             		move.b	#0,$1C(a0)
00016E06                            
00016E06                            loc_16480:
00016E06 6100 BFBE                  		bsr.w	Obj63_ChangeDir
00016E0A                            
00016E0A                            loc_16484:
00016E0A 4EF9 0000 DE5E             		jmp	SpeedToPos
00016E10                            ; ===========================================================================
00016E10                            Ani_obj6F:
00016E10                            	include "_anim\obj6F.asm"
00016E10                            ; ---------------------------------------------------------------------------
00016E10                            ; Animation script - platform on conveyor belt (SBZ)
00016E10                            ; ---------------------------------------------------------------------------
00016E10 0000                       		dc.w byte_1648E-Ani_obj6F
00016E12 0000                       		dc.w byte_164A2-Ani_obj6F
00016E14 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016E21 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016E28 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016E2C 00                         		even
00016E2C 00                         		even
00016E2C                            
00016E2C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016E32 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016E38 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016E4C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016E60 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016E74 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016E88 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016E9C 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016EB0                            ; ===========================================================================
00016EB0                            ; ---------------------------------------------------------------------------
00016EB0                            ; Object 70 - large girder block (SBZ)
00016EB0                            ; ---------------------------------------------------------------------------
00016EB0                            
00016EB0                            Obj70:					; XREF: Obj_Index
00016EB0 7000                       		moveq	#0,d0
00016EB2 1028 0024                  		move.b	$24(a0),d0
00016EB6 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016EBA 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016EBE                            ; ===========================================================================
00016EBE 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016EC0 0000                       		dc.w Obj70_Action-Obj70_Index
00016EC2                            ; ===========================================================================
00016EC2                            
00016EC2                            Obj70_Main:				; XREF: Obj70_Index
00016EC2 5428 0024                  		addq.b	#2,$24(a0)
00016EC6 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016ECE 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016ED4 0028 0004 0001             		ori.b	#4,1(a0)
00016EDA 117C 0004 0018             		move.b	#4,$18(a0)
00016EE0 117C 0060 0019             		move.b	#$60,$19(a0)
00016EE6 117C 0018 0016             		move.b	#$18,$16(a0)
00016EEC 3168 0008 0032             		move.w	8(a0),$32(a0)
00016EF2 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016EF8 6100 0000                  		bsr.w	Obj70_Move2
00016EFC                            
00016EFC                            Obj70_Action:				; XREF: Obj70_Index
00016EFC 3F28 0008                  		move.w	8(a0),-(sp)
00016F00 4A68 003A                  		tst.w	$3A(a0)
00016F04 6700                       		beq.s	Obj70_Move
00016F06 5368 003A                  		subq.w	#1,$3A(a0)
00016F0A 6600                       		bne.s	Obj70_Solid
00016F0C                            
00016F0C                            Obj70_Move:
00016F0C 4EB9 0000 DE5E             		jsr	SpeedToPos
00016F12 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016F16 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016F18 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016F1C                            
00016F1C                            Obj70_Solid:
00016F1C 381F                       		move.w	(sp)+,d4
00016F1E 4A28 0001                  		tst.b	1(a0)
00016F22 6A00                       		bpl.s	Obj70_ChkDel
00016F24 7200                       		moveq	#0,d1
00016F26 1228 0019                  		move.b	$19(a0),d1
00016F2A 0641 000B                  		addi.w	#$B,d1
00016F2E 7400                       		moveq	#0,d2
00016F30 1428 0016                  		move.b	$16(a0),d2
00016F34 3602                       		move.w	d2,d3
00016F36 5243                       		addq.w	#1,d3
00016F38 6100 931A                  		bsr.w	SolidObject
00016F3C                            
00016F3C                            Obj70_ChkDel:
00016F3C 3028 0032                  		move.w	$32(a0),d0
00016F40 0240 FF80                  		andi.w	#$FF80,d0
00016F44 3238 F700                  		move.w	($FFFFF700).w,d1
00016F48 0441 0080                  		subi.w	#$80,d1
00016F4C 0241 FF80                  		andi.w	#$FF80,d1
00016F50 9041                       		sub.w	d1,d0
00016F52 0C40 0280                  		cmpi.w	#$280,d0
00016F56 6200                       		bhi.s	Obj70_Delete
00016F58 4EF9 0000 DE84             		jmp	DisplaySprite
00016F5E                            ; ===========================================================================
00016F5E                            
00016F5E                            Obj70_Delete:
00016F5E 4EF9 0000 DEC0             		jmp	DeleteObject
00016F64                            ; ===========================================================================
00016F64                            
00016F64                            Obj70_Move2:				; XREF: Obj70_Main
00016F64 1028 0038                  		move.b	$38(a0),d0
00016F68 0240 0018                  		andi.w	#$18,d0
00016F6C 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016F72 43F1 0000                  		lea	(a1,d0.w),a1
00016F76 3159 0010                  		move.w	(a1)+,$10(a0)
00016F7A 3159 0012                  		move.w	(a1)+,$12(a0)
00016F7E 3159 0034                  		move.w	(a1)+,$34(a0)
00016F82 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016F86 317C 0007 003A             		move.w	#7,$3A(a0)
00016F8C 4E75                       		rts	
00016F8E                            ; ===========================================================================
00016F8E 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016F96 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016F9E FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016FA6 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016FAE                            ; ---------------------------------------------------------------------------
00016FAE                            ; Sprite mappings - large girder block (SBZ)
00016FAE                            ; ---------------------------------------------------------------------------
00016FAE                            Map_obj70:
00016FAE                            	include "_maps\obj70.asm"
00016FAE                            ; ---------------------------------------------------------------------------
00016FAE                            ; Sprite mappings - large girder block (SBZ)
00016FAE                            ; ---------------------------------------------------------------------------
00016FAE 0000                       		dc.w byte_1662A-Map_obj70
00016FB0 0C                         byte_1662A:	dc.b $C
00016FB1 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016FB6 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016FBB E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016FC0 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016FC5 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016FCA 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016FCF E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016FD4 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016FD9 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016FDE 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016FE3 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016FE8 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016FEE 00                         		even
00016FEE 00                         		even
00016FEE                            
00016FEE                            ; ===========================================================================
00016FEE                            ; ---------------------------------------------------------------------------
00016FEE                            ; Object 72 - teleporter (SBZ)
00016FEE                            ; ---------------------------------------------------------------------------
00016FEE                            
00016FEE                            Obj72:					; XREF: Obj_Index
00016FEE 7000                       		moveq	#0,d0
00016FF0 1028 0024                  		move.b	$24(a0),d0
00016FF4 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016FF8 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016FFC 3028 0008                  		move.w	8(a0),d0
00017000 0240 FF80                  		andi.w	#$FF80,d0
00017004 3238 F700                  		move.w	($FFFFF700).w,d1
00017008 0441 0080                  		subi.w	#$80,d1
0001700C 0241 FF80                  		andi.w	#$FF80,d1
00017010 9041                       		sub.w	d1,d0
00017012 0C40 0280                  		cmpi.w	#$280,d0
00017016 6200                       		bhi.s	Obj72_Delete
00017018 4E75                       		rts	
0001701A                            ; ===========================================================================
0001701A                            
0001701A                            Obj72_Delete:
0001701A 4EF9 0000 DEC0             		jmp	DeleteObject
00017020                            ; ===========================================================================
00017020 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00017022 0000                       		dc.w loc_166C8-Obj72_Index
00017024 0000                       		dc.w loc_1675E-Obj72_Index
00017026 0000                       		dc.w loc_16798-Obj72_Index
00017028                            ; ===========================================================================
00017028                            
00017028                            Obj72_Main:				; XREF: Obj72_Index
00017028 5428 0024                  		addq.b	#2,$24(a0)
0001702C 1028 0028                  		move.b	$28(a0),d0
00017030 D040                       		add.w	d0,d0
00017032 0240 001E                  		andi.w	#$1E,d0
00017036 45FA 0000                  		lea	Obj72_Data(pc),a2
0001703A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001703E 315A 003A                  		move.w	(a2)+,$3A(a0)
00017042 214A 003C                  		move.l	a2,$3C(a0)
00017046 315A 0036                  		move.w	(a2)+,$36(a0)
0001704A 315A 0038                  		move.w	(a2)+,$38(a0)
0001704E                            
0001704E                            loc_166C8:				; XREF: Obj72_Index
0001704E 43F8 D000                  		lea	($FFFFD000).w,a1
00017052 3029 0008                  		move.w	8(a1),d0
00017056 9068 0008                  		sub.w	8(a0),d0
0001705A 0828 0000 0022             		btst	#0,$22(a0)
00017060 6700                       		beq.s	loc_166E0
00017062 0640 000F                  		addi.w	#$F,d0
00017066                            
00017066                            loc_166E0:
00017066 0C40 0010                  		cmpi.w	#$10,d0
0001706A 6400                       		bcc.s	locret_1675C
0001706C 3229 000C                  		move.w	$C(a1),d1
00017070 9268 000C                  		sub.w	$C(a0),d1
00017074 0641 0020                  		addi.w	#$20,d1
00017078 0C41 0040                  		cmpi.w	#$40,d1
0001707C 6400                       		bcc.s	locret_1675C
0001707E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017082 6600                       		bne.s	locret_1675C
00017084 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001708A 6600                       		bne.s	loc_1670E
0001708C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00017092 6500                       		bcs.s	locret_1675C
00017094                            
00017094                            loc_1670E:
00017094 5428 0024                  		addq.b	#2,$24(a0)
00017098 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001709E 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000170A4 337C 0800 0014             		move.w	#$800,$14(a1)
000170AA 337C 0000 0010             		move.w	#0,$10(a1)
000170B0 337C 0000 0012             		move.w	#0,$12(a1)
000170B6 08A8 0005 0022             		bclr	#5,$22(a0)
000170BC 08A9 0005 0022             		bclr	#5,$22(a1)
000170C2 08E9 0001 0022             		bset	#1,$22(a1)
000170C8 3368 0008 0008             		move.w	8(a0),8(a1)
000170CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000170D4 4228 0032                  		clr.b	$32(a0)
000170D8 303C 00BE                  		move.w	#$BE,d0
000170DC 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000170E2                            
000170E2                            locret_1675C:
000170E2 4E75                       		rts	
000170E4                            ; ===========================================================================
000170E4                            
000170E4                            loc_1675E:				; XREF: Obj72_Index
000170E4 43F8 D000                  		lea	($FFFFD000).w,a1
000170E8 1028 0032                  		move.b	$32(a0),d0
000170EC 5428 0032                  		addq.b	#2,$32(a0)
000170F0 4EB9 0000 2B58             		jsr	(CalcSine).l
000170F6 EA40                       		asr.w	#5,d0
000170F8 3428 000C                  		move.w	$C(a0),d2
000170FC 9440                       		sub.w	d0,d2
000170FE 3342 000C                  		move.w	d2,$C(a1)
00017102 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00017108 6600                       		bne.s	locret_16796
0001710A 6100 0000                  		bsr.w	sub_1681C
0001710E 5428 0024                  		addq.b	#2,$24(a0)
00017112 303C 00BC                  		move.w	#$BC,d0
00017116 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play teleport sound
0001711C                            
0001711C                            locret_16796:
0001711C 4E75                       		rts	
0001711E                            ; ===========================================================================
0001711E                            
0001711E                            loc_16798:				; XREF: Obj72_Index
0001711E 588F                       		addq.l	#4,sp
00017120 43F8 D000                  		lea	($FFFFD000).w,a1
00017124 5328 002E                  		subq.b	#1,$2E(a0)
00017128 6A00                       		bpl.s	loc_167DA
0001712A 3368 0036 0008             		move.w	$36(a0),8(a1)
00017130 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017136 7200                       		moveq	#0,d1
00017138 1228 003A                  		move.b	$3A(a0),d1
0001713C 5801                       		addq.b	#4,d1
0001713E B228 003B                  		cmp.b	$3B(a0),d1
00017142 6500                       		bcs.s	loc_167C2
00017144 7200                       		moveq	#0,d1
00017146 6000                       		bra.s	loc_16800
00017148                            ; ===========================================================================
00017148                            
00017148                            loc_167C2:
00017148 1141 003A                  		move.b	d1,$3A(a0)
0001714C 2468 003C                  		movea.l	$3C(a0),a2
00017150 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017156 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001715C 6000 0000                  		bra.w	sub_1681C
00017160                            ; ===========================================================================
00017160                            
00017160                            loc_167DA:
00017160 2429 0008                  		move.l	8(a1),d2
00017164 2629 000C                  		move.l	$C(a1),d3
00017168 3029 0010                  		move.w	$10(a1),d0
0001716C 48C0                       		ext.l	d0
0001716E E180                       		asl.l	#8,d0
00017170 D480                       		add.l	d0,d2
00017172 3029 0012                  		move.w	$12(a1),d0
00017176 48C0                       		ext.l	d0
00017178 E180                       		asl.l	#8,d0
0001717A D680                       		add.l	d0,d3
0001717C 2342 0008                  		move.l	d2,8(a1)
00017180 2343 000C                  		move.l	d3,$C(a1)
00017184 4E75                       		rts	
00017186                            ; ===========================================================================
00017186                            
00017186                            loc_16800:
00017186 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
0001718C 4228 0024                  		clr.b	$24(a0)
00017190 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017194 337C 0000 0010             		move.w	#0,$10(a1)
0001719A 337C 0200 0012             		move.w	#$200,$12(a1)
000171A0 4E75                       		rts	
000171A2                            
000171A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000171A2                            
000171A2                            
000171A2                            sub_1681C:
000171A2 7000                       		moveq	#0,d0
000171A4 343C 1000                  		move.w	#$1000,d2
000171A8 3028 0036                  		move.w	$36(a0),d0
000171AC 9069 0008                  		sub.w	8(a1),d0
000171B0 6C00                       		bge.s	loc_16830
000171B2 4440                       		neg.w	d0
000171B4 4442                       		neg.w	d2
000171B6                            
000171B6                            loc_16830:
000171B6 7200                       		moveq	#0,d1
000171B8 363C 1000                  		move.w	#$1000,d3
000171BC 3228 0038                  		move.w	$38(a0),d1
000171C0 9269 000C                  		sub.w	$C(a1),d1
000171C4 6C00                       		bge.s	loc_16844
000171C6 4441                       		neg.w	d1
000171C8 4443                       		neg.w	d3
000171CA                            
000171CA                            loc_16844:
000171CA B240                       		cmp.w	d0,d1
000171CC 6500                       		bcs.s	loc_1687A
000171CE 7200                       		moveq	#0,d1
000171D0 3228 0038                  		move.w	$38(a0),d1
000171D4 9269 000C                  		sub.w	$C(a1),d1
000171D8 4841                       		swap	d1
000171DA 83C3                       		divs.w	d3,d1
000171DC 7000                       		moveq	#0,d0
000171DE 3028 0036                  		move.w	$36(a0),d0
000171E2 9069 0008                  		sub.w	8(a1),d0
000171E6 6700                       		beq.s	loc_16866
000171E8 4840                       		swap	d0
000171EA 81C1                       		divs.w	d1,d0
000171EC                            
000171EC                            loc_16866:
000171EC 3340 0010                  		move.w	d0,$10(a1)
000171F0 3343 0012                  		move.w	d3,$12(a1)
000171F4 4A41                       		tst.w	d1
000171F6 6A00                       		bpl.s	loc_16874
000171F8 4441                       		neg.w	d1
000171FA                            
000171FA                            loc_16874:
000171FA 3141 002E                  		move.w	d1,$2E(a0)
000171FE 4E75                       		rts	
00017200                            ; ===========================================================================
00017200                            
00017200                            loc_1687A:
00017200 7000                       		moveq	#0,d0
00017202 3028 0036                  		move.w	$36(a0),d0
00017206 9069 0008                  		sub.w	8(a1),d0
0001720A 4840                       		swap	d0
0001720C 81C2                       		divs.w	d2,d0
0001720E 7200                       		moveq	#0,d1
00017210 3228 0038                  		move.w	$38(a0),d1
00017214 9269 000C                  		sub.w	$C(a1),d1
00017218 6700                       		beq.s	loc_16898
0001721A 4841                       		swap	d1
0001721C 83C0                       		divs.w	d0,d1
0001721E                            
0001721E                            loc_16898:
0001721E 3341 0012                  		move.w	d1,$12(a1)
00017222 3342 0010                  		move.w	d2,$10(a1)
00017226 4A40                       		tst.w	d0
00017228 6A00                       		bpl.s	loc_168A6
0001722A 4440                       		neg.w	d0
0001722C                            
0001722C                            loc_168A6:
0001722C 3140 002E                  		move.w	d0,$2E(a0)
00017230 4E75                       		rts	
00017232                            ; End of function sub_1681C
00017232                            
00017232                            ; ===========================================================================
00017232 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017238 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001723E 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017242 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017248 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001724E 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017254 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001725A 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017260 0884 0298 0894             		dc.w $884, $298, $894
00017266 0270 0894 0190             		dc.w $270, $894, $190
0001726C 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00017272 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017278 1184 0498 1158             		dc.w $1184, $498, $1158
0001727E 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017284 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001728A 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017290 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017296 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
0001729C 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000172A2 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000172A8 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000172AE FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000172B4 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000172BA                            ; ===========================================================================
000172BA                            ; ---------------------------------------------------------------------------
000172BA                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000172BA                            ; ---------------------------------------------------------------------------
000172BA                            
000172BA                            Obj78:					; XREF: Obj_Index
000172BA 7000                       		moveq	#0,d0
000172BC 1028 0024                  		move.b	$24(a0),d0
000172C0 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000172C4 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000172C8                            ; ===========================================================================
000172C8 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000172CA 0000                       		dc.w Obj78_Action-Obj78_Index
000172CC 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000172CE 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000172D0 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000172D2 0000                       		dc.w Obj78_Delete-Obj78_Index
000172D4 0000                       		dc.w loc_16CC0-Obj78_Index
000172D6                            ; ===========================================================================
000172D6                            
000172D6                            locret_16950:
000172D6 4E75                       		rts	
000172D8                            ; ===========================================================================
000172D8                            
000172D8                            Obj78_Main:				; XREF: Obj78_Index
000172D8 117C 0007 0016             		move.b	#7,$16(a0)
000172DE 117C 0008 0017             		move.b	#8,$17(a0)
000172E4 4EB9 0000 DDEC             		jsr	ObjectFall
000172EA 4EBA E4AA                  		jsr	ObjHitFloor
000172EE 4A41                       		tst.w	d1
000172F0 6AE4                       		bpl.s	locret_16950
000172F2 D368 000C                  		add.w	d1,$C(a0)
000172F6 4268 0012                  		clr.w	$12(a0)
000172FA 5428 0024                  		addq.b	#2,$24(a0)
000172FE 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00017306 317C 22B0 0002             		move.w	#$22B0,2(a0)
0001730C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017312 6700                       		beq.s	loc_16996
00017314 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001731A                            
0001731A                            loc_16996:
0001731A 0228 0003 0001             		andi.b	#3,1(a0)
00017320 0028 0004 0001             		ori.b	#4,1(a0)
00017326 1168 0001 0022             		move.b	1(a0),$22(a0)
0001732C 117C 0004 0018             		move.b	#4,$18(a0)
00017332 117C 0008 0019             		move.b	#8,$19(a0)
00017338 117C 000B 0020             		move.b	#$B,$20(a0)
0001733E 3428 0008                  		move.w	8(a0),d2
00017342 7A0C                       		moveq	#$C,d5
00017344 0828 0000 0022             		btst	#0,$22(a0)
0001734A 6700                       		beq.s	loc_169CA
0001734C 4445                       		neg.w	d5
0001734E                            
0001734E                            loc_169CA:
0001734E 1C3C 0004                  		move.b	#4,d6
00017352 7600                       		moveq	#0,d3
00017354 7804                       		moveq	#4,d4
00017356 2448                       		movea.l	a0,a2
00017358 7202                       		moveq	#2,d1
0001735A                            
0001735A                            Obj78_LoadBody:
0001735A 4EB9 0000 E320             		jsr	SingleObjLoad2
00017360 6600                       		bne.s	Obj78_QuitLoad
00017362 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017366 1346 0024                  		move.b	d6,$24(a1)
0001736A 5406                       		addq.b	#2,d6
0001736C 2368 0004 0004             		move.l	4(a0),4(a1)
00017372 3368 0002 0002             		move.w	2(a0),2(a1)
00017378 137C 0005 0018             		move.b	#5,$18(a1)
0001737E 137C 0008 0019             		move.b	#8,$19(a1)
00017384 137C 00CB 0020             		move.b	#$CB,$20(a1)
0001738A D445                       		add.w	d5,d2
0001738C 3342 0008                  		move.w	d2,8(a1)
00017390 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017396 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001739C 1368 0022 0001             		move.b	$22(a0),1(a1)
000173A2 137C 0008 001A             		move.b	#8,$1A(a1)
000173A8 234A 003C                  		move.l	a2,$3C(a1)
000173AC 1344 003C                  		move.b	d4,$3C(a1)
000173B0 5804                       		addq.b	#4,d4
000173B2 2449                       		movea.l	a1,a2
000173B4                            
000173B4                            Obj78_QuitLoad:
000173B4 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000173B8                            
000173B8 117C 0007 002A             		move.b	#7,$2A(a0)
000173BE 4228 003C                  		clr.b	$3C(a0)
000173C2                            
000173C2                            Obj78_Action:				; XREF: Obj78_Index
000173C2 4A28 0022                  		tst.b	$22(a0)
000173C6 6B00 0000                  		bmi.w	loc_16C96
000173CA 7000                       		moveq	#0,d0
000173CC 1028 0025                  		move.b	$25(a0),d0
000173D0 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000173D4 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000173D8 1228 002B                  		move.b	$2B(a0),d1
000173DC 6A00                       		bpl.s	Obj78_Display
000173DE 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000173E4 1028 0026                  		move.b	$26(a0),d0
000173E8 0240 007F                  		andi.w	#$7F,d0
000173EC 5828 0026                  		addq.b	#4,$26(a0)
000173F0 1031 0000                  		move.b	(a1,d0.w),d0
000173F4 6A00                       		bpl.s	Obj78_AniHead
000173F6 08A8 0007 002B             		bclr	#7,$2B(a0)
000173FC 6000                       		bra.s	Obj78_Display
000173FE                            ; ===========================================================================
000173FE                            
000173FE                            Obj78_AniHead:
000173FE 0201 0010                  		andi.b	#$10,d1
00017402 D001                       		add.b	d1,d0
00017404 1140 001A                  		move.b	d0,$1A(a0)
00017408                            
00017408                            Obj78_Display:
00017408 3028 0008                  		move.w	8(a0),d0
0001740C 0240 FF80                  		andi.w	#$FF80,d0
00017410 3238 F700                  		move.w	($FFFFF700).w,d1
00017414 0441 0080                  		subi.w	#$80,d1
00017418 0241 FF80                  		andi.w	#$FF80,d1
0001741C 9041                       		sub.w	d1,d0
0001741E 0C40 0280                  		cmpi.w	#$280,d0
00017422 6200 0000                  		bhi.w	Obj78_ChkGone
00017426 4EF9 0000 DE84             		jmp	DisplaySprite
0001742C                            ; ===========================================================================
0001742C                            
0001742C                            Obj78_ChkGone:
0001742C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017430 7000                       		moveq	#0,d0
00017432 1028 0023                  		move.b	$23(a0),d0
00017436 6700                       		beq.s	loc_16ABC
00017438 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001743E                            
0001743E                            loc_16ABC:
0001743E 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017444 4E75                       		rts	
00017446                            ; ===========================================================================
00017446                            
00017446                            Obj78_Delete:				; XREF: Obj78_Index
00017446 4EF9 0000 DEC0             		jmp	DeleteObject
0001744C                            ; ===========================================================================
0001744C 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001744E 0000                       		dc.w loc_16B02-Obj78_Index2
00017450                            ; ===========================================================================
00017450                            
00017450                            Obj78_Move:				; XREF: Obj78_Index2
00017450 5328 002A                  		subq.b	#1,$2A(a0)
00017454 6B00                       		bmi.s	Obj78_Move2
00017456 4E75                       		rts	
00017458                            ; ===========================================================================
00017458                            
00017458                            Obj78_Move2:
00017458 5428 0025                  		addq.b	#2,$25(a0)
0001745C 117C 0010 002A             		move.b	#$10,$2A(a0)
00017462 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017468 317C 0040 0014             		move.w	#$40,$14(a0)
0001746E 0868 0004 002B             		bchg	#4,$2B(a0)
00017474 6600                       		bne.s	loc_16AFC
00017476 4268 0010                  		clr.w	$10(a0)
0001747A 4468 0014                  		neg.w	$14(a0)
0001747E                            
0001747E                            loc_16AFC:
0001747E 08E8 0007 002B             		bset	#7,$2B(a0)
00017484                            
00017484                            loc_16B02:				; XREF: Obj78_Index2
00017484 5328 002A                  		subq.b	#1,$2A(a0)
00017488 6B00                       		bmi.s	loc_16B5E
0001748A 2F28 0008                  		move.l	8(a0),-(sp)
0001748E 2428 0008                  		move.l	8(a0),d2
00017492 3028 0010                  		move.w	$10(a0),d0
00017496 0828 0000 0022             		btst	#0,$22(a0)
0001749C 6700                       		beq.s	loc_16B1E
0001749E 4440                       		neg.w	d0
000174A0                            
000174A0                            loc_16B1E:
000174A0 48C0                       		ext.l	d0
000174A2 E180                       		asl.l	#8,d0
000174A4 D480                       		add.l	d0,d2
000174A6 2142 0008                  		move.l	d2,8(a0)
000174AA 4EBA E2EA                  		jsr	ObjHitFloor
000174AE 241F                       		move.l	(sp)+,d2
000174B0 0C41 FFF8                  		cmpi.w	#-8,d1
000174B4 6D00                       		blt.s	loc_16B70
000174B6 0C41 000C                  		cmpi.w	#$C,d1
000174BA 6C00                       		bge.s	loc_16B70
000174BC D368 000C                  		add.w	d1,$C(a0)
000174C0 4842                       		swap	d2
000174C2 B468 0008                  		cmp.w	8(a0),d2
000174C6 6700                       		beq.s	locret_16B5C
000174C8 7000                       		moveq	#0,d0
000174CA 1028 003C                  		move.b	$3C(a0),d0
000174CE 5228 003C                  		addq.b	#1,$3C(a0)
000174D2 0228 000F 003C             		andi.b	#$F,$3C(a0)
000174D8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000174DC                            
000174DC                            locret_16B5C:
000174DC 4E75                       		rts	
000174DE                            ; ===========================================================================
000174DE                            
000174DE                            loc_16B5E:
000174DE 5528 0025                  		subq.b	#2,$25(a0)
000174E2 117C 0007 002A             		move.b	#7,$2A(a0)
000174E8 317C 0000 0010             		move.w	#0,$10(a0)
000174EE 4E75                       		rts	
000174F0                            ; ===========================================================================
000174F0                            
000174F0                            loc_16B70:
000174F0 2142 0008                  		move.l	d2,8(a0)
000174F4 0868 0000 0022             		bchg	#0,$22(a0)
000174FA 1168 0022 0001             		move.b	$22(a0),1(a0)
00017500 7000                       		moveq	#0,d0
00017502 1028 003C                  		move.b	$3C(a0),d0
00017506 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001750C 5228 003C                  		addq.b	#1,$3C(a0)
00017510 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017516 4E75                       		rts	
00017518                            ; ===========================================================================
00017518                            
00017518                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017518 2268 003C                  		movea.l	$3C(a0),a1
0001751C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017522 6A00                       		bpl.s	Obj78_BodySeg1
00017524 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001752A 1028 0026                  		move.b	$26(a0),d0
0001752E 0240 007F                  		andi.w	#$7F,d0
00017532 5828 0026                  		addq.b	#4,$26(a0)
00017536 4A31 0004                  		tst.b	4(a1,d0.w)
0001753A 6A00                       		bpl.s	Obj78_AniBody
0001753C 5828 0026                  		addq.b	#4,$26(a0)
00017540                            
00017540                            Obj78_AniBody:
00017540 1031 0000                  		move.b	(a1,d0.w),d0
00017544 5000                       		addq.b	#8,d0
00017546 1140 001A                  		move.b	d0,$1A(a0)
0001754A                            
0001754A                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001754A 2268 003C                  		movea.l	$3C(a0),a1
0001754E 4A28 0022                  		tst.b	$22(a0)
00017552 6B00 0000                  		bmi.w	loc_16C90
00017556 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001755C 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017562 6700 0000                  		beq.w	loc_16C64
00017566 3169 0014 0014             		move.w	$14(a1),$14(a0)
0001756C 3029 0010                  		move.w	$10(a1),d0
00017570 D069 0014                  		add.w	$14(a1),d0
00017574 3140 0010                  		move.w	d0,$10(a0)
00017578 2428 0008                  		move.l	8(a0),d2
0001757C 2602                       		move.l	d2,d3
0001757E 3028 0010                  		move.w	$10(a0),d0
00017582 0828 0000 0022             		btst	#0,$22(a0)
00017588 6700                       		beq.s	loc_16C0C
0001758A 4440                       		neg.w	d0
0001758C                            
0001758C                            loc_16C0C:
0001758C 48C0                       		ext.l	d0
0001758E E180                       		asl.l	#8,d0
00017590 D480                       		add.l	d0,d2
00017592 2142 0008                  		move.l	d2,8(a0)
00017596 4843                       		swap	d3
00017598 B668 0008                  		cmp.w	8(a0),d3
0001759C 6700                       		beq.s	loc_16C64
0001759E 7000                       		moveq	#0,d0
000175A0 1028 003C                  		move.b	$3C(a0),d0
000175A4 1231 002C                  		move.b	$2C(a1,d0.w),d1
000175A8 0C01 0080                  		cmpi.b	#-$80,d1
000175AC 6600                       		bne.s	loc_16C50
000175AE 4843                       		swap	d3
000175B0 2143 0008                  		move.l	d3,8(a0)
000175B4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000175B8 0868 0000 0022             		bchg	#0,$22(a0)
000175BE 1168 0022 0001             		move.b	$22(a0),1(a0)
000175C4 5228 003C                  		addq.b	#1,$3C(a0)
000175C8 0228 000F 003C             		andi.b	#$F,$3C(a0)
000175CE 6000                       		bra.s	loc_16C64
000175D0                            ; ===========================================================================
000175D0                            
000175D0                            loc_16C50:
000175D0 4881                       		ext.w	d1
000175D2 D368 000C                  		add.w	d1,$C(a0)
000175D6 5228 003C                  		addq.b	#1,$3C(a0)
000175DA 0228 000F 003C             		andi.b	#$F,$3C(a0)
000175E0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000175E4                            
000175E4                            loc_16C64:
000175E4 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000175EA 6700                       		beq.s	loc_16C90
000175EC 0C11 0027                  		cmpi.b	#$27,0(a1)
000175F0 6700                       		beq.s	loc_16C7C
000175F2 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000175F8 6600                       		bne.s	loc_16C82
000175FA                            
000175FA                            loc_16C7C:
000175FA 117C 000A 0024             		move.b	#$A,$24(a0)
00017600                            
00017600                            loc_16C82:
00017600 4EF9 0000 DE84             		jmp	DisplaySprite
00017606                            
00017606                            ; ===========================================================================
00017606 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001760E                            ; ===========================================================================
0001760E                            
0001760E                            loc_16C90:
0001760E 08E9 0007 0022             		bset	#7,$22(a1)
00017614                            
00017614                            loc_16C96:
00017614 7000                       		moveq	#0,d0
00017616 1028 0024                  		move.b	$24(a0),d0
0001761A 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001761E 0828 0000 0022             		btst	#0,$22(a0)
00017624 6700                       		beq.s	loc_16CAA
00017626 4440                       		neg.w	d0
00017628                            
00017628                            loc_16CAA:
00017628 3140 0010                  		move.w	d0,$10(a0)
0001762C 317C FC00 0012             		move.w	#-$400,$12(a0)
00017632 117C 000C 0024             		move.b	#$C,$24(a0)
00017638 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001763E                            
0001763E                            loc_16CC0:				; XREF: Obj78_Index
0001763E 4EB9 0000 DDEC             		jsr	ObjectFall
00017644 4A68 0012                  		tst.w	$12(a0)
00017648 6B00                       		bmi.s	loc_16CE0
0001764A 4EBA E14A                  		jsr	ObjHitFloor
0001764E 4A41                       		tst.w	d1
00017650 6A00                       		bpl.s	loc_16CE0
00017652 D368 000C                  		add.w	d1,$C(a0)
00017656 317C FC00 0012             		move.w	#-$400,$12(a0)
0001765C                            
0001765C                            loc_16CE0:
0001765C 4A28 0001                  		tst.b	1(a0)
00017660 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017664 4EF9 0000 DE84             		jmp	DisplaySprite
0001766A                            ; ===========================================================================
0001766A                            Ani_obj78:
0001766A                            	include "_anim\obj78.asm"
0001766A                            ; ---------------------------------------------------------------------------
0001766A                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001766A                            ; ---------------------------------------------------------------------------
0001766A 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001767A 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001768A 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001769A 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000176AA 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000176BA 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000176CA 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000176DA 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000176EA                            	even
000176EA                            	even
000176EA                            
000176EA                            ; ---------------------------------------------------------------------------
000176EA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000176EA                            ; ---------------------------------------------------------------------------
000176EA                            Map_obj78:
000176EA                            	include "_maps\obj78.asm"
000176EA                            ; ---------------------------------------------------------------------------
000176EA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000176EA                            ; ---------------------------------------------------------------------------
000176EA 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000176EE 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000176F2 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000176F6 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000176FA 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000176FE 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017702 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017706 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001770A 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001770E 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017712 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017716 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001771A 01                         byte_16D9E:	dc.b 1
0001771B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017720 01                         byte_16DA4:	dc.b 1
00017721 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017726 01                         byte_16DAA:	dc.b 1
00017727 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001772C 01                         byte_16DB0:	dc.b 1
0001772D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017732 01                         byte_16DB6:	dc.b 1
00017733 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017738 01                         byte_16DBC:	dc.b 1
00017739 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001773E 01                         byte_16DC2:	dc.b 1
0001773F EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017744 01                         byte_16DC8:	dc.b 1
00017745 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001774A 01                         byte_16DCE:	dc.b 1
0001774B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017750 01                         byte_16DD4:	dc.b 1
00017751 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017756 01                         byte_16DDA:	dc.b 1
00017757 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001775C 01                         byte_16DE0:	dc.b 1
0001775D F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017762 01                         byte_16DE6:	dc.b 1
00017763 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017768 01                         byte_16DEC:	dc.b 1
00017769 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001776E 01                         byte_16DF2:	dc.b 1
0001776F F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017774 01                         byte_16DF8:	dc.b 1
00017775 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001777A 01                         byte_16DFE:	dc.b 1
0001777B F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017780 01                         byte_16E04:	dc.b 1
00017781 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017786 01                         byte_16E0A:	dc.b 1
00017787 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001778C 01                         byte_16E10:	dc.b 1
0001778D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017792 01                         byte_16E16:	dc.b 1
00017793 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017798 01                         byte_16E1C:	dc.b 1
00017799 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001779E 01                         byte_16E22:	dc.b 1
0001779F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000177A4 01                         byte_16E28:	dc.b 1
000177A5 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000177AA                            		even
000177AA                            		even
000177AA                            
000177AA                            ; ===========================================================================
000177AA                            ; ---------------------------------------------------------------------------
000177AA                            ; Object 79 - lamppost
000177AA                            ; ---------------------------------------------------------------------------
000177AA                            
000177AA                            Obj79:					; XREF: Obj_Index
000177AA 7000                       		moveq	#0,d0
000177AC 1028 0024                  		move.b	$24(a0),d0
000177B0 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000177B4 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000177B8 4EFA 8772                  		jmp	MarkObjGone
000177BC                            ; ===========================================================================
000177BC 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000177BE 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000177C0 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000177C2 0000                       		dc.w Obj79_Twirl-Obj79_Index
000177C4                            ; ===========================================================================
000177C4                            
000177C4                            Obj79_Main:				; XREF: Obj79_Index
000177C4 5428 0024                  		addq.b	#2,$24(a0)
000177C8 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000177D0 317C 07A0 0002             		move.w	#$7A0,2(a0)
000177D6 117C 0004 0001             		move.b	#4,1(a0)
000177DC 117C 0008 0019             		move.b	#8,$19(a0)
000177E2 117C 0005 0018             		move.b	#5,$18(a0)
000177E8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177EC 7000                       		moveq	#0,d0
000177EE 1028 0023                  		move.b	$23(a0),d0
000177F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000177F8 0832 0000 0002             		btst	#0,2(a2,d0.w)
000177FE 6600                       		bne.s	Obj79_RedLamp
00017800 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017804 0201 007F                  		andi.b	#$7F,d1
00017808 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001780C 0202 007F                  		andi.b	#$7F,d2
00017810 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017812 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017814                            
00017814                            Obj79_RedLamp:
00017814 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001781A 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017820 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017826 4E75                       		rts	
00017828                            ; ===========================================================================
00017828                            
00017828                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017828 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001782C 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017830 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017834 6B00 0000                  		bmi.w	locret_16F90
00017838 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001783C 0201 007F                  		andi.b	#$7F,d1
00017840 1428 0028                  		move.b	$28(a0),d2
00017844 0202 007F                  		andi.b	#$7F,d2
00017848 B202                       		cmp.b	d2,d1
0001784A 6500                       		bcs.s	Obj79_HitLamp
0001784C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017850 7000                       		moveq	#0,d0
00017852 1028 0023                  		move.b	$23(a0),d0
00017856 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001785C 117C 0004 0024             		move.b	#4,$24(a0)
00017862 117C 0003 001A             		move.b	#3,$1A(a0)
00017868 6000 0000                  		bra.w	locret_16F90
0001786C                            ; ===========================================================================
0001786C                            
0001786C                            Obj79_HitLamp:
0001786C 3038 D008                  		move.w	($FFFFD008).w,d0
00017870 9068 0008                  		sub.w	8(a0),d0
00017874 5040                       		addq.w	#8,d0
00017876 0C40 0010                  		cmpi.w	#$10,d0
0001787A 6400 0000                  		bcc.w	locret_16F90
0001787E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017882 9068 000C                  		sub.w	$C(a0),d0
00017886 0640 0040                  		addi.w	#$40,d0
0001788A 0C40 0068                  		cmpi.w	#$68,d0
0001788E 6400                       		bcc.s	locret_16F90
00017890 303C 00A1                  		move.w	#$A1,d0
00017894 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play lamppost sound
0001789A 5428 0024                  		addq.b	#2,$24(a0)
0001789E 4EB9 0000 E30A             		jsr	SingleObjLoad
000178A4 6600                       		bne.s	loc_16F76
000178A6 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000178AA 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000178B0 3368 0008 0030             		move.w	8(a0),$30(a1)
000178B6 3368 000C 0032             		move.w	$C(a0),$32(a1)
000178BC 0469 0018 0032             		subi.w	#$18,$32(a1)
000178C2 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000178CA 337C 07A0 0002             		move.w	#$7A0,2(a1)
000178D0 137C 0004 0001             		move.b	#4,1(a1)
000178D6 137C 0008 0019             		move.b	#8,$19(a1)
000178DC 137C 0004 0018             		move.b	#4,$18(a1)
000178E2 137C 0002 001A             		move.b	#2,$1A(a1)
000178E8 337C 0020 0036             		move.w	#$20,$36(a1)
000178EE                            
000178EE                            loc_16F76:
000178EE 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000178F4 6100 0000                  		bsr.w	Obj79_StoreInfo
000178F8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000178FC 7000                       		moveq	#0,d0
000178FE 1028 0023                  		move.b	$23(a0),d0
00017902 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017908                            
00017908                            locret_16F90:
00017908 4E75                       		rts	
0001790A                            ; ===========================================================================
0001790A                            
0001790A                            Obj79_AfterHit:				; XREF: Obj79_Index
0001790A 4E75                       		rts	
0001790C                            ; ===========================================================================
0001790C                            
0001790C                            Obj79_Twirl:				; XREF: Obj79_Index
0001790C 5368 0036                  		subq.w	#1,$36(a0)
00017910 6A00                       		bpl.s	loc_16FA0
00017912 117C 0004 0024             		move.b	#4,$24(a0)
00017918                            
00017918                            loc_16FA0:
00017918 1028 0026                  		move.b	$26(a0),d0
0001791C 0428 0010 0026             		subi.b	#$10,$26(a0)
00017922 0400 0040                  		subi.b	#$40,d0
00017926 4EB9 0000 2B58             		jsr	(CalcSine).l
0001792C C3FC 0C00                  		muls.w	#$C00,d1
00017930 4841                       		swap	d1
00017932 D268 0030                  		add.w	$30(a0),d1
00017936 3141 0008                  		move.w	d1,8(a0)
0001793A C1FC 0C00                  		muls.w	#$C00,d0
0001793E 4840                       		swap	d0
00017940 D068 0032                  		add.w	$32(a0),d0
00017944 3140 000C                  		move.w	d0,$C(a0)
00017948 4E75                       		rts	
0001794A                            ; ===========================================================================
0001794A                            ; ---------------------------------------------------------------------------
0001794A                            ; Subroutine to	store information when you hit a lamppost
0001794A                            ; ---------------------------------------------------------------------------
0001794A                            
0001794A                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001794A 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017950 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017956 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001795C 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017962 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017968 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001796E 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017974 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001797A 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017980 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017986 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001798C 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017992 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017998 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001799E 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000179A4 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000179AA 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000179B0 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000179B6 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000179BC 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000179C2 4E75                       		rts	
000179C4                            
000179C4                            ; ---------------------------------------------------------------------------
000179C4                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000179C4                            ; ---------------------------------------------------------------------------
000179C4                            
000179C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000179C4                            
000179C4                            
000179C4                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000179C4 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000179CA 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000179D0 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000179D6 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000179DC 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000179E2 4278 FE20                  		clr.w	($FFFFFE20).w
000179E6 4238 FE1B                  		clr.b	($FFFFFE1B).w
000179EA 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000179F0 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000179F6 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000179FA 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017A00 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017A06 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017A0C 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017A12 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017A18 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017A1E 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017A24 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017A2A 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017A30 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017A36 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017A3C 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017A42 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017A48 6600                       		bne.s	loc_170E4
00017A4A 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017A50 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017A56 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017A5C                            
00017A5C                            loc_170E4:
00017A5C 4A38 FE30                  		tst.b	($FFFFFE30).w
00017A60 6A00                       		bpl.s	locret_170F6
00017A62 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017A66 0440 00A0                  		subi.w	#$A0,d0
00017A6A 31C0 F728                  		move.w	d0,($FFFFF728).w
00017A6E                            
00017A6E                            locret_170F6:
00017A6E 4E75                       		rts	
00017A70                            ; End of function Obj79_LoadInfo
00017A70                            
00017A70                            ; ===========================================================================
00017A70                            ; ---------------------------------------------------------------------------
00017A70                            ; Sprite mappings - lamppost
00017A70                            ; ---------------------------------------------------------------------------
00017A70                            Map_obj79:
00017A70                            	include "_maps\obj79.asm"
00017A70                            ; ---------------------------------------------------------------------------
00017A70                            ; Sprite mappings - lamppost
00017A70                            ; ---------------------------------------------------------------------------
00017A70 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017A74 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017A78 06                         byte_17100:	dc.b 6
00017A79 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A7E E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A83 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A88 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A8D D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017A92 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017A97 04                         byte_1711F:	dc.b 4
00017A98 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A9D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017AA2 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017AA7 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017AAC 02                         byte_17134:	dc.b 2
00017AAD F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017AB2 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017AB7 06                         byte_1713F:	dc.b 6
00017AB8 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017ABD E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017AC2 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017AC7 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017ACC D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017AD1 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017AD6                            		even
00017AD6                            		even
00017AD6                            
00017AD6                            ; ===========================================================================
00017AD6                            ; ---------------------------------------------------------------------------
00017AD6                            ; Object 7D - hidden points at the end of a level
00017AD6                            ; ---------------------------------------------------------------------------
00017AD6                            
00017AD6                            Obj7D:					; XREF: Obj_Index
00017AD6 7000                       		moveq	#0,d0
00017AD8 1028 0024                  		move.b	$24(a0),d0
00017ADC 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017AE0 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017AE4                            ; ===========================================================================
00017AE4 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017AE6 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017AE8                            ; ===========================================================================
00017AE8                            
00017AE8                            Obj7D_Main:				; XREF: Obj7D_Index
00017AE8 7410                       		moveq	#$10,d2
00017AEA 3602                       		move.w	d2,d3
00017AEC D643                       		add.w	d3,d3
00017AEE 43F8 D000                  		lea	($FFFFD000).w,a1
00017AF2 3029 0008                  		move.w	8(a1),d0
00017AF6 9068 0008                  		sub.w	8(a0),d0
00017AFA D042                       		add.w	d2,d0
00017AFC B043                       		cmp.w	d3,d0
00017AFE 6400                       		bcc.s	Obj7D_ChkDel
00017B00 3229 000C                  		move.w	$C(a1),d1
00017B04 9268 000C                  		sub.w	$C(a0),d1
00017B08 D242                       		add.w	d2,d1
00017B0A B243                       		cmp.w	d3,d1
00017B0C 6400                       		bcc.s	Obj7D_ChkDel
00017B0E 4A78 FE08                  		tst.w	($FFFFFE08).w
00017B12 6600                       		bne.s	Obj7D_ChkDel
00017B14 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017B18 6600                       		bne.s	Obj7D_ChkDel
00017B1A 5428 0024                  		addq.b	#2,$24(a0)
00017B1E 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017B26 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017B2C 0028 0004 0001             		ori.b	#4,1(a0)
00017B32 117C 0000 0018             		move.b	#0,$18(a0)
00017B38 117C 0010 0019             		move.b	#$10,$19(a0)
00017B3E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017B44 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017B4A 303C 00C9                  		move.w	#$C9,d0
00017B4E 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play bonus sound
00017B54 7000                       		moveq	#0,d0
00017B56 1028 0028                  		move.b	$28(a0),d0
00017B5A D040                       		add.w	d0,d0
00017B5C 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017B60 4EB9 0000 0000             		jsr	AddPoints
00017B66                            
00017B66                            Obj7D_ChkDel:
00017B66 3028 0008                  		move.w	8(a0),d0
00017B6A 0240 FF80                  		andi.w	#$FF80,d0
00017B6E 3238 F700                  		move.w	($FFFFF700).w,d1
00017B72 0441 0080                  		subi.w	#$80,d1
00017B76 0241 FF80                  		andi.w	#$FF80,d1
00017B7A 9041                       		sub.w	d1,d0
00017B7C 0C40 0280                  		cmpi.w	#$280,d0
00017B80 6200                       		bhi.s	Obj7D_Delete
00017B82 4E75                       		rts	
00017B84                            ; ===========================================================================
00017B84                            
00017B84                            Obj7D_Delete:
00017B84 4EF9 0000 DEC0             		jmp	DeleteObject
00017B8A                            ; ===========================================================================
00017B8A 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017B8C 03E8                       		dc.w 1000
00017B8E 0064                       		dc.w 100
00017B90 0001                       		dc.w 1
00017B92                            ; ===========================================================================
00017B92                            
00017B92                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017B92 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017B96 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017B98 3028 0008                  		move.w	8(a0),d0
00017B9C 0240 FF80                  		andi.w	#-$80,d0
00017BA0 3238 F700                  		move.w	($FFFFF700).w,d1
00017BA4 0441 0080                  		subi.w	#$80,d1
00017BA8 0241 FF80                  		andi.w	#-$80,d1
00017BAC 9041                       		sub.w	d1,d0
00017BAE 0C40 0280                  		cmpi.w	#$280,d0
00017BB2 6200                       		bhi.s	Obj7D_Delete2
00017BB4 4EF9 0000 DE84             		jmp	DisplaySprite
00017BBA                            ; ===========================================================================
00017BBA                            
00017BBA                            Obj7D_Delete2:
00017BBA 4EF9 0000 DEC0             		jmp	DeleteObject
00017BC0                            ; ===========================================================================
00017BC0                            ; ---------------------------------------------------------------------------
00017BC0                            ; Sprite mappings - hidden points at the end of	a level
00017BC0                            ; ---------------------------------------------------------------------------
00017BC0                            Map_obj7D:
00017BC0                            	include "_maps\obj7D.asm"
00017BC0                            ; ---------------------------------------------------------------------------
00017BC0                            ; Sprite mappings - hidden points at the end of	a level
00017BC0                            ; ---------------------------------------------------------------------------
00017BC0 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017BC4 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017BC8 00                         byte_17250:	dc.b 0
00017BC9 01                         byte_17251:	dc.b 1
00017BCA F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017BCF 01                         byte_17257:	dc.b 1
00017BD0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017BD5 01                         byte_1725D:	dc.b 1
00017BD6 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017BDC 00                         		even
00017BDC 00                         		even
00017BDC                            
00017BDC                            ; ===========================================================================
00017BDC                            ; ---------------------------------------------------------------------------
00017BDC                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017BDC                            ; ---------------------------------------------------------------------------
00017BDC                            
00017BDC                            Obj8A:					; XREF: Obj_Index
00017BDC 7000                       		moveq	#0,d0
00017BDE 1028 0024                  		move.b	$24(a0),d0
00017BE2 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017BE6 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017BEA                            ; ===========================================================================
00017BEA 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017BEC 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017BEE                            ; ===========================================================================
00017BEE                            
00017BEE                            Obj8A_Main:				; XREF: Obj8A_Index
00017BEE 5428 0024                  		addq.b	#2,$24(a0)
00017BF2 317C 0120 0008             		move.w	#$120,8(a0)
00017BF8 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017BFE 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017C06 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017C0C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017C10 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017C14 117C 0000 0001             		move.b	#0,1(a0)
00017C1A 117C 0000 0018             		move.b	#0,$18(a0)
00017C20 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017C26 6600                       		bne.s	Obj8A_Display	; if not, branch
00017C28 317C 00A6 0002             		move.w	#$A6,2(a0)
00017C2E 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017C34 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017C38 6700                       		beq.s	Obj8A_Display	; if not, branch
00017C3A 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017C40 6600                       		bne.s	Obj8A_Display	; if not, branch
00017C42 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017C48 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017C4E 4EF9 0000 DEC0             		jmp	DeleteObject
00017C54                            ; ===========================================================================
00017C54                            
00017C54                            Obj8A_Display:				; XREF: Obj8A_Index
00017C54 4EF9 0000 DE84             		jmp	DisplaySprite
00017C5A                            ; ===========================================================================
00017C5A                            ; ---------------------------------------------------------------------------
00017C5A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017C5A                            ; ---------------------------------------------------------------------------
00017C5A                            Map_obj8A:
00017C5A                            	include "_maps\obj8A.asm"
00017C5A                            Map_ca8f:
00017C5A 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017C5C 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017C5E 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017C60 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017C62 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017C64 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017C66 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017C68 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017C6A 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017C6C 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017C6E 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017C70 0000                       Map_ca8f_tm: 	dc.w Map_ca8f_tmss-Map_ca8f
00017C72 08                         Map_ca8f_16: 	dc.b $8
00017C73 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017C78 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017C7D F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017C82 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017C87 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017C8C B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017C91 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017C96 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017C9B 10                         Map_ca8f_3F: 	dc.b $10
00017C9C D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017CA1 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017CA6 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017CAB D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017CB0 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017CB5 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017CBA D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017CBF D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017CC4 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017CC9 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017CCE 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017CD3 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017CD8 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017CDD 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017CE2 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017CE7 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017CEC 0A                         Map_ca8f_90: 	dc.b $A
00017CED D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017CF2 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017CF7 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017CFC D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017D01 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017D06 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017D0B D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017D10 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017D15 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017D1A 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017D1F 18                         Map_ca8f_C3: 	dc.b $18
00017D20 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017D25 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017D2A D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017D2F D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017D34 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017D39 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017D3E D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017D43 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017D48 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017D4D D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017D52 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017D57 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017D5C D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017D61 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017D66 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017D6B 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017D70 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017D75 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017D7A 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017D7F 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017D84 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017D89 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017D8E 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017D93 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017D98 14                         Map_ca8f_13C: 	dc.b $14
00017D99 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017D9E D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017DA3 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017DA8 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017DAD D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017DB2 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017DB7 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017DBC 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017DC1 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017DC6 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017DCB 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017DD0 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017DD5 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017DDA 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017DDF 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017DE4 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017DE9 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017DEE 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017DF3 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017DF8 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017DFD 1A                         Map_ca8f_1A1: 	dc.b $1A
00017DFE D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017E03 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017E08 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017E0D D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017E12 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017E17 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017E1C D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017E21 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017E26 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017E2B D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017E30 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017E35 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017E3A 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017E3F 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017E44 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017E49 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017E4E 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017E53 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017E58 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017E5D 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017E62 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017E67 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017E6C 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017E71 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017E76 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017E7B 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017E80 17                         Map_ca8f_224: 	dc.b $17
00017E81 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017E86 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017E8B D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017E90 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017E95 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017E9A D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017E9F D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017EA4 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017EA9 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017EAE D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017EB3 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017EB8 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017EBD 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017EC2 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017EC7 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017ECC 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017ED1 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017ED6 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017EDB 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017EE0 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017EE5 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017EEA 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017EEF 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017EF4 1F                         Map_ca8f_298: 	dc.b $1F
00017EF5 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017EFA D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017EFF D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017F04 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017F09 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017F0E D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017F13 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017F18 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017F1D D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017F22 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017F27 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017F2C D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017F31 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017F36 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017F3B 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017F40 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017F45 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017F4A 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017F4F 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017F54 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017F59 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017F5E 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017F63 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017F68 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017F6D 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017F72 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017F77 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017F7C 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017F81 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017F86 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017F8B 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017F90 0F                         Map_ca8f_334: 	dc.b $F
00017F91 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017F96 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017F9B F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017FA0 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017FA5 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017FAA F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017FAF F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017FB4 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017FB9 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017FBE F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017FC3 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017FC8 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017FCD F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017FD2 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017FD7 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017FDC 08                         Map_ca8f_380: 	dc.b $8
00017FDD 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017FE2 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017FE7 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017FEC 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017FF1 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017FF6 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017FFB 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00018000 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00018005 20                         Map_ca8f_3A9: 	dc.b $20
00018006 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
0001800B ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00018010 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00018015 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
0001801A ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
0001801F ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00018024 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00018029 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
0001802E FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00018033 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00018038 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
0001803D FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00018042 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00018047 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
0001804C 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00018051 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00018056 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
0001805B 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00018060 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00018065 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
0001806A 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
0001806F 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00018074 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00018079 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
0001807E 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00018083 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00018088 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
0001808D 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018092 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00018097 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
0001809C 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
000180A1 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
000180A6 1C                         Map_ca8f_tmss:	dc.b 28
00018134 00                         	even
00018134 00                         	even
00018134                            
00018134                            ; ===========================================================================
00018134                            ; ---------------------------------------------------------------------------
00018134                            ; Object 3D - matthew boss - modified by GK89
00018134                            ; ---------------------------------------------------------------------------
00018134                            
00018134                            Obj3D:					; XREF: Obj_Index
00018134 7000                       		moveq	#0,d0
00018136 1028 0024                  		move.b	$24(a0),d0
0001813A 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001813E 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018142                            ; ===========================================================================
00018142 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018144 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018146 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018148 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001814A                            
0001814A 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0001814C 0401                       		dc.b 4,	1
0001814E 0607                       		dc.b 6,	7
00018150                            ; ===========================================================================
00018150                            
00018150                            Obj3D_Main:				; XREF: Obj3D_Index
00018150 45F9 0001 814A             		lea	(Obj3D_ObjData).l,a2
00018156 2248                       		movea.l	a0,a1
00018158 7202                       		moveq	#2,d1
0001815A 6000                       		bra.s	Obj3D_LoadBoss
0001815C                            ; ===========================================================================
0001815C                            
0001815C                            Obj3D_Loop:
0001815C 4EB9 0000 E320             		jsr	SingleObjLoad2
00018162 6600                       		bne.s	loc_17772
00018164                            
00018164                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018164 135A 0024                  		move.b	(a2)+,$24(a1)
00018168 12BC 003D                  		move.b	#$3D,0(a1)
0001816C 3368 0008 0008             		move.w	8(a0),8(a1)
00018172 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018178 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018180 337C 0400 0002             		move.w	#$400,2(a1)
00018186 137C 0004 0001             		move.b	#4,1(a1)
0001818C 137C 0020 0019             		move.b	#$20,$19(a1)
00018192 137C 0003 0018             		move.b	#3,$18(a1)
00018198 135A 001C                  		move.b	(a2)+,$1C(a1)
0001819C 2348 0034                  		move.l	a0,$34(a1)
000181A0 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000181A4                            
000181A4                            loc_17772:
000181A4 3168 0008 0030             		move.w	8(a0),$30(a0)
000181AA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000181B0 117C 000F 0020             		move.b	#$F,$20(a0)
000181B6 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
000181BC                            
000181BC                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000181BC 7000                       		moveq	#0,d0
000181BE 1028 0025                  		move.b	$25(a0),d0
000181C2 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000181C6 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000181CA 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000181D0 4EB9 0000 AED2             		jsr	AnimateSprite
000181D6 1028 0022                  		move.b	$22(a0),d0
000181DA 0200 0003                  		andi.b	#3,d0
000181DE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000181E4 8128 0001                  		or.b	d0,1(a0)
000181E8 4EF9 0000 DE84             		jmp	DisplaySprite
000181EE                            ; ===========================================================================
000181EE 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000181F0 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000181F2 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000181F4 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000181F6 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000181F8 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000181FA 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000181FC                            ; ===========================================================================
000181FC                            
000181FC                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000181FC 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00018202 6100 0000                  		bsr.w	BossMove
00018206 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001820C 6600                       		bne.s	loc_177E6
0001820E 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018214 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018218                            
00018218                            loc_177E6:
00018218 1028 003F                  		move.b	$3F(a0),d0
0001821C 4EB9 0000 2B58             		jsr	(CalcSine).l
00018222 EC40                       		asr.w	#6,d0
00018224 D068 0038                  		add.w	$38(a0),d0
00018228 3140 000C                  		move.w	d0,$C(a0)
0001822C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018232 5428 003F                  		addq.b	#2,$3F(a0)
00018236 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0001823C 6400                       		bcc.s	locret_1784A
0001823E 4A28 0022                  		tst.b	$22(a0)
00018242 6B00                       		bmi.s	loc_1784C
00018244 4A28 0020                  		tst.b	$20(a0)
00018248 6600                       		bne.s	locret_1784A
0001824A 4A28 003E                  		tst.b	$3E(a0)
0001824E 6600                       		bne.s	Obj3D_ShipFlash
00018250 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018256 303C 00AC                  		move.w	#$AC,d0
0001825A 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018260                            
00018260                            Obj3D_ShipFlash:
00018260 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018264 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018266 4A51                       		tst.w	(a1)
00018268 6600                       		bne.s	loc_1783C
0001826A 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001826E                            
0001826E                            loc_1783C:
0001826E 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018270 5328 003E                  		subq.b	#1,$3E(a0)
00018274 6600                       		bne.s	locret_1784A
00018276 117C 000F 0020             		move.b	#$F,$20(a0)
0001827C                            
0001827C                            locret_1784A:
0001827C 4E75                       		rts	
0001827E                            ; ===========================================================================
0001827E                            
0001827E                            loc_1784C:				; XREF: loc_177E6
0001827E 7064                       		moveq	#100,d0
00018280 6100 0000                  		bsr.w	AddPoints
00018284 117C 0008 0025             		move.b	#8,$25(a0)
0001828A 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018290 4E75                       		rts	
00018292                            
00018292                            ; ---------------------------------------------------------------------------
00018292                            ; Defeated boss	subroutine
00018292                            ; ---------------------------------------------------------------------------
00018292                            
00018292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018292                            
00018292                            
00018292                            BossDefeated:
00018292 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018296 0200 0007                  		andi.b	#7,d0
0001829A 6600                       		bne.s	locret_178A2
0001829C 4EB9 0000 E30A             		jsr	SingleObjLoad
000182A2 6600                       		bne.s	locret_178A2
000182A4 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000182A8 3368 0008 0008             		move.w	8(a0),8(a1)
000182AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000182B4 4EB9 0000 2B32             		jsr	(RandomNumber).l
000182BA 3200                       		move.w	d0,d1
000182BC 7200                       		moveq	#0,d1
000182BE 1200                       		move.b	d0,d1
000182C0 E409                       		lsr.b	#2,d1
000182C2 0441 0020                  		subi.w	#$20,d1
000182C6 D369 0008                  		add.w	d1,8(a1)
000182CA E048                       		lsr.w	#8,d0
000182CC E608                       		lsr.b	#3,d0
000182CE D169 000C                  		add.w	d0,$C(a1)
000182D2                            
000182D2                            locret_178A2:
000182D2 4E75                       		rts	
000182D4                            ; End of function BossDefeated
000182D4                            
000182D4                            ; ---------------------------------------------------------------------------
000182D4                            ; Subroutine to	move a boss
000182D4                            ; ---------------------------------------------------------------------------
000182D4                            
000182D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182D4                            
000182D4                            
000182D4                            BossMove:
000182D4 2428 0030                  		move.l	$30(a0),d2
000182D8 2628 0038                  		move.l	$38(a0),d3
000182DC 3028 0010                  		move.w	$10(a0),d0
000182E0 48C0                       		ext.l	d0
000182E2 E180                       		asl.l	#8,d0
000182E4 D480                       		add.l	d0,d2
000182E6 3028 0012                  		move.w	$12(a0),d0
000182EA 48C0                       		ext.l	d0
000182EC E180                       		asl.l	#8,d0
000182EE D680                       		add.l	d0,d3
000182F0 2142 0030                  		move.l	d2,$30(a0)
000182F4 2143 0038                  		move.l	d3,$38(a0)
000182F8 4E75                       		rts	
000182FA                            ; End of function BossMove
000182FA                            
000182FA                            ; ===========================================================================
000182FA                            
000182FA                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000182FA 6100 FFD8                  		bsr.w	BossMove
000182FE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00018304 6600                       		bne.s	loc_17916
00018306 317C 0000 0010             		move.w	#0,$10(a0)
0001830C 317C 0000 0012             		move.w	#0,$12(a0)
00018312 5428 0025                  		addq.b	#2,$25(a0)
00018316 4EB9 0000 E320             		jsr	SingleObjLoad2
0001831C 6600                       		bne.s	loc_17910
0001831E 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018322 3368 0030 0008             		move.w	$30(a0),8(a1)
00018328 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001832E 2348 0034                  		move.l	a0,$34(a1)
00018332                            
00018332                            loc_17910:
00018332 317C 0077 003C             		move.w	#$77,$3C(a0)
00018338                            
00018338                            loc_17916:
00018338 6000 FEDE                  		bra.w	loc_177E6
0001833C                            ; ===========================================================================
0001833C                            
0001833C                            Obj3D_ShipMove:				; XREF:  sonic follow move
0001833C 5368 003C                  		subq.w	#1,$3C(a0)
00018340 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018346 5428 0025                  		addq.b	#2,$25(a0)
0001834A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018350 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018354 9068 0008                  		sub.w	8(a0),d0		 
00018358 6A00                       		bpl.s	Obj3D_left			 
0001835A 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018360 6000                       		bra.s	Obj3D_right		 
00018362 08A8 0005 0022             		bclr	#5,$22(a0)
00018368 4EB9 0000 0000              		jsr     loc_17950
0001836E 4E75                       		rts
00018370                            ; ===========================================================================
00018370                            
00018370                            Obj3D_right:
00018370 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018376 4E75                       		Rts
00018378                            
00018378                            Obj3D_left:
00018378 317C 0100 0010             		move.w	#$100,$10(a0)	 
0001837E 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018384 6600                       		bne.s	RTSboss  	; if not, branch
00018386 0868 0000 0022              		bchg	#0,$22(a0)
0001838C                            
0001838C                            RTSboss:	    
0001838C 4E75                       		rts
0001838E                             ; ===========================================================================
0001838E                            
0001838E                            Obj3D_UpStuff:
0001838E 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018392 9068 000C                  		sub.w	$C(a0),d0		 
00018396 6A00                       		bpl.s	Obj3D_down			 
00018398 6000                        		bra.s	Obj3D_up		 
0001839A 08A8 0005 0022             		bclr	#5,$22(a0)
000183A0                             
000183A0                            Obj3D_up:		
000183A0 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
000183A6 4E75                        	    rts
000183A8                            
000183A8                            Obj3D_down:
000183A8 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
000183AE                            
000183AE                            loc_17950:
000183AE 6000 FE68                  		bra.w	loc_177E6
000183B2                            ; ===========================================================================
000183B2                            
000183B2                            loc_17954:				; XREF: Obj3D_ShipIndex
000183B2 5368 003C                  		subq.w	#1,$3C(a0)
000183B6 6B00                       		bmi.s	loc_17960
000183B8 6100 FF1A                  		bsr.w	BossMove
000183BC 6000                       		bra.s	loc_17976
000183BE                            ; ===========================================================================
000183BE                            
000183BE                            loc_17960:
000183BE 0868 0000 0022             		bchg	#0,$22(a0)
000183C4 317C 003F 003C             		move.w	#$3F,$3C(a0)
000183CA 5528 0025                  		subq.b	#2,$25(a0)
000183CE 317C 0000 0010             		move.w	#0,$10(a0)
000183D4                            
000183D4                            loc_17976:
000183D4 6000 FE42                  		bra.w	loc_177E6
000183D8                            ; ===========================================================================
000183D8                            
000183D8                            loc_1797A:				; XREF: Obj3D_ShipIndex
000183D8 5368 003C                  		subq.w	#1,$3C(a0)
000183DC 6B00                       		bmi.s	loc_17984
000183DE 6000 FEB2                  		bra.w	BossDefeated
000183E2                            ; ===========================================================================
000183E2                            
000183E2                            loc_17984:
000183E2 08E8 0000 0022             		bset	#0,$22(a0)
000183E8 08A8 0007 0022             		bclr	#7,$22(a0)
000183EE 4268 0010                  		clr.w	$10(a0)
000183F2 5428 0025                  		addq.b	#2,$25(a0)
000183F6 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000183FC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018400 6600                       		bne.s	locret_179AA
00018402 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018408 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0001840E 6000 FE82                  		bra.w	BossDefeated
00018412                            
00018412                            locret_179AA:
00018412 4E75                       		rts	
00018414                            ; ===========================================================================
00018414                            
00018414                            loc_179AC:				; XREF: Obj3D_ShipIndex
00018414 4EB9 0000 DDEC             		jsr ObjectFall		
0001841A 5268 003C                  		addq.w	#1,$3C(a0)
0001841E 6700                       		beq.s	loc_179BC
00018420 6A00                       		bpl.s	loc_179C2
00018422 6000                       		bra.s	loc_179EE
00018424                            ; ===========================================================================
00018424                            
00018424                            loc_179BC:
00018424 4268 0012                  		clr.w	$12(a0)
00018428 6000                       		bra.s	loc_179EE
0001842A                            ; ===========================================================================
0001842A                            
0001842A                            loc_179C2:
0001842A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018430 6500                       		bcs.s	loc_179DA
00018432 6700                       		beq.s	loc_179E0
00018434 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001843A 6500                       		bcs.s	loc_179EE
0001843C 5428 0025                  		addq.b	#2,$25(a0)
00018440 6000                       		bra.s	loc_179EE
00018442                            ; ===========================================================================
00018442                            
00018442                            loc_179DA:
00018442 5168 0012                  		subq.w	#8,$12(a0)
00018446 6000                       		bra.s	loc_179EE
00018448 6000 FE48                  		bra.w	BossDefeated
0001844C                            ; ===========================================================================
0001844C                            
0001844C                            loc_179E0:
0001844C 4268 0012                  		clr.w	$12(a0)
00018450 303C 0081                  		move.w	#$81,d0
00018454 4EB9 0000 13B0             		jsr	(PlaySound).l	; play GHZ music
0001845A                            
0001845A                            loc_179EE:
0001845A 6100 FE78                  		bsr.w	BossMove
0001845E 6000 FDB8                  		bra.w	loc_177E6
00018462                            ; ===========================================================================
00018462                            
00018462                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018462 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018468 6700                       		beq.s	loc_17A10
0001846A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001846E 6000                       		bra.s	loc_17A16
00018470                            ; ===========================================================================
00018470                            
00018470                            loc_17A10:
00018470 4A28 0001                  		tst.b	1(a0)
00018474 6A00                       		bpl.s	Obj3D_ShipDel
00018476                            
00018476                            loc_17A16:
00018476 6100 FE5C                  		bsr.w	BossMove
0001847A 6000 FD9C                  		bra.w	loc_177E6
0001847E                            ; ===========================================================================
0001847E                            
0001847E                            Obj3D_ShipDel:
0001847E 4EF9 0000 DEC0             		jmp	DeleteObject
00018484                            ; ===========================================================================
00018484                            
00018484                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018484 7000                       		moveq	#0,d0
00018486 7201                       		moveq	#1,d1
00018488 2268 0034                  		movea.l	$34(a0),a1
0001848C 1029 0025                  		move.b	$25(a1),d0
00018490 5900                       		subq.b	#4,d0
00018492 6600                       		bne.s	loc_17A3E
00018494 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001849A 6600                       		bne.s	loc_17A46
0001849C 7204                       		moveq	#4,d1
0001849E                            
0001849E                            loc_17A3E:
0001849E 5D00                       		subq.b	#6,d0
000184A0 6B00                       		bmi.s	loc_17A46
000184A2 720A                       		moveq	#$A,d1
000184A4 6000                       		bra.s	loc_17A5A
000184A6                            ; ===========================================================================
000184A6                            
000184A6                            loc_17A46:
000184A6 4A29 0020                  		tst.b	$20(a1)
000184AA 6600                       		bne.s	loc_17A50
000184AC 7205                       		moveq	#5,d1
000184AE 6000                       		bra.s	loc_17A5A
000184B0                            ; ===========================================================================
000184B0                            
000184B0                            loc_17A50:
000184B0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000184B6 6500                       		bcs.s	loc_17A5A
000184B8 7204                       		moveq	#4,d1
000184BA                            
000184BA                            loc_17A5A:
000184BA 1141 001C                  		move.b	d1,$1C(a0)
000184BE 5500                       		subq.b	#2,d0
000184C0 6600                       		bne.s	Obj3D_FaceDisp
000184C2 117C 0006 001C             		move.b	#6,$1C(a0)
000184C8 4A28 0001                  		tst.b	1(a0)
000184CC 6A00                       		bpl.s	Obj3D_FaceDel
000184CE                            
000184CE                            Obj3D_FaceDisp:
000184CE 6000                       		bra.s	Obj3D_Display
000184D0                            ; ===========================================================================
000184D0                            
000184D0                            Obj3D_FaceDel:
000184D0 4EF9 0000 DEC0             		jmp	DeleteObject
000184D6                            ; ===========================================================================
000184D6                            
000184D6                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000184D6 117C 0007 001C             		move.b	#7,$1C(a0)
000184DC 2268 0034                  		movea.l	$34(a0),a1
000184E0 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000184E6 6600                       		bne.s	loc_17A96
000184E8 117C 000B 001C             		move.b	#$B,$1C(a0)
000184EE 4A28 0001                  		tst.b	1(a0)
000184F2 6A00                       		bpl.s	Obj3D_FlameDel
000184F4 6000                       		bra.s	Obj3D_FlameDisp
000184F6                            ; ===========================================================================
000184F6                            
000184F6                            loc_17A96:
000184F6 3029 0010                  		move.w	$10(a1),d0
000184FA 6700                       		beq.s	Obj3D_FlameDisp
000184FC 117C 0008 001C             		move.b	#8,$1C(a0)
00018502                            
00018502                            Obj3D_FlameDisp:
00018502 6000                       		bra.s	Obj3D_Display
00018504                            ; ===========================================================================
00018504                            
00018504                            Obj3D_FlameDel:
00018504 4EF9 0000 DEC0             		jmp	DeleteObject
0001850A                            ; ===========================================================================
0001850A                            
0001850A                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
0001850A 2268 0034                  		movea.l	$34(a0),a1
0001850E 3169 0008 0008             		move.w	8(a1),8(a0)
00018514 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001851A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018520 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018526 4EB9 0000 AED2             		jsr	AnimateSprite
0001852C 1028 0022                  		move.b	$22(a0),d0
00018530 0200 0003                  		andi.b	#3,d0
00018534 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001853A 8128 0001                  		or.b	d0,1(a0)
0001853E 4EF9 0000 DE84             		jmp	DisplaySprite
00018544                            ; ===========================================================================
00018544                            ; ---------------------------------------------------------------------------
00018544                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018544                            ; ---------------------------------------------------------------------------
00018544                            
00018544                            Obj48:					; XREF: Obj_Index
00018544 7000                       		moveq	#0,d0
00018546 1028 0024                  		move.b	$24(a0),d0
0001854A 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001854E 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018552                            ; ===========================================================================
00018552 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018554 0000                       		dc.w Obj48_Base-Obj48_Index
00018556 0000                       		dc.w Obj48_Display2-Obj48_Index
00018558 0000                       		dc.w loc_17C68-Obj48_Index
0001855A 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
0001855C                            ; ===========================================================================
0001855C                            
0001855C                            Obj48_Main:				; XREF: Obj48_Index
0001855C 5428 0024                  		addq.b	#2,$24(a0)
00018560 317C 4080 0026             		move.w	#$4080,$26(a0)
00018566 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001856C 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018574 317C 046C 0002             		move.w	#$46C,2(a0)
0001857A 45E8 0028                  		lea	$28(a0),a2
0001857E 14FC 0000                  		move.b	#0,(a2)+
00018582 7205                       		moveq	#5,d1
00018584 2248                       		movea.l	a0,a1
00018586 6000                       		bra.s	loc_17B60
00018588                            ; ===========================================================================
00018588                            
00018588                            Obj48_MakeLinks:
00018588 4EB9 0000 E320             		jsr	SingleObjLoad2
0001858E 6600                       		bne.s	Obj48_MakeBall
00018590 3368 0008 0008             		move.w	8(a0),8(a1)
00018596 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001859C 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000185A0 137C 0006 0024             		move.b	#6,$24(a1)
000185A6 237C 0000 8286 0004        		move.l	#Map_obj15,4(a1)
000185AE 337C 0380 0002             		move.w	#$380,2(a1)
000185B4 137C 0001 001A             		move.b	#1,$1A(a1)
000185BA 5228 0028                  		addq.b	#1,$28(a0)
000185BE                            
000185BE                            loc_17B60:				; XREF: Obj48_Main
000185BE 3A09                       		move.w	a1,d5
000185C0 0445 D000                  		subi.w	#$D000,d5
000185C4 EC4D                       		lsr.w	#6,d5
000185C6 0245 007F                  		andi.w	#$7F,d5
000185CA 14C5                       		move.b	d5,(a2)+
000185CC 137C 0004 0001             		move.b	#4,1(a1)
000185D2 137C 0008 0019             		move.b	#8,$19(a1)
000185D8 137C 0006 0018             		move.b	#6,$18(a1)
000185DE 2368 0034 0034             		move.l	$34(a0),$34(a1)
000185E4 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000185E8                            
000185E8                            Obj48_MakeBall:
000185E8 137C 0008 0024             		move.b	#8,$24(a1)
000185EE 237C 0000 8876 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000185F6 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000185FC 137C 0001 001A             		move.b	#1,$1A(a1)
00018602 137C 0005 0018             		move.b	#5,$18(a1)
00018608 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
0001860E 4E75                       		rts	
00018610                            ; ===========================================================================
00018610                            
00018610 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018616                            
00018616                            ; ===========================================================================
00018616                            
00018616                            Obj48_Base:				; XREF: Obj48_Index
00018616 47F9 0001 8610             		lea	(Obj48_PosData).l,a3
0001861C 45E8 0028                  		lea	$28(a0),a2
00018620 7C00                       		moveq	#0,d6
00018622 1C1A                       		move.b	(a2)+,d6
00018624                            
00018624                            loc_17BC6:
00018624 7800                       		moveq	#0,d4
00018626 181A                       		move.b	(a2)+,d4
00018628 ED4C                       		lsl.w	#6,d4
0001862A 0684 00FF D000             		addi.l	#$FFD000,d4
00018630 2244                       		movea.l	d4,a1
00018632 101B                       		move.b	(a3)+,d0
00018634 B029 003C                  		cmp.b	$3C(a1),d0
00018638 6700                       		beq.s	loc_17BE0
0001863A 5229 003C                  		addq.b	#1,$3C(a1)
0001863E                            
0001863E                            loc_17BE0:
0001863E 51CE FFE4                  		dbf	d6,loc_17BC6
00018642                            
00018642 B029 003C                  		cmp.b	$3C(a1),d0
00018646 6600                       		bne.s	loc_17BFA
00018648 2268 0034                  		movea.l	$34(a0),a1
0001864C 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018652 6600                       		bne.s	loc_17BFA
00018654 5428 0024                  		addq.b	#2,$24(a0)
00018658                            
00018658                            loc_17BFA:
00018658 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001865E 6700                       		beq.s	Obj48_Display
00018660 5268 0032                  		addq.w	#1,$32(a0)
00018664                            
00018664                            Obj48_Display:
00018664 6100 0000                  		bsr.w	sub_17C2A
00018668 1028 0026                  		move.b	$26(a0),d0
0001866C 4EB9 0000 81F8             		jsr	(Obj15_Move2).l
00018672 4EF9 0000 DE84             		jmp	DisplaySprite
00018678                            ; ===========================================================================
00018678                            
00018678                            Obj48_Display2:				; XREF: Obj48_Index
00018678 6100 0000                  		bsr.w	sub_17C2A
0001867C 4EB9 0000 81B8             		jsr	(Obj48_Move).l
00018682 4EF9 0000 DE84             		jmp	DisplaySprite
00018688                            
00018688                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018688                            
00018688                            
00018688                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018688 2268 0034                  		movea.l	$34(a0),a1
0001868C 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018692 6400                       		bcc.s	loc_17C3C
00018694 0868 0000 001A             		bchg	#0,$1A(a0)
0001869A                            
0001869A                            loc_17C3C:
0001869A 3169 0008 003A             		move.w	8(a1),$3A(a0)
000186A0 3029 000C                  		move.w	$C(a1),d0
000186A4 D068 0032                  		add.w	$32(a0),d0
000186A8 3140 0038                  		move.w	d0,$38(a0)
000186AC 1169 0022 0022             		move.b	$22(a1),$22(a0)
000186B2 4A29 0022                  		tst.b	$22(a1)
000186B6 6A00                       		bpl.s	locret_17C66
000186B8 10BC 003F                  		move.b	#$3F,0(a0)
000186BC 117C 0000 0024             		move.b	#0,$24(a0)
000186C2                            
000186C2                            locret_17C66:
000186C2 4E75                       		rts	
000186C4                            ; End of function sub_17C2A
000186C4                            
000186C4                            ; ===========================================================================
000186C4                            
000186C4                            loc_17C68:				; XREF: Obj48_Index
000186C4 2268 0034                  		movea.l	$34(a0),a1
000186C8 4A29 0022                  		tst.b	$22(a1)
000186CC 6A00                       		bpl.s	Obj48_Display3
000186CE 10BC 003F                  		move.b	#$3F,0(a0)
000186D2 117C 0000 0024             		move.b	#0,$24(a0)
000186D8                            
000186D8                            Obj48_Display3:
000186D8 4EF9 0000 DE84             		jmp	DisplaySprite
000186DE                            ; ===========================================================================
000186DE                            
000186DE                            Obj48_ChkVanish:			; XREF: Obj48_Index
000186DE 7000                       		moveq	#0,d0
000186E0 4A28 001A                  		tst.b	$1A(a0)
000186E4 6600                       		bne.s	Obj48_Vanish
000186E6 5200                       		addq.b	#1,d0
000186E8                            
000186E8                            Obj48_Vanish:
000186E8 1140 001A                  		move.b	d0,$1A(a0)
000186EC 2268 0034                  		movea.l	$34(a0),a1
000186F0 4A29 0022                  		tst.b	$22(a1)
000186F4 6A00                       		bpl.s	Obj48_Display4
000186F6 117C 0000 0020             		move.b	#0,$20(a0)
000186FC 6100 FB94                  		bsr.w	BossDefeated
00018700 5328 003C                  		subq.b	#1,$3C(a0)
00018704 6A00                       		bpl.s	Obj48_Display4
00018706 10BC 003F                  		move.b	#$3F,(a0)
0001870A 117C 0000 0024             		move.b	#0,$24(a0)
00018710                            
00018710                            Obj48_Display4:
00018710 4EF9 0000 DE84             		jmp	DisplaySprite
00018716                            ; ===========================================================================
00018716                            Ani_Eggman:
00018716                            	include "_anim\Eggman.asm"
00018716                            ; ---------------------------------------------------------------------------
00018716                            ; Animation script - Eggman (bosses)
00018716                            ; ---------------------------------------------------------------------------
00018716 0000                       		dc.w byte_17CD4-Ani_Eggman
00018718 0000                       		dc.w byte_17CD8-Ani_Eggman
0001871A 0000                       		dc.w byte_17CDC-Ani_Eggman
0001871C 0000                       		dc.w byte_17CE0-Ani_Eggman
0001871E 0000                       		dc.w byte_17CE4-Ani_Eggman
00018720 0000                       		dc.w byte_17CE8-Ani_Eggman
00018722 0000                       		dc.w byte_17CEC-Ani_Eggman
00018724 0000                       		dc.w byte_17CF0-Ani_Eggman
00018726 0000                       		dc.w byte_17CF4-Ani_Eggman
00018728 0000                       		dc.w byte_17CF8-Ani_Eggman
0001872A 0000                       		dc.w byte_17CFC-Ani_Eggman
0001872C 0000                       		dc.w byte_17D00-Ani_Eggman
0001872E 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018732 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018736 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001873A 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
0001873E 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018742 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018746 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001874A 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
0001874E 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018752 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018756 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001875A 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018766                            		even
00018766                            		even
00018766                            Ani_TetoB:
00018766                            	include "_anim\TetoB.asm"
00018766                            ; ---------------------------------------------------------------------------
00018766                            ; Animation script - Eggman (bosses)
00018766                            ; ---------------------------------------------------------------------------
00018766 0000                       		dc.w spin-Ani_TetoB
00018768 0000                       		dc.w static-Ani_TetoB
0001876A 0000                       		dc.w static2-Ani_TetoB
0001876C 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018773 0500 FF                    static:	dc.b 5,	0, $FF
00018776 0501 FF                    static2:	dc.b 5,	1, $FF
0001877A 00                         		even
0001877A 00                         		even
0001877A                            ; ---------------------------------------------------------------------------
0001877A                            ; Sprite mappings - Eggman (boss levels)
0001877A                            ; ---------------------------------------------------------------------------
0001877A                            Map_Eggman:
0001877A                            	include "_maps\Eggman.asm"
0001877A                            Map_dc7e:
0001877A 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001877C 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001877E 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018780 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018782 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018784 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018786 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018788 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001878A 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001878C 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001878E 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018790 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018792 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018794 06                         Map_dc7e_1A: 	dc.b $6
00018795 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001879A EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001879F FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
000187A4 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
000187A9 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
000187AE 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
000187B3 02                         Map_dc7e_39: 	dc.b $2
000187B4 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000187B9 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
000187BE 02                         Map_dc7e_44: 	dc.b $2
000187BF E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000187C4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000187C9 03                         Map_dc7e_4F: 	dc.b $3
000187CA E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000187CF EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000187D4 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000187D9 03                         Map_dc7e_5F: 	dc.b $3
000187DA E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000187DF EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000187E4 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000187E9 03                         Map_dc7e_6F: 	dc.b $3
000187EA E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000187EF EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000187F4 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000187F9 03                         Map_dc7e_7F: 	dc.b $3
000187FA E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000187FF E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018804 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018809 04                         Map_dc7e_8F: 	dc.b $4
0001880A E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
0001880F E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018814 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018819 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
0001881E 01                         Map_dc7e_A4: 	dc.b $1
0001881F 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018824 01                         Map_dc7e_AA: 	dc.b $1
00018825 0405 0031 22               	dc.b $4, $5, $0, $31, $22
0001882A 00                         Map_dc7e_B0: 	dc.b $0
0001882B 02                         Map_dc7e_B1: 	dc.b $2
0001882C 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018831 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018836 02                         Map_dc7e_BC: 	dc.b $2
00018837 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
0001883C 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018842 00                         	even
00018842 00                         	even
00018842                            
00018842                            ; ---------------------------------------------------------------------------
00018842                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018842                            ; ---------------------------------------------------------------------------
00018842                            Map_BossItems:
00018842                            	include "_maps\Boss items.asm"
00018842                            ; ---------------------------------------------------------------------------
00018842                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018842                            ; ---------------------------------------------------------------------------
00018842 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018846 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001884A 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001884E 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018852 01                         byte_17DE4:	dc.b 1
00018853 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018858 02                         byte_17DEA:	dc.b 2
00018859 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001885E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018863 00                         		dc.b 0
00018864 01                         byte_17DF6:	dc.b 1
00018865 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001886A 01                         byte_17DFC:	dc.b 1
0001886B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018870 01                         byte_17E02:	dc.b 1
00018871 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018876 04                         byte_17E08:	dc.b 4
00018877 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001887C F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018881 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018886 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001888B 00                         		dc.b 0
0001888C 02                         byte_17E1E:	dc.b 2
0001888D 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018892 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018897 00                         		dc.b 0
00018898 02                         byte_17E2A:	dc.b 2
00018899 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001889E 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000188A4 00                         		even
000188A4 00                         		even
000188A4                            
000188A4                            ; ===========================================================================
000188A4                            ; ---------------------------------------------------------------------------
000188A4                            ; Object 77 - Fatass teto boss fight in LZ -STDH
000188A4                            ; ---------------------------------------------------------------------------
000188A4                            
000188A4                            
000188A4                            obj77:					; XREF: Obj_Index
000188A4 7000                       		moveq	#0,d0
000188A6 1028 0024                  		move.b	$24(a0),d0
000188AA 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
000188AE 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
000188B2                            ; ===========================================================================
000188B2 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
000188B4 0000                       		dc.w obj77_ShipMain-obj77_Index
000188B6 0000                       		dc.w obj77_FaceMain-obj77_Index
000188B8 0000                       		dc.w obj77_FlameMain-obj77_Index
000188BA                            
000188BA 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
000188BC 0401                       		dc.b 4,	1
000188BE 0607                       		dc.b 6,	7
000188C0                            ; ===========================================================================
000188C0                            
000188C0                            obj77_Main:				; XREF: obj77_Index
000188C0 45F9 0001 88BA             		lea	(obj77_ObjData).l,a2
000188C6 2248                       		movea.l	a0,a1
000188C8 7202                       		moveq	#2,d1
000188CA 6000                       		bra.s	obj77_LoadBoss
000188CC                            ; ===========================================================================
000188CC                            
000188CC                            obj77_Loop:
000188CC 4EB9 0000 E320             		jsr	SingleObjLoad2
000188D2 6600                       		bne.s	loc2_17772
000188D4                            
000188D4                            obj77_LoadBoss:				; XREF: obj77_Main
000188D4 135A 0024                  		move.b	(a2)+,$24(a1)
000188D8 12BC 0077                  		move.b	#$77,0(a1)
000188DC 3368 0008 0008             		move.w	8(a0),8(a1)
000188E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000188E8 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000188F0 337C 0400 0002             		move.w	#$400,2(a1)
000188F6 137C 0004 0001             		move.b	#4,1(a1)
000188FC 137C 0020 0019             		move.b	#$20,$19(a1)
00018902 137C 0003 0018             		move.b	#3,$18(a1)
00018908 135A 001C                  		move.b	(a2)+,$1C(a1)
0001890C 2348 0034                  		move.l	a0,$34(a1)
00018910 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00018914                            
00018914                            loc2_17772:
00018914 3168 0008 0030             		move.w	8(a0),$30(a0)
0001891A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018920 117C 000F 0020             		move.b	#$F,$20(a0)
00018926 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001892C                            
0001892C                            obj77_ShipMain:				; XREF: obj77_Index
0001892C 7000                       		moveq	#0,d0
0001892E 1028 0025                  		move.b	$25(a0),d0
00018932 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018936 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
0001893A 43F9 0001 8766             		lea	(Ani_TetoB).l,a1
00018940 4EB9 0000 AED2             		jsr	AnimateSprite
00018946 1028 0022                  		move.b	$22(a0),d0
0001894A 0200 0003                  		andi.b	#3,d0
0001894E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018954 8128 0001                  		or.b	d0,1(a0)
00018958 4EF9 0000 DE84             		jmp	DisplaySprite
0001895E                            ; ===========================================================================
0001895E 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018960 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018962 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018964 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018966 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018968 0000                       		dc.w loc2_1797A-obj77_ShipIndex
0001896A 0000                       		dc.w loc2_179AC-obj77_ShipIndex
0001896C 0000                       		dc.w loc2_179F6-obj77_ShipIndex
0001896E                            ; ===========================================================================
0001896E                            
0001896E                            obj77_ShipStart:			; XREF: obj77_ShipIndex
0001896E                            	;	move.w	#$100,$12(a0)	; move ship down
0001896E 6100 F964                  		bsr.w	BossMove
00018972 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018978 6600                       		bne.s	loc2_177E6
0001897A 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018980 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018984                            
00018984                            loc2_177E6:
00018984                            ;		move.b	$3F(a0),d0
00018984                            ;		jsr	(CalcSine).l
00018984 EC40                       		asr.w	#6,d0
00018986 D068 0038                  		add.w	$38(a0),d0
0001898A 3140 000C                  		move.w	d0,$C(a0)
0001898E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018994 5428 003F                  		addq.b	#2,$3F(a0)
00018998 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
0001899E 6400                       		bcc.s	locret_1784A2
000189A0 4A28 0022                  		tst.b	$22(a0)
000189A4 6B00                       		bmi.s	loc2_1784C
000189A6 4A28 0020                  		tst.b	$20(a0)
000189AA 6600                       		bne.s	locret_1784A2
000189AC 4A28 003E                  		tst.b	$3E(a0)
000189B0 6600                       		bne.s	obj77_ShipFlash
000189B2 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
000189B8 303C 00AC                  		move.w	#$AC,d0
000189BC 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play boss damage sound
000189C2                            
000189C2                            obj77_ShipFlash:
000189C2 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000189C6 7000                       		moveq	#0,d0		; move 0 (black) to d0
000189C8 4A51                       		tst.w	(a1)
000189CA 6600                       		bne.s	loc2_1783C
000189CC 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000189D0                            
000189D0                            loc2_1783C:
000189D0 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000189D2 5328 003E                  		subq.b	#1,$3E(a0)
000189D6 6600                       		bne.s	locret_1784A2
000189D8 117C 000F 0020             		move.b	#$F,$20(a0)
000189DE                            
000189DE                            locret_1784A2:
000189DE 4E75                       		rts	
000189E0                            ; ===========================================================================
000189E0                            
000189E0                            loc2_1784C:				; XREF: loc2_177E6
000189E0 7064                       		moveq	#100,d0
000189E2 6100 0000                  		bsr.w	AddPoints
000189E6 117C 000A 0025             		move.b	#$A,$25(a0)
000189EC 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000189F2 4E75                       		rts	
000189F4                            ; ===========================================================================
000189F4                            
000189F4                            obj77_MakeBall:				; XREF: obj77_ShipIndex
000189F4 317C FF00 0010             		move.w	#-$100,$10(a0)
000189FA 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018A00 6100 F8D2                  		bsr.w	BossMove
00018A04 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018A0A 6600                       		bne.s	loc2_17916
00018A0C 317C 0000 0010             		move.w	#0,$10(a0)
00018A12 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018A18 317C 0000 0012             		move.w	#0,$12(a0)
00018A1E 5428 0025                  		addq.b	#2,$25(a0)
00018A22                            
00018A22                            loc2_17910:
00018A22 317C 0077 003C             		move.w	#$77,$3C(a0)
00018A28                            
00018A28                            loc2_17916:
00018A28 6000 FF5A                  		bra.w	loc2_177E6
00018A2C                            ; ===========================================================================
00018A2C                            
00018A2C                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018A2C 6100 F8A6                  		bsr.w	BossMove
00018A30 5368 003C                  		subq.w	#1,$3C(a0)
00018A34 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018A36 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018A3C 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018A42 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018A48 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018A4E 6600                       		bne.s	loc2_17950 ; if not branch
00018A50                            
00018A50                            fatass_attack:
00018A50 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018A56 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018A5C 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018A62 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018A64 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018A68 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018A6E                            
00018A6E                            loc2_17950:
00018A6E 6000 FF14                  		bra.w	loc2_177E6
00018A72                            ; ===========================================================================
00018A72                            
00018A72                            loc2_17954:				; XREF: obj77_ShipIndex
00018A72 6100 F860                  		bsr.w	BossMove
00018A76 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018A7C                            		; i suck at programming
00018A7C 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018A82 6600                       		bne.s	loc2_17976    ; if not blah blah
00018A84 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018A8A 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018A8E 303C 00B9                  		move.w	#$B9,d0
00018A92 4EB9 0000 13B0             		jsr	(PlaySound).l	; play the earthquake sound
00018A98                            
00018A98                            Peartobombs:	
00018A98 4EB9 0000 E320                		jsr	SingleObjLoad2
00018A9E 6600                       		bne.s	secondone
00018AA0 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018AA4 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018AAA 337C 0670 000C             		move.w	#$670,$C(a1)
00018AB0                            secondone:		
00018AB0 4EB9 0000 E320                		jsr	SingleObjLoad2
00018AB6 6600                       		bne.s	loc2_17976		
00018AB8 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018ABC 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018AC2 337C 0670 000C             		move.w	#$670,$C(a1)
00018AC8                            lastone:
00018AC8 4EB9 0000 E320                		jsr	SingleObjLoad2
00018ACE 6600                       		bne.s	loc2_17976		
00018AD0 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018AD4 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018ADA 337C 0670 000C             		move.w	#$670,$C(a1)
00018AE0                            		
00018AE0                            loc2_17976:
00018AE0 6000 FEA2                  		bra.w	loc2_177E6
00018AE4                            		
00018AE4                            ; ===========================================================================
00018AE4                            Fatassruns:
00018AE4 6100 F7EE                   		bsr.w	BossMove
00018AE8 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018AEE 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018AF4 6600                       		bne.s	processstuff ; is not go here
00018AF6 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018AFC 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018B02 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018B06 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018B0C 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018B12                            		
00018B12                            		
00018B12                            processstuff:
00018B12 6000 FE70                  		bra.w	loc2_177E6
00018B16                            ; ===========================================================================
00018B16                            
00018B16                            loc2_1797A:				; XREF: obj77_ShipIndex
00018B16 5368 003C                  		subq.w	#1,$3C(a0)
00018B1A 6B00                       		bmi.s	loc2_17984
00018B1C 6000 F774                  		bra.w	BossDefeated
00018B20                            ; ===========================================================================
00018B20                            
00018B20                            loc2_17984:
00018B20 08E8 0000 0022             		bset	#0,$22(a0)
00018B26 08A8 0007 0022             		bclr	#7,$22(a0)
00018B2C 4268 0010                  		clr.w	$10(a0)
00018B30 5428 0025                  		addq.b	#2,$25(a0)
00018B34 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018B3A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018B3E 6600                       		bne.s	locret_179AA2
00018B40 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018B46                            
00018B46                            locret_179AA2:
00018B46 4E75                       		rts	
00018B48                            ; ===========================================================================
00018B48                            
00018B48                            loc2_179AC:				; XREF: obj77_ShipIndex
00018B48 5268 003C                  		addq.w	#1,$3C(a0)
00018B4C 6700                       		beq.s	loc2_179BC
00018B4E 6A00                       		bpl.s	loc2_179C2
00018B50 0668 0018 0012             		addi.w	#$18,$12(a0)
00018B56 6000                       		bra.s	loc2_179EE
00018B58                            ; ===========================================================================
00018B58                            
00018B58                            loc2_179BC:
00018B58 4268 0012                  		clr.w	$12(a0)
00018B5C 6000                       		bra.s	loc2_179EE
00018B5E                            ; ===========================================================================
00018B5E                            
00018B5E                            loc2_179C2:
00018B5E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018B64 6500                       		bcs.s	loc2_179DA
00018B66 6700                       		beq.s	loc2_179E0
00018B68 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018B6E 6500                       		bcs.s	loc2_179EE
00018B70 5428 0025                  		addq.b	#2,$25(a0)
00018B74 6000                       		bra.s	loc2_179EE
00018B76                            ; ===========================================================================
00018B76                            
00018B76                            loc2_179DA:
00018B76 5168 0012                  		subq.w	#8,$12(a0)
00018B7A 6000                       		bra.s	loc2_179EE
00018B7C                            ; ===========================================================================
00018B7C                            
00018B7C                            loc2_179E0:
00018B7C 4268 0012                  		clr.w	$12(a0)
00018B80 303C 0097                  		move.w	#$97,d0
00018B84 4EB9 0000 13B0             		jsr	(PlaySound).l	; play lz3 music
00018B8A                            
00018B8A                            loc2_179EE:
00018B8A 6100 F748                  		bsr.w	BossMove
00018B8E 6000 FDF4                  		bra.w	loc2_177E6
00018B92                            ; ===========================================================================
00018B92                            
00018B92                            loc2_179F6:				; XREF: obj77_ShipIndex
00018B92 317C 0400 0010             		move.w	#$400,$10(a0)
00018B98 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018B9E 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018BA4 6700                       		beq.s	loc2_17A10
00018BA6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018BAA 6000                       		bra.s	loc2_17A16
00018BAC                            ; ===========================================================================
00018BAC                            
00018BAC                            loc2_17A10:
00018BAC 4A28 0001                  		tst.b	1(a0)
00018BB0 6A00                       		bpl.s	obj77_ShipDel
00018BB2                            
00018BB2                            loc2_17A16:
00018BB2 6100 F720                  		bsr.w	BossMove
00018BB6 6000 FDCC                  		bra.w	loc2_177E6
00018BBA                            ; ===========================================================================
00018BBA                            
00018BBA                            obj77_ShipDel:
00018BBA 4EF9 0000 DEC0             		jmp	DeleteObject
00018BC0                            ; ===========================================================================
00018BC0                            
00018BC0                            obj77_FaceMain:				; XREF: obj77_Index
00018BC0 4E75                       		rts
00018BC2                            ; ===========================================================================
00018BC2                            
00018BC2                            obj77_FlameMain:			; XREF: obj77_Index
00018BC2 4E75                       		rts
00018BC4                            ; ===========================================================================
00018BC4                            
00018BC4                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018BC4 43F9 0001 8766             		lea	(Ani_TetoB).l,a1
00018BCA 4EB9 0000 AED2             		jsr	AnimateSprite
00018BD0 4EF9 0000 DE84             		jmp	DisplaySprite
00018BD6                            ; ---------------------------------------------------------------------------
00018BD6                            ; Sprite mappings - Fatass teto boss
00018BD6                            ; ---------------------------------------------------------------------------
00018BD6                            Map_TetoBoss:
00018BD6                            	include "_maps\tetoboss.asm"
00018BD6                            Map_f09a:
00018BD6 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018BD8 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018BDA 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018BDC 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018BDE 03                         Map_f09a_8: 	dc.b $3
00018BDF E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018BE4 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018BE9 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018BEE 06                         Map_f09a_18: 	dc.b $6
00018BEF EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018BF4 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018BF9 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018BFE 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018C03 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018C08 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018C0D 03                         Map_f09a_37: 	dc.b $3
00018C0E E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018C13 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018C18 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018C1D 06                         Map_f09a_47: 	dc.b $6
00018C1E ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018C23 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018C28 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018C2D DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018C32 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018C37 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018C3C                            	even
00018C3C                            	even
00018C3C                            ; ===========================================================================
00018C3C                            ; ---------------------------------------------------------------------------
00018C3C                            ; Object 73 - Eggman (MZ)
00018C3C                            ; ---------------------------------------------------------------------------
00018C3C                            
00018C3C                            Obj73:					; XREF: Obj_Index
00018C3C 7000                       		moveq	#0,d0
00018C3E 1028 0024                  		move.b	$24(a0),d0
00018C42 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018C46 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018C4A                            ; ===========================================================================
00018C4A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018C4C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018C4E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018C50 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018C52 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018C54                            
00018C54 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018C57 0401 04                    		dc.b 4,	1, 4
00018C5A 0607 04                    		dc.b 6,	7, 4
00018C5D 0800 03                    		dc.b 8,	0, 3
00018C60                            ; ===========================================================================
00018C60                            
00018C60                            Obj73_Main:				; XREF: Obj73_Index
00018C60 3168 0008 0030             		move.w	8(a0),$30(a0)
00018C66 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018C6C 117C 000F 0020             		move.b	#$F,$20(a0)
00018C72 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018C78 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018C7C 2248                       		movea.l	a0,a1
00018C7E 7203                       		moveq	#3,d1
00018C80 6000                       		bra.s	Obj73_LoadBoss
00018C82                            ; ===========================================================================
00018C82                            
00018C82                            Obj73_Loop:
00018C82 4EB9 0000 E320             		jsr	SingleObjLoad2
00018C88 6600                       		bne.s	Obj73_ShipMain
00018C8A 12BC 0073                  		move.b	#$73,0(a1)
00018C8E 3368 0008 0008             		move.w	8(a0),8(a1)
00018C94 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018C9A                            
00018C9A                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018C9A 08A8 0000 0022             		bclr	#0,$22(a0)
00018CA0 4229 0025                  		clr.b	$25(a1)
00018CA4 135A 0024                  		move.b	(a2)+,$24(a1)
00018CA8 135A 001C                  		move.b	(a2)+,$1C(a1)
00018CAC 135A 0018                  		move.b	(a2)+,$18(a1)
00018CB0 237C 0001 877A 0004        		move.l	#Map_Eggman,4(a1)
00018CB8 337C 0400 0002             		move.w	#$400,2(a1)
00018CBE 137C 0004 0001             		move.b	#4,1(a1)
00018CC4 137C 0020 0019             		move.b	#$20,$19(a1)
00018CCA 2348 0034                  		move.l	a0,$34(a1)
00018CCE 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018CD2                            
00018CD2                            Obj73_ShipMain:
00018CD2 7000                       		moveq	#0,d0
00018CD4 1028 0025                  		move.b	$25(a0),d0
00018CD8 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018CDC 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018CE0 43F9 0001 8716             		lea	(Ani_Eggman).l,a1
00018CE6 4EB9 0000 AED2             		jsr	AnimateSprite
00018CEC 7003                       		moveq	#3,d0
00018CEE C028 0022                  		and.b	$22(a0),d0
00018CF2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018CF8 8128 0001                  		or.b	d0,1(a0)
00018CFC 4EF9 0000 DE84             		jmp	DisplaySprite
00018D02                            ; ===========================================================================
00018D02 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018D04 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018D06 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018D08 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018D0A 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018D0C                            ; ===========================================================================
00018D0C                            
00018D0C                            loc_18302:				; XREF: Obj73_ShipIndex
00018D0C 1028 003F                  		move.b	$3F(a0),d0
00018D10 5428 003F                  		addq.b	#2,$3F(a0)
00018D14 4EB9 0000 2B58             		jsr	(CalcSine).l
00018D1A E440                       		asr.w	#2,d0
00018D1C 3140 0012                  		move.w	d0,$12(a0)
00018D20 317C FF00 0010             		move.w	#-$100,$10(a0)
00018D26 6100 F5AC                  		bsr.w	BossMove
00018D2A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018D30 6600                       		bne.s	loc_18334
00018D32 5428 0025                  		addq.b	#2,$25(a0)
00018D36 4228 0028                  		clr.b	$28(a0)
00018D3A 42A8 0010                  		clr.l	$10(a0)
00018D3E                            
00018D3E                            loc_18334:
00018D3E 4EB9 0000 2B32             		jsr	(RandomNumber).l
00018D44 1140 0034                  		move.b	d0,$34(a0)
00018D48                            
00018D48                            loc_1833E:
00018D48 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018D4E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018D54 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018D5A 6400                       		bcc.s	locret_18390
00018D5C 4A28 0022                  		tst.b	$22(a0)
00018D60 6B00                       		bmi.s	loc_18392
00018D62 4A28 0020                  		tst.b	$20(a0)
00018D66 6600                       		bne.s	locret_18390
00018D68 4A28 003E                  		tst.b	$3E(a0)
00018D6C 6600                       		bne.s	loc_18374
00018D6E 117C 0028 003E             		move.b	#$28,$3E(a0)
00018D74 303C 00AC                  		move.w	#$AC,d0
00018D78 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018D7E                            
00018D7E                            loc_18374:
00018D7E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018D82 7000                       		moveq	#0,d0
00018D84 4A51                       		tst.w	(a1)
00018D86 6600                       		bne.s	loc_18382
00018D88 303C 0EEE                  		move.w	#$EEE,d0
00018D8C                            
00018D8C                            loc_18382:
00018D8C 3280                       		move.w	d0,(a1)
00018D8E 5328 003E                  		subq.b	#1,$3E(a0)
00018D92 6600                       		bne.s	locret_18390
00018D94 117C 000F 0020             		move.b	#$F,$20(a0)
00018D9A                            
00018D9A                            locret_18390:
00018D9A 4E75                       		rts	
00018D9C                            ; ===========================================================================
00018D9C                            
00018D9C                            loc_18392:				; XREF: loc_1833E
00018D9C 7064                       		moveq	#100,d0
00018D9E 6100 0000                  		bsr.w	AddPoints
00018DA2 117C 0004 0025             		move.b	#4,$25(a0)
00018DA8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018DAE 4268 0010                  		clr.w	$10(a0)
00018DB2 4E75                       		rts	
00018DB4                            ; ===========================================================================
00018DB4                            
00018DB4                            loc_183AA:				; XREF: Obj73_ShipIndex
00018DB4 7000                       		moveq	#0,d0
00018DB6 1028 0028                  		move.b	$28(a0),d0
00018DBA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018DBE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018DC2 0228 0006 0028             		andi.b	#6,$28(a0)
00018DC8 6000 FF7E                  		bra.w	loc_1833E
00018DCC                            ; ===========================================================================
00018DCC 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018DCE 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018DD0 0000                       		dc.w loc_183CA-off_183C2
00018DD2 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018DD4                            ; ===========================================================================
00018DD4                            
00018DD4                            loc_183CA:				; XREF: off_183C2
00018DD4 4A68 0010                  		tst.w	$10(a0)
00018DD8 6600                       		bne.s	loc_183FE
00018DDA 7040                       		moveq	#$40,d0
00018DDC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018DE2 6700                       		beq.s	loc_183E6
00018DE4 6500                       		bcs.s	loc_183DE
00018DE6 4440                       		neg.w	d0
00018DE8                            
00018DE8                            loc_183DE:
00018DE8 3140 0012                  		move.w	d0,$12(a0)
00018DEC 6000 F4E6                  		bra.w	BossMove
00018DF0                            ; ===========================================================================
00018DF0                            
00018DF0                            loc_183E6:
00018DF0 317C 0200 0010             		move.w	#$200,$10(a0)
00018DF6 317C 0100 0012             		move.w	#$100,$12(a0)
00018DFC 0828 0000 0022             		btst	#0,$22(a0)
00018E02 6600                       		bne.s	loc_183FE
00018E04 4468 0010                  		neg.w	$10(a0)
00018E08                            
00018E08                            loc_183FE:
00018E08 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018E0E 6400                       		bcc.s	Obj73_MakeLava
00018E10 6100 F4C2                  		bsr.w	BossMove
00018E14 5968 0012                  		subq.w	#4,$12(a0)
00018E18                            
00018E18                            Obj73_MakeLava:
00018E18 5328 0034                  		subq.b	#1,$34(a0)
00018E1C 6400                       		bcc.s	loc_1845C
00018E1E 4EB9 0000 E30A             		jsr	SingleObjLoad
00018E24 6600                       		bne.s	loc_1844A
00018E26 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018E2A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018E30 4EB9 0000 2B32             		jsr	(RandomNumber).l
00018E36 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018E3C 80FC 0050                  		divu.w	#$50,d0
00018E40 4840                       		swap	d0
00018E42 0640 1878                  		addi.w	#$1878,d0
00018E46 3340 0008                  		move.w	d0,8(a1)
00018E4A EE09                       		lsr.b	#7,d1
00018E4C 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018E52                            
00018E52                            loc_1844A:
00018E52 4EB9 0000 2B32             		jsr	(RandomNumber).l
00018E58 0200 001F                  		andi.b	#$1F,d0
00018E5C 0600 0040                  		addi.b	#$40,d0
00018E60 1140 0034                  		move.b	d0,$34(a0)
00018E64                            
00018E64                            loc_1845C:
00018E64 0828 0000 0022             		btst	#0,$22(a0)
00018E6A 6700                       		beq.s	loc_18474
00018E6C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018E72 6D00                       		blt.s	locret_1849C
00018E74 317C 1910 0030             		move.w	#$1910,$30(a0)
00018E7A 6000                       		bra.s	loc_18482
00018E7C                            ; ===========================================================================
00018E7C                            
00018E7C                            loc_18474:
00018E7C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018E82 6E00                       		bgt.s	locret_1849C
00018E84 317C 1830 0030             		move.w	#$1830,$30(a0)
00018E8A                            
00018E8A                            loc_18482:
00018E8A 4268 0010                  		clr.w	$10(a0)
00018E8E 317C FE80 0012             		move.w	#-$180,$12(a0)
00018E94 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018E9A 6400                       		bcc.s	loc_18498
00018E9C 4468 0012                  		neg.w	$12(a0)
00018EA0                            
00018EA0                            loc_18498:
00018EA0 5428 0028                  		addq.b	#2,$28(a0)
00018EA4                            
00018EA4                            locret_1849C:
00018EA4 4E75                       		rts	
00018EA6                            ; ===========================================================================
00018EA6                            
00018EA6                            Obj73_MakeLava2:			; XREF: off_183C2
00018EA6 6100 F42C                  		bsr.w	BossMove
00018EAA 3028 0038                  		move.w	$38(a0),d0
00018EAE 0440 022C                  		subi.w	#$22C,d0
00018EB2 6E00                       		bgt.s	locret_184F4
00018EB4 303C 022C                  		move.w	#$22C,d0
00018EB8 4A68 0012                  		tst.w	$12(a0)
00018EBC 6700                       		beq.s	loc_184EA
00018EBE 4268 0012                  		clr.w	$12(a0)
00018EC2 317C 0050 003C             		move.w	#$50,$3C(a0)
00018EC8 0868 0000 0022             		bchg	#0,$22(a0)
00018ECE 4EB9 0000 E30A             		jsr	SingleObjLoad
00018ED4 6600                       		bne.s	loc_184EA
00018ED6 3368 0030 0008             		move.w	$30(a0),8(a1)
00018EDC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018EE2 0669 0018 000C             		addi.w	#$18,$C(a1)
00018EE8 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018EEC 137C 0001 0028             		move.b	#1,$28(a1)
00018EF2                            
00018EF2                            loc_184EA:
00018EF2 5368 003C                  		subq.w	#1,$3C(a0)
00018EF6 6600                       		bne.s	locret_184F4
00018EF8 5428 0028                  		addq.b	#2,$28(a0)
00018EFC                            
00018EFC                            locret_184F4:
00018EFC 4E75                       		rts	
00018EFE                            ; ===========================================================================
00018EFE                            
00018EFE                            loc_184F6:				; XREF: Obj73_ShipIndex
00018EFE 5368 003C                  		subq.w	#1,$3C(a0)
00018F02 6B00                       		bmi.s	loc_18500
00018F04 6000 F38C                  		bra.w	BossDefeated
00018F08                            ; ===========================================================================
00018F08                            
00018F08                            loc_18500:
00018F08 08E8 0000 0022             		bset	#0,$22(a0)
00018F0E 08A8 0007 0022             		bclr	#7,$22(a0)
00018F14 4268 0010                  		clr.w	$10(a0)
00018F18 5428 0025                  		addq.b	#2,$25(a0)
00018F1C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018F22 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018F26 6600                       		bne.s	locret_1852A
00018F28 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018F2E 4268 0012                  		clr.w	$12(a0)
00018F32                            
00018F32                            locret_1852A:
00018F32 4E75                       		rts	
00018F34                            ; ===========================================================================
00018F34                            
00018F34                            loc_1852C:				; XREF: Obj73_ShipIndex
00018F34 5268 003C                  		addq.w	#1,$3C(a0)
00018F38 6700                       		beq.s	loc_18544
00018F3A 6A00                       		bpl.s	loc_1854E
00018F3C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018F42 6400                       		bcc.s	loc_18544
00018F44 0668 0018 0012             		addi.w	#$18,$12(a0)
00018F4A 6000                       		bra.s	loc_1857A
00018F4C                            ; ===========================================================================
00018F4C                            
00018F4C                            loc_18544:
00018F4C 4268 0012                  		clr.w	$12(a0)
00018F50 4268 003C                  		clr.w	$3C(a0)
00018F54 6000                       		bra.s	loc_1857A
00018F56                            ; ===========================================================================
00018F56                            
00018F56                            loc_1854E:
00018F56 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018F5C 6500                       		bcs.s	loc_18566
00018F5E 6700                       		beq.s	loc_1856C
00018F60 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018F66 6500                       		bcs.s	loc_1857A
00018F68 5428 0025                  		addq.b	#2,$25(a0)
00018F6C 6000                       		bra.s	loc_1857A
00018F6E                            ; ===========================================================================
00018F6E                            
00018F6E                            loc_18566:
00018F6E 5168 0012                  		subq.w	#8,$12(a0)
00018F72 6000                       		bra.s	loc_1857A
00018F74                            ; ===========================================================================
00018F74                            
00018F74                            loc_1856C:
00018F74 4268 0012                  		clr.w	$12(a0)
00018F78 303C 0083                  		move.w	#$83,d0
00018F7C 4EB9 0000 13B0             		jsr	(PlaySound).l	; play MZ music
00018F82                            
00018F82                            loc_1857A:
00018F82 6100 F350                  		bsr.w	BossMove
00018F86 6000 FDC0                  		bra.w	loc_1833E
00018F8A                            ; ===========================================================================
00018F8A                            
00018F8A                            loc_18582:				; XREF: Obj73_ShipIndex
00018F8A 317C 0500 0010             		move.w	#$500,$10(a0)
00018F90 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018F96 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018F9C 6400                       		bcc.s	loc_1859C
00018F9E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018FA2 6000                       		bra.s	loc_185A2
00018FA4                            ; ===========================================================================
00018FA4                            
00018FA4                            loc_1859C:
00018FA4 4A28 0001                  		tst.b	1(a0)
00018FA8 6A00                       		bpl.s	Obj73_ShipDel
00018FAA                            
00018FAA                            loc_185A2:
00018FAA 6100 F328                  		bsr.w	BossMove
00018FAE 6000 FD98                  		bra.w	loc_1833E
00018FB2                            ; ===========================================================================
00018FB2                            
00018FB2                            Obj73_ShipDel:
00018FB2 4EF9 0000 DEC0             		jmp	DeleteObject
00018FB8                            ; ===========================================================================
00018FB8                            
00018FB8                            Obj73_FaceMain:				; XREF: Obj73_Index
00018FB8 7000                       		moveq	#0,d0
00018FBA 7201                       		moveq	#1,d1
00018FBC 2268 0034                  		movea.l	$34(a0),a1
00018FC0 1029 0025                  		move.b	$25(a1),d0
00018FC4 5540                       		subq.w	#2,d0
00018FC6 6600                       		bne.s	loc_185D2
00018FC8 0829 0001 0028             		btst	#1,$28(a1)
00018FCE 6700                       		beq.s	loc_185DA
00018FD0 4A69 0012                  		tst.w	$12(a1)
00018FD4 6600                       		bne.s	loc_185DA
00018FD6 7204                       		moveq	#4,d1
00018FD8 6000                       		bra.s	loc_185EE
00018FDA                            ; ===========================================================================
00018FDA                            
00018FDA                            loc_185D2:
00018FDA 5500                       		subq.b	#2,d0
00018FDC 6B00                       		bmi.s	loc_185DA
00018FDE 720A                       		moveq	#$A,d1
00018FE0 6000                       		bra.s	loc_185EE
00018FE2                            ; ===========================================================================
00018FE2                            
00018FE2                            loc_185DA:
00018FE2 4A29 0020                  		tst.b	$20(a1)
00018FE6 6600                       		bne.s	loc_185E4
00018FE8 7205                       		moveq	#5,d1
00018FEA 6000                       		bra.s	loc_185EE
00018FEC                            ; ===========================================================================
00018FEC                            
00018FEC                            loc_185E4:
00018FEC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018FF2 6500                       		bcs.s	loc_185EE
00018FF4 7204                       		moveq	#4,d1
00018FF6                            
00018FF6                            loc_185EE:
00018FF6 1141 001C                  		move.b	d1,$1C(a0)
00018FFA 5900                       		subq.b	#4,d0
00018FFC 6600                       		bne.s	loc_18602
00018FFE 117C 0006 001C             		move.b	#6,$1C(a0)
00019004 4A28 0001                  		tst.b	1(a0)
00019008 6A00                       		bpl.s	Obj73_FaceDel
0001900A                            
0001900A                            loc_18602:
0001900A 6000                       		bra.s	Obj73_Display
0001900C                            ; ===========================================================================
0001900C                            
0001900C                            Obj73_FaceDel:
0001900C 4EF9 0000 DEC0             		jmp	DeleteObject
00019012                            ; ===========================================================================
00019012                            
00019012                            Obj73_FlameMain:			; XREF: Obj73_Index
00019012 117C 0007 001C             		move.b	#7,$1C(a0)
00019018 2268 0034                  		movea.l	$34(a0),a1
0001901C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019022 6D00                       		blt.s	loc_1862A
00019024 117C 000B 001C             		move.b	#$B,$1C(a0)
0001902A 4A28 0001                  		tst.b	1(a0)
0001902E 6A00                       		bpl.s	Obj73_FlameDel
00019030 6000                       		bra.s	loc_18636
00019032                            ; ===========================================================================
00019032                            
00019032                            loc_1862A:
00019032 4A69 0010                  		tst.w	$10(a1)
00019036 6700                       		beq.s	loc_18636
00019038 117C 0008 001C             		move.b	#8,$1C(a0)
0001903E                            
0001903E                            loc_18636:
0001903E 6000                       		bra.s	Obj73_Display
00019040                            ; ===========================================================================
00019040                            
00019040                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019040 4EF9 0000 DEC0             		jmp	DeleteObject
00019046                            ; ===========================================================================
00019046                            
00019046                            Obj73_Display:
00019046 43F9 0001 8716             		lea	(Ani_Eggman).l,a1
0001904C 4EB9 0000 AED2             		jsr	AnimateSprite
00019052                            
00019052                            loc_1864A:
00019052 2268 0034                  		movea.l	$34(a0),a1
00019056 3169 0008 0008             		move.w	8(a1),8(a0)
0001905C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019062 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019068 7003                       		moveq	#3,d0
0001906A C028 0022                  		and.b	$22(a0),d0
0001906E 0228 00FC 0001             		andi.b	#-4,1(a0)
00019074 8128 0001                  		or.b	d0,1(a0)
00019078 4EF9 0000 DE84             		jmp	DisplaySprite
0001907E                            ; ===========================================================================
0001907E                            
0001907E                            Obj73_TubeMain:				; XREF: Obj73_Index
0001907E 2268 0034                  		movea.l	$34(a0),a1
00019082 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019088 6600                       		bne.s	loc_18688
0001908A 4A28 0001                  		tst.b	1(a0)
0001908E 6A00                       		bpl.s	Obj73_TubeDel
00019090                            
00019090                            loc_18688:
00019090 217C 0001 8842 0004        		move.l	#Map_BossItems,4(a0)
00019098 317C 246C 0002             		move.w	#$246C,2(a0)
0001909E 117C 0004 001A             		move.b	#4,$1A(a0)
000190A4 60AC                       		bra.s	loc_1864A
000190A6                            ; ===========================================================================
000190A6                            
000190A6                            Obj73_TubeDel:
000190A6 4EF9 0000 DEC0             		jmp	DeleteObject
000190AC                            ; ===========================================================================
000190AC                            ; ---------------------------------------------------------------------------
000190AC                            ; Object 74 - lava that	Eggman drops (MZ)
000190AC                            ; ---------------------------------------------------------------------------
000190AC                            
000190AC                            Obj74:					; XREF: Obj_Index
000190AC 7000                       		moveq	#0,d0
000190AE 1028 0024                  		move.b	$24(a0),d0
000190B2 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
000190B6 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
000190BA 4EF9 0000 DE84             		jmp	DisplaySprite
000190C0                            ; ===========================================================================
000190C0 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000190C2 0000                       		dc.w Obj74_Action-Obj74_Index
000190C4 0000                       		dc.w loc_18886-Obj74_Index
000190C6 0000                       		dc.w Obj74_Delete3-Obj74_Index
000190C8                            ; ===========================================================================
000190C8                            
000190C8                            Obj74_Main:				; XREF: Obj74_Index
000190C8 117C 0008 0016             		move.b	#8,$16(a0)
000190CE 117C 0008 0017             		move.b	#8,$17(a0)
000190D4 217C 0000 BAD0 0004        		move.l	#Map_obj14,4(a0)
000190DC 317C 0345 0002             		move.w	#$345,2(a0)
000190E2 117C 0004 0001             		move.b	#4,1(a0)
000190E8 117C 0005 0018             		move.b	#5,$18(a0)
000190EE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000190F4 117C 0008 0019             		move.b	#8,$19(a0)
000190FA 5428 0024                  		addq.b	#2,$24(a0)
000190FE 4A28 0028                  		tst.b	$28(a0)
00019102 6600                       		bne.s	loc_1870A
00019104 117C 008B 0020             		move.b	#$8B,$20(a0)
0001910A 5428 0024                  		addq.b	#2,$24(a0)
0001910E 6000 0000                  		bra.w	loc_18886
00019112                            ; ===========================================================================
00019112                            
00019112                            loc_1870A:
00019112 117C 001E 0029             		move.b	#$1E,$29(a0)
00019118 303C 00AE                  		move.w	#$AE,d0
0001911C 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play lava sound
00019122                            
00019122                            Obj74_Action:				; XREF: Obj74_Index
00019122 7000                       		moveq	#0,d0
00019124 1028 0025                  		move.b	$25(a0),d0
00019128 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001912C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019130 4EB9 0000 DE5E             		jsr	SpeedToPos
00019136 43F9 0000 ED3E             		lea	(Ani_obj14).l,a1
0001913C 4EB9 0000 AED2             		jsr	AnimateSprite
00019142 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019148 6200                       		bhi.s	Obj74_Delete
0001914A 4E75                       		rts	
0001914C                            ; ===========================================================================
0001914C                            
0001914C                            Obj74_Delete:
0001914C 4EF9 0000 DEC0             		jmp	DeleteObject
00019152                            ; ===========================================================================
00019152 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019154 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019156 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019158 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001915A                            ; ===========================================================================
0001915A                            
0001915A                            Obj74_Drop:				; XREF: Obj74_Index2
0001915A 08E8 0001 0022             		bset	#1,$22(a0)
00019160 5328 0029                  		subq.b	#1,$29(a0)
00019164 6A00                       		bpl.s	locret_18780
00019166 117C 008B 0020             		move.b	#$8B,$20(a0)
0001916C 4228 0028                  		clr.b	$28(a0)
00019170 0668 0018 0012             		addi.w	#$18,$12(a0)
00019176 08A8 0001 0022             		bclr	#1,$22(a0)
0001917C 6100 C618                  		bsr.w	ObjHitFloor
00019180 4A41                       		tst.w	d1
00019182 6A00                       		bpl.s	locret_18780
00019184 5428 0025                  		addq.b	#2,$25(a0)
00019188                            
00019188                            locret_18780:
00019188 4E75                       		rts	
0001918A                            ; ===========================================================================
0001918A                            
0001918A                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001918A 5568 000C                  		subq.w	#2,$C(a0)
0001918E 08E8 0007 0002             		bset	#7,2(a0)
00019194 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001919A 4268 0012                  		clr.w	$12(a0)
0001919E 3168 0008 0030             		move.w	8(a0),$30(a0)
000191A4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000191AA 117C 0003 0029             		move.b	#3,$29(a0)
000191B0 4EB9 0000 E320             		jsr	SingleObjLoad2
000191B6 6600                       		bne.s	loc_187CA
000191B8 47D1                       		lea	(a1),a3
000191BA 45D0                       		lea	(a0),a2
000191BC 7003                       		moveq	#3,d0
000191BE                            
000191BE                            Obj74_Loop:
000191BE 26DA                       		move.l	(a2)+,(a3)+
000191C0 26DA                       		move.l	(a2)+,(a3)+
000191C2 26DA                       		move.l	(a2)+,(a3)+
000191C4 26DA                       		move.l	(a2)+,(a3)+
000191C6 51C8 FFF6                  		dbf	d0,Obj74_Loop
000191CA                            
000191CA 4469 0010                  		neg.w	$10(a1)
000191CE 5429 0025                  		addq.b	#2,$25(a1)
000191D2                            
000191D2                            loc_187CA:
000191D2 5428 0025                  		addq.b	#2,$25(a0)
000191D6 4E75                       		rts	
000191D8                            
000191D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000191D8                            
000191D8                            
000191D8                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000191D8 4EB9 0000 E320             		jsr	SingleObjLoad2
000191DE 6600                       		bne.s	locret_187EE
000191E0 3368 0008 0008             		move.w	8(a0),8(a1)
000191E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000191EC 12BC 0074                  		move.b	#$74,(a1)
000191F0 337C 0067 0028             		move.w	#$67,$28(a1)
000191F6                            
000191F6                            locret_187EE:
000191F6 4E75                       		rts	
000191F8                            ; End of function Obj74_Duplicate2
000191F8                            
000191F8                            ; ===========================================================================
000191F8                            
000191F8                            Obj74_Duplicate:			; XREF: Obj74_Index2
000191F8 6100 C59C                  		bsr.w	ObjHitFloor
000191FC 4A41                       		tst.w	d1
000191FE 6A00                       		bpl.s	loc_18826
00019200 3028 0008                  		move.w	8(a0),d0
00019204 0C40 1940                  		cmpi.w	#$1940,d0
00019208 6E00                       		bgt.s	loc_1882C
0001920A 3228 0030                  		move.w	$30(a0),d1
0001920E B240                       		cmp.w	d0,d1
00019210 6700                       		beq.s	loc_1881E
00019212 0240 0010                  		andi.w	#$10,d0
00019216 0241 0010                  		andi.w	#$10,d1
0001921A B240                       		cmp.w	d0,d1
0001921C 6700                       		beq.s	loc_1881E
0001921E 61B8                       		bsr.s	Obj74_Duplicate2
00019220 3168 0008 0032             		move.w	8(a0),$32(a0)
00019226                            
00019226                            loc_1881E:
00019226 3168 0008 0030             		move.w	8(a0),$30(a0)
0001922C 4E75                       		rts	
0001922E                            ; ===========================================================================
0001922E                            
0001922E                            loc_18826:
0001922E 5428 0025                  		addq.b	#2,$25(a0)
00019232 4E75                       		rts	
00019234                            ; ===========================================================================
00019234                            
00019234                            loc_1882C:
00019234 5428 0024                  		addq.b	#2,$24(a0)
00019238 4E75                       		rts	
0001923A                            ; ===========================================================================
0001923A                            
0001923A                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001923A 08A8 0001 0022             		bclr	#1,$22(a0)
00019240 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019246 3028 0008                  		move.w	8(a0),d0
0001924A 9068 0032                  		sub.w	$32(a0),d0
0001924E 6A00                       		bpl.s	loc_1884A
00019250 4440                       		neg.w	d0
00019252                            
00019252                            loc_1884A:
00019252 0C40 0012                  		cmpi.w	#$12,d0
00019256 6600                       		bne.s	loc_18856
00019258 08A8 0007 0002             		bclr	#7,2(a0)
0001925E                            
0001925E                            loc_18856:
0001925E 6100 C536                  		bsr.w	ObjHitFloor
00019262 4A41                       		tst.w	d1
00019264 6A00                       		bpl.s	locret_1887E
00019266 5328 0029                  		subq.b	#1,$29(a0)
0001926A 6700                       		beq.s	Obj74_Delete2
0001926C 4268 0012                  		clr.w	$12(a0)
00019270 3168 0032 0008             		move.w	$32(a0),8(a0)
00019276 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001927C 08E8 0007 0002             		bset	#7,2(a0)
00019282 5528 0025                  		subq.b	#2,$25(a0)
00019286                            
00019286                            locret_1887E:
00019286 4E75                       		rts	
00019288                            ; ===========================================================================
00019288                            
00019288                            Obj74_Delete2:
00019288 4EF9 0000 DEC0             		jmp	DeleteObject
0001928E                            ; ===========================================================================
0001928E                            
0001928E                            loc_18886:				; XREF: Obj74_Index
0001928E 08E8 0007 0002             		bset	#7,2(a0)
00019294 5328 0029                  		subq.b	#1,$29(a0)
00019298 6600                       		bne.s	Obj74_Animate
0001929A 117C 0001 001C             		move.b	#1,$1C(a0)
000192A0 5968 000C                  		subq.w	#4,$C(a0)
000192A4 4228 0020                  		clr.b	$20(a0)
000192A8                            
000192A8                            Obj74_Animate:
000192A8 43F9 0000 ED3E             		lea	(Ani_obj14).l,a1
000192AE 4EF9 0000 AED2             		jmp	AnimateSprite
000192B4                            ; ===========================================================================
000192B4                            
000192B4                            Obj74_Delete3:				; XREF: Obj74_Index
000192B4 4EF9 0000 DEC0             		jmp	DeleteObject
000192BA                            ; ===========================================================================
000192BA                            
000192BA                            Obj7A_Delete:
000192BA 4EF9 0000 DEC0             		jmp	DeleteObject
000192C0                            ; ===========================================================================
000192C0                            ; ---------------------------------------------------------------------------
000192C0                            ; Object 7A - Eggman (SLZ)
000192C0                            ; ---------------------------------------------------------------------------
000192C0                            
000192C0                            Obj7A:					; XREF: Obj_Index
000192C0 7000                       		moveq	#0,d0
000192C2 1028 0024                  		move.b	$24(a0),d0
000192C6 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000192CA 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000192CE                            ; ===========================================================================
000192CE 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000192D0 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000192D2 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000192D4 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000192D6 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000192D8                            
000192D8 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000192DB 0401 04                    		dc.b 4,	1, 4
000192DE 0607 04                    		dc.b 6,	7, 4
000192E1 0800 03                    		dc.b 8,	0, 3
000192E4                            ; ===========================================================================
000192E4                            
000192E4                            Obj7A_Main:				; XREF: Obj7A_Index
000192E4 317C 2188 0008             		move.w	#$2188,8(a0)
000192EA 317C 0228 000C             		move.w	#$228,$C(a0)
000192F0 3168 0008 0030             		move.w	8(a0),$30(a0)
000192F6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000192FC 117C 000F 0020             		move.b	#$F,$20(a0)
00019302 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019308 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001930C 2248                       		movea.l	a0,a1
0001930E 7203                       		moveq	#3,d1
00019310 6000                       		bra.s	Obj7A_LoadBoss
00019312                            ; ===========================================================================
00019312                            
00019312                            Obj7A_Loop:
00019312 4EB9 0000 E320             		jsr	SingleObjLoad2
00019318 6600                       		bne.s	loc_1895C
0001931A 12BC 007A                  		move.b	#$7A,0(a1)
0001931E 3368 0008 0008             		move.w	8(a0),8(a1)
00019324 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001932A                            
0001932A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001932A 08A8 0000 0022             		bclr	#0,$22(a0)
00019330 4229 0025                  		clr.b	$25(a1)
00019334 135A 0024                  		move.b	(a2)+,$24(a1)
00019338 135A 001C                  		move.b	(a2)+,$1C(a1)
0001933C 135A 0018                  		move.b	(a2)+,$18(a1)
00019340 237C 0001 877A 0004        		move.l	#Map_Eggman,4(a1)
00019348 337C 0400 0002             		move.w	#$400,2(a1)
0001934E 137C 0004 0001             		move.b	#4,1(a1)
00019354 137C 0020 0019             		move.b	#$20,$19(a1)
0001935A 2348 0034                  		move.l	a0,$34(a1)
0001935E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019362                            
00019362                            loc_1895C:
00019362 43F8 D040                  		lea	($FFFFD040).w,a1
00019366 45E8 002A                  		lea	$2A(a0),a2
0001936A 705E                       		moveq	#$5E,d0
0001936C 723E                       		moveq	#$3E,d1
0001936E                            
0001936E                            loc_18968:
0001936E B011                       		cmp.b	(a1),d0
00019370 6600                       		bne.s	loc_18974
00019372 4A29 0028                  		tst.b	$28(a1)
00019376 6700                       		beq.s	loc_18974
00019378 34C9                       		move.w	a1,(a2)+
0001937A                            
0001937A                            loc_18974:
0001937A D2FC 0040                  		adda.w	#$40,a1
0001937E 51C9 FFEE                  		dbf	d1,loc_18968
00019382                            
00019382                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019382 7000                       		moveq	#0,d0
00019384 1028 0025                  		move.b	$25(a0),d0
00019388 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001938C 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019390 43F9 0001 8716             		lea	(Ani_Eggman).l,a1
00019396 4EB9 0000 AED2             		jsr	AnimateSprite
0001939C 7003                       		moveq	#3,d0
0001939E C028 0022                  		and.b	$22(a0),d0
000193A2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000193A8 8128 0001                  		or.b	d0,1(a0)
000193AC 4EF9 0000 DE84             		jmp	DisplaySprite
000193B2                            ; ===========================================================================
000193B2 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000193B4 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000193B6 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000193B8 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000193BA 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000193BC 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000193BE                            ; ===========================================================================
000193BE                            
000193BE                            loc_189B8:				; XREF: Obj7A_ShipIndex
000193BE 317C FF00 0010             		move.w	#-$100,$10(a0)
000193C4 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000193CA 6400                       		bcc.s	loc_189CA
000193CC 5428 0025                  		addq.b	#2,$25(a0)
000193D0                            
000193D0                            loc_189CA:
000193D0 6100 EF02                  		bsr.w	BossMove
000193D4 1028 003F                  		move.b	$3F(a0),d0
000193D8 5428 003F                  		addq.b	#2,$3F(a0)
000193DC 4EB9 0000 2B58             		jsr	(CalcSine).l
000193E2 EC40                       		asr.w	#6,d0
000193E4 D068 0038                  		add.w	$38(a0),d0
000193E8 3140 000C                  		move.w	d0,$C(a0)
000193EC 3168 0030 0008             		move.w	$30(a0),8(a0)
000193F2 6000                       		bra.s	loc_189FE
000193F4                            ; ===========================================================================
000193F4                            
000193F4                            loc_189EE:
000193F4 6100 EEDE                  		bsr.w	BossMove
000193F8 3168 0038 000C             		move.w	$38(a0),$C(a0)
000193FE 3168 0030 0008             		move.w	$30(a0),8(a0)
00019404                            
00019404                            loc_189FE:
00019404 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001940A 6400                       		bcc.s	locret_18A44
0001940C 4A28 0022                  		tst.b	$22(a0)
00019410 6B00                       		bmi.s	loc_18A46
00019412 4A28 0020                  		tst.b	$20(a0)
00019416 6600                       		bne.s	locret_18A44
00019418 4A28 003E                  		tst.b	$3E(a0)
0001941C 6600                       		bne.s	loc_18A28
0001941E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019424 303C 00AC                  		move.w	#$AC,d0
00019428 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001942E                            
0001942E                            loc_18A28:
0001942E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019432 7000                       		moveq	#0,d0
00019434 4A51                       		tst.w	(a1)
00019436 6600                       		bne.s	loc_18A36
00019438 303C 0EEE                  		move.w	#$EEE,d0
0001943C                            
0001943C                            loc_18A36:
0001943C 3280                       		move.w	d0,(a1)
0001943E 5328 003E                  		subq.b	#1,$3E(a0)
00019442 6600                       		bne.s	locret_18A44
00019444 117C 000F 0020             		move.b	#$F,$20(a0)
0001944A                            
0001944A                            locret_18A44:
0001944A 4E75                       		rts	
0001944C                            ; ===========================================================================
0001944C                            
0001944C                            loc_18A46:
0001944C 7064                       		moveq	#100,d0
0001944E 6100 0000                  		bsr.w	AddPoints
00019452 117C 0006 0025             		move.b	#6,$25(a0)
00019458 117C 0078 003C             		move.b	#$78,$3C(a0)
0001945E 4268 0010                  		clr.w	$10(a0)
00019462 4E75                       		rts	
00019464                            ; ===========================================================================
00019464                            
00019464                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019464 3028 0030                  		move.w	$30(a0),d0
00019468 317C 0200 0010             		move.w	#$200,$10(a0)
0001946E 0828 0000 0022             		btst	#0,$22(a0)
00019474 6600                       		bne.s	loc_18A7C
00019476 4468 0010                  		neg.w	$10(a0)
0001947A 0C40 2008                  		cmpi.w	#$2008,d0
0001947E 6E00                       		bgt.s	loc_18A88
00019480 6000                       		bra.s	loc_18A82
00019482                            ; ===========================================================================
00019482                            
00019482                            loc_18A7C:
00019482 0C40 2138                  		cmpi.w	#$2138,d0
00019486 6D00                       		blt.s	loc_18A88
00019488                            
00019488                            loc_18A82:
00019488 0868 0000 0022             		bchg	#0,$22(a0)
0001948E                            
0001948E                            loc_18A88:
0001948E 3028 0008                  		move.w	8(a0),d0
00019492 72FF                       		moveq	#-1,d1
00019494 7402                       		moveq	#2,d2
00019496 45E8 002A                  		lea	$2A(a0),a2
0001949A 7828                       		moveq	#$28,d4
0001949C 4A68 0010                  		tst.w	$10(a0)
000194A0 6A00                       		bpl.s	loc_18A9E
000194A2 4444                       		neg.w	d4
000194A4                            
000194A4                            loc_18A9E:
000194A4 321A                       		move.w	(a2)+,d1
000194A6 2641                       		movea.l	d1,a3
000194A8 082B 0003 0022             		btst	#3,$22(a3)
000194AE 6600                       		bne.s	loc_18AB4
000194B0 362B 0008                  		move.w	8(a3),d3
000194B4 D644                       		add.w	d4,d3
000194B6 9640                       		sub.w	d0,d3
000194B8 6700                       		beq.s	loc_18AC0
000194BA                            
000194BA                            loc_18AB4:
000194BA 51CA FFE8                  		dbf	d2,loc_18A9E
000194BE                            
000194BE 1142 0028                  		move.b	d2,$28(a0)
000194C2 6000 FF0C                  		bra.w	loc_189CA
000194C6                            ; ===========================================================================
000194C6                            
000194C6                            loc_18AC0:
000194C6 1142 0028                  		move.b	d2,$28(a0)
000194CA 5428 0025                  		addq.b	#2,$25(a0)
000194CE 117C 0028 003C             		move.b	#$28,$3C(a0)
000194D4 6000 FEFA                  		bra.w	loc_189CA
000194D8                            ; ===========================================================================
000194D8                            
000194D8                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000194D8 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000194DE 6600                       		bne.s	loc_18B36
000194E0 70FF                       		moveq	#-1,d0
000194E2 1028 0028                  		move.b	$28(a0),d0
000194E6 4880                       		ext.w	d0
000194E8 6B00                       		bmi.s	loc_18B40
000194EA 5540                       		subq.w	#2,d0
000194EC 4440                       		neg.w	d0
000194EE D040                       		add.w	d0,d0
000194F0 43E8 002A                  		lea	$2A(a0),a1
000194F4 3031 0000                  		move.w	(a1,d0.w),d0
000194F8 2440                       		movea.l	d0,a2
000194FA 43F8 D040                  		lea	($FFFFD040).w,a1
000194FE 723E                       		moveq	#$3E,d1
00019500                            
00019500                            loc_18AFA:
00019500 B0A9 003C                  		cmp.l	$3C(a1),d0
00019504 6700                       		beq.s	loc_18B40
00019506 D2FC 0040                  		adda.w	#$40,a1
0001950A 51C9 FFF4                  		dbf	d1,loc_18AFA
0001950E                            
0001950E 2F08                       		move.l	a0,-(sp)
00019510 41D2                       		lea	(a2),a0
00019512 4EB9 0000 E320             		jsr	SingleObjLoad2
00019518 205F                       		movea.l	(sp)+,a0
0001951A 6600                       		bne.s	loc_18B40
0001951C 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019520 3368 0008 0008             		move.w	8(a0),8(a1)
00019526 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001952C 0669 0020 000C             		addi.w	#$20,$C(a1)
00019532 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019538 234A 003C                  		move.l	a2,$3C(a1)
0001953C                            
0001953C                            loc_18B36:
0001953C 5328 003C                  		subq.b	#1,$3C(a0)
00019540 6700                       		beq.s	loc_18B40
00019542 6000 FEC0                  		bra.w	loc_189FE
00019546                            ; ===========================================================================
00019546                            
00019546                            loc_18B40:
00019546 5528 0025                  		subq.b	#2,$25(a0)
0001954A 6000 FE84                  		bra.w	loc_189CA
0001954E                            ; ===========================================================================
0001954E                            
0001954E                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001954E 5328 003C                  		subq.b	#1,$3C(a0)
00019552 6B00                       		bmi.s	loc_18B52
00019554 6000 ED3C                  		bra.w	BossDefeated
00019558                            ; ===========================================================================
00019558                            
00019558                            loc_18B52:
00019558 5428 0025                  		addq.b	#2,$25(a0)
0001955C 4268 0012                  		clr.w	$12(a0)
00019560 08E8 0000 0022             		bset	#0,$22(a0)
00019566 08A8 0007 0022             		bclr	#7,$22(a0)
0001956C 4268 0010                  		clr.w	$10(a0)
00019570 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019576 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001957A 6600                       		bne.s	loc_18B7C
0001957C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019582                            
00019582                            loc_18B7C:
00019582 6000 FE80                  		bra.w	loc_189FE
00019586                            ; ===========================================================================
00019586                            
00019586                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019586 5228 003C                  		addq.b	#1,$3C(a0)
0001958A 6700                       		beq.s	loc_18B90
0001958C 6A00                       		bpl.s	loc_18B96
0001958E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019594 6000                       		bra.s	loc_18BC2
00019596                            ; ===========================================================================
00019596                            
00019596                            loc_18B90:
00019596 4268 0012                  		clr.w	$12(a0)
0001959A 6000                       		bra.s	loc_18BC2
0001959C                            ; ===========================================================================
0001959C                            
0001959C                            loc_18B96:
0001959C 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000195A2 6500                       		bcs.s	loc_18BAE
000195A4 6700                       		beq.s	loc_18BB4
000195A6 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000195AC 6500                       		bcs.s	loc_18BC2
000195AE 5428 0025                  		addq.b	#2,$25(a0)
000195B2 6000                       		bra.s	loc_18BC2
000195B4                            ; ===========================================================================
000195B4                            
000195B4                            loc_18BAE:
000195B4 5168 0012                  		subq.w	#8,$12(a0)
000195B8 6000                       		bra.s	loc_18BC2
000195BA                            ; ===========================================================================
000195BA                            
000195BA                            loc_18BB4:
000195BA 4268 0012                  		clr.w	$12(a0)
000195BE 303C 0084                  		move.w	#$84,d0
000195C2 4EB9 0000 13B0             		jsr	(PlaySound).l	; play SLZ music
000195C8                            
000195C8                            loc_18BC2:
000195C8 6000 FE2A                  		bra.w	loc_189EE
000195CC                            ; ===========================================================================
000195CC                            
000195CC                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000195CC 317C 0400 0010             		move.w	#$400,$10(a0)
000195D2 317C FFC0 0012             		move.w	#-$40,$12(a0)
000195D8 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000195DE 6400                       		bcc.s	loc_18BE0
000195E0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000195E4 6000                       		bra.s	loc_18BE8
000195E6                            ; ===========================================================================
000195E6                            
000195E6                            loc_18BE0:
000195E6 4A28 0001                  		tst.b	1(a0)
000195EA 6A00 FCCE                  		bpl.w	Obj7A_Delete
000195EE                            
000195EE                            loc_18BE8:
000195EE 6100 ECE4                  		bsr.w	BossMove
000195F2 6000 FDDC                  		bra.w	loc_189CA
000195F6                            ; ===========================================================================
000195F6                            
000195F6                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000195F6 7000                       		moveq	#0,d0
000195F8 7201                       		moveq	#1,d1
000195FA 2268 0034                  		movea.l	$34(a0),a1
000195FE 1029 0025                  		move.b	$25(a1),d0
00019602 0C00 0006                  		cmpi.b	#6,d0
00019606 6B00                       		bmi.s	loc_18C06
00019608 720A                       		moveq	#$A,d1
0001960A 6000                       		bra.s	loc_18C1A
0001960C                            ; ===========================================================================
0001960C                            
0001960C                            loc_18C06:
0001960C 4A29 0020                  		tst.b	$20(a1)
00019610 6600                       		bne.s	loc_18C10
00019612 7205                       		moveq	#5,d1
00019614 6000                       		bra.s	loc_18C1A
00019616                            ; ===========================================================================
00019616                            
00019616                            loc_18C10:
00019616 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001961C 6500                       		bcs.s	loc_18C1A
0001961E 7204                       		moveq	#4,d1
00019620                            
00019620                            loc_18C1A:
00019620 1141 001C                  		move.b	d1,$1C(a0)
00019624 0C00 000A                  		cmpi.b	#$A,d0
00019628 6600                       		bne.s	loc_18C32
0001962A 117C 0006 001C             		move.b	#6,$1C(a0)
00019630 4A28 0001                  		tst.b	1(a0)
00019634 6A00 FC84                  		bpl.w	Obj7A_Delete
00019638                            
00019638                            loc_18C32:
00019638 6000                       		bra.s	loc_18C6C
0001963A                            ; ===========================================================================
0001963A                            
0001963A                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001963A 117C 0008 001C             		move.b	#8,$1C(a0)
00019640 2268 0034                  		movea.l	$34(a0),a1
00019644 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001964A 6600                       		bne.s	loc_18C56
0001964C 4A28 0001                  		tst.b	1(a0)
00019650 6A00 FC68                  		bpl.w	Obj7A_Delete
00019654 117C 000B 001C             		move.b	#$B,$1C(a0)
0001965A 6000                       		bra.s	loc_18C6C
0001965C                            ; ===========================================================================
0001965C                            
0001965C                            loc_18C56:
0001965C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019662 6E00                       		bgt.s	loc_18C6C
00019664 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001966A 6D00                       		blt.s	loc_18C6C
0001966C 117C 0007 001C             		move.b	#7,$1C(a0)
00019672                            
00019672                            loc_18C6C:
00019672 43F9 0001 8716             		lea	(Ani_Eggman).l,a1
00019678 4EB9 0000 AED2             		jsr	AnimateSprite
0001967E                            
0001967E                            loc_18C78:
0001967E 2268 0034                  		movea.l	$34(a0),a1
00019682 3169 0008 0008             		move.w	8(a1),8(a0)
00019688 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001968E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019694 7003                       		moveq	#3,d0
00019696 C028 0022                  		and.b	$22(a0),d0
0001969A 0228 00FC 0001             		andi.b	#-4,1(a0)
000196A0 8128 0001                  		or.b	d0,1(a0)
000196A4 4EF9 0000 DE84             		jmp	DisplaySprite
000196AA                            ; ===========================================================================
000196AA                            
000196AA                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000196AA 2268 0034                  		movea.l	$34(a0),a1
000196AE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000196B4 6600                       		bne.s	loc_18CB8
000196B6 4A28 0001                  		tst.b	1(a0)
000196BA 6A00 FBFE                  		bpl.w	Obj7A_Delete
000196BE                            
000196BE                            loc_18CB8:
000196BE 217C 0001 8842 0004        		move.l	#Map_BossItems,4(a0)
000196C6 317C 246C 0002             		move.w	#$246C,2(a0)
000196CC 117C 0003 001A             		move.b	#3,$1A(a0)
000196D2 60AA                       		bra.s	loc_18C78
000196D4                            ; ===========================================================================
000196D4                            ; ---------------------------------------------------------------------------
000196D4                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000196D4                            ; ---------------------------------------------------------------------------
000196D4                            
000196D4                            Obj7B:					; XREF: Obj_Index
000196D4 7000                       		moveq	#0,d0
000196D6 1028 0024                  		move.b	$24(a0),d0
000196DA 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000196DE 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000196E2 3028 0030                  		move.w	$30(a0),d0
000196E6 0240 FF80                  		andi.w	#$FF80,d0
000196EA 3238 F700                  		move.w	($FFFFF700).w,d1
000196EE 0441 0080                  		subi.w	#$80,d1
000196F2 0241 FF80                  		andi.w	#$FF80,d1
000196F6 9041                       		sub.w	d1,d0
000196F8 6B00 FBC0                  		bmi.w	Obj7A_Delete
000196FC 0C40 0280                  		cmpi.w	#$280,d0
00019700 6200 FBB8                  		bhi.w	Obj7A_Delete
00019704 4EF9 0000 DE84             		jmp	DisplaySprite
0001970A                            ; ===========================================================================
0001970A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001970C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001970E 0000                       		dc.w loc_18DC6-Obj7B_Index
00019710 0000                       		dc.w loc_18EAA-Obj7B_Index
00019712 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019714 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019716                            ; ===========================================================================
00019716                            
00019716                            Obj7B_Main:				; XREF: Obj7B_Index
00019716 217C 0001 2250 0004        		move.l	#Map_obj5Ea,4(a0)
0001971E 317C 0518 0002             		move.w	#$518,2(a0)
00019724 117C 0001 001A             		move.b	#1,$1A(a0)
0001972A 0028 0004 0001             		ori.b	#4,1(a0)
00019730 117C 0004 0018             		move.b	#4,$18(a0)
00019736 117C 008B 0020             		move.b	#$8B,$20(a0)
0001973C 117C 000C 0019             		move.b	#$C,$19(a0)
00019742 2268 003C                  		movea.l	$3C(a0),a1
00019746 3169 0008 0030             		move.w	8(a1),$30(a0)
0001974C 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019752 08E8 0000 0022             		bset	#0,$22(a0)
00019758 3028 0008                  		move.w	8(a0),d0
0001975C B069 0008                  		cmp.w	8(a1),d0
00019760 6E00                       		bgt.s	loc_18D68
00019762 08A8 0000 0022             		bclr	#0,$22(a0)
00019768 117C 0002 003A             		move.b	#2,$3A(a0)
0001976E                            
0001976E                            loc_18D68:
0001976E 5428 0024                  		addq.b	#2,$24(a0)
00019772                            
00019772                            Obj7B_Fall:				; XREF: Obj7B_Index
00019772 4EB9 0000 DDEC             		jsr	ObjectFall
00019778 2268 003C                  		movea.l	$3C(a0),a1
0001977C 45F9 0000 0000             		lea	(word_19018).l,a2
00019782 7000                       		moveq	#0,d0
00019784 1029 001A                  		move.b	$1A(a1),d0
00019788 3228 0008                  		move.w	8(a0),d1
0001978C 9268 0030                  		sub.w	$30(a0),d1
00019790 6400                       		bcc.s	loc_18D8E
00019792 5440                       		addq.w	#2,d0
00019794                            
00019794                            loc_18D8E:
00019794 D040                       		add.w	d0,d0
00019796 3228 0034                  		move.w	$34(a0),d1
0001979A D272 0000                  		add.w	(a2,d0.w),d1
0001979E B268 000C                  		cmp.w	$C(a0),d1
000197A2 6E00                       		bgt.s	locret_18DC4
000197A4 2268 003C                  		movea.l	$3C(a0),a1
000197A8 7202                       		moveq	#2,d1
000197AA 0828 0000 0022             		btst	#0,$22(a0)
000197B0 6700                       		beq.s	loc_18DAE
000197B2 7200                       		moveq	#0,d1
000197B4                            
000197B4                            loc_18DAE:
000197B4 317C 00F0 0028             		move.w	#$F0,$28(a0)
000197BA 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000197C0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000197C6 6000 0000                  		bra.w	loc_18FA2
000197CA                            ; ===========================================================================
000197CA                            
000197CA                            locret_18DC4:
000197CA 4E75                       		rts	
000197CC                            ; ===========================================================================
000197CC                            
000197CC                            loc_18DC6:				; XREF: Obj7B_Index
000197CC 2268 003C                  		movea.l	$3C(a0),a1
000197D0 7000                       		moveq	#0,d0
000197D2 1028 003A                  		move.b	$3A(a0),d0
000197D6 9029 003A                  		sub.b	$3A(a1),d0
000197DA 6700                       		beq.s	loc_18E2A
000197DC 6400                       		bcc.s	loc_18DDA
000197DE 4400                       		neg.b	d0
000197E0                            
000197E0                            loc_18DDA:
000197E0 323C F7E8                  		move.w	#-$818,d1
000197E4 343C FEEC                  		move.w	#-$114,d2
000197E8 0C00 0001                  		cmpi.b	#1,d0
000197EC 6700                       		beq.s	loc_18E00
000197EE 323C F6A0                  		move.w	#-$960,d1
000197F2 343C FF0C                  		move.w	#-$F4,d2
000197F6 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000197FC 6D00                       		blt.s	loc_18E00
000197FE 323C F5E0                  		move.w	#-$A20,d1
00019802 343C FF80                  		move.w	#-$80,d2
00019806                            
00019806                            loc_18E00:
00019806 3141 0012                  		move.w	d1,$12(a0)
0001980A 3142 0010                  		move.w	d2,$10(a0)
0001980E 3028 0008                  		move.w	8(a0),d0
00019812 9068 0030                  		sub.w	$30(a0),d0
00019816 6400                       		bcc.s	loc_18E16
00019818 4468 0010                  		neg.w	$10(a0)
0001981C                            
0001981C                            loc_18E16:
0001981C 117C 0001 001A             		move.b	#1,$1A(a0)
00019822 317C 0020 0028             		move.w	#$20,$28(a0)
00019828 5428 0024                  		addq.b	#2,$24(a0)
0001982C 6000 0000                  		bra.w	loc_18EAA
00019830                            ; ===========================================================================
00019830                            
00019830                            loc_18E2A:				; XREF: loc_18DC6
00019830 45F9 0000 0000             		lea	(word_19018).l,a2
00019836 7000                       		moveq	#0,d0
00019838 1029 001A                  		move.b	$1A(a1),d0
0001983C 343C 0028                  		move.w	#$28,d2
00019840 3228 0008                  		move.w	8(a0),d1
00019844 9268 0030                  		sub.w	$30(a0),d1
00019848 6400                       		bcc.s	loc_18E48
0001984A 4442                       		neg.w	d2
0001984C 5440                       		addq.w	#2,d0
0001984E                            
0001984E                            loc_18E48:
0001984E D040                       		add.w	d0,d0
00019850 3228 0034                  		move.w	$34(a0),d1
00019854 D272 0000                  		add.w	(a2,d0.w),d1
00019858 3141 000C                  		move.w	d1,$C(a0)
0001985C D468 0030                  		add.w	$30(a0),d2
00019860 3142 0008                  		move.w	d2,8(a0)
00019864 4268 000E                  		clr.w	$E(a0)
00019868 4268 000A                  		clr.w	$A(a0)
0001986C 5368 0028                  		subq.w	#1,$28(a0)
00019870 6600                       		bne.s	loc_18E7A
00019872 317C 0020 0028             		move.w	#$20,$28(a0)
00019878 117C 0008 0024             		move.b	#8,$24(a0)
0001987E 4E75                       		rts	
00019880                            ; ===========================================================================
00019880                            
00019880                            loc_18E7A:
00019880 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019886 6600                       		bne.s	loc_18E88
00019888 117C 0005 001F             		move.b	#5,$1F(a0)
0001988E                            
0001988E                            loc_18E88:
0001988E 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019894 6600                       		bne.s	loc_18E96
00019896 117C 0002 001F             		move.b	#2,$1F(a0)
0001989C                            
0001989C                            loc_18E96:
0001989C 5328 001E                  		subq.b	#1,$1E(a0)
000198A0 6E00                       		bgt.s	locret_18EA8
000198A2 0868 0000 001A             		bchg	#0,$1A(a0)
000198A8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000198AE                            
000198AE                            locret_18EA8:
000198AE 4E75                       		rts	
000198B0                            ; ===========================================================================
000198B0                            
000198B0                            loc_18EAA:				; XREF: Obj7B_Index
000198B0 43F8 D040                  		lea	($FFFFD040).w,a1
000198B4 707A                       		moveq	#$7A,d0
000198B6 7240                       		moveq	#$40,d1
000198B8 743E                       		moveq	#$3E,d2
000198BA                            
000198BA                            loc_18EB4:
000198BA B011                       		cmp.b	(a1),d0
000198BC 6700                       		beq.s	loc_18EC0
000198BE D2C1                       		adda.w	d1,a1
000198C0 51CA FFF8                  		dbf	d2,loc_18EB4
000198C4                            
000198C4 6000                       		bra.s	loc_18F38
000198C6                            ; ===========================================================================
000198C6                            
000198C6                            loc_18EC0:
000198C6 3029 0008                  		move.w	8(a1),d0
000198CA 3229 000C                  		move.w	$C(a1),d1
000198CE 3428 0008                  		move.w	8(a0),d2
000198D2 3628 000C                  		move.w	$C(a0),d3
000198D6 45FA 0000                  		lea	byte_19022(pc),a2
000198DA 47FA 0000                  		lea	byte_19026(pc),a3
000198DE 181A                       		move.b	(a2)+,d4
000198E0 4884                       		ext.w	d4
000198E2 D044                       		add.w	d4,d0
000198E4 181B                       		move.b	(a3)+,d4
000198E6 4884                       		ext.w	d4
000198E8 D444                       		add.w	d4,d2
000198EA B440                       		cmp.w	d0,d2
000198EC 6500                       		bcs.s	loc_18F38
000198EE 181A                       		move.b	(a2)+,d4
000198F0 4884                       		ext.w	d4
000198F2 D044                       		add.w	d4,d0
000198F4 181B                       		move.b	(a3)+,d4
000198F6 4884                       		ext.w	d4
000198F8 D444                       		add.w	d4,d2
000198FA B042                       		cmp.w	d2,d0
000198FC 6500                       		bcs.s	loc_18F38
000198FE 181A                       		move.b	(a2)+,d4
00019900 4884                       		ext.w	d4
00019902 D244                       		add.w	d4,d1
00019904 181B                       		move.b	(a3)+,d4
00019906 4884                       		ext.w	d4
00019908 D644                       		add.w	d4,d3
0001990A B641                       		cmp.w	d1,d3
0001990C 6500                       		bcs.s	loc_18F38
0001990E 181A                       		move.b	(a2)+,d4
00019910 4884                       		ext.w	d4
00019912 D244                       		add.w	d4,d1
00019914 181B                       		move.b	(a3)+,d4
00019916 4884                       		ext.w	d4
00019918 D644                       		add.w	d4,d3
0001991A B243                       		cmp.w	d3,d1
0001991C 6500                       		bcs.s	loc_18F38
0001991E 5428 0024                  		addq.b	#2,$24(a0)
00019922 4268 0028                  		clr.w	$28(a0)
00019926 4229 0020                  		clr.b	$20(a1)
0001992A 5329 0021                  		subq.b	#1,$21(a1)
0001992E 6600                       		bne.s	loc_18F38
00019930 08E9 0007 0022             		bset	#7,$22(a1)
00019936 4268 0010                  		clr.w	$10(a0)
0001993A 4268 0012                  		clr.w	$12(a0)
0001993E                            
0001993E                            loc_18F38:
0001993E 4A68 0012                  		tst.w	$12(a0)
00019942 6A00                       		bpl.s	loc_18F5C
00019944 4EB9 0000 DDEC             		jsr	ObjectFall
0001994A 3028 0034                  		move.w	$34(a0),d0
0001994E 0440 002F                  		subi.w	#$2F,d0
00019952 B068 000C                  		cmp.w	$C(a0),d0
00019956 6E00                       		bgt.s	loc_18F58
00019958 4EB9 0000 DDEC             		jsr	ObjectFall
0001995E                            
0001995E                            loc_18F58:
0001995E 6000 FF20                  		bra.w	loc_18E7A
00019962                            ; ===========================================================================
00019962                            
00019962                            loc_18F5C:
00019962 4EB9 0000 DDEC             		jsr	ObjectFall
00019968 2268 003C                  		movea.l	$3C(a0),a1
0001996C 45F9 0000 0000             		lea	(word_19018).l,a2
00019972 7000                       		moveq	#0,d0
00019974 1029 001A                  		move.b	$1A(a1),d0
00019978 3228 0008                  		move.w	8(a0),d1
0001997C 9268 0030                  		sub.w	$30(a0),d1
00019980 6400                       		bcc.s	loc_18F7E
00019982 5440                       		addq.w	#2,d0
00019984                            
00019984                            loc_18F7E:
00019984 D040                       		add.w	d0,d0
00019986 3228 0034                  		move.w	$34(a0),d1
0001998A D272 0000                  		add.w	(a2,d0.w),d1
0001998E B268 000C                  		cmp.w	$C(a0),d1
00019992 6ECA                       		bgt.s	loc_18F58
00019994 2268 003C                  		movea.l	$3C(a0),a1
00019998 7202                       		moveq	#2,d1
0001999A 4A68 0010                  		tst.w	$10(a0)
0001999E 6B00                       		bmi.s	loc_18F9C
000199A0 7200                       		moveq	#0,d1
000199A2                            
000199A2                            loc_18F9C:
000199A2 317C 0000 0028             		move.w	#0,$28(a0)
000199A8                            
000199A8                            loc_18FA2:
000199A8 1341 003A                  		move.b	d1,$3A(a1)
000199AC 1141 003A                  		move.b	d1,$3A(a0)
000199B0 B229 001A                  		cmp.b	$1A(a1),d1
000199B4 6700                       		beq.s	loc_19008
000199B6 08A9 0003 0022             		bclr	#3,$22(a1)
000199BC 6700                       		beq.s	loc_19008
000199BE 4229 0025                  		clr.b	$25(a1)
000199C2 137C 0002 0024             		move.b	#2,$24(a1)
000199C8 45F8 D000                  		lea	($FFFFD000).w,a2
000199CC 3568 0012 0012             		move.w	$12(a0),$12(a2)
000199D2 446A 0012                  		neg.w	$12(a2)
000199D6 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000199DC 6600                       		bne.s	loc_18FDC
000199DE E0EA 0012                  		asr	$12(a2)
000199E2                            
000199E2                            loc_18FDC:
000199E2 08EA 0001 0022             		bset	#1,$22(a2)
000199E8 08AA 0003 0022             		bclr	#3,$22(a2)
000199EE 422A 003C                  		clr.b	$3C(a2)
000199F2 2F08                       		move.l	a0,-(sp)
000199F4 41D2                       		lea	(a2),a0
000199F6 4EBA A2E0                  		jsr	Obj01_ChkRoll
000199FA 205F                       		movea.l	(sp)+,a0
000199FC 157C 0002 0024             		move.b	#2,$24(a2)
00019A02 303C 00CC                  		move.w	#$CC,d0
00019A06 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019A0C                            
00019A0C                            loc_19008:
00019A0C 4268 0010                  		clr.w	$10(a0)
00019A10 4268 0012                  		clr.w	$12(a0)
00019A14 5428 0024                  		addq.b	#2,$24(a0)
00019A18 6000 FE66                  		bra.w	loc_18E7A
00019A1C                            ; ===========================================================================
00019A1C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019A26                            		even
00019A26 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019A2A                            		even
00019A2A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019A2E                            		even
00019A2E                            ; ===========================================================================
00019A2E                            
00019A2E                            Obj7B_Explode:				; XREF: Obj7B_Index
00019A2E 10BC 003F                  		move.b	#$3F,(a0)
00019A32 4228 0024                  		clr.b	$24(a0)
00019A36 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019A3C 6700                       		beq.s	Obj7B_MakeFrag
00019A3E 4E75                       		rts	
00019A40                            ; ===========================================================================
00019A40                            
00019A40                            Obj7B_MakeFrag:
00019A40 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019A46 7203                       		moveq	#3,d1
00019A48 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019A4C                            
00019A4C                            Obj7B_Loop:
00019A4C 4EB9 0000 E30A             		jsr	SingleObjLoad
00019A52 6600                       		bne.s	loc_1909A
00019A54 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019A58 137C 000A 0024             		move.b	#$A,$24(a1)
00019A5E 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019A66 137C 0003 0018             		move.b	#3,$18(a1)
00019A6C 337C 0518 0002             		move.w	#$518,2(a1)
00019A72 3368 0008 0008             		move.w	8(a0),8(a1)
00019A78 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019A7E 335A 0010                  		move.w	(a2)+,$10(a1)
00019A82 335A 0012                  		move.w	(a2)+,$12(a1)
00019A86 137C 0098 0020             		move.b	#$98,$20(a1)
00019A8C 0029 0004 0001             		ori.b	#4,1(a1)
00019A92 08E9 0007 0001             		bset	#7,1(a1)
00019A98 137C 000C 0019             		move.b	#$C,$19(a1)
00019A9E                            
00019A9E                            loc_1909A:
00019A9E 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019AA2                            
00019AA2 4E75                       		rts	
00019AA4                            ; ===========================================================================
00019AA4 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019AA8 FF60 FDC0                  		dc.w $FF60, $FDC0
00019AAC 0100 FCC0                  		dc.w $100, $FCC0
00019AB0 00A0 FDC0                  		dc.w $A0, $FDC0
00019AB4                            ; ===========================================================================
00019AB4                            
00019AB4                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019AB4 4EB9 0000 DE5E             		jsr	SpeedToPos
00019ABA 3168 0008 0030             		move.w	8(a0),$30(a0)
00019AC0 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019AC6 0668 0018 0012             		addi.w	#$18,$12(a0)
00019ACC 7004                       		moveq	#4,d0
00019ACE C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019AD2 E448                       		lsr.w	#2,d0
00019AD4 1140 001A                  		move.b	d0,$1A(a0)
00019AD8 4A28 0001                  		tst.b	1(a0)
00019ADC 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019AE0 4E75                       		rts	
00019AE2                            ; ===========================================================================
00019AE2                            ; ---------------------------------------------------------------------------
00019AE2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019AE2                            ; ---------------------------------------------------------------------------
00019AE2                            Map_obj7B:
00019AE2                            	include "_maps\obj7B.asm"
00019AE2                            ; ---------------------------------------------------------------------------
00019AE2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019AE2                            ; ---------------------------------------------------------------------------
00019AE2 0000                       		dc.w byte_190E2-Map_obj7B
00019AE4 0000                       		dc.w byte_190E8-Map_obj7B
00019AE6 01                         byte_190E2:	dc.b 1
00019AE7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019AEC 01                         byte_190E8:	dc.b 1
00019AED FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019AF2                            		even
00019AF2                            		even
00019AF2                            
00019AF2                            ; ===========================================================================
00019AF2                            ; ---------------------------------------------------------------------------
00019AF2                            ; Object 75 - Eggman (SYZ)
00019AF2                            ; ---------------------------------------------------------------------------
00019AF2                            
00019AF2                            Obj75:					; XREF: Obj_Index
00019AF2 7000                       		moveq	#0,d0
00019AF4 1028 0024                  		move.b	$24(a0),d0
00019AF8 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019AFC 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019B00                            ; ===========================================================================
00019B00 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019B02 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019B04 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019B06 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019B08 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019B0A                            
00019B0A 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019B0D 0401 05                    		dc.b 4,	1, 5
00019B10 0607 05                    		dc.b 6,	7, 5
00019B13 0800 05                    		dc.b 8,	0, 5
00019B16                            ; ===========================================================================
00019B16                            
00019B16                            Obj75_Main:				; XREF: Obj75_Index
00019B16 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019B1C 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019B22 3168 0008 0030             		move.w	8(a0),$30(a0)
00019B28 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019B2E 117C 000F 0020             		move.b	#$F,$20(a0)
00019B34 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019B3A 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019B3E 2248                       		movea.l	a0,a1
00019B40 7203                       		moveq	#3,d1
00019B42 6000                       		bra.s	Obj75_LoadBoss
00019B44                            ; ===========================================================================
00019B44                            
00019B44                            Obj75_Loop:
00019B44 4EB9 0000 E320             		jsr	SingleObjLoad2
00019B4A 6600                       		bne.s	Obj75_ShipMain
00019B4C 12BC 0075                  		move.b	#$75,(a1)
00019B50 3368 0008 0008             		move.w	8(a0),8(a1)
00019B56 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019B5C                            
00019B5C                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019B5C 08A8 0000 0022             		bclr	#0,$22(a0)
00019B62 4229 0025                  		clr.b	$25(a1)
00019B66 135A 0024                  		move.b	(a2)+,$24(a1)
00019B6A 135A 001C                  		move.b	(a2)+,$1C(a1)
00019B6E 135A 0018                  		move.b	(a2)+,$18(a1)
00019B72 237C 0001 877A 0004        		move.l	#Map_Eggman,4(a1)
00019B7A 337C 0400 0002             		move.w	#$400,2(a1)
00019B80 137C 0004 0001             		move.b	#4,1(a1)
00019B86 137C 0020 0019             		move.b	#$20,$19(a1)
00019B8C 2348 0034                  		move.l	a0,$34(a1)
00019B90 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019B94                            
00019B94                            Obj75_ShipMain:				; XREF: Obj75_Index
00019B94 7000                       		moveq	#0,d0
00019B96 1028 0025                  		move.b	$25(a0),d0
00019B9A 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019B9E 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019BA2 43F9 0001 8716             		lea	(Ani_Eggman).l,a1
00019BA8 4EB9 0000 AED2             		jsr	AnimateSprite
00019BAE 7003                       		moveq	#3,d0
00019BB0 C028 0022                  		and.b	$22(a0),d0
00019BB4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019BBA 8128 0001                  		or.b	d0,1(a0)
00019BBE 4EF9 0000 DE84             		jmp	DisplaySprite
00019BC4                            ; ===========================================================================
00019BC4 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019BC8 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019BCC 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019BD0                            ; ===========================================================================
00019BD0                            
00019BD0                            loc_191CC:				; XREF: Obj75_ShipIndex
00019BD0 317C FF00 0010             		move.w	#-$100,$10(a0)
00019BD6 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019BDC 6400                       		bcc.s	loc_191DE
00019BDE 5428 0025                  		addq.b	#2,$25(a0)
00019BE2                            
00019BE2                            loc_191DE:
00019BE2 1028 003F                  		move.b	$3F(a0),d0
00019BE6 5428 003F                  		addq.b	#2,$3F(a0)
00019BEA 4EB9 0000 2B58             		jsr	(CalcSine).l
00019BF0 E440                       		asr.w	#2,d0
00019BF2 3140 0012                  		move.w	d0,$12(a0)
00019BF6                            
00019BF6                            loc_191F2:
00019BF6 6100 E6DC                  		bsr.w	BossMove
00019BFA 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019C00 3168 0030 0008             		move.w	$30(a0),8(a0)
00019C06                            
00019C06                            loc_19202:
00019C06 3028 0008                  		move.w	8(a0),d0
00019C0A 0440 2C00                  		subi.w	#$2C00,d0
00019C0E EA48                       		lsr.w	#5,d0
00019C10 1140 0034                  		move.b	d0,$34(a0)
00019C14 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019C1A 6400                       		bcc.s	locret_19256
00019C1C 4A28 0022                  		tst.b	$22(a0)
00019C20 6B00                       		bmi.s	loc_19258
00019C22 4A28 0020                  		tst.b	$20(a0)
00019C26 6600                       		bne.s	locret_19256
00019C28 4A28 003E                  		tst.b	$3E(a0)
00019C2C 6600                       		bne.s	loc_1923A
00019C2E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019C34 303C 00AC                  		move.w	#$AC,d0
00019C38 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019C3E                            
00019C3E                            loc_1923A:
00019C3E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019C42 7000                       		moveq	#0,d0
00019C44 4A51                       		tst.w	(a1)
00019C46 6600                       		bne.s	loc_19248
00019C48 303C 0EEE                  		move.w	#$EEE,d0
00019C4C                            
00019C4C                            loc_19248:
00019C4C 3280                       		move.w	d0,(a1)
00019C4E 5328 003E                  		subq.b	#1,$3E(a0)
00019C52 6600                       		bne.s	locret_19256
00019C54 117C 000F 0020             		move.b	#$F,$20(a0)
00019C5A                            
00019C5A                            locret_19256:
00019C5A 4E75                       		rts	
00019C5C                            ; ===========================================================================
00019C5C                            
00019C5C                            loc_19258:				; XREF: loc_19202
00019C5C 7064                       		moveq	#100,d0
00019C5E 6100 0000                  		bsr.w	AddPoints
00019C62 117C 0006 0025             		move.b	#6,$25(a0)
00019C68 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019C6E 4268 0010                  		clr.w	$10(a0)
00019C72 4E75                       		rts	
00019C74                            ; ===========================================================================
00019C74                            
00019C74                            loc_19270:				; XREF: Obj75_ShipIndex
00019C74 3028 0030                  		move.w	$30(a0),d0
00019C78 317C 0140 0010             		move.w	#$140,$10(a0)
00019C7E 0828 0000 0022             		btst	#0,$22(a0)
00019C84 6600                       		bne.s	loc_1928E
00019C86 4468 0010                  		neg.w	$10(a0)
00019C8A 0C40 2C08                  		cmpi.w	#$2C08,d0
00019C8E 6E00                       		bgt.s	loc_1929E
00019C90 6000                       		bra.s	loc_19294
00019C92                            ; ===========================================================================
00019C92                            
00019C92                            loc_1928E:
00019C92 0C40 2D38                  		cmpi.w	#$2D38,d0
00019C96 6D00                       		blt.s	loc_1929E
00019C98                            
00019C98                            loc_19294:
00019C98 0868 0000 0022             		bchg	#0,$22(a0)
00019C9E 4228 003D                  		clr.b	$3D(a0)
00019CA2                            
00019CA2                            loc_1929E:
00019CA2 0440 2C10                  		subi.w	#$2C10,d0
00019CA6 0240 001F                  		andi.w	#$1F,d0
00019CAA 0440 001F                  		subi.w	#$1F,d0
00019CAE 6A00                       		bpl.s	loc_192AE
00019CB0 4440                       		neg.w	d0
00019CB2                            
00019CB2                            loc_192AE:
00019CB2 5340                       		subq.w	#1,d0
00019CB4 6E00                       		bgt.s	loc_192E8
00019CB6 4A28 003D                  		tst.b	$3D(a0)
00019CBA 6600                       		bne.s	loc_192E8
00019CBC 3238 D008                  		move.w	($FFFFD008).w,d1
00019CC0 0441 2C00                  		subi.w	#$2C00,d1
00019CC4 EA41                       		asr.w	#5,d1
00019CC6 B228 0034                  		cmp.b	$34(a0),d1
00019CCA 6600                       		bne.s	loc_192E8
00019CCC 7000                       		moveq	#0,d0
00019CCE 1028 0034                  		move.b	$34(a0),d0
00019CD2 EB40                       		asl.w	#5,d0
00019CD4 0640 2C10                  		addi.w	#$2C10,d0
00019CD8 3140 0030                  		move.w	d0,$30(a0)
00019CDC 6100 0000                  		bsr.w	Obj75_FindBlocks
00019CE0 5428 0025                  		addq.b	#2,$25(a0)
00019CE4 4268 0028                  		clr.w	$28(a0)
00019CE8 4268 0010                  		clr.w	$10(a0)
00019CEC                            
00019CEC                            loc_192E8:
00019CEC 6000 FEF4                  		bra.w	loc_191DE
00019CF0                            ; ===========================================================================
00019CF0                            
00019CF0                            loc_192EC:				; XREF: Obj75_ShipIndex
00019CF0 7000                       		moveq	#0,d0
00019CF2 1028 0028                  		move.b	$28(a0),d0
00019CF6 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019CFA 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019CFE                            ; ===========================================================================
00019CFE 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019D00 0000                       		dc.w loc_19348-off_192FA
00019D02 0000                       		dc.w loc_1938E-off_192FA
00019D04 0000                       		dc.w loc_193D0-off_192FA
00019D06                            ; ===========================================================================
00019D06                            
00019D06                            loc_19302:				; XREF: off_192FA
00019D06 317C 0180 0012             		move.w	#$180,$12(a0)
00019D0C 3028 0038                  		move.w	$38(a0),d0
00019D10 0C40 0556                  		cmpi.w	#$556,d0
00019D14 6500                       		bcs.s	loc_19344
00019D16 317C 0556 0038             		move.w	#$556,$38(a0)
00019D1C 4268 003C                  		clr.w	$3C(a0)
00019D20 70FF                       		moveq	#-1,d0
00019D22 3028 0036                  		move.w	$36(a0),d0
00019D26 6700                       		beq.s	loc_1933C
00019D28 2240                       		movea.l	d0,a1
00019D2A 137C 00FF 0029             		move.b	#-1,$29(a1)
00019D30 117C 00FF 0029             		move.b	#-1,$29(a0)
00019D36 2348 0034                  		move.l	a0,$34(a1)
00019D3A 317C 0032 003C             		move.w	#$32,$3C(a0)
00019D40                            
00019D40                            loc_1933C:
00019D40 4268 0012                  		clr.w	$12(a0)
00019D44 5428 0028                  		addq.b	#2,$28(a0)
00019D48                            
00019D48                            loc_19344:
00019D48 6000 FEAC                  		bra.w	loc_191F2
00019D4C                            ; ===========================================================================
00019D4C                            
00019D4C                            loc_19348:				; XREF: off_192FA
00019D4C 5368 003C                  		subq.w	#1,$3C(a0)
00019D50 6A00                       		bpl.s	loc_19366
00019D52 5428 0028                  		addq.b	#2,$28(a0)
00019D56 317C F800 0012             		move.w	#-$800,$12(a0)
00019D5C 4A68 0036                  		tst.w	$36(a0)
00019D60 6600                       		bne.s	loc_19362
00019D62 E0E8 0012                  		asr	$12(a0)
00019D66                            
00019D66                            loc_19362:
00019D66 7000                       		moveq	#0,d0
00019D68 6000                       		bra.s	loc_1937C
00019D6A                            ; ===========================================================================
00019D6A                            
00019D6A                            loc_19366:
00019D6A 7000                       		moveq	#0,d0
00019D6C 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019D72 6E00                       		bgt.s	loc_1937C
00019D74 7002                       		moveq	#2,d0
00019D76 0828 0001 003D             		btst	#1,$3D(a0)
00019D7C 6700                       		beq.s	loc_1937C
00019D7E 4440                       		neg.w	d0
00019D80                            
00019D80                            loc_1937C:
00019D80 D068 0038                  		add.w	$38(a0),d0
00019D84 3140 000C                  		move.w	d0,$C(a0)
00019D88 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D8E 6000 FE76                  		bra.w	loc_19202
00019D92                            ; ===========================================================================
00019D92                            
00019D92                            loc_1938E:				; XREF: off_192FA
00019D92 303C 04DA                  		move.w	#$4DA,d0
00019D96 4A68 0036                  		tst.w	$36(a0)
00019D9A 6700                       		beq.s	loc_1939C
00019D9C 0440 0018                  		subi.w	#$18,d0
00019DA0                            
00019DA0                            loc_1939C:
00019DA0 B068 0038                  		cmp.w	$38(a0),d0
00019DA4 6D00                       		blt.s	loc_193BE
00019DA6 317C 0008 003C             		move.w	#8,$3C(a0)
00019DAC 4A68 0036                  		tst.w	$36(a0)
00019DB0 6700                       		beq.s	loc_193B4
00019DB2 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019DB8                            
00019DB8                            loc_193B4:
00019DB8 5428 0028                  		addq.b	#2,$28(a0)
00019DBC 4268 0012                  		clr.w	$12(a0)
00019DC0 6000                       		bra.s	loc_193CC
00019DC2                            ; ===========================================================================
00019DC2                            
00019DC2                            loc_193BE:
00019DC2 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019DC8 6C00                       		bge.s	loc_193CC
00019DCA 0668 000C 0012             		addi.w	#$C,$12(a0)
00019DD0                            
00019DD0                            loc_193CC:
00019DD0 6000 FE24                  		bra.w	loc_191F2
00019DD4                            ; ===========================================================================
00019DD4                            
00019DD4                            loc_193D0:				; XREF: off_192FA
00019DD4 5368 003C                  		subq.w	#1,$3C(a0)
00019DD8 6E00                       		bgt.s	loc_19406
00019DDA 6B00                       		bmi.s	loc_193EE
00019DDC 70FF                       		moveq	#-1,d0
00019DDE 3028 0036                  		move.w	$36(a0),d0
00019DE2 6700                       		beq.s	loc_193E8
00019DE4 2240                       		movea.l	d0,a1
00019DE6 137C 000A 0029             		move.b	#$A,$29(a1)
00019DEC                            
00019DEC                            loc_193E8:
00019DEC 4268 0036                  		clr.w	$36(a0)
00019DF0 6000                       		bra.s	loc_19406
00019DF2                            ; ===========================================================================
00019DF2                            
00019DF2                            loc_193EE:
00019DF2 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019DF8 6600                       		bne.s	loc_19406
00019DFA 4228 0029                  		clr.b	$29(a0)
00019DFE 5528 0025                  		subq.b	#2,$25(a0)
00019E02 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019E08 6000                       		bra.s	loc_19446
00019E0A                            ; ===========================================================================
00019E0A                            
00019E0A                            loc_19406:
00019E0A 7001                       		moveq	#1,d0
00019E0C 4A68 0036                  		tst.w	$36(a0)
00019E10 6700                       		beq.s	loc_19410
00019E12 7002                       		moveq	#2,d0
00019E14                            
00019E14                            loc_19410:
00019E14 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019E1A 6700                       		beq.s	loc_19424
00019E1C 6D00                       		blt.s	loc_1941C
00019E1E 4440                       		neg.w	d0
00019E20                            
00019E20                            loc_1941C:
00019E20 4A68 0036                  		tst.w	$36(a0)
00019E24 D168 0038                  		add.w	d0,$38(a0)
00019E28                            
00019E28                            loc_19424:
00019E28 7000                       		moveq	#0,d0
00019E2A 4A68 0036                  		tst.w	$36(a0)
00019E2E 6700                       		beq.s	loc_19438
00019E30 7002                       		moveq	#2,d0
00019E32 0828 0000 003D             		btst	#0,$3D(a0)
00019E38 6700                       		beq.s	loc_19438
00019E3A 4440                       		neg.w	d0
00019E3C                            
00019E3C                            loc_19438:
00019E3C D068 0038                  		add.w	$38(a0),d0
00019E40 3140 000C                  		move.w	d0,$C(a0)
00019E44 3168 0030 0008             		move.w	$30(a0),8(a0)
00019E4A                            
00019E4A                            loc_19446:
00019E4A 6000 FDBA                  		bra.w	loc_19202
00019E4E                            
00019E4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019E4E                            
00019E4E                            
00019E4E                            Obj75_FindBlocks:			; XREF: loc_192AE
00019E4E 4268 0036                  		clr.w	$36(a0)
00019E52 43F8 D040                  		lea	($FFFFD040).w,a1
00019E56 703E                       		moveq	#$3E,d0
00019E58 7276                       		moveq	#$76,d1
00019E5A 1428 0034                  		move.b	$34(a0),d2
00019E5E                            
00019E5E                            Obj75_FindLoop:
00019E5E B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019E60 6600                       		bne.s	loc_1946A	; if not, branch
00019E62 B429 0028                  		cmp.b	$28(a1),d2
00019E66 6600                       		bne.s	loc_1946A
00019E68 3149 0036                  		move.w	a1,$36(a0)
00019E6C 6000                       		bra.s	locret_19472
00019E6E                            ; ===========================================================================
00019E6E                            
00019E6E                            loc_1946A:
00019E6E 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019E72 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019E76                            
00019E76                            locret_19472:
00019E76 4E75                       		rts	
00019E78                            ; End of function Obj75_FindBlocks
00019E78                            
00019E78                            ; ===========================================================================
00019E78                            
00019E78                            loc_19474:				; XREF: Obj75_ShipIndex
00019E78 5368 003C                  		subq.w	#1,$3C(a0)
00019E7C 6B00                       		bmi.s	loc_1947E
00019E7E 6000 E412                  		bra.w	BossDefeated
00019E82                            ; ===========================================================================
00019E82                            
00019E82                            loc_1947E:
00019E82 5428 0025                  		addq.b	#2,$25(a0)
00019E86 4268 0012                  		clr.w	$12(a0)
00019E8A 08E8 0000 0022             		bset	#0,$22(a0)
00019E90 08A8 0007 0022             		bclr	#7,$22(a0)
00019E96 4268 0010                  		clr.w	$10(a0)
00019E9A 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019EA0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019EA4 6600                       		bne.s	loc_194A8
00019EA6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019EAC                            
00019EAC                            loc_194A8:
00019EAC 6000 FD58                  		bra.w	loc_19202
00019EB0                            ; ===========================================================================
00019EB0                            
00019EB0                            loc_194AC:				; XREF: Obj75_ShipIndex
00019EB0 5268 003C                  		addq.w	#1,$3C(a0)
00019EB4 6700                       		beq.s	loc_194BC
00019EB6 6A00                       		bpl.s	loc_194C2
00019EB8 0668 0018 0012             		addi.w	#$18,$12(a0)
00019EBE 6000                       		bra.s	loc_194EE
00019EC0                            ; ===========================================================================
00019EC0                            
00019EC0                            loc_194BC:
00019EC0 4268 0012                  		clr.w	$12(a0)
00019EC4 6000                       		bra.s	loc_194EE
00019EC6                            ; ===========================================================================
00019EC6                            
00019EC6                            loc_194C2:
00019EC6 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019ECC 6500                       		bcs.s	loc_194DA
00019ECE 6700                       		beq.s	loc_194E0
00019ED0 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019ED6 6500                       		bcs.s	loc_194EE
00019ED8 5428 0025                  		addq.b	#2,$25(a0)
00019EDC 6000                       		bra.s	loc_194EE
00019EDE                            ; ===========================================================================
00019EDE                            
00019EDE                            loc_194DA:
00019EDE 5168 0012                  		subq.w	#8,$12(a0)
00019EE2 6000                       		bra.s	loc_194EE
00019EE4                            ; ===========================================================================
00019EE4                            
00019EE4                            loc_194E0:
00019EE4 4268 0012                  		clr.w	$12(a0)
00019EE8 303C 0085                  		move.w	#$85,d0
00019EEC 4EB9 0000 13B0             		jsr	(PlaySound).l	; play SYZ music
00019EF2                            
00019EF2                            loc_194EE:
00019EF2 6000 FD02                  		bra.w	loc_191F2
00019EF6                            ; ===========================================================================
00019EF6                            
00019EF6                            loc_194F2:				; XREF: Obj75_ShipIndex
00019EF6 317C 0400 0010             		move.w	#$400,$10(a0)
00019EFC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019F02 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019F08 6400                       		bcc.s	loc_1950C
00019F0A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019F0E 6000                       		bra.s	loc_19512
00019F10                            ; ===========================================================================
00019F10                            
00019F10                            loc_1950C:
00019F10 4A28 0001                  		tst.b	1(a0)
00019F14 6A00                       		bpl.s	Obj75_ShipDelete
00019F16                            
00019F16                            loc_19512:
00019F16 6100 E3BC                  		bsr.w	BossMove
00019F1A 6000 FCC6                  		bra.w	loc_191DE
00019F1E                            ; ===========================================================================
00019F1E                            
00019F1E                            Obj75_ShipDelete:
00019F1E 4EF9 0000 DEC0             		jmp	DeleteObject
00019F24                            ; ===========================================================================
00019F24                            
00019F24                            Obj75_FaceMain:				; XREF: Obj75_Index
00019F24 7201                       		moveq	#1,d1
00019F26 2268 0034                  		movea.l	$34(a0),a1
00019F2A 7000                       		moveq	#0,d0
00019F2C 1029 0025                  		move.b	$25(a1),d0
00019F30 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019F34 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019F38 1141 001C                  		move.b	d1,$1C(a0)
00019F3C 1010                       		move.b	(a0),d0
00019F3E B011                       		cmp.b	(a1),d0
00019F40 6600                       		bne.s	Obj75_FaceDelete
00019F42 6000                       		bra.s	loc_195BE
00019F44                            ; ===========================================================================
00019F44                            
00019F44                            Obj75_FaceDelete:
00019F44 4EF9 0000 DEC0             		jmp	DeleteObject
00019F4A                            ; ===========================================================================
00019F4A 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019F4E 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019F52 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019F56                            ; ===========================================================================
00019F56                            
00019F56                            loc_19552:				; XREF: off_19546
00019F56 720A                       		moveq	#$A,d1
00019F58 4E75                       		rts	
00019F5A                            ; ===========================================================================
00019F5A                            
00019F5A                            loc_19556:				; XREF: off_19546
00019F5A 7206                       		moveq	#6,d1
00019F5C 4E75                       		rts	
00019F5E                            ; ===========================================================================
00019F5E                            
00019F5E                            loc_1955A:				; XREF: off_19546
00019F5E 7000                       		moveq	#0,d0
00019F60 1029 0028                  		move.b	$28(a1),d0
00019F64 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019F68 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019F6C                            ; ===========================================================================
00019F6C 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019F70 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019F74                            ; ===========================================================================
00019F74                            
00019F74                            loc_19570:				; XREF: off_19568
00019F74 6000                       		bra.s	loc_19574
00019F76                            ; ===========================================================================
00019F76                            
00019F76                            loc_19572:				; XREF: off_19568
00019F76 7206                       		moveq	#6,d1
00019F78                            
00019F78                            loc_19574:				; XREF: off_19546
00019F78 4A29 0020                  		tst.b	$20(a1)
00019F7C 6600                       		bne.s	loc_1957E
00019F7E 7205                       		moveq	#5,d1
00019F80 4E75                       		rts	
00019F82                            ; ===========================================================================
00019F82                            
00019F82                            loc_1957E:
00019F82 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019F88 6500                       		bcs.s	locret_19588
00019F8A 7204                       		moveq	#4,d1
00019F8C                            
00019F8C                            locret_19588:
00019F8C 4E75                       		rts	
00019F8E                            ; ===========================================================================
00019F8E                            
00019F8E                            Obj75_FlameMain:			; XREF: Obj75_Index
00019F8E 117C 0007 001C             		move.b	#7,$1C(a0)
00019F94 2268 0034                  		movea.l	$34(a0),a1
00019F98 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F9E 6600                       		bne.s	loc_195AA
00019FA0 117C 000B 001C             		move.b	#$B,$1C(a0)
00019FA6 4A28 0001                  		tst.b	1(a0)
00019FAA 6A00                       		bpl.s	Obj75_FlameDelete
00019FAC 6000                       		bra.s	loc_195B6
00019FAE                            ; ===========================================================================
00019FAE                            
00019FAE                            loc_195AA:
00019FAE 4A69 0010                  		tst.w	$10(a1)
00019FB2 6700                       		beq.s	loc_195B6
00019FB4 117C 0008 001C             		move.b	#8,$1C(a0)
00019FBA                            
00019FBA                            loc_195B6:
00019FBA 6000                       		bra.s	loc_195BE
00019FBC                            ; ===========================================================================
00019FBC                            
00019FBC                            Obj75_FlameDelete:
00019FBC 4EF9 0000 DEC0             		jmp	DeleteObject
00019FC2                            ; ===========================================================================
00019FC2                            
00019FC2                            loc_195BE:
00019FC2 43F9 0001 8716             		lea	(Ani_Eggman).l,a1
00019FC8 4EB9 0000 AED2             		jsr	AnimateSprite
00019FCE 2268 0034                  		movea.l	$34(a0),a1
00019FD2 3169 0008 0008             		move.w	8(a1),8(a0)
00019FD8 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019FDE                            
00019FDE                            loc_195DA:
00019FDE 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019FE4 7003                       		moveq	#3,d0
00019FE6 C028 0022                  		and.b	$22(a0),d0
00019FEA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019FF0 8128 0001                  		or.b	d0,1(a0)
00019FF4 4EF9 0000 DE84             		jmp	DisplaySprite
00019FFA                            ; ===========================================================================
00019FFA                            
00019FFA                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019FFA 217C 0001 8842 0004        		move.l	#Map_BossItems,4(a0)
0001A002 317C 246C 0002             		move.w	#$246C,2(a0)
0001A008 117C 0005 001A             		move.b	#5,$1A(a0)
0001A00E 2268 0034                  		movea.l	$34(a0),a1
0001A012 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A018 6600                       		bne.s	loc_1961C
0001A01A 4A28 0001                  		tst.b	1(a0)
0001A01E 6A00                       		bpl.s	Obj75_SpikeDelete
0001A020                            
0001A020                            loc_1961C:
0001A020 3169 0008 0008             		move.w	8(a1),8(a0)
0001A026 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A02C 3028 003C                  		move.w	$3C(a0),d0
0001A030 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A036 6600                       		bne.s	loc_19652
0001A038 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A03E 6700                       		beq.s	loc_1964C
0001A040 4A29 0028                  		tst.b	$28(a1)
0001A044 6600                       		bne.s	loc_19658
0001A046 0C40 0094                  		cmpi.w	#$94,d0
0001A04A 6C00                       		bge.s	loc_19658
0001A04C 5E40                       		addq.w	#7,d0
0001A04E 6000                       		bra.s	loc_19658
0001A050                            ; ===========================================================================
0001A050                            
0001A050                            loc_1964C:
0001A050 4A69 003C                  		tst.w	$3C(a1)
0001A054 6A00                       		bpl.s	loc_19658
0001A056                            
0001A056                            loc_19652:
0001A056 4A40                       		tst.w	d0
0001A058 6F00                       		ble.s	loc_19658
0001A05A 5B40                       		subq.w	#5,d0
0001A05C                            
0001A05C                            loc_19658:
0001A05C 3140 003C                  		move.w	d0,$3C(a0)
0001A060 E440                       		asr.w	#2,d0
0001A062 D168 000C                  		add.w	d0,$C(a0)
0001A066 117C 0008 0019             		move.b	#8,$19(a0)
0001A06C 117C 000C 0016             		move.b	#$C,$16(a0)
0001A072 4228 0020                  		clr.b	$20(a0)
0001A076 2268 0034                  		movea.l	$34(a0),a1
0001A07A 4A29 0020                  		tst.b	$20(a1)
0001A07E 6700                       		beq.s	loc_19688
0001A080 4A29 0029                  		tst.b	$29(a1)
0001A084 6600                       		bne.s	loc_19688
0001A086 117C 0084 0020             		move.b	#$84,$20(a0)
0001A08C                            
0001A08C                            loc_19688:
0001A08C 6000 FF50                  		bra.w	loc_195DA
0001A090                            ; ===========================================================================
0001A090                            
0001A090                            Obj75_SpikeDelete:
0001A090 4EF9 0000 DEC0             		jmp	DeleteObject
0001A096                            ; ===========================================================================
0001A096                            ; ---------------------------------------------------------------------------
0001A096                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A096                            ; ---------------------------------------------------------------------------
0001A096                            
0001A096                            Obj76:					; XREF: Obj_Index
0001A096 7000                       		moveq	#0,d0
0001A098 1028 0024                  		move.b	$24(a0),d0
0001A09C 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A0A0 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A0A4                            ; ===========================================================================
0001A0A4 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A0A6 0000                       		dc.w Obj76_Action-Obj76_Index
0001A0A8 0000                       		dc.w loc_19762-Obj76_Index
0001A0AA                            ; ===========================================================================
0001A0AA                            
0001A0AA                            Obj76_Main:				; XREF: Obj76_Index
0001A0AA 7800                       		moveq	#0,d4
0001A0AC 3A3C 2C10                  		move.w	#$2C10,d5
0001A0B0 7C09                       		moveq	#9,d6
0001A0B2 43D0                       		lea	(a0),a1
0001A0B4 6000                       		bra.s	Obj76_MakeBlock
0001A0B6                            ; ===========================================================================
0001A0B6                            
0001A0B6                            Obj76_Loop:
0001A0B6 4EB9 0000 E30A             		jsr	SingleObjLoad
0001A0BC 6600                       		bne.s	Obj76_ExitLoop
0001A0BE                            
0001A0BE                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A0BE 12BC 0076                  		move.b	#$76,(a1)
0001A0C2 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A0CA 337C 4000 0002             		move.w	#$4000,2(a1)
0001A0D0 137C 0004 0001             		move.b	#4,1(a1)
0001A0D6 137C 0010 0019             		move.b	#$10,$19(a1)
0001A0DC 137C 0010 0016             		move.b	#$10,$16(a1)
0001A0E2 137C 0003 0018             		move.b	#3,$18(a1)
0001A0E8 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A0EC 337C 0582 000C             		move.w	#$582,$C(a1)
0001A0F2 3344 0028                  		move.w	d4,$28(a1)
0001A0F6 0644 0101                  		addi.w	#$101,d4
0001A0FA 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A0FE 5429 0024                  		addq.b	#2,$24(a1)
0001A102 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A106                            
0001A106                            Obj76_ExitLoop:
0001A106 4E75                       		rts	
0001A108                            ; ===========================================================================
0001A108                            
0001A108                            Obj76_Action:				; XREF: Obj76_Index
0001A108 1028 0029                  		move.b	$29(a0),d0
0001A10C B028 0028                  		cmp.b	$28(a0),d0
0001A110 6700                       		beq.s	Obj76_Solid
0001A112 4A00                       		tst.b	d0
0001A114 6B00                       		bmi.s	loc_19718
0001A116                            
0001A116                            loc_19712:
0001A116 6100 0000                  		bsr.w	Obj76_Break
0001A11A 6000                       		bra.s	Obj76_Display
0001A11C                            ; ===========================================================================
0001A11C                            
0001A11C                            loc_19718:
0001A11C 2268 0034                  		movea.l	$34(a0),a1
0001A120 4A29 0021                  		tst.b	$21(a1)
0001A124 67F0                       		beq.s	loc_19712
0001A126 3169 0008 0008             		move.w	8(a1),8(a0)
0001A12C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A132 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A138 B2C8                       		cmpa.w	a0,a1
0001A13A 6500                       		bcs.s	Obj76_Display
0001A13C 3029 0012                  		move.w	$12(a1),d0
0001A140 48C0                       		ext.l	d0
0001A142 E080                       		asr.l	#8,d0
0001A144 D168 000C                  		add.w	d0,$C(a0)
0001A148 6000                       		bra.s	Obj76_Display
0001A14A                            ; ===========================================================================
0001A14A                            
0001A14A                            Obj76_Solid:				; XREF: Obj76_Action
0001A14A 323C 001B                  		move.w	#$1B,d1
0001A14E 343C 0010                  		move.w	#$10,d2
0001A152 363C 0011                  		move.w	#$11,d3
0001A156 3828 0008                  		move.w	8(a0),d4
0001A15A 4EB9 0001 0254             		jsr	SolidObject
0001A160                            
0001A160                            Obj76_Display:				; XREF: Obj76_Action
0001A160 4EF9 0000 DE84             		jmp	DisplaySprite
0001A166                            ; ===========================================================================
0001A166                            
0001A166                            loc_19762:				; XREF: Obj76_Index
0001A166 4A28 0001                  		tst.b	1(a0)
0001A16A 6A00                       		bpl.s	Obj76_Delete
0001A16C 4EB9 0000 DDEC             		jsr	ObjectFall
0001A172 4EF9 0000 DE84             		jmp	DisplaySprite
0001A178                            ; ===========================================================================
0001A178                            
0001A178                            Obj76_Delete:
0001A178 4EF9 0000 DEC0             		jmp	DeleteObject
0001A17E                            
0001A17E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A17E                            
0001A17E                            
0001A17E                            Obj76_Break:				; XREF: Obj76_Action
0001A17E 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A182 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A186 7801                       		moveq	#1,d4
0001A188 7203                       		moveq	#3,d1
0001A18A 7438                       		moveq	#$38,d2
0001A18C 5428 0024                  		addq.b	#2,$24(a0)
0001A190 117C 0008 0019             		move.b	#8,$19(a0)
0001A196 117C 0008 0016             		move.b	#8,$16(a0)
0001A19C 43D0                       		lea	(a0),a1
0001A19E 6000                       		bra.s	Obj76_MakeFrag
0001A1A0                            ; ===========================================================================
0001A1A0                            
0001A1A0                            Obj76_LoopFrag:
0001A1A0 4EB9 0000 E320             		jsr	SingleObjLoad2
0001A1A6 6600                       		bne.s	loc_197D4
0001A1A8                            
0001A1A8                            Obj76_MakeFrag:
0001A1A8 45D0                       		lea	(a0),a2
0001A1AA 47D1                       		lea	(a1),a3
0001A1AC 7603                       		moveq	#3,d3
0001A1AE                            
0001A1AE                            loc_197AA:
0001A1AE 26DA                       		move.l	(a2)+,(a3)+
0001A1B0 26DA                       		move.l	(a2)+,(a3)+
0001A1B2 26DA                       		move.l	(a2)+,(a3)+
0001A1B4 26DA                       		move.l	(a2)+,(a3)+
0001A1B6 51CB FFF6                  		dbf	d3,loc_197AA
0001A1BA                            
0001A1BA 335C 0010                  		move.w	(a4)+,$10(a1)
0001A1BE 335C 0012                  		move.w	(a4)+,$12(a1)
0001A1C2 361D                       		move.w	(a5)+,d3
0001A1C4 D769 0008                  		add.w	d3,8(a1)
0001A1C8 361D                       		move.w	(a5)+,d3
0001A1CA D769 000C                  		add.w	d3,$C(a1)
0001A1CE 1344 001A                  		move.b	d4,$1A(a1)
0001A1D2 5244                       		addq.w	#1,d4
0001A1D4 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A1D8                            
0001A1D8                            loc_197D4:
0001A1D8 303C 00CB                  		move.w	#$CB,d0
0001A1DC 4EF9 0000 13B6             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A1E2                            ; End of function Obj76_Break
0001A1E2                            
0001A1E2                            ; ===========================================================================
0001A1E2 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A1E6 0180 FE00                  		dc.w $180, $FE00
0001A1EA FF00 FF00                  		dc.w $FF00, $FF00
0001A1EE 0100 FF00                  		dc.w $100, $FF00
0001A1F2 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A1F6 0010 0000                  		dc.w $10, 0
0001A1FA 0000 0010                  		dc.w 0,	$10
0001A1FE 0010 0010                  		dc.w $10, $10
0001A202                            ; ---------------------------------------------------------------------------
0001A202                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A202                            ; ---------------------------------------------------------------------------
0001A202                            Map_obj76:
0001A202                            	include "_maps\obj76.asm"
0001A202                            ; ---------------------------------------------------------------------------
0001A202                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A202                            ; ---------------------------------------------------------------------------
0001A202 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A206 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A20A 0000                       		dc.w byte_19826-Map_obj76
0001A20C 02                         byte_19808:	dc.b 2
0001A20D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A212 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A217 00                         		dc.b 0
0001A218 01                         byte_19814:	dc.b 1
0001A219 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A21E 01                         byte_1981A:	dc.b 1
0001A21F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A224 01                         byte_19820:	dc.b 1
0001A225 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A22A 01                         byte_19826:	dc.b 1
0001A22B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A230                            		even
0001A230                            		even
0001A230                            
0001A230                            ; ===========================================================================
0001A230                            
0001A230                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A230 4EF9 0000 DEC0             		jmp	DeleteObject
0001A236                            ; ===========================================================================
0001A236                            ; ---------------------------------------------------------------------------
0001A236                            ; Object 82 - Eggman (SBZ2)
0001A236                            ; ---------------------------------------------------------------------------
0001A236                            
0001A236                            Obj82:					; XREF: Obj_Index
0001A236 7000                       		moveq	#0,d0
0001A238 1028 0024                  		move.b	$24(a0),d0
0001A23C 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A240 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A244                            ; ===========================================================================
0001A244 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A246 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A248 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A24A                            
0001A24A 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A24D 0400 03                    		dc.b 4,	0, 3
0001A250                            ; ===========================================================================
0001A250                            
0001A250                            Obj82_Main:				; XREF: Obj82_Index
0001A250 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A254 317C 2160 0008             		move.w	#$2160,8(a0)
0001A25A 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A260 117C 000F 0020             		move.b	#$F,$20(a0)
0001A266 117C 0010 0021             		move.b	#$10,$21(a0)
0001A26C 08A8 0000 0022             		bclr	#0,$22(a0)
0001A272 4228 0025                  		clr.b	$25(a0)
0001A276 115A 0024                  		move.b	(a2)+,$24(a0)
0001A27A 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A27E 115A 0018                  		move.b	(a2)+,$18(a0)
0001A282 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A28A 317C 0400 0002             		move.w	#$400,2(a0)
0001A290 117C 0004 0001             		move.b	#4,1(a0)
0001A296 08E8 0007 0001             		bset	#7,1(a0)
0001A29C 117C 0020 0019             		move.b	#$20,$19(a0)
0001A2A2 4EB9 0000 E320             		jsr	SingleObjLoad2
0001A2A8 6600                       		bne.s	Obj82_Eggman
0001A2AA 2348 0034                  		move.l	a0,$34(a1)
0001A2AE 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A2B2 337C 2130 0008             		move.w	#$2130,8(a1)
0001A2B8 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A2BE 4228 0025                  		clr.b	$25(a0)
0001A2C2 135A 0024                  		move.b	(a2)+,$24(a1)
0001A2C6 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A2CA 135A 0018                  		move.b	(a2)+,$18(a1)
0001A2CE 237C 0000 C606 0004        		move.l	#Map_obj32,4(a1)
0001A2D6 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A2DC 137C 0004 0001             		move.b	#4,1(a1)
0001A2E2 08E9 0007 0001             		bset	#7,1(a1)
0001A2E8 137C 0010 0019             		move.b	#$10,$19(a1)
0001A2EE 137C 0000 001A             		move.b	#0,$1A(a1)
0001A2F4                            
0001A2F4                            Obj82_Eggman:				; XREF: Obj82_Index
0001A2F4 7000                       		moveq	#0,d0
0001A2F6 1028 0025                  		move.b	$25(a0),d0
0001A2FA 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A2FE 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A302 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A306 4EB9 0000 AED2             		jsr	AnimateSprite
0001A30C 4EF9 0000 DE84             		jmp	DisplaySprite
0001A312                            ; ===========================================================================
0001A312 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A314 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A316 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A318 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A31A                            ; ===========================================================================
0001A31A                            
0001A31A                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A31A 3028 0008                  		move.w	8(a0),d0
0001A31E 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A322 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A326 6400                       		bcc.s	loc_19934	; if not, branch
0001A328 5428 0025                  		addq.b	#2,$25(a0)
0001A32C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A332 117C 0001 001C             		move.b	#1,$1C(a0)
0001A338                            
0001A338                            loc_19934:				; XREF: Obj82_EggIndex
0001A338 4EF9 0000 DE5E             		jmp	SpeedToPos
0001A33E                            ; ===========================================================================
0001A33E                            
0001A33E                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A33E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A342 6600                       		bne.s	loc_19954	; if time remains, branch
0001A344 5428 0025                  		addq.b	#2,$25(a0)
0001A348 117C 0002 001C             		move.b	#2,$1C(a0)
0001A34E 5868 000C                  		addq.w	#4,$C(a0)
0001A352 317C 000F 003C             		move.w	#15,$3C(a0)
0001A358                            
0001A358                            loc_19954:
0001A358 60DE                       		bra.s	loc_19934
0001A35A                            ; ===========================================================================
0001A35A                            
0001A35A                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A35A 5368 003C                  		subq.w	#1,$3C(a0)
0001A35E 6E00                       		bgt.s	loc_199D0
0001A360 6600                       		bne.s	loc_1996A
0001A362 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A368 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A36E                            
0001A36E                            loc_1996A:
0001A36E 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A374 6E00                       		bgt.s	loc_19976
0001A376 4268 0010                  		clr.w	$10(a0)
0001A37A                            
0001A37A                            loc_19976:
0001A37A 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A380 4A68 0012                  		tst.w	$12(a0)
0001A384 6B00                       		bmi.s	Obj82_FindBlocks
0001A386 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A38C 6500                       		bcs.s	Obj82_FindBlocks
0001A38E 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A394 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A39A 6500                       		bcs.s	Obj82_FindBlocks
0001A39C 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A3A2 4268 0012                  		clr.w	$12(a0)
0001A3A6                            
0001A3A6                            Obj82_FindBlocks:
0001A3A6 3028 0010                  		move.w	$10(a0),d0
0001A3AA 8068 0012                  		or.w	$12(a0),d0
0001A3AE 6600                       		bne.s	loc_199D0
0001A3B0 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A3B4 703E                       		moveq	#$3E,d0
0001A3B6 7240                       		moveq	#$40,d1
0001A3B8                            
0001A3B8                            Obj82_FindLoop:	
0001A3B8 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A3BA 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A3BE 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A3C2                            
0001A3C2 6600                       		bne.s	loc_199D0
0001A3C4 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A3CA 5428 0025                  		addq.b	#2,$25(a0)
0001A3CE 117C 0001 001C             		move.b	#1,$1C(a0)
0001A3D4                            
0001A3D4                            loc_199D0:
0001A3D4 6000 FF62                  		bra.w	loc_19934
0001A3D8                            ; ===========================================================================
0001A3D8                            
0001A3D8                            Obj82_Switch:				; XREF: Obj82_Index
0001A3D8 7000                       		moveq	#0,d0
0001A3DA 1028 0025                  		move.b	$25(a0),d0
0001A3DE 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A3E2 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A3E6                            ; ===========================================================================
0001A3E6 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A3E8 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A3EA                            ; ===========================================================================
0001A3EA                            
0001A3EA                            loc_199E6:				; XREF: Obj82_SwIndex
0001A3EA 2268 0034                  		movea.l	$34(a0),a1
0001A3EE 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A3F4 6600                       		bne.s	Obj82_SwDisplay
0001A3F6 117C 0001 001A             		move.b	#1,$1A(a0)
0001A3FC 5428 0025                  		addq.b	#2,$25(a0)
0001A400                            
0001A400                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A400 4EF9 0000 DE84             		jmp	DisplaySprite
0001A406                            ; ===========================================================================
0001A406                            Ani_obj82:
0001A406                            	include "_anim\obj82.asm"
0001A406                            ; ---------------------------------------------------------------------------
0001A406                            ; Animation script - Eggman (SBZ2)
0001A406                            ; ---------------------------------------------------------------------------
0001A406 0000                       		dc.w byte_19A10-Ani_obj82
0001A408 0000                       		dc.w byte_19A14-Ani_obj82
0001A40A 0000                       		dc.w byte_19A18-Ani_obj82
0001A40C 0000                       		dc.w byte_19A20-Ani_obj82
0001A40E 0000                       		dc.w byte_19A24-Ani_obj82
0001A410 0000                       		dc.w byte_19A2A-Ani_obj82
0001A412 0000                       		dc.w byte_19A30-Ani_obj82
0001A414 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A418 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A41C 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A424 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A428 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A42E 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A434 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A438                            		even
0001A438                            		even
0001A438                            
0001A438                            ; ---------------------------------------------------------------------------
0001A438                            ; Sprite mappings - Eggman (SBZ2)
0001A438                            ; ---------------------------------------------------------------------------
0001A438                            Map_obj82:
0001A438                            	include "_maps\obj82.asm"
0001A438                            ; ================================================================================
0001A438                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A438                            ; ================================================================================
0001A438                            
0001A438                            DATAA16Z12RYSAF:
0001A438 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A43C 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A440 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A444 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A448 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A44C 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A44E 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A44F FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A454 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A459 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A45E 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A45F E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A464 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A469 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A46E FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A473 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A474 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A479 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A47E 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A483 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A488 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A489 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A48E 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A493 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A498 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A499 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A49E 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A4A3 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A4A8 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A4AD 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A4AE E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A4B3 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A4B8 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A4BD 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A4C2 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A4C3 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A4C8 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A4CD 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A4D2 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A4D7 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A4DC F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A4E1 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A4E6 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A4E7 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A4EC E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A4F1 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A4F6 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A4FB 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A4FC 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A501 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A506 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A50B 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A510 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A515 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A516 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A51B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A520 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A525 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A52A E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A52F F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A534 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A539 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A53E 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A53F EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A544 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A549 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A54E                            	even
0001A54E                            	even
0001A54E                            
0001A54E                            ; ===========================================================================
0001A54E                            ; ---------------------------------------------------------------------------
0001A54E                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A54E                            ; ---------------------------------------------------------------------------
0001A54E                            
0001A54E                            Obj83:					; XREF: Obj_Index
0001A54E 7000                       		moveq	#0,d0
0001A550 1028 0024                  		move.b	$24(a0),d0
0001A554 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A558 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A55C                            ; ===========================================================================
0001A55C 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A55E 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A560 0000                       		dc.w loc_19C36-Obj83_Index
0001A562 0000                       		dc.w loc_19C62-Obj83_Index
0001A564 0000                       		dc.w loc_19C72-Obj83_Index
0001A566 0000                       		dc.w loc_19C80-Obj83_Index
0001A568                            ; ===========================================================================
0001A568                            
0001A568                            Obj83_Main:				; XREF: Obj83_Index
0001A568 317C 2080 0008             		move.w	#$2080,8(a0)
0001A56E 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A574 117C 0080 0019             		move.b	#$80,$19(a0)
0001A57A 117C 0010 0016             		move.b	#$10,$16(a0)
0001A580 117C 0004 0001             		move.b	#4,1(a0)
0001A586 08E8 0007 0001             		bset	#7,1(a0)
0001A58C 7800                       		moveq	#0,d4
0001A58E 3A3C 2010                  		move.w	#$2010,d5
0001A592 7C07                       		moveq	#7,d6
0001A594 45E8 0030                  		lea	$30(a0),a2
0001A598                            
0001A598                            Obj83_MakeBlock:
0001A598 4EB9 0000 E30A             		jsr	SingleObjLoad
0001A59E 6600                       		bne.s	Obj83_ExitMake
0001A5A0 34C9                       		move.w	a1,(a2)+
0001A5A2 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A5A6 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A5AE 337C 4518 0002             		move.w	#$4518,2(a1)
0001A5B4 137C 0004 0001             		move.b	#4,1(a1)
0001A5BA 137C 0010 0019             		move.b	#$10,$19(a1)
0001A5C0 137C 0010 0016             		move.b	#$10,$16(a1)
0001A5C6 137C 0003 0018             		move.b	#3,$18(a1)
0001A5CC 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A5D0 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A5D6 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A5DA 137C 0008 0024             		move.b	#8,$24(a1)
0001A5E0 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A5E4                            
0001A5E4                            Obj83_ExitMake:
0001A5E4 5428 0024                  		addq.b	#2,$24(a0)
0001A5E8 4E75                       		rts	
0001A5EA                            ; ===========================================================================
0001A5EA                            
0001A5EA                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A5EA 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A5F0 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A5F2 4228 001A                  		clr.b	$1A(a0)
0001A5F6 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A5FA                            
0001A5FA                            Obj83_Solid:
0001A5FA 7000                       		moveq	#0,d0
0001A5FC 1028 001A                  		move.b	$1A(a0),d0
0001A600 4400                       		neg.b	d0
0001A602 4880                       		ext.w	d0
0001A604 5040                       		addq.w	#8,d0
0001A606 E940                       		asl.w	#4,d0
0001A608 383C 2100                  		move.w	#$2100,d4
0001A60C 9840                       		sub.w	d0,d4
0001A60E 1140 0019                  		move.b	d0,$19(a0)
0001A612 3144 0008                  		move.w	d4,8(a0)
0001A616 720B                       		moveq	#$B,d1
0001A618 D240                       		add.w	d0,d1
0001A61A 7410                       		moveq	#$10,d2
0001A61C 7611                       		moveq	#$11,d3
0001A61E 4EF9 0001 0254             		jmp	SolidObject
0001A624                            ; ===========================================================================
0001A624                            
0001A624                            loc_19C36:				; XREF: Obj83_Index
0001A624 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A62A 6400                       		bcc.s	Obj83_Solid2
0001A62C 70FF                       		moveq	#-1,d0
0001A62E 1028 001A                  		move.b	$1A(a0),d0
0001A632 4880                       		ext.w	d0
0001A634 D040                       		add.w	d0,d0
0001A636 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A63A 2240                       		movea.l	d0,a1
0001A63C 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A642 5228 001A                  		addq.b	#1,$1A(a0)
0001A646 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A64C 6700                       		beq.s	loc_19C62
0001A64E                            
0001A64E                            Obj83_Solid2:
0001A64E 60AA                       		bra.s	Obj83_Solid
0001A650                            ; ===========================================================================
0001A650                            
0001A650                            loc_19C62:				; XREF: Obj83_Index
0001A650 08A8 0003 0022             		bclr	#3,$22(a0)
0001A656 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A65C 6000 FBD2                  		bra.w	loc_1982C
0001A660                            ; ===========================================================================
0001A660                            
0001A660                            loc_19C72:				; XREF: Obj83_Index
0001A660 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A666 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A668 4EF9 0000 DE84             		jmp	DisplaySprite
0001A66E                            ; ===========================================================================
0001A66E                            
0001A66E                            loc_19C80:				; XREF: Obj83_Index
0001A66E 4A28 0001                  		tst.b	1(a0)
0001A672 6A00 FBBC                  		bpl.w	loc_1982C
0001A676 4EB9 0000 DDEC             		jsr	ObjectFall
0001A67C 4EF9 0000 DE84             		jmp	DisplaySprite
0001A682                            ; ===========================================================================
0001A682                            
0001A682                            Obj83_Break:				; XREF: loc_19C72
0001A682 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A686 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A68A 7801                       		moveq	#1,d4
0001A68C 7203                       		moveq	#3,d1
0001A68E 7438                       		moveq	#$38,d2
0001A690 5428 0024                  		addq.b	#2,$24(a0)
0001A694 117C 0008 0019             		move.b	#8,$19(a0)
0001A69A 117C 0008 0016             		move.b	#8,$16(a0)
0001A6A0 43D0                       		lea	(a0),a1
0001A6A2 6000                       		bra.s	Obj83_MakeFrag
0001A6A4                            ; ===========================================================================
0001A6A4                            
0001A6A4                            Obj83_LoopFrag:
0001A6A4 4EB9 0000 E320             		jsr	SingleObjLoad2
0001A6AA 6600                       		bne.s	Obj83_BreakSnd
0001A6AC                            
0001A6AC                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A6AC 45D0                       		lea	(a0),a2
0001A6AE 47D1                       		lea	(a1),a3
0001A6B0 7603                       		moveq	#3,d3
0001A6B2                            
0001A6B2                            loc_19CC4:
0001A6B2 26DA                       		move.l	(a2)+,(a3)+
0001A6B4 26DA                       		move.l	(a2)+,(a3)+
0001A6B6 26DA                       		move.l	(a2)+,(a3)+
0001A6B8 26DA                       		move.l	(a2)+,(a3)+
0001A6BA 51CB FFF6                  		dbf	d3,loc_19CC4
0001A6BE                            
0001A6BE 335C 0012                  		move.w	(a4)+,$12(a1)
0001A6C2 361D                       		move.w	(a5)+,d3
0001A6C4 D769 0008                  		add.w	d3,8(a1)
0001A6C8 361D                       		move.w	(a5)+,d3
0001A6CA D769 000C                  		add.w	d3,$C(a1)
0001A6CE 1344 001A                  		move.b	d4,$1A(a1)
0001A6D2 5244                       		addq.w	#1,d4
0001A6D4 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A6D8                            
0001A6D8                            Obj83_BreakSnd:
0001A6D8 303C 00CB                  		move.w	#$CB,d0
0001A6DC 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A6E2 4EF9 0000 DE84             		jmp	DisplaySprite
0001A6E8                            ; ===========================================================================
0001A6E8 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A6EC 0120 00C0                  		dc.w $120, $C0
0001A6F0 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A6F4 0010 0000                  		dc.w $10, 0
0001A6F8 0000 0010                  		dc.w 0,	$10
0001A6FC 0010 0010                  		dc.w $10, $10
0001A700                            ; ---------------------------------------------------------------------------
0001A700                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A700                            ; ---------------------------------------------------------------------------
0001A700                            Map_obj83:
0001A700                            	include "_maps\obj83.asm"
0001A700                            ; ---------------------------------------------------------------------------
0001A700                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A700                            ; ---------------------------------------------------------------------------
0001A700 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A704 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A708 0000                       		dc.w byte_19D46-Map_obj83
0001A70A 01                         byte_19D1C:	dc.b 1
0001A70B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A710 02                         byte_19D22:	dc.b 2
0001A711 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A716 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A71B 00                         		dc.b 0
0001A71C 02                         byte_19D2E:	dc.b 2
0001A71D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A722 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A727 00                         		dc.b 0
0001A728 02                         byte_19D3A:	dc.b 2
0001A729 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A72E F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A733 00                         		dc.b 0
0001A734 02                         byte_19D46:	dc.b 2
0001A735 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A73A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A740 00                         		even
0001A740 00                         		even
0001A740                            
0001A740                            ; ===========================================================================
0001A740                            ; ---------------------------------------------------------------------------
0001A740                            ; Object 85 - Eggman (FZ)
0001A740                            ; ---------------------------------------------------------------------------
0001A740                            
0001A740                            Obj85_Delete:
0001A740 4EF9 0000 DEC0             		jmp	DeleteObject
0001A746                            ; ===========================================================================
0001A746                            
0001A746                            Obj85:					; XREF: Obj_Index
0001A746 7000                       		moveq	#0,d0
0001A748 1028 0024                  		move.b	$24(a0),d0
0001A74C 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A750 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A754                            ; ===========================================================================
0001A754 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A756 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A758 0000                       		dc.w loc_1A38E-Obj85_Index
0001A75A 0000                       		dc.w loc_1A346-Obj85_Index
0001A75C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A75E 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A760 0000                       		dc.w loc_1A264-Obj85_Index
0001A762                            
0001A762 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A768 0001 A438                  		dc.l Map_obj82		; mappings pointer
0001A76C 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A772 0000 0000                  		dc.l Map_obj84
0001A776 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A77C 0000 0000                  		dc.l Map_FZBoss
0001A780 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A786 0001 A438                  		dc.l Map_obj82
0001A78A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A790 0001 877A                  		dc.l Map_Eggman
0001A794 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A79A 0001 877A                  		dc.l Map_Eggman
0001A79E                            
0001A79E 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A7A3 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A7A8 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A7AD 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A7B2 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A7B7 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A7BC                            ; ===========================================================================
0001A7BC                            
0001A7BC                            Obj85_Main:				; XREF: Obj85_Index
0001A7BC 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A7C0 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A7C4 2248                       		movea.l	a0,a1
0001A7C6 7205                       		moveq	#5,d1
0001A7C8 6000                       		bra.s	Obj85_LoadBoss
0001A7CA                            ; ===========================================================================
0001A7CA                            
0001A7CA                            Obj85_Loop:
0001A7CA 4EB9 0000 E320             		jsr	SingleObjLoad2
0001A7D0 6600                       		bne.s	loc_19E20
0001A7D2                            
0001A7D2                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A7D2 12BC 0085                  		move.b	#$85,(a1)
0001A7D6 335A 0008                  		move.w	(a2)+,8(a1)
0001A7DA 335A 000C                  		move.w	(a2)+,$C(a1)
0001A7DE 335A 0002                  		move.w	(a2)+,2(a1)
0001A7E2 235A 0004                  		move.l	(a2)+,4(a1)
0001A7E6 135B 0024                  		move.b	(a3)+,$24(a1)
0001A7EA 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A7EE 135B 0018                  		move.b	(a3)+,$18(a1)
0001A7F2 135B 0017                  		move.b	(a3)+,$17(a1)
0001A7F6 135B 0016                  		move.b	(a3)+,$16(a1)
0001A7FA 137C 0004 0001             		move.b	#4,1(a1)
0001A800 08E8 0007 0001             		bset	#7,1(a0)
0001A806 2348 0034                  		move.l	a0,$34(a1)
0001A80A 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A80E                            
0001A80E                            loc_19E20:
0001A80E 45E8 0036                  		lea	$36(a0),a2
0001A812 4EB9 0000 E30A             		jsr	SingleObjLoad
0001A818 6600                       		bne.s	loc_19E5A
0001A81A 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A81E 3489                       		move.w	a1,(a2)
0001A820 2348 0034                  		move.l	a0,$34(a1)
0001A824 45E8 0038                  		lea	$38(a0),a2
0001A828 7400                       		moveq	#0,d2
0001A82A 7203                       		moveq	#3,d1
0001A82C                            
0001A82C                            loc_19E3E:
0001A82C 4EB9 0000 E320             		jsr	SingleObjLoad2
0001A832 6600                       		bne.s	loc_19E5A
0001A834 34C9                       		move.w	a1,(a2)+
0001A836 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A83A 2348 0034                  		move.l	a0,$34(a1)
0001A83E 1342 0028                  		move.b	d2,$28(a1)
0001A842 5442                       		addq.w	#2,d2
0001A844 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A848                            
0001A848                            loc_19E5A:
0001A848 317C 0000 0034             		move.w	#0,$34(a0)
0001A84E 4EB8 2B32                  		jsr	RandomNumber	; get a number between 0 and 250
0001A852 4240                       		clr.w	d0
0001A854 4840                       		swap	d0
0001A856 80FC 00FB                  		divu.w	#251,d0
0001A85A 4840                       		swap	d0
0001A85C 0640 0118                  		add.w	#280,d0		; add 280
0001A860 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001A866 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A86C                            
0001A86C                            Obj85_Eggman:				; XREF: Obj85_Index
0001A86C 7000                       		moveq	#0,d0
0001A86E 1028 0034                  		move.b	$34(a0),d0
0001A872 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A876 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A87A 4EF9 0000 DE84             		jmp	DisplaySprite
0001A880                            ; ===========================================================================
0001A880 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A884 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A888 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A88C 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A890                            ; ===========================================================================
0001A890                            
0001A890                            loc_19E90:				; XREF: off_19E80
0001A890 4AB8 F680                  		tst.l	($FFFFF680).w
0001A894 6600                       		bne.s	loc_19EA2
0001A896 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A89C 6500                       		bcs.s	loc_19EA2
0001A89E 5428 0034                  		addq.b	#2,$34(a0)
0001A8A2                            
0001A8A2                            loc_19EA2:
0001A8A2 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A8A6 4E75                       		rts	
0001A8A8                            ; ===========================================================================
0001A8A8                            
0001A8A8                            loc_19EA8:				; XREF: off_19E80
0001A8A8 4A68 0030                  		tst.w	$30(a0)
0001A8AC 6A00                       		bpl.s	loc_19F10
0001A8AE 4268 0030                  		clr.w	$30(a0)
0001A8B2 4EB9 0000 2B32             		jsr	(RandomNumber).l
0001A8B8 0240 000C                  		andi.w	#$C,d0
0001A8BC 3200                       		move.w	d0,d1
0001A8BE 5441                       		addq.w	#2,d1
0001A8C0 4A80                       		tst.l	d0
0001A8C2 6A00                       		bpl.s	loc_19EC6
0001A8C4 C141                       		exg	d1,d0
0001A8C6                            
0001A8C6                            loc_19EC6:
0001A8C6 43FA 0000                  		lea	word_19FD6(pc),a1
0001A8CA 3031 0000                  		move.w	(a1,d0.w),d0
0001A8CE 3231 1000                  		move.w	(a1,d1.w),d1
0001A8D2 3140 0030                  		move.w	d0,$30(a0)
0001A8D6 74FF                       		moveq	#-1,d2
0001A8D8 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A8DC 2242                       		movea.l	d2,a1
0001A8DE 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A8E4 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A8EA 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A8EE 2242                       		movea.l	d2,a1
0001A8F0 137C 0001 0029             		move.b	#1,$29(a1)
0001A8F6 337C 0000 0030             		move.w	#0,$30(a1)
0001A8FC 317C 0001 0032             		move.w	#1,$32(a0)
0001A902 4228 0035                  		clr.b	$35(a0)
0001A906 303C 00B7                  		move.w	#$B7,d0
0001A90A 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A910                            
0001A910                            loc_19F10:
0001A910 4A68 0032                  		tst.w	$32(a0)
0001A914 6B00 0000                  		bmi.w	loc_19FA6
0001A918 08A8 0000 0022             		bclr	#0,$22(a0)
0001A91E 3038 D008                  		move.w	($FFFFD008).w,d0
0001A922 9068 0008                  		sub.w	8(a0),d0
0001A926 6500                       		bcs.s	loc_19F2E
0001A928 08E8 0000 0022             		bset	#0,$22(a0)
0001A92E                            
0001A92E                            loc_19F2E:
0001A92E 323C 002B                  		move.w	#$2B,d1
0001A932 343C 0014                  		move.w	#$14,d2
0001A936 363C 0014                  		move.w	#$14,d3
0001A93A 3828 0008                  		move.w	8(a0),d4
0001A93E 4EB9 0001 0254             		jsr	SolidObject
0001A944 4A44                       		tst.w	d4
0001A946 6E00                       		bgt.s	loc_19F50
0001A948                            
0001A948                            loc_19F48:
0001A948 4A28 0035                  		tst.b	$35(a0)
0001A94C 6600                       		bne.s	loc_19F88
0001A94E 6000                       		bra.s	loc_19F96
0001A950                            ; ===========================================================================
0001A950                            
0001A950                            loc_19F50:
0001A950 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001A954                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001A954                            ;		bne.s	loc_19F48
0001A954                            ;		move.w	#$300,d0		; knock player back (nah)
0001A954                            ;		btst	#0,$22(a0)
0001A954                            ;		bne.s	loc_19F6A
0001A954                            ;		neg.w	d0
0001A954                            ;
0001A954                            ;loc_19F6A:
0001A954                            ;		move.w	d0,($FFFFD010).w
0001A954 4A28 0035                  		tst.b	$35(a0)
0001A958 6600                       		bne.s	loc_19F88
0001A95A 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001A960 6400                       		bcc.s	@notoverflown
0001A962 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001A968                            @notoverflown:
0001A968 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001A96E 303C 00AC                  		move.w	#$AC,d0
0001A972 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A978                            
0001A978                            loc_19F88:
0001A978 5328 0035                  		subq.b	#1,$35(a0)
0001A97C 6700                       		beq.s	loc_19F96
0001A97E 117C 0003 001C             		move.b	#3,$1C(a0)
0001A984 6000                       		bra.s	loc_19F9C
0001A986                            ; ===========================================================================
0001A986                            
0001A986                            loc_19F96:
0001A986 117C 0001 001C             		move.b	#1,$1C(a0)
0001A98C                            
0001A98C                            loc_19F9C:
0001A98C 43FA FA78                  		lea	Ani_obj82(pc),a1
0001A990 4EF9 0000 AED2             		jmp	AnimateSprite
0001A996                            ; ===========================================================================
0001A996                            
0001A996                            loc_19FA6:
0001A996 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001A99C 6700                       		beq.s	loc_19FBC
0001A99E 5428 0034                  		addq.b	#2,$34(a0)
0001A9A2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A9A8 4268 0032                  		clr.w	$32(a0)
0001A9AC 4E75                       		rts	
0001A9AE                            ; ===========================================================================
0001A9AE                            
0001A9AE                            loc_19FBC:
0001A9AE 117C 0006 0034             		move.b	#6,$34(a0)
0001A9B4 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A9BA 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A9C0 117C 0014 0016             		move.b	#$14,$16(a0)
0001A9C6 4E75                       		rts	
0001A9C8                            ; ===========================================================================
0001A9C8 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A9D8                            ; ===========================================================================
0001A9D8                            
0001A9D8                            loc_19FE6:				; XREF: off_19E80
0001A9D8 70FF                       		moveq	#-1,d0
0001A9DA 3028 0036                  		move.w	$36(a0),d0
0001A9DE 2240                       		movea.l	d0,a1
0001A9E0 4A68 0030                  		tst.w	$30(a0)
0001A9E4 6A00                       		bpl.s	loc_1A000
0001A9E6 4268 0030                  		clr.w	$30(a0)
0001A9EA 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A9F0 6100                       		bsr.s	loc_1A020
0001A9F2                            
0001A9F2                            loc_1A000:
0001A9F2 700F                       		moveq	#$F,d0
0001A9F4 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A9F8 6600                       		bne.s	loc_1A00A
0001A9FA 6100                       		bsr.s	loc_1A020
0001A9FC                            
0001A9FC                            loc_1A00A:
0001A9FC 4A68 0032                  		tst.w	$32(a0)
0001AA00 6700                       		beq.s	locret_1A01E
0001AA02 5528 0034                  		subq.b	#2,$34(a0)
0001AA06 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AA0C 4268 0032                  		clr.w	$32(a0)
0001AA10                            
0001AA10                            locret_1A01E:
0001AA10 4E75                       		rts	
0001AA12                            ; ===========================================================================
0001AA12                            
0001AA12                            loc_1A020:
0001AA12 303C 00B1                  		move.w	#$B1,d0
0001AA16 4EF9 0000 13B6             		jmp	(PlaySound_Special).l ;	play electricity sound
0001AA1C                            ; ===========================================================================
0001AA1C                            
0001AA1C                            loc_1A02A:				; XREF: off_19E80
0001AA1C 117C 0030 0017             		move.b	#$30,$17(a0)
0001AA22 08E8 0000 0022             		bset	#0,$22(a0)
0001AA28 4EB9 0000 DE5E             		jsr	SpeedToPos
0001AA2E 117C 0006 001A             		move.b	#6,$1A(a0)
0001AA34 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AA3A 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AA40 6500                       		bcs.s	loc_1A070
0001AA42 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AA48 5428 0034                  		addq.b	#2,$34(a0)
0001AA4C 117C 0020 0017             		move.b	#$20,$17(a0)
0001AA52 317C 0100 0010             		move.w	#$100,$10(a0)
0001AA58 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AA5E 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AA62                            
0001AA62                            loc_1A070:
0001AA62 6000 0000                  		bra.w	loc_1A166
0001AA66                            ; ===========================================================================
0001AA66                            
0001AA66                            loc_1A074:				; XREF: off_19E80
0001AA66 08E8 0000 0022             		bset	#0,$22(a0)
0001AA6C 117C 0004 001C             		move.b	#4,$1C(a0)
0001AA72 4EB9 0000 DE5E             		jsr	SpeedToPos
0001AA78 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AA7E 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AA84 6500                       		bcs.s	loc_1A09A
0001AA86 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AA8C                            
0001AA8C                            loc_1A09A:
0001AA8C 317C 0400 0010             		move.w	#$400,$10(a0)
0001AA92 3028 0008                  		move.w	8(a0),d0
0001AA96 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AA9A 6A00                       		bpl.s	loc_1A0B4
0001AA9C 317C 0500 0010             		move.w	#$500,$10(a0)
0001AAA2 6000 0000                  		bra.w	loc_1A0F2
0001AAA6                            ; ===========================================================================
0001AAA6                            
0001AAA6                            loc_1A0B4:
0001AAA6 0440 0070                  		subi.w	#$70,d0
0001AAAA 6500                       		bcs.s	loc_1A0F2
0001AAAC 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AAB2 5140                       		subq.w	#8,d0
0001AAB4 6500                       		bcs.s	loc_1A0F2
0001AAB6 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AABC 5140                       		subq.w	#8,d0
0001AABE 6500                       		bcs.s	loc_1A0F2
0001AAC0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AAC6 5140                       		subq.w	#8,d0
0001AAC8 6500                       		bcs.s	loc_1A0F2
0001AACA 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AAD0 5140                       		subq.w	#8,d0
0001AAD2 6500                       		bcs.s	loc_1A0F2
0001AAD4 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AADA 0440 0038                  		subi.w	#$38,d0
0001AADE 6500                       		bcs.s	loc_1A0F2
0001AAE0 4268 0010                  		clr.w	$10(a0)
0001AAE4                            
0001AAE4                            loc_1A0F2:
0001AAE4 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001AAEA 6500                       		bcs.s	loc_1A110
0001AAEC 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001AAF2 317C 0240 0010             		move.w	#$240,$10(a0)
0001AAF8 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001AAFE 5428 0034                  		addq.b	#2,$34(a0)
0001AB02                            
0001AB02                            loc_1A110:
0001AB02 6000                       		bra.s	loc_1A15C
0001AB04                            ; ===========================================================================
0001AB04                            
0001AB04                            loc_1A112:				; XREF: off_19E80
0001AB04 4EB9 0000 DE5E             		jsr	SpeedToPos
0001AB0A 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001AB10 6500                       		bcs.s	loc_1A124
0001AB12 4268 0010                  		clr.w	$10(a0)
0001AB16                            
0001AB16                            loc_1A124:
0001AB16 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AB1C 4A68 0012                  		tst.w	$12(a0)
0001AB20 6B00                       		bmi.s	loc_1A142
0001AB22 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AB28 6500                       		bcs.s	loc_1A142
0001AB2A 317C 0592 000C             		move.w	#$592,$C(a0)
0001AB30 4268 0012                  		clr.w	$12(a0)
0001AB34                            
0001AB34                            loc_1A142:
0001AB34 3028 0010                  		move.w	$10(a0),d0
0001AB38 8068 0012                  		or.w	$12(a0),d0
0001AB3C 6600                       		bne.s	loc_1A15C
0001AB3E 5428 0034                  		addq.b	#2,$34(a0)
0001AB42 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AB48 117C 0001 0021             		move.b	#1,$21(a0)
0001AB4E                            
0001AB4E                            loc_1A15C:
0001AB4E 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001AB52 4EB9 0000 AED2             		jsr	AnimateSprite
0001AB58                            
0001AB58                            loc_1A166:
0001AB58 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AB5E 6C00                       		bge.s	loc_1A172
0001AB60 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AB64                            
0001AB64                            loc_1A172:
0001AB64 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AB6A 6C00                       		bge.s	locret_1A190
0001AB6C 323C 001B                  		move.w	#$1B,d1
0001AB70 343C 0070                  		move.w	#$70,d2
0001AB74 363C 0071                  		move.w	#$71,d3
0001AB78 3828 0008                  		move.w	8(a0),d4
0001AB7C 4EF9 0001 0254             		jmp	SolidObject
0001AB82                            ; ===========================================================================
0001AB82                            
0001AB82                            locret_1A190:
0001AB82 4E75                       		rts	
0001AB84                            ; ===========================================================================
0001AB84                            
0001AB84                            loc_1A192:				; XREF: off_19E80
0001AB84 217C 0001 877A 0004        		move.l	#Map_Eggman,4(a0)
0001AB8C 317C 0400 0002             		move.w	#$400,2(a0)
0001AB92 117C 0000 001C             		move.b	#0,$1C(a0)
0001AB98 08E8 0000 0022             		bset	#0,$22(a0)
0001AB9E 4EB9 0000 DE5E             		jsr	SpeedToPos
0001ABA4 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001ABAA 6400                       		bcc.s	loc_1A1D0
0001ABAC 317C 0180 0010             		move.w	#$180,$10(a0)
0001ABB2 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001ABB8 117C 000F 0020             		move.b	#$F,$20(a0)
0001ABBE 5428 0034                  		addq.b	#2,$34(a0)
0001ABC2                            
0001ABC2                            loc_1A1D0:
0001ABC2 6000 FF8A                  		bra.w	loc_1A15C
0001ABC6                            ; ===========================================================================
0001ABC6                            
0001ABC6                            loc_1A1D4:				; XREF: off_19E80
0001ABC6 08E8 0000 0022             		bset	#0,$22(a0)
0001ABCC 4EB9 0000 DE5E             		jsr	SpeedToPos
0001ABD2 4A68 0030                  		tst.w	$30(a0)
0001ABD6 6600                       		bne.s	loc_1A1FC
0001ABD8 4A28 0020                  		tst.b	$20(a0)
0001ABDC 6600                       		bne.s	loc_1A216
0001ABDE 317C 001E 0030             		move.w	#$1E,$30(a0)
0001ABE4 303C 00AC                  		move.w	#$AC,d0
0001ABE8 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ABEE                            
0001ABEE                            loc_1A1FC:
0001ABEE 5368 0030                  		subq.w	#1,$30(a0)
0001ABF2 6600                       		bne.s	loc_1A216
0001ABF4 4A28 0022                  		tst.b	$22(a0)
0001ABF8 6A00                       		bpl.s	loc_1A210
0001ABFA 317C 0060 0012             		move.w	#$60,$12(a0)
0001AC00 6000                       		bra.s	loc_1A216
0001AC02                            ; ===========================================================================
0001AC02                            
0001AC02                            loc_1A210:
0001AC02 117C 000F 0020             		move.b	#$F,$20(a0)
0001AC08                            
0001AC08                            loc_1A216:
0001AC08 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AC0E 6D00                       		blt.s	loc_1A23A
0001AC10 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AC16 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AC1C 4278 D014                  		clr.w	($FFFFD014).w
0001AC20 4A68 0012                  		tst.w	$12(a0)
0001AC24 6A00                       		bpl.s	loc_1A248
0001AC26 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AC2C                            
0001AC2C                            loc_1A23A:
0001AC2C 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AC32 6D00                       		blt.s	loc_1A248
0001AC34 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AC3A                            
0001AC3A                            loc_1A248:
0001AC3A 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AC40 6500                       		bcs.s	loc_1A260
0001AC42 4A28 0001                  		tst.b	1(a0)
0001AC46 6B00                       		bmi.s	loc_1A260
0001AC48 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AC4E 6000 FAF0                  		bra.w	Obj85_Delete
0001AC52                            ; ===========================================================================
0001AC52                            
0001AC52                            loc_1A260:
0001AC52 6000 FEFA                  		bra.w	loc_1A15C
0001AC56                            ; ===========================================================================
0001AC56                            
0001AC56                            loc_1A264:				; XREF: Obj85_Index
0001AC56 2268 0034                  		movea.l	$34(a0),a1
0001AC5A 1011                       		move.b	(a1),d0
0001AC5C B010                       		cmp.b	(a0),d0
0001AC5E 6600 FAE0                  		bne.w	Obj85_Delete
0001AC62 117C 0007 001C             		move.b	#7,$1C(a0)
0001AC68 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AC6E 6C00                       		bge.s	loc_1A280
0001AC70 6000                       		bra.s	loc_1A2A6
0001AC72                            ; ===========================================================================
0001AC72                            
0001AC72                            loc_1A280:
0001AC72 4A69 0010                  		tst.w	$10(a1)
0001AC76 6700                       		beq.s	loc_1A28C
0001AC78 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AC7E                            
0001AC7E                            loc_1A28C:
0001AC7E 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001AC82 4EB9 0000 AED2             		jsr	AnimateSprite
0001AC88                            
0001AC88                            loc_1A296:
0001AC88 2268 0034                  		movea.l	$34(a0),a1
0001AC8C 3169 0008 0008             		move.w	8(a1),8(a0)
0001AC92 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AC98                            
0001AC98                            loc_1A2A6:
0001AC98 2268 0034                  		movea.l	$34(a0),a1
0001AC9C 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ACA2 7003                       		moveq	#3,d0
0001ACA4 C028 0022                  		and.b	$22(a0),d0
0001ACA8 0228 00FC 0001             		andi.b	#-4,1(a0)
0001ACAE 8128 0001                  		or.b	d0,1(a0)
0001ACB2 4EF9 0000 DE84             		jmp	DisplaySprite
0001ACB8                            ; ===========================================================================
0001ACB8                            
0001ACB8                            loc_1A2C6:				; XREF: Obj85_Index
0001ACB8 2268 0034                  		movea.l	$34(a0),a1
0001ACBC 1011                       		move.b	(a1),d0
0001ACBE B010                       		cmp.b	(a0),d0
0001ACC0 6600 FA7E                  		bne.w	Obj85_Delete
0001ACC4 0CA9 0001 877A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ACCC 6700                       		beq.s	loc_1A2E4
0001ACCE 117C 000A 001A             		move.b	#$A,$1A(a0)
0001ACD4 60C2                       		bra.s	loc_1A2A6
0001ACD6                            ; ===========================================================================
0001ACD6                            
0001ACD6                            loc_1A2E4:
0001ACD6 117C 0001 001C             		move.b	#1,$1C(a0)
0001ACDC 4A29 0021                  		tst.b	$21(a1)
0001ACE0 6F00                       		ble.s	loc_1A312
0001ACE2 117C 0006 001C             		move.b	#6,$1C(a0)
0001ACE8 217C 0001 877A 0004        		move.l	#Map_Eggman,4(a0)
0001ACF0 317C 0400 0002             		move.w	#$400,2(a0)
0001ACF6 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001ACFA 4EB9 0000 AED2             		jsr	AnimateSprite
0001AD00 6000 FF86                  		bra.w	loc_1A296
0001AD04                            ; ===========================================================================
0001AD04                            
0001AD04                            loc_1A312:
0001AD04 4A28 0001                  		tst.b	1(a0)
0001AD08 6A00 FA36                  		bpl.w	Obj85_Delete
0001AD0C 6100 D584                  		bsr.w	BossDefeated
0001AD10 117C 0002 0018             		move.b	#2,$18(a0)
0001AD16 117C 0000 001C             		move.b	#0,$1C(a0)
0001AD1C 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AD24 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AD2A 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AD2E 4EB9 0000 AED2             		jsr	AnimateSprite
0001AD34 6000 FF52                  		bra.w	loc_1A296
0001AD38                            ; ===========================================================================
0001AD38                            
0001AD38                            loc_1A346:				; XREF: Obj85_Index
0001AD38 08E8 0000 0022             		bset	#0,$22(a0)
0001AD3E 2268 0034                  		movea.l	$34(a0),a1
0001AD42 0CA9 0001 877A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AD4A 6700                       		beq.s	loc_1A35E
0001AD4C 6000 FF4A                  		bra.w	loc_1A2A6
0001AD50                            ; ===========================================================================
0001AD50                            
0001AD50                            loc_1A35E:
0001AD50 3169 0008 0008             		move.w	8(a1),8(a0)
0001AD56 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AD5C 4A28 001E                  		tst.b	$1E(a0)
0001AD60 6600                       		bne.s	loc_1A376
0001AD62 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AD68                            
0001AD68                            loc_1A376:
0001AD68 5328 001E                  		subq.b	#1,$1E(a0)
0001AD6C 6E00                       		bgt.s	loc_1A38A
0001AD6E 5228 001A                  		addq.b	#1,$1A(a0)
0001AD72 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AD78 6E00 F9C6                  		bgt.w	Obj85_Delete
0001AD7C                            
0001AD7C                            loc_1A38A:
0001AD7C 6000 FF0A                  		bra.w	loc_1A296
0001AD80                            ; ===========================================================================
0001AD80                            
0001AD80                            loc_1A38E:				; XREF: Obj85_Index
0001AD80 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AD86 3038 D008                  		move.w	($FFFFD008).w,d0
0001AD8A 9068 0008                  		sub.w	8(a0),d0
0001AD8E 6500                       		bcs.s	loc_1A3A6
0001AD90 4A28 0001                  		tst.b	1(a0)
0001AD94 6A00 F9AA                  		bpl.w	Obj85_Delete
0001AD98                            
0001AD98                            loc_1A3A6:
0001AD98 4EF9 0000 DE84             		jmp	DisplaySprite
0001AD9E                            ; ===========================================================================
0001AD9E                            
0001AD9E                            loc_1A3AC:				; XREF: Obj85_Index
0001AD9E 117C 0000 001A             		move.b	#0,$1A(a0)
0001ADA4 08E8 0000 0022             		bset	#0,$22(a0)
0001ADAA 2268 0034                  		movea.l	$34(a0),a1
0001ADAE 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001ADB4 6600                       		bne.s	loc_1A3D0
0001ADB6 0CA9 0001 877A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ADBE 6700 F980                  		beq.w	Obj85_Delete
0001ADC2                            
0001ADC2                            loc_1A3D0:
0001ADC2 6000 FED4                  		bra.w	loc_1A2A6
0001ADC6                            ; ===========================================================================
0001ADC6                            Ani_obj85:
0001ADC6                            	include "_anim\obj85.asm"
0001ADC6                            ; ---------------------------------------------------------------------------
0001ADC6                            ; Animation script - Eggman (FZ)
0001ADC6                            ; ---------------------------------------------------------------------------
0001ADC6 0000                       		dc.w byte_1A3D6-Ani_obj85
0001ADC8 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001ADCC                            		even
0001ADCC                            		even
0001ADCC                            
0001ADCC                            Map_Eggman2:
0001ADCC                            	include "_maps\Eggman2.asm"
0001ADCC                            ; ---------------------------------------------------------------------------
0001ADCC                            ; Sprite mappings - Eggman (FZ)
0001ADCC                            ; ---------------------------------------------------------------------------
0001ADCC 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001ADCE 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001ADD0 06                         byte_1A3DE:	dc.b 6
0001ADD1 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001ADD6 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001ADDB EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ADE0 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ADE5 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ADEA 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ADEF 06                         byte_1A3FD:	dc.b 6
0001ADF0 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001ADF5 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001ADFA EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ADFF FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AE04 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AE09 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AE0E                            		even
0001AE0E                            		even
0001AE0E                            
0001AE0E                            Map_FZBoss:
0001AE0E                            	include "_maps\FZ boss.asm"
0001AE0E                            ; ---------------------------------------------------------------------------
0001AE0E                            ; Sprite mappings - boss (FZ)
0001AE0E                            ; ---------------------------------------------------------------------------
0001AE0E 0000                       		dc.w byte_1A422-Map_FZBoss
0001AE10 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AE12 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AE14 02                         byte_1A422:	dc.b 2
0001AE15 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AE1A 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AE1F 03                         byte_1A42D:	dc.b 3
0001AE20 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AE25 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AE2A 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AE2F 02                         byte_1A43D:	dc.b 2
0001AE30 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AE35 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AE3A                            		even
0001AE3A                            		even
0001AE3A                            
0001AE3A                            ; ===========================================================================
0001AE3A                            
0001AE3A                            Obj84_Delete:
0001AE3A 4EF9 0000 DEC0             		jmp	DeleteObject
0001AE40                            ; ===========================================================================
0001AE40                            ; ---------------------------------------------------------------------------
0001AE40                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AE40                            ; ---------------------------------------------------------------------------
0001AE40                            
0001AE40                            Obj84:					; XREF: Obj_Index
0001AE40 7000                       		moveq	#0,d0
0001AE42 1028 0024                  		move.b	$24(a0),d0
0001AE46 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AE4A 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AE4E                            ; ===========================================================================
0001AE4E 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AE50 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AE52 0000                       		dc.w loc_1A57E-Obj84_Index
0001AE54                            
0001AE54 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AE58 2550 0620                  		dc.w $2550, $620
0001AE5C 2490 04C0                  		dc.w $2490, $4C0
0001AE60 2510 04C0                  		dc.w $2510, $4C0
0001AE64                            ; ===========================================================================
0001AE64                            
0001AE64                            Obj84_Main:				; XREF: Obj84_Index
0001AE64 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AE68 7000                       		moveq	#0,d0
0001AE6A 1028 0028                  		move.b	$28(a0),d0
0001AE6E D040                       		add.w	d0,d0
0001AE70 D2C0                       		adda.w	d0,a1
0001AE72 117C 0004 0001             		move.b	#4,1(a0)
0001AE78 08E8 0007 0001             		bset	#7,1(a0)
0001AE7E 08E8 0004 0001             		bset	#4,1(a0)
0001AE84 317C 0300 0002             		move.w	#$300,2(a0)
0001AE8A 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AE92 3159 0008                  		move.w	(a1)+,8(a0)
0001AE96 3151 000C                  		move.w	(a1),$C(a0)
0001AE9A 3159 0038                  		move.w	(a1)+,$38(a0)
0001AE9E 117C 0020 0016             		move.b	#$20,$16(a0)
0001AEA4 117C 0060 0017             		move.b	#$60,$17(a0)
0001AEAA 117C 0020 0019             		move.b	#$20,$19(a0)
0001AEB0 117C 0060 0016             		move.b	#$60,$16(a0)
0001AEB6 117C 0003 0018             		move.b	#3,$18(a0)
0001AEBC 5428 0024                  		addq.b	#2,$24(a0)
0001AEC0                            
0001AEC0                            loc_1A4CE:				; XREF: Obj84_Index
0001AEC0 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AEC6 6F00                       		ble.s	loc_1A4DC
0001AEC8 08E8 0001 0001             		bset	#1,1(a0)
0001AECE                            
0001AECE                            loc_1A4DC:
0001AECE 42A8 003C                  		clr.l	$3C(a0)
0001AED2 4A28 0029                  		tst.b	$29(a0)
0001AED6 6700                       		beq.s	loc_1A4EA
0001AED8 5428 0024                  		addq.b	#2,$24(a0)
0001AEDC                            
0001AEDC                            loc_1A4EA:
0001AEDC 2028 003C                  		move.l	$3C(a0),d0
0001AEE0 2228 0038                  		move.l	$38(a0),d1
0001AEE4 D280                       		add.l	d0,d1
0001AEE6 4841                       		swap	d1
0001AEE8 3141 000C                  		move.w	d1,$C(a0)
0001AEEC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AEF2 6600                       		bne.s	loc_1A524
0001AEF4 4A68 0030                  		tst.w	$30(a0)
0001AEF8 6A00                       		bpl.s	loc_1A524
0001AEFA 70F6                       		moveq	#-$A,d0
0001AEFC 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AF02 6F00                       		ble.s	loc_1A514
0001AF04 700E                       		moveq	#$E,d0
0001AF06                            
0001AF06                            loc_1A514:
0001AF06 D240                       		add.w	d0,d1
0001AF08 2268 0034                  		movea.l	$34(a0),a1
0001AF0C 3341 000C                  		move.w	d1,$C(a1)
0001AF10 3368 0008 0008             		move.w	8(a0),8(a1)
0001AF16                            
0001AF16                            loc_1A524:
0001AF16 323C 002B                  		move.w	#$2B,d1
0001AF1A 343C 0060                  		move.w	#$60,d2
0001AF1E 363C 0061                  		move.w	#$61,d3
0001AF22 3828 0008                  		move.w	8(a0),d4
0001AF26 4EB9 0001 0254             		jsr	SolidObject
0001AF2C 7000                       		moveq	#0,d0
0001AF2E 3228 003C                  		move.w	$3C(a0),d1
0001AF32 6A00                       		bpl.s	loc_1A550
0001AF34 4441                       		neg.w	d1
0001AF36 5141                       		subq.w	#8,d1
0001AF38 6500                       		bcs.s	loc_1A55C
0001AF3A 5200                       		addq.b	#1,d0
0001AF3C E841                       		asr.w	#4,d1
0001AF3E D041                       		add.w	d1,d0
0001AF40 6000                       		bra.s	loc_1A55C
0001AF42                            ; ===========================================================================
0001AF42                            
0001AF42                            loc_1A550:
0001AF42 0441 0027                  		subi.w	#$27,d1
0001AF46 6500                       		bcs.s	loc_1A55C
0001AF48 5200                       		addq.b	#1,d0
0001AF4A E841                       		asr.w	#4,d1
0001AF4C D041                       		add.w	d1,d0
0001AF4E                            
0001AF4E                            loc_1A55C:
0001AF4E 1140 001A                  		move.b	d0,$1A(a0)
0001AF52 3038 D008                  		move.w	($FFFFD008).w,d0
0001AF56 9068 0008                  		sub.w	8(a0),d0
0001AF5A 6B00                       		bmi.s	loc_1A578
0001AF5C 0440 0140                  		subi.w	#$140,d0
0001AF60 6B00                       		bmi.s	loc_1A578
0001AF62 4A28 0001                  		tst.b	1(a0)
0001AF66 6A00 FED2                  		bpl.w	Obj84_Delete
0001AF6A                            
0001AF6A                            loc_1A578:
0001AF6A 4EF9 0000 DE84             		jmp	DisplaySprite
0001AF70                            ; ===========================================================================
0001AF70                            
0001AF70                            loc_1A57E:				; XREF: Obj84_Index
0001AF70 7000                       		moveq	#0,d0
0001AF72 1028 0028                  		move.b	$28(a0),d0
0001AF76 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AF7A 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AF7E 6000 FF5C                  		bra.w	loc_1A4EA
0001AF82                            ; ===========================================================================
0001AF82 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AF84 0000                       		dc.w loc_1A598-off_1A590
0001AF86 0000                       		dc.w loc_1A604-off_1A590
0001AF88 0000                       		dc.w loc_1A604-off_1A590
0001AF8A                            ; ===========================================================================
0001AF8A                            
0001AF8A                            loc_1A598:				; XREF: off_1A590
0001AF8A 4A28 0029                  		tst.b	$29(a0)
0001AF8E 6600                       		bne.s	loc_1A5D4
0001AF90 2268 0034                  		movea.l	$34(a0),a1
0001AF94 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001AF9A 6600                       		bne.s	loc_1A5B4
0001AF9C 6100 D2F4                  		bsr.w	BossDefeated
0001AFA0 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AFA8                            
0001AFA8                            loc_1A5B4:
0001AFA8 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AFB0 6400                       		bcc.s	locret_1A602
0001AFB2 42A8 003C                  		clr.l	$3C(a0)
0001AFB6 2268 0034                  		movea.l	$34(a0),a1
0001AFBA 5369 0032                  		subq.w	#1,$32(a1)
0001AFBE 4269 0030                  		clr.w	$30(a1)
0001AFC2 5528 0024                  		subq.b	#2,$24(a0)
0001AFC6 4E75                       		rts	
0001AFC8                            ; ===========================================================================
0001AFC8                            
0001AFC8                            loc_1A5D4:
0001AFC8 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AFCE 6C00                       		bge.s	loc_1A5E4
0001AFD0 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AFD8                            
0001AFD8                            loc_1A5E4:
0001AFD8 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AFE0 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AFE6 6E00                       		bgt.s	locret_1A602
0001AFE8 4268 003E                  		clr.w	$3E(a0)
0001AFEC 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AFF2 4228 0029                  		clr.b	$29(a0)
0001AFF6                            
0001AFF6                            locret_1A602:
0001AFF6 4E75                       		rts	
0001AFF8                            ; ===========================================================================
0001AFF8                            
0001AFF8                            loc_1A604:				; XREF: off_1A590
0001AFF8 08E8 0001 0001             		bset	#1,1(a0)
0001AFFE 4A28 0029                  		tst.b	$29(a0)
0001B002 6600                       		bne.s	loc_1A646
0001B004 2268 0034                  		movea.l	$34(a0),a1
0001B008 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B00E 6600                       		bne.s	loc_1A626
0001B010 6100 D280                  		bsr.w	BossDefeated
0001B014 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B01C                            
0001B01C                            loc_1A626:
0001B01C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B024 6400                       		bcc.s	locret_1A674
0001B026 42A8 003C                  		clr.l	$3C(a0)
0001B02A 2268 0034                  		movea.l	$34(a0),a1
0001B02E 5369 0032                  		subq.w	#1,$32(a1)
0001B032 4269 0030                  		clr.w	$30(a1)
0001B036 5528 0024                  		subq.b	#2,$24(a0)
0001B03A 4E75                       		rts	
0001B03C                            ; ===========================================================================
0001B03C                            
0001B03C                            loc_1A646:
0001B03C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B042 6D00                       		blt.s	loc_1A656
0001B044 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B04C                            
0001B04C                            loc_1A656:
0001B04C 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B054 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B05A 6D00                       		blt.s	locret_1A674
0001B05C 4268 003E                  		clr.w	$3E(a0)
0001B060 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B066 4228 0029                  		clr.b	$29(a0)
0001B06A                            
0001B06A                            locret_1A674:
0001B06A 4E75                       		rts	
0001B06C                            ; ===========================================================================
0001B06C                            ; ---------------------------------------------------------------------------
0001B06C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B06C                            ; ---------------------------------------------------------------------------
0001B06C                            Map_obj84:
0001B06C                            	include "_maps\obj84.asm"
0001B06C                            ; ---------------------------------------------------------------------------
0001B06C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B06C                            ; ---------------------------------------------------------------------------
0001B06C 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B070 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B074 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B078 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B07C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B080 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B084 06                         byte_1A68E:	dc.b 6
0001B085 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B08A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B08F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B094 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B099 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B09E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B0A3 08                         byte_1A6AD:	dc.b 8
0001B0A4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B0A9 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B0AE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B0B3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B0B8 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B0BD B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B0C2 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B0C7 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B0CC 0A                         byte_1A6D6:	dc.b $A
0001B0CD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B0D2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B0D7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B0DC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B0E1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B0E6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B0EB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B0F0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B0F5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B0FA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B0FF 0C                         byte_1A709:	dc.b $C
0001B100 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B105 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B10A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B10F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B114 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B119 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B11E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B123 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B128 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B12D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B132 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B137 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B13C 0D                         byte_1A746:	dc.b $D
0001B13D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B142 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B147 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B14C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B151 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B156 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B15B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B160 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B165 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B16A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B16F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B174 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B179 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B17E 0E                         byte_1A788:	dc.b $E
0001B17F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B184 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B189 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B18E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B193 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B198 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B19D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B1A2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B1A7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B1AC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B1B1 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B1B6 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B1BB 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B1C0 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B1C5 02                         byte_1A7CF:	dc.b 2
0001B1C6 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B1CB 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B1D0                            		even
0001B1D0                            		even
0001B1D0                            
0001B1D0                            ; ===========================================================================
0001B1D0                            ; ---------------------------------------------------------------------------
0001B1D0                            ; Object 86 - energy balls (FZ)
0001B1D0                            ; ---------------------------------------------------------------------------
0001B1D0                            
0001B1D0                            Obj86:					; XREF: Obj_Index
0001B1D0 7000                       		moveq	#0,d0
0001B1D2 1028 0024                  		move.b	$24(a0),d0
0001B1D6 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B1DA 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B1DE                            ; ===========================================================================
0001B1DE 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B1E0 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B1E2 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B1E4 0000                       		dc.w loc_1A962-Obj86_Index
0001B1E6 0000                       		dc.w loc_1A982-Obj86_Index
0001B1E8                            ; ===========================================================================
0001B1E8                            
0001B1E8                            Obj86_Main:				; XREF: Obj86_Index
0001B1E8 317C 2588 0008             		move.w	#$2588,8(a0)
0001B1EE 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B1F4 317C 0300 0002             		move.w	#$300,2(a0)
0001B1FA 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B202 117C 0000 001C             		move.b	#0,$1C(a0)
0001B208 117C 0003 0018             		move.b	#3,$18(a0)
0001B20E 117C 0008 0017             		move.b	#8,$17(a0)
0001B214 117C 0008 0016             		move.b	#8,$16(a0)
0001B21A 117C 0004 0001             		move.b	#4,1(a0)
0001B220 08E8 0007 0001             		bset	#7,1(a0)
0001B226 5428 0024                  		addq.b	#2,$24(a0)
0001B22A                            
0001B22A                            Obj86_Generator:			; XREF: Obj86_Index
0001B22A 2268 0034                  		movea.l	$34(a0),a1
0001B22E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B234 6600                       		bne.s	loc_1A850
0001B236 10BC 003F                  		move.b	#$3F,(a0)
0001B23A 117C 0000 0024             		move.b	#0,$24(a0)
0001B240 4EF9 0000 DE84             		jmp	DisplaySprite
0001B246                            ; ===========================================================================
0001B246                            
0001B246                            loc_1A850:
0001B246 117C 0000 001C             		move.b	#0,$1C(a0)
0001B24C 4A28 0029                  		tst.b	$29(a0)
0001B250 6700                       		beq.s	loc_1A86C
0001B252 5428 0024                  		addq.b	#2,$24(a0)
0001B256 117C 0001 001C             		move.b	#1,$1C(a0)
0001B25C 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B262                            
0001B262                            loc_1A86C:
0001B262 323C 0013                  		move.w	#$13,d1
0001B266 343C 0008                  		move.w	#8,d2
0001B26A 363C 0011                  		move.w	#$11,d3
0001B26E 3828 0008                  		move.w	8(a0),d4
0001B272 4EB9 0001 0254             		jsr	SolidObject
0001B278 3038 D008                  		move.w	($FFFFD008).w,d0
0001B27C 9068 0008                  		sub.w	8(a0),d0
0001B280 6B00                       		bmi.s	loc_1A89A
0001B282 0440 0140                  		subi.w	#$140,d0
0001B286 6B00                       		bmi.s	loc_1A89A
0001B288 4A28 0001                  		tst.b	1(a0)
0001B28C 6A00 FBAC                  		bpl.w	Obj84_Delete
0001B290                            
0001B290                            loc_1A89A:
0001B290 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B294 4EB9 0000 AED2             		jsr	AnimateSprite
0001B29A 4EF9 0000 DE84             		jmp	DisplaySprite
0001B2A0                            ; ===========================================================================
0001B2A0                            
0001B2A0                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B2A0 4A28 0029                  		tst.b	$29(a0)
0001B2A4 6700 0000                  		beq.w	loc_1A954
0001B2A8 4228 0029                  		clr.b	$29(a0)
0001B2AC D068 0030                  		add.w	$30(a0),d0
0001B2B0 0240 001E                  		andi.w	#$1E,d0
0001B2B4 D4C0                       		adda.w	d0,a2
0001B2B6 5868 0030                  		addq.w	#4,$30(a0)
0001B2BA 4268 0032                  		clr.w	$32(a0)
0001B2BE 7403                       		moveq	#3,d2
0001B2C0                            
0001B2C0                            Obj86_Loop:
0001B2C0 4EB9 0000 E320             		jsr	SingleObjLoad2
0001B2C6 6600 0000                  		bne.w	loc_1A954
0001B2CA 12BC 0086                  		move.b	#$86,(a1)
0001B2CE 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2D4 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B2DA 137C 0008 0024             		move.b	#8,$24(a1)
0001B2E0 337C 2300 0002             		move.w	#$2300,2(a1)
0001B2E6 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B2EE 137C 000C 0016             		move.b	#$C,$16(a1)
0001B2F4 137C 000C 0017             		move.b	#$C,$17(a1)
0001B2FA 137C 0000 0020             		move.b	#0,$20(a1)
0001B300 137C 0003 0018             		move.b	#3,$18(a1)
0001B306 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B30C 137C 0004 0001             		move.b	#4,1(a1)
0001B312 08E9 0007 0001             		bset	#7,1(a1)
0001B318 2348 0034                  		move.l	a0,$34(a1)
0001B31C 4EB9 0000 2B32             		jsr	(RandomNumber).l
0001B322 3228 0032                  		move.w	$32(a0),d1
0001B326 C3FC FFB1                  		muls.w	#-$4F,d1
0001B32A 0641 2578                  		addi.w	#$2578,d1
0001B32E 0240 001F                  		andi.w	#$1F,d0
0001B332 0440 0010                  		subi.w	#$10,d0
0001B336 D041                       		add.w	d1,d0
0001B338 3340 0030                  		move.w	d0,$30(a1)
0001B33C 5268 0032                  		addq.w	#1,$32(a0)
0001B340 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B346 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B34A                            
0001B34A                            loc_1A954:
0001B34A 4A68 0032                  		tst.w	$32(a0)
0001B34E 6600                       		bne.s	loc_1A95E
0001B350 5428 0024                  		addq.b	#2,$24(a0)
0001B354                            
0001B354                            loc_1A95E:
0001B354 6000 FF0C                  		bra.w	loc_1A86C
0001B358                            ; ===========================================================================
0001B358                            
0001B358                            loc_1A962:				; XREF: Obj86_Index
0001B358 117C 0002 001C             		move.b	#2,$1C(a0)
0001B35E 4A68 0038                  		tst.w	$38(a0)
0001B362 6600                       		bne.s	loc_1A97E
0001B364 117C 0002 0024             		move.b	#2,$24(a0)
0001B36A 2268 0034                  		movea.l	$34(a0),a1
0001B36E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B374                            
0001B374                            loc_1A97E:
0001B374 6000 FEEC                  		bra.w	loc_1A86C
0001B378                            ; ===========================================================================
0001B378                            
0001B378                            loc_1A982:				; XREF: Obj86_Index
0001B378 7000                       		moveq	#0,d0
0001B37A 1028 0025                  		move.b	$25(a0),d0
0001B37E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B382 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001B386                            ; ===========================================================================
0001B386 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B388 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B38A 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001B38C 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001B38E 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001B390 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001B392 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B394 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001B396 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B398 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001B39A                            ; ===========================================================================
0001B39A                            
0001B39A                            loc_1A9A6:				; XREF: Obj86_Index2
0001B39A 3028 0030                  		move.w	$30(a0),d0
0001B39E 9068 0008                  		sub.w	8(a0),d0
0001B3A2 E940                       		asl.w	#4,d0
0001B3A4 3140 0010                  		move.w	d0,$10(a0)
0001B3A8 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B3AE 5428 0025                  		addq.b	#2,$25(a0)
0001B3B2                            
0001B3B2                            Obj86_Ball_Animate:
0001B3B2 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B3B6 4EB9 0000 AED2             		jsr	AnimateSprite
0001B3BC 4EF9 0000 DE84             		jmp	DisplaySprite
0001B3C2                            ; ===========================================================================
0001B3C2                            
0001B3C2                            loc_1A9C0:				; XREF: Obj86_Index2
0001B3C2 4A68 0010                  		tst.w	$10(a0)
0001B3C6 6700                       		beq.s	loc_1A9E6
0001B3C8 4EB9 0000 DE5E             		jsr	SpeedToPos
0001B3CE 3028 0008                  		move.w	8(a0),d0
0001B3D2 9068 0030                  		sub.w	$30(a0),d0
0001B3D6 6400                       		bcc.s	loc_1A9E6
0001B3D8 4268 0010                  		clr.w	$10(a0)
0001B3DC D168 0008                  		add.w	d0,8(a0)
0001B3E0 2268 0034                  		movea.l	$34(a0),a1
0001B3E4 5369 0032                  		subq.w	#1,$32(a1)
0001B3E8                            
0001B3E8                            loc_1A9E6:
0001B3E8 117C 0000 001C             		move.b	#0,$1C(a0)
0001B3EE 5368 0028                  		subq.w	#1,$28(a0)
0001B3F2 6600                       		bne.s	locret_1AA1C
0001B3F4 4EB8 2B32                  		jsr	RandomNumber
0001B3F8 0240 000E                  		and.w	#7*2,d0
0001B3FC 5840                       		addq.w	#2*2,d0
0001B3FE 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001B402 4840                       		swap	d0
0001B404 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001B408 117C 0001 001C             		move.b	#1,$1C(a0)
0001B40E 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B414 3038 D008                  		move.w	($FFFFD008).w,d0
0001B418 9068 0008                  		sub.w	8(a0),d0
0001B41C 3140 0010                  		move.w	d0,$10(a0)
0001B420 317C 0140 0012             		move.w	#$140,$12(a0)
0001B426                            
0001B426                            locret_1AA1C:
0001B426 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001B42A                            ; ===========================================================================
0001B42A                            
0001B42A                            Obj86_Ball_Explode:
0001B42A 5328 0028                  		subq.b	#1,$28(a0)
0001B42E 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001B432 2268 0034                  		movea.l	$34(a0),a1
0001B436 5369 0038                  		subq.w	#1,$38(a1)
0001B43A 2248                       		move.l	a0,a1
0001B43C 7400                       		moveq	#0,d2	; GMZ
0001B43E 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001B440 6000                       		bra.s	@start
0001B442                            @loop:
0001B442 4EB9 0000 E30A             		jsr	SingleObjLoad
0001B448 6600                       		bne.s	@exit
0001B44A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B450 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B456                            @start:
0001B456 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B45A 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001B460 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001B464 5802                       		addq.b	#4,d2
0001B466 51C9 FFDA                  		dbf	d1,@loop
0001B46A                            @exit:
0001B46A 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001B46E                            ; ===========================================================================
0001B46E                            
0001B46E                            Obj86_Ball_Sine:
0001B46E 1028 0028                  		move.b	$28(a0),d0
0001B472 5828 0028                  		addq.b	#4,$28(a0)
0001B476 4EB8 2B58                  		jsr	CalcSine
0001B47A C1FC 0002                  		muls.w	#2,d0
0001B47E 3140 0010                  		move.w	d0,$10(a0)
0001B482                            
0001B482 1028 0029                  		move.b	$29(a0),d0
0001B486 5828 0029                  		addq.b	#4,$29(a0)
0001B48A 4EB8 2B58                  		jsr	CalcSine
0001B48E 4A40                       		tst.w	d0
0001B490 6B00                       		bmi.s	@upwards
0001B492 E548                       		lsl.w	#2,d0		; x4 go down faster
0001B494                            @upwards:
0001B494 3140 0012                  		move.w	d0,$12(a0)
0001B498 6000 0000                  		bra.w	loc_1AA1E
0001B49C                            ; ===========================================================================
0001B49C                            
0001B49C                            Obj86_Ball_Homing:
0001B49C 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001B4A2 6400                       		bhs.s	@homer
0001B4A4 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001B4AA 6400                       		bhs.s	Obj86_Ball_Vanish
0001B4AC 5328 0028                  		subq.b	#1,$28(a0)
0001B4B0 6400                       		bcc.s	@nomorehoming
0001B4B2 3038 D008                  		move.w	($FFFFD008).w,d0
0001B4B6 9068 0008                  		sub.w	8(a0),d0
0001B4BA D168 0010                  		add.w	d0,$10(a0)
0001B4BE D168 0010                  		add.w	d0,$10(a0)
0001B4C2                            @nomorehoming:
0001B4C2 6000 0000                  		bra.w	loc_1AA1E
0001B4C6                            @homer:
0001B4C6 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001B4CC 60F4                       		bra.s	@nomorehoming	; next frame ig
0001B4CE                            ; ===========================================================================
0001B4CE                            
0001B4CE                            Obj86_Ball_Speed:
0001B4CE 4268 0010                  		clr.w	$10(a0)
0001B4D2 7000                       		moveq	#0,d0
0001B4D4 1028 0028                  		move.b	$28(a0),d0
0001B4D8 E448                       		lsr.w	#2,d0
0001B4DA D168 0012                  		add.w	d0,$12(a0)
0001B4DE 1028 0029                  		move.b	$29(a0),d0
0001B4E2 D128 0028                  		add.b	d0,$28(a0)
0001B4E6 6000 0000                  		bra.w	loc_1AA1E
0001B4EA                            ; ===========================================================================
0001B4EA                            
0001B4EA                            Obj86_Ball_Vanish:
0001B4EA 303C 00E1                  		move.w	#$E1,d0
0001B4EE 4EB9 0000 13B6             		jsr	(PlaySound_Special).l
0001B4F4 6000 0000                  		bra.w	loc_1AA34
0001B4F8                            ; ===========================================================================
0001B4F8                            
0001B4F8                            Obj86_Ball_Static:
0001B4F8 4268 0010                  		clr.w	$10(a0)
0001B4FC 7000                       		moveq	#0,d0
0001B4FE 7200                       		moveq	#0,d1
0001B500 1028 0028                  		move.b	$28(a0),d0
0001B504 1228 0029                  		move.b	$29(a0),d1
0001B508 D041                       		add.w	d1,d0
0001B50A 3140 0012                  		move.w	d0,$12(a0)
0001B50E 6000 0000                  		bra.w	loc_1AA1E
0001B512                            ; ===========================================================================
0001B512                            
0001B512                            Obj86_Ball_Standard:
0001B512                            loc_1AA1E:
0001B512 4EB9 0000 DE5E             		jsr	SpeedToPos
0001B518 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B51E 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001B522                            loc_1AA34:
0001B522 2268 0034                  		movea.l	$34(a0),a1
0001B526 5369 0038                  		subq.w	#1,$38(a1)
0001B52A 6000 F90E                  		bra.w	Obj84_Delete
0001B52E                            ; ===========================================================================
0001B52E                            Ani_obj86:
0001B52E                            	include "_anim\obj86.asm"
0001B52E                            ; ---------------------------------------------------------------------------
0001B52E                            ; Animation script - energy ball launcher (FZ)
0001B52E                            ; ---------------------------------------------------------------------------
0001B52E 0000                       		dc.w byte_1AA46-Ani_obj86
0001B530 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B532 0000                       		dc.w byte_1AA50-Ani_obj86
0001B534 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B538 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B53E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B544                            		even
0001B544                            		even
0001B544                            
0001B544                            ; ---------------------------------------------------------------------------
0001B544                            ; Sprite mappings - energy ball	launcher (FZ)
0001B544                            ; ---------------------------------------------------------------------------
0001B544                            Map_obj86:
0001B544                            	include "_maps\obj86.asm"
0001B544                            ; ---------------------------------------------------------------------------
0001B544                            ; Sprite mappings - energy ball	launcher (FZ)
0001B544                            ; ---------------------------------------------------------------------------
0001B544 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B548 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B54C 01                         byte_1AA5E:	dc.b 1
0001B54D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B552 01                         byte_1AA64:	dc.b 1
0001B553 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B558 01                         byte_1AA6A:	dc.b 1
0001B559 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B55E 01                         byte_1AA70:	dc.b 1
0001B55F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B564                            		even
0001B564                            		even
0001B564                            
0001B564                            Ani_obj86a:
0001B564                            	include "_anim\obj86a.asm"
0001B564                            ; ---------------------------------------------------------------------------
0001B564                            ; Animation script - energy balls (FZ)
0001B564                            ; ---------------------------------------------------------------------------
0001B564 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B566 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B568 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B577 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B586 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B58A 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B594                            		even
0001B594                            		even
0001B594                            
0001B594                            ; ---------------------------------------------------------------------------
0001B594                            ; Sprite mappings - energy balls (FZ)
0001B594                            ; ---------------------------------------------------------------------------
0001B594                            Map_obj86a:
0001B594                            	include "_maps\obj86a.asm"
0001B594                            ; ---------------------------------------------------------------------------
0001B594                            ; Sprite mappings - energy balls (FZ)
0001B594                            ; ---------------------------------------------------------------------------
0001B594 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B598 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B59C 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B5A0 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B5A4 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B5A8 0000                       		dc.w byte_1AB20-Map_obj86a
0001B5AA 02                         byte_1AABC:	dc.b 2
0001B5AB F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B5B0 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B5B5 02                         byte_1AAC7:	dc.b 2
0001B5B6 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B5BB F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B5C0 02                         byte_1AAD2:	dc.b 2
0001B5C1 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B5C6 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B5CB 02                         byte_1AADD:	dc.b 2
0001B5CC F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B5D1 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B5D6 02                         byte_1AAE8:	dc.b 2
0001B5D7 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B5DC 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B5E1 02                         byte_1AAF3:	dc.b 2
0001B5E2 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B5E7 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B5EC 01                         byte_1AAFE:	dc.b 1
0001B5ED F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B5F2 01                         byte_1AB04:	dc.b 1
0001B5F3 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B5F8 02                         byte_1AB0A:	dc.b 2
0001B5F9 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B5FE 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B603 02                         byte_1AB15:	dc.b 2
0001B604 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B609 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B60E 00                         byte_1AB20:	dc.b 0
0001B610 00                         		even
0001B610 00                         		even
0001B610                            
0001B610                            ; ===========================================================================
0001B610                            ; ---------------------------------------------------------------------------
0001B610                            ; Object 3E - prison capsule
0001B610                            ; ---------------------------------------------------------------------------
0001B610                            
0001B610                            Obj3E:					; XREF: Obj_Index
0001B610 7000                       		moveq	#0,d0
0001B612 1028 0024                  		move.b	$24(a0),d0
0001B616 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B61A 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B61E 3028 0008                  		move.w	8(a0),d0
0001B622 0240 FF80                  		andi.w	#$FF80,d0
0001B626 3238 F700                  		move.w	($FFFFF700).w,d1
0001B62A 0441 0080                  		subi.w	#$80,d1
0001B62E 0241 FF80                  		andi.w	#$FF80,d1
0001B632 9041                       		sub.w	d1,d0
0001B634 0C40 0280                  		cmpi.w	#$280,d0
0001B638 6200                       		bhi.s	Obj3E_Delete
0001B63A 4EF9 0000 DE84             		jmp	DisplaySprite
0001B640                            ; ===========================================================================
0001B640                            
0001B640                            Obj3E_Delete:
0001B640 4EF9 0000 DEC0             		jmp	DeleteObject
0001B646                            ; ===========================================================================
0001B646 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B648 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B64A 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B64C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B64E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B650 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B652 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B654 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B656                            
0001B656 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B65A 040C 0501                  		dc.b 4,	$C, 5, 1
0001B65E 0610 0403                  		dc.b 6,	$10, 4,	3
0001B662 0810 0305                  		dc.b 8,	$10, 3,	5
0001B666                            ; ===========================================================================
0001B666                            
0001B666                            Obj3E_Main:				; XREF: Obj3E_Index
0001B666 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B66E 317C 049D 0002             		move.w	#$49D,2(a0)
0001B674 117C 0004 0001             		move.b	#4,1(a0)
0001B67A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B680 7000                       		moveq	#0,d0
0001B682 1028 0028                  		move.b	$28(a0),d0
0001B686 E548                       		lsl.w	#2,d0
0001B688 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B68C 1159 0024                  		move.b	(a1)+,$24(a0)
0001B690 1159 0019                  		move.b	(a1)+,$19(a0)
0001B694 1159 0018                  		move.b	(a1)+,$18(a0)
0001B698 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B69C 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B6A0 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B6A2 117C 0006 0020             		move.b	#6,$20(a0)
0001B6A8 117C 0008 0021             		move.b	#8,$21(a0)
0001B6AE                            
0001B6AE                            Obj3E_Not02:
0001B6AE 4E75                       		rts	
0001B6B0                            ; ===========================================================================
0001B6B0                            
0001B6B0                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B6B0 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B6B6 6700                       		beq.s	Obj3E_ChkOpened
0001B6B8 323C 002B                  		move.w	#$2B,d1
0001B6BC 343C 0018                  		move.w	#$18,d2
0001B6C0 363C 0018                  		move.w	#$18,d3
0001B6C4 3828 0008                  		move.w	8(a0),d4
0001B6C8 4EF9 0001 0254             		jmp	SolidObject
0001B6CE                            ; ===========================================================================
0001B6CE                            
0001B6CE                            Obj3E_ChkOpened:
0001B6CE 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B6D2 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B6D4 4228 0025                  		clr.b	$25(a0)
0001B6D8 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B6DE 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B6E4                            
0001B6E4                            Obj3E_DoOpen:
0001B6E4 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B6EA 4E75                       		rts	
0001B6EC                            ; ===========================================================================
0001B6EC                            
0001B6EC                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B6EC 323C 0017                  		move.w	#$17,d1
0001B6F0 343C 0008                  		move.w	#8,d2
0001B6F4 363C 0008                  		move.w	#8,d3
0001B6F8 3828 0008                  		move.w	8(a0),d4
0001B6FC 4EB9 0001 0254             		jsr	SolidObject
0001B702 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B708 4EB9 0000 AED2             		jsr	AnimateSprite
0001B70E 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B714 4A28 0025                  		tst.b	$25(a0)
0001B718 6700                       		beq.s	locret_1AC60
0001B71A 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001B71E 6600                       		bne.s	Obj3E_SkipScrPosChk	; GMZ: If not, branch
0001B720 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w	; GMZ: Is screen X pos 2AC0?
0001B726 6600                       		bne.s	locret_1AC60	; GMZ: If not, branch
0001B728                            
0001B728                            Obj3E_SkipScrPosChk:
0001B728 5068 000C                  		addq.w	#8,$C(a0)
0001B72C 117C 000A 0024             		move.b	#$A,$24(a0)
0001B732                            		; move.w	#$3C,$1E(a0)
0001B732 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001B736 6600                       		bne.s	Obj3E_SetNormalTimer	; GMZ: If not, branch
0001B738 317C 0100 001E             		move.w	#$100,$1E(a0)	; GMZ: Timer for "Sonic Got Through"
0001B73E 6000                       		bra.s	Obj3E_LockCtrl	; GMZ
0001B740                            
0001B740                            Obj3E_SetNormalTimer:	; GMZ
0001B740 317C 003C 001E             		move.w	#$3C,$1E(a0)	; GMZ
0001B746                            
0001B746                            Obj3E_LockCtrl:	; GMZ
0001B746 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B74A 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B74E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B754 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001B758 6700                       		beq.s	Obj3E_NoCtrl	; GMZ: If yes, branch
0001B75A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B760 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B762 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B768 6000                       		bra.s	Obj3E_ContinueCode
0001B76A                            
0001B76A                            Obj3E_MoveLeft:
0001B76A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B770                            
0001B770                            Obj3E_NoCtrl:	; GMZ
0001B770                            Obj3E_ContinueCode:
0001B770 4228 0025                  		clr.b	$25(a0)
0001B774 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001B778 6700                       		beq.s	Obj3E_LoadTruthNuke	; GMZ: If yes, branch
0001B77A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B780 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B786                            
0001B786                            locret_1AC60:
0001B786 4E75                       		rts	
0001B788                            
0001B788                            Obj3E_LoadTruthNuke:	; GMZ
0001B788 2448                       		move.l	a0,a2	; GMZ
0001B78A 207C FFFF D000             		move.l	#$FFFFD000,a0
0001B790 4EB9 0000 DEC0             		jsr	DeleteObject	; GMZ: Delete Sonic's object
0001B796 207C FFFF D040             		move.l	#$FFFFD040,a0
0001B79C 4EB9 0000 DEC0             		jsr	DeleteObject	; GMZ: Delete the HUD object
0001B7A2 204A                       		move.l	a2,a0
0001B7A4 303C 00E4                  		move.w	#$E4,d0
0001B7A8 4EB8 13B6                  		jsr	PlaySound_Special	; GMZ: Stop music
0001B7AC 303C 00CD                  		move.w	#$CD,d0
0001B7B0 4EB8 13B0                  		jsr	PlaySound	; GMZ: Play a button sound
0001B7B4 11FC 0001 FFF9             		move.b	#1,($FFFFFFF9).w	; GMZ: Set truth nuke flag
0001B7BA 48E7 FF80                  		movem.l	d0-d7/a0,-(sp)
0001B7BE 4EB8 1F6A                  		jsr	Pal_MakeFlash
0001B7C2 4CDF 01FF                  		movem.l	(sp)+,d0-d7/a0
0001B7C6 31FC 0000 FBC0             		move.w	#$0000,($FFFFFBC0).w	; GMZ: Make BG color black
0001B7CC                            		; lea	(Obj3E_TNScrPos).l,a1
0001B7CC                            		; moveq	#0,d2
0001B7CC                            		; move.b	($FFFFFE10).w,d2
0001B7CC                            		; lsl.l	#3,d2
0001B7CC                            		; move.l	(a1,d2.w),d0
0001B7CC                            		; move.l	4(a1,d2.w),d1
0001B7CC                            		; move.l	d0,($FFFFF700).w
0001B7CC                            		; move.l	d1,($FFFFF704).w
0001B7CC                            		; cmpi.b	#8,d2
0001B7CC                            		; ; beq.s	Obj3E_IsLZ
0001B7CC                            		; ; move.l	#$00000000,($FFFFF704).w	; GMZ: Set camera to the top of the stage
0001B7CC                            		; ; bra.s	Obj3E_IsntLZ
0001B7CC                            		; bne.s	Obj3E_IsntLZ
0001B7CC                            
0001B7CC                            ; Obj3E_IsLZ:
0001B7CC                            		; move.l	#$01600000,($FFFFD00C).w
0001B7CC                            		; move.l	#$01000000,($FFFFF704).w
0001B7CC                            		; move.l	#$20300000,($FFFFF700).w
0001B7CC                            		; move.l	#0,($FFFFF646).w
0001B7CC                            		; move.l	#0,($FFFFF64A).w
0001B7CC                            		; move.b	#0,($FFFFF64E).w
0001B7CC 21FC 2AC0 0000 F700        		move.l	#$2AC00000,($FFFFF700).w	; GMZ
0001B7D4 21FC 0000 0000 F704        		move.l	#$00000000,($FFFFF704).w	; GMZ
0001B7DC                            
0001B7DC                            Obj3E_IsntLZ:
0001B7DC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001B7E2 7000                       		moveq	#0,d0
0001B7E4 7200                       		moveq	#0,d1
0001B7E6 303C 0A40                  		move.w	#$A40,d0
0001B7EA                            
0001B7EA                            Obj3E_ClearChunks:
0001B7EA 22C1                       		move.l	d1,(a1)+
0001B7EC 22C1                       		move.l	d1,(a1)+
0001B7EE 22C1                       		move.l	d1,(a1)+
0001B7F0 22C1                       		move.l	d1,(a1)+	; GMZ: Clear chunks to prevent garbage from appearing
0001B7F2 51C8 FFF6                  		dbf	d0,Obj3E_ClearChunks
0001B7F6 43F9 00FF A400             		lea	($FFA400).l,a1
0001B7FC 303C 0100                  		move.w	#$100,d0
0001B800                            
0001B800                            Obj3E_ClearLayout:
0001B800 22C1                       		move.l	d1,(a1)+	; GMZ: Clear layout to prevent garbage from appearing
0001B802 51C8 FFFC                  		dbf	d0,Obj3E_ClearLayout
0001B806                            
0001B806 4EB8 12DE                  		jsr	ClearScreen
0001B80A 4EB8 15F8                  		jsr	ClearPLC
0001B80E 7023                       		moveq	#$23,d0
0001B810 4EB8 159A                  		jsr	LoadPLC	; GMZ: Load art
0001B814 2448                       		move.l	a0,a2	; Save a0 to a2
0001B816 43F9 00FF B010             		lea	($FFB010).l,a1
0001B81C 41F9 0000 0000             		lea	(Eni_TruthNuke).l,a0
0001B822 303C 0000                  		move.w	#0,d0
0001B826 4EB8 1738                  		jsr	EniDec
0001B82A 43F9 00FF B010             		lea	($FFB010).l,a1
0001B830 203C 4000 0003             		move.l	#$40000003,d0
0001B836 7200                       		moveq	#0,d1
0001B838 3238 F700                  		move.w	($FFFFF700).w,d1
0001B83C 0241 01F8                  		andi.w	#$1F8,d1
0001B840 E189                       		lsl.l	#8,d1
0001B842 ED89                       		lsl.l	#6,d1
0001B844 D081                       		add.l	d1,d0	; GMZ: Get correct plane position
0001B846 7227                       		moveq	#$27,d1
0001B848 741B                       		moveq	#$1B,d2
0001B84A 4EB8 143A                  		jsr	ShowVDPGraphics	; GMZ: Load plane mappings
0001B84E 204A                       		move.l	a2,a0	; GMZ: Recover a0 from a2
0001B850 4E75                       		rts	
0001B852                            ; ===========================================================================
0001B852                            
0001B852                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B852 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001B856 6700                       		beq.s	Obj3E_TNExplosion	; GMZ: If yes, branch
0001B858 7007                       		moveq	#7,d0
0001B85A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B85E 6600                       		bne.s	loc_1ACA0
0001B860 4EB9 0000 E30A             		jsr	SingleObjLoad
0001B866 6600                       		bne.s	loc_1ACA0
0001B868 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B86C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B872 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B878 4EB9 0000 2B32             		jsr	(RandomNumber).l
0001B87E 7200                       		moveq	#0,d1
0001B880 1200                       		move.b	d0,d1
0001B882 E409                       		lsr.b	#2,d1
0001B884 0441 0020                  		subi.w	#$20,d1
0001B888 D369 0008                  		add.w	d1,8(a1)
0001B88C E048                       		lsr.w	#8,d0
0001B88E E608                       		lsr.b	#3,d0
0001B890 D169 000C                  		add.w	d0,$C(a1)
0001B894                            
0001B894                            loc_1ACA0:
0001B894 5368 001E                  		subq.w	#1,$1E(a0)
0001B898 6700                       		beq.s	Obj3E_MakeAnimal
0001B89A 4E75                       		rts	
0001B89C                            
0001B89C                            Obj3E_TNExplosion:
0001B89C 303C 00C1                  		move.w	#$C1,d0
0001B8A0 4EB8 13B0                  		jsr	PlaySound	; GMZ: Play multiple explosion sounds while we wait
0001B8A4 5368 001E                  		subq.w	#1,$1E(a0)
0001B8A8 6700 0000                  		beq.w	Obj3E_TNExplTimerOver	; GMZ: If timer is 0, branch
0001B8AC 4E75                       		rts
0001B8AE                            
0001B8AE                            Obj3E_TNExplTimerOver:	; GMZ
0001B8AE 48E7 FF80                  		movem.l	d0-d7/a0,-(sp)
0001B8B2 4EB8 1EBE                  		jsr	Pal_MakeWhite	; GMZ: Fade out from black
0001B8B6 4CDF 01FF                  		movem.l	(sp)+,d0-d7/a0
0001B8BA 317C 0080 001E             		move.w	#$80,$1E(a0)	; GMZ: Set new timer
0001B8C0 117C 000E 0024             		move.b	#$E,$24(a0)	; GMZ: Set routine to 0E (End Act)
0001B8C6 4E75                       		rts	
0001B8C8                            ; ===========================================================================
0001B8C8                            
0001B8C8                            Obj3E_MakeAnimal:
0001B8C8 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B8CE 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B8D4 117C 0006 001A             		move.b	#6,$1A(a0)
0001B8DA 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B8E0 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B8E6 7C07                       		moveq	#7,d6
0001B8E8 3A3C 009A                  		move.w	#$9A,d5
0001B8EC 78E4                       		moveq	#-$1C,d4
0001B8EE                            
0001B8EE                            Obj3E_Loop:
0001B8EE 4EB9 0000 E30A             		jsr	SingleObjLoad
0001B8F4 6600                       		bne.s	locret_1ACF8
0001B8F6 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B8FA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B900 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B906 D969 0008                  		add.w	d4,8(a1)
0001B90A 5E44                       		addq.w	#7,d4
0001B90C 3345 0036                  		move.w	d5,$36(a1)
0001B910 5145                       		subq.w	#8,d5
0001B912 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B916                            
0001B916                            locret_1ACF8:
0001B916 4E75                       		rts	
0001B918                            ; ===========================================================================
0001B918                            
0001B918                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B918 7007                       		moveq	#7,d0
0001B91A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B91E 6600                       		bne.s	loc_1AD38
0001B920 4EB9 0000 E30A             		jsr	SingleObjLoad
0001B926 6600                       		bne.s	loc_1AD38
0001B928 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B92C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B932 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B938 4EB9 0000 2B32             		jsr	(RandomNumber).l
0001B93E 0240 001F                  		andi.w	#$1F,d0
0001B942 5D40                       		subq.w	#6,d0
0001B944 4A41                       		tst.w	d1
0001B946 6A00                       		bpl.s	loc_1AD2E
0001B948 4440                       		neg.w	d0
0001B94A                            
0001B94A                            loc_1AD2E:
0001B94A D169 0008                  		add.w	d0,8(a1)
0001B94E 337C 000C 0036             		move.w	#$C,$36(a1)
0001B954                            
0001B954                            loc_1AD38:
0001B954 5368 001E                  		subq.w	#1,$1E(a0)
0001B958 6600                       		bne.s	locret_1AD48
0001B95A 5428 0024                  		addq.b	#2,$24(a0)
0001B95E 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B964                            
0001B964                            locret_1AD48:
0001B964 4E75                       		rts	
0001B966                            ; ===========================================================================
0001B966                            
0001B966                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B966 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001B96A 6700                       		beq.s	Obj3E_TNEndAct	; GMZ: If yes, branch
0001B96C 703E                       		moveq	#$3E,d0
0001B96E 7228                       		moveq	#$28,d1
0001B970 7440                       		moveq	#$40,d2
0001B972 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B976                            
0001B976                            Obj3E_FindObj28:
0001B976 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B978 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B97A D2C2                       		adda.w	d2,a1		; next object RAM
0001B97C 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B980                            
0001B980 4EB9 0000 F510             		jsr	GotThroughAct
0001B986 4EF9 0000 DEC0             		jmp	DeleteObject
0001B98C                            
0001B98C                            Obj3E_TNEndAct:
0001B98C 5368 001E                  		subq.w	#1,$1E(a0)	; GMZ: Wait some frames
0001B990 6600                       		bne.s	Obj3E_Obj28Found	; GMZ: If timer isn't 0, branch
0001B992                            
0001B992 4EB9 0000 F510             		jsr	GotThroughAct
0001B998 4EF9 0000 DEC0             		jmp	DeleteObject
0001B99E                            ; ===========================================================================
0001B99E                            
0001B99E                            Obj3E_Obj28Found:
0001B99E 4E75                       		rts	
0001B9A0                            ; ===========================================================================
0001B9A0                            Ani_obj3E:
0001B9A0                            	include "_anim\obj3E.asm"
0001B9A0                            ; ---------------------------------------------------------------------------
0001B9A0                            ; Animation script - prison capsule
0001B9A0                            ; ---------------------------------------------------------------------------
0001B9A0 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B9A2 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B9A4 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B9A8                            		even
0001B9A8                            		even
0001B9A8                            
0001B9A8                            ; ---------------------------------------------------------------------------
0001B9A8                            ; Sprite mappings - prison capsule
0001B9A8                            ; ---------------------------------------------------------------------------
0001B9A8                            Map_obj3E:
0001B9A8                            	include "_maps\obj3E.asm"
0001B9A8                            ; ---------------------------------------------------------------------------
0001B9A8                            ; Sprite mappings - prison capsule
0001B9A8                            ; ---------------------------------------------------------------------------
0001B9A8 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B9AC 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B9B0 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B9B4 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B9B6 07                         byte_1AD82:	dc.b 7
0001B9B7 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B9BC E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B9C1 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B9C6 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B9CB F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B9D0 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B9D5 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B9DA 01                         byte_1ADA6:	dc.b 1
0001B9DB F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B9E0 06                         byte_1ADAC:	dc.b 6
0001B9E1 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B9E6 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B9EB 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B9F0 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B9F5 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B9FA 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B9FF 01                         byte_1ADCB:	dc.b 1
0001BA00 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001BA05 02                         byte_1ADD1:	dc.b 2
0001BA06 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001BA0B 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001BA10 01                         byte_1ADDC:	dc.b 1
0001BA11 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001BA16 00                         byte_1ADE2:	dc.b 0
0001BA18 00                         		even
0001BA18 00                         		even
0001BA18                            
0001BA18                            ; ---------------------------------------------------------------------------
0001BA18                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001BA18                            ; ---------------------------------------------------------------------------
0001BA18                            
0001BA18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA18                            
0001BA18                            
0001BA18                            TouchResponse:				; XREF: Obj01
0001BA18 4E71                       		nop	
0001BA1A 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001BA1E 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001BA22 5142                       		subq.w	#8,d2
0001BA24 7A00                       		moveq	#0,d5
0001BA26 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001BA2A 5705                       		subq.b	#3,d5
0001BA2C 9645                       		sub.w	d5,d3
0001BA2E 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001BA34 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001BA36 0643 000C                  		addi.w	#$C,d3
0001BA3A 7A0A                       		moveq	#$A,d5
0001BA3C                            
0001BA3C                            Touch_NoDuck:
0001BA3C 383C 0010                  		move.w	#$10,d4
0001BA40 DA45                       		add.w	d5,d5
0001BA42 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001BA46 3C3C 005F                  		move.w	#$5F,d6
0001BA4A                            
0001BA4A                            Touch_Loop:
0001BA4A 4A29 0001                  		tst.b	1(a1)
0001BA4E 6A00                       		bpl.s	Touch_NextObj
0001BA50 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001BA54 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001BA56                            
0001BA56                            Touch_NextObj:
0001BA56 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001BA5A 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001BA5E                            
0001BA5E 7000                       		moveq	#0,d0
0001BA60 4E75                       		rts	
0001BA62                            ; ===========================================================================
0001BA62 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001BA64 0C14                       		dc.b   $C, $14
0001BA66 140C                       		dc.b  $14,  $C
0001BA68 0410                       		dc.b	4, $10
0001BA6A 0C12                       		dc.b   $C, $12
0001BA6C 1010                       		dc.b  $10, $10
0001BA6E 0606                       		dc.b	6,   6
0001BA70 180C                       		dc.b  $18,  $C
0001BA72 0C10                       		dc.b   $C, $10
0001BA74 100C                       		dc.b  $10,  $C
0001BA76 0808                       		dc.b	8,   8
0001BA78 1410                       		dc.b  $14, $10
0001BA7A 1408                       		dc.b  $14,   8
0001BA7C 0E0E                       		dc.b   $E,  $E
0001BA7E 1818                       		dc.b  $18, $18
0001BA80 2810                       		dc.b  $28, $10
0001BA82 1018                       		dc.b  $10, $18
0001BA84 0810                       		dc.b	8, $10
0001BA86 2070                       		dc.b  $20, $70
0001BA88 4020                       		dc.b  $40, $20
0001BA8A 8020                       		dc.b  $80, $20
0001BA8C 2020                       		dc.b  $20, $20
0001BA8E 0808                       		dc.b	8,   8
0001BA90 0404                       		dc.b	4,   4
0001BA92 2008                       		dc.b  $20,   8
0001BA94 0C0C                       		dc.b   $C,  $C
0001BA96 0804                       		dc.b	8,   4
0001BA98 1804                       		dc.b  $18,   4
0001BA9A 2804                       		dc.b  $28,   4
0001BA9C 0408                       		dc.b	4,   8
0001BA9E 0418                       		dc.b	4, $18
0001BAA0 0428                       		dc.b	4, $28
0001BAA2 0420                       		dc.b	4, $20
0001BAA4 1818                       		dc.b  $18, $18
0001BAA6 0C18                       		dc.b   $C, $18
0001BAA8 4808                       		dc.b  $48,   8
0001BAAA                            ; ===========================================================================
0001BAAA                            
0001BAAA                            Touch_Height:				; XREF: TouchResponse
0001BAAA 0240 003F                  		andi.w	#$3F,d0
0001BAAE D040                       		add.w	d0,d0
0001BAB0 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001BAB4 7200                       		moveq	#0,d1
0001BAB6 121A                       		move.b	(a2)+,d1
0001BAB8 3029 0008                  		move.w	8(a1),d0
0001BABC 9041                       		sub.w	d1,d0
0001BABE 9042                       		sub.w	d2,d0
0001BAC0 6400                       		bcc.s	loc_1AE98
0001BAC2 D241                       		add.w	d1,d1
0001BAC4 D041                       		add.w	d1,d0
0001BAC6 6500                       		bcs.s	Touch_Width
0001BAC8 6000 FF8C                  		bra.w	Touch_NextObj
0001BACC                            ; ===========================================================================
0001BACC                            
0001BACC                            loc_1AE98:
0001BACC B044                       		cmp.w	d4,d0
0001BACE 6200 FF86                  		bhi.w	Touch_NextObj
0001BAD2                            
0001BAD2                            Touch_Width:
0001BAD2 7200                       		moveq	#0,d1
0001BAD4 121A                       		move.b	(a2)+,d1
0001BAD6 3029 000C                  		move.w	$C(a1),d0
0001BADA 9041                       		sub.w	d1,d0
0001BADC 9043                       		sub.w	d3,d0
0001BADE 6400                       		bcc.s	loc_1AEB6
0001BAE0 D241                       		add.w	d1,d1
0001BAE2 D240                       		add.w	d0,d1
0001BAE4 6500                       		bcs.s	Touch_ChkValue
0001BAE6 6000 FF6E                  		bra.w	Touch_NextObj
0001BAEA                            ; ===========================================================================
0001BAEA                            
0001BAEA                            loc_1AEB6:
0001BAEA B045                       		cmp.w	d5,d0
0001BAEC 6200 FF68                  		bhi.w	Touch_NextObj
0001BAF0                            
0001BAF0                            Touch_ChkValue:
0001BAF0 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001BAF4 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001BAF8 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001BAFC 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001BB00 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001BB04 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001BB06 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001BB0A                            
0001BB0A                            ; touch	response is $40-$7F
0001BB0A                            
0001BB0A 1029 0020                  		move.b	$20(a1),d0
0001BB0E 0200 003F                  		andi.b	#$3F,d0
0001BB12 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001BB16 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001BB18 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001BB1E 6400 0000                  		bcc.w	locret_1AEF2
0001BB22 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BB26                            
0001BB26                            locret_1AEF2:
0001BB26 4E75                       		rts	
0001BB28                            ; ===========================================================================
0001BB28                            
0001BB28                            Touch_Monitor:
0001BB28 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BB2C 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BB2E 3028 000C                  		move.w	$C(a0),d0
0001BB32 0440 0010                  		subi.w	#$10,d0
0001BB36 B069 000C                  		cmp.w	$C(a1),d0
0001BB3A 6500                       		bcs.s	locret_1AF2E
0001BB3C 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BB40 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BB46 4A29 0025                  		tst.b	$25(a1)
0001BB4A 6600                       		bne.s	locret_1AF2E
0001BB4C 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BB50 4E75                       		rts	
0001BB52                            ; ===========================================================================
0001BB52                            
0001BB52                            loc_1AF1E:
0001BB52 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BB58 6600                       		bne.s	locret_1AF2E
0001BB5A 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BB5E 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BB62                            
0001BB62                            locret_1AF2E:
0001BB62 4E75                       		rts	
0001BB64                            ; ===========================================================================
0001BB64                            
0001BB64                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BB64 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BB68 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BB6A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BB70 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BB74                            
0001BB74                            loc_1AF40:
0001BB74 4A29 0021                  		tst.b	$21(a1)
0001BB78 6700                       		beq.s	Touch_KillEnemy
0001BB7A 4468 0010                  		neg.w	$10(a0)
0001BB7E 4468 0012                  		neg.w	$12(a0)
0001BB82 E0E8 0010                  		asr	$10(a0)
0001BB86 E0E8 0012                  		asr	$12(a0)
0001BB8A 137C 0000 0020             		move.b	#0,$20(a1)
0001BB90 5329 0021                  		subq.b	#1,$21(a1)
0001BB94 6600                       		bne.s	locret_1AF68
0001BB96 08E9 0007 0022             		bset	#7,$22(a1)
0001BB9C                            
0001BB9C                            locret_1AF68:
0001BB9C 4E75                       		rts	
0001BB9E                            ; ===========================================================================
0001BB9E                            
0001BB9E                            Touch_KillEnemy:
0001BB9E 08E9 0007 0022             		bset	#7,$22(a1)
0001BBA4 7000                       		moveq	#0,d0
0001BBA6 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BBAA 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BBAE 0C40 0006                  		cmpi.w	#6,d0
0001BBB2 6500                       		bcs.s	loc_1AF82
0001BBB4 7006                       		moveq	#6,d0
0001BBB6                            
0001BBB6                            loc_1AF82:
0001BBB6 3340 003E                  		move.w	d0,$3E(a1)
0001BBBA 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BBBE 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BBC4 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BBC6 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BBCA 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BBD0                            
0001BBD0                            loc_1AF9C:
0001BBD0 6100 0000                  		bsr.w	AddPoints
0001BBD4 7400                       		moveq	#0,d2	; GMZ
0001BBD6 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BBD8 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BBDA                            
0001BBDA                            TouchKE_Explode:
0001BBDA 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BBDE 137C 0000 0024             		move.b	#0,$24(a1)
0001BBE4 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BBE8                            
0001BBE8                            TouchKE_NextExplosion:
0001BBE8 5802                       		addq.b	#4,d2
0001BBEA 4EB9 0000 E30A             		jsr	SingleObjLoad
0001BBF0 6600                       		bne.s	TouchKE_NoExplosion
0001BBF2 336A 0008 0008             		move.w	8(a2),8(a1)
0001BBF8 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BBFE 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BC02                            
0001BC02                            TouchKE_NoExplosion:
0001BC02 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BC04 4A68 0012                  		tst.w	$12(a0)
0001BC08 6B00                       		bmi.s	loc_1AFC2
0001BC0A 3028 000C                  		move.w	$C(a0),d0
0001BC0E B069 000C                  		cmp.w	$C(a1),d0
0001BC12 6400                       		bcc.s	loc_1AFCA
0001BC14 4468 0012                  		neg.w	$12(a0)
0001BC18 4E75                       		rts	
0001BC1A                            ; ===========================================================================
0001BC1A                            
0001BC1A                            loc_1AFC2:
0001BC1A 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BC20 4E75                       		rts	
0001BC22                            ; ===========================================================================
0001BC22                            
0001BC22                            loc_1AFCA:
0001BC22 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BC28 4E75                       		rts	
0001BC2A                            ; ===========================================================================
0001BC2A 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BC32                            ; ===========================================================================
0001BC32                            
0001BC32                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BC32 08E9 0007 0022             		bset	#7,$22(a1)
0001BC38                            
0001BC38                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BC38 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BC3C 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BC3E                            
0001BC3E                            loc_1AFE6:				; XREF: Touch_Hurt
0001BC3E 70FF                       		moveq	#-1,d0
0001BC40 4E75                       		rts	
0001BC42                            ; ===========================================================================
0001BC42                            
0001BC42                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BC42 4E71                       		nop	
0001BC44 4A68 0030                  		tst.w	$30(a0)
0001BC48 66F4                       		bne.s	loc_1AFE6
0001BC4A 2449                       		movea.l	a1,a2
0001BC4C                            
0001BC4C                            ; End of function TouchResponse
0001BC4C                            ; continue straight to HurtSonic
0001BC4C                            
0001BC4C                            ; ---------------------------------------------------------------------------
0001BC4C                            ; Hurting Sonic	subroutine
0001BC4C                            ; ---------------------------------------------------------------------------
0001BC4C                            
0001BC4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC4C                            
0001BC4C                            
0001BC4C                            HurtSonic:
0001BC4C 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BC50 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BC52 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BC56 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BC5A 4EB9 0000 E30A             		jsr	SingleObjLoad
0001BC60 6600                       		bne.s	Hurt_Shield
0001BC62 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BC66 3368 0008 0008             		move.w	8(a0),8(a1)
0001BC6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BC72                            
0001BC72                            Hurt_Shield:
0001BC72 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BC78 117C 0004 0024             		move.b	#4,$24(a0)
0001BC7E 6100 8452                  		bsr.w	Sonic_ResetOnFloor
0001BC82 08E8 0001 0022             		bset	#1,$22(a0)
0001BC88 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BC8E 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BC94 0828 0006 0022             		btst	#6,$22(a0)
0001BC9A 6700                       		beq.s	Hurt_Reverse
0001BC9C 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BCA2 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BCA8                            
0001BCA8                            Hurt_Reverse:
0001BCA8 3028 0008                  		move.w	8(a0),d0
0001BCAC B06A 0008                  		cmp.w	8(a2),d0
0001BCB0 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BCB2 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BCB6                            
0001BCB6                            Hurt_ChkSpikes:
0001BCB6 317C 0000 0014             		move.w	#0,$14(a0)
0001BCBC 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BCC2 317C 0078 0030             		move.w	#$78,$30(a0)
0001BCC8 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BCCC 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BCD0 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BCD2 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BCD6 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BCD8 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BCDC                            
0001BCDC                            Hurt_Sound:
0001BCDC 4EB9 0000 13B6             		jsr	(PlaySound_Special).l
0001BCE2 70FF                       		moveq	#-1,d0
0001BCE4 4E75                       		rts	
0001BCE6                            ; ===========================================================================
0001BCE6                            
0001BCE6                            Hurt_NoRings:
0001BCE6 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BCEA 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BCEE                            ; End of function HurtSonic
0001BCEE                            
0001BCEE                            ; ---------------------------------------------------------------------------
0001BCEE                            ; Subroutine to	kill Sonic
0001BCEE                            ; ---------------------------------------------------------------------------
0001BCEE                            
0001BCEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCEE                            
0001BCEE                            
0001BCEE                            KillSonic:
0001BCEE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BCF2 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BCF4 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BCFA 117C 0006 0024             		move.b	#6,$24(a0)
0001BD00 6100 83D0                  		bsr.w	Sonic_ResetOnFloor
0001BD04 08E8 0001 0022             		bset	#1,$22(a0)
0001BD0A 317C F900 0012             		move.w	#-$700,$12(a0)
0001BD10 317C 0000 0010             		move.w	#0,$10(a0)
0001BD16 317C 0000 0014             		move.w	#0,$14(a0)
0001BD1C 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BD22 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BD28 08E8 0007 0002             		bset	#7,2(a0)
0001BD2E 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BD32 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BD36 6600                       		bne.s	Kill_Sound
0001BD38 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BD3C                            
0001BD3C                            Kill_Sound:
0001BD3C 4EB9 0000 13B6             		jsr	(PlaySound_Special).l
0001BD42                            
0001BD42                            Kill_NoDeath:
0001BD42 70FF                       		moveq	#-1,d0
0001BD44 4E75                       		rts	
0001BD46                            ; End of function KillSonic
0001BD46                            
0001BD46                            
0001BD46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD46                            
0001BD46                            
0001BD46                            Touch_Special:				; XREF: Touch_ChkValue
0001BD46 1229 0020                  		move.b	$20(a1),d1
0001BD4A 0201 003F                  		andi.b	#$3F,d1
0001BD4E 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BD52 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BD54 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BD58 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BD5A 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BD5E 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BD60 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BD64 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BD66 4E75                       		rts	
0001BD68                            ; ===========================================================================
0001BD68                            
0001BD68                            Touch_CatKiller:			; XREF: Touch_Special
0001BD68 6000 FEC8                  		bra.w	loc_1AFDA
0001BD6C                            ; ===========================================================================
0001BD6C                            
0001BD6C                            Touch_Yadrin:				; XREF: Touch_Special
0001BD6C 9A40                       		sub.w	d0,d5
0001BD6E 0C45 0008                  		cmpi.w	#8,d5
0001BD72 6400                       		bcc.s	loc_1B144
0001BD74 3029 0008                  		move.w	8(a1),d0
0001BD78 5940                       		subq.w	#4,d0
0001BD7A 0829 0000 0022             		btst	#0,$22(a1)
0001BD80 6700                       		beq.s	loc_1B130
0001BD82 0440 0010                  		subi.w	#$10,d0
0001BD86                            
0001BD86                            loc_1B130:
0001BD86 9042                       		sub.w	d2,d0
0001BD88 6400                       		bcc.s	loc_1B13C
0001BD8A 0640 0018                  		addi.w	#$18,d0
0001BD8E 6500                       		bcs.s	loc_1B140
0001BD90 6000                       		bra.s	loc_1B144
0001BD92                            ; ===========================================================================
0001BD92                            
0001BD92                            loc_1B13C:
0001BD92 B044                       		cmp.w	d4,d0
0001BD94 6200                       		bhi.s	loc_1B144
0001BD96                            
0001BD96                            loc_1B140:
0001BD96 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BD9A                            ; ===========================================================================
0001BD9A                            
0001BD9A                            loc_1B144:
0001BD9A 6000 FDC8                  		bra.w	Touch_Enemy
0001BD9E                            ; ===========================================================================
0001BD9E                            
0001BD9E                            Touch_D7orE1:				; XREF: Touch_Special
0001BD9E 5229 0021                  		addq.b	#1,$21(a1)
0001BDA2 4E75                       		rts	
0001BDA4                            ; End of function Touch_Special
0001BDA4                            
0001BDA4                            ; ---------------------------------------------------------------------------
0001BDA4                            ; Subroutine to	show the special stage layout
0001BDA4                            ; ---------------------------------------------------------------------------
0001BDA4                            
0001BDA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDA4                            
0001BDA4                            
0001BDA4                            SS_ShowLayout:				; XREF: SpecialStage
0001BDA4 6100 0000                  		bsr.w	SS_AniWallsRings
0001BDA8 6100 0000                  		bsr.w	SS_AniItems
0001BDAC 3F05                       		move.w	d5,-(sp)
0001BDAE 43F8 8000                  		lea	($FFFF8000).w,a1
0001BDB2 1038 F780                  		move.b	($FFFFF780).w,d0
0001BDB6 0200 00FC                  		andi.b	#$FC,d0
0001BDBA 4EB9 0000 2B58             		jsr	(CalcSine).l
0001BDC0 3800                       		move.w	d0,d4
0001BDC2 3A01                       		move.w	d1,d5
0001BDC4 C9FC 0018                  		muls.w	#$18,d4
0001BDC8 CBFC 0018                  		muls.w	#$18,d5
0001BDCC 7400                       		moveq	#0,d2
0001BDCE 3438 F700                  		move.w	($FFFFF700).w,d2
0001BDD2 84FC 0018                  		divu.w	#$18,d2
0001BDD6 4842                       		swap	d2
0001BDD8 4442                       		neg.w	d2
0001BDDA 0642 FF4C                  		addi.w	#-$B4,d2
0001BDDE 7600                       		moveq	#0,d3
0001BDE0 3638 F704                  		move.w	($FFFFF704).w,d3
0001BDE4 86FC 0018                  		divu.w	#$18,d3
0001BDE8 4843                       		swap	d3
0001BDEA 4443                       		neg.w	d3
0001BDEC 0643 FF4C                  		addi.w	#-$B4,d3
0001BDF0 3E3C 000F                  		move.w	#$F,d7
0001BDF4                            
0001BDF4                            loc_1B19E:
0001BDF4 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BDF8 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BDFC 4440                       		neg.w	d0
0001BDFE C3C2                       		muls.w	d2,d1
0001BE00 C1C3                       		muls.w	d3,d0
0001BE02 2C00                       		move.l	d0,d6
0001BE04 DC81                       		add.l	d1,d6
0001BE06 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BE0A C1C2                       		muls.w	d2,d0
0001BE0C C3C3                       		muls.w	d3,d1
0001BE0E D280                       		add.l	d0,d1
0001BE10 2406                       		move.l	d6,d2
0001BE12 3C3C 000F                  		move.w	#$F,d6
0001BE16                            
0001BE16                            loc_1B1C0:
0001BE16 2002                       		move.l	d2,d0
0001BE18 E080                       		asr.l	#8,d0
0001BE1A 32C0                       		move.w	d0,(a1)+
0001BE1C 2001                       		move.l	d1,d0
0001BE1E E080                       		asr.l	#8,d0
0001BE20 32C0                       		move.w	d0,(a1)+
0001BE22 D485                       		add.l	d5,d2
0001BE24 D284                       		add.l	d4,d1
0001BE26 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BE2A                            
0001BE2A 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BE2E 0643 0018                  		addi.w	#$18,d3
0001BE32 51CF FFC0                  		dbf	d7,loc_1B19E
0001BE36                            
0001BE36 3A1F                       		move.w	(sp)+,d5
0001BE38 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BE3E 7000                       		moveq	#0,d0
0001BE40 3038 F704                  		move.w	($FFFFF704).w,d0
0001BE44 80FC 0018                  		divu.w	#$18,d0
0001BE48 C0FC 0080                  		mulu.w	#$80,d0
0001BE4C D1C0                       		adda.l	d0,a0
0001BE4E 7000                       		moveq	#0,d0
0001BE50 3038 F700                  		move.w	($FFFFF700).w,d0
0001BE54 80FC 0018                  		divu.w	#$18,d0
0001BE58 D0C0                       		adda.w	d0,a0
0001BE5A 49F8 8000                  		lea	($FFFF8000).w,a4
0001BE5E 3E3C 000F                  		move.w	#$F,d7
0001BE62                            
0001BE62                            loc_1B20C:
0001BE62 3C3C 000F                  		move.w	#$F,d6
0001BE66                            
0001BE66                            loc_1B210:
0001BE66 7000                       		moveq	#0,d0
0001BE68 1018                       		move.b	(a0)+,d0
0001BE6A 6700                       		beq.s	loc_1B268
0001BE6C 0C00 004E                  		cmpi.b	#$4E,d0
0001BE70 6200                       		bhi.s	loc_1B268
0001BE72 3614                       		move.w	(a4),d3
0001BE74 0643 0120                  		addi.w	#$120,d3
0001BE78 0C43 0070                  		cmpi.w	#$70,d3
0001BE7C 6500                       		bcs.s	loc_1B268
0001BE7E 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BE82 6400                       		bcc.s	loc_1B268
0001BE84 342C 0002                  		move.w	2(a4),d2
0001BE88 0642 00F0                  		addi.w	#$F0,d2
0001BE8C 0C42 0070                  		cmpi.w	#$70,d2
0001BE90 6500                       		bcs.s	loc_1B268
0001BE92 0C42 0170                  		cmpi.w	#$170,d2
0001BE96 6400                       		bcc.s	loc_1B268
0001BE98 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BE9E E748                       		lsl.w	#3,d0
0001BEA0 4BF5 0000                  		lea	(a5,d0.w),a5
0001BEA4 225D                       		movea.l	(a5)+,a1
0001BEA6 321D                       		move.w	(a5)+,d1
0001BEA8 D241                       		add.w	d1,d1
0001BEAA D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BEAE 365D                       		movea.w	(a5)+,a3
0001BEB0 7200                       		moveq	#0,d1
0001BEB2 1219                       		move.b	(a1)+,d1
0001BEB4 5301                       		subq.b	#1,d1
0001BEB6 6B00                       		bmi.s	loc_1B268
0001BEB8 4EB9 0000 DFE2             		jsr	sub_D762
0001BEBE                            
0001BEBE                            loc_1B268:
0001BEBE 584C                       		addq.w	#4,a4
0001BEC0 51CE FFA4                  		dbf	d6,loc_1B210
0001BEC4                            
0001BEC4 41E8 0070                  		lea	$70(a0),a0
0001BEC8 51CF FF98                  		dbf	d7,loc_1B20C
0001BECC                            
0001BECC 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BED0 0C05 0050                  		cmpi.b	#$50,d5
0001BED4 6700                       		beq.s	loc_1B288
0001BED6 24BC 0000 0000             		move.l	#0,(a2)
0001BEDC 4E75                       		rts	
0001BEDE                            ; ===========================================================================
0001BEDE                            
0001BEDE                            loc_1B288:
0001BEDE 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BEE4 4E75                       		rts	
0001BEE6                            ; End of function SS_ShowLayout
0001BEE6                            
0001BEE6                            ; ---------------------------------------------------------------------------
0001BEE6                            ; Subroutine to	animate	walls and rings	in the special stage
0001BEE6                            ; ---------------------------------------------------------------------------
0001BEE6                            
0001BEE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEE6                            
0001BEE6                            
0001BEE6                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BEE6 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BEEC 7000                       		moveq	#0,d0
0001BEEE 1038 F780                  		move.b	($FFFFF780).w,d0
0001BEF2 E408                       		lsr.b	#2,d0
0001BEF4 0240 000F                  		andi.w	#$F,d0
0001BEF8 7223                       		moveq	#$23,d1
0001BEFA                            
0001BEFA                            loc_1B2A4:
0001BEFA 3280                       		move.w	d0,(a1)
0001BEFC 5049                       		addq.w	#8,a1
0001BEFE 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BF02                            
0001BF02 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BF08 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BF0C 6A00                       		bpl.s	loc_1B2C8
0001BF0E 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BF14 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BF18 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BF1E                            
0001BF1E                            loc_1B2C8:
0001BF1E 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BF24 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BF28 6A00                       		bpl.s	loc_1B2E4
0001BF2A 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BF30 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BF34 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BF3A                            
0001BF3A                            loc_1B2E4:
0001BF3A 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BF3E 1340 0138                  		move.b	d0,$138(a1)
0001BF42 1340 0160                  		move.b	d0,$160(a1)
0001BF46 1340 0148                  		move.b	d0,$148(a1)
0001BF4A 1340 0150                  		move.b	d0,$150(a1)
0001BF4E 1340 01D8                  		move.b	d0,$1D8(a1)
0001BF52 1340 01E0                  		move.b	d0,$1E0(a1)
0001BF56 1340 01E8                  		move.b	d0,$1E8(a1)
0001BF5A 1340 01F0                  		move.b	d0,$1F0(a1)
0001BF5E 1340 01F8                  		move.b	d0,$1F8(a1)
0001BF62 1340 0200                  		move.b	d0,$200(a1)
0001BF66 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BF6A 6A00                       		bpl.s	loc_1B326
0001BF6C 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BF72 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BF76 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BF7C                            
0001BF7C                            loc_1B326:
0001BF7C 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BF80 1340 0168                  		move.b	d0,$168(a1)
0001BF84 1340 0170                  		move.b	d0,$170(a1)
0001BF88 1340 0178                  		move.b	d0,$178(a1)
0001BF8C 1340 0180                  		move.b	d0,$180(a1)
0001BF90 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BF94 6A00                       		bpl.s	loc_1B350
0001BF96 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BF9C 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BFA0 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BFA6                            
0001BFA6                            loc_1B350:
0001BFA6 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BFAC 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BFB2 7000                       		moveq	#0,d0
0001BFB4 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BFB8 D040                       		add.w	d0,d0
0001BFBA 41F0 0000                  		lea	(a0,d0.w),a0
0001BFBE 3290                       		move.w	(a0),(a1)
0001BFC0 3368 0002 0008             		move.w	2(a0),8(a1)
0001BFC6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BFCC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BFD2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BFD8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BFDE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BFE4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BFEA D0FC 0020                  		adda.w	#$20,a0
0001BFEE D2FC 0048                  		adda.w	#$48,a1
0001BFF2 3290                       		move.w	(a0),(a1)
0001BFF4 3368 0002 0008             		move.w	2(a0),8(a1)
0001BFFA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C000 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C006 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C00C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C012 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C018 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C01E D0FC 0020                  		adda.w	#$20,a0
0001C022 D2FC 0048                  		adda.w	#$48,a1
0001C026 3290                       		move.w	(a0),(a1)
0001C028 3368 0002 0008             		move.w	2(a0),8(a1)
0001C02E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C034 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C03A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C040 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C046 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C04C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C052 D0FC 0020                  		adda.w	#$20,a0
0001C056 D2FC 0048                  		adda.w	#$48,a1
0001C05A 3290                       		move.w	(a0),(a1)
0001C05C 3368 0002 0008             		move.w	2(a0),8(a1)
0001C062 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C068 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C06E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C074 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C07A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C080 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C086 D0FC 0020                  		adda.w	#$20,a0
0001C08A D2FC 0048                  		adda.w	#$48,a1
0001C08E 4E75                       		rts	
0001C090                            ; End of function SS_AniWallsRings
0001C090                            
0001C090                            ; ===========================================================================
0001C090 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C0A0 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C0B0 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C0C0 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C0D0 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C0E0 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C0F0 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C100 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C110                            ; ---------------------------------------------------------------------------
0001C110                            ; Subroutine to	remove items when you collect them in the special stage
0001C110                            ; ---------------------------------------------------------------------------
0001C110                            
0001C110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C110                            
0001C110                            
0001C110                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C110 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C116 303C 001F                  		move.w	#$1F,d0
0001C11A                            
0001C11A                            loc_1B4C4:
0001C11A 4A12                       		tst.b	(a2)
0001C11C 6700                       		beq.s	locret_1B4CE
0001C11E 504A                       		addq.w	#8,a2
0001C120 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C124                            
0001C124                            locret_1B4CE:
0001C124 4E75                       		rts	
0001C126                            ; End of function SS_RemoveCollectedItem
0001C126                            
0001C126                            ; ---------------------------------------------------------------------------
0001C126                            ; Subroutine to	animate	special	stage items when you touch them
0001C126                            ; ---------------------------------------------------------------------------
0001C126                            
0001C126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C126                            
0001C126                            
0001C126                            SS_AniItems:				; XREF: SS_ShowLayout
0001C126 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C12C 3E3C 001F                  		move.w	#$1F,d7
0001C130                            
0001C130                            loc_1B4DA:
0001C130 7000                       		moveq	#0,d0
0001C132 1010                       		move.b	(a0),d0
0001C134 6700                       		beq.s	loc_1B4E8
0001C136 E548                       		lsl.w	#2,d0
0001C138 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C13C 4E91                       		jsr	(a1)
0001C13E                            
0001C13E                            loc_1B4E8:
0001C13E 5048                       		addq.w	#8,a0
0001C140                            
0001C140                            loc_1B4EA:
0001C140 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C144                            
0001C144 4E75                       		rts	
0001C146                            ; End of function SS_AniItems
0001C146                            
0001C146                            ; ===========================================================================
0001C146 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C14A 0000 0000                  		dc.l SS_AniBumper
0001C14E 0000 0000                  		dc.l SS_Ani1Up
0001C152 0000 0000                  		dc.l SS_AniReverse
0001C156 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C15A 0000 0000                  		dc.l SS_AniGlassBlock
0001C15E                            ; ===========================================================================
0001C15E                            
0001C15E                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C15E 5328 0002                  		subq.b	#1,2(a0)
0001C162 6A00                       		bpl.s	locret_1B530
0001C164 117C 0005 0002             		move.b	#5,2(a0)
0001C16A 7000                       		moveq	#0,d0
0001C16C 1028 0003                  		move.b	3(a0),d0
0001C170 5228 0003                  		addq.b	#1,3(a0)
0001C174 2268 0004                  		movea.l	4(a0),a1
0001C178 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C17C 1280                       		move.b	d0,(a1)
0001C17E 6600                       		bne.s	locret_1B530
0001C180 4290                       		clr.l	(a0)
0001C182 42A8 0004                  		clr.l	4(a0)
0001C186                            
0001C186                            locret_1B530:
0001C186 4E75                       		rts	
0001C188                            ; ===========================================================================
0001C188 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C18E                            ; ===========================================================================
0001C18E                            
0001C18E                            SS_AniBumper:				; XREF: SS_AniIndex
0001C18E 5328 0002                  		subq.b	#1,2(a0)
0001C192 6A00                       		bpl.s	locret_1B566
0001C194 117C 0007 0002             		move.b	#7,2(a0)
0001C19A 7000                       		moveq	#0,d0
0001C19C 1028 0003                  		move.b	3(a0),d0
0001C1A0 5228 0003                  		addq.b	#1,3(a0)
0001C1A4 2268 0004                  		movea.l	4(a0),a1
0001C1A8 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C1AC 6600                       		bne.s	loc_1B564
0001C1AE 4290                       		clr.l	(a0)
0001C1B0 42A8 0004                  		clr.l	4(a0)
0001C1B4 12BC 0025                  		move.b	#$25,(a1)
0001C1B8 4E75                       		rts	
0001C1BA                            ; ===========================================================================
0001C1BA                            
0001C1BA                            loc_1B564:
0001C1BA 1280                       		move.b	d0,(a1)
0001C1BC                            
0001C1BC                            locret_1B566:
0001C1BC 4E75                       		rts	
0001C1BE                            ; ===========================================================================
0001C1BE 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C1C4                            ; ===========================================================================
0001C1C4                            
0001C1C4                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C1C4 5328 0002                  		subq.b	#1,2(a0)
0001C1C8 6A00                       		bpl.s	locret_1B596
0001C1CA 117C 0005 0002             		move.b	#5,2(a0)
0001C1D0 7000                       		moveq	#0,d0
0001C1D2 1028 0003                  		move.b	3(a0),d0
0001C1D6 5228 0003                  		addq.b	#1,3(a0)
0001C1DA 2268 0004                  		movea.l	4(a0),a1
0001C1DE 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C1E2 1280                       		move.b	d0,(a1)
0001C1E4 6600                       		bne.s	locret_1B596
0001C1E6 4290                       		clr.l	(a0)
0001C1E8 42A8 0004                  		clr.l	4(a0)
0001C1EC                            
0001C1EC                            locret_1B596:
0001C1EC 4E75                       		rts	
0001C1EE                            ; ===========================================================================
0001C1EE 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C1F4                            ; ===========================================================================
0001C1F4                            
0001C1F4                            SS_AniReverse:				; XREF: SS_AniIndex
0001C1F4 5328 0002                  		subq.b	#1,2(a0)
0001C1F8 6A00                       		bpl.s	locret_1B5CC
0001C1FA 117C 0007 0002             		move.b	#7,2(a0)
0001C200 7000                       		moveq	#0,d0
0001C202 1028 0003                  		move.b	3(a0),d0
0001C206 5228 0003                  		addq.b	#1,3(a0)
0001C20A 2268 0004                  		movea.l	4(a0),a1
0001C20E 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C212 6600                       		bne.s	loc_1B5CA
0001C214 4290                       		clr.l	(a0)
0001C216 42A8 0004                  		clr.l	4(a0)
0001C21A 12BC 002B                  		move.b	#$2B,(a1)
0001C21E 4E75                       		rts	
0001C220                            ; ===========================================================================
0001C220                            
0001C220                            loc_1B5CA:
0001C220 1280                       		move.b	d0,(a1)
0001C222                            
0001C222                            locret_1B5CC:
0001C222 4E75                       		rts	
0001C224                            ; ===========================================================================
0001C224 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C22A                            ; ===========================================================================
0001C22A                            
0001C22A                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C22A 5328 0002                  		subq.b	#1,2(a0)
0001C22E 6A00                       		bpl.s	locret_1B60C
0001C230 117C 0005 0002             		move.b	#5,2(a0)
0001C236 7000                       		moveq	#0,d0
0001C238 1028 0003                  		move.b	3(a0),d0
0001C23C 5228 0003                  		addq.b	#1,3(a0)
0001C240 2268 0004                  		movea.l	4(a0),a1
0001C244 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C248 1280                       		move.b	d0,(a1)
0001C24A 6600                       		bne.s	locret_1B60C
0001C24C 4290                       		clr.l	(a0)
0001C24E 42A8 0004                  		clr.l	4(a0)
0001C252 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C258 303C 00A8                  		move.w	#$A8,d0
0001C25C 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C262                            
0001C262                            locret_1B60C:
0001C262 4E75                       		rts	
0001C264                            ; ===========================================================================
0001C264 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C26A                            ; ===========================================================================
0001C26A                            
0001C26A                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C26A 5328 0002                  		subq.b	#1,2(a0)
0001C26E 6A00                       		bpl.s	locret_1B640
0001C270 117C 0001 0002             		move.b	#1,2(a0)
0001C276 7000                       		moveq	#0,d0
0001C278 1028 0003                  		move.b	3(a0),d0
0001C27C 5228 0003                  		addq.b	#1,3(a0)
0001C280 2268 0004                  		movea.l	4(a0),a1
0001C284 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C288 1280                       		move.b	d0,(a1)
0001C28A 6600                       		bne.s	locret_1B640
0001C28C 12A8 0004                  		move.b	4(a0),(a1)
0001C290 4290                       		clr.l	(a0)
0001C292 42A8 0004                  		clr.l	4(a0)
0001C296                            
0001C296                            locret_1B640:
0001C296 4E75                       		rts	
0001C298                            ; ===========================================================================
0001C298 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C2A2                            ; ---------------------------------------------------------------------------
0001C2A2                            ; Special stage	layout pointers
0001C2A2                            ; ---------------------------------------------------------------------------
0001C2A2                            SS_LayoutIndex:
0001C2A2                            	include "_inc\Special stage layout pointers.asm"
0001C2A2                            ; ---------------------------------------------------------------------------
0001C2A2                            ; Special stage	layout pointers
0001C2A2                            ; ---------------------------------------------------------------------------
0001C2A2 0000 0000                  	dc.l SS_1
0001C2A6 0000 0000                  	dc.l SS_2
0001C2AA 0000 0000                  	dc.l SS_3
0001C2AE 0000 0000                  	dc.l SS_4
0001C2B2 0000 0000                  	dc.l SS_5
0001C2B6 0000 0000                  	dc.l SS_6
0001C2BA                            	even
0001C2BA                            	even
0001C2BA                            
0001C2BA                            ; ---------------------------------------------------------------------------
0001C2BA                            ; Special stage	start locations
0001C2BA                            ; ---------------------------------------------------------------------------
0001C2BA                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C2D2                            		even
0001C2D2                            
0001C2D2                            ; ---------------------------------------------------------------------------
0001C2D2                            ; Subroutine to	load special stage layout
0001C2D2                            ; ---------------------------------------------------------------------------
0001C2D2                            
0001C2D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2D2                            
0001C2D2                            
0001C2D2                            SS_Load:				; XREF: SpecialStage
0001C2D2 7000                       		moveq	#0,d0
0001C2D4 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C2D8 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C2DC 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C2E2 6500                       		bcs.s	SS_ChkEmldNum
0001C2E4 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C2EA                            
0001C2EA                            SS_ChkEmldNum:
0001C2EA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C2F0 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C2F2 7200                       		moveq	#0,d1
0001C2F4 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C2F8 5301                       		subq.b	#1,d1
0001C2FA 6500                       		bcs.s	SS_LoadData
0001C2FC 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C300                            
0001C300                            SS_ChkEmldLoop:	
0001C300 B033 1000                  		cmp.b	(a3,d1.w),d0
0001C304 6600                       		bne.s	SS_ChkEmldRepeat
0001C306 60CA                       		bra.s	SS_Load
0001C308                            ; ===========================================================================
0001C308                            
0001C308                            SS_ChkEmldRepeat:
0001C308 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C30C                            
0001C30C                            SS_LoadData:
0001C30C E548                       		lsl.w	#2,d0
0001C30E 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C312 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C316 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C31A 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C31E 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C324 303C 0000                  		move.w	#0,d0
0001C328 4EB9 0000 1738             		jsr	(EniDec).l
0001C32E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C334 303C 0FFF                  		move.w	#$FFF,d0
0001C338                            
0001C338                            SS_ClrRAM3:
0001C338 4299                       		clr.l	(a1)+
0001C33A 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C33E                            
0001C33E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C344 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C34A 723F                       		moveq	#$3F,d1
0001C34C                            
0001C34C                            loc_1B6F6:
0001C34C 743F                       		moveq	#$3F,d2
0001C34E                            
0001C34E                            loc_1B6F8:
0001C34E 12D8                       		move.b	(a0)+,(a1)+
0001C350 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C354                            
0001C354 43E9 0040                  		lea	$40(a1),a1
0001C358 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C35C                            
0001C35C 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C362 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C368 724D                       		moveq	#$4D,d1
0001C36A                            
0001C36A                            loc_1B714:
0001C36A 22D8                       		move.l	(a0)+,(a1)+
0001C36C 32FC 0000                  		move.w	#0,(a1)+
0001C370 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C376 32D8                       		move.w	(a0)+,(a1)+
0001C378 51C9 FFF0                  		dbf	d1,loc_1B714
0001C37C                            
0001C37C 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C382 323C 003F                  		move.w	#$3F,d1
0001C386                            
0001C386                            loc_1B730:
0001C386                            
0001C386 4299                       		clr.l	(a1)+
0001C388 51C9 FFFC                  		dbf	d1,loc_1B730
0001C38C                            
0001C38C 4E75                       		rts	
0001C38E                            ; End of function SS_Load
0001C38E                            
0001C38E                            ; ===========================================================================
0001C38E                            ; ---------------------------------------------------------------------------
0001C38E                            ; Special stage	mappings and VRAM pointers
0001C38E                            ; ---------------------------------------------------------------------------
0001C38E                            SS_MapIndex:
0001C38E                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C38E                            ; ---------------------------------------------------------------------------
0001C38E                            ; Special stage	mappings and VRAM pointers
0001C38E                            ; ---------------------------------------------------------------------------
0001C38E 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C392 0142                       	dc.w $142		; VRAM setting
0001C394 0000 0000                  	dc.l Map_SSWalls
0001C398 0142                       	dc.w $142
0001C39A 0000 0000                  	dc.l Map_SSWalls
0001C39E 0142                       	dc.w $142
0001C3A0 0000 0000                  	dc.l Map_SSWalls
0001C3A4 0142                       	dc.w $142
0001C3A6 0000 0000                  	dc.l Map_SSWalls
0001C3AA 0142                       	dc.w $142
0001C3AC 0000 0000                  	dc.l Map_SSWalls
0001C3B0 0142                       	dc.w $142
0001C3B2 0000 0000                  	dc.l Map_SSWalls
0001C3B6 0142                       	dc.w $142
0001C3B8 0000 0000                  	dc.l Map_SSWalls
0001C3BC 0142                       	dc.w $142
0001C3BE 0000 0000                  	dc.l Map_SSWalls
0001C3C2 0142                       	dc.w $142
0001C3C4 0000 0000                  	dc.l Map_SSWalls
0001C3C8 2142                       	dc.w $2142
0001C3CA 0000 0000                  	dc.l Map_SSWalls
0001C3CE 2142                       	dc.w $2142
0001C3D0 0000 0000                  	dc.l Map_SSWalls
0001C3D4 2142                       	dc.w $2142
0001C3D6 0000 0000                  	dc.l Map_SSWalls
0001C3DA 2142                       	dc.w $2142
0001C3DC 0000 0000                  	dc.l Map_SSWalls
0001C3E0 2142                       	dc.w $2142
0001C3E2 0000 0000                  	dc.l Map_SSWalls
0001C3E6 2142                       	dc.w $2142
0001C3E8 0000 0000                  	dc.l Map_SSWalls
0001C3EC 2142                       	dc.w $2142
0001C3EE 0000 0000                  	dc.l Map_SSWalls
0001C3F2 2142                       	dc.w $2142
0001C3F4 0000 0000                  	dc.l Map_SSWalls
0001C3F8 2142                       	dc.w $2142
0001C3FA 0000 0000                  	dc.l Map_SSWalls
0001C3FE 4142                       	dc.w $4142
0001C400 0000 0000                  	dc.l Map_SSWalls
0001C404 4142                       	dc.w $4142
0001C406 0000 0000                  	dc.l Map_SSWalls
0001C40A 4142                       	dc.w $4142
0001C40C 0000 0000                  	dc.l Map_SSWalls
0001C410 4142                       	dc.w $4142
0001C412 0000 0000                  	dc.l Map_SSWalls
0001C416 4142                       	dc.w $4142
0001C418 0000 0000                  	dc.l Map_SSWalls
0001C41C 4142                       	dc.w $4142
0001C41E 0000 0000                  	dc.l Map_SSWalls
0001C422 4142                       	dc.w $4142
0001C424 0000 0000                  	dc.l Map_SSWalls
0001C428 4142                       	dc.w $4142
0001C42A 0000 0000                  	dc.l Map_SSWalls
0001C42E 4142                       	dc.w $4142
0001C430 0000 0000                  	dc.l Map_SSWalls
0001C434 6142                       	dc.w $6142
0001C436 0000 0000                  	dc.l Map_SSWalls
0001C43A 6142                       	dc.w $6142
0001C43C 0000 0000                  	dc.l Map_SSWalls
0001C440 6142                       	dc.w $6142
0001C442 0000 0000                  	dc.l Map_SSWalls
0001C446 6142                       	dc.w $6142
0001C448 0000 0000                  	dc.l Map_SSWalls
0001C44C 6142                       	dc.w $6142
0001C44E 0000 0000                  	dc.l Map_SSWalls
0001C452 6142                       	dc.w $6142
0001C454 0000 0000                  	dc.l Map_SSWalls
0001C458 6142                       	dc.w $6142
0001C45A 0000 0000                  	dc.l Map_SSWalls
0001C45E 6142                       	dc.w $6142
0001C460 0000 0000                  	dc.l Map_SSWalls
0001C464 6142                       	dc.w $6142
0001C466 0000 F378                  	dc.l Map_obj47
0001C46A 023B                       	dc.w $23B
0001C46C 0000 0000                  	dc.l Map_SS_R
0001C470 0570                       	dc.w $570
0001C472 0000 0000                  	dc.l Map_SS_R
0001C476 0251                       	dc.w $251
0001C478 0000 0000                  	dc.l Map_SS_R
0001C47C 0370                       	dc.w $370
0001C47E 0000 0000                  	dc.l Map_SS_Up
0001C482 0263                       	dc.w $263
0001C484 0000 0000                  	dc.l Map_SS_Down
0001C488 0263                       	dc.w $263
0001C48A 0000 0000                  	dc.l Map_SS_R
0001C48E 22F0                       	dc.w $22F0
0001C490 0000 0000                  	dc.l Map_SS_Glass
0001C494 0470                       	dc.w $470
0001C496 0000 0000                  	dc.l Map_SS_Glass
0001C49A 05F0                       	dc.w $5F0
0001C49C 0000 0000                  	dc.l Map_SS_Glass
0001C4A0 65F0                       	dc.w $65F0
0001C4A2 0000 0000                  	dc.l Map_SS_Glass
0001C4A6 25F0                       	dc.w $25F0
0001C4A8 0000 0000                  	dc.l Map_SS_Glass
0001C4AC 45F0                       	dc.w $45F0
0001C4AE 0000 0000                  	dc.l Map_SS_R
0001C4B2 02F0                       	dc.w $2F0
0001C4B4 0100 F378                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C4B8 023B                       	dc.w $23B
0001C4BA 0200 F378                  	dc.l Map_obj47+$2000000
0001C4BE 023B                       	dc.w $23B
0001C4C0 0000 0000                  	dc.l Map_SS_R
0001C4C4 0797                       	dc.w $797
0001C4C6 0000 0000                  	dc.l Map_SS_R
0001C4CA 07A0                       	dc.w $7A0
0001C4CC 0000 0000                  	dc.l Map_SS_R
0001C4D0 07A9                       	dc.w $7A9
0001C4D2 0000 0000                  	dc.l Map_SS_R
0001C4D6 0797                       	dc.w $797
0001C4D8 0000 0000                  	dc.l Map_SS_R
0001C4DC 07A0                       	dc.w $7A0
0001C4DE 0000 0000                  	dc.l Map_SS_R
0001C4E2 07A9                       	dc.w $7A9
0001C4E4 0000 A670                  	dc.l Map_obj25
0001C4E8 27B2                       	dc.w $27B2
0001C4EA 0000 0000                  	dc.l Map_SS_Chaos3
0001C4EE 0770                       	dc.w $770
0001C4F0 0000 0000                  	dc.l Map_SS_Chaos3
0001C4F4 2770                       	dc.w $2770
0001C4F6 0000 0000                  	dc.l Map_SS_Chaos3
0001C4FA 4770                       	dc.w $4770
0001C4FC 0000 0000                  	dc.l Map_SS_Chaos3
0001C500 6770                       	dc.w $6770
0001C502 0000 0000                  	dc.l Map_SS_Chaos1
0001C506 0770                       	dc.w $770
0001C508 0000 0000                  	dc.l Map_SS_Chaos2
0001C50C 0770                       	dc.w $770
0001C50E 0000 0000                  	dc.l Map_SS_R
0001C512 04F0                       	dc.w $4F0
0001C514 0400 A670                  	dc.l Map_obj25+$4000000
0001C518 27B2                       	dc.w $27B2
0001C51A 0500 A670                  	dc.l Map_obj25+$5000000
0001C51E 27B2                       	dc.w $27B2
0001C520 0600 A670                  	dc.l Map_obj25+$6000000
0001C524 27B2                       	dc.w $27B2
0001C526 0700 A670                  	dc.l Map_obj25+$7000000
0001C52A 27B2                       	dc.w $27B2
0001C52C 0000 0000                  	dc.l Map_SS_Glass
0001C530 23F0                       	dc.w $23F0
0001C532 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C536 23F0                       	dc.w $23F0
0001C538 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C53C 23F0                       	dc.w $23F0
0001C53E 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C542 23F0                       	dc.w $23F0
0001C544 0000 0000                  	dc.l Map_SS_R+$2000000
0001C548 04F0                       	dc.w $4F0
0001C54A 0000 0000                  	dc.l Map_SS_Glass
0001C54E 05F0                       	dc.w $5F0
0001C550 0000 0000                  	dc.l Map_SS_Glass
0001C554 65F0                       	dc.w $65F0
0001C556 0000 0000                  	dc.l Map_SS_Glass
0001C55A 25F0                       	dc.w $25F0
0001C55C 0000 0000                  	dc.l Map_SS_Glass
0001C560 45F0                       	dc.w $45F0
0001C560 45F0                       	dc.w $45F0
0001C562                            
0001C562                            ; ---------------------------------------------------------------------------
0001C562                            ; Sprite mappings - special stage "R" block
0001C562                            ; ---------------------------------------------------------------------------
0001C562                            Map_SS_R:
0001C562                            	include "_maps\SSRblock.asm"
0001C562                            ; ---------------------------------------------------------------------------
0001C562                            ; Sprite mappings - special stage "R" block
0001C562                            ; ---------------------------------------------------------------------------
0001C562 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C566 0000                       		dc.w byte_1B91E-Map_SS_R
0001C568 01                         byte_1B912:	dc.b 1
0001C569 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C56E 01                         byte_1B918:	dc.b 1
0001C56F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C574 00                         byte_1B91E:	dc.b 0
0001C576 00                         		even
0001C576 00                         		even
0001C576                            
0001C576                            ; ---------------------------------------------------------------------------
0001C576                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C576                            ; ---------------------------------------------------------------------------
0001C576                            Map_SS_Glass:
0001C576                            	include "_maps\SSglassblock.asm"
0001C576                            ; ---------------------------------------------------------------------------
0001C576                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C576                            ; ---------------------------------------------------------------------------
0001C576 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C57A 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C57E 01                         byte_1B928:	dc.b 1
0001C57F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C584 01                         byte_1B92E:	dc.b 1
0001C585 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C58A 01                         byte_1B934:	dc.b 1
0001C58B F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C590 01                         byte_1B93A:	dc.b 1
0001C591 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C596                            		even
0001C596                            		even
0001C596                            
0001C596                            ; ---------------------------------------------------------------------------
0001C596                            ; Sprite mappings - special stage "UP" block
0001C596                            ; ---------------------------------------------------------------------------
0001C596                            Map_SS_Up:
0001C596                            	include "_maps\SSUPblock.asm"
0001C596                            ; ---------------------------------------------------------------------------
0001C596                            ; Sprite mappings - special stage "UP" block
0001C596                            ; ---------------------------------------------------------------------------
0001C596 0000                       		dc.w byte_1B944-Map_SS_Up
0001C598 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C59A 01                         byte_1B944:	dc.b 1
0001C59B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C5A0 01                         byte_1B94A:	dc.b 1
0001C5A1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C5A6                            		even
0001C5A6                            		even
0001C5A6                            
0001C5A6                            ; ---------------------------------------------------------------------------
0001C5A6                            ; Sprite mappings - special stage "DOWN" block
0001C5A6                            ; ---------------------------------------------------------------------------
0001C5A6                            Map_SS_Down:
0001C5A6                            	include "_maps\SSDOWNblock.asm"
0001C5A6                            ; ---------------------------------------------------------------------------
0001C5A6                            ; Sprite mappings - special stage "DOWN" block
0001C5A6                            ; ---------------------------------------------------------------------------
0001C5A6 0000                       		dc.w byte_1B954-Map_SS_Down
0001C5A8 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C5AA 01                         byte_1B954:	dc.b 1
0001C5AB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C5B0 01                         byte_1B95A:	dc.b 1
0001C5B1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C5B6                            		even
0001C5B6                            		even
0001C5B6                            
0001C5B6                            ; ---------------------------------------------------------------------------
0001C5B6                            ; Sprite mappings - special stage chaos	emeralds
0001C5B6                            ; ---------------------------------------------------------------------------
0001C5B6 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C5B8 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C5BA 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C5BC 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C5BE 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C5C0 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C5C2 01                         byte_1B96C:	dc.b 1
0001C5C3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C5C8 01                         byte_1B972:	dc.b 1
0001C5C9 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C5CE 01                         byte_1B978:	dc.b 1
0001C5CF F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C5D4 01                         byte_1B97E:	dc.b 1
0001C5D5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C5DA                            		even
0001C5DA                            ; ===========================================================================
0001C5DA                            ; ---------------------------------------------------------------------------
0001C5DA                            ; Object 09 - Sonic (special stage)
0001C5DA                            ; ---------------------------------------------------------------------------
0001C5DA                            
0001C5DA                            Obj09:					; XREF: Obj_Index
0001C5DA                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C5DA                            ;		beq.s	Obj09_Normal	; if not, branch
0001C5DA 6100 0000                  		bsr.w	SS_FixCamera
0001C5DE                            ;		bra.w	DebugMode
0001C5DE                            ; ===========================================================================
0001C5DE                            
0001C5DE                            Obj09_Normal:
0001C5DE 7000                       		moveq	#0,d0
0001C5E0 1028 0024                  		move.b	$24(a0),d0
0001C5E4 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C5E8 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C5EC                            ; ===========================================================================
0001C5EC 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C5EE 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C5F0 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C5F2 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C5F4                            ; ===========================================================================
0001C5F4                            
0001C5F4                            Obj09_Main:				; XREF: Obj09_Index
0001C5F4 5428 0024                  		addq.b	#2,$24(a0)
0001C5F8 117C 000E 0016             		move.b	#$E,$16(a0)
0001C5FE 117C 0007 0017             		move.b	#7,$17(a0)
0001C604 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C60C 317C 0780 0002             		move.w	#$780,2(a0)
0001C612 117C 0004 0001             		move.b	#4,1(a0)
0001C618 117C 0000 0018             		move.b	#0,$18(a0)
0001C61E 117C 0002 001C             		move.b	#2,$1C(a0)
0001C624 08E8 0002 0022             		bset	#2,$22(a0)
0001C62A 08E8 0001 0022             		bset	#1,$22(a0)
0001C630                            
0001C630                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C630                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C630                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C630                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C630                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C630                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C630                            
0001C630                            Obj09_NoDebug:
0001C630 117C 0000 0030             		move.b	#0,$30(a0)
0001C636 7000                       		moveq	#0,d0
0001C638 1028 0022                  		move.b	$22(a0),d0
0001C63C 0240 0002                  		andi.w	#2,d0
0001C640 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C644 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C648 4EB9 0001 4594             		jsr	LoadSonicDynPLC
0001C64E 4EF9 0000 DE84             		jmp	DisplaySprite
0001C654                            ; ===========================================================================
0001C654 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C656 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C658                            ; ===========================================================================
0001C658                            
0001C658                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C658 6100 0000                  		bsr.w	Obj09_Rise
0001C65C 6100 0000                  		bsr.w	Obj09_Move
0001C660 6100 0000                  		bsr.w	Obj09_Fall
0001C664 6000                       		bra.s	Obj09_Display
0001C666                            ; ===========================================================================
0001C666                            
0001C666                            Obj09_InAir:				; XREF: Obj09_Modes
0001C666 6100 0000                  		bsr.w	Obj09_Rise
0001C66A 6100 0000                  		bsr.w	Obj09_Move
0001C66E 6100 0000                  		bsr.w	Obj09_Fall
0001C672                            
0001C672                            Obj09_Display:				; XREF: Obj09_OnWall
0001C672 6100 0000                  		bsr.w	Obj09_ChkItems
0001C676 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C67A 4EB9 0000 DE5E             		jsr	SpeedToPos
0001C680 6100 0000                  		bsr.w	SS_FixCamera
0001C684 3038 F780                  		move.w	($FFFFF780).w,d0
0001C688 D078 F782                  		add.w	($FFFFF782).w,d0
0001C68C 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C690 4EB9 0001 42EE             		jsr	Sonic_Animate
0001C696 4E75                       		rts	
0001C698                            
0001C698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C698                            
0001C698                            
0001C698                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C698 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C69E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C6A0 4A78 F784                          tst.w   ($FFFFF784).w
0001C6A4 6600                               bne.s   @corereverse1
0001C6A6 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C6AA 6000                               bra.s   Obj09_ChkRight          
0001C6AC                            
0001C6AC                            @corereverse1:
0001C6AC 6100 0000                          bsr.w	Obj09_MoveRight
0001C6B0                            
0001C6B0                            Obj09_ChkRight:
0001C6B0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C6B6 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C6B8 4A78 F784                          tst.w   ($FFFFF784).w
0001C6BC 6600                               bne.s   @corereverse2
0001C6BE 6100 0000                  		bsr.w	Obj09_MoveRight
0001C6C2 6000                               bra.s   Obj09_MoveSpeed 
0001C6C4                            
0001C6C4                            @corereverse2:
0001C6C4 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C6C8                            
0001C6C8                            Obj09_MoveSpeed:
0001C6C8 1038 F602                  		move.b	($FFFFF602).w,d0
0001C6CC 0200 000C                  		andi.b	#$C,d0
0001C6D0 6600                       		bne.s	Obj09_MoveCollision
0001C6D2 3028 0010                  		move.w	$10(a0),d0
0001C6D6 6700                       		beq.s	Obj09_MoveCollision
0001C6D8 317C 0000 0010             		move.w	#0,$10(a0)
0001C6DE                            
0001C6DE                            Obj09_MoveCollision:
0001C6DE 1038 F780                  		move.b	($FFFFF780).w,d0
0001C6E2 0600 0020                  		addi.b	#$20,d0
0001C6E6 0200 00C0                  		andi.b	#$C0,d0
0001C6EA 4400                       		neg.b	d0
0001C6EC 4EB9 0000 2B58             		jsr	(CalcSine).l
0001C6F2 C3E8 0010                  		muls.w	$10(a0),d1
0001C6F6 D3A8 0008                  		add.l	d1,8(a0)
0001C6FA C1E8 0012                  		muls.w	$12(a0),d0
0001C6FE D1A8 000C                  		add.l	d0,$C(a0)
0001C702 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C706 2428 000C                  		move.l	$C(a0),d2
0001C70A 2628 0008                  		move.l	8(a0),d3
0001C70E 6100 0000                  		bsr.w	sub_1BCE8
0001C712 6700                       		beq.s	loc_1BAF2
0001C714 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C718 93A8 0008                  		sub.l	d1,8(a0)
0001C71C 91A8 000C                  		sub.l	d0,$C(a0)
0001C720 317C 0000 0010             		move.w	#0,$10(a0)
0001C726 4E75                       		rts	
0001C728                            ; ===========================================================================
0001C728                            
0001C728                            loc_1BAF2:
0001C728 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C72C 4E75                       		rts	
0001C72E                            ; End of function Obj09_Move
0001C72E                            
0001C72E                            
0001C72E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C72E                            
0001C72E                            
0001C72E                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C72E 08E8 0000 0022             		bset	#0,$22(a0)
0001C734 4240                               clr.w   d0
0001C736 3038 F786                          move.w  ($FFFFF786).w,d0
0001C73A D040                               add.w   d0,d0
0001C73C 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C742 4468 0010                          neg.w   $10(a0)
0001C746 4E75                               rts
0001C748                            
0001C748                            ; End of function Obj09_MoveLeft
0001C748                            
0001C748                            
0001C748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C748                            
0001C748                            
0001C748                            Obj09_MoveRight:
0001C748 08A8 0000 0022             		bclr	#0,$22(a0)
0001C74E 4240                               clr.w   d0
0001C750 3038 F786                          move.w  ($FFFFF786).w,d0
0001C754 D040                               add.w   d0,d0
0001C756 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C75C 4E75                       		rts
0001C75E                            
0001C75E                            ; End of function Obj09_MoveRight
0001C75E                            
0001C75E                            ; ---------------------------------------------------------------------------
0001C75E                            
0001C75E                            SS_XSpdIndex:
0001C75E 0032                       		dc.w 50
0001C760 0064                       		dc.w 100
0001C762 0096                       		dc.w 150
0001C764 00C8                       		dc.w 200
0001C766 00FA                       		dc.w 250
0001C768                            
0001C768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C768                            
0001C768                            
0001C768                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C768 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C76E 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C770 4A78 F784                          tst.w   ($FFFFF784).w
0001C774 6600 0000                          bne.w   @corereverse1
0001C778 6100 0000                  		bsr.w	Obj09_MoveUp
0001C77C 6000                               bra.s   Obj09_NoRise
0001C77E                            
0001C77E                            @corereverse1:
0001C77E 6100 0000                  		bsr.w	Obj09_Falling 
0001C782                                    
0001C782                            Obj09_NoRise:
0001C782 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C788 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C78A 4A78 F784                          tst.w   ($FFFFF784).w
0001C78E 6600 0000                          bne.w   @corereverse2
0001C792 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C796 6000                               bra.s   Obj09_MoveYSpeed
0001C798                            
0001C798                            @corereverse2:
0001C798 6100 0000                  		bsr.w	Obj09_MoveUp
0001C79C                            		
0001C79C                            Obj09_MoveYSpeed:
0001C79C 1038 F602                  		move.b	($FFFFF602).w,d0
0001C7A0 0200 0003                  		andi.b	#3,d0
0001C7A4 6600                       		bne.s	Obj09_MoveYCollision
0001C7A6 3028 0012                  		move.w	$12(a0),d0
0001C7AA 6700                       		beq.s	Obj09_MoveYCollision
0001C7AC 317C 0000 0012             		move.w	#0,$12(a0)
0001C7B2                            
0001C7B2                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C7B2 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C7B6 0600 0020                  		addi.b	#$20,d0					;	?
0001C7BA 0200 00C0                  		andi.b	#$C0,d0					;	
0001C7BE 4400                       		neg.b	d0						;	?
0001C7C0 4EB9 0000 2B58             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C7C6 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C7CA D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C7CE C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C7D2 D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C7D6 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C7DA 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C7DE 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C7E2 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C7E6 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C7EA 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C7EE 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C7F2 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C7F6 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C7FC 4E75                       		rts								;	end routine
0001C7FE                            
0001C7FE                            Obj09_MoveUp:
0001C7FE 4240                               clr.w   d0
0001C800 3038 F786                          move.w  ($FFFFF786).w,d0
0001C804 D040                               add.w   d0,d0
0001C806 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C80C 4468 0012                          neg.w   $12(a0)
0001C810 4E75                               rts
0001C812                            
0001C812                            Obj09_Falling:
0001C812 4240                               clr.w   d0
0001C814 3038 F786                          move.w  ($FFFFF786).w,d0
0001C818 D040                               add.w   d0,d0
0001C81A 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C820 4E75                       		rts
0001C822                            ; End of function Obj09_Jump
0001C822                            
0001C822                            ; ---------------------------------------------------------------------------
0001C822                            SS_YSpdIndex:
0001C822 0080                       		dc.w $80
0001C824 0100                       		dc.w $100
0001C826 0180                       		dc.w $180
0001C828 0200                       		dc.w $200
0001C82A 0280                       		dc.w $280
0001C82C                            
0001C82C                            
0001C82C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C82C                            
0001C82C                            
0001C82C                            nullsub_2:				; XREF: Obj09_InAir
0001C82C 4E75                       		rts	
0001C82E                            ; End of function nullsub_2
0001C82E                            
0001C82E                            ; ===========================================================================
0001C82E                            ; ---------------------------------------------------------------------------
0001C82E                            ; unused subroutine to limit Sonic's upward vertical speed
0001C82E                            ; ---------------------------------------------------------------------------
0001C82E 323C FC00                  		move.w	#-$400,d1
0001C832 B268 0012                  		cmp.w	$12(a0),d1
0001C836 6F00                       		ble.s	locret_1BBB4
0001C838 1038 F602                  		move.b	($FFFFF602).w,d0
0001C83C 0200 0070                  		andi.b	#$70,d0
0001C840 6600                       		bne.s	locret_1BBB4
0001C842 3141 0012                  		move.w	d1,$12(a0)
0001C846                            
0001C846                            locret_1BBB4:
0001C846 4E75                       		rts	
0001C848                            ; ---------------------------------------------------------------------------
0001C848                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C848                            ; ---------------------------------------------------------------------------
0001C848                            
0001C848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C848                            
0001C848                            
0001C848                            SS_FixCamera:				; XREF: Obj09
0001C848 3428 000C                  		move.w	$C(a0),d2
0001C84C 3628 0008                  		move.w	8(a0),d3
0001C850 3038 F700                  		move.w	($FFFFF700).w,d0
0001C854 0443 00A0                  		subi.w	#$A0,d3
0001C858 6500                       		bcs.s	loc_1BBCE
0001C85A 9043                       		sub.w	d3,d0
0001C85C 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C860                            
0001C860                            loc_1BBCE:
0001C860 3038 F704                  		move.w	($FFFFF704).w,d0
0001C864 0442 0070                  		subi.w	#$70,d2
0001C868 6500                       		bcs.s	locret_1BBDE
0001C86A 9042                       		sub.w	d2,d0
0001C86C 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C870                            
0001C870                            locret_1BBDE:
0001C870 4E75                       		rts	
0001C872                            ; End of function SS_FixCamera
0001C872                            
0001C872                            ; ===========================================================================
0001C872                            
0001C872                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C872 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C878 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C87E 6600                       		bne.s	loc_1BBF4
0001C880 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C886                            
0001C886                            loc_1BBF4:
0001C886 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C88C 6D00                       		blt.s	loc_1BC12
0001C88E 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C894                            ;		move.w	#$4000,($FFFFF780).w
0001C894 5428 0024                  		addq.b	#2,$24(a0)
0001C898 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C89E                            
0001C89E                            loc_1BC12:
0001C89E                            ;		move.w	($FFFFF780).w,d0
0001C89E                            ;		add.w	($FFFFF782).w,d0
0001C89E                            ;		move.w	d0,($FFFFF780).w
0001C89E 4EB9 0001 42EE             		jsr	Sonic_Animate
0001C8A4 4EB9 0001 4594             		jsr	LoadSonicDynPLC
0001C8AA 6100 FF9C                  		bsr.w	SS_FixCamera
0001C8AE 4EF9 0000 DE84             		jmp	DisplaySprite
0001C8B4                            ; ===========================================================================
0001C8B4                            
0001C8B4                            Obj09_Exit2:				; XREF: Obj09_Index
0001C8B4 5368 0038                  		subq.w	#1,$38(a0)
0001C8B8 6600                       		bne.s	loc_1BC40
0001C8BA 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C8C0                            
0001C8C0                            loc_1BC40:
0001C8C0 4EB9 0001 42EE             		jsr	Sonic_Animate
0001C8C6 4EB9 0001 4594             		jsr	LoadSonicDynPLC
0001C8CC 6100 FF7A                  		bsr.w	SS_FixCamera
0001C8D0 4EF9 0000 DE84             		jmp	DisplaySprite
0001C8D6                            
0001C8D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8D6                            
0001C8D6                            
0001C8D6                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C8D6 2428 000C                  		move.l	$C(a0),d2
0001C8DA 2628 0008                  		move.l	8(a0),d3
0001C8DE 1038 F780                  		move.b	($FFFFF780).w,d0
0001C8E2 0200 00FC                  		andi.b	#$FC,d0
0001C8E6 4EB9 0000 2B58             		jsr	(CalcSine).l
0001C8EC 3828 0010                  		move.w	$10(a0),d4
0001C8F0 48C4                       		ext.l	d4
0001C8F2 E184                       		asl.l	#8,d4
0001C8F4 C1FC 002A                  		muls.w	#$2A,d0
0001C8F8 D084                       		add.l	d4,d0
0001C8FA 3828 0012                  		move.w	$12(a0),d4
0001C8FE 48C4                       		ext.l	d4
0001C900 E184                       		asl.l	#8,d4
0001C902 C3FC 002A                  		muls.w	#$2A,d1
0001C906 D284                       		add.l	d4,d1
0001C908 7A00                       		moveq	#0,d5
0001C90A 3A28 0010                  		move.w	$10(a0),d5
0001C90E 6700                       		beq.s	Obj09_NoXFall
0001C910 D680                       		add.l	d0,d3
0001C912 6100 0000                  		bsr.w	sub_1BCE8
0001C916 6700                       		beq.s	loc_1BCB0
0001C918 9680                       		sub.l	d0,d3
0001C91A 7000                       		moveq	#0,d0
0001C91C 3140 0010                  		move.w	d0,$10(a0)
0001C920 08A8 0001 0022             		bclr	#1,$22(a0)
0001C926                            
0001C926                            Obj09_NoXFall
0001C926 7C00                       		moveq	#0,d6
0001C928 3C28 0012                  		move.w	$12(a0),d6
0001C92C 6700                       		beq.s	Obj09_NoYFall
0001C92E D481                       		add.l	d1,d2
0001C930 6100 0000                  		bsr.w	sub_1BCE8
0001C934 6700                       		beq.s	loc_1BCC6
0001C936 9481                       		sub.l	d1,d2
0001C938 7200                       		moveq	#0,d1
0001C93A 3141 0012                  		move.w	d1,$12(a0)
0001C93E 4E75                       		rts	
0001C940                            ; ===========================================================================
0001C940                            
0001C940                            loc_1BCB0:
0001C940 7C00                       		moveq	#0,d6
0001C942 3C28 0012                  		move.w	$12(a0),d6
0001C946 6700                       		beq.s	Obj09_NoYFall
0001C948 D481                       		add.l	d1,d2
0001C94A 6100 0000                  		bsr.w	sub_1BCE8
0001C94E 6700                       		beq.s	loc_1BCD4
0001C950 9481                       		sub.l	d1,d2
0001C952 7200                       		moveq	#0,d1
0001C954 3141 0012                  		move.w	d1,$12(a0)
0001C958 08A8 0001 0022             		bclr	#1,$22(a0)
0001C95E                            
0001C95E                            loc_1BCC6:
0001C95E E080                       		asr.l	#8,d0
0001C960 E081                       		asr.l	#8,d1
0001C962 3140 0010                  		move.w	d0,$10(a0)
0001C966 3141 0012                  		move.w	d1,$12(a0)
0001C96A 4E75                       		rts	
0001C96C                            ; ===========================================================================
0001C96C                            
0001C96C                            loc_1BCD4:
0001C96C E080                       		asr.l	#8,d0
0001C96E E081                       		asr.l	#8,d1
0001C970 3140 0010                  		move.w	d0,$10(a0)
0001C974 3141 0012                  		move.w	d1,$12(a0)
0001C978 08E8 0001 0022             		bset	#1,$22(a0)
0001C97E 4E75                       		rts	
0001C980                            
0001C980                            Obj09_NoYFall:
0001C980 4E75                       		rts
0001C982                            ; End of function Obj09_Fall
0001C982                            
0001C982                            
0001C982                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C982                            
0001C982                            
0001C982                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C982 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C988 7800                       		moveq	#0,d4
0001C98A 4842                       		swap	d2
0001C98C 3802                       		move.w	d2,d4
0001C98E 4842                       		swap	d2
0001C990 0644 0044                  		addi.w	#$44,d4
0001C994 88FC 0018                  		divu.w	#$18,d4
0001C998 C8FC 0080                  		mulu.w	#$80,d4
0001C99C D3C4                       		adda.l	d4,a1
0001C99E 7800                       		moveq	#0,d4
0001C9A0 4843                       		swap	d3
0001C9A2 3803                       		move.w	d3,d4
0001C9A4 4843                       		swap	d3
0001C9A6 0644 0014                  		addi.w	#$14,d4
0001C9AA 88FC 0018                  		divu.w	#$18,d4
0001C9AE D2C4                       		adda.w	d4,a1
0001C9B0 7A00                       		moveq	#0,d5
0001C9B2 1819                       		move.b	(a1)+,d4
0001C9B4 6100                       		bsr.s	sub_1BD30
0001C9B6 1819                       		move.b	(a1)+,d4
0001C9B8 6100                       		bsr.s	sub_1BD30
0001C9BA D2FC 007E                  		adda.w	#$7E,a1
0001C9BE 1819                       		move.b	(a1)+,d4
0001C9C0 6100                       		bsr.s	sub_1BD30
0001C9C2 1819                       		move.b	(a1)+,d4
0001C9C4 6100                       		bsr.s	sub_1BD30
0001C9C6 4A05                       		tst.b	d5
0001C9C8 4E75                       		rts	
0001C9CA                            ; End of function sub_1BCE8
0001C9CA                            
0001C9CA                            
0001C9CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9CA                            
0001C9CA                            
0001C9CA                            sub_1BD30:				; XREF: sub_1BCE8
0001C9CA 6700                       		beq.s	locret_1BD44
0001C9CC 0C04 0028                  		cmpi.b	#$28,d4
0001C9D0 6500                       		blo.s	loc_1BD46
0001C9D2 0C04 004B                  		cmpi.b	#$4B,d4
0001C9D6 6400                       		bhs.s	loc_1BD46
0001C9D8 0C04 003A                  		cmpi.b	#$3A,d4
0001C9DC 6400                       		bhs.s	locret_1BD44
0001C9DE 0C04 002C                  		cmpi.b	#$2C,d4
0001C9E2 6400                       		bhs.s	loc_1BD46
0001C9E4                            
0001C9E4                            locret_1BD44:
0001C9E4 4E75                       		rts	
0001C9E6                            ; ===========================================================================
0001C9E6                            
0001C9E6                            loc_1BD46:
0001C9E6 1144 0030                  		move.b	d4,$30(a0)
0001C9EA 2149 0032                  		move.l	a1,$32(a0)
0001C9EE 7AFF                       		moveq	#-1,d5
0001C9F0 4E75                       		rts	
0001C9F2                            ; End of function sub_1BD30
0001C9F2                            
0001C9F2                            
0001C9F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9F2                            
0001C9F2                            
0001C9F2                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C9F2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C9F8 7800                       		moveq	#0,d4
0001C9FA 3828 000C                  		move.w	$C(a0),d4
0001C9FE 0644 0050                  		addi.w	#$50,d4
0001CA02 88FC 0018                  		divu.w	#$18,d4
0001CA06 C8FC 0080                  		mulu.w	#$80,d4
0001CA0A D3C4                       		adda.l	d4,a1
0001CA0C 7800                       		moveq	#0,d4
0001CA0E 3828 0008                  		move.w	8(a0),d4
0001CA12 0644 0020                  		addi.w	#$20,d4
0001CA16 88FC 0018                  		divu.w	#$18,d4
0001CA1A D2C4                       		adda.w	d4,a1
0001CA1C 1811                       		move.b	(a1),d4
0001CA1E 6600                       		bne.s	Obj09_ChkCont
0001CA20 4A28 003A                  		tst.b	$3A(a0)
0001CA24 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001CA28 7800                       		moveq	#0,d4
0001CA2A 4E75                       		rts	
0001CA2C                            ; ===========================================================================
0001CA2C                            
0001CA2C                            Obj09_ChkCont:
0001CA2C 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001CA30 6600                       		bne.s	Obj09_Chk1Up
0001CA32 6100 F6DC                  		bsr.w	SS_RemoveCollectedItem
0001CA36 6600                       		bne.s	Obj09_GetCont
0001CA38 14BC 0001                  		move.b	#1,(a2)
0001CA3C 2549 0004                  		move.l	a1,4(a2)
0001CA40                            
0001CA40                            Obj09_GetCont:
0001CA40 4EB9 0000 A358             		jsr	CollectRing
0001CA46 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001CA4C 6500                       		bcs.s	Obj09_NoCont
0001CA4E 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001CA54 6600                       		bne.s	Obj09_NoCont
0001CA56 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001CA5A 303C 00BF                  		move.w	#$BF,d0
0001CA5E 4EB9 0000 13B0             		jsr	(PlaySound).l	; play extra continue sound
0001CA64                            
0001CA64                            Obj09_NoCont:
0001CA64 7800                       		moveq	#0,d4
0001CA66 4E75                       		rts	
0001CA68                            ; ===========================================================================
0001CA68                            
0001CA68                            Obj09_Chk1Up:
0001CA68 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001CA6C 6600                       		bne.s	Obj09_ChkEmer
0001CA6E 6100 F6A0                  		bsr.w	SS_RemoveCollectedItem
0001CA72 6600                       		bne.s	Obj09_Get1Up
0001CA74 14BC 0003                  		move.b	#3,(a2)
0001CA78 2549 0004                  		move.l	a1,4(a2)
0001CA7C                            
0001CA7C                            Obj09_Get1Up:
0001CA7C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001CA80 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001CA84 303C 0088                  		move.w	#$88,d0
0001CA88 4EB9 0000 13B0             		jsr	(PlaySound).l	; play extra life music
0001CA8E 7800                       		moveq	#0,d4
0001CA90 4E75                       		rts	
0001CA92                            ; ===========================================================================
0001CA92                            
0001CA92                            Obj09_ChkEmer:
0001CA92 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001CA96 6500                       		bcs.s	Obj09_UPblock
0001CA98 0C04 0040                  		cmpi.b	#$40,d4
0001CA9C 6200                       		bhi.s	Obj09_UPblock
0001CA9E 6100 F670                  		bsr.w	SS_RemoveCollectedItem
0001CAA2 6600                       		bne.s	Obj09_GetEmer
0001CAA4 14BC 0005                  		move.b	#5,(a2)
0001CAA8 2549 0004                  		move.l	a1,4(a2)
0001CAAC                            
0001CAAC                            Obj09_GetEmer:
0001CAAC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001CAB2 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001CAB4 0404 003B                  		subi.b	#$3B,d4
0001CAB8 7000                       		moveq	#0,d0
0001CABA 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001CABE 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001CAC2 1584 0000                  		move.b	d4,(a2,d0.w)
0001CAC6 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001CACA                            
0001CACA                            Obj09_NoEmer:
0001CACA 303C 0093                  		move.w	#$93,d0
0001CACE 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play emerald music
0001CAD4 7800                       		moveq	#0,d4
0001CAD6 4E75                       		rts	
0001CAD8                            
0001CAD8                            ; ===========================================================================
0001CAD8                            
0001CAD8                            Obj09_UPblock:
0001CAD8 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001CADC 6600                       		bne.s	Obj09_DOWNblock
0001CADE 6100 F630                  		bsr.w	SS_RemoveCollectedItem
0001CAE2 6600                       		bne.s	Obj09_SpeedUp
0001CAE4 14BC 0001                  		move.b	#1,(a2)
0001CAE8 2549 0004                  		move.l	a1,4(a2)
0001CAEC                            
0001CAEC                            Obj09_SpeedUp:
0001CAEC 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001CAF2 6400                       		bhs.s	Obj09_UPsnd
0001CAF4 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001CAF8                            
0001CAF8                            Obj09_UPsnd:
0001CAF8 303C 00A9                  		move.w	#$A9,d0
0001CAFC 4EB9 0000 13B6             		jsr	(PlaySound_Special).l	; play up/down sound
0001CB02 7800                       		moveq	#0,d4
0001CB04 4E75                       		rts	
0001CB06                            ; ===========================================================================
0001CB06                            
0001CB06                            Obj09_DOWNblock:
0001CB06 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001CB0A 6600                       		bne.s	Obj09_Rblock
0001CB0C 6100 F602                  		bsr.w	SS_RemoveCollectedItem
0001CB10 6600                       		bne.s	Obj09_SpeedDown
0001CB12 14BC 0001                  		move.b	#1,(a2)
0001CB16 2549 0004                  		move.l	a1,4(a2)
0001CB1A                            
0001CB1A                            Obj09_SpeedDown:
0001CB1A 4A78 F786                  		tst.w 	($FFFFF786).w
0001CB1E 6700                       		beq.s	Obj09_DOWNsnd
0001CB20 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001CB24                            
0001CB24                            Obj09_DOWNsnd:
0001CB24 303C 00A9                  		move.w	#$A9,d0
0001CB28 4EB9 0000 13B6             		jsr	(PlaySound_Special).l	; play up/down sound
0001CB2E 7800                       		moveq	#0,d4
0001CB30 4E75                       		rts	
0001CB32                            ; ===========================================================================
0001CB32                            
0001CB32                            Obj09_Rblock:
0001CB32 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001CB36 6600                       		bne.s	Obj09_ChkGhost
0001CB38 6100 F5D6                  		bsr.w	SS_RemoveCollectedItem
0001CB3C 6600                       		bne.s	Obj09_RevStage
0001CB3E 14BC 0001                  		move.b	#1,(a2)
0001CB42 2549 0004                  		move.l	a1,4(a2)
0001CB46                            
0001CB46                            Obj09_RevStage:
0001CB46 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001CB4C 103C 00A9                  		move.b	#$A9,d0
0001CB50 4EB9 0000 13B6             		jsr	(PlaySound_Special).l	; play sound
0001CB56 7800                       		moveq	#0,d4
0001CB58 4E75                       		rts	
0001CB5A                            
0001CB5A                            ; ===========================================================================
0001CB5A                            
0001CB5A                            Obj09_ChkGhost:
0001CB5A 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CB5E 6600                       		bne.s	Obj09_ChkGhostTag
0001CB60 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CB66                            
0001CB66                            Obj09_ChkGhostTag:
0001CB66 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CB6A 6600                       		bne.s	Obj09_NoGhost
0001CB6C 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CB72 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CB74 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CB7A                            
0001CB7A                            Obj09_NoGhost:
0001CB7A 78FF                       		moveq	#-1,d4
0001CB7C 4E75                       		rts	
0001CB7E                            ; ===========================================================================
0001CB7E                            
0001CB7E                            Obj09_MakeGhostSolid:
0001CB7E 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CB84 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CB86 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CB8C 723F                       		moveq	#$3F,d1
0001CB8E                            
0001CB8E                            Obj09_GhostLoop2:
0001CB8E 743F                       		moveq	#$3F,d2
0001CB90                            
0001CB90                            Obj09_GhostLoop:
0001CB90 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CB94 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CB96 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CB9A                            
0001CB9A                            Obj09_NoReplace:
0001CB9A 5249                       		addq.w	#1,a1
0001CB9C 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CBA0 43E9 0040                  		lea	$40(a1),a1
0001CBA4 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CBA8                            
0001CBA8                            Obj09_GhostNotSolid:
0001CBA8 4228 003A                  		clr.b	$3A(a0)
0001CBAC 7800                       		moveq	#0,d4
0001CBAE 4E75                       		rts	
0001CBB0                            ; End of function Obj09_ChkItems
0001CBB0                            
0001CBB0                            
0001CBB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBB0                            
0001CBB0                            
0001CBB0                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CBB0 1028 0030                  		move.b	$30(a0),d0
0001CBB4 6600                       		bne.s	Obj09_GOAL
0001CBB6 5328 0036                  		subq.b	#1,$36(a0)
0001CBBA 6A00                       		bpl.s	loc_1BEA0
0001CBBC 117C 0000 0036             		move.b	#0,$36(a0)
0001CBC2                            
0001CBC2                            loc_1BEA0:
0001CBC2 5328 0037                  		subq.b	#1,$37(a0)
0001CBC6 6A00                       		bpl.s	locret_1BEAC
0001CBC8 117C 0000 0037             		move.b	#0,$37(a0)
0001CBCE                            
0001CBCE                            locret_1BEAC:
0001CBCE 4E75                       		rts	
0001CBD0                            ; ===========================================================================
0001CBD0                            
0001CBD0                            ; ===========================================================================
0001CBD0                            
0001CBD0                            Obj09_GOAL:
0001CBD0 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CBD4 6600                       		bne.s	Obj09_ChkGlass
0001CBD6 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CBDA 303C 00A8                  		move.w	#$A8,d0		; change item
0001CBDE 4EB9 0000 13B6             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CBE4 4E75                       		rts	
0001CBE6                            ; ===========================================================================
0001CBE6                            
0001CBE6                            ; ===========================================================================
0001CBE6                            
0001CBE6                            Obj09_ChkGlass:
0001CBE6 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CBEA 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CBEC 0C00 002E                  		cmpi.b	#$2E,d0
0001CBF0 6700                       		beq.s	Obj09_Glass
0001CBF2 0C00 002F                  		cmpi.b	#$2F,d0
0001CBF6 6700                       		beq.s	Obj09_Glass
0001CBF8 0C00 0030                  		cmpi.b	#$30,d0
0001CBFC 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CBFE                            
0001CBFE                            Obj09_Glass:
0001CBFE 6100 F510                  		bsr.w	SS_RemoveCollectedItem
0001CC02 6600                       		bne.s	Obj09_GlassSnd
0001CC04 14BC 0006                  		move.b	#6,(a2)
0001CC08 2268 0032                  		movea.l	$32(a0),a1
0001CC0C 5389                       		subq.l	#1,a1
0001CC0E 2549 0004                  		move.l	a1,4(a2)
0001CC12 1011                       		move.b	(a1),d0
0001CC14 5200                       		addq.b	#1,d0		; change glass type when touched
0001CC16 0C00 0030                  		cmpi.b	#$30,d0
0001CC1A 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CC1C 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CC1E                            
0001CC1E                            Obj09_GlassUpdate:
0001CC1E 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CC22                            
0001CC22                            Obj09_GlassSnd:
0001CC22 303C 00BA                  		move.w	#$BA,d0
0001CC26 4EF9 0000 13B6             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CC2C                            ; ===========================================================================
0001CC2C                            
0001CC2C                            Obj09_NoGlass:
0001CC2C 4E75                       		rts	
0001CC2E                            ; End of function Obj09_ChkItems2
0001CC2E                            
0001CC2E                            ; ===========================================================================
0001CC2E                            ; ---------------------------------------------------------------------------
0001CC2E                            ; Object 10 - blank
0001CC2E                            ; ---------------------------------------------------------------------------
0001CC2E                            
0001CC2E                            Obj10:					; XREF: Obj_Index
0001CC2E 4E75                       		rts	
0001CC30                            ; ---------------------------------------------------------------------------
0001CC30                            ; Subroutine to	animate	level graphics
0001CC30                            ; ---------------------------------------------------------------------------
0001CC30                            
0001CC30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC30                            
0001CC30                            
0001CC30                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CC30 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ: Is truth nuke flag enabled?
0001CC34 6600                       		bne.s	AniArt_Pause	; GMZ: If yes, branch
0001CC36 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CC3A 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CC3C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CC42 6100 0000                  		bsr.w	AniArt_GiantRing
0001CC46 7000                       		moveq	#0,d0
0001CC48 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CC4C D040                       		add.w	d0,d0
0001CC4E 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CC52 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CC56                            ; ===========================================================================
0001CC56                            
0001CC56                            AniArt_Pause:
0001CC56 4E75                       		rts	
0001CC58                            ; End of function AniArt_Load
0001CC58                            
0001CC58                            ; ===========================================================================
0001CC58 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CC5C 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CC60 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CC64 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CC68                            ; ===========================================================================
0001CC68                            ; ---------------------------------------------------------------------------
0001CC68                            ; Animated pattern routine - Green Hill
0001CC68                            ; ---------------------------------------------------------------------------
0001CC68                            
0001CC68                            AniArt_GHZ:				; XREF: AniArt_Index
0001CC68 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CC6C 6A00                       		bpl.s	loc_1C08A
0001CC6E 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CC74 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CC7A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CC7E 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CC82 0240 0001                  		andi.w	#1,d0
0001CC86 6700                       		beq.s	loc_1C078
0001CC88 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CC8C                            
0001CC8C                            loc_1C078:
0001CC8C 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CC96 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CC9A 6000 0000                  		bra.w	LoadTiles
0001CC9E                            ; ===========================================================================
0001CC9E                            
0001CC9E                            loc_1C08A:
0001CC9E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CCA2 6A00                       		bpl.s	loc_1C0C0
0001CCA4 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CCAA 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CCB0 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CCB4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CCB8 0240 0001                  		andi.w	#1,d0
0001CCBC 6700                       		beq.s	loc_1C0AE
0001CCBE 43E9 0200                  		lea	$200(a1),a1
0001CCC2                            
0001CCC2                            loc_1C0AE:
0001CCC2 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CCCC 323C 000F                  		move.w	#$F,d1
0001CCD0 6000 0000                  		bra.w	LoadTiles
0001CCD4                            ; ===========================================================================
0001CCD4                            
0001CCD4                            loc_1C0C0:
0001CCD4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CCD8 6A00                       		bpl.s	locret_1C10C
0001CCDA 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CCE0 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CCE4 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CCE8 0240 0003                  		andi.w	#3,d0
0001CCEC 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CCF0 0800 0000                  		btst	#0,d0
0001CCF4 6600                       		bne.s	loc_1C0E8
0001CCF6 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CCFC                            
0001CCFC                            loc_1C0E8:
0001CCFC EF48                       		lsl.w	#7,d0
0001CCFE 3200                       		move.w	d0,d1
0001CD00 D040                       		add.w	d0,d0
0001CD02 D041                       		add.w	d1,d0
0001CD04 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CD0E 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CD14 43F1 0000                  		lea	(a1,d0.w),a1
0001CD18 323C 000B                  		move.w	#$B,d1
0001CD1C 6100 0000                  		bsr.w	LoadTiles
0001CD20                            
0001CD20                            locret_1C10C:
0001CD20 4E75                       		rts	
0001CD22                            ; ===========================================================================
0001CD22 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CD26                            ; ===========================================================================
0001CD26                            ; ---------------------------------------------------------------------------
0001CD26                            ; Animated pattern routine - Marble
0001CD26                            ; ---------------------------------------------------------------------------
0001CD26                            
0001CD26                            AniArt_MZ:				; XREF: AniArt_Index
0001CD26 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CD2A 6A00                       		bpl.s	loc_1C150
0001CD2C 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CD32 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CD38 7000                       		moveq	#0,d0
0001CD3A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CD3E 5200                       		addq.b	#1,d0
0001CD40 0C00 0003                  		cmpi.b	#3,d0
0001CD44 6600                       		bne.s	loc_1C134
0001CD46 7000                       		moveq	#0,d0
0001CD48                            
0001CD48                            loc_1C134:
0001CD48 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CD4C C0FC 0100                  		mulu.w	#$100,d0
0001CD50 D2C0                       		adda.w	d0,a1
0001CD52 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CD5C 323C 0007                  		move.w	#7,d1
0001CD60 6100 0000                  		bsr.w	LoadTiles
0001CD64                            
0001CD64                            loc_1C150:
0001CD64 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD68 6A00                       		bpl.s	loc_1C1AE
0001CD6A 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CD70 7000                       		moveq	#0,d0
0001CD72 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CD76 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CD7C EE58                       		ror.w	#7,d0
0001CD7E D8C0                       		adda.w	d0,a4
0001CD80 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CD8A 7600                       		moveq	#0,d3
0001CD8C 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CD90 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CD94 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CD98 343C 0003                  		move.w	#3,d2
0001CD9C                            
0001CD9C                            loc_1C188:
0001CD9C 3003                       		move.w	d3,d0
0001CD9E D040                       		add.w	d0,d0
0001CDA0 0240 001E                  		andi.w	#$1E,d0
0001CDA4 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CDAA 3033 0000                  		move.w	(a3,d0.w),d0
0001CDAE 47F3 0000                  		lea	(a3,d0.w),a3
0001CDB2 224C                       		movea.l	a4,a1
0001CDB4 323C 001F                  		move.w	#$1F,d1
0001CDB8 4E93                       		jsr	(a3)
0001CDBA 5843                       		addq.w	#4,d3
0001CDBC 51CA FFDE                  		dbf	d2,loc_1C188
0001CDC0 4E75                       		rts	
0001CDC2                            ; ===========================================================================
0001CDC2                            
0001CDC2                            loc_1C1AE:
0001CDC2 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CDC6 6A00 0000                  		bpl.w	locret_1C1EA
0001CDCA 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CDD0 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CDD6 7000                       		moveq	#0,d0
0001CDD8 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CDDC 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CDE0 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CDE6 C0FC 00C0                  		mulu.w	#$C0,d0
0001CDEA D2C0                       		adda.w	d0,a1
0001CDEC 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CDF6 323C 0005                  		move.w	#5,d1
0001CDFA 6000 0000                  		bra.w	LoadTiles
0001CDFE                            ; ===========================================================================
0001CDFE                            
0001CDFE                            locret_1C1EA:
0001CDFE 4E75                       		rts	
0001CE00                            ; ===========================================================================
0001CE00                            ; ---------------------------------------------------------------------------
0001CE00                            ; Animated pattern routine - Scrap Brain
0001CE00                            ; ---------------------------------------------------------------------------
0001CE00                            
0001CE00                            AniArt_SBZ:				; XREF: AniArt_Index
0001CE00 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CE04 6700                       		beq.s	loc_1C1F8
0001CE06 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CE0A 6000                       		bra.s	loc_1C250
0001CE0C                            ; ===========================================================================
0001CE0C                            
0001CE0C                            loc_1C1F8:
0001CE0C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CE10 6A00                       		bpl.s	loc_1C250
0001CE12 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CE18 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CE1E 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CE28 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CE2C 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CE30 0240 0007                  		andi.w	#7,d0
0001CE34 6700                       		beq.s	loc_1C234
0001CE36 5340                       		subq.w	#1,d0
0001CE38 C0FC 0180                  		mulu.w	#$180,d0
0001CE3C 43F1 0000                  		lea	(a1,d0.w),a1
0001CE40 323C 000B                  		move.w	#$B,d1
0001CE44 6000 0000                  		bra.w	LoadTiles
0001CE48                            ; ===========================================================================
0001CE48                            
0001CE48                            loc_1C234:
0001CE48 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CE4E                            
0001CE4E                            loc_1C23A:
0001CE4E 323C 0005                  		move.w	#5,d1
0001CE52 6100 0000                  		bsr.w	LoadTiles
0001CE56 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CE5C 323C 0005                  		move.w	#5,d1
0001CE60 6000 0000                  		bra.w	LoadTiles
0001CE64                            ; ===========================================================================
0001CE64                            
0001CE64                            loc_1C250:
0001CE64 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CE68 6700                       		beq.s	loc_1C25C
0001CE6A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CE6E 6000                       		bra.s	locret_1C2A0
0001CE70                            ; ===========================================================================
0001CE70                            
0001CE70                            loc_1C25C:
0001CE70 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CE74 6A00                       		bpl.s	locret_1C2A0
0001CE76 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CE7C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CE82 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CE8C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CE90 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CE94 0240 0007                  		andi.w	#7,d0
0001CE98 6700                       		beq.s	loc_1C298
0001CE9A 5340                       		subq.w	#1,d0
0001CE9C C0FC 0180                  		mulu.w	#$180,d0
0001CEA0 43F1 0000                  		lea	(a1,d0.w),a1
0001CEA4 323C 000B                  		move.w	#$B,d1
0001CEA8 6000 0000                  		bra.w	LoadTiles
0001CEAC                            ; ===========================================================================
0001CEAC                            
0001CEAC                            loc_1C298:
0001CEAC 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CEB2 609A                       		bra.s	loc_1C23A
0001CEB4                            ; ===========================================================================
0001CEB4                            
0001CEB4                            locret_1C2A0:
0001CEB4 4E75                       		rts	
0001CEB6                            ; ===========================================================================
0001CEB6                            ; ---------------------------------------------------------------------------
0001CEB6                            ; Animated pattern routine - ending sequence
0001CEB6                            ; ---------------------------------------------------------------------------
0001CEB6                            
0001CEB6                            AniArt_Ending:				; XREF: AniArt_Index
0001CEB6 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CEBA 6A00                       		bpl.s	loc_1C2F4
0001CEBC 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CEC2 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CEC8 45F8 9400                  		lea	($FFFF9400).w,a2
0001CECC 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CED0 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CED4 0240 0001                  		andi.w	#1,d0
0001CED8 6700                       		beq.s	loc_1C2CE
0001CEDA 43E9 0200                  		lea	$200(a1),a1
0001CEDE 45EA 0200                  		lea	$200(a2),a2
0001CEE2                            
0001CEE2                            loc_1C2CE:
0001CEE2 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CEEC 323C 000F                  		move.w	#$F,d1
0001CEF0 6100 0000                  		bsr.w	LoadTiles
0001CEF4 224A                       		movea.l	a2,a1
0001CEF6 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CF00 323C 000F                  		move.w	#$F,d1
0001CF04 6000 0000                  		bra.w	LoadTiles
0001CF08                            ; ===========================================================================
0001CF08                            
0001CF08                            loc_1C2F4:
0001CF08 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CF0C 6A00                       		bpl.s	loc_1C33C
0001CF0E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CF14 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CF18 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CF1C 0240 0007                  		andi.w	#7,d0
0001CF20 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CF24 EF48                       		lsl.w	#7,d0
0001CF26 3200                       		move.w	d0,d1
0001CF28 D040                       		add.w	d0,d0
0001CF2A D041                       		add.w	d1,d0
0001CF2C 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CF36 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CF3C 43F1 0000                  		lea	(a1,d0.w),a1
0001CF40 323C 000B                  		move.w	#$B,d1
0001CF44 6000 0000                  		bra.w	LoadTiles
0001CF48                            ; ===========================================================================
0001CF48 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CF50                            ; ===========================================================================
0001CF50                            
0001CF50                            loc_1C33C:
0001CF50 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CF54 6A00                       		bpl.s	loc_1C37A
0001CF56 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CF5C 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CF60 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CF64 0240 0003                  		andi.w	#3,d0
0001CF68 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CF6C E148                       		lsl.w	#8,d0
0001CF6E D040                       		add.w	d0,d0
0001CF70 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CF7A 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CF7E 43F1 0000                  		lea	(a1,d0.w),a1
0001CF82 323C 000F                  		move.w	#$F,d1
0001CF86 6000 0000                  		bra.w	LoadTiles
0001CF8A                            ; ===========================================================================
0001CF8A 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CF8E                            ; ===========================================================================
0001CF8E                            
0001CF8E                            loc_1C37A:
0001CF8E 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CF92 6A00                       		bpl.s	locret_1C3B4
0001CF94 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CF9A 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CF9E 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CFA2 0240 0003                  		andi.w	#3,d0
0001CFA6 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CFAA E148                       		lsl.w	#8,d0
0001CFAC D040                       		add.w	d0,d0
0001CFAE 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CFB8 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CFBC 43F1 0000                  		lea	(a1,d0.w),a1
0001CFC0 323C 000F                  		move.w	#$F,d1
0001CFC4 6000 0000                  		bra.w	LoadTiles
0001CFC8                            ; ===========================================================================
0001CFC8                            
0001CFC8                            locret_1C3B4:
0001CFC8 4E75                       		rts	
0001CFCA                            ; ===========================================================================
0001CFCA                            
0001CFCA                            AniArt_none:				; XREF: AniArt_Index
0001CFCA 4E75                       		rts	
0001CFCC                            
0001CFCC                            ; ---------------------------------------------------------------------------
0001CFCC                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CFCC                            ; ---------------------------------------------------------------------------
0001CFCC                            
0001CFCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFCC                            
0001CFCC                            
0001CFCC                            LoadTiles:
0001CFCC 2C99                       		move.l	(a1)+,(a6)
0001CFCE 2C99                       		move.l	(a1)+,(a6)
0001CFD0 2C99                       		move.l	(a1)+,(a6)
0001CFD2 2C99                       		move.l	(a1)+,(a6)
0001CFD4 2C99                       		move.l	(a1)+,(a6)
0001CFD6 2C99                       		move.l	(a1)+,(a6)
0001CFD8 2C99                       		move.l	(a1)+,(a6)
0001CFDA 2C99                       		move.l	(a1)+,(a6)
0001CFDC 51C9 FFEE                  		dbf	d1,LoadTiles
0001CFE0 4E75                       		rts	
0001CFE2                            ; End of function LoadTiles
0001CFE2                            
0001CFE2                            ; ===========================================================================
0001CFE2                            ; ---------------------------------------------------------------------------
0001CFE2                            ; Animated pattern routine - more Marble Zone
0001CFE2                            ; ---------------------------------------------------------------------------
0001CFE2 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CFE6 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CFEA 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CFEE 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CFF2 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CFF6 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CFFA 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CFFE 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001D002                            ; ===========================================================================
0001D002                            
0001D002                            loc_1C3EE:				; XREF: AniArt_MZextra
0001D002 2C91                       		move.l	(a1),(a6)
0001D004 43E9 0010                  		lea	$10(a1),a1
0001D008 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001D00C 4E75                       		rts	
0001D00E                            ; ===========================================================================
0001D00E                            
0001D00E                            loc_1C3FA:				; XREF: AniArt_MZextra
0001D00E 2029 0002                  		move.l	2(a1),d0
0001D012 1029 0001                  		move.b	1(a1),d0
0001D016 E098                       		ror.l	#8,d0
0001D018 2C80                       		move.l	d0,(a6)
0001D01A 43E9 0010                  		lea	$10(a1),a1
0001D01E 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D022 4E75                       		rts	
0001D024                            ; ===========================================================================
0001D024                            
0001D024                            loc_1C410:				; XREF: AniArt_MZextra
0001D024 2CA9 0002                  		move.l	2(a1),(a6)
0001D028 43E9 0010                  		lea	$10(a1),a1
0001D02C 51C9 FFF6                  		dbf	d1,loc_1C410
0001D030 4E75                       		rts	
0001D032                            ; ===========================================================================
0001D032                            
0001D032                            loc_1C41E:				; XREF: AniArt_MZextra
0001D032 2029 0004                  		move.l	4(a1),d0
0001D036 1029 0003                  		move.b	3(a1),d0
0001D03A E098                       		ror.l	#8,d0
0001D03C 2C80                       		move.l	d0,(a6)
0001D03E 43E9 0010                  		lea	$10(a1),a1
0001D042 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D046 4E75                       		rts	
0001D048                            ; ===========================================================================
0001D048                            
0001D048                            loc_1C434:				; XREF: AniArt_MZextra
0001D048 2CA9 0004                  		move.l	4(a1),(a6)
0001D04C 43E9 0010                  		lea	$10(a1),a1
0001D050 51C9 FFF6                  		dbf	d1,loc_1C434
0001D054 4E75                       		rts	
0001D056                            ; ===========================================================================
0001D056                            
0001D056                            loc_1C442:				; XREF: AniArt_MZextra
0001D056 2029 0006                  		move.l	6(a1),d0
0001D05A 1029 0005                  		move.b	5(a1),d0
0001D05E E098                       		ror.l	#8,d0
0001D060 2C80                       		move.l	d0,(a6)
0001D062 43E9 0010                  		lea	$10(a1),a1
0001D066 51C9 FFEE                  		dbf	d1,loc_1C442
0001D06A 4E75                       		rts	
0001D06C                            ; ===========================================================================
0001D06C                            
0001D06C                            loc_1C458:				; XREF: AniArt_MZextra
0001D06C 2CA9 0006                  		move.l	6(a1),(a6)
0001D070 43E9 0010                  		lea	$10(a1),a1
0001D074 51C9 FFF6                  		dbf	d1,loc_1C458
0001D078 4E75                       		rts	
0001D07A                            ; ===========================================================================
0001D07A                            
0001D07A                            loc_1C466:				; XREF: AniArt_MZextra
0001D07A 2029 0008                  		move.l	8(a1),d0
0001D07E 1029 0007                  		move.b	7(a1),d0
0001D082 E098                       		ror.l	#8,d0
0001D084 2C80                       		move.l	d0,(a6)
0001D086 43E9 0010                  		lea	$10(a1),a1
0001D08A 51C9 FFEE                  		dbf	d1,loc_1C466
0001D08E 4E75                       		rts	
0001D090                            ; ===========================================================================
0001D090                            
0001D090                            loc_1C47C:				; XREF: AniArt_MZextra
0001D090 2CA9 0008                  		move.l	8(a1),(a6)
0001D094 43E9 0010                  		lea	$10(a1),a1
0001D098 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D09C 4E75                       		rts	
0001D09E                            ; ===========================================================================
0001D09E                            
0001D09E                            loc_1C48A:				; XREF: AniArt_MZextra
0001D09E 2029 000A                  		move.l	$A(a1),d0
0001D0A2 1029 0009                  		move.b	9(a1),d0
0001D0A6 E098                       		ror.l	#8,d0
0001D0A8 2C80                       		move.l	d0,(a6)
0001D0AA 43E9 0010                  		lea	$10(a1),a1
0001D0AE 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D0B2 4E75                       		rts	
0001D0B4                            ; ===========================================================================
0001D0B4                            
0001D0B4                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D0B4 2CA9 000A                  		move.l	$A(a1),(a6)
0001D0B8 43E9 0010                  		lea	$10(a1),a1
0001D0BC 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D0C0 4E75                       		rts	
0001D0C2                            ; ===========================================================================
0001D0C2                            
0001D0C2                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D0C2 2029 000C                  		move.l	$C(a1),d0
0001D0C6 1029 000B                  		move.b	$B(a1),d0
0001D0CA E098                       		ror.l	#8,d0
0001D0CC 2C80                       		move.l	d0,(a6)
0001D0CE 43E9 0010                  		lea	$10(a1),a1
0001D0D2 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D0D6 4E75                       		rts	
0001D0D8                            ; ===========================================================================
0001D0D8                            
0001D0D8                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D0D8 2CA9 000C                  		move.l	$C(a1),(a6)
0001D0DC 43E9 0010                  		lea	$10(a1),a1
0001D0E0 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D0E4 4E75                       		rts	
0001D0E6                            ; ===========================================================================
0001D0E6                            
0001D0E6                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D0E6 2029 000C                  		move.l	$C(a1),d0
0001D0EA E198                       		rol.l	#8,d0
0001D0EC 1011                       		move.b	0(a1),d0
0001D0EE 2C80                       		move.l	d0,(a6)
0001D0F0 43E9 0010                  		lea	$10(a1),a1
0001D0F4 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D0F8 4E75                       		rts	
0001D0FA                            ; ===========================================================================
0001D0FA                            
0001D0FA                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D0FA 3CA9 000E                  		move.w	$E(a1),(a6)
0001D0FE 3C91                       		move.w	0(a1),(a6)
0001D100 43E9 0010                  		lea	$10(a1),a1
0001D104 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D108 4E75                       		rts	
0001D10A                            ; ===========================================================================
0001D10A                            
0001D10A                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D10A 2011                       		move.l	0(a1),d0
0001D10C 1029 000F                  		move.b	$F(a1),d0
0001D110 E098                       		ror.l	#8,d0
0001D112 2C80                       		move.l	d0,(a6)
0001D114 43E9 0010                  		lea	$10(a1),a1
0001D118 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D11C 4E75                       		rts	
0001D11E                            
0001D11E                            ; ---------------------------------------------------------------------------
0001D11E                            ; Animated pattern routine - giant ring
0001D11E                            ; ---------------------------------------------------------------------------
0001D11E                            
0001D11E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D11E                            
0001D11E                            
0001D11E                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D11E 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D122 6600                       		bne.s	loc_1C518
0001D124 4E75                       		rts	
0001D126                            ; ===========================================================================
0001D126                            
0001D126                            loc_1C518:
0001D126 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D12C 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D132 7000                       		moveq	#0,d0
0001D134 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D138 43F1 0000                  		lea	(a1,d0.w),a1
0001D13C 0640 8000                  		addi.w	#$8000,d0
0001D140 E588                       		lsl.l	#2,d0
0001D142 E448                       		lsr.w	#2,d0
0001D144 0040 4000                  		ori.w	#$4000,d0
0001D148 4840                       		swap	d0
0001D14A 2D40 0004                  		move.l	d0,4(a6)
0001D14E 323C 000D                  		move.w	#$D,d1
0001D152 6000 FE78                  		bra.w	LoadTiles
0001D156                            ; End of function AniArt_GiantRing
0001D156                            
0001D156                            ; ===========================================================================
0001D156                            ; ---------------------------------------------------------------------------
0001D156                            ; Object 21 - SCORE, TIME, RINGS
0001D156                            ; ---------------------------------------------------------------------------
0001D156                            
0001D156                            Obj21:					; XREF: Obj_Index
0001D156 7000                       		moveq	#0,d0
0001D158 1028 0024                  		move.b	$24(a0),d0
0001D15C 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D160 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D164                            ; ===========================================================================
0001D164 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D166 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D168                            ; ===========================================================================
0001D168                            
0001D168                            Obj21_Main:				; XREF: Obj21_Main
0001D168 5428 0024                  		addq.b	#2,$24(a0)
0001D16C 317C 0090 0008             		move.w	#$90,8(a0)
0001D172 317C 0108 000A             		move.w	#$108,$A(a0)
0001D178 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D180 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D186 117C 0000 0001             		move.b	#0,1(a0)
0001D18C 117C 0000 0018             		move.b	#0,$18(a0)
0001D192                            
0001D192                            Obj21_Flash:				; XREF: Obj21_Main
0001D192 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D196 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D198 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D19C 4EF9 0000 DE84             		jmp	DisplaySprite
0001D1A2                            ; ===========================================================================
0001D1A2                            
0001D1A2                            Obj21_Flash2:
0001D1A2 7000                       		moveq	#0,d0
0001D1A4 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D1AA 6600                       		bne.s	Obj21_Display
0001D1AC 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D1AE 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D1B4 6600                       		bne.s	Obj21_Display	; if not, branch
0001D1B6 5440                       		addq.w	#2,d0		; make time counter flash red
0001D1B8                            
0001D1B8                            Obj21_Display:
0001D1B8 1140 001A                  		move.b	d0,$1A(a0)
0001D1BC 4EF9 0000 DE84             		jmp	DisplaySprite
0001D1C2                            ; ===========================================================================
0001D1C2                            ; ---------------------------------------------------------------------------
0001D1C2                            ; Sprite mappings - SCORE, TIME, RINGS
0001D1C2                            ; ---------------------------------------------------------------------------
0001D1C2                            Map_obj21:
0001D1C2                            	include "_maps\obj21.asm"
0001D1C2                            Map_549d:
0001D1C2 0000                       Map_549d_0: 	dc.w Map_549d_8-Map_549d
0001D1C4 0000                       Map_549d_2: 	dc.w Map_549d_36-Map_549d
0001D1C6 0000                       Map_549d_4: 	dc.w Map_549d_64-Map_549d
0001D1C8 0000                       Map_549d_6: 	dc.w Map_549d_92-Map_549d
0001D1CA 09                         Map_549d_8: 	dc.b $9
0001D1CB 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D1D0 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D1D5 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D1DA 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D1DF A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D1E4 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D1E9 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D1EE 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D1F3 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D1F8 09                         Map_549d_36: 	dc.b $9
0001D1F9 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D1FE 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D203 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D208 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D20D A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D212 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D217 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D21C 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D221 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D226 09                         Map_549d_64: 	dc.b $9
0001D227 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D22C 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D231 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D236 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D23B A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D240 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D245 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D24A 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D24F 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D254 09                         Map_549d_92: 	dc.b $9
0001D255 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D25A 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D25F 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D264 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D269 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D26E A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D273 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D278 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D27D 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D282                            	even
0001D282                            	even
0001D282                            
0001D282                            ; ---------------------------------------------------------------------------
0001D282                            ; Add points subroutine
0001D282                            ; ---------------------------------------------------------------------------
0001D282                            
0001D282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D282                            
0001D282                            
0001D282                            AddPoints:
0001D282 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D288 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D28C 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D290 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D292 223C 000F 423F             		move.l	#999999,d1
0001D298 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D29A 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D29E 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D2A0 2481                       		move.l	d1,(a2)
0001D2A2                            
0001D2A2                            loc_1C6AC:
0001D2A2 2013                       		move.l	(a3),d0
0001D2A4 B092                       		cmp.l	(a2),d0
0001D2A6 6500 0000                  		bcs.w	locret_1C6B6
0001D2AA 2480                       		move.l	d0,(a2)
0001D2AC                            
0001D2AC                            locret_1C6B6:
0001D2AC 4E75                       		rts	
0001D2AE                            ; End of function AddPoints
0001D2AE                            
0001D2AE                            ; ---------------------------------------------------------------------------
0001D2AE                            ; Subroutine to	update the HUD
0001D2AE                            ; ---------------------------------------------------------------------------
0001D2AE                            
0001D2AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2AE                            
0001D2AE                            
0001D2AE                            HudUpdate:
0001D2AE 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D2B2 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D2B6 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D2BA 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D2BC 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D2C0 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D2C6 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D2CA 6100 0000                  		bsr.w	Hud_Score
0001D2CE                            
0001D2CE                            Hud_ChkRings:
0001D2CE 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D2D2 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D2D4 6A00                       		bpl.s	loc_1C6E4
0001D2D6 6100 0000                  		bsr.w	Hud_LoadZero
0001D2DA                            
0001D2DA                            loc_1C6E4:
0001D2DA 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D2DE 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D2E4 7200                       		moveq	#0,d1
0001D2E6 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D2EA 6100 0000                  		bsr.w	Hud_Rings
0001D2EE                            
0001D2EE                            Hud_ChkTime:
0001D2EE 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D2F2 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D2F4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D2F8 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D2FA 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D2FE 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D304 6700                       		beq.s	TimeOver	; if yes, branch
0001D306 5221                       		addq.b	#1,-(a1)
0001D308 0C11 003C                  		cmpi.b	#60,(a1)
0001D30C 6500                       		bcs.s	Hud_ChkLives
0001D30E 12BC 0000                  		move.b	#0,(a1)
0001D312 5221                       		addq.b	#1,-(a1)
0001D314 0C11 003C                  		cmpi.b	#60,(a1)
0001D318 6500                       		bcs.s	loc_1C734
0001D31A 12BC 0000                  		move.b	#0,(a1)
0001D31E 5221                       		addq.b	#1,-(a1)
0001D320 0C11 0009                  		cmpi.b	#9,(a1)
0001D324 6500                       		bcs.s	loc_1C734
0001D326 12BC 0009                  		move.b	#9,(a1)
0001D32A                            
0001D32A                            loc_1C734:
0001D32A 203C 5E40 0003             		move.l	#$5E400003,d0
0001D330 7200                       		moveq	#0,d1
0001D332 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D336 6100 0000                  		bsr.w	Hud_Mins
0001D33A 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D340 7200                       		moveq	#0,d1
0001D342 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D346 6100 0000                  		bsr.w	Hud_Secs
0001D34A                            
0001D34A                            Hud_ChkLives:
0001D34A 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D34E 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D350 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D354 6100 0000                  		bsr.w	Hud_Lives
0001D358                            
0001D358                            Hud_ChkBonus:
0001D358 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D35C 6700                       		beq.s	Hud_End		; if not, branch
0001D35E 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D362 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D36C 7200                       		moveq	#0,d1
0001D36E 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D372 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D376 7200                       		moveq	#0,d1
0001D378 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D37C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D380                            
0001D380                            Hud_End:
0001D380 4E75                       		rts	
0001D382                            ; ===========================================================================
0001D382                            
0001D382                            TimeOver:				; XREF: Hud_ChkTime
0001D382 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D386 41F8 D000                  		lea	($FFFFD000).w,a0
0001D38A 2448                       		movea.l	a0,a2
0001D38C 6100 E960                  		bsr.w	KillSonic
0001D390 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D396 4E75                       		rts	
0001D398                            ; ===========================================================================
0001D398                            
0001D398                            HudDebug:				; XREF: HudUpdate
0001D398 6100 0000                  		bsr.w	HudDb_XY
0001D39C 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D3A0 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D3A2 6A00                       		bpl.s	HudDb_Rings
0001D3A4 6100 0000                  		bsr.w	Hud_LoadZero
0001D3A8                            
0001D3A8                            HudDb_Rings:
0001D3A8 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D3AC 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D3B2 7200                       		moveq	#0,d1
0001D3B4 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D3B8 6100 0000                  		bsr.w	Hud_Rings
0001D3BC                            
0001D3BC                            HudDb_ObjCount:
0001D3BC 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D3C2 7200                       		moveq	#0,d1
0001D3C4 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D3C8 6100 0000                  		bsr.w	Hud_Secs
0001D3CC 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D3D0 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D3D2 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D3D6 6100 0000                  		bsr.w	Hud_Lives
0001D3DA                            
0001D3DA                            HudDb_ChkBonus:
0001D3DA 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D3DE 6700                       		beq.s	HudDb_End	; if not, branch
0001D3E0 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D3E4 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D3EE 7200                       		moveq	#0,d1
0001D3F0 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D3F4 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3F8 7200                       		moveq	#0,d1
0001D3FA 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D3FE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D402                            
0001D402                            HudDb_End:
0001D402 4E75                       		rts	
0001D404                            ; End of function HudUpdate
0001D404                            
0001D404                            ; ---------------------------------------------------------------------------
0001D404                            ; Subroutine to	load "0" on the	HUD
0001D404                            ; ---------------------------------------------------------------------------
0001D404                            
0001D404                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D404                            
0001D404                            
0001D404                            Hud_LoadZero:				; XREF: HudUpdate
0001D404 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D40E 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D412 343C 0002                  		move.w	#2,d2
0001D416 6000                       		bra.s	loc_1C83E
0001D418                            ; End of function Hud_LoadZero
0001D418                            
0001D418                            ; ---------------------------------------------------------------------------
0001D418                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D418                            ; ---------------------------------------------------------------------------
0001D418                            
0001D418                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D418                            
0001D418                            
0001D418                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D418 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D41E 6100 0000                  		bsr.w	Hud_Lives
0001D422 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D42C 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D430 343C 000E                  		move.w	#$E,d2
0001D434                            
0001D434                            loc_1C83E:				; XREF: Hud_LoadZero
0001D434 43FA 0000                  		lea	Art_Hud(pc),a1
0001D438                            
0001D438                            loc_1C842:
0001D438 323C 000F                  		move.w	#$F,d1
0001D43C 101A                       		move.b	(a2)+,d0
0001D43E 6B00                       		bmi.s	loc_1C85E
0001D440 4880                       		ext.w	d0
0001D442 EB48                       		lsl.w	#5,d0
0001D444 47F1 0000                  		lea	(a1,d0.w),a3
0001D448                            
0001D448                            loc_1C852:
0001D448 2C9B                       		move.l	(a3)+,(a6)
0001D44A 51C9 FFFC                  		dbf	d1,loc_1C852
0001D44E                            
0001D44E                            loc_1C858:
0001D44E 51CA FFE8                  		dbf	d2,loc_1C842
0001D452                            
0001D452 4E75                       		rts	
0001D454                            ; ===========================================================================
0001D454                            
0001D454                            loc_1C85E:
0001D454 2CBC 0000 0000             		move.l	#0,(a6)
0001D45A 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D45E                            
0001D45E 60EE                       		bra.s	loc_1C858
0001D460                            ; End of function Hud_Base
0001D460                            
0001D460                            ; ===========================================================================
0001D460 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D46C FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D470                            ; ---------------------------------------------------------------------------
0001D470                            ; Subroutine to	load debug mode	numbers	patterns
0001D470                            ; ---------------------------------------------------------------------------
0001D470                            
0001D470                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D470                            
0001D470                            
0001D470                            HudDb_XY:				; XREF: HudDebug
0001D470 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D47A 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D47E 4841                       		swap	d1
0001D480 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D484 6100                       		bsr.s	HudDb_XY2
0001D486 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D48A 4841                       		swap	d1
0001D48C 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D490                            ; End of function HudDb_XY
0001D490                            
0001D490                            
0001D490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D490                            
0001D490                            
0001D490                            HudDb_XY2:
0001D490 7C07                       		moveq	#7,d6
0001D492 43F9 0000 060E             		lea	(Art_Text).l,a1
0001D498                            
0001D498                            HudDb_XYLoop:
0001D498 E959                       		rol.w	#4,d1
0001D49A 3401                       		move.w	d1,d2
0001D49C 0242 000F                  		andi.w	#$F,d2
0001D4A0 0C42 000A                  		cmpi.w	#$A,d2
0001D4A4 6500                       		bcs.s	loc_1C8B2
0001D4A6 5E42                       		addq.w	#7,d2
0001D4A8                            
0001D4A8                            loc_1C8B2:
0001D4A8 EB4A                       		lsl.w	#5,d2
0001D4AA 47F1 2000                  		lea	(a1,d2.w),a3
0001D4AE 2C9B                       		move.l	(a3)+,(a6)
0001D4B0 2C9B                       		move.l	(a3)+,(a6)
0001D4B2 2C9B                       		move.l	(a3)+,(a6)
0001D4B4 2C9B                       		move.l	(a3)+,(a6)
0001D4B6 2C9B                       		move.l	(a3)+,(a6)
0001D4B8 2C9B                       		move.l	(a3)+,(a6)
0001D4BA 2C9B                       		move.l	(a3)+,(a6)
0001D4BC 2C9B                       		move.l	(a3)+,(a6)
0001D4BE 4841                       		swap	d1
0001D4C0 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D4C4                            
0001D4C4 4E75                       		rts	
0001D4C6                            ; End of function HudDb_XY2
0001D4C6                            
0001D4C6                            ; ---------------------------------------------------------------------------
0001D4C6                            ; Subroutine to	load rings numbers patterns
0001D4C6                            ; ---------------------------------------------------------------------------
0001D4C6                            
0001D4C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4C6                            
0001D4C6                            
0001D4C6                            Hud_Rings:				; XREF: HudUpdate
0001D4C6 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D4CC 7C02                       		moveq	#2,d6
0001D4CE 6000                       		bra.s	Hud_LoadArt
0001D4D0                            ; End of function Hud_Rings
0001D4D0                            
0001D4D0                            ; ---------------------------------------------------------------------------
0001D4D0                            ; Subroutine to	load score numbers patterns
0001D4D0                            ; ---------------------------------------------------------------------------
0001D4D0                            
0001D4D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4D0                            
0001D4D0                            
0001D4D0                            Hud_Score:				; XREF: HudUpdate
0001D4D0 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D4D6 7C05                       		moveq	#5,d6
0001D4D8                            
0001D4D8                            Hud_LoadArt:
0001D4D8 7800                       		moveq	#0,d4
0001D4DA 43FA 0000                  		lea	Art_Hud(pc),a1
0001D4DE                            
0001D4DE                            Hud_ScoreLoop:
0001D4DE 7400                       		moveq	#0,d2
0001D4E0 261A                       		move.l	(a2)+,d3
0001D4E2                            
0001D4E2                            loc_1C8EC:
0001D4E2 9283                       		sub.l	d3,d1
0001D4E4 6500                       		bcs.s	loc_1C8F4
0001D4E6 5242                       		addq.w	#1,d2
0001D4E8 60F8                       		bra.s	loc_1C8EC
0001D4EA                            ; ===========================================================================
0001D4EA                            
0001D4EA                            loc_1C8F4:
0001D4EA D283                       		add.l	d3,d1
0001D4EC 4A42                       		tst.w	d2
0001D4EE 6700                       		beq.s	loc_1C8FE
0001D4F0 383C 0001                  		move.w	#1,d4
0001D4F4                            
0001D4F4                            loc_1C8FE:
0001D4F4 4A44                       		tst.w	d4
0001D4F6 6700                       		beq.s	loc_1C92C
0001D4F8 ED4A                       		lsl.w	#6,d2
0001D4FA 2D40 0004                  		move.l	d0,4(a6)
0001D4FE 47F1 2000                  		lea	(a1,d2.w),a3
0001D502 2C9B                       		move.l	(a3)+,(a6)
0001D504 2C9B                       		move.l	(a3)+,(a6)
0001D506 2C9B                       		move.l	(a3)+,(a6)
0001D508 2C9B                       		move.l	(a3)+,(a6)
0001D50A 2C9B                       		move.l	(a3)+,(a6)
0001D50C 2C9B                       		move.l	(a3)+,(a6)
0001D50E 2C9B                       		move.l	(a3)+,(a6)
0001D510 2C9B                       		move.l	(a3)+,(a6)
0001D512 2C9B                       		move.l	(a3)+,(a6)
0001D514 2C9B                       		move.l	(a3)+,(a6)
0001D516 2C9B                       		move.l	(a3)+,(a6)
0001D518 2C9B                       		move.l	(a3)+,(a6)
0001D51A 2C9B                       		move.l	(a3)+,(a6)
0001D51C 2C9B                       		move.l	(a3)+,(a6)
0001D51E 2C9B                       		move.l	(a3)+,(a6)
0001D520 2C9B                       		move.l	(a3)+,(a6)
0001D522                            
0001D522                            loc_1C92C:
0001D522 0680 0040 0000             		addi.l	#$400000,d0
0001D528 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D52C                            
0001D52C 4E75                       		rts	
0001D52E                            ; End of function Hud_Score
0001D52E                            
0001D52E                            ; ---------------------------------------------------------------------------
0001D52E                            ; Subroutine to	load countdown numbers on the continue screen
0001D52E                            ; ---------------------------------------------------------------------------
0001D52E                            
0001D52E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D52E                            
0001D52E                            
0001D52E                            ContScrCounter:				; XREF: ContinueScreen
0001D52E 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D538 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D53E 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D544 7C01                       		moveq	#1,d6
0001D546 7800                       		moveq	#0,d4
0001D548 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D54C                            
0001D54C                            ContScr_Loop:
0001D54C 7400                       		moveq	#0,d2
0001D54E 261A                       		move.l	(a2)+,d3
0001D550                            
0001D550                            loc_1C95A:
0001D550 9283                       		sub.l	d3,d1
0001D552 6500                       		bcs.s	loc_1C962
0001D554 5242                       		addq.w	#1,d2
0001D556 60F8                       		bra.s	loc_1C95A
0001D558                            ; ===========================================================================
0001D558                            
0001D558                            loc_1C962:
0001D558 D283                       		add.l	d3,d1
0001D55A ED4A                       		lsl.w	#6,d2
0001D55C 47F1 2000                  		lea	(a1,d2.w),a3
0001D560 2C9B                       		move.l	(a3)+,(a6)
0001D562 2C9B                       		move.l	(a3)+,(a6)
0001D564 2C9B                       		move.l	(a3)+,(a6)
0001D566 2C9B                       		move.l	(a3)+,(a6)
0001D568 2C9B                       		move.l	(a3)+,(a6)
0001D56A 2C9B                       		move.l	(a3)+,(a6)
0001D56C 2C9B                       		move.l	(a3)+,(a6)
0001D56E 2C9B                       		move.l	(a3)+,(a6)
0001D570 2C9B                       		move.l	(a3)+,(a6)
0001D572 2C9B                       		move.l	(a3)+,(a6)
0001D574 2C9B                       		move.l	(a3)+,(a6)
0001D576 2C9B                       		move.l	(a3)+,(a6)
0001D578 2C9B                       		move.l	(a3)+,(a6)
0001D57A 2C9B                       		move.l	(a3)+,(a6)
0001D57C 2C9B                       		move.l	(a3)+,(a6)
0001D57E 2C9B                       		move.l	(a3)+,(a6)
0001D580 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D584                            
0001D584 4E75                       		rts	
0001D586                            ; End of function ContScrCounter
0001D586                            
0001D586                            ; ===========================================================================
0001D586                            ; ---------------------------------------------------------------------------
0001D586                            ; HUD counter sizes
0001D586                            ; ---------------------------------------------------------------------------
0001D586 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D58A 0000 2710                  Hud_10000:	dc.l 10000
0001D58E 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D592 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D596 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D59A 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D59E                            
0001D59E                            ; ---------------------------------------------------------------------------
0001D59E                            ; Subroutine to	load time numbers patterns
0001D59E                            ; ---------------------------------------------------------------------------
0001D59E                            
0001D59E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D59E                            
0001D59E                            
0001D59E                            Hud_Mins:				; XREF: Hud_ChkTime
0001D59E 45F9 0001 D59A             		lea	(Hud_1).l,a2
0001D5A4 7C00                       		moveq	#0,d6
0001D5A6 6000                       		bra.s	loc_1C9BA
0001D5A8                            ; End of function Hud_Mins
0001D5A8                            
0001D5A8                            
0001D5A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5A8                            
0001D5A8                            
0001D5A8                            Hud_Secs:				; XREF: Hud_ChkTime
0001D5A8 45F9 0001 D596             		lea	(Hud_10).l,a2
0001D5AE 7C01                       		moveq	#1,d6
0001D5B0                            
0001D5B0                            loc_1C9BA:
0001D5B0 7800                       		moveq	#0,d4
0001D5B2 43FA 0000                  		lea	Art_Hud(pc),a1
0001D5B6                            
0001D5B6                            Hud_TimeLoop:
0001D5B6 7400                       		moveq	#0,d2
0001D5B8 261A                       		move.l	(a2)+,d3
0001D5BA                            
0001D5BA                            loc_1C9C4:
0001D5BA 9283                       		sub.l	d3,d1
0001D5BC 6500                       		bcs.s	loc_1C9CC
0001D5BE 5242                       		addq.w	#1,d2
0001D5C0 60F8                       		bra.s	loc_1C9C4
0001D5C2                            ; ===========================================================================
0001D5C2                            
0001D5C2                            loc_1C9CC:
0001D5C2 D283                       		add.l	d3,d1
0001D5C4 4A42                       		tst.w	d2
0001D5C6 6700                       		beq.s	loc_1C9D6
0001D5C8 383C 0001                  		move.w	#1,d4
0001D5CC                            
0001D5CC                            loc_1C9D6:
0001D5CC ED4A                       		lsl.w	#6,d2
0001D5CE 2D40 0004                  		move.l	d0,4(a6)
0001D5D2 47F1 2000                  		lea	(a1,d2.w),a3
0001D5D6 2C9B                       		move.l	(a3)+,(a6)
0001D5D8 2C9B                       		move.l	(a3)+,(a6)
0001D5DA 2C9B                       		move.l	(a3)+,(a6)
0001D5DC 2C9B                       		move.l	(a3)+,(a6)
0001D5DE 2C9B                       		move.l	(a3)+,(a6)
0001D5E0 2C9B                       		move.l	(a3)+,(a6)
0001D5E2 2C9B                       		move.l	(a3)+,(a6)
0001D5E4 2C9B                       		move.l	(a3)+,(a6)
0001D5E6 2C9B                       		move.l	(a3)+,(a6)
0001D5E8 2C9B                       		move.l	(a3)+,(a6)
0001D5EA 2C9B                       		move.l	(a3)+,(a6)
0001D5EC 2C9B                       		move.l	(a3)+,(a6)
0001D5EE 2C9B                       		move.l	(a3)+,(a6)
0001D5F0 2C9B                       		move.l	(a3)+,(a6)
0001D5F2 2C9B                       		move.l	(a3)+,(a6)
0001D5F4 2C9B                       		move.l	(a3)+,(a6)
0001D5F6 0680 0040 0000             		addi.l	#$400000,d0
0001D5FC 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D600                            
0001D600 4E75                       		rts	
0001D602                            ; End of function Hud_Secs
0001D602                            
0001D602                            ; ---------------------------------------------------------------------------
0001D602                            ; Subroutine to	load time/ring bonus numbers patterns
0001D602                            ; ---------------------------------------------------------------------------
0001D602                            
0001D602                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D602                            
0001D602                            
0001D602                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D602 45F9 0001 D58E             		lea	(Hud_1000).l,a2
0001D608 7C03                       		moveq	#3,d6
0001D60A 7800                       		moveq	#0,d4
0001D60C 43FA 0000                  		lea	Art_Hud(pc),a1
0001D610                            
0001D610                            Hud_BonusLoop:
0001D610 7400                       		moveq	#0,d2
0001D612 261A                       		move.l	(a2)+,d3
0001D614                            
0001D614                            loc_1CA1E:
0001D614 9283                       		sub.l	d3,d1
0001D616 6500                       		bcs.s	loc_1CA26
0001D618 5242                       		addq.w	#1,d2
0001D61A 60F8                       		bra.s	loc_1CA1E
0001D61C                            ; ===========================================================================
0001D61C                            
0001D61C                            loc_1CA26:
0001D61C D283                       		add.l	d3,d1
0001D61E 4A42                       		tst.w	d2
0001D620 6700                       		beq.s	loc_1CA30
0001D622 383C 0001                  		move.w	#1,d4
0001D626                            
0001D626                            loc_1CA30:
0001D626 4A44                       		tst.w	d4
0001D628 6700                       		beq.s	Hud_ClrBonus
0001D62A ED4A                       		lsl.w	#6,d2
0001D62C 47F1 2000                  		lea	(a1,d2.w),a3
0001D630 2C9B                       		move.l	(a3)+,(a6)
0001D632 2C9B                       		move.l	(a3)+,(a6)
0001D634 2C9B                       		move.l	(a3)+,(a6)
0001D636 2C9B                       		move.l	(a3)+,(a6)
0001D638 2C9B                       		move.l	(a3)+,(a6)
0001D63A 2C9B                       		move.l	(a3)+,(a6)
0001D63C 2C9B                       		move.l	(a3)+,(a6)
0001D63E 2C9B                       		move.l	(a3)+,(a6)
0001D640 2C9B                       		move.l	(a3)+,(a6)
0001D642 2C9B                       		move.l	(a3)+,(a6)
0001D644 2C9B                       		move.l	(a3)+,(a6)
0001D646 2C9B                       		move.l	(a3)+,(a6)
0001D648 2C9B                       		move.l	(a3)+,(a6)
0001D64A 2C9B                       		move.l	(a3)+,(a6)
0001D64C 2C9B                       		move.l	(a3)+,(a6)
0001D64E 2C9B                       		move.l	(a3)+,(a6)
0001D650                            
0001D650                            loc_1CA5A:
0001D650 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D654                            
0001D654 4E75                       		rts	
0001D656                            ; ===========================================================================
0001D656                            
0001D656                            Hud_ClrBonus:
0001D656 7A0F                       		moveq	#$F,d5
0001D658                            
0001D658                            Hud_ClrBonusLoop:
0001D658 2CBC 0000 0000             		move.l	#0,(a6)
0001D65E 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D662                            
0001D662 60EC                       		bra.s	loc_1CA5A
0001D664                            ; End of function Hud_TimeRingBonus
0001D664                            
0001D664                            ; ---------------------------------------------------------------------------
0001D664                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D664                            ; ---------------------------------------------------------------------------
0001D664                            
0001D664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D664                            
0001D664                            
0001D664                            Hud_Lives:				; XREF: Hud_ChkLives
0001D664 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D66A 7200                       		moveq	#0,d1
0001D66C 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D670 45F9 0001 D596             		lea	(Hud_10).l,a2
0001D676 7C01                       		moveq	#1,d6
0001D678 7800                       		moveq	#0,d4
0001D67A 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D67E                            
0001D67E                            Hud_LivesLoop:
0001D67E 2D40 0004                  		move.l	d0,4(a6)
0001D682 7400                       		moveq	#0,d2
0001D684 261A                       		move.l	(a2)+,d3
0001D686                            
0001D686                            loc_1CA90:
0001D686 9283                       		sub.l	d3,d1
0001D688 6500                       		bcs.s	loc_1CA98
0001D68A 5242                       		addq.w	#1,d2
0001D68C 60F8                       		bra.s	loc_1CA90
0001D68E                            ; ===========================================================================
0001D68E                            
0001D68E                            loc_1CA98:
0001D68E D283                       		add.l	d3,d1
0001D690 4A42                       		tst.w	d2
0001D692 6700                       		beq.s	loc_1CAA2
0001D694 383C 0001                  		move.w	#1,d4
0001D698                            
0001D698                            loc_1CAA2:
0001D698 4A44                       		tst.w	d4
0001D69A 6700                       		beq.s	Hud_ClrLives
0001D69C                            
0001D69C                            loc_1CAA6:
0001D69C EB4A                       		lsl.w	#5,d2
0001D69E 47F1 2000                  		lea	(a1,d2.w),a3
0001D6A2 2C9B                       		move.l	(a3)+,(a6)
0001D6A4 2C9B                       		move.l	(a3)+,(a6)
0001D6A6 2C9B                       		move.l	(a3)+,(a6)
0001D6A8 2C9B                       		move.l	(a3)+,(a6)
0001D6AA 2C9B                       		move.l	(a3)+,(a6)
0001D6AC 2C9B                       		move.l	(a3)+,(a6)
0001D6AE 2C9B                       		move.l	(a3)+,(a6)
0001D6B0 2C9B                       		move.l	(a3)+,(a6)
0001D6B2                            
0001D6B2                            loc_1CABC:
0001D6B2 0680 0040 0000             		addi.l	#$400000,d0
0001D6B8 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D6BC                            
0001D6BC 4E75                       		rts	
0001D6BE                            ; ===========================================================================
0001D6BE                            
0001D6BE                            Hud_ClrLives:
0001D6BE 4A46                       		tst.w	d6
0001D6C0 67DA                       		beq.s	loc_1CAA6
0001D6C2 7A07                       		moveq	#7,d5
0001D6C4                            
0001D6C4                            Hud_ClrLivesLoop:
0001D6C4 2CBC 0000 0000             		move.l	#0,(a6)
0001D6CA 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D6CE 60E2                       		bra.s	loc_1CABC
0001D6D0                            ; End of function Hud_Lives
0001D6D0                            
0001D6D0                            ; ===========================================================================
0001D6D0                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D9D0                            		even
0001D9D0                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001DB10                            		even
0001DB10                            ; ===========================================================================
0001DB10                            ; ---------------------------------------------------------------------------
0001DB10                            ; When debug mode is currently in use
0001DB10                            ; ---------------------------------------------------------------------------
0001DB10                            
0001DB10                            DebugMode:				; XREF: Obj01; Obj09
0001DB10 7000                       		moveq	#0,d0
0001DB12 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DB16 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DB1A 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DB1E                            ; ===========================================================================
0001DB1E 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DB20 0000                       		dc.w Debug_Skip-Debug_Index
0001DB22                            ; ===========================================================================
0001DB22                            
0001DB22                            Debug_Main:				; XREF: Debug_Index
0001DB22 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DB26 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DB2C 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DB32 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DB38 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DB3E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DB44 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DB4A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DB50 117C 0000 001A             		move.b	#0,$1A(a0)
0001DB56 117C 0000 001C             		move.b	#0,$1C(a0)
0001DB5C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DB62 6600                       		bne.s	Debug_Zone	; if not, branch
0001DB64 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DB6A 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DB70 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DB72 6000                       		bra.s	Debug_UseList
0001DB74                            ; ===========================================================================
0001DB74                            
0001DB74                            Debug_Zone:
0001DB74 7000                       		moveq	#0,d0
0001DB76 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DB7A                            
0001DB7A                            Debug_UseList:
0001DB7A 45F9 0000 0000             		lea	(DebugList).l,a2
0001DB80 D040                       		add.w	d0,d0
0001DB82 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DB86 3C1A                       		move.w	(a2)+,d6
0001DB88 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DB8C 6200                       		bhi.s	loc_1CF9E
0001DB8E 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DB94                            
0001DB94                            loc_1CF9E:
0001DB94 6100 0000                  		bsr.w	Debug_ShowItem
0001DB98 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DB9E 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DBA4                            
0001DBA4                            Debug_Skip:				; XREF: Debug_Index
0001DBA4 7006                       		moveq	#6,d0
0001DBA6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DBAC 6700                       		beq.s	loc_1CFBE
0001DBAE 7000                       		moveq	#0,d0
0001DBB0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DBB4                            
0001DBB4                            loc_1CFBE:
0001DBB4 45F9 0000 0000             		lea	(DebugList).l,a2
0001DBBA D040                       		add.w	d0,d0
0001DBBC D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DBC0 3C1A                       		move.w	(a2)+,d6
0001DBC2 6100 0000                  		bsr.w	Debug_Control
0001DBC6 4EF9 0000 DE84             		jmp	DisplaySprite
0001DBCC                            
0001DBCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBCC                            
0001DBCC                            
0001DBCC                            Debug_Control:
0001DBCC 7800                       		moveq	#0,d4
0001DBCE 323C 0001                  		move.w	#1,d1
0001DBD2 1838 F605                  		move.b	($FFFFF605).w,d4
0001DBD6 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DBDA 6600                       		bne.s	loc_1D018	; if yes, branch
0001DBDC 1038 F604                  		move.b	($FFFFF604).w,d0
0001DBE0 0240 000F                  		andi.w	#$F,d0
0001DBE4 6600                       		bne.s	loc_1D000
0001DBE6 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DBEC 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DBF2 6000 0000                  		bra.w	Debug_BackItem
0001DBF6                            ; ===========================================================================
0001DBF6                            
0001DBF6                            loc_1D000:
0001DBF6 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DBFA 6600                       		bne.s	loc_1D01C
0001DBFC 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DC02 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DC06 6600                       		bne.s	loc_1D018
0001DC08 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DC0E                            
0001DC0E                            loc_1D018:
0001DC0E 1838 F604                  		move.b	($FFFFF604).w,d4
0001DC12                            
0001DC12                            loc_1D01C:
0001DC12 7200                       		moveq	#0,d1
0001DC14 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DC18 5241                       		addq.w	#1,d1
0001DC1A 4841                       		swap	d1
0001DC1C E881                       		asr.l	#4,d1
0001DC1E 2428 000C                  		move.l	$C(a0),d2
0001DC22 2628 0008                  		move.l	8(a0),d3
0001DC26 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DC2A 6700                       		beq.s	loc_1D03C	; if not, branch
0001DC2C 9481                       		sub.l	d1,d2
0001DC2E 6400                       		bcc.s	loc_1D03C
0001DC30 7400                       		moveq	#0,d2
0001DC32                            
0001DC32                            loc_1D03C:
0001DC32 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DC36 6700                       		beq.s	loc_1D052	; if not, branch
0001DC38 D481                       		add.l	d1,d2
0001DC3A 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DC40 6500                       		bcs.s	loc_1D052
0001DC42 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DC48                            
0001DC48                            loc_1D052:
0001DC48 0804 0002                  		btst	#2,d4
0001DC4C 6700                       		beq.s	loc_1D05E
0001DC4E 9681                       		sub.l	d1,d3
0001DC50 6400                       		bcc.s	loc_1D05E
0001DC52 7600                       		moveq	#0,d3
0001DC54                            
0001DC54                            loc_1D05E:
0001DC54 0804 0003                  		btst	#3,d4
0001DC58 6700                       		beq.s	loc_1D066
0001DC5A D681                       		add.l	d1,d3
0001DC5C                            
0001DC5C                            loc_1D066:
0001DC5C 2142 000C                  		move.l	d2,$C(a0)
0001DC60 2143 0008                  		move.l	d3,8(a0)
0001DC64                            
0001DC64                            Debug_BackItem:
0001DC64 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DC6A 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DC6C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DC72 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DC74 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DC78 6400                       		bcc.s	Debug_NoLoop
0001DC7A DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DC7E 6000                       		bra.s	Debug_NoLoop
0001DC80                            ; ===========================================================================
0001DC80                            
0001DC80                            Debug_NextItem:
0001DC80 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DC86 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DC88 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DC8C BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DC90 6200                       		bhi.s	Debug_NoLoop
0001DC92 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DC98                            
0001DC98                            Debug_NoLoop:
0001DC98 6000 0000                  		bra.w	Debug_ShowItem
0001DC9C                            ; ===========================================================================
0001DC9C                            
0001DC9C                            Debug_MakeItem:
0001DC9C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DCA2 6700                       		beq.s	Debug_Exit	; if not, branch
0001DCA4 4EB9 0000 E30A             		jsr	SingleObjLoad
0001DCAA 6600                       		bne.s	Debug_Exit
0001DCAC 3368 0008 0008             		move.w	8(a0),8(a1)
0001DCB2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DCB8 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DCBC 1368 0001 0001             		move.b	1(a0),1(a1)
0001DCC2 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DCC8 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DCCE 7000                       		moveq	#0,d0
0001DCD0 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DCD4 E748                       		lsl.w	#3,d0
0001DCD6 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DCDC 4E75                       		rts	
0001DCDE                            ; ===========================================================================
0001DCDE                            
0001DCDE                            Debug_Exit:
0001DCDE 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DCE4 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DCE6 7000                       		moveq	#0,d0
0001DCE8 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DCEC 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DCF4 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DCFA 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DCFE 3140 000A                  		move.w	d0,$A(a0)
0001DD02 3140 000E                  		move.w	d0,$E(a0)
0001DD06 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DD0C 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DD12 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DD18 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DD1A 4278 F780                  		clr.w	($FFFFF780).w
0001DD1E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DD24 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DD2C 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DD32 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DD38 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DD3E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DD44                            
0001DD44                            Debug_DoNothing:
0001DD44 4E75                       		rts	
0001DD46                            ; End of function Debug_Control
0001DD46                            
0001DD46                            
0001DD46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD46                            
0001DD46                            
0001DD46                            Debug_ShowItem:				; XREF: Debug_Main
0001DD46 7000                       		moveq	#0,d0
0001DD48 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DD4C E748                       		lsl.w	#3,d0
0001DD4E 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DD54 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DD5A 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DD60 4E75                       		rts	
0001DD62                            ; End of function Debug_ShowItem
0001DD62                            
0001DD62                            ; ===========================================================================
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62                            ; Debug	list pointers
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62                            DebugList:
0001DD62                            	include "_inc\Debug list pointers.asm"
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62                            ; Debug	list pointers
0001DD62                            ; ---------------------------------------------------------------------------
0001DD62 0000                       	dc.w Debug_GHZ-DebugList
0001DD64 0000                       	dc.w Debug_LZ-DebugList
0001DD66 0000                       	dc.w Debug_MZ-DebugList
0001DD68 0000                       	dc.w Debug_SLZ-DebugList
0001DD6A 0000                       	dc.w Debug_SYZ-DebugList
0001DD6C 0000                       	dc.w Debug_SBZ-DebugList
0001DD6E 0000                       	dc.w Debug_Ending-DebugList
0001DD70 0000                       	dc.w Debug_GHZ-DebugList
0001DD70 0000                       	dc.w Debug_GHZ-DebugList
0001DD72                            
0001DD72                            ; ---------------------------------------------------------------------------
0001DD72                            ; Debug	list - Green Hill
0001DD72                            ; ---------------------------------------------------------------------------
0001DD72                            Debug_GHZ:
0001DD72                            	include "_inc\Debug list - GHZ.asm"
0001DD72                            ; ---------------------------------------------------------------------------
0001DD72                            ; Debug	list - Green Hill
0001DD72                            ; ---------------------------------------------------------------------------
0001DD72 0010                       	dc.w $10			; number of items in list
0001DD74 2500 A670                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DD78 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DD7C 2600 AC76                  	dc.l Map_obj26+$26000000
0001DD80 0000 0680                  	dc.b 0,	0, 6, $80
0001DD84 1F00 9E68                  	dc.l Map_obj1F+$1F000000
0001DD88 0000 0400                  	dc.b 0,	0, 4, 0
0001DD8C 2200 A124                  	dc.l Map_obj22+$22000000
0001DD90 0000 0444                  	dc.b 0,	0, 4, $44
0001DD94 2B00 B2EA                  	dc.l Map_obj2B+$2B000000
0001DD98 0000 047B                  	dc.b 0,	0, 4, $7B
0001DD9C 3600 D826                  	dc.l Map_obj36+$36000000
0001DDA0 0000 051B                  	dc.b 0,	0, 5, $1B
0001DDA4 1800 8776                  	dc.l Map_obj18+$18000000
0001DDA8 0000 4000                  	dc.b 0,	0, $40,	0
0001DDAC 3B00 D94C                  	dc.l Map_obj3B+$3B000000
0001DDB0 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DDB4 4001 001E                  	dc.l Map_obj40+$40000000
0001DDB8 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DDBC 4100 E598                  	dc.l Map_obj41+$41000000
0001DDC0 0000 0523                  	dc.b 0,	0, 5, $23
0001DDC4 4200 E7BE                  	dc.l Map_obj42+$42000000
0001DDC8 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DDCC 4400 EACC                  	dc.l Map_obj44+$44000000
0001DDD0 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DDD4 1900 8876                  	dc.l Map_obj48+$19000000
0001DDD8 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DDDC 7901 7A70                  	dc.l Map_obj79+$79000000
0001DDE0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DDE4 4B00 A6B0                  	dc.l Map_obj4B+$4B000000
0001DDE8 0000 2400                  	dc.b 0,	0, $24,	0
0001DDEC 7D01 7BC0                  	dc.l Map_obj7D+$7D000000
0001DDF0 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DDF4                            	even
0001DDF4                            	even
0001DDF4                            
0001DDF4                            ; ---------------------------------------------------------------------------
0001DDF4                            ; Debug	list - Labyrinth
0001DDF4                            ; ---------------------------------------------------------------------------
0001DDF4                            Debug_LZ:
0001DDF4                            	include "_inc\Debug list - LZ.asm"
0001DDF4                            ; ---------------------------------------------------------------------------
0001DDF4                            ; Debug	list - Labyrinth
0001DDF4                            ; ---------------------------------------------------------------------------
0001DDF4 0019                       	dc.w $19
0001DDF6 2500 A670                  	dc.l Map_obj25+$25000000
0001DDFA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DDFE 2600 AC76                  	dc.l Map_obj26+$26000000
0001DE02 0000 0680                  	dc.b 0,	0, 6, $80
0001DE06 4100 E598                  	dc.l Map_obj41+$41000000
0001DE0A 0000 0523                  	dc.b 0,	0, 5, $23
0001DE0E 2C00 B39A                  	dc.l Map_obj2C+$2C000000
0001DE12 0800 2486                  	dc.b 8,	0, $24,	$86
0001DE16 2D00 B58E                  	dc.l Map_obj2D+$2D000000
0001DE1A 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DE1E 1601 27F8                  	dc.l Map_obj16+$16000000
0001DE22 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DE26 1601 27F8                  	dc.l Map_obj16+$16000000
0001DE2A 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DE2E 3300 CA46                  	dc.l Map_obj33+$33000000
0001DE32 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DE36 3200 C606                  	dc.l Map_obj32+$32000000
0001DE3A 0000 0513                  	dc.b 0,	0, 5, $13
0001DE3E 3600 D826                  	dc.l Map_obj36+$36000000
0001DE42 0000 051B                  	dc.b 0,	0, 5, $1B
0001DE46 5201 091A                  	dc.l Map_obj52a+$52000000
0001DE4A 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DE4E 6101 2A20                  	dc.l Map_obj61+$61000000
0001DE52 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DE56 6101 2A20                  	dc.l Map_obj61+$61000000
0001DE5A 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DE5E 6101 2A20                  	dc.l Map_obj61+$61000000
0001DE62 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DE66 6201 2B74                  	dc.l Map_obj62+$62000000
0001DE6A 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DE6E 6101 2A20                  	dc.l Map_obj61+$61000000
0001DE72 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DE76 6101 2A20                  	dc.l Map_obj61+$61000000
0001DE7A 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DE7E 6301 2ED2                  	dc.l Map_obj63+$63000000
0001DE82 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DE86 6001 2742                  	dc.l Map_obj60+$60000000
0001DE8A 0000 0467                  	dc.b 0,	0, 4, $67
0001DE8E 6401 3218                  	dc.l Map_obj64+$64000000
0001DE92 8413 8348                  	dc.b $84, $13, $83, $48
0001DE96 6501 33A0                  	dc.l Map_obj65+$65000000
0001DE9A 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DE9E 6501 33A0                  	dc.l Map_obj65+$65000000
0001DEA2 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DEA6 0B01 1B92                  	dc.l Map_obj0B+$B000000
0001DEAA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DEAE 0C01 1C62                  	dc.l Map_obj0C+$C000000
0001DEB2 0200 4328                  	dc.b 2,	0, $43,	$28
0001DEB6 7901 7A70                  	dc.l Map_obj79+$79000000
0001DEBA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DEBE                            	even
0001DEBE                            	even
0001DEBE                            
0001DEBE                            ; ---------------------------------------------------------------------------
0001DEBE                            ; Debug	list - Marble
0001DEBE                            ; ---------------------------------------------------------------------------
0001DEBE                            Debug_MZ:
0001DEBE                            	include "_inc\Debug list - MZ.asm"
0001DEBE                            ; ---------------------------------------------------------------------------
0001DEBE                            ; Debug	list - Marble
0001DEBE                            ; ---------------------------------------------------------------------------
0001DEBE 0012                       	dc.w $12
0001DEC0 2500 A670                  	dc.l Map_obj25+$25000000
0001DEC4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DEC8 2600 AC76                  	dc.l Map_obj26+$26000000
0001DECC 0000 0680                  	dc.b 0,	0, 6, $80
0001DED0 2200 A124                  	dc.l Map_obj22+$22000000
0001DED4 0000 0444                  	dc.b 0,	0, 4, $44
0001DED8 3600 D826                  	dc.l Map_obj36+$36000000
0001DEDC 0000 051B                  	dc.b 0,	0, 5, $1B
0001DEE0 4100 E598                  	dc.l Map_obj41+$41000000
0001DEE4 0000 0523                  	dc.b 0,	0, 5, $23
0001DEE8 1300 BAD0                  	dc.l Map_obj14+$13000000
0001DEEC 0000 0345                  	dc.b 0,	0, 3, $45
0001DEF0 4600 F17E                  	dc.l Map_obj46+$46000000
0001DEF4 0000 4000                  	dc.b 0,	0, $40,	0
0001DEF8 4C00 FACA                  	dc.l Map_obj4C+$4C000000
0001DEFC 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DF00 4E00 FDAE                  	dc.l Map_obj4E+$4E000000
0001DF04 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DF08 3300 CA46                  	dc.l Map_obj33+$33000000
0001DF0C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DF10 5001 01AC                  	dc.l Map_obj50+$50000000
0001DF14 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DF18 5101 064E                  	dc.l Map_obj51+$51000000
0001DF1C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DF20 5201 08C4                  	dc.l Map_obj52+$52000000
0001DF24 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DF28 5300 8E0E                  	dc.l Map_obj53+$53000000
0001DF2C 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DF30 5400 FA90                  	dc.l Map_obj54+$54000000
0001DF34 0000 8680                  	dc.b 0,	0, $86,	$80
0001DF38 5501 0AB8                  	dc.l Map_obj55+$55000000
0001DF3C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DF40 7801 76EA                  	dc.l Map_obj78+$78000000
0001DF44 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DF48 7901 7A70                  	dc.l Map_obj79+$79000000
0001DF4C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DF50                            	even
0001DF50                            	even
0001DF50                            
0001DF50                            ; ---------------------------------------------------------------------------
0001DF50                            ; Debug	list - Star Light
0001DF50                            ; ---------------------------------------------------------------------------
0001DF50                            Debug_SLZ:
0001DF50                            	include "_inc\Debug list - SLZ.asm"
0001DF50                            ; ---------------------------------------------------------------------------
0001DF50                            ; Debug	list - Star Light
0001DF50                            ; ---------------------------------------------------------------------------
0001DF50 000F                       	dc.w $F
0001DF52 2500 A670                  	dc.l Map_obj25+$25000000
0001DF56 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DF5A 2600 AC76                  	dc.l Map_obj26+$26000000
0001DF5E 0000 0680                  	dc.b 0,	0, 6, $80
0001DF62 5901 15BA                  	dc.l Map_obj59+$59000000
0001DF66 0000 4000                  	dc.b 0,	0, $40,	0
0001DF6A 5300 8E0E                  	dc.l Map_obj53+$53000000
0001DF6E 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DF72 1800 87D4                  	dc.l Map_obj18b+$18000000
0001DF76 0000 4000                  	dc.b 0,	0, $40,	0
0001DF7A 5A01 16F4                  	dc.l Map_obj5A+$5A000000
0001DF7E 0000 4000                  	dc.b 0,	0, $40,	0
0001DF82 5B01 18AC                  	dc.l Map_obj5B+$5B000000
0001DF86 0000 4000                  	dc.b 0,	0, $40,	0
0001DF8A 5D01 1E7C                  	dc.l Map_obj5D+$5D000000
0001DF8E 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DF92 5E01 220E                  	dc.l Map_obj5E+$5E000000
0001DF96 0000 0374                  	dc.b 0,	0, 3, $74
0001DF9A 4100 E598                  	dc.l Map_obj41+$41000000
0001DF9E 0000 0523                  	dc.b 0,	0, 5, $23
0001DFA2 1300 BAD0                  	dc.l Map_obj14+$13000000
0001DFA6 0000 0480                  	dc.b 0,	0, 4, $80
0001DFAA 1C00 8F1E                  	dc.l Map_obj1C+$1C000000
0001DFAE 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DFB2 5F01 248C                  	dc.l Map_obj5F+$5F000000
0001DFB6 0000 0400                  	dc.b 0,	0, 4, 0
0001DFBA 6001 2742                  	dc.l Map_obj60+$60000000
0001DFBE 0000 2429                  	dc.b 0,	0, $24,	$29
0001DFC2 7901 7A70                  	dc.l Map_obj79+$79000000
0001DFC6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DFCA                            	even
0001DFCA                            	even
0001DFCA                            
0001DFCA                            ; ---------------------------------------------------------------------------
0001DFCA                            ; Debug	list - Spring Yard
0001DFCA                            ; ---------------------------------------------------------------------------
0001DFCA                            Debug_SYZ:
0001DFCA                            	include "_inc\Debug list - SYZ.asm"
0001DFCA                            ; ---------------------------------------------------------------------------
0001DFCA                            ; Debug	list - Spring Yard
0001DFCA                            ; ---------------------------------------------------------------------------
0001DFCA 000F                       	dc.w $F
0001DFCC 2500 A670                  	dc.l Map_obj25+$25000000
0001DFD0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DFD4 2600 AC76                  	dc.l Map_obj26+$26000000
0001DFD8 0000 0680                  	dc.b 0,	0, 6, $80
0001DFDC 3600 D826                  	dc.l Map_obj36+$36000000
0001DFE0 0000 051B                  	dc.b 0,	0, 5, $1B
0001DFE4 4100 E598                  	dc.l Map_obj41+$41000000
0001DFE8 0000 0523                  	dc.b 0,	0, 5, $23
0001DFEC 4300 EA1E                  	dc.l Map_obj43+$43000000
0001DFF0 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DFF4 1200 F1FC                  	dc.l Map_obj12+$12000000
0001DFF8 0000 0000                  	dc.b 0,	0, 0, 0
0001DFFC 4700 F378                  	dc.l Map_obj47+$47000000
0001E000 0000 0380                  	dc.b 0,	0, 3, $80
0001E004 1F00 9E68                  	dc.l Map_obj1F+$1F000000
0001E008 0000 0400                  	dc.b 0,	0, 4, 0
0001E00C 2200 A124                  	dc.l Map_obj22+$22000000
0001E010 0000 0444                  	dc.b 0,	0, 4, $44
0001E014 5001 01AC                  	dc.l Map_obj50+$50000000
0001E018 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E01C 1800 87C2                  	dc.l Map_obj18a+$18000000
0001E020 0000 4000                  	dc.b 0,	0, $40,	0
0001E024 5601 0F7A                  	dc.l Map_obj56+$56000000
0001E028 0000 4000                  	dc.b 0,	0, $40,	0
0001E02C 3200 C606                  	dc.l Map_obj32+$32000000
0001E030 0000 0513                  	dc.b 0,	0, 5, $13
0001E034 7801 76EA                  	dc.l Map_obj78+$78000000
0001E038 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E03C 7901 7A70                  	dc.l Map_obj79+$79000000
0001E040 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E044                            	even
0001E044                            	even
0001E044                            
0001E044                            ; ---------------------------------------------------------------------------
0001E044                            ; Debug	list - Scrap Brain
0001E044                            ; ---------------------------------------------------------------------------
0001E044                            Debug_SBZ:
0001E044                            	include "_inc\Debug list - SBZ.asm"
0001E044                            ; ---------------------------------------------------------------------------
0001E044                            ; Debug	list - Scrap Brain
0001E044                            ; ---------------------------------------------------------------------------
0001E044 001D                       	dc.w $1D
0001E046 2500 A670                  	dc.l Map_obj25+$25000000
0001E04A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E04E 2600 AC76                  	dc.l Map_obj26+$26000000
0001E052 0000 0680                  	dc.b 0,	0, 6, $80
0001E056 5F01 248C                  	dc.l Map_obj5F+$5F000000
0001E05A 0000 0400                  	dc.b 0,	0, 4, 0
0001E05E 6001 2742                  	dc.l Map_obj60+$60000000
0001E062 0000 0429                  	dc.b 0,	0, 4, $29
0001E066 7801 76EA                  	dc.l Map_obj78+$78000000
0001E06A 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E06E 1501 1316                  	dc.l Map_obj15b+$15000000
0001E072 0702 4391                  	dc.b 7,	2, $43,	$91
0001E076 6701 6002                  	dc.l Map_obj67+$67000000
0001E07A E000 C344                  	dc.b $E0, 0, $C3, $44
0001E07E 5201 08C4                  	dc.l Map_obj52+$52000000
0001E082 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E086 3200 C606                  	dc.l Map_obj32+$32000000
0001E08A 0000 0513                  	dc.b 0,	0, 5, $13
0001E08E 6901 625C                  	dc.l Map_obj69+$69000000
0001E092 0300 4492                  	dc.b 3,	0, $44,	$92
0001E096 6901 62B6                  	dc.l Map_obj69a+$69000000
0001E09A 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E09E 6A01 6514                  	dc.l Map_obj6A+$6A000000
0001E0A2 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E0A6 5300 8E0E                  	dc.l Map_obj53+$53000000
0001E0AA 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E0AE 5201 08C4                  	dc.l Map_obj52+$52000000
0001E0B2 3903 4460                  	dc.b $39, 3, $44, $60
0001E0B6 6B01 68E4                  	dc.l Map_obj6B+$6B000000
0001E0BA 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E0BE 2A00 90B4                  	dc.l Map_obj2A+$2A000000
0001E0C2 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E0C6 6B01 68E4                  	dc.l Map_obj6B+$6B000000
0001E0CA 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E0CE 6A01 6514                  	dc.l Map_obj6A+$6A000000
0001E0D2 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E0D6 6B01 68E4                  	dc.l Map_obj6B+$6B000000
0001E0DA 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E0DE 6A01 6514                  	dc.l Map_obj6A+$6A000000
0001E0E2 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E0E6 6B01 68E4                  	dc.l Map_obj6B+$6B000000
0001E0EA 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E0EE 6C01 6AA6                  	dc.l Map_obj6C+$6C000000
0001E0F2 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E0F6 6D00 EE6E                  	dc.l Map_obj6D+$6D000000
0001E0FA 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E0FE 6D00 EE6E                  	dc.l Map_obj6D+$6D000000
0001E102 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E106 6E01 6B5C                  	dc.l Map_obj6E+$6E000000
0001E10A 0400 047E                  	dc.b 4,	0, 4, $7E
0001E10E 7001 6FAE                  	dc.l Map_obj70+$70000000
0001E112 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E116 7101 1D22                  	dc.l Map_obj71+$71000000
0001E11A 1100 8680                  	dc.b $11, 0, $86, $80
0001E11E 1E00 9572                  	dc.l Map_obj1E+$1E000000
0001E122 0400 2302                  	dc.b 4,	0, $23,	2
0001E126 7901 7A70                  	dc.l Map_obj79+$79000000
0001E12A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E12E                            	even
0001E12E                            	even
0001E12E                            
0001E12E                            ; ---------------------------------------------------------------------------
0001E12E                            ; Debug	list - ending sequence / special stage
0001E12E                            ; ---------------------------------------------------------------------------
0001E12E                            Debug_Ending:
0001E12E                            	include "_inc\Debug list - Ending and SS.asm"
0001E12E                            ; ---------------------------------------------------------------------------
0001E12E                            ; Debug	list - ending sequence / special stage
0001E12E                            ; ---------------------------------------------------------------------------
0001E12E 000D                       	dc.w $D
0001E130 2500 A670                  	dc.l Map_obj25+$25000000
0001E134 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E138 4700 F378                  	dc.l Map_obj47+$47000000
0001E13C 0000 0380                  	dc.b 0,	0, 3, $80
0001E140 2800 9B9A                  	dc.l Map_obj28a+$28000000
0001E144 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E148 2800 9B9A                  	dc.l Map_obj28a+$28000000
0001E14C 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E150 2800 9B9A                  	dc.l Map_obj28a+$28000000
0001E154 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E158 2800 9B82                  	dc.l Map_obj28+$28000000
0001E15C 0D00 0553                  	dc.b $D, 0, 5, $53
0001E160 2800 9B82                  	dc.l Map_obj28+$28000000
0001E164 0E00 0553                  	dc.b $E, 0, 5, $53
0001E168 2800 9B82                  	dc.l Map_obj28+$28000000
0001E16C 0F00 0573                  	dc.b $F, 0, 5, $73
0001E170 2800 9B82                  	dc.l Map_obj28+$28000000
0001E174 1000 0573                  	dc.b $10, 0, 5,	$73
0001E178 2800 9B9A                  	dc.l Map_obj28a+$28000000
0001E17C 1100 0585                  	dc.b $11, 0, 5,	$85
0001E180 2800 9BB2                  	dc.l Map_obj28b+$28000000
0001E184 1200 0593                  	dc.b $12, 0, 5,	$93
0001E188 2800 9B9A                  	dc.l Map_obj28a+$28000000
0001E18C 1300 0565                  	dc.b $13, 0, 5,	$65
0001E190 2800 9BB2                  	dc.l Map_obj28b+$28000000
0001E194 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E198                            	even
0001E198                            	even
0001E198                            
0001E198                            ; ---------------------------------------------------------------------------
0001E198                            ; Main level load blocks
0001E198                            ; ---------------------------------------------------------------------------
0001E198                            MainLoadBlocks:
0001E198                            	include "_inc\Main level load blocks.asm"
0001E198                            ; ---------------------------------------------------------------------------
0001E198                            ; Main level load blocks
0001E198                            ;
0001E198                            ; ===FORMAT===
0001E198                            ; level	patterns + (1st	PLC num	* 10^6)
0001E198                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E198                            ; 256x256 mappings
0001E198                            ; blank, music (unused), pal index (unused), pal index
0001E198                            ; ---------------------------------------------------------------------------
0001E198 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001E19C 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001E1A0 0000 0000                  	dc.l Blk256_GHZ
0001E1A4 0081 0404                  	dc.b 0,	$81, 4,	4
0001E1A8 0000 0000                  	dc.l Nem_LZ|6<<24
0001E1AC 0000 0000                  	dc.l Blk16_LZ|7<<24
0001E1B0 0000 0000                  	dc.l Blk256_LZ
0001E1B4 0082 0505                  	dc.b 0,	$82, 5,	5
0001E1B8 0000 0000                  	dc.l Nem_MZ|8<<24
0001E1BC 0000 0000                  	dc.l Blk16_MZ|9<<24
0001E1C0 0000 0000                  	dc.l Blk256_MZ
0001E1C4 0083 0606                  	dc.b 0,	$83, 6,	6
0001E1C8 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001E1CC 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001E1D0 0000 0000                  	dc.l Blk256_SLZ
0001E1D4 0084 0707                  	dc.b 0,	$84, 7,	7
0001E1D8 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001E1DC 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001E1E0 0000 0000                  	dc.l Blk256_SYZ
0001E1E4 0085 0808                  	dc.b 0,	$85, 8,	8
0001E1E8 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001E1EC 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001E1F0 0000 0000                  	dc.l Blk256_SBZ
0001E1F4 0086 0909                  	dc.b 0,	$86, 9,	9
0001E1F8 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E1FC 0000 0000                  	dc.l Blk16_GHZ
0001E200 0000 0000                  	dc.l Blk256_GHZ
0001E204 0086 1313                  	dc.b 0,	$86, $13, $13
0001E208                            ; there you go lol
0001E208 0000 0000                  	dc.l Nem_BHZ|$20<<24 ; MAKOTO ZONE
0001E20C 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001E210 0000 0000                  	dc.l Blk256_BHZ
0001E214 009E 1515                  	dc.b 0,	$9E, $15, $15
0001E218                            	even
0001E218                            	even
0001E218                            
0001E218                            ; ---------------------------------------------------------------------------
0001E218                            ; Pattern load cues
0001E218                            ; ---------------------------------------------------------------------------
0001E218                            ArtLoadCues:
0001E218                            	include "_inc\Pattern load cues.asm"
0001E218                            ; ---------------------------------------------------------------------------
0001E218                            ; Pattern load cues - index
0001E218                            ; ---------------------------------------------------------------------------
0001E218 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001E21C 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001E220 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001E224 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E228 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E22C 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E230 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E234 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E238 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001E23C 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E240 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E244 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E248 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E24C 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E250 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E254 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E258                            
0001E258 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001E25C 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E25E 0000                       	dc.w PLC_TruthNuke-ArtLoadCues	; GMZ
0001E260                            ; ---------------------------------------------------------------------------
0001E260                            ; Pattern load cues - standard block 1
0001E260                            ; ---------------------------------------------------------------------------
0001E260 0004                       PLC_Main:	dc.w 4
0001E262 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E266 F400                       		dc.w $F400
0001E268 0000 0000                  		dc.l Nem_Hud		; HUD
0001E26C D940                       		dc.w $D940
0001E26E 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E272 FA80                       		dc.w $FA80
0001E274 0000 0000                  		dc.l Nem_Ring		; rings
0001E278 F640                       		dc.w $F640
0001E27A 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E27E F2E0                       		dc.w $F2E0
0001E280                            ; ---------------------------------------------------------------------------
0001E280                            ; Pattern load cues - standard block 2
0001E280                            ; ---------------------------------------------------------------------------
0001E280 0002                       PLC_Main2:	dc.w 2
0001E282 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E286 D000                       		dc.w $D000
0001E288 0000 0000                  		dc.l Nem_Shield		; shield
0001E28C A820                       		dc.w $A820
0001E28E 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E292 AB80                       		dc.w $AB80
0001E294                            ; ---------------------------------------------------------------------------
0001E294                            ; Pattern load cues - explosion
0001E294                            ; ---------------------------------------------------------------------------
0001E294 0000                       PLC_Explode:	dc.w 0
0001E296 0000 0000                  		dc.l Nem_Explode	; explosion
0001E29A B400                       		dc.w $B400
0001E29C                            ; ---------------------------------------------------------------------------
0001E29C                            ; Pattern load cues - game/time	over
0001E29C                            ; ---------------------------------------------------------------------------
0001E29C 0000                       PLC_GameOver:	dc.w 0
0001E29E 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E2A2 ABC0                       		dc.w $ABC0
0001E2A4                            ; ---------------------------------------------------------------------------
0001E2A4                            ; Pattern load cues - Green Hill
0001E2A4                            ; ---------------------------------------------------------------------------
0001E2A4 000B                       PLC_GHZ:	dc.w $B
0001E2A6 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E2AA 0000                       		dc.w 0
0001E2AC 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E2B0 39A0                       		dc.w $39A0
0001E2B2 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E2B6 6B00                       		dc.w $6B00
0001E2B8 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E2BC 7A00                       		dc.w $7A00
0001E2BE 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E2C2 8000                       		dc.w $8000
0001E2C4 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E2C8 8880                       		dc.w $8880
0001E2CA 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E2CE 8F60                       		dc.w $8F60
0001E2D0 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E2D4 9360                       		dc.w $9360
0001E2D6 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E2DA 9E00                       		dc.w $9E00
0001E2DC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E2E0 A360                       		dc.w $A360
0001E2E2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E2E6 A460                       		dc.w $A460
0001E2E8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E2EC A660                       		dc.w $A660
0001E2EE 0005                       PLC_GHZ2:	dc.w 5
0001E2F0 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E2F4 7000                       		dc.w $7000
0001E2F6 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E2FA 71C0                       		dc.w $71C0
0001E2FC 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E300 7300                       		dc.w $7300
0001E302 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E306 7540                       		dc.w $7540
0001E308 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E30C A1E0                       		dc.w $A1E0
0001E30E 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E312 6980                       		dc.w $6980
0001E314                            ; ---------------------------------------------------------------------------
0001E314                            ; Pattern load cues - Labyrinth
0001E314                            ; ---------------------------------------------------------------------------
0001E314 000B                       PLC_LZ:		dc.w $B
0001E316 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E31A 0000                       		dc.w 0
0001E31C 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E320 3C00                       		dc.w $3C00
0001E322 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E326 3E00                       		dc.w $3E00
0001E328 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E32C 4B20                       		dc.w $4B20
0001E32E 0000 0000                  		dc.l Nem_Water		; water	surface
0001E332 6000                       		dc.w $6000
0001E334 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E338 6200                       		dc.w $6200
0001E33A 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E33E 6500                       		dc.w $6500
0001E340 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E344 6900                       		dc.w $6900
0001E346 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E34A 7780                       		dc.w $7780
0001E34C 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E350 7880                       		dc.w $7880
0001E352 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E356 7980                       		dc.w $7980
0001E358 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E35C 94C0                       		dc.w $94C0
0001E35E 000C                       PLC_LZ2:	dc.w $C
0001E360 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E364 7BC0                       		dc.w $7BC0
0001E366 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E36A 7CC0                       		dc.w $7CC0
0001E36C 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E370 7EC0                       		dc.w $7EC0
0001E372 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E376 5D20                       		dc.w $5D20
0001E378 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E37C 8800                       		dc.w $8800
0001E37E 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E382 89E0                       		dc.w $89E0
0001E384 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E388 8CE0                       		dc.w $8CE0
0001E38A 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E38E 90C0                       		dc.w $90C0
0001E390 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E394 A1E0                       		dc.w $A1E0
0001E396 0000 0000                  		dc.l Nem_Cork		; cork block
0001E39A A000                       		dc.w $A000
0001E39C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E3A0 A360                       		dc.w $A360
0001E3A2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E3A6 A460                       		dc.w $A460
0001E3A8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E3AC A660                       		dc.w $A660
0001E3AE                            ; ---------------------------------------------------------------------------
0001E3AE                            ; Pattern load cues - Marble
0001E3AE                            ; ---------------------------------------------------------------------------
0001E3AE 0009                       PLC_MZ:		dc.w 9
0001E3B0 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E3B4 0000                       		dc.w 0
0001E3B6 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E3BA 6000                       		dc.w $6000
0001E3BC 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E3C0 68A0                       		dc.w $68A0
0001E3C2 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E3C6 7000                       		dc.w $7000
0001E3C8 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E3CC 71C0                       		dc.w $71C0
0001E3CE 0000 0000                  		dc.l Nem_Lava		; lava
0001E3D2 7500                       		dc.w $7500
0001E3D4 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E3D8 8880                       		dc.w $8880
0001E3DA 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E3DE 8F60                       		dc.w $8F60
0001E3E0 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E3E4 9700                       		dc.w $9700
0001E3E6 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E3EA 9FE0                       		dc.w $9FE0
0001E3EC 0004                       PLC_MZ2:	dc.w 4
0001E3EE 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E3F2 A260                       		dc.w $A260
0001E3F4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E3F8 A360                       		dc.w $A360
0001E3FA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E3FE A460                       		dc.w $A460
0001E400 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E404 A660                       		dc.w $A660
0001E406 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E40A 5700                       		dc.w $5700
0001E40C                            ; ---------------------------------------------------------------------------
0001E40C                            ; Pattern load cues - Star Light
0001E40C                            ; ---------------------------------------------------------------------------
0001E40C 0008                       PLC_SLZ:	dc.w 8
0001E40E 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E412 0000                       		dc.w 0
0001E414 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E418 8000                       		dc.w $8000
0001E41A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E41E 8520                       		dc.w $8520
0001E420 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E424 9000                       		dc.w $9000
0001E426 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E42A 9C00                       		dc.w $9C00
0001E42C 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E430 A260                       		dc.w $A260
0001E432 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E436 A360                       		dc.w $A360
0001E438 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E43C A460                       		dc.w $A460
0001E43E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E442 A660                       		dc.w $A660
0001E444 0005                       PLC_SLZ2:	dc.w 5
0001E446 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E44A 6E80                       		dc.w $6E80
0001E44C 0000 0000                  		dc.l Nem_Fan		; fan
0001E450 7400                       		dc.w $7400
0001E452 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E456 7980                       		dc.w $7980
0001E458 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E45C 7B80                       		dc.w $7B80
0001E45E 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E462 9B00                       		dc.w $9B00
0001E464 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E468 9E00                       		dc.w $9E00
0001E46A                            ; ---------------------------------------------------------------------------
0001E46A                            ; Pattern load cues - Spring Yard
0001E46A                            ; ---------------------------------------------------------------------------
0001E46A 0004                       PLC_SYZ:	dc.w 4
0001E46C 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E470 0000                       		dc.w 0
0001E472 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E476 8000                       		dc.w $8000
0001E478 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E47C 8880                       		dc.w $8880
0001E47E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E482 8F60                       		dc.w $8F60
0001E484 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E488 9700                       		dc.w $9700
0001E48A 0007                       PLC_SYZ2:	dc.w 7
0001E48C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E490 7000                       		dc.w $7000
0001E492 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E496 72C0                       		dc.w $72C0
0001E498 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E49C 7740                       		dc.w $7740
0001E49E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E4A2 9FE0                       		dc.w $9FE0
0001E4A4 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E4A8 A1E0                       		dc.w $A1E0
0001E4AA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E4AE A360                       		dc.w $A360
0001E4B0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E4B4 A460                       		dc.w $A460
0001E4B6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E4BA A660                       		dc.w $A660
0001E4BC                            ; ---------------------------------------------------------------------------
0001E4BC                            ; Pattern load cues - Scrap Brain
0001E4BC                            ; ---------------------------------------------------------------------------
0001E4BC 000B                       PLC_SBZ:	dc.w $B
0001E4BE 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E4C2 0000                       		dc.w 0
0001E4C4 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E4C8 5800                       		dc.w $5800
0001E4CA 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E4CE 5D00                       		dc.w $5D00
0001E4D0 0000 0000                  		dc.l Nem_Girder		; girder
0001E4D4 5E00                       		dc.w $5E00
0001E4D6 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E4DA 6040                       		dc.w $6040
0001E4DC 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E4E0 6880                       		dc.w $6880
0001E4E2 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E4E6 6900                       		dc.w $6900
0001E4E8 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E4EC 7220                       		dc.w $7220
0001E4EE 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E4F2 76A0                       		dc.w $76A0
0001E4F4 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E4F8 7B20                       		dc.w $7B20
0001E4FA 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E4FE 7EA0                       		dc.w $7EA0
0001E500 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E504 9860                       		dc.w $9860
0001E506 000C                       PLC_SBZ2:	dc.w $C
0001E508 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E50C 5600                       		dc.w $5600
0001E50E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E512 8000                       		dc.w $8000
0001E514 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E518 8520                       		dc.w $8520
0001E51A 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E51E 8C00                       		dc.w $8C00
0001E520 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E524 8DE0                       		dc.w $8DE0
0001E526 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E52A 8FC0                       		dc.w $8FC0
0001E52C 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E530 9240                       		dc.w $9240
0001E532 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E536 7F20                       		dc.w $7F20
0001E538 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E53C 9BE0                       		dc.w $9BE0
0001E53E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E542 A1E0                       		dc.w $A1E0
0001E544 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E548 A360                       		dc.w $A360
0001E54A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E54E A460                       		dc.w $A460
0001E550 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E554 A660                       		dc.w $A660
0001E556                            ; ---------------------------------------------------------------------------
0001E556                            ; Pattern load cues - DR. Breen Hill
0001E556                            ; ---------------------------------------------------------------------------
0001E556 000A                       PLC_BHZ:	dc.w $A
0001E558 0000 0000                  		dc.l Nem_BHZ	; GHZ main patterns
0001E55C 0000                       		dc.w 0
0001E55E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E562 6B00                       		dc.w $6B00
0001E564 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E568 7A00                       		dc.w $7A00
0001E56A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E56E 8000                       		dc.w $8000
0001E570 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E574 8880                       		dc.w $8880
0001E576 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E57A 8F60                       		dc.w $8F60
0001E57C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E580 9360                       		dc.w $9360
0001E582 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E586 9E00                       		dc.w $9E00
0001E588 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E58C A360                       		dc.w $A360
0001E58E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E592 A460                       		dc.w $A460
0001E594 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E598 A660                       		dc.w $A660
0001E59A 0005                       PLC_BHZ2:	dc.w 5
0001E59C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E5A0 7000                       		dc.w $7000
0001E5A2 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E5A6 71C0                       		dc.w $71C0
0001E5A8 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E5AC 7300                       		dc.w $7300
0001E5AE 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E5B2 7540                       		dc.w $7540
0001E5B4 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E5B8 A1E0                       		dc.w $A1E0
0001E5BA 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E5BE 6980                       		dc.w $6980
0001E5C0                            ; ---------------------------------------------------------------------------
0001E5C0                            ; Pattern load cues - title card
0001E5C0                            ; ---------------------------------------------------------------------------
0001E5C0 0000                       PLC_TitleCard:	dc.w 0
0001E5C2 0000 0000                  		dc.l Nem_TitleCard
0001E5C6 B000                       		dc.w $B000
0001E5C8                            ; ---------------------------------------------------------------------------
0001E5C8                            ; Pattern load cues - act 3 boss
0001E5C8                            ; ---------------------------------------------------------------------------
0001E5C8 0005                       PLC_Boss:	dc.w 5
0001E5CA 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E5CE 8000                       		dc.w $8000
0001E5D0 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E5D4 8D80                       		dc.w $8D80
0001E5D6 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E5DA 93A0                       		dc.w $93A0
0001E5DC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E5E0 A300                       		dc.w $A300
0001E5E2 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E5E6 A300                       		dc.w $A300
0001E5E8 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E5EC A540                       		dc.w $A540
0001E5EE                            ; ---------------------------------------------------------------------------
0001E5EE                            ; Pattern load cues - act 1/2 signpost
0001E5EE                            ; ---------------------------------------------------------------------------
0001E5EE 0002                       PLC_Signpost:	dc.w 2
0001E5F0 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E5F4 D000                       		dc.w $D000
0001E5F6 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E5FA 96C0                       		dc.w $96C0
0001E5FC 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E600 8C40                       		dc.w $8C40
0001E602                            ; ---------------------------------------------------------------------------
0001E602                            ; Pattern load cues - beta special stage warp effect
0001E602                            ; ---------------------------------------------------------------------------
0001E602 0000                       PLC_Warp:	dc.w 0
0001E604 0000 0000                  		dc.l Nem_Warp
0001E608 A820                       		dc.w $A820
0001E60A                            ; ---------------------------------------------------------------------------
0001E60A                            ; Pattern load cues - special stage
0001E60A                            ; ---------------------------------------------------------------------------
0001E60A 0010                       PLC_SpeStage:	dc.w $10
0001E60C 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E610 0000                       		dc.w 0
0001E612 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E616 0A20                       		dc.w $A20
0001E618 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E61C 2840                       		dc.w $2840
0001E61E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E622 4760                       		dc.w $4760
0001E624 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E628 4A20                       		dc.w $4A20
0001E62A 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E62E 4C60                       		dc.w $4C60
0001E630 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E634 5E00                       		dc.w $5E00
0001E636 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E63A 6E00                       		dc.w $6E00
0001E63C 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E640 7E00                       		dc.w $7E00
0001E642 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E646 8E00                       		dc.w $8E00
0001E648 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E64C 9E00                       		dc.w $9E00
0001E64E 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E652 AE00                       		dc.w $AE00
0001E654 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E658 BE00                       		dc.w $BE00
0001E65A 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E65E EE00                       		dc.w $EE00
0001E660 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E664 F2E0                       		dc.w $F2E0
0001E666 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E66A F400                       		dc.w $F400
0001E66C 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E670 F520                       		dc.w $F520
0001E672 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E676 F2E0                       		dc.w $F2E0
0001E678 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E67C F400                       		dc.w $F400
0001E67E 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E682 F520                       		dc.w $F520
0001E684                            ; ---------------------------------------------------------------------------
0001E684                            ; Pattern load cues - GHZ animals
0001E684                            ; ---------------------------------------------------------------------------
0001E684 0001                       PLC_GHZAnimals:	dc.w 1
0001E686 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E68A B000                       		dc.w $B000
0001E68C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E690 B240                       		dc.w $B240
0001E692                            ; ---------------------------------------------------------------------------
0001E692                            ; Pattern load cues - LZ animals
0001E692                            ; ---------------------------------------------------------------------------
0001E692 0001                       PLC_LZAnimals:	dc.w 1
0001E694 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E698 B000                       		dc.w $B000
0001E69A 0000 0000                  		dc.l Nem_Seal		; seal
0001E69E B240                       		dc.w $B240
0001E6A0                            ; ---------------------------------------------------------------------------
0001E6A0                            ; Pattern load cues - MZ animals
0001E6A0                            ; ---------------------------------------------------------------------------
0001E6A0 0001                       PLC_MZAnimals:	dc.w 1
0001E6A2 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E6A6 B000                       		dc.w $B000
0001E6A8 0000 0000                  		dc.l Nem_Seal		; seal
0001E6AC B240                       		dc.w $B240
0001E6AE                            ; ---------------------------------------------------------------------------
0001E6AE                            ; Pattern load cues - SLZ animals
0001E6AE                            ; ---------------------------------------------------------------------------
0001E6AE 0001                       PLC_SLZAnimals:	dc.w 1
0001E6B0 0000 0000                  		dc.l Nem_Pig		; pig
0001E6B4 B000                       		dc.w $B000
0001E6B6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E6BA B240                       		dc.w $B240
0001E6BC                            ; ---------------------------------------------------------------------------
0001E6BC                            ; Pattern load cues - SYZ animals
0001E6BC                            ; ---------------------------------------------------------------------------
0001E6BC 0001                       PLC_SYZAnimals:	dc.w 1
0001E6BE 0000 0000                  		dc.l Nem_Pig		; pig
0001E6C2 B000                       		dc.w $B000
0001E6C4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E6C8 B240                       		dc.w $B240
0001E6CA                            ; ---------------------------------------------------------------------------
0001E6CA                            ; Pattern load cues - SBZ animals
0001E6CA                            ; ---------------------------------------------------------------------------
0001E6CA 0001                       PLC_SBZAnimals:	dc.w 1
0001E6CC 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E6D0 B000                       		dc.w $B000
0001E6D2 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E6D6 B240                       		dc.w $B240
0001E6D8                            ; ---------------------------------------------------------------------------
0001E6D8                            ; Pattern load cues - special stage results screen
0001E6D8                            ; ---------------------------------------------------------------------------
0001E6D8 0001                       PLC_SpeStResult:dc.w 1
0001E6DA 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E6DE A820                       		dc.w $A820
0001E6E0 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E6E4 AA20                       		dc.w $AA20
0001E6E6                            ; ---------------------------------------------------------------------------
0001E6E6                            ; Pattern load cues - ending sequence
0001E6E6                            ; ---------------------------------------------------------------------------
0001E6E6 000E                       PLC_Ending:	dc.w $E
0001E6E8 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E6EC 0000                       		dc.w 0
0001E6EE 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E6F2 39A0                       		dc.w $39A0
0001E6F4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E6F8 6B00                       		dc.w $6B00
0001E6FA 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E6FE 7400                       		dc.w $7400
0001E700 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E704 78A0                       		dc.w $78A0
0001E706 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E70A 7C20                       		dc.w $7C20
0001E70C 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E710 A480                       		dc.w $A480
0001E712 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E716 AA60                       		dc.w $AA60
0001E718 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E71C ACA0                       		dc.w $ACA0
0001E71E 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E722 AE60                       		dc.w $AE60
0001E724 0000 0000                  		dc.l Nem_Seal		; seal
0001E728 B0A0                       		dc.w $B0A0
0001E72A 0000 0000                  		dc.l Nem_Pig		; pig
0001E72E B260                       		dc.w $B260
0001E730 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E734 B4A0                       		dc.w $B4A0
0001E736 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E73A B660                       		dc.w $B660
0001E73C 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E740 B8A0                       		dc.w $B8A0
0001E742                            ; ---------------------------------------------------------------------------
0001E742                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E742                            ; ---------------------------------------------------------------------------
0001E742 0002                       PLC_TryAgain:	dc.w 2
0001E744 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E748 78A0                       		dc.w $78A0
0001E74A 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E74E 7C20                       		dc.w $7C20
0001E750 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E754 B400                       		dc.w $B400
0001E756                            ; ---------------------------------------------------------------------------
0001E756                            ; Pattern load cues - Eggman on SBZ 2
0001E756                            ; ---------------------------------------------------------------------------
0001E756 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E758 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E75C A300                       		dc.w $A300
0001E75E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E762 8000                       		dc.w $8000
0001E764 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E768 9400                       		dc.w $9400
0001E76A                            ; ---------------------------------------------------------------------------
0001E76A                            ; Pattern load cues - final boss
0001E76A                            ; ---------------------------------------------------------------------------
0001E76A 0004                       PLC_FZBoss:	dc.w 4
0001E76C 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E770 7400                       		dc.w $7400
0001E772 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E776 6000                       		dc.w $6000
0001E778 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E77C 8000                       		dc.w $8000
0001E77E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E782 8E00                       		dc.w $8E00
0001E784 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E788 A540                       		dc.w $A540
0001E78A                            ; ---------------------------------------------------------------------------
0001E78A                            ; Pattern load cues - Teto boss
0001E78A                            ; ---------------------------------------------------------------------------
0001E78A 0002                       PLC_TetoBoss:	dc.w 2
0001E78C 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E790 8000                       		dc.w $8000
0001E792 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E796 93A0                       		dc.w $93A0
0001E798 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E79C 9000                       		dc.w $9000
0001E79E                            		; even
0001E79E                            ; ---------------------------------------------------------------------------
0001E79E                            ; Pattern load cues - Truth Nuke
0001E79E                            ; ---------------------------------------------------------------------------
0001E79E 0000                       PLC_TruthNuke:	dc.w 0
0001E7A0 0000 0000                  		dc.l Nem_TruthNuke	; GMZ
0001E7A4 0000                       		dc.w 0
0001E7A6                            		even
0001E7A6                            		even
0001E7A6                            
0001E7A6                            		incbin	misc\padding.bin
0001E894                            		even
0001E894                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001ECEA                            		even
0001ECEA                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001ED82                            		even
0001ED82                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EEC4                            		even
0001EEC4                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EF12                            		even
0001EF12                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F026                            		even
0001F026                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FEF0                            		even
0001FEF0                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023FF6                            		even
00023FF6                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
0002402A                            		even
0002402A                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000240E8                            		even
000240E8                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024590                            		even
00024590                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000245EE                            		even
000245EE                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
000251F4                            		even
000251F4                            Eni_TruthNuke:	incbin	mapeni\truthnuke.bin	; GMZ
000252D2                            		even
000252D2                            Nem_TruthNuke:	incbin	artnem\truthnuke.bin	; GMZ: TRVTH NVKE
0002879C                            		even
0002879C                            ; ---------------------------------------------------------------------------
0002879C                            ; Sprite mappings - Sonic
0002879C                            ; ---------------------------------------------------------------------------
0002879C                            Map_Sonic:
0002879C                            	include "_maps\Sonic.asm"
0002879C                            Map_a933:
0002879C 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
0002879E 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
000287A0 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
000287A2 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
000287A4 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
000287A6 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
000287A8 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
000287AA 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
000287AC 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
000287AE 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
000287B0 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
000287B2 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
000287B4 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
000287B6 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
000287B8 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
000287BA 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
000287BC 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
000287BE 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
000287C0 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
000287C2 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
000287C4 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
000287C6 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
000287C8 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
000287CA 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
000287CC 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
000287CE 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
000287D0 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
000287D2 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
000287D4 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
000287D6 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
000287D8 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
000287DA 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
000287DC 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
000287DE 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
000287E0 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
000287E2 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
000287E4 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
000287E6 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
000287E8 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
000287EA 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
000287EC 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
000287EE 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
000287F0 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
000287F2 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
000287F4 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
000287F6 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
000287F8 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
000287FA 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
000287FC 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
000287FE 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
00028800 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
00028802 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
00028804 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
00028806 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
00028808 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
0002880A 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
0002880C 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
0002880E 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
00028810 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
00028812 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
00028814 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
00028816 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
00028818 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
0002881A 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
0002881C 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
0002881E 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
00028820 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
00028822 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
00028824 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
00028826 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
00028828 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
0002882A 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
0002882C 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
0002882E 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
00028830 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
00028832 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00028834 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00028836 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00028838 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
0002883A 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
0002883C 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
0002883E 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
00028840 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
00028842 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00028844 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00028846 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00028848 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
0002884A 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
0002884C 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
0002884E 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
00028850 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
00028852 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00028854 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00028856 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
00028858 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
0002885A 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
0002885C 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
0002885E 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
00028860 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
00028862 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
00028864 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
00028866 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
00028868 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
0002886A 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
0002886C 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
0002886E 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
00028870 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
00028872 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
00028874 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
00028876 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
00028878 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
0002887A 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
0002887C 00                         Map_a933_E0: 	dc.b $0
0002887D 02                         Map_a933_E1: 	dc.b $2
0002887E ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00028883 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00028888 03                         Map_a933_EC: 	dc.b $3
00028889 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002888E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00028893 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00028898 03                         Map_a933_FC: 	dc.b $3
00028899 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002889E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000288A3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000288A8 03                         Map_a933_10C: 	dc.b $3
000288A9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000288AE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000288B3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000288B8 03                         Map_a933_11C: 	dc.b $3
000288B9 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000288BE 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
000288C3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000288C8 04                         Map_a933_12C: 	dc.b $4
000288C9 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
000288CE FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
000288D3 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000288D8 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000288DD 02                         Map_a933_141: 	dc.b $2
000288DE EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000288E3 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000288E8 02                         Map_a933_14C: 	dc.b $2
000288E9 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000288EE FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
000288F3 04                         Map_a933_157: 	dc.b $4
000288F4 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000288F9 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
000288FE FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00028903 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00028908 02                         Map_a933_16C: 	dc.b $2
00028909 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
0002890E EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00028913 03                         Map_a933_177: 	dc.b $3
00028914 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00028919 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
0002891E 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00028923 05                         Map_a933_187: 	dc.b $5
00028924 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00028929 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
0002892E FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00028933 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00028938 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
0002893D 06                         Map_a933_1A1: 	dc.b $6
0002893E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00028943 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00028948 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
0002894D 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00028952 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00028957 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
0002895C 04                         Map_a933_1C0: 	dc.b $4
0002895D ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00028962 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00028967 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
0002896C 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00028971 05                         Map_a933_1D5: 	dc.b $5
00028972 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00028977 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
0002897C FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00028981 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00028986 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
0002898B 04                         Map_a933_1EF: 	dc.b $4
0002898C EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00028991 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00028996 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
0002899B 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000289A0 05                         Map_a933_204: 	dc.b $5
000289A1 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000289A6 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000289AB FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000289B0 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000289B5 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000289BA 04                         Map_a933_21E: 	dc.b $4
000289BB F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000289C0 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000289C5 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000289CA 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000289CF 02                         Map_a933_233: 	dc.b $2
000289D0 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000289D5 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000289DA 02                         Map_a933_23E: 	dc.b $2
000289DB F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000289E0 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000289E5 04                         Map_a933_249: 	dc.b $4
000289E6 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000289EB EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000289F0 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000289F5 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
000289FA 02                         Map_a933_25E: 	dc.b $2
000289FB F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00028A00 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00028A05 03                         Map_a933_269: 	dc.b $3
00028A06 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00028A0B EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00028A10 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00028A15 06                         Map_a933_279: 	dc.b $6
00028A16 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00028A1B ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00028A20 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00028A25 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00028A2A 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00028A2F FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00028A34 06                         Map_a933_298: 	dc.b $6
00028A35 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00028A3A E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00028A3F EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00028A44 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00028A49 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00028A4E 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00028A53 04                         Map_a933_2B7: 	dc.b $4
00028A54 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00028A59 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00028A5E EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00028A63 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00028A68 05                         Map_a933_2CC: 	dc.b $5
00028A69 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00028A6E ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00028A73 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00028A78 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00028A7D 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00028A82 04                         Map_a933_2E6: 	dc.b $4
00028A83 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00028A88 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00028A8D EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00028A92 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00028A97 05                         Map_a933_2FB: 	dc.b $5
00028A98 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00028A9D EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00028AA2 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00028AA7 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00028AAC 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00028AB1 02                         Map_a933_315: 	dc.b $2
00028AB2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00028AB7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00028ABC 02                         Map_a933_320: 	dc.b $2
00028ABD EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00028AC2 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00028AC7 02                         Map_a933_32B: 	dc.b $2
00028AC8 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00028ACD FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00028AD2 02                         Map_a933_336: 	dc.b $2
00028AD3 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00028AD8 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00028ADD 04                         Map_a933_341: 	dc.b $4
00028ADE EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00028AE3 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00028AE8 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00028AED FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00028AF2 03                         Map_a933_356: 	dc.b $3
00028AF3 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00028AF8 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00028AFD FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00028B02 04                         Map_a933_366: 	dc.b $4
00028B03 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00028B08 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00028B0D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00028B12 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00028B17 03                         Map_a933_37B: 	dc.b $3
00028B18 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00028B1D EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00028B22 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00028B27 02                         Map_a933_38B: 	dc.b $2
00028B28 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00028B2D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00028B32 02                         Map_a933_396: 	dc.b $2
00028B33 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00028B38 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00028B3D 02                         Map_a933_3A1: 	dc.b $2
00028B3E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00028B43 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00028B48 02                         Map_a933_3AC: 	dc.b $2
00028B49 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00028B4E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00028B53 04                         Map_a933_3B7: 	dc.b $4
00028B54 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00028B59 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00028B5E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00028B63 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00028B68 02                         Map_a933_3CC: 	dc.b $2
00028B69 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00028B6E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00028B73 04                         Map_a933_3D7: 	dc.b $4
00028B74 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00028B79 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00028B7E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00028B83 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00028B88 02                         Map_a933_3EC: 	dc.b $2
00028B89 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00028B8E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00028B93 01                         Map_a933_3F7: 	dc.b $1
00028B94 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028B99 01                         Map_a933_3FD: 	dc.b $1
00028B9A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028B9F 01                         Map_a933_403: 	dc.b $1
00028BA0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028BA5 01                         Map_a933_409: 	dc.b $1
00028BA6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028BAB 01                         Map_a933_40F: 	dc.b $1
00028BAC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028BB1 02                         Map_a933_415: 	dc.b $2
00028BB2 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00028BB7 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00028BBC 01                         Map_a933_420: 	dc.b $1
00028BBD F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028BC2 02                         Map_a933_426: 	dc.b $2
00028BC3 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00028BC8 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00028BCD 01                         Map_a933_431: 	dc.b $1
00028BCE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00028BD3 02                         Map_a933_437: 	dc.b $2
00028BD4 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00028BD9 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00028BDE 04                         Map_a933_442: 	dc.b $4
00028BDF ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00028BE4 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00028BE9 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00028BEE 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00028BF3 06                         Map_a933_457: 	dc.b $6
00028BF4 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00028BF9 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00028BFE 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00028C03 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00028C08 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00028C0D F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00028C12 02                         Map_a933_476: 	dc.b $2
00028C13 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00028C18 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00028C1D 02                         Map_a933_481: 	dc.b $2
00028C1E 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00028C23 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00028C28 04                         Map_a933_48C: 	dc.b $4
00028C29 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00028C2E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00028C33 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00028C38 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00028C3D 02                         Map_a933_4A1: 	dc.b $2
00028C3E F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00028C43 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00028C48 03                         Map_a933_4AC: 	dc.b $3
00028C49 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00028C4E FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00028C53 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00028C58 04                         Map_a933_4BC: 	dc.b $4
00028C59 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00028C5E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00028C63 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00028C68 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00028C6D 02                         Map_a933_4D1: 	dc.b $2
00028C6E EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00028C73 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
00028C78 04                         Map_a933_4DC: 	dc.b $4
00028C79 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00028C7E 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00028C83 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00028C88 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00028C8D 04                         Map_a933_4F1: 	dc.b $4
00028C8E F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00028C93 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00028C98 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00028C9D F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00028CA2 05                         Map_a933_506: 	dc.b $5
00028CA3 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00028CA8 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00028CAD 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00028CB2 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00028CB7 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00028CBC 05                         Map_a933_520: 	dc.b $5
00028CBD E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00028CC2 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00028CC7 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00028CCC 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00028CD1 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00028CD6 02                         Map_a933_53A: 	dc.b $2
00028CD7 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00028CDC 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00028CE1 03                         Map_a933_545: 	dc.b $3
00028CE2 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00028CE7 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00028CEC 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00028CF1 02                         Map_a933_555: 	dc.b $2
00028CF2 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00028CF7 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00028CFC 03                         Map_a933_560: 	dc.b $3
00028CFD EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00028D02 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00028D07 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00028D0C 02                         Map_a933_570: 	dc.b $2
00028D0D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00028D12 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00028D17 03                         Map_a933_57B: 	dc.b $3
00028D18 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00028D1D 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00028D22 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00028D27 03                         Map_a933_58B: 	dc.b $3
00028D28 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00028D2D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00028D32 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00028D37 05                         Map_a933_59B: 	dc.b $5
00028D38 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00028D3D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00028D42 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00028D47 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00028D4C 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00028D51 05                         Map_a933_5B5: 	dc.b $5
00028D52 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00028D57 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00028D5C F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00028D61 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00028D66 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00028D6B 02                         Map_a933_5CF: 	dc.b $2
00028D6C EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00028D71 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00028D76 03                         Map_a933_5DA: 	dc.b $3
00028D77 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00028D7C F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00028D81 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00028D86 01                         Map_a933_5EA: 	dc.b $1
00028D87 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00028D8C 01                         Map_a933_5F0: 	dc.b $1
00028D8D F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00028D92 01                         Map_a933_5F6: 	dc.b $1
00028D93 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00028D98 04                         Map_a933_5FC: 	dc.b $4
00028D99 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00028D9E F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00028DA3 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00028DA8 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00028DAD 03                         Map_a933_611: 	dc.b $3
00028DAE F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00028DB3 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00028DB8 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00028DBD 03                         Map_a933_621: 	dc.b $3
00028DBE F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00028DC3 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00028DC8 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00028DCD 03                         Map_a933_631: 	dc.b $3
00028DCE EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00028DD3 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00028DD8 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00028DDD 02                         Map_a933_641: 	dc.b $2
00028DDE F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00028DE3 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00028DE8 02                         Map_a933_64C: 	dc.b $2
00028DE9 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028DEE EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028DF3 03                         Map_a933_657: 	dc.b $3
00028DF4 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00028DF9 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00028DFE 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00028E03 02                         Map_a933_667: 	dc.b $2
00028E04 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00028E09 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00028E0E 04                         Map_a933_672: 	dc.b $4
00028E0F ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00028E14 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00028E19 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00028E1E 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00028E23 00                         Map_a933_687: 	dc.b $0
00028E24 00                         Map_a933_688: 	dc.b $0
00028E25 00                         Map_a933_689: 	dc.b $0
00028E26 00                         Map_a933_68A: 	dc.b $0
00028E27 02                         Map_a933_68B: 	dc.b $2
00028E28 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028E2D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028E32 00                         Map_a933_696: 	dc.b $0
00028E33 02                         Map_a933_697: 	dc.b $2
00028E34 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028E39 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028E3E 00                         Map_a933_6A2: 	dc.b $0
00028E3F 00                         Map_a933_6A3: 	dc.b $0
00028E40 00                         Map_a933_6A4: 	dc.b $0
00028E41 02                         Map_a933_6A5: 	dc.b $2
00028E42 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028E47 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028E4C 00                         Map_a933_6B0: 	dc.b $0
00028E4D 02                         Map_a933_6B1: 	dc.b $2
00028E4E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028E53 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028E58 00                         Map_a933_6BC: 	dc.b $0
00028E59 00                         Map_a933_6BD: 	dc.b $0
00028E5A 00                         Map_a933_6BE: 	dc.b $0
00028E5B 02                         Map_a933_6BF: 	dc.b $2
00028E5C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028E61 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028E66 00                         Map_a933_6CA: 	dc.b $0
00028E67 02                         Map_a933_6CB: 	dc.b $2
00028E68 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00028E6D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00028E72 00                         Map_a933_6D6: 	dc.b $0
00028E74 00                         	even
00028E74 00                         	even
00028E74                            
00028E74                            ; ---------------------------------------------------------------------------
00028E74                            ; Uncompressed graphics	loading	array for Sonic
00028E74                            ; ---------------------------------------------------------------------------
00028E74                            SonicDynPLC:
00028E74                            	include "_inc\Sonic dynamic pattern load cues.asm"
00028E74                            DPLC_33c5:
00028E74 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00028E76 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00028E78 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
00028E7A 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
00028E7C 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
00028E7E 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
00028E80 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
00028E82 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00028E84 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00028E86 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00028E88 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
00028E8A 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
00028E8C 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
00028E8E 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
00028E90 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
00028E92 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
00028E94 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
00028E96 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
00028E98 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
00028E9A 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
00028E9C 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
00028E9E 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
00028EA0 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
00028EA2 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
00028EA4 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
00028EA6 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
00028EA8 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
00028EAA 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
00028EAC 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
00028EAE 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
00028EB0 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
00028EB2 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
00028EB4 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
00028EB6 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
00028EB8 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
00028EBA 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
00028EBC 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
00028EBE 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
00028EC0 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
00028EC2 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
00028EC4 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
00028EC6 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
00028EC8 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
00028ECA 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
00028ECC 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
00028ECE 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
00028ED0 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
00028ED2 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
00028ED4 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
00028ED6 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
00028ED8 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
00028EDA 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
00028EDC 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
00028EDE 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
00028EE0 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
00028EE2 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
00028EE4 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
00028EE6 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
00028EE8 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
00028EEA 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
00028EEC 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
00028EEE 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
00028EF0 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
00028EF2 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
00028EF4 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
00028EF6 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
00028EF8 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
00028EFA 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
00028EFC 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
00028EFE 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
00028F00 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
00028F02 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
00028F04 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00028F06 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00028F08 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
00028F0A 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
00028F0C 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
00028F0E 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
00028F10 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
00028F12 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
00028F14 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00028F16 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00028F18 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
00028F1A 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
00028F1C 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
00028F1E 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
00028F20 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
00028F22 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
00028F24 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00028F26 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00028F28 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
00028F2A 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
00028F2C 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
00028F2E 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
00028F30 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
00028F32 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00028F34 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00028F36 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00028F38 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
00028F3A 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00028F3C 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
00028F3E 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
00028F40 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
00028F42 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00028F44 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00028F46 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00028F48 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00028F4A 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00028F4C 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
00028F4E 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
00028F50 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
00028F52 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00028F54 00                         DPLC_33c5_E0: 	dc.b $0
00028F55 02                         DPLC_33c5_E1: 	dc.b $2
00028F56 F000                       	dc.b $F0, $0
00028F58 1010                       	dc.b $10, $10
00028F5A 03                         DPLC_33c5_E6: 	dc.b $3
00028F5B 5012                       	dc.b $50, $12
00028F5D 5018                       	dc.b $50, $18
00028F5F 201E                       	dc.b $20, $1E
00028F61 03                         DPLC_33c5_ED: 	dc.b $3
00028F62 5021                       	dc.b $50, $21
00028F64 5018                       	dc.b $50, $18
00028F66 201E                       	dc.b $20, $1E
00028F68 03                         DPLC_33c5_F4: 	dc.b $3
00028F69 5021                       	dc.b $50, $21
00028F6B 5018                       	dc.b $50, $18
00028F6D 2027                       	dc.b $20, $27
00028F6F 03                         DPLC_33c5_FB: 	dc.b $3
00028F70 802A                       	dc.b $80, $2A
00028F72 2033                       	dc.b $20, $33
00028F74 2036                       	dc.b $20, $36
00028F76 04                         DPLC_33c5_102: 	dc.b $4
00028F77 7039                       	dc.b $70, $39
00028F79 5041                       	dc.b $50, $41
00028F7B 5047                       	dc.b $50, $47
00028F7D 104D                       	dc.b $10, $4D
00028F7F 02                         DPLC_33c5_10B: 	dc.b $2
00028F80 7039                       	dc.b $70, $39
00028F82 B04F                       	dc.b $B0, $4F
00028F84 02                         DPLC_33c5_110: 	dc.b $2
00028F85 505B                       	dc.b $50, $5B
00028F87 8061                       	dc.b $80, $61
00028F89 04                         DPLC_33c5_115: 	dc.b $4
00028F8A 505B                       	dc.b $50, $5B
00028F8C 506A                       	dc.b $50, $6A
00028F8E 5070                       	dc.b $50, $70
00028F90 1076                       	dc.b $10, $76
00028F92 02                         DPLC_33c5_11E: 	dc.b $2
00028F93 F4F0                       	dc.b $F4, $F0
00028F95 1500                       	dc.b $15, $0
00028F97 03                         DPLC_33c5_123: 	dc.b $3
00028F98 7039                       	dc.b $70, $39
00028F9A 3078                       	dc.b $30, $78
00028F9C 507C                       	dc.b $50, $7C
00028F9E 05                         DPLC_33c5_12A: 	dc.b $5
00028F9F 5082                       	dc.b $50, $82
00028FA1 5088                       	dc.b $50, $88
00028FA3 208E                       	dc.b $20, $8E
00028FA5 5091                       	dc.b $50, $91
00028FA7 0097                       	dc.b $0, $97
00028FA9 06                         DPLC_33c5_135: 	dc.b $6
00028FAA 5082                       	dc.b $50, $82
00028FAC 1098                       	dc.b $10, $98
00028FAE 309A                       	dc.b $30, $9A
00028FB0 509E                       	dc.b $50, $9E
00028FB2 30A4                       	dc.b $30, $A4
00028FB4 00A8                       	dc.b $0, $A8
00028FB6 04                         DPLC_33c5_142: 	dc.b $4
00028FB7 50A9                       	dc.b $50, $A9
00028FB9 10AF                       	dc.b $10, $AF
00028FBB 70B1                       	dc.b $70, $B1
00028FBD 20B9                       	dc.b $20, $B9
00028FBF 05                         DPLC_33c5_14B: 	dc.b $5
00028FC0 50BC                       	dc.b $50, $BC
00028FC2 30C2                       	dc.b $30, $C2
00028FC4 70C6                       	dc.b $70, $C6
00028FC6 20CE                       	dc.b $20, $CE
00028FC8 10D1                       	dc.b $10, $D1
00028FCA 04                         DPLC_33c5_156: 	dc.b $4
00028FCB 50BC                       	dc.b $50, $BC
00028FCD 10D3                       	dc.b $10, $D3
00028FCF 70D5                       	dc.b $70, $D5
00028FD1 20DD                       	dc.b $20, $DD
00028FD3 05                         DPLC_33c5_15F: 	dc.b $5
00028FD4 5082                       	dc.b $50, $82
00028FD6 1098                       	dc.b $10, $98
00028FD8 008E                       	dc.b $0, $8E
00028FDA 70E0                       	dc.b $70, $E0
00028FDC 20E8                       	dc.b $20, $E8
00028FDE 04                         DPLC_33c5_16A: 	dc.b $4
00028FDF 70EB                       	dc.b $70, $EB
00028FE1 50F3                       	dc.b $50, $F3
00028FE3 10F9                       	dc.b $10, $F9
00028FE5 50FB                       	dc.b $50, $FB
00028FE7 02                         DPLC_33c5_173: 	dc.b $2
00028FE8 70EB                       	dc.b $70, $EB
00028FEA B101                       	dc.b $B1, $1
00028FEC 02                         DPLC_33c5_178: 	dc.b $2
00028FED 510D                       	dc.b $51, $D
00028FEF 8113                       	dc.b $81, $13
00028FF1 04                         DPLC_33c5_17D: 	dc.b $4
00028FF2 510D                       	dc.b $51, $D
00028FF4 511C                       	dc.b $51, $1C
00028FF6 1122                       	dc.b $11, $22
00028FF8 5124                       	dc.b $51, $24
00028FFA 02                         DPLC_33c5_186: 	dc.b $2
00028FFB 510D                       	dc.b $51, $D
00028FFD B12A                       	dc.b $B1, $2A
00028FFF 03                         DPLC_33c5_18B: 	dc.b $3
00029000 70EB                       	dc.b $70, $EB
00029002 0101                       	dc.b $1, $1
00029004 8136                       	dc.b $81, $36
00029006 06                         DPLC_33c5_192: 	dc.b $6
00029007 513F                       	dc.b $51, $3F
00029009 1145                       	dc.b $11, $45
0002900B 1147                       	dc.b $11, $47
0002900D 8149                       	dc.b $81, $49
0002900F 0152                       	dc.b $1, $52
00029011 0153                       	dc.b $1, $53
00029013 06                         DPLC_33c5_19F: 	dc.b $6
00029014 513F                       	dc.b $51, $3F
00029016 2154                       	dc.b $21, $54
00029018 1157                       	dc.b $11, $57
0002901A 1159                       	dc.b $11, $59
0002901C 815B                       	dc.b $81, $5B
0002901E 0152                       	dc.b $1, $52
00029020 04                         DPLC_33c5_1AC: 	dc.b $4
00029021 5164                       	dc.b $51, $64
00029023 116A                       	dc.b $11, $6A
00029025 816C                       	dc.b $81, $6C
00029027 1175                       	dc.b $11, $75
00029029 05                         DPLC_33c5_1B5: 	dc.b $5
0002902A 5177                       	dc.b $51, $77
0002902C 217D                       	dc.b $21, $7D
0002902E 1180                       	dc.b $11, $80
00029030 7182                       	dc.b $71, $82
00029032 218A                       	dc.b $21, $8A
00029034 04                         DPLC_33c5_1C0: 	dc.b $4
00029035 5177                       	dc.b $51, $77
00029037 118D                       	dc.b $11, $8D
00029039 818F                       	dc.b $81, $8F
0002903B 1198                       	dc.b $11, $98
0002903D 05                         DPLC_33c5_1C9: 	dc.b $5
0002903E 513F                       	dc.b $51, $3F
00029040 819A                       	dc.b $81, $9A
00029042 1159                       	dc.b $11, $59
00029044 11A3                       	dc.b $11, $A3
00029046 0152                       	dc.b $1, $52
00029048 02                         DPLC_33c5_1D4: 	dc.b $2
00029049 51A5                       	dc.b $51, $A5
0002904B B1AB                       	dc.b $B1, $AB
0002904D 02                         DPLC_33c5_1D9: 	dc.b $2
0002904E 505B                       	dc.b $50, $5B
00029050 B1B7                       	dc.b $B1, $B7
00029052 02                         DPLC_33c5_1DE: 	dc.b $2
00029053 51A5                       	dc.b $51, $A5
00029055 B1C3                       	dc.b $B1, $C3
00029057 02                         DPLC_33c5_1E3: 	dc.b $2
00029058 505B                       	dc.b $50, $5B
0002905A B1CF                       	dc.b $B1, $CF
0002905C 04                         DPLC_33c5_1E8: 	dc.b $4
0002905D 51DB                       	dc.b $51, $DB
0002905F 11E1                       	dc.b $11, $E1
00029061 B1E3                       	dc.b $B1, $E3
00029063 01EF                       	dc.b $1, $EF
00029065 03                         DPLC_33c5_1F1: 	dc.b $3
00029066 51F0                       	dc.b $51, $F0
00029068 11F6                       	dc.b $11, $F6
0002906A B1F8                       	dc.b $B1, $F8
0002906C 04                         DPLC_33c5_1F8: 	dc.b $4
0002906D 51DB                       	dc.b $51, $DB
0002906F 1204                       	dc.b $12, $4
00029071 B206                       	dc.b $B2, $6
00029073 01EF                       	dc.b $1, $EF
00029075 03                         DPLC_33c5_201: 	dc.b $3
00029076 51F0                       	dc.b $51, $F0
00029078 11F6                       	dc.b $11, $F6
0002907A B212                       	dc.b $B2, $12
0002907C 02                         DPLC_33c5_208: 	dc.b $2
0002907D 521E                       	dc.b $52, $1E
0002907F B224                       	dc.b $B2, $24
00029081 02                         DPLC_33c5_20D: 	dc.b $2
00029082 510D                       	dc.b $51, $D
00029084 B230                       	dc.b $B2, $30
00029086 02                         DPLC_33c5_212: 	dc.b $2
00029087 521E                       	dc.b $52, $1E
00029089 B23C                       	dc.b $B2, $3C
0002908B 02                         DPLC_33c5_217: 	dc.b $2
0002908C 510D                       	dc.b $51, $D
0002908E B248                       	dc.b $B2, $48
00029090 04                         DPLC_33c5_21C: 	dc.b $4
00029091 5254                       	dc.b $52, $54
00029093 125A                       	dc.b $12, $5A
00029095 B25C                       	dc.b $B2, $5C
00029097 0268                       	dc.b $2, $68
00029099 02                         DPLC_33c5_225: 	dc.b $2
0002909A 7269                       	dc.b $72, $69
0002909C B271                       	dc.b $B2, $71
0002909E 04                         DPLC_33c5_22A: 	dc.b $4
0002909F 5254                       	dc.b $52, $54
000290A1 127D                       	dc.b $12, $7D
000290A3 B27F                       	dc.b $B2, $7F
000290A5 0268                       	dc.b $2, $68
000290A7 02                         DPLC_33c5_233: 	dc.b $2
000290A8 7269                       	dc.b $72, $69
000290AA B28B                       	dc.b $B2, $8B
000290AC 01                         DPLC_33c5_238: 	dc.b $1
000290AD F297                       	dc.b $F2, $97
000290AF 01                         DPLC_33c5_23B: 	dc.b $1
000290B0 F2A7                       	dc.b $F2, $A7
000290B2 01                         DPLC_33c5_23E: 	dc.b $1
000290B3 F2B7                       	dc.b $F2, $B7
000290B5 01                         DPLC_33c5_241: 	dc.b $1
000290B6 F2C7                       	dc.b $F2, $C7
000290B8 01                         DPLC_33c5_244: 	dc.b $1
000290B9 F2D7                       	dc.b $F2, $D7
000290BB 02                         DPLC_33c5_247: 	dc.b $2
000290BC B2E7                       	dc.b $B2, $E7
000290BE 22F3                       	dc.b $22, $F3
000290C0 01                         DPLC_33c5_24C: 	dc.b $1
000290C1 F2F6                       	dc.b $F2, $F6
000290C3 02                         DPLC_33c5_24F: 	dc.b $2
000290C4 B306                       	dc.b $B3, $6
000290C6 2312                       	dc.b $23, $12
000290C8 01                         DPLC_33c5_254: 	dc.b $1
000290C9 F315                       	dc.b $F3, $15
000290CB 02                         DPLC_33c5_257: 	dc.b $2
000290CC 5325                       	dc.b $53, $25
000290CE B32B                       	dc.b $B3, $2B
000290D0 04                         DPLC_33c5_25C: 	dc.b $4
000290D1 5337                       	dc.b $53, $37
000290D3 733D                       	dc.b $73, $3D
000290D5 1345                       	dc.b $13, $45
000290D7 0347                       	dc.b $3, $47
000290D9 02                         DPLC_33c5_265: 	dc.b $2
000290DA D348                       	dc.b $D3, $48
000290DC 34EC                       	dc.b $34, $EC
000290DE 02                         DPLC_33c5_26A: 	dc.b $2
000290DF F528                       	dc.b $F5, $28
000290E1 0538                       	dc.b $5, $38
000290E3 02                         DPLC_33c5_26F: 	dc.b $2
000290E4 F539                       	dc.b $F5, $39
000290E6 0549                       	dc.b $5, $49
000290E8 02                         DPLC_33c5_274: 	dc.b $2
000290E9 E356                       	dc.b $E3, $56
000290EB 054A                       	dc.b $5, $4A
000290ED 01                         DPLC_33c5_279: 	dc.b $1
000290EE 8365                       	dc.b $83, $65
000290F0 03                         DPLC_33c5_27C: 	dc.b $3
000290F1 736E                       	dc.b $73, $6E
000290F3 0376                       	dc.b $3, $76
000290F5 3377                       	dc.b $33, $77
000290F7 02                         DPLC_33c5_283: 	dc.b $2
000290F8 E37B                       	dc.b $E3, $7B
000290FA 054A                       	dc.b $5, $4A
000290FC 01                         DPLC_33c5_288: 	dc.b $1
000290FD D561                       	dc.b $D5, $61
000290FF 04                         DPLC_33c5_28B: 	dc.b $4
00029100 B399                       	dc.b $B3, $99
00029102 33A5                       	dc.b $33, $A5
00029104 03A9                       	dc.b $3, $A9
00029106 03AA                       	dc.b $3, $AA
00029108 04                         DPLC_33c5_294: 	dc.b $4
00029109 B3AB                       	dc.b $B3, $AB
0002910B 33B7                       	dc.b $33, $B7
0002910D 03BB                       	dc.b $3, $BB
0002910F 03BC                       	dc.b $3, $BC
00029111 05                         DPLC_33c5_29D: 	dc.b $5
00029112 83BD                       	dc.b $83, $BD
00029114 13C6                       	dc.b $13, $C6
00029116 53C8                       	dc.b $53, $C8
00029118 13CE                       	dc.b $13, $CE
0002911A 03D0                       	dc.b $3, $D0
0002911C 05                         DPLC_33c5_2A8: 	dc.b $5
0002911D 83D1                       	dc.b $83, $D1
0002911F 13DA                       	dc.b $13, $DA
00029121 53C8                       	dc.b $53, $C8
00029123 13CE                       	dc.b $13, $CE
00029125 03D0                       	dc.b $3, $D0
00029127 02                         DPLC_33c5_2B3: 	dc.b $2
00029128 83DC                       	dc.b $83, $DC
0002912A 73E5                       	dc.b $73, $E5
0002912C 03                         DPLC_33c5_2B8: 	dc.b $3
0002912D 83ED                       	dc.b $83, $ED
0002912F 23F6                       	dc.b $23, $F6
00029131 13F9                       	dc.b $13, $F9
00029133 02                         DPLC_33c5_2BF: 	dc.b $2
00029134 83FB                       	dc.b $83, $FB
00029136 7404                       	dc.b $74, $4
00029138 03                         DPLC_33c5_2C4: 	dc.b $3
00029139 83ED                       	dc.b $83, $ED
0002913B 240C                       	dc.b $24, $C
0002913D 140F                       	dc.b $14, $F
0002913F 02                         DPLC_33c5_2CB: 	dc.b $2
00029140 5411                       	dc.b $54, $11
00029142 B417                       	dc.b $B4, $17
00029144 03                         DPLC_33c5_2D0: 	dc.b $3
00029145 8423                       	dc.b $84, $23
00029147 342C                       	dc.b $34, $2C
00029149 0430                       	dc.b $4, $30
0002914B 03                         DPLC_33c5_2D7: 	dc.b $3
0002914C 7431                       	dc.b $74, $31
0002914E 1439                       	dc.b $14, $39
00029150 B43B                       	dc.b $B4, $3B
00029152 05                         DPLC_33c5_2DE: 	dc.b $5
00029153 7447                       	dc.b $74, $47
00029155 144F                       	dc.b $14, $4F
00029157 5451                       	dc.b $54, $51
00029159 3457                       	dc.b $34, $57
0002915B 045B                       	dc.b $4, $5B
0002915D 05                         DPLC_33c5_2E9: 	dc.b $5
0002915E 745C                       	dc.b $74, $5C
00029160 144F                       	dc.b $14, $4F
00029162 5464                       	dc.b $54, $64
00029164 3457                       	dc.b $34, $57
00029166 045B                       	dc.b $4, $5B
00029168 02                         DPLC_33c5_2F4: 	dc.b $2
00029169 246A                       	dc.b $24, $6A
0002916B F46D                       	dc.b $F4, $6D
0002916D 03                         DPLC_33c5_2F9: 	dc.b $3
0002916E 247D                       	dc.b $24, $7D
00029170 B480                       	dc.b $B4, $80
00029172 248C                       	dc.b $24, $8C
00029174 01                         DPLC_33c5_300: 	dc.b $1
00029175 B48F                       	dc.b $B4, $8F
00029177 01                         DPLC_33c5_303: 	dc.b $1
00029178 549B                       	dc.b $54, $9B
0002917A 01                         DPLC_33c5_306: 	dc.b $1
0002917B 14A1                       	dc.b $14, $A1
0002917D 02                         DPLC_33c5_309: 	dc.b $2
0002917E E356                       	dc.b $E3, $56
00029180 054A                       	dc.b $5, $4A
00029182 03                         DPLC_33c5_30E: 	dc.b $3
00029183 736E                       	dc.b $73, $6E
00029185 0376                       	dc.b $3, $76
00029187 3377                       	dc.b $33, $77
00029189 03                         DPLC_33c5_315: 	dc.b $3
0002918A B4A3                       	dc.b $B4, $A3
0002918C 14AF                       	dc.b $14, $AF
0002918E 34B1                       	dc.b $34, $B1
00029190 03                         DPLC_33c5_31C: 	dc.b $3
00029191 54B5                       	dc.b $54, $B5
00029193 B4BB                       	dc.b $B4, $BB
00029195 1074                       	dc.b $10, $74
00029197 02                         DPLC_33c5_323: 	dc.b $2
00029198 F4C7                       	dc.b $F4, $C7
0002919A 24D7                       	dc.b $24, $D7
0002919C 02                         DPLC_33c5_328: 	dc.b $2
0002919D F4DA                       	dc.b $F4, $DA
0002919F 14EA                       	dc.b $14, $EA
000291A1 02                         DPLC_33c5_32D: 	dc.b $2
000291A2 F502                       	dc.b $F5, $2
000291A4 2512                       	dc.b $25, $12
000291A6 02                         DPLC_33c5_332: 	dc.b $2
000291A7 F515                       	dc.b $F5, $15
000291A9 2525                       	dc.b $25, $25
000291AB 02                         DPLC_33c5_337: 	dc.b $2
000291AC F54B                       	dc.b $F5, $4B
000291AE 755B                       	dc.b $75, $5B
000291B0 00                         DPLC_33c5_33C: 	dc.b $0
000291B1 00                         DPLC_33c5_33D: 	dc.b $0
000291B2 00                         DPLC_33c5_33E: 	dc.b $0
000291B3 00                         DPLC_33c5_33F: 	dc.b $0
000291B4 02                         DPLC_33c5_340: 	dc.b $2
000291B5 F4DA                       	dc.b $F4, $DA
000291B7 14EA                       	dc.b $14, $EA
000291B9 00                         DPLC_33c5_345: 	dc.b $0
000291BA 02                         DPLC_33c5_346: 	dc.b $2
000291BB F4DA                       	dc.b $F4, $DA
000291BD 14EA                       	dc.b $14, $EA
000291BF 00                         DPLC_33c5_34B: 	dc.b $0
000291C0 00                         DPLC_33c5_34C: 	dc.b $0
000291C1 00                         DPLC_33c5_34D: 	dc.b $0
000291C2 02                         DPLC_33c5_34E: 	dc.b $2
000291C3 F4DA                       	dc.b $F4, $DA
000291C5 14EA                       	dc.b $14, $EA
000291C7 00                         DPLC_33c5_353: 	dc.b $0
000291C8 02                         DPLC_33c5_354: 	dc.b $2
000291C9 F4DA                       	dc.b $F4, $DA
000291CB 14EA                       	dc.b $14, $EA
000291CD 00                         DPLC_33c5_359: 	dc.b $0
000291CE 00                         DPLC_33c5_35A: 	dc.b $0
000291CF 00                         DPLC_33c5_35B: 	dc.b $0
000291D0 02                         DPLC_33c5_35C: 	dc.b $2
000291D1 F4DA                       	dc.b $F4, $DA
000291D3 14EA                       	dc.b $14, $EA
000291D5 00                         DPLC_33c5_361: 	dc.b $0
000291D6 02                         DPLC_33c5_362: 	dc.b $2
000291D7 F4DA                       	dc.b $F4, $DA
000291D9 14EA                       	dc.b $14, $EA
000291DB 00                         DPLC_33c5_367: 	dc.b $0
000291DC                            	even
000291DC                            	even
000291DC                            
000291DC                            ; ---------------------------------------------------------------------------
000291DC                            ; Uncompressed graphics	- Sonic
000291DC                            ; ---------------------------------------------------------------------------
000291DC                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00033FBC                            		even
00033FBC                            ; ---------------------------------------------------------------------------
00033FBC                            ; Compressed graphics - various
00033FBC                            ; ---------------------------------------------------------------------------
00033FBC                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000340C0                            		even
000340C0                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000340FA                            		even
000340FA                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00034290                            		even
00034290                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
000343D8                            		even
000343D8                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
000344E2                            		even
000344E2                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00034534                            		even
00034534                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003477C                            		even
0003477C                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00034902                            		even
00034902                            ; ---------------------------------------------------------------------------
00034902                            ; Sprite mappings - walls of the special stage
00034902                            ; ---------------------------------------------------------------------------
00034902                            Map_SSWalls:
00034902                            	include "_maps\SSwalls.asm"
00034902                            ; ---------------------------------------------------------------------------
00034902                            ; Sprite mappings - walls of the special stage
00034902                            ; ---------------------------------------------------------------------------
00034902 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00034906 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003490A 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003490E 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00034912 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00034916 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003491A 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003491E 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00034922 01                         byte_2C584:	dc.b 1
00034923 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00034928 01                         byte_2C58A:	dc.b 1
00034929 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003492E 01                         byte_2C590:	dc.b 1
0003492F F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00034934 01                         byte_2C596:	dc.b 1
00034935 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003493A 01                         byte_2C59C:	dc.b 1
0003493B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00034940 01                         byte_2C5A2:	dc.b 1
00034941 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00034946 01                         byte_2C5A8:	dc.b 1
00034947 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003494C 01                         byte_2C5AE:	dc.b 1
0003494D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00034952 01                         byte_2C5B4:	dc.b 1
00034953 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00034958 01                         byte_2C5BA:	dc.b 1
00034959 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003495E 01                         byte_2C5C0:	dc.b 1
0003495F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00034964 01                         byte_2C5C6:	dc.b 1
00034965 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003496A 01                         byte_2C5CC:	dc.b 1
0003496B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00034970 01                         byte_2C5D2:	dc.b 1
00034971 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00034976 01                         byte_2C5D8:	dc.b 1
00034977 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003497C 01                         byte_2C5DE:	dc.b 1
0003497D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00034982                            		even
00034982                            		even
00034982                            ; ---------------------------------------------------------------------------
00034982                            ; Compressed graphics - special stage
00034982                            ; ---------------------------------------------------------------------------
00034982                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
000352BA                            		even
000352BA                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00035408                            		even
00035408                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003689A                            		even
0003689A                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00036B9A                            		even
00036B9A                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003708E                            		even
0003708E                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003717C                            		even
0003717C                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003724C                            		even
0003724C                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00037342                            		even
00037342                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
000373A0                            		even
000373A0                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00037432                            		even
00037432                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000374F4                            		even
000374F4                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000375C2                            		even
000375C2                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003768E                            		even
0003768E                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00037756                            		even
00037756                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00037820                            		even
00037820                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000378F0                            		even
000378F0                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00037AE4                            		even
00037AE4                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00037C4C                            		even
00037C4C                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00037CFC                            		even
00037CFC                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00037DD6                            		even
00037DD6                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00037E5A                            		even
00037E5A                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00037FD8                            		even
00037FD8                            ; ---------------------------------------------------------------------------
00037FD8                            ; Compressed graphics - GHZ stuff
00037FD8                            ; ---------------------------------------------------------------------------
00037FD8                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00038022                            		even
00038022                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003813C                            		even
0003813C                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00038228                            		even
00038228                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00038270                            		even
00038270                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003840E                            		even
0003840E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000384CA                            		even
000384CA                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
000386DE                            		even
000386DE                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003880A                            		even
0003880A                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00038938                            		even
00038938                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000389D6                            		even
000389D6                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00038A36                            		even
00038A36                            ; ---------------------------------------------------------------------------
00038A36                            ; Compressed graphics - LZ stuff
00038A36                            ; ---------------------------------------------------------------------------
00038A36                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00038B5A                            		even
00038B5A                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003934E                            		even
0003934E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000394CE                            		even
000394CE                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00039638                            		even
00039638                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00039C8E                            		even
00039C8E                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00039D44                            		even
00039D44                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00039DE6                            		even
00039DE6                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00039F42                            		even
00039F42                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00039FA6                            		even
00039FA6                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003A0F8                            		even
0003A0F8                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003A5DA                            		even
0003A5DA                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003A74A                            		even
0003A74A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003AA02                            		even
0003AA02                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003AB3A                            		even
0003AB3A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003AC64                            		even
0003AC64                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0003AD74                            		even
0003AD74                            ; ---------------------------------------------------------------------------
0003AD74                            ; Compressed graphics - MZ stuff
0003AD74                            ; ---------------------------------------------------------------------------
0003AD74                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003B002                            		even
0003B002                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0003B0C0                            		even
0003B0C0                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003B178                            		even
0003B178                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003B1CC                            		even
0003B1CC                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003B49E 00                         		even
0003B49E                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0003BDB4                            		even
0003BDB4                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003BF18                            		even
0003BF18                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0003BFA0                            		even
0003BFA0                            ; ---------------------------------------------------------------------------
0003BFA0                            ; Compressed graphics - SLZ stuff
0003BFA0                            ; ---------------------------------------------------------------------------
0003BFA0                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003C1DC                            		even
0003C1DC                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0003C322                            		even
0003C322                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003C566                            		even
0003C566                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003C5C8                            		even
0003C5C8                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003C6AA                            		even
0003C6AA                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003C88C                            		even
0003C88C                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003C998                            		even
0003C998                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003CA3C                            		even
0003CA3C                            ; ---------------------------------------------------------------------------
0003CA3C                            ; Compressed graphics - SYZ stuff
0003CA3C                            ; ---------------------------------------------------------------------------
0003CA3C                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003CBA6                            		even
0003CBA6                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003CC08                            		even
0003CC08                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003CCEA                            		even
0003CCEA                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003CF78                            		even
0003CF78                            ; ---------------------------------------------------------------------------
0003CF78                            ; Compressed graphics - SBZ stuff
0003CF78                            ; ---------------------------------------------------------------------------
0003CF78                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003CFCC                            		even
0003CFCC                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003D268                            		even
0003D268                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003D46C                            		even
0003D46C                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003D60A                            		even
0003D60A                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003D93A                            		even
0003D93A                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003DB18                            		even
0003DB18                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003DB70                            		even
0003DB70                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003DD3A 00                         		even
0003DD3A                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003DE38                            		even
0003DE38                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003DFC4                            		even
0003DFC4                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003E014                            		even
0003E014                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003E06C                            		even
0003E06C                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003E168                            		even
0003E168                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003E27E                            		even
0003E27E                            ; ---------------------------------------------------------------------------
0003E27E                            ; Compressed graphics - enemies
0003E27E                            ; ---------------------------------------------------------------------------
0003E27E                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003E6EC 00                         		even
0003E6EC                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003E896 00                         		even
0003E896                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003EC58 00                         		even
0003EC58                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003EE40                            		even
0003EE40                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003EFF8 00                         		even
0003EFF8                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003F142                            		even
0003F142                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003F3CC                            		even
0003F3CC                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003F9F0                            		even
0003F9F0                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003FBE6                            		even
0003FBE6                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00040204                            		even
00040204                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00040604 00                         		even
00040604                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00040900                            		even
00040900                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00040B48                            		even
00040B48                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00040DE0                            		even
00040DE0                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
00040FBE                            		even
00040FBE                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0004114C                            		even
0004114C                            ; ---------------------------------------------------------------------------
0004114C                            ; Compressed graphics - various
0004114C                            ; ---------------------------------------------------------------------------
0004114C                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0004167C                            		even
0004167C                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00041772                            		even
00041772                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00041878                            		even
00041878                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0004196C                            		even
0004196C                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00041EB0                            		even
00041EB0                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
00042516                            		even
00042516                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
000425C6                            		even
000425C6                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
00042758                            		even
00042758                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0004286C                            		even
0004286C                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0004293E                            		even
0004293E                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
00042DBA                            		even
00042DBA                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
00042E7A                            		even
00042E7A                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
00042FEE                            		even
00042FEE                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
000432F0                            		even
000432F0                            ; ---------------------------------------------------------------------------
000432F0                            ; Compressed graphics - continue screen
000432F0                            ; ---------------------------------------------------------------------------
000432F0                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
000435A0                            		even
000435A0                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000437DA                            		even
000437DA                            ; ---------------------------------------------------------------------------
000437DA                            ; Compressed graphics - animals
000437DA                            ; ---------------------------------------------------------------------------
000437DA                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00043932                            		even
00043932                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00043A8E                            		even
00043A8E                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00043C0A                            		even
00043C0A                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00043D26                            		even
00043D26                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00043E5C                            		even
00043E5C                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00043F96                            		even
00043F96                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000440F2                            		even
000440F2                            ; ---------------------------------------------------------------------------
000440F2                            ; Compressed graphics - primary patterns and block mappings
000440F2                            ; ---------------------------------------------------------------------------
000440F2                            Blk16_GHZ:	incbin	map16\ghz.bin
00044A06                            		even
00044A06                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00046314                            		even
00046314                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00047694                            		even
00047694                            Blk256_GHZ:	incbin	map256\ghz.bin
00049ACE                            		even
00049ACE                            Blk16_LZ:	incbin	map16\lz.bin
0004A208                            		even
0004A208                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004C65C                            		even
0004C65C                            Blk256_LZ:	incbin	map256\lz.bin
0004EFDC                            		even
0004EFDC                            Blk16_MZ:	incbin	map16\mz.bin
0004F744                            		even
0004F744                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
00052080                            		even
00052080                            Blk256_MZ:	incbin	map256\mz.bin
00053896                            		even
00053896                            Blk16_SLZ:	incbin	map16\slz.bin
00053F60                            		even
00053F60                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00055EB4                            		even
00055EB4                            Blk256_SLZ:	incbin	map256\slz.bin
0005652E                            		even
0005652E                            Blk16_SYZ:	incbin	map16\syz.bin
00057154                            		even
00057154                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005B6E6                            		even
0005B6E6                            Blk256_SYZ:	incbin	map256\syz.bin
0005D742                            		even
0005D742                            Blk16_SBZ:	incbin	map16\sbz.bin
0005E68A                            		even
0005E68A                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0006104E                            		even
0006104E                            Blk256_SBZ:	incbin	map256\sbz.bin
00063B44                            		even
00063B44                            Blk16_BHZ:	incbin	map16\bhz.bin
000643D2                            		even
000643D2                            Nem_BHZ:	incbin	artnem\8x8bhz.bin	; GHZ primary patterns
000671D0                            		even
000671D0                            Blk256_BHZ:	incbin	map256\bhz.bin
00068DFE                            		even
00068DFE                            ; ---------------------------------------------------------------------------
00068DFE                            ; Compressed graphics - bosses and ending sequence
00068DFE                            ; ---------------------------------------------------------------------------
00068DFE                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00069618 00                         		even
00069618                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00069C66                            		even
00069C66                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00069CE0                            		even
00069CE0                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00069FCA                            		even
00069FCA                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006A84E                            		even
0006A84E                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006B5A4 00                         		even
0006B5A4                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006BD0C                            		even
0006BD0C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006C28C                            		even
0006C28C                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006C3AC                            		even
0006C3AC                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006C5AA                            		even
0006C5AA                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006D788                            		even
0006D788                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006E0CC                            		even
0006E0CC                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006E4A2                            		even
0006E4A2                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006EA32                            		even
0006EA32                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006ECBA                            		even
0006ECBA                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006F2A8 00                         		even
0006F2A8                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006F530                            		even
0006F530                            		incbin	misc\padding2.bin
0006F634                            		even
0006F634                            ; ---------------------------------------------------------------------------
0006F634                            ; Collision data
0006F634                            ; ---------------------------------------------------------------------------
0006F634                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006F734                            		even
0006F734                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00070734                            		even
00070734                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00071734                            		even
00071734                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000718EC 00                         		even
000718EC                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00071A54                            		even
00071A54                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00071BE4 00                         		even
00071BE4                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00071DD8                            		even
00071DD8                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00071FDE                            		even
00071FDE                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0007227C                            		even
0007227C                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
00072408                            		even
00072408                            ; ---------------------------------------------------------------------------
00072408                            ; Special layouts
00072408                            ; ---------------------------------------------------------------------------
00072408                            SS_1:		incbin	sslayout\1.bin
00072650                            		even
00072650                            SS_2:		incbin	sslayout\2.bin
00072A08                            		even
00072A08                            SS_3:		incbin	sslayout\3.bin
00072D64                            		even
00072D64                            SS_4:		incbin	sslayout\4.bin
0007323E                            		even
0007323E                            SS_5:		incbin	sslayout\5.bin
000736EE                            		even
000736EE                            SS_6:		incbin	sslayout\6.bin
000739E0                            		even
000739E0                            ; ---------------------------------------------------------------------------
000739E0                            ; Animated uncompressed graphics
000739E0                            ; ---------------------------------------------------------------------------
000739E0                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00073BE0                            		even
00073BE0                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00073FE0                            		even
00073FE0                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00074460                            		even
00074460                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00074760                            		even
00074760                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00074D60                            		even
00074D60                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00075060                            		even
00075060                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00075AE0                            		even
00075AE0                            
00075AE0                            ; ---------------------------------------------------------------------------
00075AE0                            ; Level	layout index
00075AE0                            ; ---------------------------------------------------------------------------
00075AE0 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00075AE6 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00075AEC 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00075AF2 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00075AF8 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00075AFE 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00075B04 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00075B0A 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00075B10 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00075B16 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00075B1C 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00075B22 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00075B28 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00075B2E 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00075B34 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00075B3A 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00075B40 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00075B46 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00075B4C 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00075B52 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00075B58 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00075B5E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00075B64 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00075B6A 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00075B70 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00075B76 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00075B7C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00075B82 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00075B88 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
00075B8E 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
00075B94 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
00075B9A 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00075BA0                            
00075BA0                            Level_GHZ1:	incbin	levels\ghz1.bin
00075C92                            		even
00075C92 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00075C96                            Level_GHZ2:	incbin	levels\ghz2.bin
00075D5E                            		even
00075D5E 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00075D62                            Level_GHZ3:	incbin	levels\ghz3.bin
00075E84                            		even
00075E84                            Level_GHZbg:	incbin	levels\ghzbg.bin
00075EA6                            		even
00075EA6 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00075EAA 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00075EAE                            
00075EAE                            Level_LZ1:	incbin	levels\lz1.bin
00075FB0                            		even
00075FB0                            Level_LZbg:	incbin	levels\lzbg.bin
000760B2                            		even
000760B2 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000760B6                            Level_LZ2:	incbin	levels\lz2.bin
00076150                            		even
00076150 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00076154                            Level_LZ3:	incbin	levels\lz3.bin
0007626E                            		even
0007626E 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00076272                            Level_SBZ3:	incbin	levels\sbz3.bin
0007632C                            		even
0007632C 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00076330                            
00076330                            Level_MZ1:	incbin	levels\mz1.bin
000763CE                            		even
000763CE                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00076448                            		even
00076448                            Level_MZ2:	incbin	levels\mz2.bin
000764EC                            		even
000764EC                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0007657E                            		even
0007657E 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00076582                            Level_MZ3:	incbin	levels\mz3.bin
00076664                            		even
00076664                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00076708 00                         		even
00076708 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007670C 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00076710                            
00076710                            Level_SLZ1:	incbin	levels\slz1.bin
00076822                            		even
00076822                            Level_SLZbg:	incbin	levels\slzbg.bin
0007683C                            		even
0007683C                            Level_SLZ2:	incbin	levels\slz2.bin
0007692C                            		even
0007692C                            Level_SLZ3:	incbin	levels\slz3.bin
00076A46                            		even
00076A46 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00076A4A                            
00076A4A                            Level_SYZ1:	incbin	levels\syz1.bin
00076B06 00                         		even
00076B06                            Level_SYZbg:	incbin	levels\syzbg.bin
00076B40                            		even
00076B40 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00076B44                            Level_SYZ2:	incbin	levels\syz2.bin
00076C48                            		even
00076C48 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00076C4C                            Level_SYZ3:	incbin	levels\syz3.bin
00076DA6 00                         		even
00076DA6 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00076DAA 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00076DAE                            
00076DAE                            Level_SBZ1:	incbin	levels\sbz1.bin
00076ED0                            		even
00076ED0                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00076F0E                            		even
00076F0E                            Level_SBZ2:	incbin	levels\sbz2.bin
00077050                            		even
00077050                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
000771BA                            		even
000771BA 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000771BE 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000771C2                            Level_End:	incbin	levels\ending.bin
000771F2 00                         		even
000771F2 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000771F6                            Level_BHZ1:	incbin	levels\bhz1.bin
000772E8                            		even
000772E8                            
000772E8                            Level_BHZ2:	incbin	levels\bhz2.bin
000773B0                            		even
000773B0                            
000773B0                            Level_BHZ3:	incbin	levels\bhz3.bin
000774D2                            		even
000774D2                            Level_BHZbg:	incbin	levels\bhzbg.bin
000775D4                            		even
000775D4                            ; ---------------------------------------------------------------------------
000775D4                            ; Animated uncompressed giant ring graphics
000775D4                            ; ---------------------------------------------------------------------------
000775D4                            Art_BigRing:	incbin	artunc\bigring.bin
00078214                            		even
00078214                            
00078214                            		incbin	misc\padding3.bin
000782B0                            		even
000782B0                            
000782B0                            ; ---------------------------------------------------------------------------
000782B0                            ; Sprite locations index
000782B0                            ; ---------------------------------------------------------------------------
000782B0 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782B4 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782B8 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782BC 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782C0 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782C4 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782C8 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782CC 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782D0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782D4 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782D8 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782DC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782E0 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782E4 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782E8 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782EC 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782F0 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782F4 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782F8 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000782FC 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078300 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078304 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078308 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007830C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078310 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078314 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078318 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007831C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078320 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078324 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078328 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007832C 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078330                            ObjPos_LZxpf_Index:
00078330 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00078334 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
00078338 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
0007833C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00078340                            
00078340                            ObjPos_SBZ1pf_Index:
00078340 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00078344 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
00078348 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
0007834C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00078350 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00078356                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00078BC6                            		even
00078BC6                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00078E96                            		even
00078E96                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007987A                            		even
0007987A                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00079C22                            		even
00079C22                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00079F58                            		even
00079F58                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007A46E                            		even
0007A46E                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007A906                            		even
0007A906                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007A938                            		even
0007A938                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007A96A                            		even
0007A96A                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007A99C                            		even
0007A99C                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007A9CE                            		even
0007A9CE                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007AA18                            		even
0007AA18                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007AA56                            		even
0007AA56                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007AD62                            		even
0007AD62                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007B224                            		even
0007B224                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007B7AC                            		even
0007B7AC                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007B7D6                            		even
0007B7D6                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007BC3E                            		even
0007BC3E                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0007C220                            		even
0007C220                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0007C892                            		even
0007C892                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0007CDFC                            		even
0007CDFC                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0007D402                            		even
0007D402                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007DB40                            		even
0007DB40                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007E21E                            		even
0007E21E                            ObjPos_FZ:	incbin	objpos\fz.bin
0007E266                            		even
0007E266                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007E298                            		even
0007E298                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007E2CA                            		even
0007E2CA                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007E2FC                            		even
0007E2FC                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007E32E                            		even
0007E32E                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007E360                            		even
0007E360                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007E398                            		even
0007E398                            ObjPos_End:	incbin	objpos\ending.bin
0007E4F4                            		even
0007E4F4                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007EB06                            		even
0007EB06                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007F0CA                            		even
0007F0CA                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007F784                            		even
0007F784 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007F78A                            ; ---------------------------------------------------------------------------
0007F78A                            		incbin	misc\padding4.bin
0007FDB4                            		even
0007FDB4                            
0007FDB4 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007FDB8 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0
0007FDBC 0000 0000                  Go_MusicIndex:	dc.l MusicIndex-4		; XREF: Sound_Music
0007FDC0 0000 0000                  Go_MusicIndex80:	dc.l MusicIndex80-4		; XREF: Sound_Music
0007FDC4 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_SFX
0007FDC8 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_Music
0007FDCC 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007FDD0                            ; ---------------------------------------------------------------------------
0007FDD0                            ; PSG instruments used in music
0007FDD0                            ; ---------------------------------------------------------------------------
0007FDD0 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007FDDC 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007FDE8 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007FDF4                            
0007FDF4 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007FE04 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007FE0B                            
0007FE0B 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007FE12                            
0007FE12 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007FE22 80                                     dc.b    $80
0007FE23                            
0007FE23 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007FE2E                            
0007FE2E 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007FE3E 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007FE4E 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007FE58                            
0007FE58 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007FE67                            
0007FE67 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007FE77 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007FE83                            
0007FE83 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007FE93 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007FEA3 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007FEAB                            
0007FEAB 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007FEBB 80                                     dc.b    $80
0007FEBC                            
0007FEBC 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007FEC4                            ; ---------------------------------------------------------------------------
0007FEC4                            ; Music	Pointers
0007FEC4                            ; ---------------------------------------------------------------------------
0007FEC4                            MusicIndex:	
0007FEC4 0000 0000                  		dc.l Music9F ; test
0007FEC8 0000 0000                  		dc.l Music92 ; test
0007FECC                            
0007FECC                            MusicIndex80:
0007FECC 0000 0000 0000 0000        		dc.l Music81, Music82
0007FED4 0000 0000 0000 0000        		dc.l Music83, Music84
0007FEDC 0000 0000 0000 0000        		dc.l Music85, Music86
0007FEE4 0000 0000 0000 0000        		dc.l Music87, Music88
0007FEEC 0000 0000 0000 0000        		dc.l Music89, Music8A
0007FEF4 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007FEFC 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007FF04 0000 0000 0000 0000        		dc.l Music8F, Music90
0007FF0C 0000 0000 0000 0000        		dc.l Music91, Music92
0007FF14 0000 0000 0000 0000        		dc.l Music93, Music94
0007FF1C 0000 0000 0000 0000        		dc.l Music95, Music96
0007FF24 0000 0000 0000 0000        		dc.l Music97, Music98
0007FF2C 0000 0000 0000 0000        		dc.l Music99, Music9A
0007FF34 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007FF3C 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007FF44 0000 0000                  		dc.l Music9F
0007FF48                            ; ---------------------------------------------------------------------------
0007FF48                            ; Type of sound	being played ($00 = music; $70 = normal	sound effect)
0007FF48                            ; ---------------------------------------------------------------------------
0007FF48                            SoundTypes:			
0007FF48 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $01
0007FF57 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $10
0007FF67 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $20
0007FF77 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $30
0007FF87 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $40
0007FF97 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $50
0007FFA7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $60
0007FFB7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $70
0007FFC7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $80
0007FFD7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
0007FFE7 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
0007FFF7 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00080007 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00080017 7070 7070 7070 7070 7070+  		dc.b $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $D0
00080027 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $E0
00080037 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $F0
00080046                            		even
00080046                            
00080046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080046                            
00080046                            
00080046                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00080046                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
00080046 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; if in an NTSC region(!), branch ; TODO: use the VDP pal value instead
0008004C 6700                       		beq.s	@main
0008004E 7000                       		moveq	#0,d0			; PAL song timer "optimization"
00080050 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
00080054 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
00080058 4840                       		swap	d0
0008005A 4A40                       		tst.w	d0
0008005C 6600                       		bne.s	@main
0008005E 6100 0000                  		bsr.w	@main
00080062                            @main:
00080062 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0008006A 4E71                       		nop
0008006C 4E71                       		nop
0008006E 4E71                       		nop
00080070                            ; loc_71B5A:
00080070                            @wait:
00080070 0839 0000 00A1 1100        		btst	#0,($A11100).l
00080078 66F6                       		bne.s	@wait
0008007A                            
0008007A 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00080082 6700                       		beq.s	loc_71B82
00080084 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0008008C 4E71                       		nop
0008008E 4E71                       		nop
00080090 4E71                       		nop
00080092 4E71                       		nop
00080094 4E71                       		nop
00080096 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
00080098                            ; ===========================================================================
00080098                            
00080098                            loc_71B82:
00080098 4DF9 00FF F000             		lea	($FFF000).l,a6
0008009E 422E 000E                  		clr.b	$E(a6)
000800A2 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000800A6 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000800AA 532E 0001                  		subq.b	#1,1(a6)
000800AE 6600                       		bne.s	loc_71B9E
000800B0 4EBA 0000                  		jsr	sub_7260C(pc)
000800B4                            
000800B4                            loc_71B9E:
000800B4 102E 0004                  		move.b	4(a6),d0
000800B8 6700                       		beq.s	loc_71BA8
000800BA 4EBA 0000                  		jsr	sub_72504(pc)
000800BE                            
000800BE                            loc_71BA8:
000800BE 4A2E 0024                  		tst.b	$24(a6)
000800C2 6700                       		beq.s	loc_71BB2
000800C4 4EBA 0000                  		jsr	sub_7267C(pc)
000800C8                            
000800C8                            loc_71BB2:
000800C8 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000800CC 6700                       		beq.s	loc_71BBC	; if not, branch
000800CE 4EBA 0000                  		jsr	Sound_Play(pc)
000800D2                            
000800D2                            loc_71BBC:
000800D2 4BEE 0040                  		lea	$40(a6),a5
000800D6 4A15                       		tst.b	(a5)
000800D8 6A00                       		bpl.s	loc_71BD4
000800DA 4EBA 0000                  		jsr	sub_71C4E(pc)
000800DE                            
000800DE                            loc_71BD4:
000800DE 422E 0008                  		clr.b	8(a6)
000800E2 7E05                       		moveq	#5,d7
000800E4                            
000800E4                            loc_71BDA:
000800E4 DAFC 0030                  		adda.w	#$30,a5
000800E8 4A15                       		tst.b	(a5)
000800EA 6A00                       		bpl.s	loc_71BE6
000800EC 4EBA 0000                  		jsr	sub_71CCA(pc)
000800F0                            
000800F0                            loc_71BE6:
000800F0 51CF FFF2                  		dbf	d7,loc_71BDA
000800F4                            
000800F4 7E02                       		moveq	#2,d7
000800F6                            
000800F6                            loc_71BEC:
000800F6 DAFC 0030                  		adda.w	#$30,a5
000800FA 4A15                       		tst.b	(a5)
000800FC 6A00                       		bpl.s	loc_71BF8
000800FE 4EBA 0000                  		jsr	sub_72850(pc)
00080102                            
00080102                            loc_71BF8:
00080102 51CF FFF2                  		dbf	d7,loc_71BEC
00080106                            
00080106 1D7C 0080 000E             		move.b	#$80,$E(a6)
0008010C 7E02                       		moveq	#2,d7
0008010E                            
0008010E                            loc_71C04:
0008010E DAFC 0030                  		adda.w	#$30,a5
00080112 4A15                       		tst.b	(a5)
00080114 6A00                       		bpl.s	loc_71C10
00080116 4EBA 0000                  		jsr	sub_71CCA(pc)
0008011A                            
0008011A                            loc_71C10:
0008011A 51CF FFF2                  		dbf	d7,loc_71C04
0008011E                            
0008011E 7E02                       		moveq	#2,d7
00080120                            
00080120                            loc_71C16:
00080120 DAFC 0030                  		adda.w	#$30,a5
00080124 4A15                       		tst.b	(a5)
00080126 6A00                       		bpl.s	loc_71C22
00080128 4EBA 0000                  		jsr	sub_72850(pc)
0008012C                            
0008012C                            loc_71C22:
0008012C 51CF FFF2                  		dbf	d7,loc_71C16
00080130 1D7C 0040 000E             		move.b	#$40,$E(a6)
00080136 DAFC 0030                  		adda.w	#$30,a5
0008013A 4A15                       		tst.b	(a5)
0008013C 6A00                       		bpl.s	loc_71C38
0008013E 4EBA 0000                  		jsr	sub_71CCA(pc)
00080142                            
00080142                            loc_71C38:
00080142 DAFC 0030                  		adda.w	#$30,a5
00080146 4A15                       		tst.b	(a5)
00080148 6A00                       		bpl.s	loc_71C44
0008014A 4EBA 0000                  		jsr	sub_72850(pc)
0008014E                            
0008014E                            loc_71C44:
0008014E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00080156 4E75                       		rts	
00080158                            ; End of function sub_71B4C
00080158                            
00080158                            
00080158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080158                            
00080158                            
00080158                            sub_71C4E:				; XREF: sub_71B4C
00080158 532D 000E                  		subq.b	#1,$E(a5)
0008015C 6600                       		bne.s	locret_71CAA
0008015E 1D7C 0080 0008             		move.b	#$80,8(a6)
00080164 286D 0004                  		movea.l	4(a5),a4
00080168                            
00080168                            loc_71C5E:
00080168 7A00                       		moveq	#0,d5
0008016A 1A1C                       		move.b	(a4)+,d5
0008016C 0C05 00E0                  		cmpi.b	#-$20,d5
00080170 6500                       		bcs.s	loc_71C6E
00080172 4EBA 0000                  		jsr	sub_72A5A(pc)
00080176 60F0                       		bra.s	loc_71C5E
00080178                            ; ===========================================================================
00080178                            
00080178                            loc_71C6E:
00080178 4A05                       		tst.b	d5
0008017A 6A00                       		bpl.s	loc_71C84
0008017C 1B45 0010                  		move.b	d5,$10(a5)
00080180 1A1C                       		move.b	(a4)+,d5
00080182 6A00                       		bpl.s	loc_71C84
00080184 534C                       		subq.w	#1,a4
00080186 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0008018C 6000                       		bra.s	loc_71C88
0008018E                            ; ===========================================================================
0008018E                            
0008018E                            loc_71C84:
0008018E 4EBA 0000                  		jsr	sub_71D40(pc)
00080192                            
00080192                            loc_71C88:
00080192 2B4C 0004                  		move.l	a4,4(a5)
00080196 0815 0002                  		btst	#2,(a5)
0008019A 6600                       		bne.s	locret_71CAA
0008019C 7000                       		moveq	#0,d0
0008019E 102D 0010                  		move.b	$10(a5),d0
000801A2 0C00 0080                  		cmpi.b	#$80,d0
000801A6 6700                       		beq.s	locret_71CAA
000801A8 0800 0003                  		btst	#3,d0
000801AC 6600                       		bne.s	loc_71CAC
000801AE 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000801B4                            
000801B4                            locret_71CAA:
000801B4 4E75                       		rts	
000801B6                            ; ===========================================================================
000801B6                            
000801B6                            loc_71CAC:
000801B6 0400 0088                  		subi.b	#$88,d0
000801BA 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
000801BE 13C0 00A0 00EA             		move.b	d0,($A000EA).l
000801C4 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
000801CC 4E75                       		rts	
000801CE                            ; End of function sub_71C4E
000801CE                            
000801CE                            ; ===========================================================================
000801CE 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000801D4                            
000801D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000801D4                            
000801D4                            
000801D4                            sub_71CCA:				; XREF: sub_71B4C
000801D4 532D 000E                  		subq.b	#1,$E(a5)
000801D8 6600                       		bne.s	loc_71CE0
000801DA 0895 0004                  		bclr	#4,(a5)
000801DE 4EBA 0000                  		jsr	sub_71CEC(pc)
000801E2 4EBA 0000                  		jsr	sub_71E18(pc)
000801E6 6000 0000                  		bra.w	loc_726E2
000801EA                            ; ===========================================================================
000801EA                            
000801EA                            loc_71CE0:
000801EA 4EBA 0000                  		jsr	sub_71D9E(pc)
000801EE 4EBA 0000                  		jsr	sub_71DC6(pc)
000801F2 6000 0000                  		bra.w	loc_71E24
000801F6                            ; End of function sub_71CCA
000801F6                            
000801F6                            
000801F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000801F6                            
000801F6                            
000801F6                            sub_71CEC:				; XREF: sub_71CCA
000801F6 286D 0004                  		movea.l	4(a5),a4
000801FA 0895 0001                  		bclr	#1,(a5)
000801FE                            
000801FE                            loc_71CF4:
000801FE 7A00                       		moveq	#0,d5
00080200 1A1C                       		move.b	(a4)+,d5
00080202 0C05 00E0                  		cmpi.b	#-$20,d5
00080206 6500                       		bcs.s	loc_71D04
00080208 4EBA 0000                  		jsr	sub_72A5A(pc)
0008020C 60F0                       		bra.s	loc_71CF4
0008020E                            ; ===========================================================================
0008020E                            
0008020E                            loc_71D04:
0008020E 4EBA 0000                  		jsr	sub_726FE(pc)
00080212 4A05                       		tst.b	d5
00080214 6A00                       		bpl.s	loc_71D1A
00080216 4EBA 0000                  		jsr	sub_71D22(pc)
0008021A 1A1C                       		move.b	(a4)+,d5
0008021C 6A00                       		bpl.s	loc_71D1A
0008021E 534C                       		subq.w	#1,a4
00080220 6000 0000                  		bra.w	sub_71D60
00080224                            ; ===========================================================================
00080224                            
00080224                            loc_71D1A:
00080224 4EBA 0000                  		jsr	sub_71D40(pc)
00080228 6000 0000                  		bra.w	sub_71D60
0008022C                            ; End of function sub_71CEC
0008022C                            
0008022C                            
0008022C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008022C                            
0008022C                            
0008022C                            sub_71D22:				; XREF: sub_71CEC
0008022C 0405 0080                  		subi.b	#$80,d5
00080230 6700                       		beq.s	loc_71D58
00080232 DA2D 0008                  		add.b	8(a5),d5
00080236 0245 007F                  		andi.w	#$7F,d5
0008023A E34D                       		lsl.w	#1,d5
0008023C 41FA 0000                  		lea	word_72790(pc),a0
00080240 3C30 5000                  		move.w	(a0,d5.w),d6
00080244 3B46 0010                  		move.w	d6,$10(a5)
00080248 4E75                       		rts	
0008024A                            ; End of function sub_71D22
0008024A                            
0008024A                            
0008024A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008024A                            
0008024A                            
0008024A                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0008024A 1005                       		move.b	d5,d0
0008024C 122D 0002                  		move.b	2(a5),d1
00080250                            
00080250                            loc_71D46:
00080250 5301                       		subq.b	#1,d1
00080252 6700                       		beq.s	loc_71D4E
00080254 D005                       		add.b	d5,d0
00080256 60F8                       		bra.s	loc_71D46
00080258                            ; ===========================================================================
00080258                            
00080258                            loc_71D4E:
00080258 1B40 000F                  		move.b	d0,$F(a5)
0008025C 1B40 000E                  		move.b	d0,$E(a5)
00080260 4E75                       		rts	
00080262                            ; End of function sub_71D40
00080262                            
00080262                            ; ===========================================================================
00080262                            
00080262                            loc_71D58:				; XREF: sub_71D22
00080262 08D5 0001                  		bset	#1,(a5)
00080266 426D 0010                  		clr.w	$10(a5)
0008026A                            
0008026A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008026A                            
0008026A                            
0008026A                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0008026A 2B4C 0004                  		move.l	a4,4(a5)
0008026E 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00080274 0815 0004                  		btst	#4,(a5)
00080278 6600                       		bne.s	locret_71D9C
0008027A 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00080280 422D 000C                  		clr.b	$C(a5)
00080284 0815 0003                  		btst	#3,(a5)
00080288 6700                       		beq.s	locret_71D9C
0008028A 206D 0014                  		movea.l	$14(a5),a0
0008028E 1B58 0018                  		move.b	(a0)+,$18(a5)
00080292 1B58 0019                  		move.b	(a0)+,$19(a5)
00080296 1B58 001A                  		move.b	(a0)+,$1A(a5)
0008029A 1018                       		move.b	(a0)+,d0
0008029C E208                       		lsr.b	#1,d0
0008029E 1B40 001B                  		move.b	d0,$1B(a5)
000802A2 426D 001C                  		clr.w	$1C(a5)
000802A6                            
000802A6                            locret_71D9C:
000802A6 4E75                       		rts	
000802A8                            ; End of function sub_71D60
000802A8                            
000802A8                            
000802A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000802A8                            
000802A8                            
000802A8                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000802A8 4A2D 0012                  		tst.b	$12(a5)
000802AC 6700                       		beq.s	locret_71DC4
000802AE 532D 0012                  		subq.b	#1,$12(a5)
000802B2 6600                       		bne.s	locret_71DC4
000802B4 08D5 0001                  		bset	#1,(a5)
000802B8 4A2D 0001                  		tst.b	1(a5)
000802BC 6B00 0000                  		bmi.w	loc_71DBE
000802C0 4EBA 0000                  		jsr	sub_726FE(pc)
000802C4 584F                       		addq.w	#4,sp
000802C6 4E75                       		rts	
000802C8                            ; ===========================================================================
000802C8                            
000802C8                            loc_71DBE:
000802C8 4EBA 0000                  		jsr	sub_729A0(pc)
000802CC 584F                       		addq.w	#4,sp
000802CE                            
000802CE                            locret_71DC4:
000802CE 4E75                       		rts	
000802D0                            ; End of function sub_71D9E
000802D0                            
000802D0                            
000802D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000802D0                            
000802D0                            
000802D0                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000802D0 584F                       		addq.w	#4,sp
000802D2 0815 0003                  		btst	#3,(a5)
000802D6 6700                       		beq.s	locret_71E16
000802D8 4A2D 0018                  		tst.b	$18(a5)
000802DC 6700                       		beq.s	loc_71DDA
000802DE 532D 0018                  		subq.b	#1,$18(a5)
000802E2 4E75                       		rts	
000802E4                            ; ===========================================================================
000802E4                            
000802E4                            loc_71DDA:
000802E4 532D 0019                  		subq.b	#1,$19(a5)
000802E8 6700                       		beq.s	loc_71DE2
000802EA 4E75                       		rts	
000802EC                            ; ===========================================================================
000802EC                            
000802EC                            loc_71DE2:
000802EC 206D 0014                  		movea.l	$14(a5),a0
000802F0 1B68 0001 0019             		move.b	1(a0),$19(a5)
000802F6 4A2D 001B                  		tst.b	$1B(a5)
000802FA 6600                       		bne.s	loc_71DFE
000802FC 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00080302 442D 001A                  		neg.b	$1A(a5)
00080306 4E75                       		rts	
00080308                            ; ===========================================================================
00080308                            
00080308                            loc_71DFE:
00080308 532D 001B                  		subq.b	#1,$1B(a5)
0008030C 1C2D 001A                  		move.b	$1A(a5),d6
00080310 4886                       		ext.w	d6
00080312 DC6D 001C                  		add.w	$1C(a5),d6
00080316 3B46 001C                  		move.w	d6,$1C(a5)
0008031A DC6D 0010                  		add.w	$10(a5),d6
0008031E 594F                       		subq.w	#4,sp
00080320                            
00080320                            locret_71E16:
00080320 4E75                       		rts	
00080322                            ; End of function sub_71DC6
00080322                            
00080322                            
00080322                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080322                            
00080322                            
00080322                            sub_71E18:				; XREF: sub_71CCA
00080322 0815 0001                  		btst	#1,(a5)
00080326 6600                       		bne.s	locret_71E48
00080328 3C2D 0010                  		move.w	$10(a5),d6
0008032C 6700                       		beq.s	loc_71E4A
0008032E                            
0008032E                            loc_71E24:				; XREF: sub_71CCA
0008032E 102D 001E                  		move.b	$1E(a5),d0
00080332 4880                       		ext.w	d0
00080334 DC40                       		add.w	d0,d6
00080336 0815 0002                  		btst	#2,(a5)
0008033A 6600                       		bne.s	locret_71E48
0008033C 3206                       		move.w	d6,d1
0008033E E049                       		lsr.w	#8,d1
00080340 103C 00A4                  		move.b	#-$5C,d0
00080344 4EBA 0000                  		jsr	sub_72722(pc)
00080348 1206                       		move.b	d6,d1
0008034A 103C 00A0                  		move.b	#-$60,d0
0008034E 4EBA 0000                  		jsr	sub_72722(pc)
00080352                            
00080352                            locret_71E48:
00080352 4E75                       		rts	
00080354                            ; ===========================================================================
00080354                            
00080354                            loc_71E4A:
00080354 08D5 0001                  		bset	#1,(a5)
00080358 4E75                       		rts	
0008035A                            ; End of function sub_71E18
0008035A                            
0008035A                            ; ===========================================================================
0008035A                            
0008035A                            loc_71E50:				; XREF: sub_71B4C
0008035A 6B00                       		bmi.s	loc_71E94
0008035C 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00080362 6700 0000                  		beq.w	loc_71EFE
00080366 1D7C 0002 0003             		move.b	#2,3(a6)
0008036C 7602                       		moveq	#2,d3
0008036E 103C 00B4                  		move.b	#-$4C,d0
00080372 7200                       		moveq	#0,d1
00080374                            
00080374                            loc_71E6A:
00080374 4EBA 0000                  		jsr	sub_7272E(pc)
00080378 4EBA 0000                  		jsr	sub_72764(pc)
0008037C 5200                       		addq.b	#1,d0
0008037E 51CB FFF4                  		dbf	d3,loc_71E6A
00080382                            
00080382 7602                       		moveq	#2,d3
00080384 7028                       		moveq	#$28,d0
00080386                            
00080386                            loc_71E7C:
00080386 1203                       		move.b	d3,d1
00080388 4EBA 0000                  		jsr	sub_7272E(pc)
0008038C 5801                       		addq.b	#4,d1
0008038E 4EBA 0000                  		jsr	sub_7272E(pc)
00080392 51CB FFF2                  		dbf	d3,loc_71E7C
00080396                            
00080396 4EBA 0000                  		jsr	sub_729B6(pc)
0008039A 6000 FDB2                  		bra.w	loc_71C44
0008039E                            ; ===========================================================================
0008039E                            
0008039E                            loc_71E94:				; XREF: loc_71E50
0008039E 422E 0003                  		clr.b	3(a6)
000803A2 7630                       		moveq	#$30,d3
000803A4 4BEE 0040                  		lea	$40(a6),a5
000803A8 7806                       		moveq	#6,d4
000803AA                            
000803AA                            loc_71EA0:
000803AA 0815 0007                  		btst	#7,(a5)
000803AE 6700                       		beq.s	loc_71EB8
000803B0 0815 0002                  		btst	#2,(a5)
000803B4 6600                       		bne.s	loc_71EB8
000803B6 103C 00B4                  		move.b	#-$4C,d0
000803BA 122D 000A                  		move.b	$A(a5),d1
000803BE 4EBA 0000                  		jsr	sub_72722(pc)
000803C2                            
000803C2                            loc_71EB8:
000803C2 DAC3                       		adda.w	d3,a5
000803C4 51CC FFE4                  		dbf	d4,loc_71EA0
000803C8                            
000803C8 4BEE 0220                  		lea	$220(a6),a5
000803CC 7802                       		moveq	#2,d4
000803CE                            
000803CE                            loc_71EC4:
000803CE 0815 0007                  		btst	#7,(a5)
000803D2 6700                       		beq.s	loc_71EDC
000803D4 0815 0002                  		btst	#2,(a5)
000803D8 6600                       		bne.s	loc_71EDC
000803DA 103C 00B4                  		move.b	#-$4C,d0
000803DE 122D 000A                  		move.b	$A(a5),d1
000803E2 4EBA 0000                  		jsr	sub_72722(pc)
000803E6                            
000803E6                            loc_71EDC:
000803E6 DAC3                       		adda.w	d3,a5
000803E8 51CC FFE4                  		dbf	d4,loc_71EC4
000803EC                            
000803EC 4BEE 0340                  		lea	$340(a6),a5
000803F0 0815 0007                  		btst	#7,(a5)
000803F4 6700                       		beq.s	loc_71EFE
000803F6 0815 0002                  		btst	#2,(a5)
000803FA 6600                       		bne.s	loc_71EFE
000803FC 103C 00B4                  		move.b	#-$4C,d0
00080400 122D 000A                  		move.b	$A(a5),d1
00080404 4EBA 0000                  		jsr	sub_72722(pc)
00080408                            
00080408                            loc_71EFE:
00080408 6000 FD44                  		bra.w	loc_71C44
0008040C                            
0008040C                            ; ---------------------------------------------------------------------------
0008040C                            ; Subroutine to	play a sound or	music track
0008040C                            ; ---------------------------------------------------------------------------
0008040C                            
0008040C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008040C                            
0008040C                            
0008040C                            Sound_Play:				; XREF: sub_71B4C
0008040C 2079 0007 FDB4             		movea.l	(Go_SoundTypes).l,a0
00080412 43EE 000A                  		lea	$A(a6),a1	; load music track number
00080416 1616                       		move.b	0(a6),d3
00080418 7802                       		moveq	#2,d4
0008041A                            
0008041A                            loc_71F12:
0008041A 1011                       		move.b	(a1),d0		; move track number to d0
0008041C 1200                       		move.b	d0,d1
0008041E 4219                       		clr.b	(a1)+
00080420 0400 0081                  		subi.b	#$81,d0
00080424 6500                       		bcs.s	loc_71F3E
00080426                            ; ===========================================================================
00080426                            
00080426                            loc_71F2C:
00080426 1430 0000                  		move.b	(a0,d0.w),d2
0008042A B403                       		cmp.b	d3,d2
0008042C 6500                       		bcs.s	loc_71F3E
0008042E 1602                       		move.b	d2,d3
00080430 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00080434                            
00080434                            loc_71F3E:
00080434 51CC FFE4                  		dbf	d4,loc_71F12
00080438                            
00080438 4A03                       		tst.b	d3
0008043A 6B00                       		bmi.s	Sound_ChkValue
0008043C 1C83                       		move.b	d3,0(a6)
0008043E                            ; End of function Sound_Play
0008043E                            
0008043E                            
0008043E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008043E                            
0008043E                            ; no checks if you play something fucked up it's your fault
0008043E                            Sound_ChkValue:				; XREF: sub_71B4C
0008043E 7E00                       		moveq	#0,d7
00080440 1E2E 0009                  		move.b	9(a6),d7
00080444                            		
00080444 6700 0000                  		beq.w	Sound_E4
00080448 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0008044E 0C07 00A0                  		cmpi.b	#$A0,d7
00080452 6500 0000                  		blo.w	Sound_Music	; music	$81-$9F
00080456                            		
00080456 0C07 00D0                  		cmpi.b	#$D0,d7
0008045A 6700 0000                  		beq.w	Sound_D0
0008045E 0C07 00E0                  		cmpi.b	#$E0,d7
00080462 6500 0000                  		blo.w	Sound_SFX	; sound	$A0-$CF
00080466                            		
00080466                            		; falls to command
00080466                            ; ===========================================================================
00080466                            
00080466                            Sound_Command				; XREF: Sound_ChkValue
00080466 0407 00E0                  		subi.b	#$E0,d7
0008046A E54F                       		lsl.w	#2,d7
0008046C 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00080470                            ; ===========================================================================
00080470                            
00080470                            Sound_ExIndex:
00080470 6000 0000                  		bra.w	Sound_E0
00080474                            ; ===========================================================================
00080474 6000 0000                  		bra.w	Sound_E1
00080478                            ; ===========================================================================
00080478 6000 0000                  		bra.w	Sound_E2
0008047C                            ; ===========================================================================
0008047C 6000 0000                  		bra.w	Sound_E3
00080480                            ; ===========================================================================
00080480 6000 0000                  		bra.w	Sound_E4
00080484                            ; ===========================================================================
00080484 6000 0000                  		bra.w	Sound_E5
00080488                            ; ===========================================================================
00080488                            ; ---------------------------------------------------------------------------
00080488                            ; Play "Say-gaa" PCM sound
00080488                            ; ---------------------------------------------------------------------------
00080488                            
00080488                            Sound_E1:				  
00080488 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
00080490 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
00080498 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
0008049C 51C8 FFFE                  		dbf	d0,*
000804A0 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000804A6 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000804AC 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000804B4                            PlayPCM_Loop:	  
000804B4 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000804BA 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000804BE 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000804C2 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000804C4 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000804C6 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000804CA 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000804D0 4EB8 1202                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000804D4 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
000804DA 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000804DC 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000804DE                            return_PlayPCM: 
000804DE 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
000804E6 584F                       		addq.w	#4,sp 
000804E8 4E75                       		rts
000804EA                            		
000804EA                            ; ---------------------------------------------------------------------------
000804EA                            ; Play you are an idiot pcm sound
000804EA                            ; since the sfx already crashes the game forever load it here :V
000804EA                            ; ---------------------------------------------------------------------------
000804EA                            
000804EA                            Sound_E5: 
000804EA 4EB8 12DE                  		jsr	ClearScreen
000804EE 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
000804F6 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
000804FE                            
000804FE                            		;control port on a5
000804FE 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00080504 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0008050A 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0008050E 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00080512 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00080516                            		
00080516 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0008051A                            		
0008051A 2ABC 4000 0000             		move.l	#$40000000,(a5)
00080520 41F9 0002 45EE             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00080526 4EB8 145A                  		jsr	NemDec
0008052A 43F9 00FF 0000             		lea	($FF0000).l,a1
00080530 41F9 0002 4590             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00080536 303C 0000                  		move.w	#0,d0
0008053A 4EB8 1738                  		jsr	EniDec
0008053E 43F9 00FF 0000             		lea	($FF0000).l,a1
00080544 203C 4304 0003             		move.l	#$43040003,d0
0008054A 7223                       		moveq	#35,d1
0008054C 740D                       		moveq	#13,d2
0008054E 4EB8 143A                  		jsr	ShowVDPGraphics
00080552 7014                       		moveq	#20,d0
00080554 4EB8 2106                  		jsr	PalLoad2	; load pallet
00080558                            
00080558                            
00080558 4BF9 00C0 0004             		lea	($C00004).l,a5
0008055E 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
00080562 7600                       		moveq	#0,d3				; make @palett jump to @start when done
00080564 6000                       		bra.s	@palett
00080566                            @start:
00080566 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0008056C 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
00080572 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
0008057A                            @loop:
0008057A 44D5                       		move.w	(a5),ccr
0008057C 6B00                       		bmi.s	@vblank
0008057E                            
0008057E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00080584 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00080588 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0008058C 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0008058E 66EA                       		bne.s	@loop				; if not zero, loop
00080590 60D4                       		bra.s	@start
00080592                            @vblank:
00080592 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
00080598 6700                       		beq.s	@palett
0008059A 5238 FE24                  		addq.b	#1,($FFFFFE24).w
0008059E                            @loop_vblank:
0008059E 44D5                       		move.w	(a5),ccr
000805A0 6AD8                       		bpl.s	@loop
000805A2                            
000805A2 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000805A8 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
000805AC 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
000805B0 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
000805B2 66EA                       		bne.s	@loop_vblank			; if not zero, loop
000805B4 60B0                       		bra.s	@start
000805B6                            @palett:
000805B6 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
000805BC                            
000805BC 4238 FE24                  		clr.b	($FFFFFE24).w
000805C0 4638 FE25                  		not.b	($FFFFFE25).w
000805C4 6700                       		beq.s	@not_black
000805C6 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
000805CC 6000                       		bra.s	@merge
000805CE                            	@not_black:
000805CE 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
000805D4                            	@merge:
000805D4 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
000805D8 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
000805DC 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
000805E0 3A9F                       		move.w	(sp)+,(a5)
000805E2                            		
000805E2 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
000805E6 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
000805EA 4A83                       		tst.l	d3
000805EC 66B0                       		bne.s	@loop_vblank
000805EE 6000 FF76                  		bra.w	@start
000805F2                            ; ===========================================================================
000805F2                            ; ---------------------------------------------------------------------------
000805F2                            ; Play music track $81-$9F
000805F2                            ; ---------------------------------------------------------------------------
000805F2                            
000805F2                            Sound_Music:				; XREF: Sound_ChkValue
000805F2 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000805F6 6600                       		bne.s	loc_72024	; if not, branch
000805F8 4A2E 0027                  		tst.b	$27(a6)
000805FC 6600 0000                  		bne.w	loc_721B6
00080600 4BEE 0040                  		lea	$40(a6),a5
00080604 7009                       		moveq	#9,d0
00080606                            
00080606                            loc_71FE6:
00080606 0895 0002                  		bclr	#2,(a5)
0008060A DAFC 0030                  		adda.w	#$30,a5
0008060E 51C8 FFF6                  		dbf	d0,loc_71FE6
00080612                            
00080612 4BEE 0220                  		lea	$220(a6),a5
00080616 7005                       		moveq	#5,d0
00080618                            
00080618                            loc_71FF8:
00080618 0895 0007                  		bclr	#7,(a5)
0008061C DAFC 0030                  		adda.w	#$30,a5
00080620 51C8 FFF6                  		dbf	d0,loc_71FF8
00080624 4216                       		clr.b	0(a6)
00080626 204E                       		movea.l	a6,a0
00080628 43EE 03A0                  		lea	$3A0(a6),a1
0008062C 303C 0087                  		move.w	#$87,d0
00080630                            
00080630                            loc_72012:
00080630 22D8                       		move.l	(a0)+,(a1)+
00080632 51C8 FFFC                  		dbf	d0,loc_72012
00080636                            
00080636 1D7C 0080 0027             		move.b	#$80,$27(a6)
0008063C 4216                       		clr.b	0(a6)
0008063E 6000                       		bra.s	loc_7202C
00080640                            ; ===========================================================================
00080640                            
00080640                            loc_72024:
00080640 422E 0027                  		clr.b	$27(a6)
00080644 422E 0026                  		clr.b	$26(a6)
00080648                            
00080648                            loc_7202C:
00080648 4EBA 0000                  		jsr	sub_725CA(pc)
0008064C 2879 0007 FDC8             		movea.l	(off_719A0).l,a4
00080652 0C07 0080                  		cmpi.b	#$80,d7
00080656 6500                       		blo.s	@zeroindex
00080658                            		
00080658 0407 0080                  		subi.b	#$80,d7
0008065C 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00080662 2879 0007 FDC0             		movea.l	(Go_MusicIndex80).l,a4
00080668 6000                       		bra.s @continue
0008066A                            	@zeroindex:
0008066A 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00080670 2879 0007 FDBC             		movea.l	(Go_MusicIndex).l,a4
00080676                            	@continue:
00080676 E54F                       		lsl.w	#2,d7
00080678 2874 7000                  		movea.l	(a4,d7.w),a4
0008067C 7000                       		moveq	#0,d0
0008067E 3014                       		move.w	(a4),d0
00080680 D08C                       		add.l	a4,d0
00080682 2D40 0018                  		move.l	d0,$18(a6)
00080686 102C 0005                  		move.b	5(a4),d0
0008068A 1D40 0028                  		move.b	d0,$28(a6)
0008068E 4A2E 002A                  		tst.b	$2A(a6)
00080692 6700                       		beq.s	loc_72068
00080694 102E 0029                  		move.b	$29(a6),d0
00080698                            
00080698                            loc_72068:
00080698 1D40 0002                  		move.b	d0,2(a6)
0008069C 1D40 0001                  		move.b	d0,1(a6)
000806A0 7200                       		moveq	#0,d1
000806A2 264C                       		movea.l	a4,a3
000806A4 5C4C                       		addq.w	#6,a4
000806A6 7E00                       		moveq	#0,d7
000806A8 1E2B 0002                  		move.b	2(a3),d7
000806AC 6700 0000                  		beq.w	loc_72114
000806B0 5307                       		subq.b	#1,d7
000806B2 123C 00C0                  		move.b	#-$40,d1
000806B6 182B 0004                  		move.b	4(a3),d4
000806BA 7C30                       		moveq	#$30,d6
000806BC 1A3C 0001                  		move.b	#1,d5
000806C0 43EE 0040                  		lea	$40(a6),a1
000806C4 45FA 0000                  		lea	byte_721BA(pc),a2
000806C8                            
000806C8                            loc_72098:
000806C8 08D1 0007                  		bset	#7,(a1)
000806CC 135A 0001                  		move.b	(a2)+,1(a1)
000806D0 1344 0002                  		move.b	d4,2(a1)
000806D4 1346 000D                  		move.b	d6,$D(a1)
000806D8 1341 000A                  		move.b	d1,$A(a1)
000806DC 1345 000E                  		move.b	d5,$E(a1)
000806E0 7000                       		moveq	#0,d0
000806E2 301C                       		move.w	(a4)+,d0
000806E4 D08B                       		add.l	a3,d0
000806E6 2340 0004                  		move.l	d0,4(a1)
000806EA 335C 0008                  		move.w	(a4)+,8(a1)
000806EE D2C6                       		adda.w	d6,a1
000806F0 51CF FFD6                  		dbf	d7,loc_72098
000806F4 0C2B 0007 0002             		cmpi.b	#7,2(a3)
000806FA 6600                       		bne.s	loc_720D8
000806FC 702B                       		moveq	#$2B,d0
000806FE 7200                       		moveq	#0,d1
00080700 4EBA 0000                  		jsr	sub_7272E(pc)
00080704 6000 0000                  		bra.w	loc_72114
00080708                            ; ===========================================================================
00080708                            
00080708                            loc_720D8:
00080708 7028                       		moveq	#$28,d0
0008070A 7206                       		moveq	#6,d1
0008070C 4EBA 0000                  		jsr	sub_7272E(pc)
00080710 103C 0042                  		move.b	#$42,d0
00080714 727F                       		moveq	#$7F,d1
00080716 4EBA 0000                  		jsr	sub_72764(pc)
0008071A 103C 004A                  		move.b	#$4A,d0
0008071E 727F                       		moveq	#$7F,d1
00080720 4EBA 0000                  		jsr	sub_72764(pc)
00080724 103C 0046                  		move.b	#$46,d0
00080728 727F                       		moveq	#$7F,d1
0008072A 4EBA 0000                  		jsr	sub_72764(pc)
0008072E 103C 004E                  		move.b	#$4E,d0
00080732 727F                       		moveq	#$7F,d1
00080734 4EBA 0000                  		jsr	sub_72764(pc)
00080738 103C 00B6                  		move.b	#-$4A,d0
0008073C 123C 00C0                  		move.b	#-$40,d1
00080740 4EBA 0000                  		jsr	sub_72764(pc)
00080744                            
00080744                            loc_72114:
00080744 7E00                       		moveq	#0,d7
00080746 1E2B 0003                  		move.b	3(a3),d7
0008074A 6700                       		beq.s	loc_72154
0008074C 5307                       		subq.b	#1,d7
0008074E 43EE 0190                  		lea	$190(a6),a1
00080752 45FA 0000                  		lea	byte_721C2(pc),a2
00080756                            
00080756                            loc_72126:
00080756 08D1 0007                  		bset	#7,(a1)
0008075A 135A 0001                  		move.b	(a2)+,1(a1)
0008075E 1344 0002                  		move.b	d4,2(a1)
00080762 1346 000D                  		move.b	d6,$D(a1)
00080766 1345 000E                  		move.b	d5,$E(a1)
0008076A 7000                       		moveq	#0,d0
0008076C 301C                       		move.w	(a4)+,d0
0008076E D08B                       		add.l	a3,d0
00080770 2340 0004                  		move.l	d0,4(a1)
00080774 335C 0008                  		move.w	(a4)+,8(a1)
00080778 101C                       		move.b	(a4)+,d0
0008077A 135C 000B                  		move.b	(a4)+,$B(a1)
0008077E D2C6                       		adda.w	d6,a1
00080780 51CF FFD4                  		dbf	d7,loc_72126
00080784                            
00080784                            loc_72154:
00080784 43EE 0220                  		lea	$220(a6),a1
00080788 7E05                       		moveq	#5,d7
0008078A                            
0008078A                            loc_7215A:
0008078A 4A11                       		tst.b	(a1)
0008078C 6A00 0000                  		bpl.w	loc_7217C
00080790 7000                       		moveq	#0,d0
00080792 1029 0001                  		move.b	1(a1),d0
00080796 6B00                       		bmi.s	loc_7216E
00080798 5500                       		subq.b	#2,d0
0008079A E508                       		lsl.b	#2,d0
0008079C 6000                       		bra.s	loc_72170
0008079E                            ; ===========================================================================
0008079E                            
0008079E                            loc_7216E:
0008079E E608                       		lsr.b	#3,d0
000807A0                            
000807A0                            loc_72170:
000807A0 41FA 0000                  		lea	dword_722CC(pc),a0
000807A4 2070 0000                  		movea.l	(a0,d0.w),a0
000807A8 08D0 0002                  		bset	#2,(a0)
000807AC                            
000807AC                            loc_7217C:
000807AC D2C6                       		adda.w	d6,a1
000807AE 51CF FFDA                  		dbf	d7,loc_7215A
000807B2                            
000807B2 4A6E 0340                  		tst.w	$340(a6)
000807B6 6A00                       		bpl.s	loc_7218E
000807B8 08EE 0002 0100             		bset	#2,$100(a6)
000807BE                            
000807BE                            loc_7218E:
000807BE 4A6E 0370                  		tst.w	$370(a6)
000807C2 6A00                       		bpl.s	loc_7219A
000807C4 08EE 0002 01F0             		bset	#2,$1F0(a6)
000807CA                            
000807CA                            loc_7219A:
000807CA 4BEE 0070                  		lea	$70(a6),a5
000807CE 7805                       		moveq	#5,d4
000807D0                            
000807D0                            loc_721A0:
000807D0 4EBA 0000                  		jsr	sub_726FE(pc)
000807D4 DAC6                       		adda.w	d6,a5
000807D6 51CC FFF8                  		dbf	d4,loc_721A0
000807DA 7802                       		moveq	#2,d4
000807DC                            
000807DC                            loc_721AC:
000807DC 4EBA 0000                  		jsr	sub_729A0(pc)
000807E0 DAC6                       		adda.w	d6,a5
000807E2 51CC FFF8                  		dbf	d4,loc_721AC
000807E6                            
000807E6                            loc_721B6:
000807E6 584F                       		addq.w	#4,sp
000807E8 4E75                       		rts	
000807EA                            ; ===========================================================================
000807EA 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
000807F2                            		even
000807F2 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000807F6                            		even
000807F6                            ; ===========================================================================
000807F6                            ; ---------------------------------------------------------------------------
000807F6                            ; Play normal sound effect
000807F6                            ; ---------------------------------------------------------------------------
000807F6                            
000807F6                            Sound_SFX:				; XREF: Sound_ChkValue
000807F6 4A2E 0027                  		tst.b	$27(a6)
000807FA 6600 0000                  		bne.w	loc_722C6
000807FE 4A2E 0004                  		tst.b	4(a6)
00080802 6600 0000                  		bne.w	loc_722C6
00080806 4A2E 0024                  		tst.b	$24(a6)
0008080A 6600 0000                  		bne.w	loc_722C6
0008080E 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00080812 6600                       		bne.s	Sound_notB5	; if not, branch
00080814 4A2E 002B                  		tst.b	$2B(a6)
00080818 6600                       		bne.s	loc_721EE
0008081A 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0008081E                            
0008081E                            loc_721EE:
0008081E 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00080824                            
00080824                            Sound_notB5:
00080824 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00080828 6600                       		bne.s	Sound_notA7	; if not, branch
0008082A 4A2E 002C                  		tst.b	$2C(a6)
0008082E 6600 0000                  		bne.w	locret_722C4
00080832 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00080838                            
00080838                            Sound_notA7:
00080838 2079 0007 FDC4             		movea.l	(Go_SoundIndex).l,a0
0008083E 0407 00A0                  		subi.b	#$A0,d7
00080842 E54F                       		lsl.w	#2,d7
00080844 2670 7000                  		movea.l	(a0,d7.w),a3
00080848 224B                       		movea.l	a3,a1
0008084A 7200                       		moveq	#0,d1
0008084C 3219                       		move.w	(a1)+,d1
0008084E D28B                       		add.l	a3,d1
00080850 1A19                       		move.b	(a1)+,d5
00080852 1E19                       		move.b	(a1)+,d7
00080854 5307                       		subq.b	#1,d7
00080856 7C30                       		moveq	#$30,d6
00080858                            
00080858                            loc_72228:
00080858 7600                       		moveq	#0,d3
0008085A 1629 0001                  		move.b	1(a1),d3
0008085E 1803                       		move.b	d3,d4
00080860 6B00                       		bmi.s	loc_72244
00080862 5543                       		subq.w	#2,d3
00080864 E54B                       		lsl.w	#2,d3
00080866 4BFA 0000                  		lea	dword_722CC(pc),a5
0008086A 2A75 3000                  		movea.l	(a5,d3.w),a5
0008086E 08D5 0002                  		bset	#2,(a5)
00080872 6000                       		bra.s	loc_7226E
00080874                            ; ===========================================================================
00080874                            
00080874                            loc_72244:
00080874 E64B                       		lsr.w	#3,d3
00080876 4BFA 0000                  		lea	dword_722CC(pc),a5
0008087A 2A75 3000                  		movea.l	(a5,d3.w),a5
0008087E 08D5 0002                  		bset	#2,(a5)
00080882 0C04 00C0                  		cmpi.b	#$C0,d4
00080886 6600                       		bne.s	loc_7226E
00080888 1004                       		move.b	d4,d0
0008088A 0000 001F                  		ori.b	#$1F,d0
0008088E 13C0 00C0 0011             		move.b	d0,($C00011).l
00080894 0840 0005                  		bchg	#5,d0
00080898 13C0 00C0 0011             		move.b	d0,($C00011).l
0008089E                            
0008089E                            loc_7226E:
0008089E 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000808A2 244D                       		movea.l	a5,a2
000808A4 700B                       		moveq	#$B,d0
000808A6                            
000808A6                            loc_72276:
000808A6 429A                       		clr.l	(a2)+
000808A8 51C8 FFFC                  		dbf	d0,loc_72276
000808AC                            
000808AC 3A99                       		move.w	(a1)+,(a5)
000808AE 1B45 0002                  		move.b	d5,2(a5)
000808B2 7000                       		moveq	#0,d0
000808B4 3019                       		move.w	(a1)+,d0
000808B6 D08B                       		add.l	a3,d0
000808B8 2B40 0004                  		move.l	d0,4(a5)
000808BC 3B59 0008                  		move.w	(a1)+,8(a5)
000808C0 1B7C 0001 000E             		move.b	#1,$E(a5)
000808C6 1B46 000D                  		move.b	d6,$D(a5)
000808CA 4A04                       		tst.b	d4
000808CC 6B00                       		bmi.s	loc_722A8
000808CE 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000808D4 2B41 0020                  		move.l	d1,$20(a5)
000808D8                            
000808D8                            loc_722A8:
000808D8 51CF FF7E                  		dbf	d7,loc_72228
000808DC                            
000808DC 4A2E 0250                  		tst.b	$250(a6)
000808E0 6A00                       		bpl.s	loc_722B8
000808E2 08EE 0002 0340             		bset	#2,$340(a6)
000808E8                            
000808E8                            loc_722B8:
000808E8 4A2E 0310                  		tst.b	$310(a6)
000808EC 6A00                       		bpl.s	locret_722C4
000808EE 08EE 0002 0370             		bset	#2,$370(a6)
000808F4                            
000808F4                            locret_722C4:
000808F4 4E75                       		rts	
000808F6                            ; ===========================================================================
000808F6                            
000808F6                            loc_722C6:
000808F6 4216                       		clr.b	0(a6)
000808F8 4E75                       		rts	
000808FA                            ; ===========================================================================
000808FA 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000808FE 0000 0000                  		dc.l 0
00080902 00FF F100                  		dc.l $FFF100
00080906 00FF F130                  		dc.l $FFF130
0008090A 00FF F190                  		dc.l $FFF190
0008090E 00FF F1C0                  		dc.l $FFF1C0
00080912 00FF F1F0                  		dc.l $FFF1F0
00080916 00FF F1F0                  		dc.l $FFF1F0
0008091A 00FF F220                  dword_722EC:	dc.l $FFF220
0008091E 0000 0000                  		dc.l 0
00080922 00FF F250                  		dc.l $FFF250
00080926 00FF F280                  		dc.l $FFF280
0008092A 00FF F2B0                  		dc.l $FFF2B0
0008092E 00FF F2E0                  		dc.l $FFF2E0
00080932 00FF F310                  		dc.l $FFF310
00080936 00FF F310                  		dc.l $FFF310
0008093A                            ; ===========================================================================
0008093A                            ; ---------------------------------------------------------------------------
0008093A                            ; Play GHZ waterfall sound
0008093A                            ; ---------------------------------------------------------------------------
0008093A                            
0008093A                            Sound_D0:				; XREF: Sound_ChkValue
0008093A 4A2E 0027                  		tst.b	$27(a6)
0008093E 6600 0000                  		bne.w	locret_723C6
00080942 4A2E 0004                  		tst.b	4(a6)
00080946 6600 0000                  		bne.w	locret_723C6
0008094A 4A2E 0024                  		tst.b	$24(a6)
0008094E 6600 0000                  		bne.w	locret_723C6
00080952 2079 0007 FDB8             		movea.l	(Go_SoundD0).l,a0
00080958 0407 00D0                  		subi.b	#$D0,d7
0008095C E54F                       		lsl.w	#2,d7
0008095E 2670 7000                  		movea.l	(a0,d7.w),a3
00080962 224B                       		movea.l	a3,a1
00080964 7000                       		moveq	#0,d0
00080966 3019                       		move.w	(a1)+,d0
00080968 D08B                       		add.l	a3,d0
0008096A 2D40 0020                  		move.l	d0,$20(a6)
0008096E 1A19                       		move.b	(a1)+,d5
00080970 1E19                       		move.b	(a1)+,d7
00080972 5307                       		subq.b	#1,d7
00080974 7C30                       		moveq	#$30,d6
00080976                            
00080976                            loc_72348:
00080976 1829 0001                  		move.b	1(a1),d4
0008097A 6B00                       		bmi.s	loc_7235A
0008097C 08EE 0002 0100             		bset	#2,$100(a6)
00080982 4BEE 0340                  		lea	$340(a6),a5
00080986 6000                       		bra.s	loc_72364
00080988                            ; ===========================================================================
00080988                            
00080988                            loc_7235A:
00080988 08EE 0002 01F0             		bset	#2,$1F0(a6)
0008098E 4BEE 0370                  		lea	$370(a6),a5
00080992                            
00080992                            loc_72364:
00080992 244D                       		movea.l	a5,a2
00080994 700B                       		moveq	#$B,d0
00080996                            
00080996                            loc_72368:
00080996 429A                       		clr.l	(a2)+
00080998 51C8 FFFC                  		dbf	d0,loc_72368
0008099C                            
0008099C 3A99                       		move.w	(a1)+,(a5)
0008099E 1B45 0002                  		move.b	d5,2(a5)
000809A2 7000                       		moveq	#0,d0
000809A4 3019                       		move.w	(a1)+,d0
000809A6 D08B                       		add.l	a3,d0
000809A8 2B40 0004                  		move.l	d0,4(a5)
000809AC 3B59 0008                  		move.w	(a1)+,8(a5)
000809B0 1B7C 0001 000E             		move.b	#1,$E(a5)
000809B6 1B46 000D                  		move.b	d6,$D(a5)
000809BA 4A04                       		tst.b	d4
000809BC 6B00                       		bmi.s	loc_72396
000809BE 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000809C4                            
000809C4                            loc_72396:
000809C4 51CF FFB0                  		dbf	d7,loc_72348
000809C8                            
000809C8 4A2E 0250                  		tst.b	$250(a6)
000809CC 6A00                       		bpl.s	loc_723A6
000809CE 08EE 0002 0340             		bset	#2,$340(a6)
000809D4                            
000809D4                            loc_723A6:
000809D4 4A2E 0310                  		tst.b	$310(a6)
000809D8 6A00                       		bpl.s	locret_723C6
000809DA 08EE 0002 0370             		bset	#2,$370(a6)
000809E0 0004 001F                  		ori.b	#$1F,d4
000809E4 13C4 00C0 0011             		move.b	d4,($C00011).l
000809EA 0844 0005                  		bchg	#5,d4
000809EE 13C4 00C0 0011             		move.b	d4,($C00011).l
000809F4                            
000809F4                            locret_723C6:
000809F4 4E75                       		rts	
000809F6                            ; End of function Sound_ChkValue
000809F6                            
000809F6                            ; ===========================================================================
000809F6 00FF F100                  		dc.l $FFF100
000809FA 00FF F1F0                  		dc.l $FFF1F0
000809FE 00FF F250                  		dc.l $FFF250
00080A02 00FF F310                  		dc.l $FFF310
00080A06 00FF F340                  		dc.l $FFF340
00080A0A 00FF F370                  		dc.l $FFF370
00080A0E                            
00080A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080A0E                            
00080A0E                            
00080A0E                            Snd_FadeOut1:				; XREF: Sound_E0
00080A0E 4216                       		clr.b	0(a6)
00080A10 4BEE 0220                  		lea	$220(a6),a5
00080A14 7E05                       		moveq	#5,d7
00080A16                            
00080A16                            loc_723EA:
00080A16 4A15                       		tst.b	(a5)
00080A18 6A00 0000                  		bpl.w	loc_72472
00080A1C 0895 0007                  		bclr	#7,(a5)
00080A20 7600                       		moveq	#0,d3
00080A22 162D 0001                  		move.b	1(a5),d3
00080A26 6B00                       		bmi.s	loc_7243C
00080A28 4EBA 0000                  		jsr	sub_726FE(pc)
00080A2C 0C03 0004                  		cmpi.b	#4,d3
00080A30 6600                       		bne.s	loc_72416
00080A32 4A2E 0340                  		tst.b	$340(a6)
00080A36 6A00                       		bpl.s	loc_72416
00080A38 4BEE 0340                  		lea	$340(a6),a5
00080A3C 226E 0020                  		movea.l	$20(a6),a1
00080A40 6000                       		bra.s	loc_72428
00080A42                            ; ===========================================================================
00080A42                            
00080A42                            loc_72416:
00080A42 5503                       		subq.b	#2,d3
00080A44 E50B                       		lsl.b	#2,d3
00080A46 41FA FEB2                  		lea	dword_722CC(pc),a0
00080A4A 264D                       		movea.l	a5,a3
00080A4C 2A70 3000                  		movea.l	(a0,d3.w),a5
00080A50 226E 0018                  		movea.l	$18(a6),a1
00080A54                            
00080A54                            loc_72428:
00080A54 0895 0002                  		bclr	#2,(a5)
00080A58 08D5 0001                  		bset	#1,(a5)
00080A5C 102D 000B                  		move.b	$B(a5),d0
00080A60 4EBA 0000                  		jsr	sub_72C4E(pc)
00080A64 2A4B                       		movea.l	a3,a5
00080A66 6000                       		bra.s	loc_72472
00080A68                            ; ===========================================================================
00080A68                            
00080A68                            loc_7243C:
00080A68 4EBA 0000                  		jsr	sub_729A0(pc)
00080A6C 41EE 0370                  		lea	$370(a6),a0
00080A70 0C03 00E0                  		cmpi.b	#$E0,d3
00080A74 6700                       		beq.s	loc_7245A
00080A76 0C03 00C0                  		cmpi.b	#$C0,d3
00080A7A 6700                       		beq.s	loc_7245A
00080A7C E60B                       		lsr.b	#3,d3
00080A7E 41FA FE7A                  		lea	dword_722CC(pc),a0
00080A82 2070 3000                  		movea.l	(a0,d3.w),a0
00080A86                            
00080A86                            loc_7245A:
00080A86 0890 0002                  		bclr	#2,(a0)
00080A8A 08D0 0001                  		bset	#1,(a0)
00080A8E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00080A94 6600                       		bne.s	loc_72472
00080A96 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00080A9E                            
00080A9E                            loc_72472:
00080A9E DAFC 0030                  		adda.w	#$30,a5
00080AA2 51CF FF72                  		dbf	d7,loc_723EA
00080AA6                            
00080AA6 4E75                       		rts	
00080AA8                            ; End of function Snd_FadeOut1
00080AA8                            
00080AA8                            
00080AA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080AA8                            
00080AA8                            
00080AA8                            Snd_FadeOut2:				; XREF: Sound_E0
00080AA8 4BEE 0340                  		lea	$340(a6),a5
00080AAC 4A15                       		tst.b	(a5)
00080AAE 6A00                       		bpl.s	loc_724AE
00080AB0 0895 0007                  		bclr	#7,(a5)
00080AB4 0815 0002                  		btst	#2,(a5)
00080AB8 6600                       		bne.s	loc_724AE
00080ABA 4EBA 0000                  		jsr	loc_7270A(pc)
00080ABE 4BEE 0100                  		lea	$100(a6),a5
00080AC2 0895 0002                  		bclr	#2,(a5)
00080AC6 08D5 0001                  		bset	#1,(a5)
00080ACA 4A15                       		tst.b	(a5)
00080ACC 6A00                       		bpl.s	loc_724AE
00080ACE 226E 0018                  		movea.l	$18(a6),a1
00080AD2 102D 000B                  		move.b	$B(a5),d0
00080AD6 4EBA 0000                  		jsr	sub_72C4E(pc)
00080ADA                            
00080ADA                            loc_724AE:
00080ADA 4BEE 0370                  		lea	$370(a6),a5
00080ADE 4A15                       		tst.b	(a5)
00080AE0 6A00                       		bpl.s	locret_724E4
00080AE2 0895 0007                  		bclr	#7,(a5)
00080AE6 0815 0002                  		btst	#2,(a5)
00080AEA 6600                       		bne.s	locret_724E4
00080AEC 4EBA 0000                  		jsr	loc_729A6(pc)
00080AF0 4BEE 01F0                  		lea	$1F0(a6),a5
00080AF4 0895 0002                  		bclr	#2,(a5)
00080AF8 08D5 0001                  		bset	#1,(a5)
00080AFC 4A15                       		tst.b	(a5)
00080AFE 6A00                       		bpl.s	locret_724E4
00080B00 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00080B06 6600                       		bne.s	locret_724E4
00080B08 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00080B10                            
00080B10                            locret_724E4:
00080B10 4E75                       		rts	
00080B12                            ; End of function Snd_FadeOut2
00080B12                            
00080B12                            ; ===========================================================================
00080B12                            ; ---------------------------------------------------------------------------
00080B12                            ; Fade out music
00080B12                            ; ---------------------------------------------------------------------------
00080B12                            
00080B12                            Sound_E0:				; XREF: Sound_ExIndex
00080B12 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00080B16 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00080B1A 1D7C 0003 0006             		move.b	#3,6(a6)
00080B20 1D7C 0028 0004             		move.b	#$28,4(a6)
00080B26 422E 0040                  		clr.b	$40(a6)
00080B2A 422E 002A                  		clr.b	$2A(a6)
00080B2E 4E75                       		rts	
00080B30                            
00080B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080B30                            
00080B30                            
00080B30                            sub_72504:				; XREF: sub_71B4C
00080B30 102E 0006                  		move.b	6(a6),d0
00080B34 6700                       		beq.s	loc_72510
00080B36 532E 0006                  		subq.b	#1,6(a6)
00080B3A 4E75                       		rts	
00080B3C                            ; ===========================================================================
00080B3C                            
00080B3C                            loc_72510:
00080B3C 532E 0004                  		subq.b	#1,4(a6)
00080B40 6700 0000                  		beq.w	Sound_E4
00080B44 1D7C 0003 0006             		move.b	#3,6(a6)
00080B4A 4BEE 0070                  		lea	$70(a6),a5
00080B4E 7E05                       		moveq	#5,d7
00080B50                            
00080B50                            loc_72524:
00080B50 4A15                       		tst.b	(a5)
00080B52 6A00                       		bpl.s	loc_72538
00080B54 522D 0009                  		addq.b	#1,9(a5)
00080B58 6A00                       		bpl.s	loc_72534
00080B5A 0895 0007                  		bclr	#7,(a5)
00080B5E 6000                       		bra.s	loc_72538
00080B60                            ; ===========================================================================
00080B60                            
00080B60                            loc_72534:
00080B60 4EBA 0000                  		jsr	sub_72CB4(pc)
00080B64                            
00080B64                            loc_72538:
00080B64 DAFC 0030                  		adda.w	#$30,a5
00080B68 51CF FFE6                  		dbf	d7,loc_72524
00080B6C                            
00080B6C 7E02                       		moveq	#2,d7
00080B6E                            
00080B6E                            loc_72542:
00080B6E 4A15                       		tst.b	(a5)
00080B70 6A00                       		bpl.s	loc_72560
00080B72 522D 0009                  		addq.b	#1,9(a5)
00080B76 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00080B7C 6500                       		bcs.s	loc_72558
00080B7E 0895 0007                  		bclr	#7,(a5)
00080B82 6000                       		bra.s	loc_72560
00080B84                            ; ===========================================================================
00080B84                            
00080B84                            loc_72558:
00080B84 1C2D 0009                  		move.b	9(a5),d6
00080B88 4EBA 0000                  		jsr	sub_7296A(pc)
00080B8C                            
00080B8C                            loc_72560:
00080B8C DAFC 0030                  		adda.w	#$30,a5
00080B90 51CF FFDC                  		dbf	d7,loc_72542
00080B94                            
00080B94 4E75                       		rts	
00080B96                            ; End of function sub_72504
00080B96                            
00080B96                            
00080B96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080B96                            
00080B96                            
00080B96                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00080B96 7602                       		moveq	#2,d3
00080B98 7028                       		moveq	#$28,d0
00080B9A                            
00080B9A                            loc_7256E:
00080B9A 1203                       		move.b	d3,d1
00080B9C 4EBA 0000                  		jsr	sub_7272E(pc)
00080BA0 5801                       		addq.b	#4,d1
00080BA2 4EBA 0000                  		jsr	sub_7272E(pc)
00080BA6 51CB FFF2                  		dbf	d3,loc_7256E
00080BAA                            
00080BAA 7040                       		moveq	#$40,d0
00080BAC 727F                       		moveq	#$7F,d1
00080BAE 7802                       		moveq	#2,d4
00080BB0                            
00080BB0                            loc_72584:
00080BB0 7603                       		moveq	#3,d3
00080BB2                            
00080BB2                            loc_72586:
00080BB2 4EBA 0000                  		jsr	sub_7272E(pc)
00080BB6 4EBA 0000                  		jsr	sub_72764(pc)
00080BBA 5840                       		addq.w	#4,d0
00080BBC 51CB FFF4                  		dbf	d3,loc_72586
00080BC0                            
00080BC0 0400 000F                  		subi.b	#$F,d0
00080BC4 51CC FFEA                  		dbf	d4,loc_72584
00080BC8                            
00080BC8 4E75                       		rts	
00080BCA                            ; End of function sub_7256A
00080BCA                            
00080BCA                            ; ===========================================================================
00080BCA                            ; ---------------------------------------------------------------------------
00080BCA                            ; Stop music
00080BCA                            ; ---------------------------------------------------------------------------
00080BCA                            
00080BCA                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00080BCA 702B                       		moveq	#$2B,d0
00080BCC 123C 0080                  		move.b	#$80,d1
00080BD0 4EBA 0000                  		jsr	sub_7272E(pc)
00080BD4 7027                       		moveq	#$27,d0
00080BD6 7200                       		moveq	#0,d1
00080BD8 4EBA 0000                  		jsr	sub_7272E(pc)
00080BDC 204E                       		movea.l	a6,a0
00080BDE 303C 00E3                  		move.w	#$E3,d0
00080BE2                            
00080BE2                            loc_725B6:
00080BE2 4298                       		clr.l	(a0)+
00080BE4 51C8 FFFC                  		dbf	d0,loc_725B6
00080BE8                            
00080BE8 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00080BEE 4EBA FFA6                  		jsr	sub_7256A(pc)
00080BF2 6000 0000                  		bra.w	sub_729B6
00080BF6                            
00080BF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080BF6                            
00080BF6                            
00080BF6                            sub_725CA:				; XREF: Sound_ChkValue
00080BF6 204E                       		movea.l	a6,a0
00080BF8 1216                       		move.b	0(a6),d1
00080BFA 142E 0027                  		move.b	$27(a6),d2
00080BFE 162E 002A                  		move.b	$2A(a6),d3
00080C02 182E 0026                  		move.b	$26(a6),d4
00080C06 3A2E 000A                  		move.w	$A(a6),d5
00080C0A 303C 0087                  		move.w	#$87,d0
00080C0E                            
00080C0E                            loc_725E4:
00080C0E 4298                       		clr.l	(a0)+
00080C10 51C8 FFFC                  		dbf	d0,loc_725E4
00080C14                            
00080C14 1C81                       		move.b	d1,0(a6)
00080C16 1D42 0027                  		move.b	d2,$27(a6)
00080C1A 1D43 002A                  		move.b	d3,$2A(a6)
00080C1E 1D44 0026                  		move.b	d4,$26(a6)
00080C22 3D45 000A                  		move.w	d5,$A(a6)
00080C26 1D7C 0080 0009             		move.b	#$80,9(a6)
00080C2C 4EBA FF68                  		jsr	sub_7256A(pc)
00080C30 6000 0000                  		bra.w	sub_729B6
00080C34                            ; End of function sub_725CA
00080C34                            
00080C34                            
00080C34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080C34                            
00080C34                            
00080C34                            sub_7260C:				; XREF: sub_71B4C
00080C34 1D6E 0002 0001             		move.b	2(a6),1(a6)
00080C3A 41EE 004E                  		lea	$4E(a6),a0
00080C3E 7030                       		moveq	#$30,d0
00080C40 7209                       		moveq	#9,d1
00080C42                            
00080C42                            loc_7261A:
00080C42 5210                       		addq.b	#1,(a0)
00080C44 D0C0                       		adda.w	d0,a0
00080C46 51C9 FFFA                  		dbf	d1,loc_7261A
00080C4A                            
00080C4A 4E75                       		rts	
00080C4C                            ; End of function sub_7260C
00080C4C                            
00080C4C                            ; ===========================================================================
00080C4C                            ; ---------------------------------------------------------------------------
00080C4C                            ; Speed	up music
00080C4C                            ; ---------------------------------------------------------------------------
00080C4C                            
00080C4C                            Sound_E2:				; XREF: Sound_ExIndex
00080C4C 4A2E 0027                  		tst.b	$27(a6)
00080C50 6600                       		bne.s	loc_7263E
00080C52 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00080C58 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00080C5E 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00080C64 4E75                       		rts	
00080C66                            ; ===========================================================================
00080C66                            
00080C66                            loc_7263E:
00080C66 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00080C6C 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00080C72 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00080C78 4E75                       		rts	
00080C7A                            ; ===========================================================================
00080C7A                            ; ---------------------------------------------------------------------------
00080C7A                            ; Change music back to normal speed
00080C7A                            ; ---------------------------------------------------------------------------
00080C7A                            
00080C7A                            Sound_E3:				; XREF: Sound_ExIndex
00080C7A 4A2E 0027                  		tst.b	$27(a6)
00080C7E 6600                       		bne.s	loc_7266A
00080C80 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00080C86 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00080C8C 422E 002A                  		clr.b	$2A(a6)
00080C90 4E75                       		rts	
00080C92                            ; ===========================================================================
00080C92                            
00080C92                            loc_7266A:
00080C92 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00080C98 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00080C9E 422E 03CA                  		clr.b	$3CA(a6)
00080CA2 4E75                       		rts	
00080CA4                            
00080CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080CA4                            
00080CA4                            
00080CA4                            sub_7267C:				; XREF: sub_71B4C
00080CA4 4A2E 0025                  		tst.b	$25(a6)
00080CA8 6700                       		beq.s	loc_72688
00080CAA 532E 0025                  		subq.b	#1,$25(a6)
00080CAE 4E75                       		rts	
00080CB0                            ; ===========================================================================
00080CB0                            
00080CB0                            loc_72688:
00080CB0 4A2E 0026                  		tst.b	$26(a6)
00080CB4 6700                       		beq.s	loc_726D6
00080CB6 532E 0026                  		subq.b	#1,$26(a6)
00080CBA 1D7C 0002 0025             		move.b	#2,$25(a6)
00080CC0 4BEE 0070                  		lea	$70(a6),a5
00080CC4 7E05                       		moveq	#5,d7
00080CC6                            
00080CC6                            loc_7269E:
00080CC6 4A15                       		tst.b	(a5)
00080CC8 6A00                       		bpl.s	loc_726AA
00080CCA 532D 0009                  		subq.b	#1,9(a5)
00080CCE 4EBA 0000                  		jsr	sub_72CB4(pc)
00080CD2                            
00080CD2                            loc_726AA:
00080CD2 DAFC 0030                  		adda.w	#$30,a5
00080CD6 51CF FFEE                  		dbf	d7,loc_7269E
00080CDA 7E02                       		moveq	#2,d7
00080CDC                            
00080CDC                            loc_726B4:
00080CDC 4A15                       		tst.b	(a5)
00080CDE 6A00                       		bpl.s	loc_726CC
00080CE0 532D 0009                  		subq.b	#1,9(a5)
00080CE4 1C2D 0009                  		move.b	9(a5),d6
00080CE8 0C06 0010                  		cmpi.b	#$10,d6
00080CEC 6500                       		bcs.s	loc_726C8
00080CEE 7C0F                       		moveq	#$F,d6
00080CF0                            
00080CF0                            loc_726C8:
00080CF0 4EBA 0000                  		jsr	sub_7296A(pc)
00080CF4                            
00080CF4                            loc_726CC:
00080CF4 DAFC 0030                  		adda.w	#$30,a5
00080CF8 51CF FFE2                  		dbf	d7,loc_726B4
00080CFC 4E75                       		rts	
00080CFE                            ; ===========================================================================
00080CFE                            
00080CFE                            loc_726D6:
00080CFE 08AE 0002 0040             		bclr	#2,$40(a6)
00080D04 422E 0024                  		clr.b	$24(a6)
00080D08 4E75                       		rts	
00080D0A                            ; End of function sub_7267C
00080D0A                            
00080D0A                            ; ===========================================================================
00080D0A                            
00080D0A                            loc_726E2:				; XREF: sub_71CCA
00080D0A 0815 0001                  		btst	#1,(a5)
00080D0E 6600                       		bne.s	locret_726FC
00080D10 0815 0002                  		btst	#2,(a5)
00080D14 6600                       		bne.s	locret_726FC
00080D16 7028                       		moveq	#$28,d0
00080D18 122D 0001                  		move.b	1(a5),d1
00080D1C 0001 00F0                  		ori.b	#-$10,d1
00080D20 6000 0000                  		bra.w	sub_7272E
00080D24                            ; ===========================================================================
00080D24                            
00080D24                            locret_726FC:
00080D24 4E75                       		rts	
00080D26                            
00080D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080D26                            
00080D26                            
00080D26                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00080D26 0815 0004                  		btst	#4,(a5)
00080D2A 6600                       		bne.s	locret_72714
00080D2C 0815 0002                  		btst	#2,(a5)
00080D30 6600                       		bne.s	locret_72714
00080D32                            
00080D32                            loc_7270A:				; XREF: Snd_FadeOut2
00080D32 7028                       		moveq	#$28,d0
00080D34 122D 0001                  		move.b	1(a5),d1
00080D38 6000 0000                  		bra.w	sub_7272E
00080D3C                            ; ===========================================================================
00080D3C                            
00080D3C                            locret_72714:
00080D3C 4E75                       		rts	
00080D3E                            ; End of function sub_726FE
00080D3E                            
00080D3E                            ; ===========================================================================
00080D3E                            
00080D3E                            loc_72716:				; XREF: sub_72A5A
00080D3E 0815 0002                  		btst	#2,(a5)
00080D42 6600                       		bne.s	locret_72720
00080D44 6000 0000                  		bra.w	sub_72722
00080D48                            ; ===========================================================================
00080D48                            
00080D48                            locret_72720:
00080D48 4E75                       		rts	
00080D4A                            
00080D4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080D4A                            
00080D4A                            
00080D4A                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00080D4A 082D 0002 0001             		btst	#2,1(a5)
00080D50 6600                       		bne.s	loc_7275A
00080D52 D02D 0001                  		add.b	1(a5),d0
00080D56                            ; End of function sub_72722
00080D56                            
00080D56                            
00080D56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080D56                            
00080D56                            
00080D56                            sub_7272E:				; XREF: loc_71E6A
00080D56 1439 00A0 4000             		move.b	($A04000).l,d2
00080D5C 0802 0007                  		btst	#7,d2
00080D60 66F4                       		bne.s	sub_7272E
00080D62 13C0 00A0 4000             		move.b	d0,($A04000).l
00080D68 4E71                       		nop	
00080D6A 4E71                       		nop	
00080D6C 4E71                       		nop	
00080D6E                            
00080D6E                            loc_72746:
00080D6E 1439 00A0 4000             		move.b	($A04000).l,d2
00080D74 0802 0007                  		btst	#7,d2
00080D78 66F4                       		bne.s	loc_72746
00080D7A                            
00080D7A 13C1 00A0 4001             		move.b	d1,($A04001).l
00080D80 4E75                       		rts	
00080D82                            ; End of function sub_7272E
00080D82                            
00080D82                            ; ===========================================================================
00080D82                            
00080D82                            loc_7275A:				; XREF: sub_72722
00080D82 142D 0001                  		move.b	1(a5),d2
00080D86 0882 0002                  		bclr	#2,d2
00080D8A D002                       		add.b	d2,d0
00080D8C                            
00080D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080D8C                            
00080D8C                            
00080D8C                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00080D8C 1439 00A0 4000             		move.b	($A04000).l,d2
00080D92 0802 0007                  		btst	#7,d2
00080D96 66F4                       		bne.s	sub_72764
00080D98 13C0 00A0 4002             		move.b	d0,($A04002).l
00080D9E 4E71                       		nop	
00080DA0 4E71                       		nop	
00080DA2 4E71                       		nop	
00080DA4                            
00080DA4                            loc_7277C:
00080DA4 1439 00A0 4000             		move.b	($A04000).l,d2
00080DAA 0802 0007                  		btst	#7,d2
00080DAE 66F4                       		bne.s	loc_7277C
00080DB0                            
00080DB0 13C1 00A0 4003             		move.b	d1,($A04003).l
00080DB6 4E75                       		rts	
00080DB8                            ; End of function sub_72764
00080DB8                            
00080DB8                            ; ===========================================================================
00080DB8 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00080DCA 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00080DDC 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00080DEC 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00080DFC 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00080E0C 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00080E1C 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00080E2C 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00080E3C 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00080E4C 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00080E5C 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00080E6C 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00080E78                            
00080E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080E78                            
00080E78                            
00080E78                            sub_72850:				; XREF: sub_71B4C
00080E78 532D 000E                  		subq.b	#1,$E(a5)
00080E7C 6600                       		bne.s	loc_72866
00080E7E 0895 0004                  		bclr	#4,(a5)
00080E82 4EBA 0000                  		jsr	sub_72878(pc)
00080E86 4EBA 0000                  		jsr	sub_728DC(pc)
00080E8A 6000 0000                  		bra.w	loc_7292E
00080E8E                            ; ===========================================================================
00080E8E                            
00080E8E                            loc_72866:
00080E8E 4EBA F418                  		jsr	sub_71D9E(pc)
00080E92 4EBA 0000                  		jsr	sub_72926(pc)
00080E96 4EBA F438                  		jsr	sub_71DC6(pc)
00080E9A 4EBA 0000                  		jsr	sub_728E2(pc)
00080E9E 4E75                       		rts	
00080EA0                            ; End of function sub_72850
00080EA0                            
00080EA0                            
00080EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080EA0                            
00080EA0                            
00080EA0                            sub_72878:				; XREF: sub_72850
00080EA0 0895 0001                  		bclr	#1,(a5)
00080EA4 286D 0004                  		movea.l	4(a5),a4
00080EA8                            
00080EA8                            loc_72880:
00080EA8 7A00                       		moveq	#0,d5
00080EAA 1A1C                       		move.b	(a4)+,d5
00080EAC 0C05 00E0                  		cmpi.b	#$E0,d5
00080EB0 6500                       		bcs.s	loc_72890
00080EB2 4EBA 0000                  		jsr	sub_72A5A(pc)
00080EB6 60F0                       		bra.s	loc_72880
00080EB8                            ; ===========================================================================
00080EB8                            
00080EB8                            loc_72890:
00080EB8 4A05                       		tst.b	d5
00080EBA 6A00                       		bpl.s	loc_728A4
00080EBC 4EBA 0000                  		jsr	sub_728AC(pc)
00080EC0 1A1C                       		move.b	(a4)+,d5
00080EC2 4A05                       		tst.b	d5
00080EC4 6A00                       		bpl.s	loc_728A4
00080EC6 534C                       		subq.w	#1,a4
00080EC8 6000 F3A0                  		bra.w	sub_71D60
00080ECC                            ; ===========================================================================
00080ECC                            
00080ECC                            loc_728A4:
00080ECC 4EBA F37C                  		jsr	sub_71D40(pc)
00080ED0 6000 F398                  		bra.w	sub_71D60
00080ED4                            ; End of function sub_72878
00080ED4                            
00080ED4                            
00080ED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080ED4                            
00080ED4                            
00080ED4                            sub_728AC:				; XREF: sub_72878
00080ED4 0405 0081                  		subi.b	#$81,d5
00080ED8 6500                       		bcs.s	loc_728CA
00080EDA DA2D 0008                  		add.b	8(a5),d5
00080EDE 0245 007F                  		andi.w	#$7F,d5
00080EE2 E34D                       		lsl.w	#1,d5
00080EE4 41FA 0000                  		lea	word_729CE(pc),a0
00080EE8 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00080EEE 6000 F37A                  		bra.w	sub_71D60
00080EF2                            ; ===========================================================================
00080EF2                            
00080EF2                            loc_728CA:
00080EF2 08D5 0001                  		bset	#1,(a5)
00080EF6 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00080EFC 4EBA F36C                  		jsr	sub_71D60(pc)
00080F00 6000 0000                  		bra.w	sub_729A0
00080F04                            ; End of function sub_728AC
00080F04                            
00080F04                            
00080F04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080F04                            
00080F04                            
00080F04                            sub_728DC:				; XREF: sub_72850
00080F04 3C2D 0010                  		move.w	$10(a5),d6
00080F08 6B00                       		bmi.s	loc_72920
00080F0A                            ; End of function sub_728DC
00080F0A                            
00080F0A                            
00080F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080F0A                            
00080F0A                            
00080F0A                            sub_728E2:				; XREF: sub_72850
00080F0A 102D 001E                  		move.b	$1E(a5),d0
00080F0E 4880                       		ext.w	d0
00080F10 DC40                       		add.w	d0,d6
00080F12 0815 0002                  		btst	#2,(a5)
00080F16 6600                       		bne.s	locret_7291E
00080F18 0815 0001                  		btst	#1,(a5)
00080F1C 6600                       		bne.s	locret_7291E
00080F1E 102D 0001                  		move.b	1(a5),d0
00080F22 0C00 00E0                  		cmpi.b	#$E0,d0
00080F26 6600                       		bne.s	loc_72904
00080F28 103C 00C0                  		move.b	#$C0,d0
00080F2C                            
00080F2C                            loc_72904:
00080F2C 3206                       		move.w	d6,d1
00080F2E 0201 000F                  		andi.b	#$F,d1
00080F32 8001                       		or.b	d1,d0
00080F34 E84E                       		lsr.w	#4,d6
00080F36 0206 003F                  		andi.b	#$3F,d6
00080F3A 13C0 00C0 0011             		move.b	d0,($C00011).l
00080F40 13C6 00C0 0011             		move.b	d6,($C00011).l
00080F46                            
00080F46                            locret_7291E:
00080F46 4E75                       		rts	
00080F48                            ; End of function sub_728E2
00080F48                            
00080F48                            ; ===========================================================================
00080F48                            
00080F48                            loc_72920:				; XREF: sub_728DC
00080F48 08D5 0001                  		bset	#1,(a5)
00080F4C 4E75                       		rts	
00080F4E                            
00080F4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080F4E                            
00080F4E                            
00080F4E                            sub_72926:				; XREF: sub_72850
00080F4E 4A2D 000B                  		tst.b	$B(a5)
00080F52 6700 0000                  		beq.w	locret_7298A
00080F56                            
00080F56                            loc_7292E:				; XREF: sub_72850
00080F56 1C2D 0009                  		move.b	9(a5),d6
00080F5A 7000                       		moveq	#0,d0
00080F5C 102D 000B                  		move.b	$B(a5),d0
00080F60 6700                       		beq.s	sub_7296A
00080F62 2079 0007 FDCC             		movea.l	(Go_PSGIndex).l,a0
00080F68 5340                       		subq.w	#1,d0
00080F6A E548                       		lsl.w	#2,d0
00080F6C 2070 0000                  		movea.l	(a0,d0.w),a0
00080F70 102D 000C                  		move.b	$C(a5),d0
00080F74 1030 0000                  		move.b	(a0,d0.w),d0
00080F78 522D 000C                  		addq.b	#1,$C(a5)
00080F7C 0800 0007                  		btst	#7,d0
00080F80 6700                       		beq.s	loc_72960
00080F82 0C00 0080                  		cmpi.b	#$80,d0
00080F86 6700                       		beq.s	loc_7299A
00080F88                            
00080F88                            loc_72960:
00080F88 DC40                       		add.w	d0,d6
00080F8A 0C06 0010                  		cmpi.b	#$10,d6
00080F8E 6500                       		bcs.s	sub_7296A
00080F90 7C0F                       		moveq	#$F,d6
00080F92                            ; End of function sub_72926
00080F92                            
00080F92                            
00080F92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080F92                            
00080F92                            
00080F92                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00080F92 0815 0001                  		btst	#1,(a5)
00080F96 6600                       		bne.s	locret_7298A
00080F98 0815 0002                  		btst	#2,(a5)
00080F9C 6600                       		bne.s	locret_7298A
00080F9E 0815 0004                  		btst	#4,(a5)
00080FA2 6600                       		bne.s	loc_7298C
00080FA4                            
00080FA4                            loc_7297C:
00080FA4 8C2D 0001                  		or.b	1(a5),d6
00080FA8 0606 0010                  		addi.b	#$10,d6
00080FAC 13C6 00C0 0011             		move.b	d6,($C00011).l
00080FB2                            
00080FB2                            locret_7298A:
00080FB2 4E75                       		rts	
00080FB4                            ; ===========================================================================
00080FB4                            
00080FB4                            loc_7298C:
00080FB4 4A2D 0013                  		tst.b	$13(a5)
00080FB8 67EA                       		beq.s	loc_7297C
00080FBA 4A2D 0012                  		tst.b	$12(a5)
00080FBE 66E4                       		bne.s	loc_7297C
00080FC0 4E75                       		rts	
00080FC2                            ; End of function sub_7296A
00080FC2                            
00080FC2                            ; ===========================================================================
00080FC2                            
00080FC2                            loc_7299A:				; XREF: sub_72926
00080FC2 532D 000C                  		subq.b	#1,$C(a5)
00080FC6 4E75                       		rts	
00080FC8                            
00080FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080FC8                            
00080FC8                            
00080FC8                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00080FC8 0815 0002                  		btst	#2,(a5)
00080FCC 6600                       		bne.s	locret_729B4
00080FCE                            
00080FCE                            loc_729A6:				; XREF: Snd_FadeOut2
00080FCE 102D 0001                  		move.b	1(a5),d0
00080FD2 0000 001F                  		ori.b	#$1F,d0
00080FD6 13C0 00C0 0011             		move.b	d0,($C00011).l
00080FDC                            
00080FDC                            locret_729B4:
00080FDC 4E75                       		rts	
00080FDE                            ; End of function sub_729A0
00080FDE                            
00080FDE                            
00080FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00080FDE                            
00080FDE                            
00080FDE                            sub_729B6:				; XREF: loc_71E7C
00080FDE 41F9 00C0 0011             		lea	($C00011).l,a0
00080FE4 10BC 009F                  		move.b	#$9F,(a0)
00080FE8 10BC 00BF                  		move.b	#$BF,(a0)
00080FEC 10BC 00DF                  		move.b	#$DF,(a0)
00080FF0 10BC 00FF                  		move.b	#$FF,(a0)
00080FF4 4E75                       		rts	
00080FF6                            ; End of function sub_729B6
00080FF6                            
00080FF6                            ; ===========================================================================
00080FF6 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00081008 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0008101A 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0008102E 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00081042 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00081056 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0008106A 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0008107E 0011 0000                  		dc.w $11, 0
00081082                            
00081082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081082                            
00081082                            
00081082                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00081082 0445 00E0                  		subi.w	#$E0,d5
00081086 E54D                       		lsl.w	#2,d5
00081088 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0008108C                            ; End of function sub_72A5A
0008108C                            
0008108C                            ; ===========================================================================
0008108C                            
0008108C                            loc_72A64:
0008108C 6000 0000                  		bra.w	loc_72ACC
00081090                            ; ===========================================================================
00081090 6000 0000                  		bra.w	loc_72AEC
00081094                            ; ===========================================================================
00081094 6000 0000                  		bra.w	loc_72AF2
00081098                            ; ===========================================================================
00081098 6000 0000                  		bra.w	loc_72AF8
0008109C                            ; ===========================================================================
0008109C 6000 0000                  		bra.w	loc_72B14
000810A0                            ; ===========================================================================
000810A0 6000 0000                  		bra.w	loc_72B9E
000810A4                            ; ===========================================================================
000810A4 6000 0000                  		bra.w	loc_72BA4
000810A8                            ; ===========================================================================
000810A8 6000 0000                  		bra.w	loc_72BAE
000810AC                            ; ===========================================================================
000810AC 6000 0000                  		bra.w	loc_72BB4
000810B0                            ; ===========================================================================
000810B0 6000 0000                  		bra.w	loc_72BBE
000810B4                            ; ===========================================================================
000810B4 6000 0000                  		bra.w	loc_72BC6
000810B8                            ; ===========================================================================
000810B8 6000 0000                  		bra.w	loc_72BD0
000810BC                            ; ===========================================================================
000810BC 6000 0000                  		bra.w	loc_72BE6
000810C0                            ; ===========================================================================
000810C0 6000 0000                  		bra.w	loc_72BEE
000810C4                            ; ===========================================================================
000810C4 6000 0000                  		bra.w	loc_72BF4
000810C8                            ; ===========================================================================
000810C8 6000 0000                  		bra.w	loc_72C26
000810CC                            ; ===========================================================================
000810CC 6000 0000                  		bra.w	loc_72D30
000810D0                            ; ===========================================================================
000810D0 6000 0000                  		bra.w	loc_72D52
000810D4                            ; ===========================================================================
000810D4 6000 0000                  		bra.w	loc_72D58
000810D8                            ; ===========================================================================
000810D8 6000 0000                  		bra.w	loc_72E06
000810DC                            ; ===========================================================================
000810DC 6000 0000                  		bra.w	loc_72E20
000810E0                            ; ===========================================================================
000810E0 6000 0000                  		bra.w	loc_72E26
000810E4                            ; ===========================================================================
000810E4 6000 0000                  		bra.w	loc_72E2C
000810E8                            ; ===========================================================================
000810E8 6000 0000                  		bra.w	loc_72E38
000810EC                            ; ===========================================================================
000810EC 6000 0000                  		bra.w	loc_72E52
000810F0                            ; ===========================================================================
000810F0 6000 0000                  		bra.w	loc_72E64
000810F4                            ; ===========================================================================
000810F4                            
000810F4                            loc_72ACC:				; XREF: loc_72A64
000810F4 121C                       		move.b	(a4)+,d1
000810F6 4A2D 0001                  		tst.b	1(a5)
000810FA 6B00                       		bmi.s	locret_72AEA
000810FC 102D 000A                  		move.b	$A(a5),d0
00081100 0200 0037                  		andi.b	#$37,d0
00081104 8200                       		or.b	d0,d1
00081106 1B41 000A                  		move.b	d1,$A(a5)
0008110A 103C 00B4                  		move.b	#$B4,d0
0008110E 6000 FC2E                  		bra.w	loc_72716
00081112                            ; ===========================================================================
00081112                            
00081112                            locret_72AEA:
00081112 4E75                       		rts	
00081114                            ; ===========================================================================
00081114                            
00081114                            loc_72AEC:				; XREF: loc_72A64
00081114 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00081118 4E75                       		rts	
0008111A                            ; ===========================================================================
0008111A                            
0008111A                            loc_72AF2:				; XREF: loc_72A64
0008111A 1D5C 0007                  		move.b	(a4)+,7(a6)
0008111E 4E75                       		rts	
00081120                            ; ===========================================================================
00081120                            
00081120                            loc_72AF8:				; XREF: loc_72A64
00081120 7000                       		moveq	#0,d0
00081122 102D 000D                  		move.b	$D(a5),d0
00081126 2875 0000                  		movea.l	(a5,d0.w),a4
0008112A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00081132 544C                       		addq.w	#2,a4
00081134 5800                       		addq.b	#4,d0
00081136 1B40 000D                  		move.b	d0,$D(a5)
0008113A 4E75                       		rts	
0008113C                            ; ===========================================================================
0008113C                            
0008113C                            loc_72B14:				; XREF: loc_72A64
0008113C 204E                       		movea.l	a6,a0
0008113E 43EE 03A0                  		lea	$3A0(a6),a1
00081142 303C 0087                  		move.w	#$87,d0
00081146                            
00081146                            loc_72B1E:
00081146 20D9                       		move.l	(a1)+,(a0)+
00081148 51C8 FFFC                  		dbf	d0,loc_72B1E
0008114C                            
0008114C 08EE 0002 0040             		bset	#2,$40(a6)
00081152 264D                       		movea.l	a5,a3
00081154 1C3C 0028                  		move.b	#$28,d6
00081158 9C2E 0026                  		sub.b	$26(a6),d6
0008115C 7E05                       		moveq	#5,d7
0008115E 4BEE 0070                  		lea	$70(a6),a5
00081162                            
00081162                            loc_72B3A:
00081162 0815 0007                  		btst	#7,(a5)
00081166 6700                       		beq.s	loc_72B5C
00081168 08D5 0001                  		bset	#1,(a5)
0008116C DD2D 0009                  		add.b	d6,9(a5)
00081170 0815 0002                  		btst	#2,(a5)
00081174 6600                       		bne.s	loc_72B5C
00081176 7000                       		moveq	#0,d0
00081178 102D 000B                  		move.b	$B(a5),d0
0008117C 226E 0018                  		movea.l	$18(a6),a1
00081180 4EBA 0000                  		jsr	sub_72C4E(pc)
00081184                            
00081184                            loc_72B5C:
00081184 DAFC 0030                  		adda.w	#$30,a5
00081188 51CF FFD8                  		dbf	d7,loc_72B3A
0008118C                            
0008118C 7E02                       		moveq	#2,d7
0008118E                            
0008118E                            loc_72B66:
0008118E 0815 0007                  		btst	#7,(a5)
00081192 6700                       		beq.s	loc_72B78
00081194 08D5 0001                  		bset	#1,(a5)
00081198 4EBA FE2E                  		jsr	sub_729A0(pc)
0008119C DD2D 0009                  		add.b	d6,9(a5)
000811A0                            
000811A0                            loc_72B78:
000811A0 DAFC 0030                  		adda.w	#$30,a5
000811A4 51CF FFE8                  		dbf	d7,loc_72B66
000811A8 2A4B                       		movea.l	a3,a5
000811AA 1D7C 0080 0024             		move.b	#$80,$24(a6)
000811B0 1D7C 0028 0026             		move.b	#$28,$26(a6)
000811B6 422E 0027                  		clr.b	$27(a6)
000811BA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000811C2 504F                       		addq.w	#8,sp
000811C4 4E75                       		rts	
000811C6                            ; ===========================================================================
000811C6                            
000811C6                            loc_72B9E:				; XREF: loc_72A64
000811C6 1B5C 0002                  		move.b	(a4)+,2(a5)
000811CA 4E75                       		rts	
000811CC                            ; ===========================================================================
000811CC                            
000811CC                            loc_72BA4:				; XREF: loc_72A64
000811CC 101C                       		move.b	(a4)+,d0
000811CE D12D 0009                  		add.b	d0,9(a5)
000811D2 6000 0000                  		bra.w	sub_72CB4
000811D6                            ; ===========================================================================
000811D6                            
000811D6                            loc_72BAE:				; XREF: loc_72A64
000811D6 08D5 0004                  		bset	#4,(a5)
000811DA 4E75                       		rts	
000811DC                            ; ===========================================================================
000811DC                            
000811DC                            loc_72BB4:				; XREF: loc_72A64
000811DC 1B54 0012                  		move.b	(a4),$12(a5)
000811E0 1B5C 0013                  		move.b	(a4)+,$13(a5)
000811E4 4E75                       		rts	
000811E6                            ; ===========================================================================
000811E6                            
000811E6                            loc_72BBE:				; XREF: loc_72A64
000811E6 101C                       		move.b	(a4)+,d0
000811E8 D12D 0008                  		add.b	d0,8(a5)
000811EC 4E75                       		rts	
000811EE                            ; ===========================================================================
000811EE                            
000811EE                            loc_72BC6:				; XREF: loc_72A64
000811EE 1D54 0002                  		move.b	(a4),2(a6)
000811F2 1D5C 0001                  		move.b	(a4)+,1(a6)
000811F6 4E75                       		rts	
000811F8                            ; ===========================================================================
000811F8                            
000811F8                            loc_72BD0:				; XREF: loc_72A64
000811F8 41EE 0040                  		lea	$40(a6),a0
000811FC 101C                       		move.b	(a4)+,d0
000811FE 7230                       		moveq	#$30,d1
00081200 7409                       		moveq	#9,d2
00081202                            
00081202                            loc_72BDA:
00081202 1140 0002                  		move.b	d0,2(a0)
00081206 D0C1                       		adda.w	d1,a0
00081208 51CA FFF8                  		dbf	d2,loc_72BDA
0008120C                            
0008120C 4E75                       		rts	
0008120E                            ; ===========================================================================
0008120E                            
0008120E                            loc_72BE6:				; XREF: loc_72A64
0008120E 101C                       		move.b	(a4)+,d0
00081210 D12D 0009                  		add.b	d0,9(a5)
00081214 4E75                       		rts	
00081216                            ; ===========================================================================
00081216                            
00081216                            loc_72BEE:				; XREF: loc_72A64
00081216 422E 002C                  		clr.b	$2C(a6)
0008121A 4E75                       		rts	
0008121C                            ; ===========================================================================
0008121C                            
0008121C                            loc_72BF4:				; XREF: loc_72A64
0008121C 0895 0007                  		bclr	#7,(a5)
00081220 0895 0004                  		bclr	#4,(a5)
00081224 4EBA FB00                  		jsr	sub_726FE(pc)
00081228 4A2E 0250                  		tst.b	$250(a6)
0008122C 6B00                       		bmi.s	loc_72C22
0008122E 264D                       		movea.l	a5,a3
00081230 4BEE 0100                  		lea	$100(a6),a5
00081234 226E 0018                  		movea.l	$18(a6),a1
00081238 0895 0002                  		bclr	#2,(a5)
0008123C 08D5 0001                  		bset	#1,(a5)
00081240 102D 000B                  		move.b	$B(a5),d0
00081244 4EBA 0000                  		jsr	sub_72C4E(pc)
00081248 2A4B                       		movea.l	a3,a5
0008124A                            
0008124A                            loc_72C22:
0008124A 504F                       		addq.w	#8,sp
0008124C 4E75                       		rts	
0008124E                            ; ===========================================================================
0008124E                            
0008124E                            loc_72C26:				; XREF: loc_72A64
0008124E 7000                       		moveq	#0,d0
00081250 101C                       		move.b	(a4)+,d0
00081252 1B40 000B                  		move.b	d0,$B(a5)
00081256 0815 0002                  		btst	#2,(a5)
0008125A 6600 0000                  		bne.w	locret_72CAA
0008125E 226E 0018                  		movea.l	$18(a6),a1
00081262 4A2E 000E                  		tst.b	$E(a6)
00081266 6700                       		beq.s	sub_72C4E
00081268 226D 0020                  		movea.l	$20(a5),a1
0008126C 4A2E 000E                  		tst.b	$E(a6)
00081270 6B00                       		bmi.s	sub_72C4E
00081272 226E 0020                  		movea.l	$20(a6),a1
00081276                            
00081276                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00081276                            
00081276                            
00081276                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00081276 5340                       		subq.w	#1,d0
00081278 6B00                       		bmi.s	loc_72C5C
0008127A 323C 0019                  		move.w	#$19,d1
0008127E                            
0008127E                            loc_72C56:
0008127E D2C1                       		adda.w	d1,a1
00081280 51C8 FFFC                  		dbf	d0,loc_72C56
00081284                            
00081284                            loc_72C5C:
00081284 1219                       		move.b	(a1)+,d1
00081286 1B41 001F                  		move.b	d1,$1F(a5)
0008128A 1801                       		move.b	d1,d4
0008128C 103C 00B0                  		move.b	#$B0,d0
00081290 4EBA FAB8                  		jsr	sub_72722(pc)
00081294 45FA 0000                  		lea	byte_72D18(pc),a2
00081298 7613                       		moveq	#$13,d3
0008129A                            
0008129A                            loc_72C72:
0008129A 101A                       		move.b	(a2)+,d0
0008129C 1219                       		move.b	(a1)+,d1
0008129E 4EBA FAAA                  		jsr	sub_72722(pc)
000812A2 51CB FFF6                  		dbf	d3,loc_72C72
000812A6 7A03                       		moveq	#3,d5
000812A8 0244 0007                  		andi.w	#7,d4
000812AC 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000812B0 162D 0009                  		move.b	9(a5),d3
000812B4                            
000812B4                            loc_72C8C:
000812B4 101A                       		move.b	(a2)+,d0
000812B6 1219                       		move.b	(a1)+,d1
000812B8 E20C                       		lsr.b	#1,d4
000812BA 6400                       		bcc.s	loc_72C96
000812BC D203                       		add.b	d3,d1
000812BE                            
000812BE                            loc_72C96:
000812BE 4EBA FA8A                  		jsr	sub_72722(pc)
000812C2 51CD FFF0                  		dbf	d5,loc_72C8C
000812C6 103C 00B4                  		move.b	#$B4,d0
000812CA 122D 000A                  		move.b	$A(a5),d1
000812CE 4EBA FA7A                  		jsr	sub_72722(pc)
000812D2                            
000812D2                            locret_72CAA:
000812D2 4E75                       		rts	
000812D4                            ; End of function sub_72C4E
000812D4                            
000812D4                            ; ===========================================================================
000812D4 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000812DC                            
000812DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000812DC                            
000812DC                            
000812DC                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000812DC 0815 0002                  		btst	#2,(a5)
000812E0 6600                       		bne.s	locret_72D16
000812E2 7000                       		moveq	#0,d0
000812E4 102D 000B                  		move.b	$B(a5),d0
000812E8 226E 0018                  		movea.l	$18(a6),a1
000812EC 4A2E 000E                  		tst.b	$E(a6)
000812F0 6700                       		beq.s	loc_72CD8
000812F2 226E 0020                  		movea.l	$20(a6),a1
000812F6 4A2E 000E                  		tst.b	$E(a6)
000812FA 6B00                       		bmi.s	loc_72CD8
000812FC 226E 0020                  		movea.l	$20(a6),a1
00081300                            
00081300                            loc_72CD8:
00081300 5340                       		subq.w	#1,d0
00081302 6B00                       		bmi.s	loc_72CE6
00081304 323C 0019                  		move.w	#$19,d1
00081308                            
00081308                            loc_72CE0:
00081308 D2C1                       		adda.w	d1,a1
0008130A 51C8 FFFC                  		dbf	d0,loc_72CE0
0008130E                            
0008130E                            loc_72CE6:
0008130E D2FC 0015                  		adda.w	#$15,a1
00081312 45FA 0000                  		lea	byte_72D2C(pc),a2
00081316 102D 001F                  		move.b	$1F(a5),d0
0008131A 0240 0007                  		andi.w	#7,d0
0008131E 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00081322 162D 0009                  		move.b	9(a5),d3
00081326 6B00                       		bmi.s	locret_72D16
00081328 7A03                       		moveq	#3,d5
0008132A                            
0008132A                            loc_72D02:
0008132A 101A                       		move.b	(a2)+,d0
0008132C 1219                       		move.b	(a1)+,d1
0008132E E20C                       		lsr.b	#1,d4
00081330 6400                       		bcc.s	loc_72D12
00081332 D203                       		add.b	d3,d1
00081334 6500                       		bcs.s	loc_72D12
00081336 4EBA FA12                  		jsr	sub_72722(pc)
0008133A                            
0008133A                            loc_72D12:
0008133A 51CD FFEE                  		dbf	d5,loc_72D02
0008133E                            
0008133E                            locret_72D16:
0008133E 4E75                       		rts	
00081340                            ; End of function sub_72CB4
00081340                            
00081340                            ; ===========================================================================
00081340 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0008134A 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00081354 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00081358                            ; ===========================================================================
00081358                            
00081358                            loc_72D30:				; XREF: loc_72A64
00081358 08D5 0003                  		bset	#3,(a5)
0008135C 2B4C 0014                  		move.l	a4,$14(a5)
00081360 1B5C 0018                  		move.b	(a4)+,$18(a5)
00081364 1B5C 0019                  		move.b	(a4)+,$19(a5)
00081368 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0008136C 101C                       		move.b	(a4)+,d0
0008136E E208                       		lsr.b	#1,d0
00081370 1B40 001B                  		move.b	d0,$1B(a5)
00081374 426D 001C                  		clr.w	$1C(a5)
00081378 4E75                       		rts	
0008137A                            ; ===========================================================================
0008137A                            
0008137A                            loc_72D52:				; XREF: loc_72A64
0008137A 08D5 0003                  		bset	#3,(a5)
0008137E 4E75                       		rts	
00081380                            ; ===========================================================================
00081380                            
00081380                            loc_72D58:				; XREF: loc_72A64
00081380 0895 0007                  		bclr	#7,(a5)
00081384 0895 0004                  		bclr	#4,(a5)
00081388 4A2D 0001                  		tst.b	1(a5)
0008138C 6B00                       		bmi.s	loc_72D74
0008138E 4A2E 0008                  		tst.b	8(a6)
00081392 6B00 0000                  		bmi.w	loc_72E02
00081396 4EBA F98E                  		jsr	sub_726FE(pc)
0008139A 6000                       		bra.s	loc_72D78
0008139C                            ; ===========================================================================
0008139C                            
0008139C                            loc_72D74:
0008139C 4EBA FC2A                  		jsr	sub_729A0(pc)
000813A0                            
000813A0                            loc_72D78:
000813A0 4A2E 000E                  		tst.b	$E(a6)
000813A4 6A00 0000                  		bpl.w	loc_72E02
000813A8 4216                       		clr.b	0(a6)
000813AA 7000                       		moveq	#0,d0
000813AC 102D 0001                  		move.b	1(a5),d0
000813B0 6B00                       		bmi.s	loc_72DCC
000813B2 41FA F546                  		lea	dword_722CC(pc),a0
000813B6 264D                       		movea.l	a5,a3
000813B8 0C00 0004                  		cmpi.b	#4,d0
000813BC 6600                       		bne.s	loc_72DA8
000813BE 4A2E 0340                  		tst.b	$340(a6)
000813C2 6A00                       		bpl.s	loc_72DA8
000813C4 4BEE 0340                  		lea	$340(a6),a5
000813C8 226E 0020                  		movea.l	$20(a6),a1
000813CC 6000                       		bra.s	loc_72DB8
000813CE                            ; ===========================================================================
000813CE                            
000813CE                            loc_72DA8:
000813CE 5500                       		subq.b	#2,d0
000813D0 E508                       		lsl.b	#2,d0
000813D2 2A70 0000                  		movea.l	(a0,d0.w),a5
000813D6 4A15                       		tst.b	(a5)
000813D8 6A00                       		bpl.s	loc_72DC8
000813DA 226E 0018                  		movea.l	$18(a6),a1
000813DE                            
000813DE                            loc_72DB8:
000813DE 0895 0002                  		bclr	#2,(a5)
000813E2 08D5 0001                  		bset	#1,(a5)
000813E6 102D 000B                  		move.b	$B(a5),d0
000813EA 4EBA FE8A                  		jsr	sub_72C4E(pc)
000813EE                            
000813EE                            loc_72DC8:
000813EE 2A4B                       		movea.l	a3,a5
000813F0 6000                       		bra.s	loc_72E02
000813F2                            ; ===========================================================================
000813F2                            
000813F2                            loc_72DCC:
000813F2 41EE 0370                  		lea	$370(a6),a0
000813F6 4A10                       		tst.b	(a0)
000813F8 6A00                       		bpl.s	loc_72DE0
000813FA 0C00 00E0                  		cmpi.b	#$E0,d0
000813FE 6700                       		beq.s	loc_72DEA
00081400 0C00 00C0                  		cmpi.b	#$C0,d0
00081404 6700                       		beq.s	loc_72DEA
00081406                            
00081406                            loc_72DE0:
00081406 41FA F4F2                  		lea	dword_722CC(pc),a0
0008140A E608                       		lsr.b	#3,d0
0008140C 2070 0000                  		movea.l	(a0,d0.w),a0
00081410                            
00081410                            loc_72DEA:
00081410 0890 0002                  		bclr	#2,(a0)
00081414 08D0 0001                  		bset	#1,(a0)
00081418 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008141E 6600                       		bne.s	loc_72E02
00081420 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00081428                            
00081428                            loc_72E02:
00081428 504F                       		addq.w	#8,sp
0008142A 4E75                       		rts	
0008142C                            ; ===========================================================================
0008142C                            
0008142C                            loc_72E06:				; XREF: loc_72A64
0008142C 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00081432 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00081436 0815 0002                  		btst	#2,(a5)
0008143A 6600                       		bne.s	locret_72E1E
0008143C 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00081444                            
00081444                            locret_72E1E:
00081444 4E75                       		rts	
00081446                            ; ===========================================================================
00081446                            
00081446                            loc_72E20:				; XREF: loc_72A64
00081446 0895 0003                  		bclr	#3,(a5)
0008144A 4E75                       		rts	
0008144C                            ; ===========================================================================
0008144C                            
0008144C                            loc_72E26:				; XREF: loc_72A64
0008144C 1B5C 000B                  		move.b	(a4)+,$B(a5)
00081450 4E75                       		rts	
00081452                            ; ===========================================================================
00081452                            
00081452                            loc_72E2C:				; XREF: loc_72A64
00081452 101C                       		move.b	(a4)+,d0
00081454 E148                       		lsl.w	#8,d0
00081456 101C                       		move.b	(a4)+,d0
00081458 D8C0                       		adda.w	d0,a4
0008145A 534C                       		subq.w	#1,a4
0008145C 4E75                       		rts	
0008145E                            ; ===========================================================================
0008145E                            
0008145E                            loc_72E38:				; XREF: loc_72A64
0008145E 7000                       		moveq	#0,d0
00081460 101C                       		move.b	(a4)+,d0
00081462 121C                       		move.b	(a4)+,d1
00081464 4A35 0024                  		tst.b	$24(a5,d0.w)
00081468 6600                       		bne.s	loc_72E48
0008146A 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0008146E                            
0008146E                            loc_72E48:
0008146E 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00081472 66DE                       		bne.s	loc_72E2C
00081474 544C                       		addq.w	#2,a4
00081476 4E75                       		rts	
00081478                            ; ===========================================================================
00081478                            
00081478                            loc_72E52:				; XREF: loc_72A64
00081478 7000                       		moveq	#0,d0
0008147A 102D 000D                  		move.b	$D(a5),d0
0008147E 5900                       		subq.b	#4,d0
00081480 2B8C 0000                  		move.l	a4,(a5,d0.w)
00081484 1B40 000D                  		move.b	d0,$D(a5)
00081488 60C8                       		bra.s	loc_72E2C
0008148A                            ; ===========================================================================
0008148A                            
0008148A                            loc_72E64:				; XREF: loc_72A64
0008148A 103C 0088                  		move.b	#$88,d0
0008148E 123C 000F                  		move.b	#$F,d1
00081492 4EBA F8C2                  		jsr	sub_7272E(pc)
00081496 103C 008C                  		move.b	#$8C,d0
0008149A 123C 000F                  		move.b	#$F,d1
0008149E 6000 F8B6                  		bra.w	sub_7272E
000814A2                            ; ===========================================================================
000814A2                            Kos_Z80:	incbin	sound\z80_1.bin
00081552 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00081554 21                         		dc.b $21
00081555 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00081557                            		incbin	sound\z80_2.bin
00082C02                            		even
00082C02                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00089402                            		even
00089402                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00092CA0                            		even
00092CA0                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000968C0 00                         		even
000968C0                            Music84:	include	sound\music84.asm ; Star Light Act 1
000968C0                            music84_Header:
000968C0 =00000001                  smpsHeaderStartSong = 1
000968C0 0000                       	smpsHeaderVoice     music84_Voices
000968C2 0603                       	smpsHeaderChan      $06, $03
000968C4 0205                       	smpsHeaderTempo     $02, $05
000968C6                            
000968CA 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000968CE 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000968D2 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000968D6 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000968DA 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000968DE 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000968E4 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000968EA 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000968F0                            
000968F0                            ; FM1 Data
000968F0                            music84_FM1:
000968F0 E0C0                       	smpsPan             panCenter, $00
000968F4 E107                       	smpsAlterNote       $07
000968F6 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000968FA E106                       	smpsAlterNote       $06
000968FC 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00096900 E10B                       	smpsAlterNote       $0B
00096902 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00096908 E10C                       	smpsAlterNote       $0C
0009690A E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009690D E10B                       	smpsAlterNote       $0B
0009690F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00096912 E109                       	smpsAlterNote       $09
00096914 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00096919 E108                       	smpsAlterNote       $08
0009691B 8001                       	dc.b	nRst, $01
0009691D E10B                       	smpsAlterNote       $0B
0009691F 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00096925 E107                       	smpsAlterNote       $07
00096927 9B03                       	dc.b	nD2, $03
00096929                            
00096929                            music84_Jump04:
00096929 E107                       	smpsAlterNote       $07
0009692B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009692F E10B                       	smpsAlterNote       $0B
00096931 A202 8001                  	dc.b	nA2, $02, nRst, $01
00096935 E107                       	smpsAlterNote       $07
00096937 9B03                       	dc.b	nD2, $03
00096939 E11A                       	smpsAlterNote       $1A
0009693B A301                       	dc.b	nBb2, $01
0009693D E1F2                       	smpsAlterNote       $F2
0009693F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096942 E1FF                       	smpsAlterNote       $FF
00096944 E701                       	dc.b	smpsNoAttack, $01
00096946 E111                       	smpsAlterNote       $11
00096948 E701                       	dc.b	smpsNoAttack, $01
0009694A E106                       	smpsAlterNote       $06
0009694C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0009694F E107                       	smpsAlterNote       $07
00096951 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00096955 E108                       	smpsAlterNote       $08
00096957 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0009695F E109                       	smpsAlterNote       $09
00096961 A003                       	dc.b	nG2, $03
00096963 E10C                       	smpsAlterNote       $0C
00096965 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00096969 E1FD                       	smpsAlterNote       $FD
0009696B A401                       	dc.b	nB2, $01
0009696D E109                       	smpsAlterNote       $09
0009696F E701                       	dc.b	smpsNoAttack, $01
00096971 E106                       	smpsAlterNote       $06
00096973 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096976 E109                       	smpsAlterNote       $09
00096978 A007                       	dc.b	nG2, $07
0009697A E108                       	smpsAlterNote       $08
0009697C 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00096980 E107                       	smpsAlterNote       $07
00096982 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00096988 E10B                       	smpsAlterNote       $0B
0009698A A203 8001                  	dc.b	nA2, $03, nRst, $01
0009698E E107                       	smpsAlterNote       $07
00096990 9B03                       	dc.b	nD2, $03
00096992 E11A                       	smpsAlterNote       $1A
00096994 A301                       	dc.b	nBb2, $01
00096996 E1F9                       	smpsAlterNote       $F9
00096998 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009699B E107                       	smpsAlterNote       $07
0009699D E701                       	dc.b	smpsNoAttack, $01
0009699F E111                       	smpsAlterNote       $11
000969A1 E701                       	dc.b	smpsNoAttack, $01
000969A3 E106                       	smpsAlterNote       $06
000969A5 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000969AA E107                       	smpsAlterNote       $07
000969AC 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000969B4 E1EC                       	smpsAlterNote       $EC
000969B6 A101                       	dc.b	nAb2, $01
000969B8 E108                       	smpsAlterNote       $08
000969BA E701                       	dc.b	smpsNoAttack, $01
000969BC E116                       	smpsAlterNote       $16
000969BE E701                       	dc.b	smpsNoAttack, $01
000969C0 E1F5                       	smpsAlterNote       $F5
000969C2 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000969C5 E10B                       	smpsAlterNote       $0B
000969C7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000969CB E107                       	smpsAlterNote       $07
000969CD 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000969D3 E109                       	smpsAlterNote       $09
000969D5 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000969D9 E10B                       	smpsAlterNote       $0B
000969DB 9603                       	dc.b	nA1, $03
000969DD E107                       	smpsAlterNote       $07
000969DF 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000969E5 E10B                       	smpsAlterNote       $0B
000969E7 A203 8001                  	dc.b	nA2, $03, nRst, $01
000969EB E107                       	smpsAlterNote       $07
000969ED 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000969F1 E11A                       	smpsAlterNote       $1A
000969F3 A301                       	dc.b	nBb2, $01
000969F5 E1F9                       	smpsAlterNote       $F9
000969F7 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000969FA E107                       	smpsAlterNote       $07
000969FC E701                       	dc.b	smpsNoAttack, $01
000969FE E1FB                       	smpsAlterNote       $FB
00096A00 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096A03 E106                       	smpsAlterNote       $06
00096A05 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096A09 E107                       	smpsAlterNote       $07
00096A0B 9B03                       	dc.b	nD2, $03
00096A0D E108                       	smpsAlterNote       $08
00096A0F 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00096A15 E109                       	smpsAlterNote       $09
00096A17 A002 8001                  	dc.b	nG2, $02, nRst, $01
00096A1B E10C                       	smpsAlterNote       $0C
00096A1D A303                       	dc.b	nBb2, $03
00096A1F E1F0                       	smpsAlterNote       $F0
00096A21 A401                       	dc.b	nB2, $01
00096A23 E1FD                       	smpsAlterNote       $FD
00096A25 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00096A2A E106                       	smpsAlterNote       $06
00096A2C 8001                       	dc.b	nRst, $01
00096A2E E109                       	smpsAlterNote       $09
00096A30 A006 8001                  	dc.b	nG2, $06, nRst, $01
00096A34 E108                       	smpsAlterNote       $08
00096A36 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00096A3A E107                       	smpsAlterNote       $07
00096A3C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00096A42 E10B                       	smpsAlterNote       $0B
00096A44 A203                       	dc.b	nA2, $03
00096A46 E107                       	smpsAlterNote       $07
00096A48 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00096A4C E1F2                       	smpsAlterNote       $F2
00096A4E A401                       	dc.b	nB2, $01
00096A50 E1FF                       	smpsAlterNote       $FF
00096A52 E701                       	dc.b	smpsNoAttack, $01
00096A54 E107                       	smpsAlterNote       $07
00096A56 E701                       	dc.b	smpsNoAttack, $01
00096A58 E1FB                       	smpsAlterNote       $FB
00096A5A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096A5D E106                       	smpsAlterNote       $06
00096A5F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096A63 E107                       	smpsAlterNote       $07
00096A65 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00096A6F E117                       	smpsAlterNote       $17
00096A71 A001                       	dc.b	nG2, $01
00096A73 E1FA                       	smpsAlterNote       $FA
00096A75 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00096A78 E108                       	smpsAlterNote       $08
00096A7A E701                       	dc.b	smpsNoAttack, $01
00096A7C E1E7                       	smpsAlterNote       $E7
00096A7E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00096A81 E103                       	smpsAlterNote       $03
00096A83 E701                       	dc.b	smpsNoAttack, $01
00096A85 E10B                       	smpsAlterNote       $0B
00096A87 E702                       	dc.b	smpsNoAttack, $02
00096A89 E107                       	smpsAlterNote       $07
00096A8B 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00096A93 E106                       	smpsAlterNote       $06
00096A95 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00096A9B E10C                       	smpsAlterNote       $0C
00096A9D 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00096AA3 E109                       	smpsAlterNote       $09
00096AA5 9E03                       	dc.b	nF2, $03
00096AA7 E10C                       	smpsAlterNote       $0C
00096AA9 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00096AAD E1EA                       	smpsAlterNote       $EA
00096AAF A201                       	dc.b	nA2, $01
00096AB1 E106                       	smpsAlterNote       $06
00096AB3 E701                       	dc.b	smpsNoAttack, $01
00096AB5 E1E2                       	smpsAlterNote       $E2
00096AB7 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00096ABA E1F0                       	smpsAlterNote       $F0
00096ABC E701                       	dc.b	smpsNoAttack, $01
00096ABE E10C                       	smpsAlterNote       $0C
00096AC0 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00096ACC E116                       	smpsAlterNote       $16
00096ACE 9C01                       	dc.b	nEb2, $01
00096AD0 E105                       	smpsAlterNote       $05
00096AD2 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00096AD5 E1F1                       	smpsAlterNote       $F1
00096AD7 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00096ADA E1FF                       	smpsAlterNote       $FF
00096ADC E701                       	dc.b	smpsNoAttack, $01
00096ADE E109                       	smpsAlterNote       $09
00096AE0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096AE4 E10C                       	smpsAlterNote       $0C
00096AE6 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00096AF2 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00096AF8 E109                       	smpsAlterNote       $09
00096AFA 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00096AFE E10C                       	smpsAlterNote       $0C
00096B00 9703                       	dc.b	nBb1, $03
00096B02 E11A                       	smpsAlterNote       $1A
00096B04 A101                       	dc.b	nAb2, $01
00096B06 E1FB                       	smpsAlterNote       $FB
00096B08 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00096B0B E10A                       	smpsAlterNote       $0A
00096B0D E701                       	dc.b	smpsNoAttack, $01
00096B0F E1E8                       	smpsAlterNote       $E8
00096B11 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00096B14 E106                       	smpsAlterNote       $06
00096B16 E701                       	dc.b	smpsNoAttack, $01
00096B18 E10C                       	smpsAlterNote       $0C
00096B1A E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00096B26 E1F9                       	smpsAlterNote       $F9
00096B28 9D01                       	dc.b	nE2, $01
00096B2A E108                       	smpsAlterNote       $08
00096B2C E701                       	dc.b	smpsNoAttack, $01
00096B2E E1F6                       	smpsAlterNote       $F6
00096B30 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00096B33 E109                       	smpsAlterNote       $09
00096B35 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00096B39 E10C                       	smpsAlterNote       $0C
00096B3B 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00096B47 E108                       	smpsAlterNote       $08
00096B49 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00096B4F E106                       	smpsAlterNote       $06
00096B51 A403 8001                  	dc.b	nB2, $03, nRst, $01
00096B55 E108                       	smpsAlterNote       $08
00096B57 9D03                       	dc.b	nE2, $03
00096B59 E1EB                       	smpsAlterNote       $EB
00096B5B A801                       	dc.b	nEb3, $01
00096B5D E109                       	smpsAlterNote       $09
00096B5F E701                       	dc.b	smpsNoAttack, $01
00096B61 E1FA                       	smpsAlterNote       $FA
00096B63 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00096B66 E108                       	smpsAlterNote       $08
00096B68 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00096B74 E1E9                       	smpsAlterNote       $E9
00096B76 A301                       	dc.b	nBb2, $01
00096B78 E107                       	smpsAlterNote       $07
00096B7A E701                       	dc.b	smpsNoAttack, $01
00096B7C E1F0                       	smpsAlterNote       $F0
00096B7E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096B81 E1F7                       	smpsAlterNote       $F7
00096B83 E701                       	dc.b	smpsNoAttack, $01
00096B85 E107                       	smpsAlterNote       $07
00096B87 E701                       	dc.b	smpsNoAttack, $01
00096B89 E106                       	smpsAlterNote       $06
00096B8B E701                       	dc.b	smpsNoAttack, $01
00096B8D E108                       	smpsAlterNote       $08
00096B8F 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00096B95 E106                       	smpsAlterNote       $06
00096B97 A403 8001                  	dc.b	nB2, $03, nRst, $01
00096B9B E108                       	smpsAlterNote       $08
00096B9D 9D03                       	dc.b	nE2, $03
00096B9F E10B                       	smpsAlterNote       $0B
00096BA1 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00096BA9 E108                       	smpsAlterNote       $08
00096BAB 9D03                       	dc.b	nE2, $03
00096BAD E10B                       	smpsAlterNote       $0B
00096BAF 9603 8001                  	dc.b	nA1, $03, nRst, $01
00096BB3 E113                       	smpsAlterNote       $13
00096BB5 A001                       	dc.b	nG2, $01
00096BB7 E118                       	smpsAlterNote       $18
00096BB9 E701                       	dc.b	smpsNoAttack, $01
00096BBB E1E9                       	smpsAlterNote       $E9
00096BBD E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00096BC0 E1F3                       	smpsAlterNote       $F3
00096BC2 E701                       	dc.b	smpsNoAttack, $01
00096BC4 E1FD                       	smpsAlterNote       $FD
00096BC6 E701                       	dc.b	smpsNoAttack, $01
00096BC8 E102                       	smpsAlterNote       $02
00096BCA E701                       	dc.b	smpsNoAttack, $01
00096BCC E107                       	smpsAlterNote       $07
00096BCE 8001                       	dc.b	nRst, $01
00096BD0 E10B                       	smpsAlterNote       $0B
00096BD2 9603                       	dc.b	nA1, $03
00096BD4 E10C                       	smpsAlterNote       $0C
00096BD6 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00096BDC E10B                       	smpsAlterNote       $0B
00096BDE 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00096BEA 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00096BF0 E107                       	smpsAlterNote       $07
00096BF2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00096BF8 E10B                       	smpsAlterNote       $0B
00096BFA A203                       	dc.b	nA2, $03
00096BFC E107                       	smpsAlterNote       $07
00096BFE 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00096C02 E1F2                       	smpsAlterNote       $F2
00096C04 A401                       	dc.b	nB2, $01
00096C06 E1FF                       	smpsAlterNote       $FF
00096C08 E701                       	dc.b	smpsNoAttack, $01
00096C0A E107                       	smpsAlterNote       $07
00096C0C E701                       	dc.b	smpsNoAttack, $01
00096C0E E1FB                       	smpsAlterNote       $FB
00096C10 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096C13 E106                       	smpsAlterNote       $06
00096C15 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096C19 E107                       	smpsAlterNote       $07
00096C1B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00096C1F E108                       	smpsAlterNote       $08
00096C21 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00096C27 E109                       	smpsAlterNote       $09
00096C29 A003 8001                  	dc.b	nG2, $03, nRst, $01
00096C2D E10C                       	smpsAlterNote       $0C
00096C2F A302 8001                  	dc.b	nBb2, $02, nRst, $01
00096C33 E1F0                       	smpsAlterNote       $F0
00096C35 A401                       	dc.b	nB2, $01
00096C37 E109                       	smpsAlterNote       $09
00096C39 E701                       	dc.b	smpsNoAttack, $01
00096C3B E106                       	smpsAlterNote       $06
00096C3D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096C40 E109                       	smpsAlterNote       $09
00096C42 A007                       	dc.b	nG2, $07
00096C44 E108                       	smpsAlterNote       $08
00096C46 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00096C4A E107                       	smpsAlterNote       $07
00096C4C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00096C52 E10B                       	smpsAlterNote       $0B
00096C54 A202 8001                  	dc.b	nA2, $02, nRst, $01
00096C58 E107                       	smpsAlterNote       $07
00096C5A 9B03                       	dc.b	nD2, $03
00096C5C E11A                       	smpsAlterNote       $1A
00096C5E A301                       	dc.b	nBb2, $01
00096C60 E1F2                       	smpsAlterNote       $F2
00096C62 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096C65 E1FF                       	smpsAlterNote       $FF
00096C67 E701                       	dc.b	smpsNoAttack, $01
00096C69 E111                       	smpsAlterNote       $11
00096C6B E701                       	dc.b	smpsNoAttack, $01
00096C6D E106                       	smpsAlterNote       $06
00096C6F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00096C72 E107                       	smpsAlterNote       $07
00096C74 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00096C80 E117                       	smpsAlterNote       $17
00096C82 A001                       	dc.b	nG2, $01
00096C84 E1FA                       	smpsAlterNote       $FA
00096C86 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00096C89 E116                       	smpsAlterNote       $16
00096C8B E701                       	dc.b	smpsNoAttack, $01
00096C8D E1F5                       	smpsAlterNote       $F5
00096C8F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00096C92 E103                       	smpsAlterNote       $03
00096C94 E701                       	dc.b	smpsNoAttack, $01
00096C96 E10B                       	smpsAlterNote       $0B
00096C98 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096C9C E107                       	smpsAlterNote       $07
00096C9E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00096CA4 E109                       	smpsAlterNote       $09
00096CA6 9E03                       	dc.b	nF2, $03
00096CA8 E10B                       	smpsAlterNote       $0B
00096CAA 9603 8001                  	dc.b	nA1, $03, nRst, $01
00096CAE E107                       	smpsAlterNote       $07
00096CB0 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00096CB6 E10B                       	smpsAlterNote       $0B
00096CB8 A203 8001                  	dc.b	nA2, $03, nRst, $01
00096CBC E107                       	smpsAlterNote       $07
00096CBE 9B03                       	dc.b	nD2, $03
00096CC0 E11A                       	smpsAlterNote       $1A
00096CC2 A301                       	dc.b	nBb2, $01
00096CC4 E1F9                       	smpsAlterNote       $F9
00096CC6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096CC9 E107                       	smpsAlterNote       $07
00096CCB E701                       	dc.b	smpsNoAttack, $01
00096CCD E111                       	smpsAlterNote       $11
00096CCF E701                       	dc.b	smpsNoAttack, $01
00096CD1 E106                       	smpsAlterNote       $06
00096CD3 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00096CD8 E107                       	smpsAlterNote       $07
00096CDA 9B03                       	dc.b	nD2, $03
00096CDC E108                       	smpsAlterNote       $08
00096CDE 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00096CE4 E109                       	smpsAlterNote       $09
00096CE6 A003                       	dc.b	nG2, $03
00096CE8 E10C                       	smpsAlterNote       $0C
00096CEA A303 8001                  	dc.b	nBb2, $03, nRst, $01
00096CEE E1FD                       	smpsAlterNote       $FD
00096CF0 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00096CF5 E106                       	smpsAlterNote       $06
00096CF7 8001                       	dc.b	nRst, $01
00096CF9 E109                       	smpsAlterNote       $09
00096CFB A006 8001                  	dc.b	nG2, $06, nRst, $01
00096CFF E108                       	smpsAlterNote       $08
00096D01 9C03                       	dc.b	nEb2, $03
00096D03 E107                       	smpsAlterNote       $07
00096D05 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00096D0B E10B                       	smpsAlterNote       $0B
00096D0D A203 8001                  	dc.b	nA2, $03, nRst, $01
00096D11 E107                       	smpsAlterNote       $07
00096D13 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00096D17 E11A                       	smpsAlterNote       $1A
00096D19 A301                       	dc.b	nBb2, $01
00096D1B E1F9                       	smpsAlterNote       $F9
00096D1D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096D20 E107                       	smpsAlterNote       $07
00096D22 E701                       	dc.b	smpsNoAttack, $01
00096D24 E1FB                       	smpsAlterNote       $FB
00096D26 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096D29 E106                       	smpsAlterNote       $06
00096D2B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096D2F E107                       	smpsAlterNote       $07
00096D31 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00096D39 E1EC                       	smpsAlterNote       $EC
00096D3B A101                       	dc.b	nAb2, $01
00096D3D E108                       	smpsAlterNote       $08
00096D3F E701                       	dc.b	smpsNoAttack, $01
00096D41 E1E7                       	smpsAlterNote       $E7
00096D43 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00096D46 E1F5                       	smpsAlterNote       $F5
00096D48 E701                       	dc.b	smpsNoAttack, $01
00096D4A E10B                       	smpsAlterNote       $0B
00096D4C E702                       	dc.b	smpsNoAttack, $02
00096D4E E107                       	smpsAlterNote       $07
00096D50 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00096D56 E106                       	smpsAlterNote       $06
00096D58 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00096D5E E10C                       	smpsAlterNote       $0C
00096D60 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00096D68 E109                       	smpsAlterNote       $09
00096D6A 9E03                       	dc.b	nF2, $03
00096D6C E10C                       	smpsAlterNote       $0C
00096D6E 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00096D72 E1EA                       	smpsAlterNote       $EA
00096D74 A201                       	dc.b	nA2, $01
00096D76 E106                       	smpsAlterNote       $06
00096D78 E701                       	dc.b	smpsNoAttack, $01
00096D7A E114                       	smpsAlterNote       $14
00096D7C E701                       	dc.b	smpsNoAttack, $01
00096D7E E1F0                       	smpsAlterNote       $F0
00096D80 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00096D83 E10C                       	smpsAlterNote       $0C
00096D85 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00096D91 9703                       	dc.b	nBb1, $03
00096D93 E116                       	smpsAlterNote       $16
00096D95 9C01                       	dc.b	nEb2, $01
00096D97 E105                       	smpsAlterNote       $05
00096D99 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00096D9C E113                       	smpsAlterNote       $13
00096D9E E701                       	dc.b	smpsNoAttack, $01
00096DA0 E1FF                       	smpsAlterNote       $FF
00096DA2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00096DA5 E109                       	smpsAlterNote       $09
00096DA7 E703                       	dc.b	smpsNoAttack, $03
00096DA9 E10C                       	smpsAlterNote       $0C
00096DAB 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00096DB7 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00096DBF E109                       	smpsAlterNote       $09
00096DC1 9E03                       	dc.b	nF2, $03
00096DC3 E10C                       	smpsAlterNote       $0C
00096DC5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00096DC9 E1EC                       	smpsAlterNote       $EC
00096DCB A201                       	dc.b	nA2, $01
00096DCD E10A                       	smpsAlterNote       $0A
00096DCF E701                       	dc.b	smpsNoAttack, $01
00096DD1 E1E8                       	smpsAlterNote       $E8
00096DD3 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00096DD6 E1F7                       	smpsAlterNote       $F7
00096DD8 E701                       	dc.b	smpsNoAttack, $01
00096DDA E10C                       	smpsAlterNote       $0C
00096DDC E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00096DE8 E1EA                       	smpsAlterNote       $EA
00096DEA 9D01                       	dc.b	nE2, $01
00096DEC E108                       	smpsAlterNote       $08
00096DEE E701                       	dc.b	smpsNoAttack, $01
00096DF0 E1F6                       	smpsAlterNote       $F6
00096DF2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00096DF5 E105                       	smpsAlterNote       $05
00096DF7 E701                       	dc.b	smpsNoAttack, $01
00096DF9 E109                       	smpsAlterNote       $09
00096DFB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00096DFF E10C                       	smpsAlterNote       $0C
00096E01 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00096E0D E108                       	smpsAlterNote       $08
00096E0F 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00096E15 E106                       	smpsAlterNote       $06
00096E17 A403 8001                  	dc.b	nB2, $03, nRst, $01
00096E1B E108                       	smpsAlterNote       $08
00096E1D 9D03                       	dc.b	nE2, $03
00096E1F E1EB                       	smpsAlterNote       $EB
00096E21 A801                       	dc.b	nEb3, $01
00096E23 E109                       	smpsAlterNote       $09
00096E25 E701                       	dc.b	smpsNoAttack, $01
00096E27 E1EB                       	smpsAlterNote       $EB
00096E29 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00096E2C E108                       	smpsAlterNote       $08
00096E2E E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00096E3A E1E9                       	smpsAlterNote       $E9
00096E3C A301                       	dc.b	nBb2, $01
00096E3E E1F8                       	smpsAlterNote       $F8
00096E40 E701                       	dc.b	smpsNoAttack, $01
00096E42 E116                       	smpsAlterNote       $16
00096E44 E701                       	dc.b	smpsNoAttack, $01
00096E46 E1F7                       	smpsAlterNote       $F7
00096E48 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00096E4B E107                       	smpsAlterNote       $07
00096E4D E701                       	dc.b	smpsNoAttack, $01
00096E4F E1EE                       	smpsAlterNote       $EE
00096E51 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00096E54 E106                       	smpsAlterNote       $06
00096E56 8001                       	dc.b	nRst, $01
00096E58 E108                       	smpsAlterNote       $08
00096E5A 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00096E60 E106                       	smpsAlterNote       $06
00096E62 A402 8001                  	dc.b	nB2, $02, nRst, $01
00096E66 E108                       	smpsAlterNote       $08
00096E68 9D03                       	dc.b	nE2, $03
00096E6A E10B                       	smpsAlterNote       $0B
00096E6C 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00096E72 E108                       	smpsAlterNote       $08
00096E74 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00096E78 E10B                       	smpsAlterNote       $0B
00096E7A 9603                       	dc.b	nA1, $03
00096E7C E10E                       	smpsAlterNote       $0E
00096E7E A001                       	dc.b	nG2, $01
00096E80 E118                       	smpsAlterNote       $18
00096E82 E701                       	dc.b	smpsNoAttack, $01
00096E84 E1E9                       	smpsAlterNote       $E9
00096E86 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00096E89 E1EE                       	smpsAlterNote       $EE
00096E8B E701                       	dc.b	smpsNoAttack, $01
00096E8D E1F8                       	smpsAlterNote       $F8
00096E8F E701                       	dc.b	smpsNoAttack, $01
00096E91 E102                       	smpsAlterNote       $02
00096E93 E701                       	dc.b	smpsNoAttack, $01
00096E95 E107                       	smpsAlterNote       $07
00096E97 8001                       	dc.b	nRst, $01
00096E99 E10B                       	smpsAlterNote       $0B
00096E9B 9603                       	dc.b	nA1, $03
00096E9D E10C                       	smpsAlterNote       $0C
00096E9F 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00096EA5 E10B                       	smpsAlterNote       $0B
00096EA7 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00096EB3 8001 9603                  	dc.b	nRst, $01, nA1, $03
00096EB7 E10C                       	smpsAlterNote       $0C
00096EB9 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00096EC5 8001                       	dc.b	nRst, $01
00096EC7 E10B                       	smpsAlterNote       $0B
00096EC9 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00096ED1 E107                       	smpsAlterNote       $07
00096ED3 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00096ED7 E10B                       	smpsAlterNote       $0B
00096ED9 9603                       	dc.b	nA1, $03
00096EDB E109                       	smpsAlterNote       $09
00096EDD 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00096EE1 E108                       	smpsAlterNote       $08
00096EE3 9D06                       	dc.b	nE2, $06
00096EE5 E107                       	smpsAlterNote       $07
00096EE7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00096EEB E106                       	smpsAlterNote       $06
00096EED 9903                       	dc.b	nC2, $03
00096EEF E10C                       	smpsAlterNote       $0C
00096EF1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00096EF5 E10B                       	smpsAlterNote       $0B
00096EF7 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00096F03 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00096F0D E10C                       	smpsAlterNote       $0C
00096F0F 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00096F1B 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00096F27 8001                       	dc.b	nRst, $01
00096F29 E10B                       	smpsAlterNote       $0B
00096F2B 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00096F37 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00096F43 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00096F4F 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00096F59 E10C                       	smpsAlterNote       $0C
00096F5B 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00096F67 E10B                       	smpsAlterNote       $0B
00096F69 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00096F71 E107                       	smpsAlterNote       $07
00096F73 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00096F77 E10B                       	smpsAlterNote       $0B
00096F79 9603                       	dc.b	nA1, $03
00096F7B E109                       	smpsAlterNote       $09
00096F7D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00096F81 E108                       	smpsAlterNote       $08
00096F83 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00096F87 E107                       	smpsAlterNote       $07
00096F89 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00096F8D E106                       	smpsAlterNote       $06
00096F8F 9903                       	dc.b	nC2, $03
00096F91 E10C                       	smpsAlterNote       $0C
00096F93 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00096F97 E10B                       	smpsAlterNote       $0B
00096F99 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00096FA5 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00096FAF E10C                       	smpsAlterNote       $0C
00096FB1 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00096FBD 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00096FC9 8001                       	dc.b	nRst, $01
00096FCB E10B                       	smpsAlterNote       $0B
00096FCD 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00096FD9 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00096FE3 E10C                       	smpsAlterNote       $0C
00096FE5 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00096FF1 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00096FFD E10B                       	smpsAlterNote       $0B
00096FFF 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0009700B 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00097015 E10C                       	smpsAlterNote       $0C
00097017 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00097023 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0009702F E10B                       	smpsAlterNote       $0B
00097031 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0009703D 8001                       	dc.b	nRst, $01
0009703F E1EC                       	smpsAlterNote       $EC
00097041 A101                       	dc.b	nAb2, $01
00097043 E1FA                       	smpsAlterNote       $FA
00097045 E701                       	dc.b	smpsNoAttack, $01
00097047 E116                       	smpsAlterNote       $16
00097049 E701                       	dc.b	smpsNoAttack, $01
0009704B E1F5                       	smpsAlterNote       $F5
0009704D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00097050 E10B                       	smpsAlterNote       $0B
00097052 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0009705E 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0009706A E107                       	smpsAlterNote       $07
0009706C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00097072 E10B                       	smpsAlterNote       $0B
00097074 A203                       	dc.b	nA2, $03
00097076 E107                       	smpsAlterNote       $07
00097078 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009707C E1F3                       	smpsAlterNote       $F3
0009707E A401                       	dc.b	nB2, $01
00097080 E102                       	smpsAlterNote       $02
00097082 E701                       	dc.b	smpsNoAttack, $01
00097084 E109                       	smpsAlterNote       $09
00097086 E701                       	dc.b	smpsNoAttack, $01
00097088 E102                       	smpsAlterNote       $02
0009708A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009708D E106                       	smpsAlterNote       $06
0009708F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097093 E107                       	smpsAlterNote       $07
00097095 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00097099 E108                       	smpsAlterNote       $08
0009709B 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000970A1 E109                       	smpsAlterNote       $09
000970A3 A003 8001                  	dc.b	nG2, $03, nRst, $01
000970A7 E1F2                       	smpsAlterNote       $F2
000970A9 A401                       	dc.b	nB2, $01
000970AB E1FF                       	smpsAlterNote       $FF
000970AD E701                       	dc.b	smpsNoAttack, $01
000970AF E111                       	smpsAlterNote       $11
000970B1 E701                       	dc.b	smpsNoAttack, $01
000970B3 E1FB                       	smpsAlterNote       $FB
000970B5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000970B8 E106                       	smpsAlterNote       $06
000970BA E702                       	dc.b	smpsNoAttack, $02
000970BC E109                       	smpsAlterNote       $09
000970BE A007                       	dc.b	nG2, $07
000970C0 E108                       	smpsAlterNote       $08
000970C2 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000970C6 E107                       	smpsAlterNote       $07
000970C8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000970CE E10B                       	smpsAlterNote       $0B
000970D0 A202 8001                  	dc.b	nA2, $02, nRst, $01
000970D4 E107                       	smpsAlterNote       $07
000970D6 9B03                       	dc.b	nD2, $03
000970D8 E11A                       	smpsAlterNote       $1A
000970DA A301                       	dc.b	nBb2, $01
000970DC E1F2                       	smpsAlterNote       $F2
000970DE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000970E1 E1FF                       	smpsAlterNote       $FF
000970E3 E701                       	dc.b	smpsNoAttack, $01
000970E5 E111                       	smpsAlterNote       $11
000970E7 E701                       	dc.b	smpsNoAttack, $01
000970E9 E106                       	smpsAlterNote       $06
000970EB E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000970EE E107                       	smpsAlterNote       $07
000970F0 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000970FC E117                       	smpsAlterNote       $17
000970FE A001                       	dc.b	nG2, $01
00097100 E1FA                       	smpsAlterNote       $FA
00097102 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00097105 E116                       	smpsAlterNote       $16
00097107 E701                       	dc.b	smpsNoAttack, $01
00097109 E1F5                       	smpsAlterNote       $F5
0009710B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009710E E103                       	smpsAlterNote       $03
00097110 E701                       	dc.b	smpsNoAttack, $01
00097112 E10B                       	smpsAlterNote       $0B
00097114 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097118 E107                       	smpsAlterNote       $07
0009711A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00097120 E109                       	smpsAlterNote       $09
00097122 9E03                       	dc.b	nF2, $03
00097124 E10B                       	smpsAlterNote       $0B
00097126 9603 8001                  	dc.b	nA1, $03, nRst, $01
0009712A E107                       	smpsAlterNote       $07
0009712C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00097132 E10B                       	smpsAlterNote       $0B
00097134 A203 8001                  	dc.b	nA2, $03, nRst, $01
00097138 E107                       	smpsAlterNote       $07
0009713A 9B03                       	dc.b	nD2, $03
0009713C E11A                       	smpsAlterNote       $1A
0009713E A301                       	dc.b	nBb2, $01
00097140 E1F9                       	smpsAlterNote       $F9
00097142 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00097145 E1FF                       	smpsAlterNote       $FF
00097147 E701                       	dc.b	smpsNoAttack, $01
00097149 E111                       	smpsAlterNote       $11
0009714B E701                       	dc.b	smpsNoAttack, $01
0009714D E106                       	smpsAlterNote       $06
0009714F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00097152 E107                       	smpsAlterNote       $07
00097154 9B03                       	dc.b	nD2, $03
00097156 E108                       	smpsAlterNote       $08
00097158 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0009715E E109                       	smpsAlterNote       $09
00097160 A003                       	dc.b	nG2, $03
00097162 E1F0                       	smpsAlterNote       $F0
00097164 A501                       	dc.b	nC3, $01
00097166 E106                       	smpsAlterNote       $06
00097168 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0009716C E109                       	smpsAlterNote       $09
0009716E A006 8001                  	dc.b	nG2, $06, nRst, $01
00097172 E108                       	smpsAlterNote       $08
00097174 9C03                       	dc.b	nEb2, $03
00097176 E107                       	smpsAlterNote       $07
00097178 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0009717E E10B                       	smpsAlterNote       $0B
00097180 A203 8001                  	dc.b	nA2, $03, nRst, $01
00097184 E107                       	smpsAlterNote       $07
00097186 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009718A E11A                       	smpsAlterNote       $1A
0009718C A301                       	dc.b	nBb2, $01
0009718E E1F9                       	smpsAlterNote       $F9
00097190 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00097193 E107                       	smpsAlterNote       $07
00097195 E701                       	dc.b	smpsNoAttack, $01
00097197 E1FB                       	smpsAlterNote       $FB
00097199 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009719C E106                       	smpsAlterNote       $06
0009719E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000971A2 E107                       	smpsAlterNote       $07
000971A4 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000971AC E1EC                       	smpsAlterNote       $EC
000971AE A101                       	dc.b	nAb2, $01
000971B0 E108                       	smpsAlterNote       $08
000971B2 E701                       	dc.b	smpsNoAttack, $01
000971B4 E1E7                       	smpsAlterNote       $E7
000971B6 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000971B9 E1F5                       	smpsAlterNote       $F5
000971BB E701                       	dc.b	smpsNoAttack, $01
000971BD E10B                       	smpsAlterNote       $0B
000971BF E702                       	dc.b	smpsNoAttack, $02
000971C1 E107                       	smpsAlterNote       $07
000971C3 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000971C9 E106                       	smpsAlterNote       $06
000971CB 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000971D1 E10C                       	smpsAlterNote       $0C
000971D3 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000971DB E109                       	smpsAlterNote       $09
000971DD 9E03                       	dc.b	nF2, $03
000971DF E10C                       	smpsAlterNote       $0C
000971E1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000971E5 E1EA                       	smpsAlterNote       $EA
000971E7 A201                       	dc.b	nA2, $01
000971E9 E106                       	smpsAlterNote       $06
000971EB E701                       	dc.b	smpsNoAttack, $01
000971ED E114                       	smpsAlterNote       $14
000971EF E701                       	dc.b	smpsNoAttack, $01
000971F1 E1F0                       	smpsAlterNote       $F0
000971F3 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000971F6 E10C                       	smpsAlterNote       $0C
000971F8 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00097204 9703                       	dc.b	nBb1, $03
00097206 E116                       	smpsAlterNote       $16
00097208 9C01                       	dc.b	nEb2, $01
0009720A E105                       	smpsAlterNote       $05
0009720C E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0009720F E113                       	smpsAlterNote       $13
00097211 E701                       	dc.b	smpsNoAttack, $01
00097213 E1FF                       	smpsAlterNote       $FF
00097215 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00097218 E109                       	smpsAlterNote       $09
0009721A E703                       	dc.b	smpsNoAttack, $03
0009721C E10C                       	smpsAlterNote       $0C
0009721E 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0009722A 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00097232 E109                       	smpsAlterNote       $09
00097234 9E03                       	dc.b	nF2, $03
00097236 E10C                       	smpsAlterNote       $0C
00097238 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0009723C E1EA                       	smpsAlterNote       $EA
0009723E A201                       	dc.b	nA2, $01
00097240 E106                       	smpsAlterNote       $06
00097242 E701                       	dc.b	smpsNoAttack, $01
00097244 E1E2                       	smpsAlterNote       $E2
00097246 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00097249 E1F0                       	smpsAlterNote       $F0
0009724B E701                       	dc.b	smpsNoAttack, $01
0009724D E10C                       	smpsAlterNote       $0C
0009724F E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0009725B E116                       	smpsAlterNote       $16
0009725D 9C01                       	dc.b	nEb2, $01
0009725F E105                       	smpsAlterNote       $05
00097261 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00097264 E1F1                       	smpsAlterNote       $F1
00097266 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00097269 E1FF                       	smpsAlterNote       $FF
0009726B E701                       	dc.b	smpsNoAttack, $01
0009726D E109                       	smpsAlterNote       $09
0009726F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097273 E10C                       	smpsAlterNote       $0C
00097275 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00097281 E106                       	smpsAlterNote       $06
00097283 9903                       	dc.b	nC2, $03
00097285 E107                       	smpsAlterNote       $07
00097287 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009728B E109                       	smpsAlterNote       $09
0009728D 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00097293 E107                       	smpsAlterNote       $07
00097295 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00097299 E108                       	smpsAlterNote       $08
0009729B 9D03                       	dc.b	nE2, $03
0009729D E10B                       	smpsAlterNote       $0B
0009729F 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
000972A5 E109                       	smpsAlterNote       $09
000972A7 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
000972AD E10C                       	smpsAlterNote       $0C
000972AF 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000972B5 E106                       	smpsAlterNote       $06
000972B7 9903                       	dc.b	nC2, $03
000972B9 E11A                       	smpsAlterNote       $1A
000972BB A301                       	dc.b	nBb2, $01
000972BD E1F9                       	smpsAlterNote       $F9
000972BF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000972C2 E1FF                       	smpsAlterNote       $FF
000972C4 E701                       	dc.b	smpsNoAttack, $01
000972C6 E111                       	smpsAlterNote       $11
000972C8 E701                       	dc.b	smpsNoAttack, $01
000972CA E106                       	smpsAlterNote       $06
000972CC E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
000972D3 E109                       	smpsAlterNote       $09
000972D5 A003                       	dc.b	nG2, $03
000972D7 E106                       	smpsAlterNote       $06
000972D9 9907                       	dc.b	nC2, $07
000972DB E107                       	smpsAlterNote       $07
000972DD 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
000972E5 E10B                       	smpsAlterNote       $0B
000972E7 A203                       	dc.b	nA2, $03
000972E9 E107                       	smpsAlterNote       $07
000972EB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000972EF E1F2                       	smpsAlterNote       $F2
000972F1 A401                       	dc.b	nB2, $01
000972F3 E1F9                       	smpsAlterNote       $F9
000972F5 E701                       	dc.b	smpsNoAttack, $01
000972F7 E107                       	smpsAlterNote       $07
000972F9 E701                       	dc.b	smpsNoAttack, $01
000972FB E1FB                       	smpsAlterNote       $FB
000972FD E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097300 E106                       	smpsAlterNote       $06
00097302 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097306 E107                       	smpsAlterNote       $07
00097308 9B03                       	dc.b	nD2, $03
0009730A E108                       	smpsAlterNote       $08
0009730C 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00097312 E109                       	smpsAlterNote       $09
00097314 A003 8001                  	dc.b	nG2, $03, nRst, $01
00097318 E1F2                       	smpsAlterNote       $F2
0009731A A401                       	dc.b	nB2, $01
0009731C E1F9                       	smpsAlterNote       $F9
0009731E E701                       	dc.b	smpsNoAttack, $01
00097320 E107                       	smpsAlterNote       $07
00097322 E701                       	dc.b	smpsNoAttack, $01
00097324 E1FB                       	smpsAlterNote       $FB
00097326 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097329 E106                       	smpsAlterNote       $06
0009732B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009732F E108                       	smpsAlterNote       $08
00097331 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00097335 E10C                       	smpsAlterNote       $0C
00097337 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0009733B E107                       	smpsAlterNote       $07
0009733D 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00097343 E10B                       	smpsAlterNote       $0B
00097345 A203                       	dc.b	nA2, $03
00097347 E107                       	smpsAlterNote       $07
00097349 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009734D E1F2                       	smpsAlterNote       $F2
0009734F A401                       	dc.b	nB2, $01
00097351 E1FF                       	smpsAlterNote       $FF
00097353 E701                       	dc.b	smpsNoAttack, $01
00097355 E107                       	smpsAlterNote       $07
00097357 E701                       	dc.b	smpsNoAttack, $01
00097359 E1FB                       	smpsAlterNote       $FB
0009735B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009735E E106                       	smpsAlterNote       $06
00097360 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00097364 E107                       	smpsAlterNote       $07
00097366 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009736A E108                       	smpsAlterNote       $08
0009736C 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00097372 E109                       	smpsAlterNote       $09
00097374 A003 8001                  	dc.b	nG2, $03, nRst, $01
00097378 E1F2                       	smpsAlterNote       $F2
0009737A A401                       	dc.b	nB2, $01
0009737C E1FF                       	smpsAlterNote       $FF
0009737E E701                       	dc.b	smpsNoAttack, $01
00097380 E111                       	smpsAlterNote       $11
00097382 E701                       	dc.b	smpsNoAttack, $01
00097384 E1FB                       	smpsAlterNote       $FB
00097386 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00097389 E106                       	smpsAlterNote       $06
0009738B E702                       	dc.b	smpsNoAttack, $02
0009738D E108                       	smpsAlterNote       $08
0009738F 9C07                       	dc.b	nEb2, $07
00097391 E10C                       	smpsAlterNote       $0C
00097393 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00097397 E107                       	smpsAlterNote       $07
00097399 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0009739F E10B                       	smpsAlterNote       $0B
000973A1 A202 8001                  	dc.b	nA2, $02, nRst, $01
000973A5 E107                       	smpsAlterNote       $07
000973A7 9B03                       	dc.b	nD2, $03
000973A9 E11A                       	smpsAlterNote       $1A
000973AB A301                       	dc.b	nBb2, $01
000973AD E1F2                       	smpsAlterNote       $F2
000973AF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000973B2 E1FF                       	smpsAlterNote       $FF
000973B4 E701                       	dc.b	smpsNoAttack, $01
000973B6 E111                       	smpsAlterNote       $11
000973B8 E701                       	dc.b	smpsNoAttack, $01
000973BA E106                       	smpsAlterNote       $06
000973BC E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000973BF E107                       	smpsAlterNote       $07
000973C1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000973C5 E108                       	smpsAlterNote       $08
000973C7 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000973CF E109                       	smpsAlterNote       $09
000973D1 A003                       	dc.b	nG2, $03
000973D3 E11A                       	smpsAlterNote       $1A
000973D5 A301                       	dc.b	nBb2, $01
000973D7 E1F2                       	smpsAlterNote       $F2
000973D9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000973DC E1FF                       	smpsAlterNote       $FF
000973DE E701                       	dc.b	smpsNoAttack, $01
000973E0 E111                       	smpsAlterNote       $11
000973E2 E701                       	dc.b	smpsNoAttack, $01
000973E4 E106                       	smpsAlterNote       $06
000973E6 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000973E9 E108                       	smpsAlterNote       $08
000973EB 9C07                       	dc.b	nEb2, $07
000973ED E10C                       	smpsAlterNote       $0C
000973EF A303 8001                  	dc.b	nBb2, $03, nRst, $01
000973F3 E107                       	smpsAlterNote       $07
000973F5 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00097401 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0009740B E108                       	smpsAlterNote       $08
0009740D 9C06                       	dc.b	nEb2, $06
0009740F E10C                       	smpsAlterNote       $0C
00097411 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00097415 E108                       	smpsAlterNote       $08
00097417 9C03                       	dc.b	nEb2, $03
00097419 E109                       	smpsAlterNote       $09
0009741B A003 8001                  	dc.b	nG2, $03, nRst, $01
0009741F E10C                       	smpsAlterNote       $0C
00097421 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00097429 E107                       	smpsAlterNote       $07
0009742B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009742F F6F4 F8                    	smpsJump            music84_Jump04
00097432                            
00097432                            ; FM2 Data
00097432                            music84_FM2:
00097432 E0C0                       	smpsPan             panCenter, $00
00097436 E10B                       	smpsAlterNote       $0B
00097438 C603 8007                  	dc.b	nA5, $03, nRst, $07
0009743C E109                       	smpsAlterNote       $09
0009743E C403 800B                  	dc.b	nG5, $03, nRst, $0B
00097442 E108                       	smpsAlterNote       $08
00097444 C103 8004                  	dc.b	nE5, $03, nRst, $04
0009744A E080                       	smpsPan             panLeft, $00
0009744C E10C                       	smpsAlterNote       $0C
0009744E E6F9                       	smpsAlterVol        $F9
00097450 C703                       	dc.b	nBb5, $03
00097452 E10B                       	smpsAlterNote       $0B
00097454 C603 8001                  	dc.b	nA5, $03, nRst, $01
00097458 E109                       	smpsAlterNote       $09
0009745A C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00097460 E108                       	smpsAlterNote       $08
00097462 C103 8001                  	dc.b	nE5, $03, nRst, $01
00097466 E106                       	smpsAlterNote       $06
00097468 BD03                       	dc.b	nC5, $03
0009746A E10B                       	smpsAlterNote       $0B
0009746C BA03 8001                  	dc.b	nA4, $03, nRst, $01
00097472 E0C0                       	smpsPan             panCenter, $00
00097474 E107                       	smpsAlterNote       $07
00097476 E606                       	smpsAlterVol        $06
00097478 BF03                       	dc.b	nD5, $03
0009747A                            
0009747A                            music84_Jump03:
0009747A E108                       	smpsAlterNote       $08
0009747C C103 8001                  	dc.b	nE5, $03, nRst, $01
00097480 E109                       	smpsAlterNote       $09
00097482 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00097488 E10B                       	smpsAlterNote       $0B
0009748A C607                       	dc.b	nA5, $07
0009748C E107                       	smpsAlterNote       $07
0009748E BF03 8001                  	dc.b	nD5, $03, nRst, $01
00097492 E106                       	smpsAlterNote       $06
00097494 C90D                       	dc.b	nC6, $0D
00097496 E100                       	smpsAlterNote       $00
00097498 E701                       	dc.b	smpsNoAttack, $01
0009749A E1FF                       	smpsAlterNote       $FF
0009749C E701                       	dc.b	smpsNoAttack, $01
0009749E E103                       	smpsAlterNote       $03
000974A0 E701                       	dc.b	smpsNoAttack, $01
000974A2 E109                       	smpsAlterNote       $09
000974A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974A8 E106                       	smpsAlterNote       $06
000974AA E701                       	dc.b	smpsNoAttack, $01
000974AC E100                       	smpsAlterNote       $00
000974AE E701                       	dc.b	smpsNoAttack, $01
000974B0 E10C                       	smpsAlterNote       $0C
000974B2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000974B6 E10B                       	smpsAlterNote       $0B
000974B8 C603                       	dc.b	nA5, $03
000974BA E109                       	smpsAlterNote       $09
000974BC C403 8001                  	dc.b	nG5, $03, nRst, $01
000974C0 E10B                       	smpsAlterNote       $0B
000974C2 C60D                       	dc.b	nA5, $0D
000974C4 E105                       	smpsAlterNote       $05
000974C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974CA E10B                       	smpsAlterNote       $0B
000974CC E701                       	dc.b	smpsNoAttack, $01
000974CE E10E                       	smpsAlterNote       $0E
000974D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974D4 E108                       	smpsAlterNote       $08
000974D6 E701                       	dc.b	smpsNoAttack, $01
000974D8 E104                       	smpsAlterNote       $04
000974DA E701                       	dc.b	smpsNoAttack, $01
000974DC E105                       	smpsAlterNote       $05
000974DE E701                       	dc.b	smpsNoAttack, $01
000974E0 E10B                       	smpsAlterNote       $0B
000974E2 E701                       	dc.b	smpsNoAttack, $01
000974E4 E10F                       	smpsAlterNote       $0F
000974E6 E701                       	dc.b	smpsNoAttack, $01
000974E8 E10B                       	smpsAlterNote       $0B
000974EA E701                       	dc.b	smpsNoAttack, $01
000974EC E108                       	smpsAlterNote       $08
000974EE E701                       	dc.b	smpsNoAttack, $01
000974F0 E104                       	smpsAlterNote       $04
000974F2 E701                       	dc.b	smpsNoAttack, $01
000974F4 E108                       	smpsAlterNote       $08
000974F6 E701                       	dc.b	smpsNoAttack, $01
000974F8 E10E                       	smpsAlterNote       $0E
000974FA E701                       	dc.b	smpsNoAttack, $01
000974FC E10F                       	smpsAlterNote       $0F
000974FE E701                       	dc.b	smpsNoAttack, $01
00097500 E10B                       	smpsAlterNote       $0B
00097502 E701                       	dc.b	smpsNoAttack, $01
00097504 E105                       	smpsAlterNote       $05
00097506 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009750A E108                       	smpsAlterNote       $08
0009750C E701                       	dc.b	smpsNoAttack, $01
0009750E E10E                       	smpsAlterNote       $0E
00097510 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097514 E108                       	smpsAlterNote       $08
00097516 E701                       	dc.b	smpsNoAttack, $01
00097518 E105                       	smpsAlterNote       $05
0009751A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009751E E10B                       	smpsAlterNote       $0B
00097520 E701                       	dc.b	smpsNoAttack, $01
00097522 E10F                       	smpsAlterNote       $0F
00097524 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00097528 E107                       	smpsAlterNote       $07
0009752A BF03 8001                  	dc.b	nD5, $03, nRst, $01
0009752E E108                       	smpsAlterNote       $08
00097530 C103                       	dc.b	nE5, $03
00097532 E109                       	smpsAlterNote       $09
00097534 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0009753C E10B                       	smpsAlterNote       $0B
0009753E C606 8001                  	dc.b	nA5, $06, nRst, $01
00097542 E107                       	smpsAlterNote       $07
00097544 BF03                       	dc.b	nD5, $03
00097546 E106                       	smpsAlterNote       $06
00097548 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0009754C E107                       	smpsAlterNote       $07
0009754E CB03                       	dc.b	nD6, $03
00097550 E10C                       	smpsAlterNote       $0C
00097552 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00097556 E10B                       	smpsAlterNote       $0B
00097558 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009755C E109                       	smpsAlterNote       $09
0009755E C404                       	dc.b	nG5, $04
00097560 E10B                       	smpsAlterNote       $0B
00097562 C60D                       	dc.b	nA5, $0D
00097564 E108                       	smpsAlterNote       $08
00097566 E701                       	dc.b	smpsNoAttack, $01
00097568 E104                       	smpsAlterNote       $04
0009756A E701                       	dc.b	smpsNoAttack, $01
0009756C E108                       	smpsAlterNote       $08
0009756E E701                       	dc.b	smpsNoAttack, $01
00097570 E10B                       	smpsAlterNote       $0B
00097572 E701                       	dc.b	smpsNoAttack, $01
00097574 E10F                       	smpsAlterNote       $0F
00097576 E701                       	dc.b	smpsNoAttack, $01
00097578 E10B                       	smpsAlterNote       $0B
0009757A E701                       	dc.b	smpsNoAttack, $01
0009757C E105                       	smpsAlterNote       $05
0009757E E701                       	dc.b	smpsNoAttack, $01
00097580 E104                       	smpsAlterNote       $04
00097582 E701                       	dc.b	smpsNoAttack, $01
00097584 E108                       	smpsAlterNote       $08
00097586 E701                       	dc.b	smpsNoAttack, $01
00097588 E10E                       	smpsAlterNote       $0E
0009758A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009758E E10B                       	smpsAlterNote       $0B
00097590 E701                       	dc.b	smpsNoAttack, $01
00097592 E105                       	smpsAlterNote       $05
00097594 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097598 E10B                       	smpsAlterNote       $0B
0009759A E701                       	dc.b	smpsNoAttack, $01
0009759C E10E                       	smpsAlterNote       $0E
0009759E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975A2 E108                       	smpsAlterNote       $08
000975A4 E701                       	dc.b	smpsNoAttack, $01
000975A6 E104                       	smpsAlterNote       $04
000975A8 E701                       	dc.b	smpsNoAttack, $01
000975AA E105                       	smpsAlterNote       $05
000975AC E701                       	dc.b	smpsNoAttack, $01
000975AE E10B                       	smpsAlterNote       $0B
000975B0 E701                       	dc.b	smpsNoAttack, $01
000975B2 E10F                       	smpsAlterNote       $0F
000975B4 E701                       	dc.b	smpsNoAttack, $01
000975B6 E10B                       	smpsAlterNote       $0B
000975B8 E701                       	dc.b	smpsNoAttack, $01
000975BA E108                       	smpsAlterNote       $08
000975BC E701                       	dc.b	smpsNoAttack, $01
000975BE E105                       	smpsAlterNote       $05
000975C0 8001                       	dc.b	nRst, $01
000975C2 E109                       	smpsAlterNote       $09
000975C4 C401                       	dc.b	nG5, $01
000975C6 E10B                       	smpsAlterNote       $0B
000975C8 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000975D1 E109                       	smpsAlterNote       $09
000975D3 C404 8001                  	dc.b	nG5, $04, nRst, $01
000975D7 E10B                       	smpsAlterNote       $0B
000975D9 C604 8001                  	dc.b	nA5, $04, nRst, $01
000975DD E107                       	smpsAlterNote       $07
000975DF BF0D                       	dc.b	nD5, $0D
000975E1 E101                       	smpsAlterNote       $01
000975E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975E7 E104                       	smpsAlterNote       $04
000975E9 E701                       	dc.b	smpsNoAttack, $01
000975EB E10A                       	smpsAlterNote       $0A
000975ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975F1 E104                       	smpsAlterNote       $04
000975F3 E701                       	dc.b	smpsNoAttack, $01
000975F5 E101                       	smpsAlterNote       $01
000975F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975FB E107                       	smpsAlterNote       $07
000975FD E701                       	dc.b	smpsNoAttack, $01
000975FF E10B                       	smpsAlterNote       $0B
00097601 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097605 E108                       	smpsAlterNote       $08
00097607 C101                       	dc.b	nE5, $01
00097609 E109                       	smpsAlterNote       $09
0009760B E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00097610 E10B                       	smpsAlterNote       $0B
00097612 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0009761A E108                       	smpsAlterNote       $08
0009761C CD06                       	dc.b	nE6, $06
0009761E E109                       	smpsAlterNote       $09
00097620 CE07                       	dc.b	nF6, $07
00097622 E108                       	smpsAlterNote       $08
00097624 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00097628 E106                       	smpsAlterNote       $06
0009762A C903                       	dc.b	nC6, $03
0009762C E109                       	smpsAlterNote       $09
0009762E C403 8001                  	dc.b	nG5, $03, nRst, $01
00097632 E10C                       	smpsAlterNote       $0C
00097634 C70D                       	dc.b	nBb5, $0D
00097636 E106                       	smpsAlterNote       $06
00097638 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009763C E109                       	smpsAlterNote       $09
0009763E E701                       	dc.b	smpsNoAttack, $01
00097640 E10F                       	smpsAlterNote       $0F
00097642 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097646 E109                       	smpsAlterNote       $09
00097648 E701                       	dc.b	smpsNoAttack, $01
0009764A E106                       	smpsAlterNote       $06
0009764C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097650 E10C                       	smpsAlterNote       $0C
00097652 E701                       	dc.b	smpsNoAttack, $01
00097654 E110                       	smpsAlterNote       $10
00097656 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009765A E10B                       	smpsAlterNote       $0B
0009765C C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00097660 E105                       	smpsAlterNote       $05
00097662 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097666 E10B                       	smpsAlterNote       $0B
00097668 E701                       	dc.b	smpsNoAttack, $01
0009766A E10E                       	smpsAlterNote       $0E
0009766C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097670 E108                       	smpsAlterNote       $08
00097672 E701                       	dc.b	smpsNoAttack, $01
00097674 E104                       	smpsAlterNote       $04
00097676 E701                       	dc.b	smpsNoAttack, $01
00097678 E105                       	smpsAlterNote       $05
0009767A E701                       	dc.b	smpsNoAttack, $01
0009767C E10B                       	smpsAlterNote       $0B
0009767E E701                       	dc.b	smpsNoAttack, $01
00097680 E10F                       	smpsAlterNote       $0F
00097682 E701                       	dc.b	smpsNoAttack, $01
00097684 E10B                       	smpsAlterNote       $0B
00097686 E701                       	dc.b	smpsNoAttack, $01
00097688 E108                       	smpsAlterNote       $08
0009768A E701                       	dc.b	smpsNoAttack, $01
0009768C E104                       	smpsAlterNote       $04
0009768E E701                       	dc.b	smpsNoAttack, $01
00097690 E108                       	smpsAlterNote       $08
00097692 E701                       	dc.b	smpsNoAttack, $01
00097694 E10E                       	smpsAlterNote       $0E
00097696 E701                       	dc.b	smpsNoAttack, $01
00097698 E10F                       	smpsAlterNote       $0F
0009769A E701                       	dc.b	smpsNoAttack, $01
0009769C E10B                       	smpsAlterNote       $0B
0009769E E701                       	dc.b	smpsNoAttack, $01
000976A0 E105                       	smpsAlterNote       $05
000976A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976A6 E108                       	smpsAlterNote       $08
000976A8 E701                       	dc.b	smpsNoAttack, $01
000976AA E10E                       	smpsAlterNote       $0E
000976AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976B0 E108                       	smpsAlterNote       $08
000976B2 E701                       	dc.b	smpsNoAttack, $01
000976B4 E105                       	smpsAlterNote       $05
000976B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976BA E10B                       	smpsAlterNote       $0B
000976BC E701                       	dc.b	smpsNoAttack, $01
000976BE E10F                       	smpsAlterNote       $0F
000976C0 E701                       	dc.b	smpsNoAttack, $01
000976C2 E10E                       	smpsAlterNote       $0E
000976C4 E701                       	dc.b	smpsNoAttack, $01
000976C6 E108                       	smpsAlterNote       $08
000976C8 E701                       	dc.b	smpsNoAttack, $01
000976CA E104                       	smpsAlterNote       $04
000976CC E701                       	dc.b	smpsNoAttack, $01
000976CE E108                       	smpsAlterNote       $08
000976D0 E701                       	dc.b	smpsNoAttack, $01
000976D2 E10E                       	smpsAlterNote       $0E
000976D4 E701                       	dc.b	smpsNoAttack, $01
000976D6 E10F                       	smpsAlterNote       $0F
000976D8 E701                       	dc.b	smpsNoAttack, $01
000976DA E10B                       	smpsAlterNote       $0B
000976DC E701                       	dc.b	smpsNoAttack, $01
000976DE E105                       	smpsAlterNote       $05
000976E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976E4 E108                       	smpsAlterNote       $08
000976E6 E701                       	dc.b	smpsNoAttack, $01
000976E8 E10E                       	smpsAlterNote       $0E
000976EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976EE E108                       	smpsAlterNote       $08
000976F0 E701                       	dc.b	smpsNoAttack, $01
000976F2 E105                       	smpsAlterNote       $05
000976F4 E701                       	dc.b	smpsNoAttack, $01
000976F6 E10B                       	smpsAlterNote       $0B
000976F8 C60D                       	dc.b	nA5, $0D
000976FA E108                       	smpsAlterNote       $08
000976FC E701                       	dc.b	smpsNoAttack, $01
000976FE E104                       	smpsAlterNote       $04
00097700 E701                       	dc.b	smpsNoAttack, $01
00097702 E105                       	smpsAlterNote       $05
00097704 E701                       	dc.b	smpsNoAttack, $01
00097706 E10B                       	smpsAlterNote       $0B
00097708 E701                       	dc.b	smpsNoAttack, $01
0009770A E10F                       	smpsAlterNote       $0F
0009770C E701                       	dc.b	smpsNoAttack, $01
0009770E E10B                       	smpsAlterNote       $0B
00097710 E701                       	dc.b	smpsNoAttack, $01
00097712 E108                       	smpsAlterNote       $08
00097714 E701                       	dc.b	smpsNoAttack, $01
00097716 E104                       	smpsAlterNote       $04
00097718 E701                       	dc.b	smpsNoAttack, $01
0009771A E108                       	smpsAlterNote       $08
0009771C E701                       	dc.b	smpsNoAttack, $01
0009771E E10E                       	smpsAlterNote       $0E
00097720 E701                       	dc.b	smpsNoAttack, $01
00097722 E10F                       	smpsAlterNote       $0F
00097724 E701                       	dc.b	smpsNoAttack, $01
00097728 E109                       	smpsAlterNote       $09
0009772A E6FF                       	smpsAlterVol        $FF
0009772C C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00097736 E108                       	smpsAlterNote       $08
00097738 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0009773E E107                       	smpsAlterNote       $07
00097740 E601                       	smpsAlterVol        $01
00097742 BF03                       	dc.b	nD5, $03
00097744 E108                       	smpsAlterNote       $08
00097746 C103 8001                  	dc.b	nE5, $03, nRst, $01
0009774A E109                       	smpsAlterNote       $09
0009774C C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00097752 E10B                       	smpsAlterNote       $0B
00097754 C606 8001                  	dc.b	nA5, $06, nRst, $01
00097758 E107                       	smpsAlterNote       $07
0009775A BF02 8001                  	dc.b	nD5, $02, nRst, $01
0009775E E106                       	smpsAlterNote       $06
00097760 C90D                       	dc.b	nC6, $0D
00097762 E103                       	smpsAlterNote       $03
00097764 E701                       	dc.b	smpsNoAttack, $01
00097766 E1FF                       	smpsAlterNote       $FF
00097768 E701                       	dc.b	smpsNoAttack, $01
0009776A E103                       	smpsAlterNote       $03
0009776C E701                       	dc.b	smpsNoAttack, $01
0009776E E109                       	smpsAlterNote       $09
00097770 E701                       	dc.b	smpsNoAttack, $01
00097772 E10A                       	smpsAlterNote       $0A
00097774 E701                       	dc.b	smpsNoAttack, $01
00097776 E106                       	smpsAlterNote       $06
00097778 E701                       	dc.b	smpsNoAttack, $01
0009777A E100                       	smpsAlterNote       $00
0009777C E701                       	dc.b	smpsNoAttack, $01
0009777E E10C                       	smpsAlterNote       $0C
00097780 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00097784 E10B                       	smpsAlterNote       $0B
00097786 C603                       	dc.b	nA5, $03
00097788 E109                       	smpsAlterNote       $09
0009778A C403 8001                  	dc.b	nG5, $03, nRst, $01
0009778E E10B                       	smpsAlterNote       $0B
00097790 C60D                       	dc.b	nA5, $0D
00097792 E105                       	smpsAlterNote       $05
00097794 E701                       	dc.b	smpsNoAttack, $01
00097796 E104                       	smpsAlterNote       $04
00097798 E701                       	dc.b	smpsNoAttack, $01
0009779A E108                       	smpsAlterNote       $08
0009779C E701                       	dc.b	smpsNoAttack, $01
0009779E E10E                       	smpsAlterNote       $0E
000977A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977A4 E10B                       	smpsAlterNote       $0B
000977A6 E701                       	dc.b	smpsNoAttack, $01
000977A8 E105                       	smpsAlterNote       $05
000977AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977AE E10B                       	smpsAlterNote       $0B
000977B0 E701                       	dc.b	smpsNoAttack, $01
000977B2 E10E                       	smpsAlterNote       $0E
000977B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977B8 E108                       	smpsAlterNote       $08
000977BA E701                       	dc.b	smpsNoAttack, $01
000977BC E104                       	smpsAlterNote       $04
000977BE E701                       	dc.b	smpsNoAttack, $01
000977C0 E105                       	smpsAlterNote       $05
000977C2 E701                       	dc.b	smpsNoAttack, $01
000977C4 E10B                       	smpsAlterNote       $0B
000977C6 E701                       	dc.b	smpsNoAttack, $01
000977C8 E10F                       	smpsAlterNote       $0F
000977CA E701                       	dc.b	smpsNoAttack, $01
000977CC E10B                       	smpsAlterNote       $0B
000977CE E701                       	dc.b	smpsNoAttack, $01
000977D0 E108                       	smpsAlterNote       $08
000977D2 E701                       	dc.b	smpsNoAttack, $01
000977D4 E104                       	smpsAlterNote       $04
000977D6 E701                       	dc.b	smpsNoAttack, $01
000977D8 E108                       	smpsAlterNote       $08
000977DA E701                       	dc.b	smpsNoAttack, $01
000977DC E10E                       	smpsAlterNote       $0E
000977DE E701                       	dc.b	smpsNoAttack, $01
000977E0 E10F                       	smpsAlterNote       $0F
000977E2 E701                       	dc.b	smpsNoAttack, $01
000977E4 E10B                       	smpsAlterNote       $0B
000977E6 E701                       	dc.b	smpsNoAttack, $01
000977E8 E105                       	smpsAlterNote       $05
000977EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000977EE E108                       	smpsAlterNote       $08
000977F0 E701                       	dc.b	smpsNoAttack, $01
000977F2 E10E                       	smpsAlterNote       $0E
000977F4 E701                       	dc.b	smpsNoAttack, $01
000977F6 E10F                       	smpsAlterNote       $0F
000977F8 800F                       	dc.b	nRst, $0F
000977FA E107                       	smpsAlterNote       $07
000977FC BF02 8001                  	dc.b	nD5, $02, nRst, $01
00097800 E108                       	smpsAlterNote       $08
00097802 C103                       	dc.b	nE5, $03
00097804 E109                       	smpsAlterNote       $09
00097806 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0009780C E10B                       	smpsAlterNote       $0B
0009780E C606 8001                  	dc.b	nA5, $06, nRst, $01
00097812 E107                       	smpsAlterNote       $07
00097814 BF03                       	dc.b	nD5, $03
00097816 E106                       	smpsAlterNote       $06
00097818 C90E                       	dc.b	nC6, $0E
0009781A E107                       	smpsAlterNote       $07
0009781C CB03 8001                  	dc.b	nD6, $03, nRst, $01
00097820 E10C                       	smpsAlterNote       $0C
00097822 C704                       	dc.b	nBb5, $04
00097824 E10B                       	smpsAlterNote       $0B
00097826 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009782A E109                       	smpsAlterNote       $09
0009782C C404                       	dc.b	nG5, $04
0009782E E10B                       	smpsAlterNote       $0B
00097830 C60D                       	dc.b	nA5, $0D
00097832 E108                       	smpsAlterNote       $08
00097834 E701                       	dc.b	smpsNoAttack, $01
00097836 E105                       	smpsAlterNote       $05
00097838 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009783C E10B                       	smpsAlterNote       $0B
0009783E E701                       	dc.b	smpsNoAttack, $01
00097840 E10F                       	smpsAlterNote       $0F
00097842 E701                       	dc.b	smpsNoAttack, $01
00097844 E10E                       	smpsAlterNote       $0E
00097846 E701                       	dc.b	smpsNoAttack, $01
00097848 E108                       	smpsAlterNote       $08
0009784A E701                       	dc.b	smpsNoAttack, $01
0009784C E104                       	smpsAlterNote       $04
0009784E E701                       	dc.b	smpsNoAttack, $01
00097850 E108                       	smpsAlterNote       $08
00097852 E701                       	dc.b	smpsNoAttack, $01
00097854 E10B                       	smpsAlterNote       $0B
00097856 E701                       	dc.b	smpsNoAttack, $01
00097858 E10F                       	smpsAlterNote       $0F
0009785A E701                       	dc.b	smpsNoAttack, $01
0009785C E10B                       	smpsAlterNote       $0B
0009785E E701                       	dc.b	smpsNoAttack, $01
00097860 E105                       	smpsAlterNote       $05
00097862 E701                       	dc.b	smpsNoAttack, $01
00097864 E104                       	smpsAlterNote       $04
00097866 E701                       	dc.b	smpsNoAttack, $01
00097868 E108                       	smpsAlterNote       $08
0009786A E701                       	dc.b	smpsNoAttack, $01
0009786C E10E                       	smpsAlterNote       $0E
0009786E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097872 E10B                       	smpsAlterNote       $0B
00097874 E701                       	dc.b	smpsNoAttack, $01
00097876 E105                       	smpsAlterNote       $05
00097878 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009787C E10B                       	smpsAlterNote       $0B
0009787E E701                       	dc.b	smpsNoAttack, $01
00097880 E10E                       	smpsAlterNote       $0E
00097882 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097886 E108                       	smpsAlterNote       $08
00097888 E701                       	dc.b	smpsNoAttack, $01
0009788A E105                       	smpsAlterNote       $05
0009788C 8001                       	dc.b	nRst, $01
0009788E E109                       	smpsAlterNote       $09
00097890 C402                       	dc.b	nG5, $02
00097892 E10B                       	smpsAlterNote       $0B
00097894 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0009789D E109                       	smpsAlterNote       $09
0009789F C404                       	dc.b	nG5, $04
000978A1 E10B                       	smpsAlterNote       $0B
000978A3 C604 8001                  	dc.b	nA5, $04, nRst, $01
000978A7 E107                       	smpsAlterNote       $07
000978A9 BF0D                       	dc.b	nD5, $0D
000978AB E101                       	smpsAlterNote       $01
000978AD E701                       	dc.b	smpsNoAttack, $01
000978AF E100                       	smpsAlterNote       $00
000978B1 E701                       	dc.b	smpsNoAttack, $01
000978B3 E104                       	smpsAlterNote       $04
000978B5 E701                       	dc.b	smpsNoAttack, $01
000978B7 E10A                       	smpsAlterNote       $0A
000978B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978BD E107                       	smpsAlterNote       $07
000978BF E701                       	dc.b	smpsNoAttack, $01
000978C1 E101                       	smpsAlterNote       $01
000978C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978C7 E107                       	smpsAlterNote       $07
000978C9 E701                       	dc.b	smpsNoAttack, $01
000978CB E10A                       	smpsAlterNote       $0A
000978CD E701                       	dc.b	smpsNoAttack, $01
000978CF E10B                       	smpsAlterNote       $0B
000978D1 8001                       	dc.b	nRst, $01
000978D3 E108                       	smpsAlterNote       $08
000978D5 C101                       	dc.b	nE5, $01
000978D7 E109                       	smpsAlterNote       $09
000978D9 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000978DE E10B                       	smpsAlterNote       $0B
000978E0 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000978E8 E108                       	smpsAlterNote       $08
000978EA CD06 8001                  	dc.b	nE6, $06, nRst, $01
000978EE E109                       	smpsAlterNote       $09
000978F0 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000978F4 E108                       	smpsAlterNote       $08
000978F6 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000978FA E106                       	smpsAlterNote       $06
000978FC C903                       	dc.b	nC6, $03
000978FE E109                       	smpsAlterNote       $09
00097900 C403 8001                  	dc.b	nG5, $03, nRst, $01
00097904 E10C                       	smpsAlterNote       $0C
00097906 C70D                       	dc.b	nBb5, $0D
00097908 E109                       	smpsAlterNote       $09
0009790A E701                       	dc.b	smpsNoAttack, $01
0009790C E105                       	smpsAlterNote       $05
0009790E E701                       	dc.b	smpsNoAttack, $01
00097910 E109                       	smpsAlterNote       $09
00097912 E701                       	dc.b	smpsNoAttack, $01
00097914 E10F                       	smpsAlterNote       $0F
00097916 E701                       	dc.b	smpsNoAttack, $01
00097918 E110                       	smpsAlterNote       $10
0009791A E701                       	dc.b	smpsNoAttack, $01
0009791C E10C                       	smpsAlterNote       $0C
0009791E E701                       	dc.b	smpsNoAttack, $01
00097920 E106                       	smpsAlterNote       $06
00097922 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097926 E109                       	smpsAlterNote       $09
00097928 E701                       	dc.b	smpsNoAttack, $01
0009792A E10F                       	smpsAlterNote       $0F
0009792C E701                       	dc.b	smpsNoAttack, $01
0009792E E110                       	smpsAlterNote       $10
00097930 8001                       	dc.b	nRst, $01
00097932 E10B                       	smpsAlterNote       $0B
00097934 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0009793A E105                       	smpsAlterNote       $05
0009793C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097940 E108                       	smpsAlterNote       $08
00097942 E701                       	dc.b	smpsNoAttack, $01
00097944 E10E                       	smpsAlterNote       $0E
00097946 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009794A E108                       	smpsAlterNote       $08
0009794C E701                       	dc.b	smpsNoAttack, $01
0009794E E105                       	smpsAlterNote       $05
00097950 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097954 E10B                       	smpsAlterNote       $0B
00097956 E701                       	dc.b	smpsNoAttack, $01
00097958 E10F                       	smpsAlterNote       $0F
0009795A E701                       	dc.b	smpsNoAttack, $01
0009795C E10E                       	smpsAlterNote       $0E
0009795E E701                       	dc.b	smpsNoAttack, $01
00097960 E108                       	smpsAlterNote       $08
00097962 E701                       	dc.b	smpsNoAttack, $01
00097964 E104                       	smpsAlterNote       $04
00097966 E701                       	dc.b	smpsNoAttack, $01
00097968 E108                       	smpsAlterNote       $08
0009796A E701                       	dc.b	smpsNoAttack, $01
0009796C E10B                       	smpsAlterNote       $0B
0009796E E701                       	dc.b	smpsNoAttack, $01
00097970 E10F                       	smpsAlterNote       $0F
00097972 E701                       	dc.b	smpsNoAttack, $01
00097974 E10B                       	smpsAlterNote       $0B
00097976 E701                       	dc.b	smpsNoAttack, $01
00097978 E105                       	smpsAlterNote       $05
0009797A E701                       	dc.b	smpsNoAttack, $01
0009797C E104                       	smpsAlterNote       $04
0009797E E701                       	dc.b	smpsNoAttack, $01
00097980 E108                       	smpsAlterNote       $08
00097982 E701                       	dc.b	smpsNoAttack, $01
00097984 E10E                       	smpsAlterNote       $0E
00097986 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009798A E10B                       	smpsAlterNote       $0B
0009798C E701                       	dc.b	smpsNoAttack, $01
0009798E E105                       	smpsAlterNote       $05
00097990 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097994 E10B                       	smpsAlterNote       $0B
00097996 E701                       	dc.b	smpsNoAttack, $01
00097998 E10E                       	smpsAlterNote       $0E
0009799A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009799E E108                       	smpsAlterNote       $08
000979A0 E701                       	dc.b	smpsNoAttack, $01
000979A2 E104                       	smpsAlterNote       $04
000979A4 E701                       	dc.b	smpsNoAttack, $01
000979A6 E105                       	smpsAlterNote       $05
000979A8 E701                       	dc.b	smpsNoAttack, $01
000979AA E10B                       	smpsAlterNote       $0B
000979AC E701                       	dc.b	smpsNoAttack, $01
000979AE E10F                       	smpsAlterNote       $0F
000979B0 E701                       	dc.b	smpsNoAttack, $01
000979B2 E10B                       	smpsAlterNote       $0B
000979B4 E701                       	dc.b	smpsNoAttack, $01
000979B6 E108                       	smpsAlterNote       $08
000979B8 E701                       	dc.b	smpsNoAttack, $01
000979BA E104                       	smpsAlterNote       $04
000979BC E701                       	dc.b	smpsNoAttack, $01
000979BE E108                       	smpsAlterNote       $08
000979C0 E701                       	dc.b	smpsNoAttack, $01
000979C2 E10E                       	smpsAlterNote       $0E
000979C4 E701                       	dc.b	smpsNoAttack, $01
000979C6 E10F                       	smpsAlterNote       $0F
000979C8 E701                       	dc.b	smpsNoAttack, $01
000979CA E10B                       	smpsAlterNote       $0B
000979CC E701                       	dc.b	smpsNoAttack, $01
000979CE E105                       	smpsAlterNote       $05
000979D0 E701                       	dc.b	smpsNoAttack, $01
000979D2 E10B                       	smpsAlterNote       $0B
000979D4 C60E                       	dc.b	nA5, $0E
000979D6 E105                       	smpsAlterNote       $05
000979D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000979DC E10B                       	smpsAlterNote       $0B
000979DE E701                       	dc.b	smpsNoAttack, $01
000979E0 E10E                       	smpsAlterNote       $0E
000979E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000979E6 E108                       	smpsAlterNote       $08
000979E8 E701                       	dc.b	smpsNoAttack, $01
000979EA E104                       	smpsAlterNote       $04
000979EC E701                       	dc.b	smpsNoAttack, $01
000979EE E105                       	smpsAlterNote       $05
000979F0 E701                       	dc.b	smpsNoAttack, $01
000979F2 E10B                       	smpsAlterNote       $0B
000979F4 E701                       	dc.b	smpsNoAttack, $01
000979F6 E10F                       	smpsAlterNote       $0F
000979F8 E701                       	dc.b	smpsNoAttack, $01
000979FA E10B                       	smpsAlterNote       $0B
000979FC E701                       	dc.b	smpsNoAttack, $01
000979FE E108                       	smpsAlterNote       $08
00097A00 E701                       	dc.b	smpsNoAttack, $01
00097A02 E104                       	smpsAlterNote       $04
00097A04 E701                       	dc.b	smpsNoAttack, $01
00097A06 E108                       	smpsAlterNote       $08
00097A08 E701                       	dc.b	smpsNoAttack, $01
00097A0A E10E                       	smpsAlterNote       $0E
00097A0C E701                       	dc.b	smpsNoAttack, $01
00097A0E E10F                       	smpsAlterNote       $0F
00097A10 E701                       	dc.b	smpsNoAttack, $01
00097A12 E10B                       	smpsAlterNote       $0B
00097A14 E701                       	dc.b	smpsNoAttack, $01
00097A16 E105                       	smpsAlterNote       $05
00097A18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A1C E108                       	smpsAlterNote       $08
00097A1E E701                       	dc.b	smpsNoAttack, $01
00097A20 E10E                       	smpsAlterNote       $0E
00097A22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A26 E108                       	smpsAlterNote       $08
00097A28 E701                       	dc.b	smpsNoAttack, $01
00097A2A E105                       	smpsAlterNote       $05
00097A2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A30 E10B                       	smpsAlterNote       $0B
00097A32 E701                       	dc.b	smpsNoAttack, $01
00097A34 E10F                       	smpsAlterNote       $0F
00097A36 E701                       	dc.b	smpsNoAttack, $01
00097A38 E10E                       	smpsAlterNote       $0E
00097A3A E701                       	dc.b	smpsNoAttack, $01
00097A3C E108                       	smpsAlterNote       $08
00097A3E E701                       	dc.b	smpsNoAttack, $01
00097A40 E104                       	smpsAlterNote       $04
00097A42 E701                       	dc.b	smpsNoAttack, $01
00097A44 E108                       	smpsAlterNote       $08
00097A46 E701                       	dc.b	smpsNoAttack, $01
00097A48 E10E                       	smpsAlterNote       $0E
00097A4A E701                       	dc.b	smpsNoAttack, $01
00097A4C E10F                       	smpsAlterNote       $0F
00097A4E E701                       	dc.b	smpsNoAttack, $01
00097A50 E10B                       	smpsAlterNote       $0B
00097A52 E701                       	dc.b	smpsNoAttack, $01
00097A54 E105                       	smpsAlterNote       $05
00097A56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A5A E108                       	smpsAlterNote       $08
00097A5C E701                       	dc.b	smpsNoAttack, $01
00097A5E E10E                       	smpsAlterNote       $0E
00097A60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097A64 E108                       	smpsAlterNote       $08
00097A66 E701                       	dc.b	smpsNoAttack, $01
00097A68 E105                       	smpsAlterNote       $05
00097A6A E701                       	dc.b	smpsNoAttack, $01
00097A6E E10B                       	smpsAlterNote       $0B
00097A70 E6FD                       	smpsAlterVol        $FD
00097A72 C604 8001                  	dc.b	nA5, $04, nRst, $01
00097A76 E109                       	smpsAlterNote       $09
00097A78 C404                       	dc.b	nG5, $04
00097A7A E10B                       	smpsAlterNote       $0B
00097A7C C604 8001                  	dc.b	nA5, $04, nRst, $01
00097A80 E107                       	smpsAlterNote       $07
00097A82 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00097A88 E10B                       	smpsAlterNote       $0B
00097A8A C604                       	dc.b	nA5, $04
00097A8C E109                       	smpsAlterNote       $09
00097A8E C404 8001                  	dc.b	nG5, $04, nRst, $01
00097A92 E10B                       	smpsAlterNote       $0B
00097A94 C604                       	dc.b	nA5, $04
00097A96 E108                       	smpsAlterNote       $08
00097A98 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00097AA0 E106                       	smpsAlterNote       $06
00097AA2 C904 8001                  	dc.b	nC6, $04, nRst, $01
00097AA6 E10C                       	smpsAlterNote       $0C
00097AA8 C704                       	dc.b	nBb5, $04
00097AAA E10B                       	smpsAlterNote       $0B
00097AAC C604 8001                  	dc.b	nA5, $04, nRst, $01
00097AB0 E109                       	smpsAlterNote       $09
00097AB2 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00097ABC E10B                       	smpsAlterNote       $0B
00097ABE C60D                       	dc.b	nA5, $0D
00097AC0 E108                       	smpsAlterNote       $08
00097AC2 E701                       	dc.b	smpsNoAttack, $01
00097AC4 E104                       	smpsAlterNote       $04
00097AC6 E701                       	dc.b	smpsNoAttack, $01
00097AC8 E108                       	smpsAlterNote       $08
00097ACA E701                       	dc.b	smpsNoAttack, $01
00097ACC E10E                       	smpsAlterNote       $0E
00097ACE E701                       	dc.b	smpsNoAttack, $01
00097AD0 E10F                       	smpsAlterNote       $0F
00097AD2 E701                       	dc.b	smpsNoAttack, $01
00097AD4 E10B                       	smpsAlterNote       $0B
00097AD6 E701                       	dc.b	smpsNoAttack, $01
00097AD8 E105                       	smpsAlterNote       $05
00097ADA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097ADE E108                       	smpsAlterNote       $08
00097AE0 E701                       	dc.b	smpsNoAttack, $01
00097AE2 E10E                       	smpsAlterNote       $0E
00097AE4 E701                       	dc.b	smpsNoAttack, $01
00097AE6 E10F                       	smpsAlterNote       $0F
00097AE8 8001                       	dc.b	nRst, $01
00097AEA E109                       	smpsAlterNote       $09
00097AEC C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00097AF2 E108                       	smpsAlterNote       $08
00097AF4 C10D                       	dc.b	nE5, $0D
00097AF6 E102                       	smpsAlterNote       $02
00097AF8 E701                       	dc.b	smpsNoAttack, $01
00097AFA E101                       	smpsAlterNote       $01
00097AFC E701                       	dc.b	smpsNoAttack, $01
00097AFE E105                       	smpsAlterNote       $05
00097B00 E701                       	dc.b	smpsNoAttack, $01
00097B02 E10B                       	smpsAlterNote       $0B
00097B04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B08 E108                       	smpsAlterNote       $08
00097B0A E701                       	dc.b	smpsNoAttack, $01
00097B0C E102                       	smpsAlterNote       $02
00097B0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B12 E108                       	smpsAlterNote       $08
00097B14 E701                       	dc.b	smpsNoAttack, $01
00097B16 E10B                       	smpsAlterNote       $0B
00097B18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B1C E105                       	smpsAlterNote       $05
00097B1E E701                       	dc.b	smpsNoAttack, $01
00097B20 E101                       	smpsAlterNote       $01
00097B22 E701                       	dc.b	smpsNoAttack, $01
00097B24 E102                       	smpsAlterNote       $02
00097B26 E701                       	dc.b	smpsNoAttack, $01
00097B28 E108                       	smpsAlterNote       $08
00097B2A E701                       	dc.b	smpsNoAttack, $01
00097B2C E10C                       	smpsAlterNote       $0C
00097B2E E701                       	dc.b	smpsNoAttack, $01
00097B30 E108                       	smpsAlterNote       $08
00097B32 E701                       	dc.b	smpsNoAttack, $01
00097B34 E105                       	smpsAlterNote       $05
00097B36 E701                       	dc.b	smpsNoAttack, $01
00097B38 E101                       	smpsAlterNote       $01
00097B3A E701                       	dc.b	smpsNoAttack, $01
00097B3C E105                       	smpsAlterNote       $05
00097B3E E701                       	dc.b	smpsNoAttack, $01
00097B40 E10B                       	smpsAlterNote       $0B
00097B42 E701                       	dc.b	smpsNoAttack, $01
00097B44 E10C                       	smpsAlterNote       $0C
00097B46 E701                       	dc.b	smpsNoAttack, $01
00097B48 E108                       	smpsAlterNote       $08
00097B4A E701                       	dc.b	smpsNoAttack, $01
00097B4C E102                       	smpsAlterNote       $02
00097B4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B52 E105                       	smpsAlterNote       $05
00097B54 E701                       	dc.b	smpsNoAttack, $01
00097B56 E10B                       	smpsAlterNote       $0B
00097B58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B5C E105                       	smpsAlterNote       $05
00097B5E E701                       	dc.b	smpsNoAttack, $01
00097B60 E102                       	smpsAlterNote       $02
00097B62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B66 E108                       	smpsAlterNote       $08
00097B68 E701                       	dc.b	smpsNoAttack, $01
00097B6A E10C                       	smpsAlterNote       $0C
00097B6C E701                       	dc.b	smpsNoAttack, $01
00097B6E E10B                       	smpsAlterNote       $0B
00097B70 E701                       	dc.b	smpsNoAttack, $01
00097B72 E105                       	smpsAlterNote       $05
00097B74 E701                       	dc.b	smpsNoAttack, $01
00097B76 E101                       	smpsAlterNote       $01
00097B78 E701                       	dc.b	smpsNoAttack, $01
00097B7A E105                       	smpsAlterNote       $05
00097B7C E701                       	dc.b	smpsNoAttack, $01
00097B7E E108                       	smpsAlterNote       $08
00097B80 E701                       	dc.b	smpsNoAttack, $01
00097B82 E10C                       	smpsAlterNote       $0C
00097B84 E701                       	dc.b	smpsNoAttack, $01
00097B86 E108                       	smpsAlterNote       $08
00097B88 E701                       	dc.b	smpsNoAttack, $01
00097B8A E102                       	smpsAlterNote       $02
00097B8C E701                       	dc.b	smpsNoAttack, $01
00097B8E E101                       	smpsAlterNote       $01
00097B90 E701                       	dc.b	smpsNoAttack, $01
00097B92 E105                       	smpsAlterNote       $05
00097B94 E701                       	dc.b	smpsNoAttack, $01
00097B96 E10B                       	smpsAlterNote       $0B
00097B98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B9C E108                       	smpsAlterNote       $08
00097B9E E701                       	dc.b	smpsNoAttack, $01
00097BA0 E102                       	smpsAlterNote       $02
00097BA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097BA6 E108                       	smpsAlterNote       $08
00097BA8 E701                       	dc.b	smpsNoAttack, $01
00097BAA E10B                       	smpsAlterNote       $0B
00097BAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097BB0 E105                       	smpsAlterNote       $05
00097BB2 E701                       	dc.b	smpsNoAttack, $01
00097BB4 E101                       	smpsAlterNote       $01
00097BB6 E701                       	dc.b	smpsNoAttack, $01
00097BB8 E102                       	smpsAlterNote       $02
00097BBA E701                       	dc.b	smpsNoAttack, $01
00097BBC E108                       	smpsAlterNote       $08
00097BBE E701                       	dc.b	smpsNoAttack, $01
00097BC0 E10C                       	smpsAlterNote       $0C
00097BC2 E701                       	dc.b	smpsNoAttack, $01
00097BC4 E108                       	smpsAlterNote       $08
00097BC6 E701                       	dc.b	smpsNoAttack, $01
00097BC8 E105                       	smpsAlterNote       $05
00097BCA E701                       	dc.b	smpsNoAttack, $01
00097BCC E101                       	smpsAlterNote       $01
00097BCE E701                       	dc.b	smpsNoAttack, $01
00097BD0 E105                       	smpsAlterNote       $05
00097BD2 E701                       	dc.b	smpsNoAttack, $01
00097BD4 E10B                       	smpsAlterNote       $0B
00097BD6 E701                       	dc.b	smpsNoAttack, $01
00097BD8 E10C                       	smpsAlterNote       $0C
00097BDA E701                       	dc.b	smpsNoAttack, $01
00097BDC E108                       	smpsAlterNote       $08
00097BDE E701                       	dc.b	smpsNoAttack, $01
00097BE0 E102                       	smpsAlterNote       $02
00097BE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097BE6 E105                       	smpsAlterNote       $05
00097BE8 E701                       	dc.b	smpsNoAttack, $01
00097BEA E10B                       	smpsAlterNote       $0B
00097BEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097BF0 E105                       	smpsAlterNote       $05
00097BF2 E701                       	dc.b	smpsNoAttack, $01
00097BF4 E101                       	smpsAlterNote       $01
00097BF6 E701                       	dc.b	smpsNoAttack, $01
00097BF8 E102                       	smpsAlterNote       $02
00097BFA E701                       	dc.b	smpsNoAttack, $01
00097BFC E108                       	smpsAlterNote       $08
00097BFE E701                       	dc.b	smpsNoAttack, $01
00097C00 E10C                       	smpsAlterNote       $0C
00097C02 E701                       	dc.b	smpsNoAttack, $01
00097C04 E108                       	smpsAlterNote       $08
00097C06 E701                       	dc.b	smpsNoAttack, $01
00097C08 E105                       	smpsAlterNote       $05
00097C0A E701                       	dc.b	smpsNoAttack, $01
00097C0C E101                       	smpsAlterNote       $01
00097C0E E701                       	dc.b	smpsNoAttack, $01
00097C10 E105                       	smpsAlterNote       $05
00097C12 E701                       	dc.b	smpsNoAttack, $01
00097C14 E10B                       	smpsAlterNote       $0B
00097C16 E701                       	dc.b	smpsNoAttack, $01
00097C18 E10C                       	smpsAlterNote       $0C
00097C1A E701                       	dc.b	smpsNoAttack, $01
00097C1C E108                       	smpsAlterNote       $08
00097C1E E701                       	dc.b	smpsNoAttack, $01
00097C20 E102                       	smpsAlterNote       $02
00097C22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C26 E105                       	smpsAlterNote       $05
00097C28 E701                       	dc.b	smpsNoAttack, $01
00097C2A E10B                       	smpsAlterNote       $0B
00097C2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C30 E105                       	smpsAlterNote       $05
00097C32 E701                       	dc.b	smpsNoAttack, $01
00097C34 E102                       	smpsAlterNote       $02
00097C36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C3A E108                       	smpsAlterNote       $08
00097C3C E701                       	dc.b	smpsNoAttack, $01
00097C3E E10C                       	smpsAlterNote       $0C
00097C40 E701                       	dc.b	smpsNoAttack, $01
00097C42 E10B                       	smpsAlterNote       $0B
00097C44 E701                       	dc.b	smpsNoAttack, $01
00097C46 E105                       	smpsAlterNote       $05
00097C48 E701                       	dc.b	smpsNoAttack, $01
00097C4A E101                       	smpsAlterNote       $01
00097C4C E701                       	dc.b	smpsNoAttack, $01
00097C4E E105                       	smpsAlterNote       $05
00097C50 E701                       	dc.b	smpsNoAttack, $01
00097C52 E108                       	smpsAlterNote       $08
00097C54 E701                       	dc.b	smpsNoAttack, $01
00097C56 E10C                       	smpsAlterNote       $0C
00097C58 E701                       	dc.b	smpsNoAttack, $01
00097C5C E10B                       	smpsAlterNote       $0B
00097C5E C604 8001                  	dc.b	nA5, $04, nRst, $01
00097C62 E109                       	smpsAlterNote       $09
00097C64 C404                       	dc.b	nG5, $04
00097C66 E10B                       	smpsAlterNote       $0B
00097C68 C604 8001                  	dc.b	nA5, $04, nRst, $01
00097C6C E107                       	smpsAlterNote       $07
00097C6E BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00097C74 E10B                       	smpsAlterNote       $0B
00097C76 C604                       	dc.b	nA5, $04
00097C78 E109                       	smpsAlterNote       $09
00097C7A C404 8001                  	dc.b	nG5, $04, nRst, $01
00097C7E E10B                       	smpsAlterNote       $0B
00097C80 C604                       	dc.b	nA5, $04
00097C82 E108                       	smpsAlterNote       $08
00097C84 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00097C8A E106                       	smpsAlterNote       $06
00097C8C C904 8001                  	dc.b	nC6, $04, nRst, $01
00097C90 E10C                       	smpsAlterNote       $0C
00097C92 C704                       	dc.b	nBb5, $04
00097C94 E10B                       	smpsAlterNote       $0B
00097C96 C604 8001                  	dc.b	nA5, $04, nRst, $01
00097C9A E109                       	smpsAlterNote       $09
00097C9C C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00097CA6 E10B                       	smpsAlterNote       $0B
00097CA8 C60D                       	dc.b	nA5, $0D
00097CAA E108                       	smpsAlterNote       $08
00097CAC E701                       	dc.b	smpsNoAttack, $01
00097CAE E104                       	smpsAlterNote       $04
00097CB0 E701                       	dc.b	smpsNoAttack, $01
00097CB2 E108                       	smpsAlterNote       $08
00097CB4 E701                       	dc.b	smpsNoAttack, $01
00097CB6 E10B                       	smpsAlterNote       $0B
00097CB8 E701                       	dc.b	smpsNoAttack, $01
00097CBA E10F                       	smpsAlterNote       $0F
00097CBC E701                       	dc.b	smpsNoAttack, $01
00097CBE E10B                       	smpsAlterNote       $0B
00097CC0 E701                       	dc.b	smpsNoAttack, $01
00097CC2 E105                       	smpsAlterNote       $05
00097CC4 E701                       	dc.b	smpsNoAttack, $01
00097CC6 E104                       	smpsAlterNote       $04
00097CC8 E701                       	dc.b	smpsNoAttack, $01
00097CCA E108                       	smpsAlterNote       $08
00097CCC E701                       	dc.b	smpsNoAttack, $01
00097CCE E10E                       	smpsAlterNote       $0E
00097CD0 E701                       	dc.b	smpsNoAttack, $01
00097CD2 E10F                       	smpsAlterNote       $0F
00097CD4 8001                       	dc.b	nRst, $01
00097CD6 E109                       	smpsAlterNote       $09
00097CD8 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00097CDE E108                       	smpsAlterNote       $08
00097CE0 C10D                       	dc.b	nE5, $0D
00097CE2 E105                       	smpsAlterNote       $05
00097CE4 E701                       	dc.b	smpsNoAttack, $01
00097CE6 E101                       	smpsAlterNote       $01
00097CE8 E701                       	dc.b	smpsNoAttack, $01
00097CEA E105                       	smpsAlterNote       $05
00097CEC E701                       	dc.b	smpsNoAttack, $01
00097CEE E10B                       	smpsAlterNote       $0B
00097CF0 E701                       	dc.b	smpsNoAttack, $01
00097CF2 E10C                       	smpsAlterNote       $0C
00097CF4 E701                       	dc.b	smpsNoAttack, $01
00097CF6 E108                       	smpsAlterNote       $08
00097CF8 E701                       	dc.b	smpsNoAttack, $01
00097CFA E102                       	smpsAlterNote       $02
00097CFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D00 E105                       	smpsAlterNote       $05
00097D02 E701                       	dc.b	smpsNoAttack, $01
00097D04 E10B                       	smpsAlterNote       $0B
00097D06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D0A E105                       	smpsAlterNote       $05
00097D0C E701                       	dc.b	smpsNoAttack, $01
00097D0E E102                       	smpsAlterNote       $02
00097D10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D14 E108                       	smpsAlterNote       $08
00097D16 E701                       	dc.b	smpsNoAttack, $01
00097D18 E10C                       	smpsAlterNote       $0C
00097D1A E701                       	dc.b	smpsNoAttack, $01
00097D1C E10B                       	smpsAlterNote       $0B
00097D1E E701                       	dc.b	smpsNoAttack, $01
00097D20 E105                       	smpsAlterNote       $05
00097D22 E701                       	dc.b	smpsNoAttack, $01
00097D24 E101                       	smpsAlterNote       $01
00097D26 E701                       	dc.b	smpsNoAttack, $01
00097D28 E105                       	smpsAlterNote       $05
00097D2A E701                       	dc.b	smpsNoAttack, $01
00097D2C E108                       	smpsAlterNote       $08
00097D2E E701                       	dc.b	smpsNoAttack, $01
00097D30 E10C                       	smpsAlterNote       $0C
00097D32 E701                       	dc.b	smpsNoAttack, $01
00097D34 E108                       	smpsAlterNote       $08
00097D36 E701                       	dc.b	smpsNoAttack, $01
00097D38 E102                       	smpsAlterNote       $02
00097D3A E701                       	dc.b	smpsNoAttack, $01
00097D3C E101                       	smpsAlterNote       $01
00097D3E E701                       	dc.b	smpsNoAttack, $01
00097D40 E105                       	smpsAlterNote       $05
00097D42 E701                       	dc.b	smpsNoAttack, $01
00097D44 E10B                       	smpsAlterNote       $0B
00097D46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D4A E108                       	smpsAlterNote       $08
00097D4C E701                       	dc.b	smpsNoAttack, $01
00097D4E E102                       	smpsAlterNote       $02
00097D50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D54 E108                       	smpsAlterNote       $08
00097D56 E701                       	dc.b	smpsNoAttack, $01
00097D58 E10B                       	smpsAlterNote       $0B
00097D5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D5E E105                       	smpsAlterNote       $05
00097D60 E701                       	dc.b	smpsNoAttack, $01
00097D62 E101                       	smpsAlterNote       $01
00097D64 E701                       	dc.b	smpsNoAttack, $01
00097D66 E102                       	smpsAlterNote       $02
00097D68 E701                       	dc.b	smpsNoAttack, $01
00097D6A E108                       	smpsAlterNote       $08
00097D6C E701                       	dc.b	smpsNoAttack, $01
00097D6E E10C                       	smpsAlterNote       $0C
00097D70 E701                       	dc.b	smpsNoAttack, $01
00097D72 E108                       	smpsAlterNote       $08
00097D74 E701                       	dc.b	smpsNoAttack, $01
00097D76 E105                       	smpsAlterNote       $05
00097D78 E701                       	dc.b	smpsNoAttack, $01
00097D7A E101                       	smpsAlterNote       $01
00097D7C E701                       	dc.b	smpsNoAttack, $01
00097D7E E105                       	smpsAlterNote       $05
00097D80 E701                       	dc.b	smpsNoAttack, $01
00097D82 E10B                       	smpsAlterNote       $0B
00097D84 E701                       	dc.b	smpsNoAttack, $01
00097D86 E10C                       	smpsAlterNote       $0C
00097D88 E701                       	dc.b	smpsNoAttack, $01
00097D8A E108                       	smpsAlterNote       $08
00097D8C E701                       	dc.b	smpsNoAttack, $01
00097D8E E102                       	smpsAlterNote       $02
00097D90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D94 E108                       	smpsAlterNote       $08
00097D96 E701                       	dc.b	smpsNoAttack, $01
00097D98 E10B                       	smpsAlterNote       $0B
00097D9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097D9E E105                       	smpsAlterNote       $05
00097DA0 E701                       	dc.b	smpsNoAttack, $01
00097DA2 E101                       	smpsAlterNote       $01
00097DA4 E701                       	dc.b	smpsNoAttack, $01
00097DA6 E102                       	smpsAlterNote       $02
00097DA8 E701                       	dc.b	smpsNoAttack, $01
00097DAA E108                       	smpsAlterNote       $08
00097DAC E701                       	dc.b	smpsNoAttack, $01
00097DAE E10C                       	smpsAlterNote       $0C
00097DB0 E701                       	dc.b	smpsNoAttack, $01
00097DB2 E108                       	smpsAlterNote       $08
00097DB4 E701                       	dc.b	smpsNoAttack, $01
00097DB6 E105                       	smpsAlterNote       $05
00097DB8 E701                       	dc.b	smpsNoAttack, $01
00097DBA E101                       	smpsAlterNote       $01
00097DBC E701                       	dc.b	smpsNoAttack, $01
00097DBE E105                       	smpsAlterNote       $05
00097DC0 E701                       	dc.b	smpsNoAttack, $01
00097DC2 E10B                       	smpsAlterNote       $0B
00097DC4 E701                       	dc.b	smpsNoAttack, $01
00097DC6 E10C                       	smpsAlterNote       $0C
00097DC8 E701                       	dc.b	smpsNoAttack, $01
00097DCA E108                       	smpsAlterNote       $08
00097DCC E701                       	dc.b	smpsNoAttack, $01
00097DCE E102                       	smpsAlterNote       $02
00097DD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097DD4 E105                       	smpsAlterNote       $05
00097DD6 E701                       	dc.b	smpsNoAttack, $01
00097DD8 E10B                       	smpsAlterNote       $0B
00097DDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097DDE E105                       	smpsAlterNote       $05
00097DE0 E701                       	dc.b	smpsNoAttack, $01
00097DE2 E102                       	smpsAlterNote       $02
00097DE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097DE8 E108                       	smpsAlterNote       $08
00097DEA E701                       	dc.b	smpsNoAttack, $01
00097DEC E10C                       	smpsAlterNote       $0C
00097DEE E701                       	dc.b	smpsNoAttack, $01
00097DF0 E10B                       	smpsAlterNote       $0B
00097DF2 E701                       	dc.b	smpsNoAttack, $01
00097DF4 E105                       	smpsAlterNote       $05
00097DF6 E701                       	dc.b	smpsNoAttack, $01
00097DF8 E101                       	smpsAlterNote       $01
00097DFA E701                       	dc.b	smpsNoAttack, $01
00097DFC E105                       	smpsAlterNote       $05
00097DFE E701                       	dc.b	smpsNoAttack, $01
00097E00 E108                       	smpsAlterNote       $08
00097E02 E701                       	dc.b	smpsNoAttack, $01
00097E04 E10C                       	smpsAlterNote       $0C
00097E06 E701                       	dc.b	smpsNoAttack, $01
00097E08 E108                       	smpsAlterNote       $08
00097E0A E701                       	dc.b	smpsNoAttack, $01
00097E0C E102                       	smpsAlterNote       $02
00097E0E E701                       	dc.b	smpsNoAttack, $01
00097E10 E101                       	smpsAlterNote       $01
00097E12 E701                       	dc.b	smpsNoAttack, $01
00097E14 E105                       	smpsAlterNote       $05
00097E16 E701                       	dc.b	smpsNoAttack, $01
00097E18 E10B                       	smpsAlterNote       $0B
00097E1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E1E E108                       	smpsAlterNote       $08
00097E20 E701                       	dc.b	smpsNoAttack, $01
00097E22 E102                       	smpsAlterNote       $02
00097E24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E28 E108                       	smpsAlterNote       $08
00097E2A E701                       	dc.b	smpsNoAttack, $01
00097E2C E10B                       	smpsAlterNote       $0B
00097E2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E32 E105                       	smpsAlterNote       $05
00097E34 E701                       	dc.b	smpsNoAttack, $01
00097E36 E102                       	smpsAlterNote       $02
00097E38 8001                       	dc.b	nRst, $01
00097E3A E107                       	smpsAlterNote       $07
00097E3C BF01 8001                  	dc.b	nD5, $01, nRst, $01
00097E40 E108                       	smpsAlterNote       $08
00097E42 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00097E46 E102                       	smpsAlterNote       $02
00097E48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E4C E108                       	smpsAlterNote       $08
00097E4E E701                       	dc.b	smpsNoAttack, $01
00097E50 E10B                       	smpsAlterNote       $0B
00097E52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E56 E105                       	smpsAlterNote       $05
00097E58 E701                       	dc.b	smpsNoAttack, $01
00097E5A E101                       	smpsAlterNote       $01
00097E5C E701                       	dc.b	smpsNoAttack, $01
00097E5E E102                       	smpsAlterNote       $02
00097E60 E701                       	dc.b	smpsNoAttack, $01
00097E62 E108                       	smpsAlterNote       $08
00097E64 E701                       	dc.b	smpsNoAttack, $01
00097E66 E10C                       	smpsAlterNote       $0C
00097E68 E701                       	dc.b	smpsNoAttack, $01
00097E6A E108                       	smpsAlterNote       $08
00097E6C E701                       	dc.b	smpsNoAttack, $01
00097E6E E105                       	smpsAlterNote       $05
00097E70 E701                       	dc.b	smpsNoAttack, $01
00097E72 E101                       	smpsAlterNote       $01
00097E74 E701                       	dc.b	smpsNoAttack, $01
00097E76 E105                       	smpsAlterNote       $05
00097E78 E701                       	dc.b	smpsNoAttack, $01
00097E7A E10B                       	smpsAlterNote       $0B
00097E7C E701                       	dc.b	smpsNoAttack, $01
00097E7E E10C                       	smpsAlterNote       $0C
00097E80 E701                       	dc.b	smpsNoAttack, $01
00097E82 E108                       	smpsAlterNote       $08
00097E84 E701                       	dc.b	smpsNoAttack, $01
00097E86 E102                       	smpsAlterNote       $02
00097E88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E8C E105                       	smpsAlterNote       $05
00097E8E E701                       	dc.b	smpsNoAttack, $01
00097E90 E10B                       	smpsAlterNote       $0B
00097E92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E96 E105                       	smpsAlterNote       $05
00097E98 E701                       	dc.b	smpsNoAttack, $01
00097E9A E102                       	smpsAlterNote       $02
00097E9C E701                       	dc.b	smpsNoAttack, $01
00097E9E E109                       	smpsAlterNote       $09
00097EA0 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00097EA4 E108                       	smpsAlterNote       $08
00097EA6 C10D                       	dc.b	nE5, $0D
00097EA8 E105                       	smpsAlterNote       $05
00097EAA E701                       	dc.b	smpsNoAttack, $01
00097EAC E101                       	smpsAlterNote       $01
00097EAE E701                       	dc.b	smpsNoAttack, $01
00097EB0 E102                       	smpsAlterNote       $02
00097EB2 E701                       	dc.b	smpsNoAttack, $01
00097EB4 E108                       	smpsAlterNote       $08
00097EB6 E701                       	dc.b	smpsNoAttack, $01
00097EB8 E10C                       	smpsAlterNote       $0C
00097EBA E701                       	dc.b	smpsNoAttack, $01
00097EBC E108                       	smpsAlterNote       $08
00097EBE E701                       	dc.b	smpsNoAttack, $01
00097EC0 E105                       	smpsAlterNote       $05
00097EC2 E701                       	dc.b	smpsNoAttack, $01
00097EC4 E101                       	smpsAlterNote       $01
00097EC6 E701                       	dc.b	smpsNoAttack, $01
00097EC8 E105                       	smpsAlterNote       $05
00097ECA E701                       	dc.b	smpsNoAttack, $01
00097ECC E10B                       	smpsAlterNote       $0B
00097ECE E701                       	dc.b	smpsNoAttack, $01
00097ED0 E10C                       	smpsAlterNote       $0C
00097ED2 E701                       	dc.b	smpsNoAttack, $01
00097ED4 E108                       	smpsAlterNote       $08
00097ED6 E701                       	dc.b	smpsNoAttack, $01
00097ED8 E102                       	smpsAlterNote       $02
00097EDA E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00097EE2 E10B                       	smpsAlterNote       $0B
00097EE4 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00097EE8 E10C                       	smpsAlterNote       $0C
00097EEA BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00097EEE E10B                       	smpsAlterNote       $0B
00097EF0 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00097EF6 E107                       	smpsAlterNote       $07
00097EF8 BF03                       	dc.b	nD5, $03
00097EFA E108                       	smpsAlterNote       $08
00097EFC C103 8001                  	dc.b	nE5, $03, nRst, $01
00097F00 E109                       	smpsAlterNote       $09
00097F02 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00097F08 E10B                       	smpsAlterNote       $0B
00097F0A C606 8001                  	dc.b	nA5, $06, nRst, $01
00097F0E E107                       	smpsAlterNote       $07
00097F10 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00097F14 E106                       	smpsAlterNote       $06
00097F16 C90D                       	dc.b	nC6, $0D
00097F18 E103                       	smpsAlterNote       $03
00097F1A E701                       	dc.b	smpsNoAttack, $01
00097F1C E1FF                       	smpsAlterNote       $FF
00097F1E E701                       	dc.b	smpsNoAttack, $01
00097F20 E103                       	smpsAlterNote       $03
00097F22 E701                       	dc.b	smpsNoAttack, $01
00097F24 E109                       	smpsAlterNote       $09
00097F26 E701                       	dc.b	smpsNoAttack, $01
00097F28 E10A                       	smpsAlterNote       $0A
00097F2A E701                       	dc.b	smpsNoAttack, $01
00097F2C E106                       	smpsAlterNote       $06
00097F2E E701                       	dc.b	smpsNoAttack, $01
00097F30 E100                       	smpsAlterNote       $00
00097F32 E701                       	dc.b	smpsNoAttack, $01
00097F34 E10C                       	smpsAlterNote       $0C
00097F36 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00097F3A E10B                       	smpsAlterNote       $0B
00097F3C C603                       	dc.b	nA5, $03
00097F3E E109                       	smpsAlterNote       $09
00097F40 C403 8001                  	dc.b	nG5, $03, nRst, $01
00097F44 E10B                       	smpsAlterNote       $0B
00097F46 C60D                       	dc.b	nA5, $0D
00097F48 E105                       	smpsAlterNote       $05
00097F4A E701                       	dc.b	smpsNoAttack, $01
00097F4C E104                       	smpsAlterNote       $04
00097F4E E701                       	dc.b	smpsNoAttack, $01
00097F50 E108                       	smpsAlterNote       $08
00097F52 E701                       	dc.b	smpsNoAttack, $01
00097F54 E10E                       	smpsAlterNote       $0E
00097F56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097F5A E10B                       	smpsAlterNote       $0B
00097F5C E701                       	dc.b	smpsNoAttack, $01
00097F5E E105                       	smpsAlterNote       $05
00097F60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097F64 E10B                       	smpsAlterNote       $0B
00097F66 E701                       	dc.b	smpsNoAttack, $01
00097F68 E10E                       	smpsAlterNote       $0E
00097F6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097F6E E108                       	smpsAlterNote       $08
00097F70 E701                       	dc.b	smpsNoAttack, $01
00097F72 E104                       	smpsAlterNote       $04
00097F74 E701                       	dc.b	smpsNoAttack, $01
00097F76 E105                       	smpsAlterNote       $05
00097F78 E701                       	dc.b	smpsNoAttack, $01
00097F7A E10B                       	smpsAlterNote       $0B
00097F7C E701                       	dc.b	smpsNoAttack, $01
00097F7E E10F                       	smpsAlterNote       $0F
00097F80 E701                       	dc.b	smpsNoAttack, $01
00097F82 E10B                       	smpsAlterNote       $0B
00097F84 E701                       	dc.b	smpsNoAttack, $01
00097F86 E108                       	smpsAlterNote       $08
00097F88 E701                       	dc.b	smpsNoAttack, $01
00097F8A E104                       	smpsAlterNote       $04
00097F8C E701                       	dc.b	smpsNoAttack, $01
00097F8E E108                       	smpsAlterNote       $08
00097F90 E701                       	dc.b	smpsNoAttack, $01
00097F92 E10E                       	smpsAlterNote       $0E
00097F94 E701                       	dc.b	smpsNoAttack, $01
00097F96 E10F                       	smpsAlterNote       $0F
00097F98 E701                       	dc.b	smpsNoAttack, $01
00097F9A E10B                       	smpsAlterNote       $0B
00097F9C E701                       	dc.b	smpsNoAttack, $01
00097F9E E105                       	smpsAlterNote       $05
00097FA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FA4 E108                       	smpsAlterNote       $08
00097FA6 E701                       	dc.b	smpsNoAttack, $01
00097FA8 E10E                       	smpsAlterNote       $0E
00097FAA E701                       	dc.b	smpsNoAttack, $01
00097FAC E10F                       	smpsAlterNote       $0F
00097FAE 800F                       	dc.b	nRst, $0F
00097FB0 E107                       	smpsAlterNote       $07
00097FB2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00097FB6 E108                       	smpsAlterNote       $08
00097FB8 C103                       	dc.b	nE5, $03
00097FBA E109                       	smpsAlterNote       $09
00097FBC C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00097FC2 E10B                       	smpsAlterNote       $0B
00097FC4 C607                       	dc.b	nA5, $07
00097FC6 E107                       	smpsAlterNote       $07
00097FC8 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00097FCC E106                       	smpsAlterNote       $06
00097FCE C90D                       	dc.b	nC6, $0D
00097FD0 E107                       	smpsAlterNote       $07
00097FD2 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00097FD6 E10C                       	smpsAlterNote       $0C
00097FD8 C704                       	dc.b	nBb5, $04
00097FDA E10B                       	smpsAlterNote       $0B
00097FDC C604 8001                  	dc.b	nA5, $04, nRst, $01
00097FE0 E109                       	smpsAlterNote       $09
00097FE2 C404                       	dc.b	nG5, $04
00097FE4 E10B                       	smpsAlterNote       $0B
00097FE6 C60D                       	dc.b	nA5, $0D
00097FE8 E108                       	smpsAlterNote       $08
00097FEA E701                       	dc.b	smpsNoAttack, $01
00097FEC E105                       	smpsAlterNote       $05
00097FEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FF2 E10B                       	smpsAlterNote       $0B
00097FF4 E701                       	dc.b	smpsNoAttack, $01
00097FF6 E10F                       	smpsAlterNote       $0F
00097FF8 E701                       	dc.b	smpsNoAttack, $01
00097FFA E10E                       	smpsAlterNote       $0E
00097FFC E701                       	dc.b	smpsNoAttack, $01
00097FFE E108                       	smpsAlterNote       $08
00098000 E701                       	dc.b	smpsNoAttack, $01
00098002 E104                       	smpsAlterNote       $04
00098004 E701                       	dc.b	smpsNoAttack, $01
00098006 E108                       	smpsAlterNote       $08
00098008 E701                       	dc.b	smpsNoAttack, $01
0009800A E10B                       	smpsAlterNote       $0B
0009800C E701                       	dc.b	smpsNoAttack, $01
0009800E E10F                       	smpsAlterNote       $0F
00098010 E701                       	dc.b	smpsNoAttack, $01
00098012 E10B                       	smpsAlterNote       $0B
00098014 E701                       	dc.b	smpsNoAttack, $01
00098016 E105                       	smpsAlterNote       $05
00098018 E701                       	dc.b	smpsNoAttack, $01
0009801A E104                       	smpsAlterNote       $04
0009801C E701                       	dc.b	smpsNoAttack, $01
0009801E E108                       	smpsAlterNote       $08
00098020 E701                       	dc.b	smpsNoAttack, $01
00098022 E10E                       	smpsAlterNote       $0E
00098024 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098028 E10B                       	smpsAlterNote       $0B
0009802A E701                       	dc.b	smpsNoAttack, $01
0009802C E105                       	smpsAlterNote       $05
0009802E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098032 E10B                       	smpsAlterNote       $0B
00098034 E701                       	dc.b	smpsNoAttack, $01
00098036 E10E                       	smpsAlterNote       $0E
00098038 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009803C E108                       	smpsAlterNote       $08
0009803E E701                       	dc.b	smpsNoAttack, $01
00098040 E105                       	smpsAlterNote       $05
00098042 8001                       	dc.b	nRst, $01
00098044 E109                       	smpsAlterNote       $09
00098046 C401 8001                  	dc.b	nG5, $01, nRst, $01
0009804A E10B                       	smpsAlterNote       $0B
0009804C C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00098054 E109                       	smpsAlterNote       $09
00098056 C404                       	dc.b	nG5, $04
00098058 E10B                       	smpsAlterNote       $0B
0009805A C604 8001                  	dc.b	nA5, $04, nRst, $01
0009805E E107                       	smpsAlterNote       $07
00098060 BF0D                       	dc.b	nD5, $0D
00098062 E101                       	smpsAlterNote       $01
00098064 E701                       	dc.b	smpsNoAttack, $01
00098066 E100                       	smpsAlterNote       $00
00098068 E701                       	dc.b	smpsNoAttack, $01
0009806A E104                       	smpsAlterNote       $04
0009806C E701                       	dc.b	smpsNoAttack, $01
0009806E E10A                       	smpsAlterNote       $0A
00098070 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098074 E107                       	smpsAlterNote       $07
00098076 E701                       	dc.b	smpsNoAttack, $01
00098078 E101                       	smpsAlterNote       $01
0009807A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009807E E107                       	smpsAlterNote       $07
00098080 E701                       	dc.b	smpsNoAttack, $01
00098082 E10A                       	smpsAlterNote       $0A
00098084 E701                       	dc.b	smpsNoAttack, $01
00098086 E10B                       	smpsAlterNote       $0B
00098088 8001                       	dc.b	nRst, $01
0009808A E108                       	smpsAlterNote       $08
0009808C 8001                       	dc.b	nRst, $01
0009808E E109                       	smpsAlterNote       $09
00098090 8001 C401                  	dc.b	nRst, $01, nG5, $01
00098094 E10B                       	smpsAlterNote       $0B
00098096 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0009809E E108                       	smpsAlterNote       $08
000980A0 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000980A4 E109                       	smpsAlterNote       $09
000980A6 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000980AA E108                       	smpsAlterNote       $08
000980AC CD02 8001                  	dc.b	nE6, $02, nRst, $01
000980B0 E106                       	smpsAlterNote       $06
000980B2 C903                       	dc.b	nC6, $03
000980B4 E109                       	smpsAlterNote       $09
000980B6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000980BA E10C                       	smpsAlterNote       $0C
000980BC C70D                       	dc.b	nBb5, $0D
000980BE E109                       	smpsAlterNote       $09
000980C0 E701                       	dc.b	smpsNoAttack, $01
000980C2 E105                       	smpsAlterNote       $05
000980C4 E701                       	dc.b	smpsNoAttack, $01
000980C6 E109                       	smpsAlterNote       $09
000980C8 E701                       	dc.b	smpsNoAttack, $01
000980CA E10F                       	smpsAlterNote       $0F
000980CC E701                       	dc.b	smpsNoAttack, $01
000980CE E110                       	smpsAlterNote       $10
000980D0 E701                       	dc.b	smpsNoAttack, $01
000980D2 E10C                       	smpsAlterNote       $0C
000980D4 E701                       	dc.b	smpsNoAttack, $01
000980D6 E106                       	smpsAlterNote       $06
000980D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000980DC E109                       	smpsAlterNote       $09
000980DE E701                       	dc.b	smpsNoAttack, $01
000980E0 E10F                       	smpsAlterNote       $0F
000980E2 E701                       	dc.b	smpsNoAttack, $01
000980E4 E110                       	smpsAlterNote       $10
000980E6 8001                       	dc.b	nRst, $01
000980E8 E10B                       	smpsAlterNote       $0B
000980EA C606 8001                  	dc.b	nA5, $06, nRst, $01
000980EE E109                       	smpsAlterNote       $09
000980F0 C40D                       	dc.b	nG5, $0D
000980F2 E103                       	smpsAlterNote       $03
000980F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000980F8 E106                       	smpsAlterNote       $06
000980FA E701                       	dc.b	smpsNoAttack, $01
000980FC E10C                       	smpsAlterNote       $0C
000980FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098102 E106                       	smpsAlterNote       $06
00098104 E701                       	dc.b	smpsNoAttack, $01
00098106 E103                       	smpsAlterNote       $03
00098108 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009810C E109                       	smpsAlterNote       $09
0009810E E701                       	dc.b	smpsNoAttack, $01
00098110 E10D                       	smpsAlterNote       $0D
00098112 E701                       	dc.b	smpsNoAttack, $01
00098114 E10C                       	smpsAlterNote       $0C
00098116 E701                       	dc.b	smpsNoAttack, $01
00098118 E106                       	smpsAlterNote       $06
0009811A E701                       	dc.b	smpsNoAttack, $01
0009811C E102                       	smpsAlterNote       $02
0009811E E701                       	dc.b	smpsNoAttack, $01
00098120 E103                       	smpsAlterNote       $03
00098122 8001                       	dc.b	nRst, $01
00098124 E10B                       	smpsAlterNote       $0B
00098126 C60D                       	dc.b	nA5, $0D
00098128 E108                       	smpsAlterNote       $08
0009812A E701                       	dc.b	smpsNoAttack, $01
0009812C E104                       	smpsAlterNote       $04
0009812E E701                       	dc.b	smpsNoAttack, $01
00098130 E108                       	smpsAlterNote       $08
00098132 E701                       	dc.b	smpsNoAttack, $01
00098134 E10B                       	smpsAlterNote       $0B
00098136 E701                       	dc.b	smpsNoAttack, $01
00098138 E10F                       	smpsAlterNote       $0F
0009813A E701                       	dc.b	smpsNoAttack, $01
0009813C E10B                       	smpsAlterNote       $0B
0009813E E701                       	dc.b	smpsNoAttack, $01
00098140 E105                       	smpsAlterNote       $05
00098142 E701                       	dc.b	smpsNoAttack, $01
00098144 E104                       	smpsAlterNote       $04
00098146 E701                       	dc.b	smpsNoAttack, $01
00098148 E108                       	smpsAlterNote       $08
0009814A E701                       	dc.b	smpsNoAttack, $01
0009814C E10E                       	smpsAlterNote       $0E
0009814E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098152 E10B                       	smpsAlterNote       $0B
00098154 E701                       	dc.b	smpsNoAttack, $01
00098156 E105                       	smpsAlterNote       $05
00098158 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009815C E10C                       	smpsAlterNote       $0C
0009815E C70E                       	dc.b	nBb5, $0E
00098160 E106                       	smpsAlterNote       $06
00098162 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098166 E10C                       	smpsAlterNote       $0C
00098168 E701                       	dc.b	smpsNoAttack, $01
0009816A E10F                       	smpsAlterNote       $0F
0009816C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098170 E109                       	smpsAlterNote       $09
00098172 E701                       	dc.b	smpsNoAttack, $01
00098174 E105                       	smpsAlterNote       $05
00098176 E701                       	dc.b	smpsNoAttack, $01
00098178 E106                       	smpsAlterNote       $06
0009817A E701                       	dc.b	smpsNoAttack, $01
0009817C E10C                       	smpsAlterNote       $0C
0009817E E701                       	dc.b	smpsNoAttack, $01
00098180 E110                       	smpsAlterNote       $10
00098182 E701                       	dc.b	smpsNoAttack, $01
00098184 E10C                       	smpsAlterNote       $0C
00098186 E701                       	dc.b	smpsNoAttack, $01
00098188 E109                       	smpsAlterNote       $09
0009818A E701                       	dc.b	smpsNoAttack, $01
0009818C E105                       	smpsAlterNote       $05
0009818E E701                       	dc.b	smpsNoAttack, $01
00098190 E106                       	smpsAlterNote       $06
00098192 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00098196 E107                       	smpsAlterNote       $07
00098198 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0009819D E108                       	smpsAlterNote       $08
0009819F CD0D                       	dc.b	nE6, $0D
000981A1 E107                       	smpsAlterNote       $07
000981A3 CB0D                       	dc.b	nD6, $0D
000981A5 E104                       	smpsAlterNote       $04
000981A7 E701                       	dc.b	smpsNoAttack, $01
000981A9 E100                       	smpsAlterNote       $00
000981AB E701                       	dc.b	smpsNoAttack, $01
000981AD E101                       	smpsAlterNote       $01
000981AF E701                       	dc.b	smpsNoAttack, $01
000981B1 E107                       	smpsAlterNote       $07
000981B3 E701                       	dc.b	smpsNoAttack, $01
000981B5 E10B                       	smpsAlterNote       $0B
000981B7 E701                       	dc.b	smpsNoAttack, $01
000981B9 E107                       	smpsAlterNote       $07
000981BB E701                       	dc.b	smpsNoAttack, $01
000981BD E104                       	smpsAlterNote       $04
000981BF E701                       	dc.b	smpsNoAttack, $01
000981C1 E100                       	smpsAlterNote       $00
000981C3 E701                       	dc.b	smpsNoAttack, $01
000981C5 E104                       	smpsAlterNote       $04
000981C7 E701                       	dc.b	smpsNoAttack, $01
000981C9 E10A                       	smpsAlterNote       $0A
000981CB E701                       	dc.b	smpsNoAttack, $01
000981CD E10B                       	smpsAlterNote       $0B
000981CF E701                       	dc.b	smpsNoAttack, $01
000981D1 E108                       	smpsAlterNote       $08
000981D3 CC0D                       	dc.b	nEb6, $0D
000981D5 E105                       	smpsAlterNote       $05
000981D7 E701                       	dc.b	smpsNoAttack, $01
000981D9 E101                       	smpsAlterNote       $01
000981DB E701                       	dc.b	smpsNoAttack, $01
000981DD E102                       	smpsAlterNote       $02
000981DF E701                       	dc.b	smpsNoAttack, $01
000981E1 E108                       	smpsAlterNote       $08
000981E3 E701                       	dc.b	smpsNoAttack, $01
000981E5 E106                       	smpsAlterNote       $06
000981E7 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
000981F3 8001                       	dc.b	nRst, $01
000981F5 E107                       	smpsAlterNote       $07
000981F7 CB0D                       	dc.b	nD6, $0D
000981F9 E104                       	smpsAlterNote       $04
000981FB E701                       	dc.b	smpsNoAttack, $01
000981FD E100                       	smpsAlterNote       $00
000981FF E701                       	dc.b	smpsNoAttack, $01
00098201 E104                       	smpsAlterNote       $04
00098203 E701                       	dc.b	smpsNoAttack, $01
00098205 E107                       	smpsAlterNote       $07
00098207 E701                       	dc.b	smpsNoAttack, $01
00098209 E10B                       	smpsAlterNote       $0B
0009820B E701                       	dc.b	smpsNoAttack, $01
0009820D E107                       	smpsAlterNote       $07
0009820F E701                       	dc.b	smpsNoAttack, $01
00098211 E101                       	smpsAlterNote       $01
00098213 E701                       	dc.b	smpsNoAttack, $01
00098215 E100                       	smpsAlterNote       $00
00098217 E701                       	dc.b	smpsNoAttack, $01
00098219 E104                       	smpsAlterNote       $04
0009821B E701                       	dc.b	smpsNoAttack, $01
0009821D E10A                       	smpsAlterNote       $0A
0009821F E701                       	dc.b	smpsNoAttack, $01
00098221 E10B                       	smpsAlterNote       $0B
00098223 8001                       	dc.b	nRst, $01
00098225 E109                       	smpsAlterNote       $09
00098227 CE0A                       	dc.b	nF6, $0A
00098229 E108                       	smpsAlterNote       $08
0009822B CC07                       	dc.b	nEb6, $07
0009822D E106                       	smpsAlterNote       $06
0009822F C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0009823B E107                       	smpsAlterNote       $07
0009823D CB0D                       	dc.b	nD6, $0D
0009823F E101                       	smpsAlterNote       $01
00098241 E701                       	dc.b	smpsNoAttack, $01
00098243 E100                       	smpsAlterNote       $00
00098245 E701                       	dc.b	smpsNoAttack, $01
00098247 E104                       	smpsAlterNote       $04
00098249 E701                       	dc.b	smpsNoAttack, $01
0009824B E10A                       	smpsAlterNote       $0A
0009824D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098251 E107                       	smpsAlterNote       $07
00098253 E701                       	dc.b	smpsNoAttack, $01
00098255 E101                       	smpsAlterNote       $01
00098257 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009825B E107                       	smpsAlterNote       $07
0009825D E701                       	dc.b	smpsNoAttack, $01
0009825F E10A                       	smpsAlterNote       $0A
00098261 E701                       	dc.b	smpsNoAttack, $01
00098263 E10B                       	smpsAlterNote       $0B
00098265 8001                       	dc.b	nRst, $01
00098267 E108                       	smpsAlterNote       $08
00098269 CC0D                       	dc.b	nEb6, $0D
0009826B E102                       	smpsAlterNote       $02
0009826D E701                       	dc.b	smpsNoAttack, $01
0009826F E101                       	smpsAlterNote       $01
00098271 E701                       	dc.b	smpsNoAttack, $01
00098273 E105                       	smpsAlterNote       $05
00098275 E701                       	dc.b	smpsNoAttack, $01
00098277 E108                       	smpsAlterNote       $08
00098279 8001                       	dc.b	nRst, $01
0009827B E106                       	smpsAlterNote       $06
0009827D C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00098289 8001                       	dc.b	nRst, $01
0009828B E107                       	smpsAlterNote       $07
0009828D CB0D                       	dc.b	nD6, $0D
0009828F E101                       	smpsAlterNote       $01
00098291 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098295 E104                       	smpsAlterNote       $04
00098297 E701                       	dc.b	smpsNoAttack, $01
00098299 E10A                       	smpsAlterNote       $0A
0009829B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009829F E104                       	smpsAlterNote       $04
000982A1 E701                       	dc.b	smpsNoAttack, $01
000982A3 E101                       	smpsAlterNote       $01
000982A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000982A9 E107                       	smpsAlterNote       $07
000982AB E701                       	dc.b	smpsNoAttack, $01
000982AD E10B                       	smpsAlterNote       $0B
000982AF E701                       	dc.b	smpsNoAttack, $01
000982B1 E10A                       	smpsAlterNote       $0A
000982B3 E701                       	dc.b	smpsNoAttack, $01
000982B5 E104                       	smpsAlterNote       $04
000982B7 E701                       	dc.b	smpsNoAttack, $01
000982B9 E100                       	smpsAlterNote       $00
000982BB E701                       	dc.b	smpsNoAttack, $01
000982BD E101                       	smpsAlterNote       $01
000982BF 801C                       	dc.b	nRst, $1C
000982C3 E107                       	smpsAlterNote       $07
000982C5 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000982C9 E603                       	smpsAlterVol        $03
000982CB F6F1 AD                    	smpsJump            music84_Jump03
000982CE                            
000982CE                            ; FM3 Data
000982CE                            music84_FM3:
000982CE E0C0                       	smpsPan             panCenter, $00
000982D2 E109                       	smpsAlterNote       $09
000982D4 C203 8007                  	dc.b	nF5, $03, nRst, $07
000982D8 E108                       	smpsAlterNote       $08
000982DA C103 800B                  	dc.b	nE5, $03, nRst, $0B
000982DE E10B                       	smpsAlterNote       $0B
000982E0 BA03 8006                  	dc.b	nA4, $03, nRst, $06
000982E6 E040                       	smpsPan             panRight, $00
000982E8 E110                       	smpsAlterNote       $10
000982EA E6F9                       	smpsAlterVol        $F9
000982EC C702 8001                  	dc.b	nBb5, $02, nRst, $01
000982F0 E10F                       	smpsAlterNote       $0F
000982F2 C603                       	dc.b	nA5, $03
000982F4 E10D                       	smpsAlterNote       $0D
000982F6 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000982FC E10C                       	smpsAlterNote       $0C
000982FE C103 8001                  	dc.b	nE5, $03, nRst, $01
00098302 E10A                       	smpsAlterNote       $0A
00098304 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00098308 E10F                       	smpsAlterNote       $0F
0009830A BA01 8001                  	dc.b	nA4, $01, nRst, $01
0009830E E0C0                       	smpsPan             panCenter, $00
00098312 E109                       	smpsAlterNote       $09
00098314 E609                       	smpsAlterVol        $09
00098316 B603                       	dc.b	nF4, $03
00098318                            
00098318                            music84_Jump02:
00098318 E70A                       	dc.b	smpsNoAttack, $0A
0009831A E103                       	smpsAlterNote       $03
0009831C E701                       	dc.b	smpsNoAttack, $01
0009831E E102                       	smpsAlterNote       $02
00098320 E701                       	dc.b	smpsNoAttack, $01
00098322 E106                       	smpsAlterNote       $06
00098324 E701                       	dc.b	smpsNoAttack, $01
00098326 E10C                       	smpsAlterNote       $0C
00098328 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009832C E109                       	smpsAlterNote       $09
0009832E E701                       	dc.b	smpsNoAttack, $01
00098330 E103                       	smpsAlterNote       $03
00098332 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098336 E109                       	smpsAlterNote       $09
00098338 E701                       	dc.b	smpsNoAttack, $01
0009833A E10C                       	smpsAlterNote       $0C
0009833C E701                       	dc.b	smpsNoAttack, $01
0009833E E10D                       	smpsAlterNote       $0D
00098340 8001                       	dc.b	nRst, $01
00098342 E109                       	smpsAlterNote       $09
00098344 B80D                       	dc.b	nG4, $0D
00098346 E103                       	smpsAlterNote       $03
00098348 E701                       	dc.b	smpsNoAttack, $01
0009834A E102                       	smpsAlterNote       $02
0009834C E701                       	dc.b	smpsNoAttack, $01
0009834E E106                       	smpsAlterNote       $06
00098350 E701                       	dc.b	smpsNoAttack, $01
00098352 E10C                       	smpsAlterNote       $0C
00098354 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098358 E109                       	smpsAlterNote       $09
0009835A E701                       	dc.b	smpsNoAttack, $01
0009835C E103                       	smpsAlterNote       $03
0009835E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098362 E109                       	smpsAlterNote       $09
00098364 E701                       	dc.b	smpsNoAttack, $01
00098366 E10C                       	smpsAlterNote       $0C
00098368 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009836C E106                       	smpsAlterNote       $06
0009836E E701                       	dc.b	smpsNoAttack, $01
00098370 E102                       	smpsAlterNote       $02
00098372 E701                       	dc.b	smpsNoAttack, $01
00098374 E103                       	smpsAlterNote       $03
00098376 E701                       	dc.b	smpsNoAttack, $01
00098378 E109                       	smpsAlterNote       $09
0009837A E701                       	dc.b	smpsNoAttack, $01
0009837C E10D                       	smpsAlterNote       $0D
0009837E E701                       	dc.b	smpsNoAttack, $01
00098380 E109                       	smpsAlterNote       $09
00098382 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00098386 E10B                       	smpsAlterNote       $0B
00098388 BA0D                       	dc.b	nA4, $0D
0009838A E105                       	smpsAlterNote       $05
0009838C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098390 E108                       	smpsAlterNote       $08
00098392 E701                       	dc.b	smpsNoAttack, $01
00098394 E10E                       	smpsAlterNote       $0E
00098396 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009839A E108                       	smpsAlterNote       $08
0009839C E701                       	dc.b	smpsNoAttack, $01
0009839E E104                       	smpsAlterNote       $04
000983A0 E701                       	dc.b	smpsNoAttack, $01
000983A2 E105                       	smpsAlterNote       $05
000983A4 E701                       	dc.b	smpsNoAttack, $01
000983A6 E10B                       	smpsAlterNote       $0B
000983A8 E701                       	dc.b	smpsNoAttack, $01
000983AA E10F                       	smpsAlterNote       $0F
000983AC E701                       	dc.b	smpsNoAttack, $01
000983AE E10B                       	smpsAlterNote       $0B
000983B0 E701                       	dc.b	smpsNoAttack, $01
000983B2 E108                       	smpsAlterNote       $08
000983B4 E701                       	dc.b	smpsNoAttack, $01
000983B6 E104                       	smpsAlterNote       $04
000983B8 E701                       	dc.b	smpsNoAttack, $01
000983BA E108                       	smpsAlterNote       $08
000983BC E701                       	dc.b	smpsNoAttack, $01
000983BE E10E                       	smpsAlterNote       $0E
000983C0 E701                       	dc.b	smpsNoAttack, $01
000983C2 E10F                       	smpsAlterNote       $0F
000983C4 E701                       	dc.b	smpsNoAttack, $01
000983C6 E10B                       	smpsAlterNote       $0B
000983C8 E701                       	dc.b	smpsNoAttack, $01
000983CA E105                       	smpsAlterNote       $05
000983CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000983D0 E108                       	smpsAlterNote       $08
000983D2 E701                       	dc.b	smpsNoAttack, $01
000983D4 E10E                       	smpsAlterNote       $0E
000983D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000983DA E108                       	smpsAlterNote       $08
000983DC E701                       	dc.b	smpsNoAttack, $01
000983DE E105                       	smpsAlterNote       $05
000983E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000983E4 E10B                       	smpsAlterNote       $0B
000983E6 E701                       	dc.b	smpsNoAttack, $01
000983E8 E10F                       	smpsAlterNote       $0F
000983EA E701                       	dc.b	smpsNoAttack, $01
000983EC E10E                       	smpsAlterNote       $0E
000983EE E701                       	dc.b	smpsNoAttack, $01
000983F0 E108                       	smpsAlterNote       $08
000983F2 E701                       	dc.b	smpsNoAttack, $01
000983F4 E104                       	smpsAlterNote       $04
000983F6 E701                       	dc.b	smpsNoAttack, $01
000983F8 E105                       	smpsAlterNote       $05
000983FA 8001                       	dc.b	nRst, $01
000983FC E108                       	smpsAlterNote       $08
000983FE B50A                       	dc.b	nE4, $0A
00098400 E109                       	smpsAlterNote       $09
00098402 B60D                       	dc.b	nF4, $0D
00098404 E106                       	smpsAlterNote       $06
00098406 E701                       	dc.b	smpsNoAttack, $01
00098408 E103                       	smpsAlterNote       $03
0009840A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009840E E109                       	smpsAlterNote       $09
00098410 E701                       	dc.b	smpsNoAttack, $01
00098412 E10D                       	smpsAlterNote       $0D
00098414 E701                       	dc.b	smpsNoAttack, $01
00098416 E10C                       	smpsAlterNote       $0C
00098418 E701                       	dc.b	smpsNoAttack, $01
0009841A E106                       	smpsAlterNote       $06
0009841C E701                       	dc.b	smpsNoAttack, $01
0009841E E102                       	smpsAlterNote       $02
00098420 E701                       	dc.b	smpsNoAttack, $01
00098422 E106                       	smpsAlterNote       $06
00098424 E701                       	dc.b	smpsNoAttack, $01
00098426 E109                       	smpsAlterNote       $09
00098428 E701                       	dc.b	smpsNoAttack, $01
0009842A E10D                       	smpsAlterNote       $0D
0009842C E701                       	dc.b	smpsNoAttack, $01
0009842E E109                       	smpsAlterNote       $09
00098430 B80D                       	dc.b	nG4, $0D
00098432 E106                       	smpsAlterNote       $06
00098434 E701                       	dc.b	smpsNoAttack, $01
00098436 E103                       	smpsAlterNote       $03
00098438 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009843C E109                       	smpsAlterNote       $09
0009843E E701                       	dc.b	smpsNoAttack, $01
00098440 E10D                       	smpsAlterNote       $0D
00098442 E701                       	dc.b	smpsNoAttack, $01
00098444 E10C                       	smpsAlterNote       $0C
00098446 E701                       	dc.b	smpsNoAttack, $01
00098448 E106                       	smpsAlterNote       $06
0009844A E701                       	dc.b	smpsNoAttack, $01
0009844C E102                       	smpsAlterNote       $02
0009844E E701                       	dc.b	smpsNoAttack, $01
00098450 E106                       	smpsAlterNote       $06
00098452 E701                       	dc.b	smpsNoAttack, $01
00098454 E109                       	smpsAlterNote       $09
00098456 E701                       	dc.b	smpsNoAttack, $01
00098458 E10D                       	smpsAlterNote       $0D
0009845A E701                       	dc.b	smpsNoAttack, $01
0009845C E109                       	smpsAlterNote       $09
0009845E E701                       	dc.b	smpsNoAttack, $01
00098460 E103                       	smpsAlterNote       $03
00098462 E701                       	dc.b	smpsNoAttack, $01
00098464 E102                       	smpsAlterNote       $02
00098466 E701                       	dc.b	smpsNoAttack, $01
00098468 E106                       	smpsAlterNote       $06
0009846A E701                       	dc.b	smpsNoAttack, $01
0009846C E10C                       	smpsAlterNote       $0C
0009846E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098472 E109                       	smpsAlterNote       $09
00098474 E701                       	dc.b	smpsNoAttack, $01
00098476 E10B                       	smpsAlterNote       $0B
00098478 BA0D                       	dc.b	nA4, $0D
0009847A E108                       	smpsAlterNote       $08
0009847C E701                       	dc.b	smpsNoAttack, $01
0009847E E104                       	smpsAlterNote       $04
00098480 E701                       	dc.b	smpsNoAttack, $01
00098482 E108                       	smpsAlterNote       $08
00098484 E701                       	dc.b	smpsNoAttack, $01
00098486 E10B                       	smpsAlterNote       $0B
00098488 E701                       	dc.b	smpsNoAttack, $01
0009848A E10F                       	smpsAlterNote       $0F
0009848C E701                       	dc.b	smpsNoAttack, $01
0009848E E10B                       	smpsAlterNote       $0B
00098490 E701                       	dc.b	smpsNoAttack, $01
00098492 E105                       	smpsAlterNote       $05
00098494 E701                       	dc.b	smpsNoAttack, $01
00098496 E104                       	smpsAlterNote       $04
00098498 E701                       	dc.b	smpsNoAttack, $01
0009849A E108                       	smpsAlterNote       $08
0009849C E701                       	dc.b	smpsNoAttack, $01
0009849E E10E                       	smpsAlterNote       $0E
000984A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000984A4 E10B                       	smpsAlterNote       $0B
000984A6 E701                       	dc.b	smpsNoAttack, $01
000984A8 E105                       	smpsAlterNote       $05
000984AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000984AE E10B                       	smpsAlterNote       $0B
000984B0 E701                       	dc.b	smpsNoAttack, $01
000984B2 E10E                       	smpsAlterNote       $0E
000984B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000984B8 E108                       	smpsAlterNote       $08
000984BA E701                       	dc.b	smpsNoAttack, $01
000984BC E104                       	smpsAlterNote       $04
000984BE E701                       	dc.b	smpsNoAttack, $01
000984C0 E105                       	smpsAlterNote       $05
000984C2 E701                       	dc.b	smpsNoAttack, $01
000984C4 E10B                       	smpsAlterNote       $0B
000984C6 E701                       	dc.b	smpsNoAttack, $01
000984C8 E10F                       	smpsAlterNote       $0F
000984CA E701                       	dc.b	smpsNoAttack, $01
000984CC E10B                       	smpsAlterNote       $0B
000984CE E701                       	dc.b	smpsNoAttack, $01
000984D0 E108                       	smpsAlterNote       $08
000984D2 E701                       	dc.b	smpsNoAttack, $01
000984D4 E105                       	smpsAlterNote       $05
000984D6 8001                       	dc.b	nRst, $01
000984D8 E109                       	smpsAlterNote       $09
000984DA B609 8001                  	dc.b	nF4, $09, nRst, $01
000984DE E108                       	smpsAlterNote       $08
000984E0 B506 8001                  	dc.b	nE4, $06, nRst, $01
000984E4 E107                       	smpsAlterNote       $07
000984E6 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000984EA E108                       	smpsAlterNote       $08
000984EC B502 8001                  	dc.b	nE4, $02, nRst, $01
000984F0 E109                       	smpsAlterNote       $09
000984F2 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000984F8 E10B                       	smpsAlterNote       $0B
000984FA BA0D                       	dc.b	nA4, $0D
000984FC E108                       	smpsAlterNote       $08
000984FE E701                       	dc.b	smpsNoAttack, $01
00098500 E104                       	smpsAlterNote       $04
00098502 E701                       	dc.b	smpsNoAttack, $01
00098504 E108                       	smpsAlterNote       $08
00098506 E701                       	dc.b	smpsNoAttack, $01
00098508 E10E                       	smpsAlterNote       $0E
0009850A E701                       	dc.b	smpsNoAttack, $01
0009850C E10F                       	smpsAlterNote       $0F
0009850E E701                       	dc.b	smpsNoAttack, $01
00098510 E10B                       	smpsAlterNote       $0B
00098512 E701                       	dc.b	smpsNoAttack, $01
00098514 E105                       	smpsAlterNote       $05
00098516 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009851A E108                       	smpsAlterNote       $08
0009851C E701                       	dc.b	smpsNoAttack, $01
0009851E E10E                       	smpsAlterNote       $0E
00098520 E701                       	dc.b	smpsNoAttack, $01
00098522 E10F                       	smpsAlterNote       $0F
00098524 8001                       	dc.b	nRst, $01
00098526 E109                       	smpsAlterNote       $09
00098528 C20D                       	dc.b	nF5, $0D
0009852A E103                       	smpsAlterNote       $03
0009852C E701                       	dc.b	smpsNoAttack, $01
0009852E E102                       	smpsAlterNote       $02
00098530 E701                       	dc.b	smpsNoAttack, $01
00098532 E106                       	smpsAlterNote       $06
00098534 E701                       	dc.b	smpsNoAttack, $01
00098536 E10C                       	smpsAlterNote       $0C
00098538 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009853C E109                       	smpsAlterNote       $09
0009853E E701                       	dc.b	smpsNoAttack, $01
00098540 E103                       	smpsAlterNote       $03
00098542 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098546 E109                       	smpsAlterNote       $09
00098548 E701                       	dc.b	smpsNoAttack, $01
0009854A E10C                       	smpsAlterNote       $0C
0009854C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098550 E106                       	smpsAlterNote       $06
00098552 E701                       	dc.b	smpsNoAttack, $01
00098554 E102                       	smpsAlterNote       $02
00098556 E701                       	dc.b	smpsNoAttack, $01
00098558 E103                       	smpsAlterNote       $03
0009855A E701                       	dc.b	smpsNoAttack, $01
0009855C E109                       	smpsAlterNote       $09
0009855E E701                       	dc.b	smpsNoAttack, $01
00098560 E10D                       	smpsAlterNote       $0D
00098562 E701                       	dc.b	smpsNoAttack, $01
00098564 E109                       	smpsAlterNote       $09
00098566 E701                       	dc.b	smpsNoAttack, $01
00098568 E106                       	smpsAlterNote       $06
0009856A E701                       	dc.b	smpsNoAttack, $01
0009856C E102                       	smpsAlterNote       $02
0009856E E701                       	dc.b	smpsNoAttack, $01
00098570 E106                       	smpsAlterNote       $06
00098572 E701                       	dc.b	smpsNoAttack, $01
00098574 E10C                       	smpsAlterNote       $0C
00098576 E701                       	dc.b	smpsNoAttack, $01
00098578 E10D                       	smpsAlterNote       $0D
0009857A E701                       	dc.b	smpsNoAttack, $01
0009857C E109                       	smpsAlterNote       $09
0009857E E701                       	dc.b	smpsNoAttack, $01
00098580 E103                       	smpsAlterNote       $03
00098582 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098586 E106                       	smpsAlterNote       $06
00098588 E701                       	dc.b	smpsNoAttack, $01
0009858A E10C                       	smpsAlterNote       $0C
0009858C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098590 E106                       	smpsAlterNote       $06
00098592 E701                       	dc.b	smpsNoAttack, $01
00098594 E103                       	smpsAlterNote       $03
00098596 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009859A E109                       	smpsAlterNote       $09
0009859C E701                       	dc.b	smpsNoAttack, $01
0009859E E10D                       	smpsAlterNote       $0D
000985A0 E701                       	dc.b	smpsNoAttack, $01
000985A2 E10C                       	smpsAlterNote       $0C
000985A4 E701                       	dc.b	smpsNoAttack, $01
000985A6 E106                       	smpsAlterNote       $06
000985A8 E701                       	dc.b	smpsNoAttack, $01
000985AA E102                       	smpsAlterNote       $02
000985AC E701                       	dc.b	smpsNoAttack, $01
000985AE E106                       	smpsAlterNote       $06
000985B0 E701                       	dc.b	smpsNoAttack, $01
000985B2 E109                       	smpsAlterNote       $09
000985B4 E701                       	dc.b	smpsNoAttack, $01
000985B6 E10D                       	smpsAlterNote       $0D
000985B8 E701                       	dc.b	smpsNoAttack, $01
000985BA E109                       	smpsAlterNote       $09
000985BC E701                       	dc.b	smpsNoAttack, $01
000985BE E103                       	smpsAlterNote       $03
000985C0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000985C4 E109                       	smpsAlterNote       $09
000985C6 C206                       	dc.b	nF5, $06
000985C8 E108                       	smpsAlterNote       $08
000985CA C10E                       	dc.b	nE5, $0E
000985CC E102                       	smpsAlterNote       $02
000985CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000985D2 E108                       	smpsAlterNote       $08
000985D4 E701                       	dc.b	smpsNoAttack, $01
000985D6 E10B                       	smpsAlterNote       $0B
000985D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000985DC E105                       	smpsAlterNote       $05
000985DE E701                       	dc.b	smpsNoAttack, $01
000985E0 E101                       	smpsAlterNote       $01
000985E2 E701                       	dc.b	smpsNoAttack, $01
000985E4 E102                       	smpsAlterNote       $02
000985E6 E701                       	dc.b	smpsNoAttack, $01
000985E8 E108                       	smpsAlterNote       $08
000985EA E701                       	dc.b	smpsNoAttack, $01
000985EC E10C                       	smpsAlterNote       $0C
000985EE E701                       	dc.b	smpsNoAttack, $01
000985F0 E107                       	smpsAlterNote       $07
000985F2 BF0E                       	dc.b	nD5, $0E
000985F4 E101                       	smpsAlterNote       $01
000985F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000985FA E107                       	smpsAlterNote       $07
000985FC E701                       	dc.b	smpsNoAttack, $01
000985FE E10A                       	smpsAlterNote       $0A
00098600 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098604 E104                       	smpsAlterNote       $04
00098606 E701                       	dc.b	smpsNoAttack, $01
00098608 E100                       	smpsAlterNote       $00
0009860A E701                       	dc.b	smpsNoAttack, $01
0009860C E104                       	smpsAlterNote       $04
0009860E E701                       	dc.b	smpsNoAttack, $01
00098610 E107                       	smpsAlterNote       $07
00098612 E701                       	dc.b	smpsNoAttack, $01
00098614 E10B                       	smpsAlterNote       $0B
00098616 E701                       	dc.b	smpsNoAttack, $01
00098618 E107                       	smpsAlterNote       $07
0009861A E701                       	dc.b	smpsNoAttack, $01
0009861C E101                       	smpsAlterNote       $01
0009861E E701                       	dc.b	smpsNoAttack, $01
00098620 E100                       	smpsAlterNote       $00
00098622 E701                       	dc.b	smpsNoAttack, $01
00098624 E104                       	smpsAlterNote       $04
00098626 E701                       	dc.b	smpsNoAttack, $01
00098628 E10A                       	smpsAlterNote       $0A
0009862A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009862E E107                       	smpsAlterNote       $07
00098630 E701                       	dc.b	smpsNoAttack, $01
00098632 E101                       	smpsAlterNote       $01
00098634 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098638 E107                       	smpsAlterNote       $07
0009863A E701                       	dc.b	smpsNoAttack, $01
0009863C E10A                       	smpsAlterNote       $0A
0009863E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098642 E104                       	smpsAlterNote       $04
00098644 E701                       	dc.b	smpsNoAttack, $01
00098646 E100                       	smpsAlterNote       $00
00098648 E701                       	dc.b	smpsNoAttack, $01
0009864A E101                       	smpsAlterNote       $01
0009864C E701                       	dc.b	smpsNoAttack, $01
0009864E E107                       	smpsAlterNote       $07
00098650 E701                       	dc.b	smpsNoAttack, $01
00098652 E10B                       	smpsAlterNote       $0B
00098654 E701                       	dc.b	smpsNoAttack, $01
00098656 E107                       	smpsAlterNote       $07
00098658 E701                       	dc.b	smpsNoAttack, $01
0009865A E104                       	smpsAlterNote       $04
0009865C E701                       	dc.b	smpsNoAttack, $01
0009865E E100                       	smpsAlterNote       $00
00098660 E701                       	dc.b	smpsNoAttack, $01
00098662 E104                       	smpsAlterNote       $04
00098664 E701                       	dc.b	smpsNoAttack, $01
00098666 E10A                       	smpsAlterNote       $0A
00098668 E701                       	dc.b	smpsNoAttack, $01
0009866A E10B                       	smpsAlterNote       $0B
0009866C E701                       	dc.b	smpsNoAttack, $01
0009866E E107                       	smpsAlterNote       $07
00098670 E701                       	dc.b	smpsNoAttack, $01
00098672 E101                       	smpsAlterNote       $01
00098674 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098678 E104                       	smpsAlterNote       $04
0009867A E701                       	dc.b	smpsNoAttack, $01
0009867C E10A                       	smpsAlterNote       $0A
0009867E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098682 E104                       	smpsAlterNote       $04
00098684 E701                       	dc.b	smpsNoAttack, $01
00098686 E101                       	smpsAlterNote       $01
00098688 E701                       	dc.b	smpsNoAttack, $01
0009868C E107                       	smpsAlterNote       $07
0009868E E6FF                       	smpsAlterVol        $FF
00098690 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0009869C 8004                       	dc.b	nRst, $04
000986A0 E109                       	smpsAlterNote       $09
000986A2 E602                       	smpsAlterVol        $02
000986A4 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
000986AA E108                       	smpsAlterNote       $08
000986AC B502 8001                  	dc.b	nE4, $02, nRst, $01
000986B0 E109                       	smpsAlterNote       $09
000986B2 B60D                       	dc.b	nF4, $0D
000986B4 E106                       	smpsAlterNote       $06
000986B6 E701                       	dc.b	smpsNoAttack, $01
000986B8 E102                       	smpsAlterNote       $02
000986BA E701                       	dc.b	smpsNoAttack, $01
000986BC E106                       	smpsAlterNote       $06
000986BE E701                       	dc.b	smpsNoAttack, $01
000986C0 E109                       	smpsAlterNote       $09
000986C2 E701                       	dc.b	smpsNoAttack, $01
000986C4 E10D                       	smpsAlterNote       $0D
000986C6 E701                       	dc.b	smpsNoAttack, $01
000986C8 E109                       	smpsAlterNote       $09
000986CA E701                       	dc.b	smpsNoAttack, $01
000986CC E103                       	smpsAlterNote       $03
000986CE E701                       	dc.b	smpsNoAttack, $01
000986D0 E102                       	smpsAlterNote       $02
000986D2 E701                       	dc.b	smpsNoAttack, $01
000986D4 E106                       	smpsAlterNote       $06
000986D6 E701                       	dc.b	smpsNoAttack, $01
000986D8 E10C                       	smpsAlterNote       $0C
000986DA E701                       	dc.b	smpsNoAttack, $01
000986DC E10D                       	smpsAlterNote       $0D
000986DE 8001                       	dc.b	nRst, $01
000986E0 E109                       	smpsAlterNote       $09
000986E2 B80D                       	dc.b	nG4, $0D
000986E4 E106                       	smpsAlterNote       $06
000986E6 E701                       	dc.b	smpsNoAttack, $01
000986E8 E102                       	smpsAlterNote       $02
000986EA E701                       	dc.b	smpsNoAttack, $01
000986EC E106                       	smpsAlterNote       $06
000986EE E701                       	dc.b	smpsNoAttack, $01
000986F0 E10C                       	smpsAlterNote       $0C
000986F2 E701                       	dc.b	smpsNoAttack, $01
000986F4 E10D                       	smpsAlterNote       $0D
000986F6 E701                       	dc.b	smpsNoAttack, $01
000986F8 E109                       	smpsAlterNote       $09
000986FA E701                       	dc.b	smpsNoAttack, $01
000986FC E103                       	smpsAlterNote       $03
000986FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098702 E106                       	smpsAlterNote       $06
00098704 E701                       	dc.b	smpsNoAttack, $01
00098706 E10C                       	smpsAlterNote       $0C
00098708 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009870C E106                       	smpsAlterNote       $06
0009870E E701                       	dc.b	smpsNoAttack, $01
00098710 E103                       	smpsAlterNote       $03
00098712 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098716 E109                       	smpsAlterNote       $09
00098718 E701                       	dc.b	smpsNoAttack, $01
0009871A E10D                       	smpsAlterNote       $0D
0009871C E701                       	dc.b	smpsNoAttack, $01
0009871E E10C                       	smpsAlterNote       $0C
00098720 E701                       	dc.b	smpsNoAttack, $01
00098722 E109                       	smpsAlterNote       $09
00098724 8001                       	dc.b	nRst, $01
00098726 E10B                       	smpsAlterNote       $0B
00098728 BA03                       	dc.b	nA4, $03
0009872A E10C                       	smpsAlterNote       $0C
0009872C BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00098730 E10B                       	smpsAlterNote       $0B
00098732 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00098738 E10C                       	smpsAlterNote       $0C
0009873A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009873E E10B                       	smpsAlterNote       $0B
00098740 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00098746 E10C                       	smpsAlterNote       $0C
00098748 D303                       	dc.b	nBb6, $03
0009874A E10B                       	smpsAlterNote       $0B
0009874C D20D                       	dc.b	nA6, $0D
0009874E E108                       	smpsAlterNote       $08
00098750 E701                       	dc.b	smpsNoAttack, $01
00098752 E104                       	smpsAlterNote       $04
00098754 E701                       	dc.b	smpsNoAttack, $01
00098756 E105                       	smpsAlterNote       $05
00098758 E701                       	dc.b	smpsNoAttack, $01
0009875A E10B                       	smpsAlterNote       $0B
0009875C E701                       	dc.b	smpsNoAttack, $01
0009875E E10F                       	smpsAlterNote       $0F
00098760 E701                       	dc.b	smpsNoAttack, $01
00098762 E10B                       	smpsAlterNote       $0B
00098764 E701                       	dc.b	smpsNoAttack, $01
00098766 E108                       	smpsAlterNote       $08
00098768 E701                       	dc.b	smpsNoAttack, $01
0009876A E104                       	smpsAlterNote       $04
0009876C E701                       	dc.b	smpsNoAttack, $01
0009876E E108                       	smpsAlterNote       $08
00098770 E701                       	dc.b	smpsNoAttack, $01
00098772 E10E                       	smpsAlterNote       $0E
00098774 E701                       	dc.b	smpsNoAttack, $01
00098776 E10F                       	smpsAlterNote       $0F
00098778 E701                       	dc.b	smpsNoAttack, $01
0009877A E10B                       	smpsAlterNote       $0B
0009877C E701                       	dc.b	smpsNoAttack, $01
0009877E E105                       	smpsAlterNote       $05
00098780 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00098786 E109                       	smpsAlterNote       $09
00098788 CE07                       	dc.b	nF6, $07
0009878A E108                       	smpsAlterNote       $08
0009878C CD06 8001                  	dc.b	nE6, $06, nRst, $01
00098790 E109                       	smpsAlterNote       $09
00098792 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00098796 E108                       	smpsAlterNote       $08
00098798 CC0D                       	dc.b	nEb6, $0D
0009879A E102                       	smpsAlterNote       $02
0009879C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000987A0 E108                       	smpsAlterNote       $08
000987A2 E701                       	dc.b	smpsNoAttack, $01
000987A4 E10B                       	smpsAlterNote       $0B
000987A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000987AA E105                       	smpsAlterNote       $05
000987AC E701                       	dc.b	smpsNoAttack, $01
000987AE E101                       	smpsAlterNote       $01
000987B0 E701                       	dc.b	smpsNoAttack, $01
000987B2 E102                       	smpsAlterNote       $02
000987B4 E701                       	dc.b	smpsNoAttack, $01
000987B6 E108                       	smpsAlterNote       $08
000987B8 E701                       	dc.b	smpsNoAttack, $01
000987BA E10C                       	smpsAlterNote       $0C
000987BC E701                       	dc.b	smpsNoAttack, $01
000987BE E108                       	smpsAlterNote       $08
000987C0 E701                       	dc.b	smpsNoAttack, $01
000987C2 E105                       	smpsAlterNote       $05
000987C4 E701                       	dc.b	smpsNoAttack, $01
000987C6 E101                       	smpsAlterNote       $01
000987C8 E701                       	dc.b	smpsNoAttack, $01
000987CA E105                       	smpsAlterNote       $05
000987CC E701                       	dc.b	smpsNoAttack, $01
000987CE E10B                       	smpsAlterNote       $0B
000987D0 E701                       	dc.b	smpsNoAttack, $01
000987D2 E10C                       	smpsAlterNote       $0C
000987D4 E701                       	dc.b	smpsNoAttack, $01
000987D6 E108                       	smpsAlterNote       $08
000987D8 E701                       	dc.b	smpsNoAttack, $01
000987DA E107                       	smpsAlterNote       $07
000987DC CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000987E6 E10B                       	smpsAlterNote       $0B
000987E8 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000987F2 E109                       	smpsAlterNote       $09
000987F4 C203                       	dc.b	nF5, $03
000987F6 E108                       	smpsAlterNote       $08
000987F8 C103 8001                  	dc.b	nE5, $03, nRst, $01
000987FC E109                       	smpsAlterNote       $09
000987FE C20D                       	dc.b	nF5, $0D
00098800 E108                       	smpsAlterNote       $08
00098802 C10E                       	dc.b	nE5, $0E
00098804 E107                       	smpsAlterNote       $07
00098806 BF0D                       	dc.b	nD5, $0D
00098808 E104                       	smpsAlterNote       $04
0009880A E701                       	dc.b	smpsNoAttack, $01
0009880C E100                       	smpsAlterNote       $00
0009880E E701                       	dc.b	smpsNoAttack, $01
00098810 E104                       	smpsAlterNote       $04
00098812 E701                       	dc.b	smpsNoAttack, $01
00098814 E107                       	smpsAlterNote       $07
00098816 E701                       	dc.b	smpsNoAttack, $01
00098818 E10B                       	smpsAlterNote       $0B
0009881A E701                       	dc.b	smpsNoAttack, $01
0009881C E107                       	smpsAlterNote       $07
0009881E E701                       	dc.b	smpsNoAttack, $01
00098820 E101                       	smpsAlterNote       $01
00098822 E701                       	dc.b	smpsNoAttack, $01
00098824 E100                       	smpsAlterNote       $00
00098826 E701                       	dc.b	smpsNoAttack, $01
00098828 E104                       	smpsAlterNote       $04
0009882A E701                       	dc.b	smpsNoAttack, $01
0009882C E10A                       	smpsAlterNote       $0A
0009882E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098832 E107                       	smpsAlterNote       $07
00098834 E701                       	dc.b	smpsNoAttack, $01
00098836 E101                       	smpsAlterNote       $01
00098838 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009883C E107                       	smpsAlterNote       $07
0009883E E701                       	dc.b	smpsNoAttack, $01
00098840 E10A                       	smpsAlterNote       $0A
00098842 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098846 E104                       	smpsAlterNote       $04
00098848 E701                       	dc.b	smpsNoAttack, $01
0009884A E100                       	smpsAlterNote       $00
0009884C E701                       	dc.b	smpsNoAttack, $01
0009884E E101                       	smpsAlterNote       $01
00098850 E701                       	dc.b	smpsNoAttack, $01
00098852 E107                       	smpsAlterNote       $07
00098854 E701                       	dc.b	smpsNoAttack, $01
00098856 E10B                       	smpsAlterNote       $0B
00098858 E701                       	dc.b	smpsNoAttack, $01
0009885A E107                       	smpsAlterNote       $07
0009885C E701                       	dc.b	smpsNoAttack, $01
0009885E E104                       	smpsAlterNote       $04
00098860 E701                       	dc.b	smpsNoAttack, $01
00098862 E100                       	smpsAlterNote       $00
00098864 E701                       	dc.b	smpsNoAttack, $01
00098866 E104                       	smpsAlterNote       $04
00098868 E701                       	dc.b	smpsNoAttack, $01
0009886A E10A                       	smpsAlterNote       $0A
0009886C E701                       	dc.b	smpsNoAttack, $01
0009886E E10B                       	smpsAlterNote       $0B
00098870 E701                       	dc.b	smpsNoAttack, $01
00098872 E107                       	smpsAlterNote       $07
00098874 E701                       	dc.b	smpsNoAttack, $01
00098876 E101                       	smpsAlterNote       $01
00098878 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009887C E104                       	smpsAlterNote       $04
0009887E E701                       	dc.b	smpsNoAttack, $01
00098880 E10A                       	smpsAlterNote       $0A
00098882 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098886 E104                       	smpsAlterNote       $04
00098888 E701                       	dc.b	smpsNoAttack, $01
0009888A E101                       	smpsAlterNote       $01
0009888C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098890 E107                       	smpsAlterNote       $07
00098892 E701                       	dc.b	smpsNoAttack, $01
00098894 E10B                       	smpsAlterNote       $0B
00098896 E701                       	dc.b	smpsNoAttack, $01
00098898 E10A                       	smpsAlterNote       $0A
0009889A E701                       	dc.b	smpsNoAttack, $01
0009889C E104                       	smpsAlterNote       $04
0009889E E701                       	dc.b	smpsNoAttack, $01
000988A0 E100                       	smpsAlterNote       $00
000988A2 E701                       	dc.b	smpsNoAttack, $01
000988A4 E104                       	smpsAlterNote       $04
000988A6 E701                       	dc.b	smpsNoAttack, $01
000988A8 E107                       	smpsAlterNote       $07
000988AA E701                       	dc.b	smpsNoAttack, $01
000988AC E10B                       	smpsAlterNote       $0B
000988AE E701                       	dc.b	smpsNoAttack, $01
000988B0 E107                       	smpsAlterNote       $07
000988B2 E701                       	dc.b	smpsNoAttack, $01
000988B4 E101                       	smpsAlterNote       $01
000988B6 E701                       	dc.b	smpsNoAttack, $01
000988B8 E100                       	smpsAlterNote       $00
000988BA E701                       	dc.b	smpsNoAttack, $01
000988BC E104                       	smpsAlterNote       $04
000988BE E701                       	dc.b	smpsNoAttack, $01
000988C0 E10A                       	smpsAlterNote       $0A
000988C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000988C6 E107                       	smpsAlterNote       $07
000988C8 E701                       	dc.b	smpsNoAttack, $01
000988CA E101                       	smpsAlterNote       $01
000988CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000988D0 E107                       	smpsAlterNote       $07
000988D2 E701                       	dc.b	smpsNoAttack, $01
000988D4 E10A                       	smpsAlterNote       $0A
000988D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000988DA E104                       	smpsAlterNote       $04
000988DC E701                       	dc.b	smpsNoAttack, $01
000988DE E100                       	smpsAlterNote       $00
000988E0 E701                       	dc.b	smpsNoAttack, $01
000988E2 E101                       	smpsAlterNote       $01
000988E4 E701                       	dc.b	smpsNoAttack, $01
000988E6 E107                       	smpsAlterNote       $07
000988E8 E701                       	dc.b	smpsNoAttack, $01
000988EA E10B                       	smpsAlterNote       $0B
000988EC E701                       	dc.b	smpsNoAttack, $01
000988EE E107                       	smpsAlterNote       $07
000988F0 E701                       	dc.b	smpsNoAttack, $01
000988F2 E104                       	smpsAlterNote       $04
000988F4 E701                       	dc.b	smpsNoAttack, $01
000988F6 E100                       	smpsAlterNote       $00
000988F8 E701                       	dc.b	smpsNoAttack, $01
000988FA E101                       	smpsAlterNote       $01
000988FC 8001                       	dc.b	nRst, $01
000988FE E109                       	smpsAlterNote       $09
00098900 C20D                       	dc.b	nF5, $0D
00098902 E106                       	smpsAlterNote       $06
00098904 E701                       	dc.b	smpsNoAttack, $01
00098906 E102                       	smpsAlterNote       $02
00098908 E701                       	dc.b	smpsNoAttack, $01
0009890A E106                       	smpsAlterNote       $06
0009890C E701                       	dc.b	smpsNoAttack, $01
0009890E E10C                       	smpsAlterNote       $0C
00098910 E701                       	dc.b	smpsNoAttack, $01
00098912 E10D                       	smpsAlterNote       $0D
00098914 E701                       	dc.b	smpsNoAttack, $01
00098916 E109                       	smpsAlterNote       $09
00098918 E701                       	dc.b	smpsNoAttack, $01
0009891A E103                       	smpsAlterNote       $03
0009891C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098920 E106                       	smpsAlterNote       $06
00098922 E701                       	dc.b	smpsNoAttack, $01
00098924 E10C                       	smpsAlterNote       $0C
00098926 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009892A E106                       	smpsAlterNote       $06
0009892C E701                       	dc.b	smpsNoAttack, $01
0009892E E103                       	smpsAlterNote       $03
00098930 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098934 E109                       	smpsAlterNote       $09
00098936 E701                       	dc.b	smpsNoAttack, $01
00098938 E10D                       	smpsAlterNote       $0D
0009893A E701                       	dc.b	smpsNoAttack, $01
0009893C E10C                       	smpsAlterNote       $0C
0009893E E701                       	dc.b	smpsNoAttack, $01
00098940 E109                       	smpsAlterNote       $09
00098942 8001                       	dc.b	nRst, $01
00098944 E108                       	smpsAlterNote       $08
00098946 C10D                       	dc.b	nE5, $0D
00098948 E109                       	smpsAlterNote       $09
0009894A C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0009894E E108                       	smpsAlterNote       $08
00098950 C10D                       	dc.b	nE5, $0D
00098952 E102                       	smpsAlterNote       $02
00098954 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098958 E105                       	smpsAlterNote       $05
0009895A E701                       	dc.b	smpsNoAttack, $01
0009895C E108                       	smpsAlterNote       $08
0009895E 8001                       	dc.b	nRst, $01
00098960 E107                       	smpsAlterNote       $07
00098962 BF0D                       	dc.b	nD5, $0D
00098964 E108                       	smpsAlterNote       $08
00098966 C107                       	dc.b	nE5, $07
00098968 E109                       	smpsAlterNote       $09
0009896A C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00098970 E10B                       	smpsAlterNote       $0B
00098972 C603                       	dc.b	nA5, $03
00098974 E10C                       	smpsAlterNote       $0C
00098976 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0009897C E10B                       	smpsAlterNote       $0B
0009897E C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00098984 E109                       	smpsAlterNote       $09
00098986 D003                       	dc.b	nG6, $03
00098988 E108                       	smpsAlterNote       $08
0009898A CD02 8001                  	dc.b	nE6, $02, nRst, $01
0009898E E10B                       	smpsAlterNote       $0B
00098990 C601 8001                  	dc.b	nA5, $01, nRst, $01
00098994 E108                       	smpsAlterNote       $08
00098996 C102                       	dc.b	nE5, $02
0009899A E10C                       	smpsAlterNote       $0C
0009899C E6FB                       	smpsAlterVol        $FB
0009899E A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000989AA 8001                       	dc.b	nRst, $01
000989AC E10B                       	smpsAlterNote       $0B
000989AE A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000989B6 E107                       	smpsAlterNote       $07
000989B8 A706 8001                  	dc.b	nD3, $06, nRst, $01
000989BC E10B                       	smpsAlterNote       $0B
000989BE A203                       	dc.b	nA2, $03
000989C0 E109                       	smpsAlterNote       $09
000989C2 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000989C6 E108                       	smpsAlterNote       $08
000989C8 A906                       	dc.b	nE3, $06
000989CA E107                       	smpsAlterNote       $07
000989CC A703 8001                  	dc.b	nD3, $03, nRst, $01
000989D0 E106                       	smpsAlterNote       $06
000989D2 A503                       	dc.b	nC3, $03
000989D4 E10C                       	smpsAlterNote       $0C
000989D6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000989DA E10B                       	smpsAlterNote       $0B
000989DC A203 8004                  	dc.b	nA2, $03, nRst, $04
000989E0 E11B                       	smpsAlterNote       $1B
000989E2 C401                       	dc.b	nG5, $01
000989E4 E1F4                       	smpsAlterNote       $F4
000989E6 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000989E9 E106                       	smpsAlterNote       $06
000989EB E701                       	dc.b	smpsNoAttack, $01
000989ED E10F                       	smpsAlterNote       $0F
000989EF E701                       	dc.b	smpsNoAttack, $01
000989F1 E1E4                       	smpsAlterNote       $E4
000989F3 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000989F6 E1F6                       	smpsAlterNote       $F6
000989F8 E701                       	dc.b	smpsNoAttack, $01
000989FA E108                       	smpsAlterNote       $08
000989FC E701                       	dc.b	smpsNoAttack, $01
000989FE E10B                       	smpsAlterNote       $0B
00098A00 E706                       	dc.b	smpsNoAttack, $06
00098A02 E105                       	smpsAlterNote       $05
00098A04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A08 E108                       	smpsAlterNote       $08
00098A0A E701                       	dc.b	smpsNoAttack, $01
00098A0C E10E                       	smpsAlterNote       $0E
00098A0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A12 E108                       	smpsAlterNote       $08
00098A14 E701                       	dc.b	smpsNoAttack, $01
00098A16 E105                       	smpsAlterNote       $05
00098A18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A1C E10B                       	smpsAlterNote       $0B
00098A1E E701                       	dc.b	smpsNoAttack, $01
00098A20 E10F                       	smpsAlterNote       $0F
00098A22 E701                       	dc.b	smpsNoAttack, $01
00098A24 E10E                       	smpsAlterNote       $0E
00098A26 E701                       	dc.b	smpsNoAttack, $01
00098A28 E108                       	smpsAlterNote       $08
00098A2A E701                       	dc.b	smpsNoAttack, $01
00098A2C E104                       	smpsAlterNote       $04
00098A2E E701                       	dc.b	smpsNoAttack, $01
00098A30 E108                       	smpsAlterNote       $08
00098A32 E701                       	dc.b	smpsNoAttack, $01
00098A34 E10B                       	smpsAlterNote       $0B
00098A36 E701                       	dc.b	smpsNoAttack, $01
00098A38 E10F                       	smpsAlterNote       $0F
00098A3A E701                       	dc.b	smpsNoAttack, $01
00098A3C E10B                       	smpsAlterNote       $0B
00098A3E E701                       	dc.b	smpsNoAttack, $01
00098A40 E105                       	smpsAlterNote       $05
00098A42 E701                       	dc.b	smpsNoAttack, $01
00098A44 E104                       	smpsAlterNote       $04
00098A46 E701                       	dc.b	smpsNoAttack, $01
00098A48 E108                       	smpsAlterNote       $08
00098A4A E701                       	dc.b	smpsNoAttack, $01
00098A4C E10E                       	smpsAlterNote       $0E
00098A4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A52 E10B                       	smpsAlterNote       $0B
00098A54 E701                       	dc.b	smpsNoAttack, $01
00098A56 E105                       	smpsAlterNote       $05
00098A58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098A5C E10B                       	smpsAlterNote       $0B
00098A5E E701                       	dc.b	smpsNoAttack, $01
00098A60 E10E                       	smpsAlterNote       $0E
00098A62 E701                       	dc.b	smpsNoAttack, $01
00098A64 E10F                       	smpsAlterNote       $0F
00098A66 8001                       	dc.b	nRst, $01
00098A68 E109                       	smpsAlterNote       $09
00098A6A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00098A70 E108                       	smpsAlterNote       $08
00098A72 C101 8001                  	dc.b	nE5, $01, nRst, $01
00098A76 E109                       	smpsAlterNote       $09
00098A78 C202                       	dc.b	nF5, $02
00098A7A E108                       	smpsAlterNote       $08
00098A7C C102                       	dc.b	nE5, $02
00098A7E E107                       	smpsAlterNote       $07
00098A80 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00098A84 E108                       	smpsAlterNote       $08
00098A86 C101 8001                  	dc.b	nE5, $01, nRst, $01
00098A8A E107                       	smpsAlterNote       $07
00098A8C BF02                       	dc.b	nD5, $02
00098A8E E106                       	smpsAlterNote       $06
00098A90 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00098A94 E107                       	smpsAlterNote       $07
00098A96 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00098A9A E106                       	smpsAlterNote       $06
00098A9C BD02                       	dc.b	nC5, $02
00098A9E E10C                       	smpsAlterNote       $0C
00098AA0 BB02                       	dc.b	nBb4, $02
00098AA2 E106                       	smpsAlterNote       $06
00098AA4 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00098AA8 E10C                       	smpsAlterNote       $0C
00098AAA BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00098AAE E10B                       	smpsAlterNote       $0B
00098AB0 BA02                       	dc.b	nA4, $02
00098AB2 E10C                       	smpsAlterNote       $0C
00098AB4 BB02                       	dc.b	nBb4, $02
00098AB6 E10B                       	smpsAlterNote       $0B
00098AB8 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00098AC2 E108                       	smpsAlterNote       $08
00098AC4 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00098ACC E107                       	smpsAlterNote       $07
00098ACE BE02                       	dc.b	nCs5, $02
00098AD0 E10B                       	smpsAlterNote       $0B
00098AD2 BA02                       	dc.b	nA4, $02
00098AD4 E109                       	smpsAlterNote       $09
00098AD6 B802 8001                  	dc.b	nG4, $02, nRst, $01
00098ADA E108                       	smpsAlterNote       $08
00098ADC B501 8001                  	dc.b	nE4, $01, nRst, $01
00098AE0 E10B                       	smpsAlterNote       $0B
00098AE2 AE02                       	dc.b	nA3, $02
00098AE4 E10C                       	smpsAlterNote       $0C
00098AE6 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00098AF2 E10B                       	smpsAlterNote       $0B
00098AF4 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00098AFC E107                       	smpsAlterNote       $07
00098AFE A706 8001                  	dc.b	nD3, $06, nRst, $01
00098B02 E10B                       	smpsAlterNote       $0B
00098B04 A203                       	dc.b	nA2, $03
00098B06 E109                       	smpsAlterNote       $09
00098B08 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00098B0C E108                       	smpsAlterNote       $08
00098B0E A906 8001                  	dc.b	nE3, $06, nRst, $01
00098B12 E107                       	smpsAlterNote       $07
00098B14 A702 8001                  	dc.b	nD3, $02, nRst, $01
00098B18 E106                       	smpsAlterNote       $06
00098B1A A503                       	dc.b	nC3, $03
00098B1C E10C                       	smpsAlterNote       $0C
00098B1E A303 8001                  	dc.b	nBb2, $03, nRst, $01
00098B24 E107                       	smpsAlterNote       $07
00098B26 B20D                       	dc.b	nCs4, $0D
00098B28 E104                       	smpsAlterNote       $04
00098B2A E701                       	dc.b	smpsNoAttack, $01
00098B2C E100                       	smpsAlterNote       $00
00098B2E E701                       	dc.b	smpsNoAttack, $01
00098B30 E104                       	smpsAlterNote       $04
00098B32 E701                       	dc.b	smpsNoAttack, $01
00098B34 E10A                       	smpsAlterNote       $0A
00098B36 E701                       	dc.b	smpsNoAttack, $01
00098B38 E10B                       	smpsAlterNote       $0B
00098B3A E701                       	dc.b	smpsNoAttack, $01
00098B3C E107                       	smpsAlterNote       $07
00098B3E E701                       	dc.b	smpsNoAttack, $01
00098B40 E101                       	smpsAlterNote       $01
00098B42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098B46 E104                       	smpsAlterNote       $04
00098B48 E701                       	dc.b	smpsNoAttack, $01
00098B4A E10A                       	smpsAlterNote       $0A
00098B4C E701                       	dc.b	smpsNoAttack, $01
00098B4E E10B                       	smpsAlterNote       $0B
00098B50 8001                       	dc.b	nRst, $01
00098B52 E107                       	smpsAlterNote       $07
00098B54 B30D                       	dc.b	nD4, $0D
00098B56 E104                       	smpsAlterNote       $04
00098B58 E701                       	dc.b	smpsNoAttack, $01
00098B5A E100                       	smpsAlterNote       $00
00098B5C E701                       	dc.b	smpsNoAttack, $01
00098B5E E104                       	smpsAlterNote       $04
00098B60 E701                       	dc.b	smpsNoAttack, $01
00098B62 E10A                       	smpsAlterNote       $0A
00098B64 E701                       	dc.b	smpsNoAttack, $01
00098B66 E10B                       	smpsAlterNote       $0B
00098B68 E701                       	dc.b	smpsNoAttack, $01
00098B6A E107                       	smpsAlterNote       $07
00098B6C E701                       	dc.b	smpsNoAttack, $01
00098B6E E101                       	smpsAlterNote       $01
00098B70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098B74 E104                       	smpsAlterNote       $04
00098B76 E701                       	dc.b	smpsNoAttack, $01
00098B78 E10A                       	smpsAlterNote       $0A
00098B7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098B7E E104                       	smpsAlterNote       $04
00098B80 E701                       	dc.b	smpsNoAttack, $01
00098B82 E101                       	smpsAlterNote       $01
00098B84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098B88 E107                       	smpsAlterNote       $07
00098B8A E701                       	dc.b	smpsNoAttack, $01
00098B8C E10B                       	smpsAlterNote       $0B
00098B8E E701                       	dc.b	smpsNoAttack, $01
00098B90 E10A                       	smpsAlterNote       $0A
00098B92 E701                       	dc.b	smpsNoAttack, $01
00098B94 E107                       	smpsAlterNote       $07
00098B96 8001                       	dc.b	nRst, $01
00098B98 E108                       	smpsAlterNote       $08
00098B9A B50D                       	dc.b	nE4, $0D
00098B9C E102                       	smpsAlterNote       $02
00098B9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BA2 E105                       	smpsAlterNote       $05
00098BA4 E701                       	dc.b	smpsNoAttack, $01
00098BA6 E10B                       	smpsAlterNote       $0B
00098BA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BAC E105                       	smpsAlterNote       $05
00098BAE E701                       	dc.b	smpsNoAttack, $01
00098BB0 E102                       	smpsAlterNote       $02
00098BB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BB6 E108                       	smpsAlterNote       $08
00098BB8 E701                       	dc.b	smpsNoAttack, $01
00098BBA E10C                       	smpsAlterNote       $0C
00098BBC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00098BC0 E107                       	smpsAlterNote       $07
00098BC2 B30D                       	dc.b	nD4, $0D
00098BC4 E101                       	smpsAlterNote       $01
00098BC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BCA E104                       	smpsAlterNote       $04
00098BCC E701                       	dc.b	smpsNoAttack, $01
00098BCE E10A                       	smpsAlterNote       $0A
00098BD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BD4 E104                       	smpsAlterNote       $04
00098BD6 E701                       	dc.b	smpsNoAttack, $01
00098BD8 E101                       	smpsAlterNote       $01
00098BDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098BDE E107                       	smpsAlterNote       $07
00098BE0 E701                       	dc.b	smpsNoAttack, $01
00098BE2 E10B                       	smpsAlterNote       $0B
00098BE4 E701                       	dc.b	smpsNoAttack, $01
00098BE6 E10A                       	smpsAlterNote       $0A
00098BE8 E701                       	dc.b	smpsNoAttack, $01
00098BEA E104                       	smpsAlterNote       $04
00098BEC E701                       	dc.b	smpsNoAttack, $01
00098BEE E100                       	smpsAlterNote       $00
00098BF0 E701                       	dc.b	smpsNoAttack, $01
00098BF2 E104                       	smpsAlterNote       $04
00098BF4 E701                       	dc.b	smpsNoAttack, $01
00098BF6 E107                       	smpsAlterNote       $07
00098BF8 E701                       	dc.b	smpsNoAttack, $01
00098BFA E10B                       	smpsAlterNote       $0B
00098BFC E701                       	dc.b	smpsNoAttack, $01
00098BFE E107                       	smpsAlterNote       $07
00098C00 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00098C04 E101                       	smpsAlterNote       $01
00098C06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C0A E107                       	smpsAlterNote       $07
00098C0C E701                       	dc.b	smpsNoAttack, $01
00098C0E E10A                       	smpsAlterNote       $0A
00098C10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C14 E104                       	smpsAlterNote       $04
00098C16 E701                       	dc.b	smpsNoAttack, $01
00098C18 E100                       	smpsAlterNote       $00
00098C1A E701                       	dc.b	smpsNoAttack, $01
00098C1C E101                       	smpsAlterNote       $01
00098C1E E701                       	dc.b	smpsNoAttack, $01
00098C20 E107                       	smpsAlterNote       $07
00098C22 E701                       	dc.b	smpsNoAttack, $01
00098C24 E10B                       	smpsAlterNote       $0B
00098C26 E701                       	dc.b	smpsNoAttack, $01
00098C28 E107                       	smpsAlterNote       $07
00098C2A B30E                       	dc.b	nD4, $0E
00098C2C E101                       	smpsAlterNote       $01
00098C2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C32 E107                       	smpsAlterNote       $07
00098C34 E701                       	dc.b	smpsNoAttack, $01
00098C36 E10A                       	smpsAlterNote       $0A
00098C38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C3C E104                       	smpsAlterNote       $04
00098C3E E701                       	dc.b	smpsNoAttack, $01
00098C40 E100                       	smpsAlterNote       $00
00098C42 E701                       	dc.b	smpsNoAttack, $01
00098C44 E101                       	smpsAlterNote       $01
00098C46 E701                       	dc.b	smpsNoAttack, $01
00098C48 E107                       	smpsAlterNote       $07
00098C4A E701                       	dc.b	smpsNoAttack, $01
00098C4C E10B                       	smpsAlterNote       $0B
00098C4E E701                       	dc.b	smpsNoAttack, $01
00098C50 E107                       	smpsAlterNote       $07
00098C52 E701                       	dc.b	smpsNoAttack, $01
00098C54 E104                       	smpsAlterNote       $04
00098C56 E701                       	dc.b	smpsNoAttack, $01
00098C58 E100                       	smpsAlterNote       $00
00098C5A E701                       	dc.b	smpsNoAttack, $01
00098C5C E104                       	smpsAlterNote       $04
00098C5E E701                       	dc.b	smpsNoAttack, $01
00098C60 E10A                       	smpsAlterNote       $0A
00098C62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098C66 E107                       	smpsAlterNote       $07
00098C68 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00098C6C E104                       	smpsAlterNote       $04
00098C6E E701                       	dc.b	smpsNoAttack, $01
00098C70 E100                       	smpsAlterNote       $00
00098C72 E701                       	dc.b	smpsNoAttack, $01
00098C74 E101                       	smpsAlterNote       $01
00098C76 E701                       	dc.b	smpsNoAttack, $01
00098C78 E107                       	smpsAlterNote       $07
00098C7A E701                       	dc.b	smpsNoAttack, $01
00098C7C E10B                       	smpsAlterNote       $0B
00098C7E E701                       	dc.b	smpsNoAttack, $01
00098C80 E107                       	smpsAlterNote       $07
00098C82 E701                       	dc.b	smpsNoAttack, $01
00098C84 E104                       	smpsAlterNote       $04
00098C86 E701                       	dc.b	smpsNoAttack, $01
00098C88 E100                       	smpsAlterNote       $00
00098C8A E701                       	dc.b	smpsNoAttack, $01
00098C8C E104                       	smpsAlterNote       $04
00098C8E E701                       	dc.b	smpsNoAttack, $01
00098C90 E10A                       	smpsAlterNote       $0A
00098C92 E701                       	dc.b	smpsNoAttack, $01
00098C94 E10B                       	smpsAlterNote       $0B
00098C96 E701                       	dc.b	smpsNoAttack, $01
00098C9A E6FF                       	smpsAlterVol        $FF
00098C9C A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00098CA8 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00098CB0 E109                       	smpsAlterNote       $09
00098CB2 E601                       	smpsAlterVol        $01
00098CB4 B60D                       	dc.b	nF4, $0D
00098CB6 E106                       	smpsAlterNote       $06
00098CB8 E701                       	dc.b	smpsNoAttack, $01
00098CBA E102                       	smpsAlterNote       $02
00098CBC E701                       	dc.b	smpsNoAttack, $01
00098CBE E106                       	smpsAlterNote       $06
00098CC0 E701                       	dc.b	smpsNoAttack, $01
00098CC2 E109                       	smpsAlterNote       $09
00098CC4 E701                       	dc.b	smpsNoAttack, $01
00098CC6 E10D                       	smpsAlterNote       $0D
00098CC8 E701                       	dc.b	smpsNoAttack, $01
00098CCA E109                       	smpsAlterNote       $09
00098CCC E701                       	dc.b	smpsNoAttack, $01
00098CCE E103                       	smpsAlterNote       $03
00098CD0 E701                       	dc.b	smpsNoAttack, $01
00098CD2 E102                       	smpsAlterNote       $02
00098CD4 E701                       	dc.b	smpsNoAttack, $01
00098CD6 E106                       	smpsAlterNote       $06
00098CD8 E701                       	dc.b	smpsNoAttack, $01
00098CDA E10C                       	smpsAlterNote       $0C
00098CDC E701                       	dc.b	smpsNoAttack, $01
00098CDE E10D                       	smpsAlterNote       $0D
00098CE0 8001                       	dc.b	nRst, $01
00098CE2 E109                       	smpsAlterNote       $09
00098CE4 B80D                       	dc.b	nG4, $0D
00098CE6 E106                       	smpsAlterNote       $06
00098CE8 E701                       	dc.b	smpsNoAttack, $01
00098CEA E102                       	smpsAlterNote       $02
00098CEC E701                       	dc.b	smpsNoAttack, $01
00098CEE E106                       	smpsAlterNote       $06
00098CF0 E701                       	dc.b	smpsNoAttack, $01
00098CF2 E109                       	smpsAlterNote       $09
00098CF4 E701                       	dc.b	smpsNoAttack, $01
00098CF6 E10D                       	smpsAlterNote       $0D
00098CF8 E701                       	dc.b	smpsNoAttack, $01
00098CFA E109                       	smpsAlterNote       $09
00098CFC E701                       	dc.b	smpsNoAttack, $01
00098CFE E103                       	smpsAlterNote       $03
00098D00 E701                       	dc.b	smpsNoAttack, $01
00098D02 E102                       	smpsAlterNote       $02
00098D04 E701                       	dc.b	smpsNoAttack, $01
00098D06 E106                       	smpsAlterNote       $06
00098D08 E701                       	dc.b	smpsNoAttack, $01
00098D0A E10C                       	smpsAlterNote       $0C
00098D0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D10 E106                       	smpsAlterNote       $06
00098D12 E701                       	dc.b	smpsNoAttack, $01
00098D14 E103                       	smpsAlterNote       $03
00098D16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D1A E109                       	smpsAlterNote       $09
00098D1C E701                       	dc.b	smpsNoAttack, $01
00098D1E E10D                       	smpsAlterNote       $0D
00098D20 E701                       	dc.b	smpsNoAttack, $01
00098D22 E10C                       	smpsAlterNote       $0C
00098D24 E701                       	dc.b	smpsNoAttack, $01
00098D26 E109                       	smpsAlterNote       $09
00098D28 8001                       	dc.b	nRst, $01
00098D2A E10B                       	smpsAlterNote       $0B
00098D2C BA0D                       	dc.b	nA4, $0D
00098D2E E105                       	smpsAlterNote       $05
00098D30 E701                       	dc.b	smpsNoAttack, $01
00098D32 E104                       	smpsAlterNote       $04
00098D34 E701                       	dc.b	smpsNoAttack, $01
00098D36 E108                       	smpsAlterNote       $08
00098D38 E701                       	dc.b	smpsNoAttack, $01
00098D3A E10E                       	smpsAlterNote       $0E
00098D3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D40 E10B                       	smpsAlterNote       $0B
00098D42 E701                       	dc.b	smpsNoAttack, $01
00098D44 E105                       	smpsAlterNote       $05
00098D46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D4A E10B                       	smpsAlterNote       $0B
00098D4C E701                       	dc.b	smpsNoAttack, $01
00098D4E E10E                       	smpsAlterNote       $0E
00098D50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D54 E108                       	smpsAlterNote       $08
00098D56 E701                       	dc.b	smpsNoAttack, $01
00098D58 E104                       	smpsAlterNote       $04
00098D5A E701                       	dc.b	smpsNoAttack, $01
00098D5C E105                       	smpsAlterNote       $05
00098D5E E701                       	dc.b	smpsNoAttack, $01
00098D60 E10B                       	smpsAlterNote       $0B
00098D62 E701                       	dc.b	smpsNoAttack, $01
00098D64 E10F                       	smpsAlterNote       $0F
00098D66 E701                       	dc.b	smpsNoAttack, $01
00098D68 E10B                       	smpsAlterNote       $0B
00098D6A E701                       	dc.b	smpsNoAttack, $01
00098D6C E108                       	smpsAlterNote       $08
00098D6E E701                       	dc.b	smpsNoAttack, $01
00098D70 E104                       	smpsAlterNote       $04
00098D72 E701                       	dc.b	smpsNoAttack, $01
00098D74 E108                       	smpsAlterNote       $08
00098D76 E701                       	dc.b	smpsNoAttack, $01
00098D78 E10E                       	smpsAlterNote       $0E
00098D7A E701                       	dc.b	smpsNoAttack, $01
00098D7C E10F                       	smpsAlterNote       $0F
00098D7E E701                       	dc.b	smpsNoAttack, $01
00098D80 E10B                       	smpsAlterNote       $0B
00098D82 E701                       	dc.b	smpsNoAttack, $01
00098D84 E105                       	smpsAlterNote       $05
00098D86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D8A E108                       	smpsAlterNote       $08
00098D8C E701                       	dc.b	smpsNoAttack, $01
00098D8E E10E                       	smpsAlterNote       $0E
00098D90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D94 E108                       	smpsAlterNote       $08
00098D96 E701                       	dc.b	smpsNoAttack, $01
00098D98 E105                       	smpsAlterNote       $05
00098D9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098D9E E108                       	smpsAlterNote       $08
00098DA0 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00098DA4 E109                       	smpsAlterNote       $09
00098DA6 B60D                       	dc.b	nF4, $0D
00098DA8 E103                       	smpsAlterNote       $03
00098DAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098DAE E106                       	smpsAlterNote       $06
00098DB0 E701                       	dc.b	smpsNoAttack, $01
00098DB2 E10C                       	smpsAlterNote       $0C
00098DB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098DB8 E106                       	smpsAlterNote       $06
00098DBA E701                       	dc.b	smpsNoAttack, $01
00098DBC E103                       	smpsAlterNote       $03
00098DBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098DC2 E109                       	smpsAlterNote       $09
00098DC4 E701                       	dc.b	smpsNoAttack, $01
00098DC6 E10D                       	smpsAlterNote       $0D
00098DC8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00098DCC E109                       	smpsAlterNote       $09
00098DCE B80D                       	dc.b	nG4, $0D
00098DD0 E103                       	smpsAlterNote       $03
00098DD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098DD6 E109                       	smpsAlterNote       $09
00098DD8 E701                       	dc.b	smpsNoAttack, $01
00098DDA E10C                       	smpsAlterNote       $0C
00098DDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098DE0 E106                       	smpsAlterNote       $06
00098DE2 E701                       	dc.b	smpsNoAttack, $01
00098DE4 E102                       	smpsAlterNote       $02
00098DE6 E701                       	dc.b	smpsNoAttack, $01
00098DE8 E103                       	smpsAlterNote       $03
00098DEA E701                       	dc.b	smpsNoAttack, $01
00098DEC E109                       	smpsAlterNote       $09
00098DEE E701                       	dc.b	smpsNoAttack, $01
00098DF0 E10D                       	smpsAlterNote       $0D
00098DF2 E701                       	dc.b	smpsNoAttack, $01
00098DF4 E109                       	smpsAlterNote       $09
00098DF6 E701                       	dc.b	smpsNoAttack, $01
00098DF8 E106                       	smpsAlterNote       $06
00098DFA E701                       	dc.b	smpsNoAttack, $01
00098DFC E102                       	smpsAlterNote       $02
00098DFE E701                       	dc.b	smpsNoAttack, $01
00098E00 E106                       	smpsAlterNote       $06
00098E02 E701                       	dc.b	smpsNoAttack, $01
00098E04 E10C                       	smpsAlterNote       $0C
00098E06 E701                       	dc.b	smpsNoAttack, $01
00098E08 E10D                       	smpsAlterNote       $0D
00098E0A E701                       	dc.b	smpsNoAttack, $01
00098E0C E109                       	smpsAlterNote       $09
00098E0E E701                       	dc.b	smpsNoAttack, $01
00098E10 E10B                       	smpsAlterNote       $0B
00098E12 BA0D                       	dc.b	nA4, $0D
00098E14 E108                       	smpsAlterNote       $08
00098E16 E701                       	dc.b	smpsNoAttack, $01
00098E18 E105                       	smpsAlterNote       $05
00098E1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E1E E10B                       	smpsAlterNote       $0B
00098E20 E701                       	dc.b	smpsNoAttack, $01
00098E22 E10F                       	smpsAlterNote       $0F
00098E24 E701                       	dc.b	smpsNoAttack, $01
00098E26 E10E                       	smpsAlterNote       $0E
00098E28 E701                       	dc.b	smpsNoAttack, $01
00098E2A E108                       	smpsAlterNote       $08
00098E2C E701                       	dc.b	smpsNoAttack, $01
00098E2E E104                       	smpsAlterNote       $04
00098E30 E701                       	dc.b	smpsNoAttack, $01
00098E32 E108                       	smpsAlterNote       $08
00098E34 E701                       	dc.b	smpsNoAttack, $01
00098E36 E10B                       	smpsAlterNote       $0B
00098E38 E701                       	dc.b	smpsNoAttack, $01
00098E3A E10F                       	smpsAlterNote       $0F
00098E3C E701                       	dc.b	smpsNoAttack, $01
00098E3E E10B                       	smpsAlterNote       $0B
00098E40 E701                       	dc.b	smpsNoAttack, $01
00098E42 E105                       	smpsAlterNote       $05
00098E44 E701                       	dc.b	smpsNoAttack, $01
00098E46 E104                       	smpsAlterNote       $04
00098E48 E701                       	dc.b	smpsNoAttack, $01
00098E4A E108                       	smpsAlterNote       $08
00098E4C E701                       	dc.b	smpsNoAttack, $01
00098E4E E10E                       	smpsAlterNote       $0E
00098E50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E54 E10B                       	smpsAlterNote       $0B
00098E56 E701                       	dc.b	smpsNoAttack, $01
00098E58 E105                       	smpsAlterNote       $05
00098E5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E5E E10B                       	smpsAlterNote       $0B
00098E60 E701                       	dc.b	smpsNoAttack, $01
00098E62 E10E                       	smpsAlterNote       $0E
00098E64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098E68 E108                       	smpsAlterNote       $08
00098E6A E701                       	dc.b	smpsNoAttack, $01
00098E6C E105                       	smpsAlterNote       $05
00098E6E 8001                       	dc.b	nRst, $01
00098E70 E109                       	smpsAlterNote       $09
00098E72 B60A                       	dc.b	nF4, $0A
00098E74 E108                       	smpsAlterNote       $08
00098E76 B507                       	dc.b	nE4, $07
00098E78 E107                       	smpsAlterNote       $07
00098E7A B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00098E7E E108                       	smpsAlterNote       $08
00098E80 B503                       	dc.b	nE4, $03
00098E82 E109                       	smpsAlterNote       $09
00098E84 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00098E8C E10B                       	smpsAlterNote       $0B
00098E8E BA0D                       	dc.b	nA4, $0D
00098E90 E108                       	smpsAlterNote       $08
00098E92 E701                       	dc.b	smpsNoAttack, $01
00098E94 E104                       	smpsAlterNote       $04
00098E96 E701                       	dc.b	smpsNoAttack, $01
00098E98 E108                       	smpsAlterNote       $08
00098E9A E701                       	dc.b	smpsNoAttack, $01
00098E9C E10B                       	smpsAlterNote       $0B
00098E9E E701                       	dc.b	smpsNoAttack, $01
00098EA0 E10F                       	smpsAlterNote       $0F
00098EA2 E701                       	dc.b	smpsNoAttack, $01
00098EA4 E10B                       	smpsAlterNote       $0B
00098EA6 E701                       	dc.b	smpsNoAttack, $01
00098EA8 E105                       	smpsAlterNote       $05
00098EAA E701                       	dc.b	smpsNoAttack, $01
00098EAC E104                       	smpsAlterNote       $04
00098EAE E701                       	dc.b	smpsNoAttack, $01
00098EB0 E108                       	smpsAlterNote       $08
00098EB2 E701                       	dc.b	smpsNoAttack, $01
00098EB4 E10E                       	smpsAlterNote       $0E
00098EB6 E701                       	dc.b	smpsNoAttack, $01
00098EB8 E10F                       	smpsAlterNote       $0F
00098EBA 8001                       	dc.b	nRst, $01
00098EBC E109                       	smpsAlterNote       $09
00098EBE C20D                       	dc.b	nF5, $0D
00098EC0 E106                       	smpsAlterNote       $06
00098EC2 E701                       	dc.b	smpsNoAttack, $01
00098EC4 E102                       	smpsAlterNote       $02
00098EC6 E701                       	dc.b	smpsNoAttack, $01
00098EC8 E106                       	smpsAlterNote       $06
00098ECA E701                       	dc.b	smpsNoAttack, $01
00098ECC E109                       	smpsAlterNote       $09
00098ECE E701                       	dc.b	smpsNoAttack, $01
00098ED0 E10D                       	smpsAlterNote       $0D
00098ED2 E701                       	dc.b	smpsNoAttack, $01
00098ED4 E109                       	smpsAlterNote       $09
00098ED6 E701                       	dc.b	smpsNoAttack, $01
00098ED8 E103                       	smpsAlterNote       $03
00098EDA E701                       	dc.b	smpsNoAttack, $01
00098EDC E102                       	smpsAlterNote       $02
00098EDE E701                       	dc.b	smpsNoAttack, $01
00098EE0 E106                       	smpsAlterNote       $06
00098EE2 E701                       	dc.b	smpsNoAttack, $01
00098EE4 E10C                       	smpsAlterNote       $0C
00098EE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098EEA E109                       	smpsAlterNote       $09
00098EEC E701                       	dc.b	smpsNoAttack, $01
00098EEE E103                       	smpsAlterNote       $03
00098EF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098EF4 E109                       	smpsAlterNote       $09
00098EF6 E701                       	dc.b	smpsNoAttack, $01
00098EF8 E10C                       	smpsAlterNote       $0C
00098EFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098EFE E106                       	smpsAlterNote       $06
00098F00 E701                       	dc.b	smpsNoAttack, $01
00098F02 E102                       	smpsAlterNote       $02
00098F04 E701                       	dc.b	smpsNoAttack, $01
00098F06 E103                       	smpsAlterNote       $03
00098F08 E701                       	dc.b	smpsNoAttack, $01
00098F0A E109                       	smpsAlterNote       $09
00098F0C E701                       	dc.b	smpsNoAttack, $01
00098F0E E10D                       	smpsAlterNote       $0D
00098F10 E701                       	dc.b	smpsNoAttack, $01
00098F12 E109                       	smpsAlterNote       $09
00098F14 E701                       	dc.b	smpsNoAttack, $01
00098F16 E106                       	smpsAlterNote       $06
00098F18 E701                       	dc.b	smpsNoAttack, $01
00098F1A E102                       	smpsAlterNote       $02
00098F1C E701                       	dc.b	smpsNoAttack, $01
00098F1E E106                       	smpsAlterNote       $06
00098F20 E701                       	dc.b	smpsNoAttack, $01
00098F22 E10C                       	smpsAlterNote       $0C
00098F24 E701                       	dc.b	smpsNoAttack, $01
00098F26 E10D                       	smpsAlterNote       $0D
00098F28 E701                       	dc.b	smpsNoAttack, $01
00098F2A E109                       	smpsAlterNote       $09
00098F2C E701                       	dc.b	smpsNoAttack, $01
00098F2E E103                       	smpsAlterNote       $03
00098F30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F34 E106                       	smpsAlterNote       $06
00098F36 E701                       	dc.b	smpsNoAttack, $01
00098F38 E10C                       	smpsAlterNote       $0C
00098F3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F3E E106                       	smpsAlterNote       $06
00098F40 E701                       	dc.b	smpsNoAttack, $01
00098F42 E103                       	smpsAlterNote       $03
00098F44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F48 E109                       	smpsAlterNote       $09
00098F4A E701                       	dc.b	smpsNoAttack, $01
00098F4C E10D                       	smpsAlterNote       $0D
00098F4E E701                       	dc.b	smpsNoAttack, $01
00098F50 E10C                       	smpsAlterNote       $0C
00098F52 E701                       	dc.b	smpsNoAttack, $01
00098F54 E106                       	smpsAlterNote       $06
00098F56 E701                       	dc.b	smpsNoAttack, $01
00098F58 E103                       	smpsAlterNote       $03
00098F5A 8001                       	dc.b	nRst, $01
00098F5C E109                       	smpsAlterNote       $09
00098F5E C206 8001                  	dc.b	nF5, $06, nRst, $01
00098F64 E10C                       	smpsAlterNote       $0C
00098F66 E601                       	smpsAlterVol        $01
00098F68 BB0D                       	dc.b	nBb4, $0D
00098F6A E106                       	smpsAlterNote       $06
00098F6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F70 E109                       	smpsAlterNote       $09
00098F72 E701                       	dc.b	smpsNoAttack, $01
00098F74 E10F                       	smpsAlterNote       $0F
00098F76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F7A E109                       	smpsAlterNote       $09
00098F7C E701                       	dc.b	smpsNoAttack, $01
00098F7E E106                       	smpsAlterNote       $06
00098F80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098F84 E10C                       	smpsAlterNote       $0C
00098F86 E701                       	dc.b	smpsNoAttack, $01
00098F88 E110                       	smpsAlterNote       $10
00098F8A E701                       	dc.b	smpsNoAttack, $01
00098F8C E10F                       	smpsAlterNote       $0F
00098F8E E701                       	dc.b	smpsNoAttack, $01
00098F90 E109                       	smpsAlterNote       $09
00098F92 E701                       	dc.b	smpsNoAttack, $01
00098F94 E105                       	smpsAlterNote       $05
00098F96 E701                       	dc.b	smpsNoAttack, $01
00098F98 E106                       	smpsAlterNote       $06
00098F9A 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00098F9E E103                       	smpsAlterNote       $03
00098FA0 E701                       	dc.b	smpsNoAttack, $01
00098FA2 E1FF                       	smpsAlterNote       $FF
00098FA4 E701                       	dc.b	smpsNoAttack, $01
00098FA6 E103                       	smpsAlterNote       $03
00098FA8 E701                       	dc.b	smpsNoAttack, $01
00098FAA E106                       	smpsAlterNote       $06
00098FAC E701                       	dc.b	smpsNoAttack, $01
00098FAE E10A                       	smpsAlterNote       $0A
00098FB0 E701                       	dc.b	smpsNoAttack, $01
00098FB2 E106                       	smpsAlterNote       $06
00098FB4 E701                       	dc.b	smpsNoAttack, $01
00098FB6 E100                       	smpsAlterNote       $00
00098FB8 E701                       	dc.b	smpsNoAttack, $01
00098FBA E1FF                       	smpsAlterNote       $FF
00098FBC E701                       	dc.b	smpsNoAttack, $01
00098FBE E103                       	smpsAlterNote       $03
00098FC0 E701                       	dc.b	smpsNoAttack, $01
00098FC2 E109                       	smpsAlterNote       $09
00098FC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098FC8 E106                       	smpsAlterNote       $06
00098FCA E701                       	dc.b	smpsNoAttack, $01
00098FCC E100                       	smpsAlterNote       $00
00098FCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098FD2 E107                       	smpsAlterNote       $07
00098FD4 BF0E                       	dc.b	nD5, $0E
00098FD6 E101                       	smpsAlterNote       $01
00098FD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098FDC E107                       	smpsAlterNote       $07
00098FDE E701                       	dc.b	smpsNoAttack, $01
00098FE0 E10A                       	smpsAlterNote       $0A
00098FE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098FE6 E104                       	smpsAlterNote       $04
00098FE8 E701                       	dc.b	smpsNoAttack, $01
00098FEA E100                       	smpsAlterNote       $00
00098FEC E701                       	dc.b	smpsNoAttack, $01
00098FEE E101                       	smpsAlterNote       $01
00098FF0 E701                       	dc.b	smpsNoAttack, $01
00098FF2 E107                       	smpsAlterNote       $07
00098FF4 E701                       	dc.b	smpsNoAttack, $01
00098FF6 E10B                       	smpsAlterNote       $0B
00098FF8 E701                       	dc.b	smpsNoAttack, $01
00098FFA E107                       	smpsAlterNote       $07
00098FFC E701                       	dc.b	smpsNoAttack, $01
00098FFE E104                       	smpsAlterNote       $04
00099000 E701                       	dc.b	smpsNoAttack, $01
00099002 E100                       	smpsAlterNote       $00
00099004 E701                       	dc.b	smpsNoAttack, $01
00099006 E101                       	smpsAlterNote       $01
00099008 8001                       	dc.b	nRst, $01
0009900A E108                       	smpsAlterNote       $08
0009900C C10C                       	dc.b	nE5, $0C
0009900E E109                       	smpsAlterNote       $09
00099010 C201 8001                  	dc.b	nF5, $01, nRst, $01
00099014 E10A                       	smpsAlterNote       $0A
00099016 8001                       	dc.b	nRst, $01
00099018 E109                       	smpsAlterNote       $09
0009901A C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009901E E106                       	smpsAlterNote       $06
00099020 E701                       	dc.b	smpsNoAttack, $01
00099022 E102                       	smpsAlterNote       $02
00099024 E701                       	dc.b	smpsNoAttack, $01
00099026 E103                       	smpsAlterNote       $03
00099028 E701                       	dc.b	smpsNoAttack, $01
0009902A E109                       	smpsAlterNote       $09
0009902C E701                       	dc.b	smpsNoAttack, $01
0009902E E10D                       	smpsAlterNote       $0D
00099030 E701                       	dc.b	smpsNoAttack, $01
00099032 E109                       	smpsAlterNote       $09
00099034 E701                       	dc.b	smpsNoAttack, $01
00099036 E106                       	smpsAlterNote       $06
00099038 E701                       	dc.b	smpsNoAttack, $01
0009903A E102                       	smpsAlterNote       $02
0009903C E701                       	dc.b	smpsNoAttack, $01
0009903E E106                       	smpsAlterNote       $06
00099040 E701                       	dc.b	smpsNoAttack, $01
00099042 E10C                       	smpsAlterNote       $0C
00099044 E701                       	dc.b	smpsNoAttack, $01
00099046 E10D                       	smpsAlterNote       $0D
00099048 E701                       	dc.b	smpsNoAttack, $01
0009904A E109                       	smpsAlterNote       $09
0009904C C40D                       	dc.b	nG5, $0D
0009904E E106                       	smpsAlterNote       $06
00099050 E701                       	dc.b	smpsNoAttack, $01
00099052 E102                       	smpsAlterNote       $02
00099054 E701                       	dc.b	smpsNoAttack, $01
00099056 E103                       	smpsAlterNote       $03
00099058 E701                       	dc.b	smpsNoAttack, $01
0009905A E109                       	smpsAlterNote       $09
0009905C E701                       	dc.b	smpsNoAttack, $01
0009905E E108                       	smpsAlterNote       $08
00099060 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0009906C E109                       	smpsAlterNote       $09
0009906E C20D                       	dc.b	nF5, $0D
00099070 E106                       	smpsAlterNote       $06
00099072 E701                       	dc.b	smpsNoAttack, $01
00099074 E102                       	smpsAlterNote       $02
00099076 E701                       	dc.b	smpsNoAttack, $01
00099078 E106                       	smpsAlterNote       $06
0009907A E701                       	dc.b	smpsNoAttack, $01
0009907C E109                       	smpsAlterNote       $09
0009907E E701                       	dc.b	smpsNoAttack, $01
00099080 E10D                       	smpsAlterNote       $0D
00099082 E701                       	dc.b	smpsNoAttack, $01
00099084 E109                       	smpsAlterNote       $09
00099086 E701                       	dc.b	smpsNoAttack, $01
00099088 E103                       	smpsAlterNote       $03
0009908A E701                       	dc.b	smpsNoAttack, $01
0009908C E102                       	smpsAlterNote       $02
0009908E E701                       	dc.b	smpsNoAttack, $01
00099090 E106                       	smpsAlterNote       $06
00099092 E701                       	dc.b	smpsNoAttack, $01
00099094 E10C                       	smpsAlterNote       $0C
00099096 E701                       	dc.b	smpsNoAttack, $01
00099098 E10D                       	smpsAlterNote       $0D
0009909A 8001                       	dc.b	nRst, $01
0009909C E112                       	smpsAlterNote       $12
0009909E C401                       	dc.b	nG5, $01
000990A0 E1EB                       	smpsAlterNote       $EB
000990A2 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000990A5 E1FD                       	smpsAlterNote       $FD
000990A7 E701                       	dc.b	smpsNoAttack, $01
000990A9 E10F                       	smpsAlterNote       $0F
000990AB E701                       	dc.b	smpsNoAttack, $01
000990AD E118                       	smpsAlterNote       $18
000990AF E701                       	dc.b	smpsNoAttack, $01
000990B1 E1ED                       	smpsAlterNote       $ED
000990B3 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000990B6 E1FF                       	smpsAlterNote       $FF
000990B8 E701                       	dc.b	smpsNoAttack, $01
000990BA E10B                       	smpsAlterNote       $0B
000990BC E703                       	dc.b	smpsNoAttack, $03
000990BE E109                       	smpsAlterNote       $09
000990C0 C407                       	dc.b	nG5, $07
000990C2 E108                       	smpsAlterNote       $08
000990C4 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
000990D0 E109                       	smpsAlterNote       $09
000990D2 C20D                       	dc.b	nF5, $0D
000990D4 E103                       	smpsAlterNote       $03
000990D6 E701                       	dc.b	smpsNoAttack, $01
000990D8 E102                       	smpsAlterNote       $02
000990DA E701                       	dc.b	smpsNoAttack, $01
000990DC E106                       	smpsAlterNote       $06
000990DE E701                       	dc.b	smpsNoAttack, $01
000990E0 E10C                       	smpsAlterNote       $0C
000990E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000990E6 E109                       	smpsAlterNote       $09
000990E8 E701                       	dc.b	smpsNoAttack, $01
000990EA E103                       	smpsAlterNote       $03
000990EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000990F0 E109                       	smpsAlterNote       $09
000990F2 E701                       	dc.b	smpsNoAttack, $01
000990F4 E10C                       	smpsAlterNote       $0C
000990F6 E701                       	dc.b	smpsNoAttack, $01
000990F8 E10D                       	smpsAlterNote       $0D
000990FA 8001                       	dc.b	nRst, $01
000990FC E10B                       	smpsAlterNote       $0B
000990FE C609 8001                  	dc.b	nA5, $09, nRst, $01
00099102 E109                       	smpsAlterNote       $09
00099104 B806 8001                  	dc.b	nG4, $06, nRst, $01
00099108 E108                       	smpsAlterNote       $08
0009910A C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00099116 8001                       	dc.b	nRst, $01
00099118 E109                       	smpsAlterNote       $09
0009911A C20D                       	dc.b	nF5, $0D
0009911C E103                       	smpsAlterNote       $03
0009911E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099122 E106                       	smpsAlterNote       $06
00099124 E701                       	dc.b	smpsNoAttack, $01
00099126 E10C                       	smpsAlterNote       $0C
00099128 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009912C E106                       	smpsAlterNote       $06
0009912E E701                       	dc.b	smpsNoAttack, $01
00099130 E103                       	smpsAlterNote       $03
00099132 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099136 E109                       	smpsAlterNote       $09
00099138 E701                       	dc.b	smpsNoAttack, $01
0009913A E10D                       	smpsAlterNote       $0D
0009913C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00099142 E108                       	smpsAlterNote       $08
00099144 E6FF                       	smpsAlterVol        $FF
00099146 A806                       	dc.b	nEb3, $06
00099148 E10C                       	smpsAlterNote       $0C
0009914A A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009914E E108                       	smpsAlterNote       $08
00099150 A803                       	dc.b	nEb3, $03
00099152 E109                       	smpsAlterNote       $09
00099154 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00099158 E10C                       	smpsAlterNote       $0C
0009915A AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00099164 E109                       	smpsAlterNote       $09
00099166 E602                       	smpsAlterVol        $02
00099168 B604                       	dc.b	nF4, $04
0009916A E602                       	smpsAlterVol        $02
0009916C F6F1 AA                    	smpsJump            music84_Jump02
0009916F                            
0009916F                            ; FM4 Data
0009916F                            music84_FM4:
00099171 E040                       	smpsPan             panRight, $00
00099173 8003                       	dc.b	nRst, $03
00099175 E10F                       	smpsAlterNote       $0F
00099177 C603 8008                  	dc.b	nA5, $03, nRst, $08
0009917B E10D                       	smpsAlterNote       $0D
0009917D C403 800A                  	dc.b	nG5, $03, nRst, $0A
00099181 E10C                       	smpsAlterNote       $0C
00099183 C103 8004                  	dc.b	nE5, $03, nRst, $04
00099189 E6FE                       	smpsAlterVol        $FE
0009918B E110                       	smpsAlterNote       $10
0009918D C703 8001                  	dc.b	nBb5, $03, nRst, $01
00099191 E10F                       	smpsAlterNote       $0F
00099193 C602 8001                  	dc.b	nA5, $02, nRst, $01
00099197 E10D                       	smpsAlterNote       $0D
00099199 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
000991A2 E10C                       	smpsAlterNote       $0C
000991A4 C103                       	dc.b	nE5, $03
000991A6 E10A                       	smpsAlterNote       $0A
000991A8 BD03 8001                  	dc.b	nC5, $03, nRst, $01
000991AE 03                         	dc.b	$03
000991AF                            
000991AF                            music84_Jump01:
000991AF E10B                       	smpsAlterNote       $0B
000991B1 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000991B5 E10C                       	smpsAlterNote       $0C
000991B7 C102 8001                  	dc.b	nE5, $02, nRst, $01
000991BB E10D                       	smpsAlterNote       $0D
000991BD C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000991C7 E10B                       	smpsAlterNote       $0B
000991C9 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000991CD E107                       	smpsAlterNote       $07
000991CF E701                       	dc.b	smpsNoAttack, $01
000991D1 E103                       	smpsAlterNote       $03
000991D3 E701                       	dc.b	smpsNoAttack, $01
000991D5 E104                       	smpsAlterNote       $04
000991D7 E701                       	dc.b	smpsNoAttack, $01
000991D9 E10A                       	smpsAlterNote       $0A
000991DB E701                       	dc.b	smpsNoAttack, $01
000991DD E10E                       	smpsAlterNote       $0E
000991DF E701                       	dc.b	smpsNoAttack, $01
000991E1 E10A                       	smpsAlterNote       $0A
000991E3 E701                       	dc.b	smpsNoAttack, $01
000991E5 E107                       	smpsAlterNote       $07
000991E7 E701                       	dc.b	smpsNoAttack, $01
000991E9 E104                       	smpsAlterNote       $04
000991EB 8001                       	dc.b	nRst, $01
000991ED E110                       	smpsAlterNote       $10
000991EF C703                       	dc.b	nBb5, $03
000991F1 E10F                       	smpsAlterNote       $0F
000991F3 C603 8001                  	dc.b	nA5, $03, nRst, $01
000991F7 E10D                       	smpsAlterNote       $0D
000991F9 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
000991FF E10C                       	smpsAlterNote       $0C
00099201 E701                       	dc.b	smpsNoAttack, $01
00099203 E108                       	smpsAlterNote       $08
00099205 E701                       	dc.b	smpsNoAttack, $01
00099207 E10C                       	smpsAlterNote       $0C
00099209 E701                       	dc.b	smpsNoAttack, $01
0009920B E10F                       	smpsAlterNote       $0F
0009920D E701                       	dc.b	smpsNoAttack, $01
0009920F E113                       	smpsAlterNote       $13
00099211 E701                       	dc.b	smpsNoAttack, $01
00099213 E10F                       	smpsAlterNote       $0F
00099215 E701                       	dc.b	smpsNoAttack, $01
00099217 E109                       	smpsAlterNote       $09
00099219 E701                       	dc.b	smpsNoAttack, $01
0009921B E108                       	smpsAlterNote       $08
0009921D E701                       	dc.b	smpsNoAttack, $01
0009921F E10C                       	smpsAlterNote       $0C
00099221 E701                       	dc.b	smpsNoAttack, $01
00099223 E112                       	smpsAlterNote       $12
00099225 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099229 E10C                       	smpsAlterNote       $0C
0009922B E701                       	dc.b	smpsNoAttack, $01
0009922D E109                       	smpsAlterNote       $09
0009922F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099233 E10F                       	smpsAlterNote       $0F
00099235 E701                       	dc.b	smpsNoAttack, $01
00099237 E113                       	smpsAlterNote       $13
00099239 E701                       	dc.b	smpsNoAttack, $01
0009923B E112                       	smpsAlterNote       $12
0009923D E701                       	dc.b	smpsNoAttack, $01
0009923F E10C                       	smpsAlterNote       $0C
00099241 E701                       	dc.b	smpsNoAttack, $01
00099243 E108                       	smpsAlterNote       $08
00099245 E701                       	dc.b	smpsNoAttack, $01
00099247 E10C                       	smpsAlterNote       $0C
00099249 E701                       	dc.b	smpsNoAttack, $01
0009924B E10F                       	smpsAlterNote       $0F
0009924D E701                       	dc.b	smpsNoAttack, $01
0009924F E113                       	smpsAlterNote       $13
00099251 E701                       	dc.b	smpsNoAttack, $01
00099253 E10F                       	smpsAlterNote       $0F
00099255 E701                       	dc.b	smpsNoAttack, $01
00099257 E109                       	smpsAlterNote       $09
00099259 E701                       	dc.b	smpsNoAttack, $01
0009925B E108                       	smpsAlterNote       $08
0009925D E701                       	dc.b	smpsNoAttack, $01
0009925F E10C                       	smpsAlterNote       $0C
00099261 E701                       	dc.b	smpsNoAttack, $01
00099263 E112                       	smpsAlterNote       $12
00099265 E701                       	dc.b	smpsNoAttack, $01
00099267 E113                       	smpsAlterNote       $13
00099269 800F                       	dc.b	nRst, $0F
0009926B E10B                       	smpsAlterNote       $0B
0009926D BF03                       	dc.b	nD5, $03
0009926F E10C                       	smpsAlterNote       $0C
00099271 C103 8001                  	dc.b	nE5, $03, nRst, $01
00099275 E10D                       	smpsAlterNote       $0D
00099277 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0009927F E10B                       	smpsAlterNote       $0B
00099281 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0009928B E110                       	smpsAlterNote       $10
0009928D C704                       	dc.b	nBb5, $04
0009928F E10F                       	smpsAlterNote       $0F
00099291 C604 8001                  	dc.b	nA5, $04, nRst, $01
00099295 E10D                       	smpsAlterNote       $0D
00099297 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0009929D E109                       	smpsAlterNote       $09
0009929F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000992A3 E10F                       	smpsAlterNote       $0F
000992A5 E701                       	dc.b	smpsNoAttack, $01
000992A7 E112                       	smpsAlterNote       $12
000992A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000992AD E10C                       	smpsAlterNote       $0C
000992AF E701                       	dc.b	smpsNoAttack, $01
000992B1 E108                       	smpsAlterNote       $08
000992B3 E701                       	dc.b	smpsNoAttack, $01
000992B5 E109                       	smpsAlterNote       $09
000992B7 E701                       	dc.b	smpsNoAttack, $01
000992B9 E10F                       	smpsAlterNote       $0F
000992BB E701                       	dc.b	smpsNoAttack, $01
000992BD E113                       	smpsAlterNote       $13
000992BF E701                       	dc.b	smpsNoAttack, $01
000992C1 E10F                       	smpsAlterNote       $0F
000992C3 E701                       	dc.b	smpsNoAttack, $01
000992C5 E10C                       	smpsAlterNote       $0C
000992C7 E701                       	dc.b	smpsNoAttack, $01
000992C9 E108                       	smpsAlterNote       $08
000992CB E701                       	dc.b	smpsNoAttack, $01
000992CD E10C                       	smpsAlterNote       $0C
000992CF E701                       	dc.b	smpsNoAttack, $01
000992D1 E112                       	smpsAlterNote       $12
000992D3 E701                       	dc.b	smpsNoAttack, $01
000992D5 E113                       	smpsAlterNote       $13
000992D7 E701                       	dc.b	smpsNoAttack, $01
000992D9 E10F                       	smpsAlterNote       $0F
000992DB E701                       	dc.b	smpsNoAttack, $01
000992DD E109                       	smpsAlterNote       $09
000992DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000992E3 E10C                       	smpsAlterNote       $0C
000992E5 E701                       	dc.b	smpsNoAttack, $01
000992E7 E112                       	smpsAlterNote       $12
000992E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000992ED E10C                       	smpsAlterNote       $0C
000992EF E701                       	dc.b	smpsNoAttack, $01
000992F1 E109                       	smpsAlterNote       $09
000992F3 E701                       	dc.b	smpsNoAttack, $01
000992F5 E10D                       	smpsAlterNote       $0D
000992F7 C401 8001                  	dc.b	nG5, $01, nRst, $01
000992FB E10F                       	smpsAlterNote       $0F
000992FD C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00099307 E10D                       	smpsAlterNote       $0D
00099309 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0009930F E10B                       	smpsAlterNote       $0B
00099311 BF0D                       	dc.b	nD5, $0D
00099313 E108                       	smpsAlterNote       $08
00099315 E701                       	dc.b	smpsNoAttack, $01
00099317 E104                       	smpsAlterNote       $04
00099319 E701                       	dc.b	smpsNoAttack, $01
0009931B E108                       	smpsAlterNote       $08
0009931D E701                       	dc.b	smpsNoAttack, $01
0009931F E10B                       	smpsAlterNote       $0B
00099321 E701                       	dc.b	smpsNoAttack, $01
00099323 E10F                       	smpsAlterNote       $0F
00099325 E701                       	dc.b	smpsNoAttack, $01
00099327 E10B                       	smpsAlterNote       $0B
00099329 E701                       	dc.b	smpsNoAttack, $01
0009932B E105                       	smpsAlterNote       $05
0009932D E701                       	dc.b	smpsNoAttack, $01
0009932F E104                       	smpsAlterNote       $04
00099331 E701                       	dc.b	smpsNoAttack, $01
00099333 E108                       	smpsAlterNote       $08
00099335 E701                       	dc.b	smpsNoAttack, $01
00099337 E10E                       	smpsAlterNote       $0E
00099339 E701                       	dc.b	smpsNoAttack, $01
0009933B E10F                       	smpsAlterNote       $0F
0009933D 8001                       	dc.b	nRst, $01
0009933F E10C                       	smpsAlterNote       $0C
00099341 C101                       	dc.b	nE5, $01
00099343 E10D                       	smpsAlterNote       $0D
00099345 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0009934B E10F                       	smpsAlterNote       $0F
0009934D C606 8001                  	dc.b	nA5, $06, nRst, $01
00099351 E10C                       	smpsAlterNote       $0C
00099353 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00099357 E10D                       	smpsAlterNote       $0D
00099359 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0009935D E10C                       	smpsAlterNote       $0C
0009935F CD03                       	dc.b	nE6, $03
00099361 E10A                       	smpsAlterNote       $0A
00099363 C903 8001                  	dc.b	nC6, $03, nRst, $01
00099367 E10D                       	smpsAlterNote       $0D
00099369 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00099371 E109                       	smpsAlterNote       $09
00099373 E701                       	dc.b	smpsNoAttack, $01
00099375 E10D                       	smpsAlterNote       $0D
00099377 E701                       	dc.b	smpsNoAttack, $01
00099379 E110                       	smpsAlterNote       $10
0009937B E701                       	dc.b	smpsNoAttack, $01
0009937D E114                       	smpsAlterNote       $14
0009937F E701                       	dc.b	smpsNoAttack, $01
00099381 E110                       	smpsAlterNote       $10
00099383 E701                       	dc.b	smpsNoAttack, $01
00099385 E10A                       	smpsAlterNote       $0A
00099387 E701                       	dc.b	smpsNoAttack, $01
00099389 E109                       	smpsAlterNote       $09
0009938B E701                       	dc.b	smpsNoAttack, $01
0009938D E10D                       	smpsAlterNote       $0D
0009938F E701                       	dc.b	smpsNoAttack, $01
00099391 E113                       	smpsAlterNote       $13
00099393 E701                       	dc.b	smpsNoAttack, $01
00099395 E114                       	smpsAlterNote       $14
00099397 8001                       	dc.b	nRst, $01
00099399 E10F                       	smpsAlterNote       $0F
0009939B C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000993A1 E10C                       	smpsAlterNote       $0C
000993A3 E701                       	dc.b	smpsNoAttack, $01
000993A5 E108                       	smpsAlterNote       $08
000993A7 E701                       	dc.b	smpsNoAttack, $01
000993A9 E10C                       	smpsAlterNote       $0C
000993AB E701                       	dc.b	smpsNoAttack, $01
000993AD E112                       	smpsAlterNote       $12
000993AF E701                       	dc.b	smpsNoAttack, $01
000993B1 E113                       	smpsAlterNote       $13
000993B3 E701                       	dc.b	smpsNoAttack, $01
000993B5 E10F                       	smpsAlterNote       $0F
000993B7 E701                       	dc.b	smpsNoAttack, $01
000993B9 E109                       	smpsAlterNote       $09
000993BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000993BF E10C                       	smpsAlterNote       $0C
000993C1 E701                       	dc.b	smpsNoAttack, $01
000993C3 E112                       	smpsAlterNote       $12
000993C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000993C9 E10C                       	smpsAlterNote       $0C
000993CB E701                       	dc.b	smpsNoAttack, $01
000993CD E109                       	smpsAlterNote       $09
000993CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000993D3 E10F                       	smpsAlterNote       $0F
000993D5 E701                       	dc.b	smpsNoAttack, $01
000993D7 E113                       	smpsAlterNote       $13
000993D9 E701                       	dc.b	smpsNoAttack, $01
000993DB E112                       	smpsAlterNote       $12
000993DD E701                       	dc.b	smpsNoAttack, $01
000993DF E10C                       	smpsAlterNote       $0C
000993E1 E701                       	dc.b	smpsNoAttack, $01
000993E3 E108                       	smpsAlterNote       $08
000993E5 E701                       	dc.b	smpsNoAttack, $01
000993E7 E10C                       	smpsAlterNote       $0C
000993E9 E701                       	dc.b	smpsNoAttack, $01
000993EB E10F                       	smpsAlterNote       $0F
000993ED E701                       	dc.b	smpsNoAttack, $01
000993EF E113                       	smpsAlterNote       $13
000993F1 E701                       	dc.b	smpsNoAttack, $01
000993F3 E10F                       	smpsAlterNote       $0F
000993F5 E701                       	dc.b	smpsNoAttack, $01
000993F7 E109                       	smpsAlterNote       $09
000993F9 E701                       	dc.b	smpsNoAttack, $01
000993FB E108                       	smpsAlterNote       $08
000993FD E701                       	dc.b	smpsNoAttack, $01
000993FF E10C                       	smpsAlterNote       $0C
00099401 E701                       	dc.b	smpsNoAttack, $01
00099403 E112                       	smpsAlterNote       $12
00099405 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099409 E10F                       	smpsAlterNote       $0F
0009940B E701                       	dc.b	smpsNoAttack, $01
0009940D E109                       	smpsAlterNote       $09
0009940F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099413 E10F                       	smpsAlterNote       $0F
00099415 E701                       	dc.b	smpsNoAttack, $01
00099417 E113                       	smpsAlterNote       $13
00099419 E701                       	dc.b	smpsNoAttack, $01
0009941B E112                       	smpsAlterNote       $12
0009941D E701                       	dc.b	smpsNoAttack, $01
0009941F E10C                       	smpsAlterNote       $0C
00099421 E701                       	dc.b	smpsNoAttack, $01
00099423 E108                       	smpsAlterNote       $08
00099425 E701                       	dc.b	smpsNoAttack, $01
00099427 E10C                       	smpsAlterNote       $0C
00099429 E701                       	dc.b	smpsNoAttack, $01
0009942B E10F                       	smpsAlterNote       $0F
0009942D E701                       	dc.b	smpsNoAttack, $01
0009942F E113                       	smpsAlterNote       $13
00099431 E701                       	dc.b	smpsNoAttack, $01
00099433 E10F                       	smpsAlterNote       $0F
00099435 E701                       	dc.b	smpsNoAttack, $01
00099437 E109                       	smpsAlterNote       $09
00099439 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009943D E10F                       	smpsAlterNote       $0F
0009943F C60D                       	dc.b	nA5, $0D
00099441 E109                       	smpsAlterNote       $09
00099443 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099447 E10C                       	smpsAlterNote       $0C
00099449 E701                       	dc.b	smpsNoAttack, $01
0009944B E112                       	smpsAlterNote       $12
0009944D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099451 E10C                       	smpsAlterNote       $0C
00099453 E701                       	dc.b	smpsNoAttack, $01
00099455 E109                       	smpsAlterNote       $09
00099457 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009945B E10F                       	smpsAlterNote       $0F
0009945D E701                       	dc.b	smpsNoAttack, $01
0009945F E113                       	smpsAlterNote       $13
00099461 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00099467 E10D                       	smpsAlterNote       $0D
00099469 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00099471 E10C                       	smpsAlterNote       $0C
00099473 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00099479 E6FF                       	smpsAlterVol        $FF
0009947B E10B                       	smpsAlterNote       $0B
0009947D BF03 8001                  	dc.b	nD5, $03, nRst, $01
00099481 E10C                       	smpsAlterNote       $0C
00099483 C103                       	dc.b	nE5, $03
00099485 E10D                       	smpsAlterNote       $0D
00099487 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00099491 E10B                       	smpsAlterNote       $0B
00099493 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00099497 E107                       	smpsAlterNote       $07
00099499 E701                       	dc.b	smpsNoAttack, $01
0009949B E104                       	smpsAlterNote       $04
0009949D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000994A1 E10A                       	smpsAlterNote       $0A
000994A3 E701                       	dc.b	smpsNoAttack, $01
000994A5 E10D                       	smpsAlterNote       $0D
000994A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000994AB E107                       	smpsAlterNote       $07
000994AD E701                       	dc.b	smpsNoAttack, $01
000994AF E104                       	smpsAlterNote       $04
000994B1 8001                       	dc.b	nRst, $01
000994B3 E110                       	smpsAlterNote       $10
000994B5 C703                       	dc.b	nBb5, $03
000994B7 E10F                       	smpsAlterNote       $0F
000994B9 C603 8001                  	dc.b	nA5, $03, nRst, $01
000994BD E10D                       	smpsAlterNote       $0D
000994BF C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000994C3 E10C                       	smpsAlterNote       $0C
000994C5 E701                       	dc.b	smpsNoAttack, $01
000994C7 E108                       	smpsAlterNote       $08
000994C9 E701                       	dc.b	smpsNoAttack, $01
000994CB E109                       	smpsAlterNote       $09
000994CD E701                       	dc.b	smpsNoAttack, $01
000994CF E10F                       	smpsAlterNote       $0F
000994D1 E701                       	dc.b	smpsNoAttack, $01
000994D3 E113                       	smpsAlterNote       $13
000994D5 E701                       	dc.b	smpsNoAttack, $01
000994D7 E10F                       	smpsAlterNote       $0F
000994D9 E701                       	dc.b	smpsNoAttack, $01
000994DB E10C                       	smpsAlterNote       $0C
000994DD E701                       	dc.b	smpsNoAttack, $01
000994DF E108                       	smpsAlterNote       $08
000994E1 E701                       	dc.b	smpsNoAttack, $01
000994E3 E10C                       	smpsAlterNote       $0C
000994E5 E701                       	dc.b	smpsNoAttack, $01
000994E7 E112                       	smpsAlterNote       $12
000994E9 E701                       	dc.b	smpsNoAttack, $01
000994EB E113                       	smpsAlterNote       $13
000994ED E701                       	dc.b	smpsNoAttack, $01
000994EF E10F                       	smpsAlterNote       $0F
000994F1 E701                       	dc.b	smpsNoAttack, $01
000994F3 E109                       	smpsAlterNote       $09
000994F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000994F9 E10C                       	smpsAlterNote       $0C
000994FB E701                       	dc.b	smpsNoAttack, $01
000994FD E112                       	smpsAlterNote       $12
000994FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099503 E10C                       	smpsAlterNote       $0C
00099505 E701                       	dc.b	smpsNoAttack, $01
00099507 E109                       	smpsAlterNote       $09
00099509 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009950D E10F                       	smpsAlterNote       $0F
0009950F E701                       	dc.b	smpsNoAttack, $01
00099511 E113                       	smpsAlterNote       $13
00099513 E701                       	dc.b	smpsNoAttack, $01
00099515 E112                       	smpsAlterNote       $12
00099517 E701                       	dc.b	smpsNoAttack, $01
00099519 E10C                       	smpsAlterNote       $0C
0009951B E701                       	dc.b	smpsNoAttack, $01
0009951D E108                       	smpsAlterNote       $08
0009951F E701                       	dc.b	smpsNoAttack, $01
00099521 E10C                       	smpsAlterNote       $0C
00099523 E701                       	dc.b	smpsNoAttack, $01
00099525 E10F                       	smpsAlterNote       $0F
00099527 E701                       	dc.b	smpsNoAttack, $01
00099529 E113                       	smpsAlterNote       $13
0009952B E701                       	dc.b	smpsNoAttack, $01
0009952D E10F                       	smpsAlterNote       $0F
0009952F BA03 8001                  	dc.b	nA4, $03, nRst, $01
00099533 E110                       	smpsAlterNote       $10
00099535 BB03                       	dc.b	nBb4, $03
00099537 E10F                       	smpsAlterNote       $0F
00099539 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0009953D E10B                       	smpsAlterNote       $0B
0009953F BF03                       	dc.b	nD5, $03
00099541 E10C                       	smpsAlterNote       $0C
00099543 C103 8001                  	dc.b	nE5, $03, nRst, $01
00099547 E10D                       	smpsAlterNote       $0D
00099549 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00099553 E10B                       	smpsAlterNote       $0B
00099555 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00099561 E110                       	smpsAlterNote       $10
00099563 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00099567 E10F                       	smpsAlterNote       $0F
00099569 C604                       	dc.b	nA5, $04
0009956B E10D                       	smpsAlterNote       $0D
0009956D C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00099573 E109                       	smpsAlterNote       $09
00099575 E701                       	dc.b	smpsNoAttack, $01
00099577 E108                       	smpsAlterNote       $08
00099579 E701                       	dc.b	smpsNoAttack, $01
0009957B E10C                       	smpsAlterNote       $0C
0009957D E701                       	dc.b	smpsNoAttack, $01
0009957F E112                       	smpsAlterNote       $12
00099581 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099585 E10F                       	smpsAlterNote       $0F
00099587 E701                       	dc.b	smpsNoAttack, $01
00099589 E109                       	smpsAlterNote       $09
0009958B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009958F E10F                       	smpsAlterNote       $0F
00099591 E701                       	dc.b	smpsNoAttack, $01
00099593 E112                       	smpsAlterNote       $12
00099595 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099599 E10C                       	smpsAlterNote       $0C
0009959B E701                       	dc.b	smpsNoAttack, $01
0009959D E108                       	smpsAlterNote       $08
0009959F E701                       	dc.b	smpsNoAttack, $01
000995A1 E109                       	smpsAlterNote       $09
000995A3 E701                       	dc.b	smpsNoAttack, $01
000995A5 E10F                       	smpsAlterNote       $0F
000995A7 E701                       	dc.b	smpsNoAttack, $01
000995A9 E113                       	smpsAlterNote       $13
000995AB E701                       	dc.b	smpsNoAttack, $01
000995AD E10F                       	smpsAlterNote       $0F
000995AF E701                       	dc.b	smpsNoAttack, $01
000995B1 E10C                       	smpsAlterNote       $0C
000995B3 E701                       	dc.b	smpsNoAttack, $01
000995B5 E108                       	smpsAlterNote       $08
000995B7 E701                       	dc.b	smpsNoAttack, $01
000995B9 E10C                       	smpsAlterNote       $0C
000995BB E701                       	dc.b	smpsNoAttack, $01
000995BD E112                       	smpsAlterNote       $12
000995BF E701                       	dc.b	smpsNoAttack, $01
000995C1 E113                       	smpsAlterNote       $13
000995C3 E701                       	dc.b	smpsNoAttack, $01
000995C5 E10F                       	smpsAlterNote       $0F
000995C7 E701                       	dc.b	smpsNoAttack, $01
000995C9 E109                       	smpsAlterNote       $09
000995CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000995CF E10C                       	smpsAlterNote       $0C
000995D1 E701                       	dc.b	smpsNoAttack, $01
000995D3 E112                       	smpsAlterNote       $12
000995D5 E701                       	dc.b	smpsNoAttack, $01
000995D7 E113                       	smpsAlterNote       $13
000995D9 8001                       	dc.b	nRst, $01
000995DB E10F                       	smpsAlterNote       $0F
000995DD C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000995E9 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000995F1 E10D                       	smpsAlterNote       $0D
000995F3 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000995F9 E10B                       	smpsAlterNote       $0B
000995FB BF0D                       	dc.b	nD5, $0D
000995FD E108                       	smpsAlterNote       $08
000995FF E701                       	dc.b	smpsNoAttack, $01
00099601 E104                       	smpsAlterNote       $04
00099603 E701                       	dc.b	smpsNoAttack, $01
00099605 E105                       	smpsAlterNote       $05
00099607 E701                       	dc.b	smpsNoAttack, $01
00099609 E10B                       	smpsAlterNote       $0B
0009960B E701                       	dc.b	smpsNoAttack, $01
0009960D E10F                       	smpsAlterNote       $0F
0009960F E701                       	dc.b	smpsNoAttack, $01
00099611 E10B                       	smpsAlterNote       $0B
00099613 E701                       	dc.b	smpsNoAttack, $01
00099615 E108                       	smpsAlterNote       $08
00099617 E701                       	dc.b	smpsNoAttack, $01
00099619 E104                       	smpsAlterNote       $04
0009961B E701                       	dc.b	smpsNoAttack, $01
0009961D E108                       	smpsAlterNote       $08
0009961F E701                       	dc.b	smpsNoAttack, $01
00099621 E10E                       	smpsAlterNote       $0E
00099623 E701                       	dc.b	smpsNoAttack, $01
00099625 E10F                       	smpsAlterNote       $0F
00099627 E701                       	dc.b	smpsNoAttack, $01
00099629 E10C                       	smpsAlterNote       $0C
0009962B C101                       	dc.b	nE5, $01
0009962D E10D                       	smpsAlterNote       $0D
0009962F C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00099637 E10F                       	smpsAlterNote       $0F
00099639 C607                       	dc.b	nA5, $07
0009963B E10C                       	smpsAlterNote       $0C
0009963D CD07                       	dc.b	nE6, $07
0009963F E10D                       	smpsAlterNote       $0D
00099641 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00099645 E10C                       	smpsAlterNote       $0C
00099647 CD03                       	dc.b	nE6, $03
00099649 E10A                       	smpsAlterNote       $0A
0009964B C903 8001                  	dc.b	nC6, $03, nRst, $01
0009964F E10D                       	smpsAlterNote       $0D
00099651 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00099657 E10A                       	smpsAlterNote       $0A
00099659 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009965D E110                       	smpsAlterNote       $10
0009965F E701                       	dc.b	smpsNoAttack, $01
00099661 E114                       	smpsAlterNote       $14
00099663 E701                       	dc.b	smpsNoAttack, $01
00099665 E113                       	smpsAlterNote       $13
00099667 E701                       	dc.b	smpsNoAttack, $01
00099669 E10D                       	smpsAlterNote       $0D
0009966B E701                       	dc.b	smpsNoAttack, $01
0009966D E109                       	smpsAlterNote       $09
0009966F E701                       	dc.b	smpsNoAttack, $01
00099671 E10D                       	smpsAlterNote       $0D
00099673 E701                       	dc.b	smpsNoAttack, $01
00099675 E110                       	smpsAlterNote       $10
00099677 E701                       	dc.b	smpsNoAttack, $01
00099679 E114                       	smpsAlterNote       $14
0009967B E701                       	dc.b	smpsNoAttack, $01
0009967D E10F                       	smpsAlterNote       $0F
0009967F C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00099683 E10C                       	smpsAlterNote       $0C
00099685 E701                       	dc.b	smpsNoAttack, $01
00099687 E108                       	smpsAlterNote       $08
00099689 E701                       	dc.b	smpsNoAttack, $01
0009968B E10C                       	smpsAlterNote       $0C
0009968D E701                       	dc.b	smpsNoAttack, $01
0009968F E10F                       	smpsAlterNote       $0F
00099691 E701                       	dc.b	smpsNoAttack, $01
00099693 E113                       	smpsAlterNote       $13
00099695 E701                       	dc.b	smpsNoAttack, $01
00099697 E10F                       	smpsAlterNote       $0F
00099699 E701                       	dc.b	smpsNoAttack, $01
0009969B E109                       	smpsAlterNote       $09
0009969D E701                       	dc.b	smpsNoAttack, $01
0009969F E108                       	smpsAlterNote       $08
000996A1 E701                       	dc.b	smpsNoAttack, $01
000996A3 E10C                       	smpsAlterNote       $0C
000996A5 E701                       	dc.b	smpsNoAttack, $01
000996A7 E112                       	smpsAlterNote       $12
000996A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996AD E10F                       	smpsAlterNote       $0F
000996AF E701                       	dc.b	smpsNoAttack, $01
000996B1 E109                       	smpsAlterNote       $09
000996B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996B7 E10F                       	smpsAlterNote       $0F
000996B9 E701                       	dc.b	smpsNoAttack, $01
000996BB E112                       	smpsAlterNote       $12
000996BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996C1 E10C                       	smpsAlterNote       $0C
000996C3 E701                       	dc.b	smpsNoAttack, $01
000996C5 E108                       	smpsAlterNote       $08
000996C7 E701                       	dc.b	smpsNoAttack, $01
000996C9 E109                       	smpsAlterNote       $09
000996CB E701                       	dc.b	smpsNoAttack, $01
000996CD E10F                       	smpsAlterNote       $0F
000996CF E701                       	dc.b	smpsNoAttack, $01
000996D1 E113                       	smpsAlterNote       $13
000996D3 E701                       	dc.b	smpsNoAttack, $01
000996D5 E10F                       	smpsAlterNote       $0F
000996D7 E701                       	dc.b	smpsNoAttack, $01
000996D9 E10C                       	smpsAlterNote       $0C
000996DB E701                       	dc.b	smpsNoAttack, $01
000996DD E108                       	smpsAlterNote       $08
000996DF E701                       	dc.b	smpsNoAttack, $01
000996E1 E10C                       	smpsAlterNote       $0C
000996E3 E701                       	dc.b	smpsNoAttack, $01
000996E5 E112                       	smpsAlterNote       $12
000996E7 E701                       	dc.b	smpsNoAttack, $01
000996E9 E113                       	smpsAlterNote       $13
000996EB E701                       	dc.b	smpsNoAttack, $01
000996ED E10F                       	smpsAlterNote       $0F
000996EF E701                       	dc.b	smpsNoAttack, $01
000996F1 E109                       	smpsAlterNote       $09
000996F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000996F7 E10C                       	smpsAlterNote       $0C
000996F9 E701                       	dc.b	smpsNoAttack, $01
000996FB E112                       	smpsAlterNote       $12
000996FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099701 E10C                       	smpsAlterNote       $0C
00099703 E701                       	dc.b	smpsNoAttack, $01
00099705 E109                       	smpsAlterNote       $09
00099707 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009970B E10F                       	smpsAlterNote       $0F
0009970D E701                       	dc.b	smpsNoAttack, $01
0009970F E113                       	smpsAlterNote       $13
00099711 E701                       	dc.b	smpsNoAttack, $01
00099713 E112                       	smpsAlterNote       $12
00099715 E701                       	dc.b	smpsNoAttack, $01
00099717 E10C                       	smpsAlterNote       $0C
00099719 E701                       	dc.b	smpsNoAttack, $01
0009971B E109                       	smpsAlterNote       $09
0009971D 8001                       	dc.b	nRst, $01
0009971F E10F                       	smpsAlterNote       $0F
00099721 C60D                       	dc.b	nA5, $0D
00099723 E10C                       	smpsAlterNote       $0C
00099725 E701                       	dc.b	smpsNoAttack, $01
00099727 E108                       	smpsAlterNote       $08
00099729 E701                       	dc.b	smpsNoAttack, $01
0009972B E10C                       	smpsAlterNote       $0C
0009972D E701                       	dc.b	smpsNoAttack, $01
0009972F E112                       	smpsAlterNote       $12
00099731 E701                       	dc.b	smpsNoAttack, $01
00099733 E113                       	smpsAlterNote       $13
00099735 E701                       	dc.b	smpsNoAttack, $01
00099737 E10F                       	smpsAlterNote       $0F
00099739 E701                       	dc.b	smpsNoAttack, $01
0009973B E109                       	smpsAlterNote       $09
0009973D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099741 E10C                       	smpsAlterNote       $0C
00099743 E701                       	dc.b	smpsNoAttack, $01
00099745 E112                       	smpsAlterNote       $12
00099747 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009974B E10C                       	smpsAlterNote       $0C
0009974D E701                       	dc.b	smpsNoAttack, $01
0009974F E109                       	smpsAlterNote       $09
00099751 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099755 E10F                       	smpsAlterNote       $0F
00099757 E701                       	dc.b	smpsNoAttack, $01
00099759 E113                       	smpsAlterNote       $13
0009975B E701                       	dc.b	smpsNoAttack, $01
0009975D E112                       	smpsAlterNote       $12
0009975F E701                       	dc.b	smpsNoAttack, $01
00099761 E10C                       	smpsAlterNote       $0C
00099763 E701                       	dc.b	smpsNoAttack, $01
00099765 E108                       	smpsAlterNote       $08
00099767 E701                       	dc.b	smpsNoAttack, $01
00099769 E10C                       	smpsAlterNote       $0C
0009976B E701                       	dc.b	smpsNoAttack, $01
0009976D E10F                       	smpsAlterNote       $0F
0009976F E701                       	dc.b	smpsNoAttack, $01
00099771 E113                       	smpsAlterNote       $13
00099773 E701                       	dc.b	smpsNoAttack, $01
00099775 E10F                       	smpsAlterNote       $0F
00099777 E701                       	dc.b	smpsNoAttack, $01
00099779 E109                       	smpsAlterNote       $09
0009977B E701                       	dc.b	smpsNoAttack, $01
0009977D E108                       	smpsAlterNote       $08
0009977F E701                       	dc.b	smpsNoAttack, $01
00099781 E10C                       	smpsAlterNote       $0C
00099783 E701                       	dc.b	smpsNoAttack, $01
00099785 E112                       	smpsAlterNote       $12
00099787 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009978B E10F                       	smpsAlterNote       $0F
0009978D E701                       	dc.b	smpsNoAttack, $01
0009978F E109                       	smpsAlterNote       $09
00099791 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099795 E10F                       	smpsAlterNote       $0F
00099797 E701                       	dc.b	smpsNoAttack, $01
00099799 E112                       	smpsAlterNote       $12
0009979B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009979F E10C                       	smpsAlterNote       $0C
000997A1 E701                       	dc.b	smpsNoAttack, $01
000997A3 E108                       	smpsAlterNote       $08
000997A5 E701                       	dc.b	smpsNoAttack, $01
000997A7 E10C                       	smpsAlterNote       $0C
000997A9 E701                       	dc.b	smpsNoAttack, $01
000997AB E10F                       	smpsAlterNote       $0F
000997AD E701                       	dc.b	smpsNoAttack, $01
000997AF E113                       	smpsAlterNote       $13
000997B1 E701                       	dc.b	smpsNoAttack, $01
000997B3 E10F                       	smpsAlterNote       $0F
000997B5 E701                       	dc.b	smpsNoAttack, $01
000997B7 E109                       	smpsAlterNote       $09
000997B9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000997BF E601                       	smpsAlterVol        $01
000997C1 E10F                       	smpsAlterNote       $0F
000997C3 C604                       	dc.b	nA5, $04
000997C5 E10D                       	smpsAlterNote       $0D
000997C7 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000997CD E10B                       	smpsAlterNote       $0B
000997CF BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000997D7 E10F                       	smpsAlterNote       $0F
000997D9 C604 8001                  	dc.b	nA5, $04, nRst, $01
000997DD E10D                       	smpsAlterNote       $0D
000997DF C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000997E5 E10C                       	smpsAlterNote       $0C
000997E7 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000997ED E10A                       	smpsAlterNote       $0A
000997EF C904 8001                  	dc.b	nC6, $04, nRst, $01
000997F3 E110                       	smpsAlterNote       $10
000997F5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000997F9 E10F                       	smpsAlterNote       $0F
000997FB C604                       	dc.b	nA5, $04
000997FD E10D                       	smpsAlterNote       $0D
000997FF C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0009980B E109                       	smpsAlterNote       $09
0009980D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099811 E10F                       	smpsAlterNote       $0F
00099813 E701                       	dc.b	smpsNoAttack, $01
00099815 E112                       	smpsAlterNote       $12
00099817 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009981B E10C                       	smpsAlterNote       $0C
0009981D E701                       	dc.b	smpsNoAttack, $01
0009981F E108                       	smpsAlterNote       $08
00099821 E701                       	dc.b	smpsNoAttack, $01
00099823 E10C                       	smpsAlterNote       $0C
00099825 E701                       	dc.b	smpsNoAttack, $01
00099827 E10F                       	smpsAlterNote       $0F
00099829 E701                       	dc.b	smpsNoAttack, $01
0009982B E113                       	smpsAlterNote       $13
0009982D E701                       	dc.b	smpsNoAttack, $01
0009982F E10D                       	smpsAlterNote       $0D
00099831 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00099837 E10C                       	smpsAlterNote       $0C
00099839 C10D                       	dc.b	nE5, $0D
0009983B E109                       	smpsAlterNote       $09
0009983D E701                       	dc.b	smpsNoAttack, $01
0009983F E105                       	smpsAlterNote       $05
00099841 E701                       	dc.b	smpsNoAttack, $01
00099843 E106                       	smpsAlterNote       $06
00099845 E701                       	dc.b	smpsNoAttack, $01
00099847 E10C                       	smpsAlterNote       $0C
00099849 E701                       	dc.b	smpsNoAttack, $01
0009984B E110                       	smpsAlterNote       $10
0009984D E701                       	dc.b	smpsNoAttack, $01
0009984F E10C                       	smpsAlterNote       $0C
00099851 E701                       	dc.b	smpsNoAttack, $01
00099853 E109                       	smpsAlterNote       $09
00099855 E701                       	dc.b	smpsNoAttack, $01
00099857 E105                       	smpsAlterNote       $05
00099859 E701                       	dc.b	smpsNoAttack, $01
0009985B E109                       	smpsAlterNote       $09
0009985D E701                       	dc.b	smpsNoAttack, $01
0009985F E10F                       	smpsAlterNote       $0F
00099861 E701                       	dc.b	smpsNoAttack, $01
00099863 E110                       	smpsAlterNote       $10
00099865 E701                       	dc.b	smpsNoAttack, $01
00099867 E10C                       	smpsAlterNote       $0C
00099869 E701                       	dc.b	smpsNoAttack, $01
0009986B E106                       	smpsAlterNote       $06
0009986D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099871 E109                       	smpsAlterNote       $09
00099873 E701                       	dc.b	smpsNoAttack, $01
00099875 E10F                       	smpsAlterNote       $0F
00099877 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009987B E109                       	smpsAlterNote       $09
0009987D E701                       	dc.b	smpsNoAttack, $01
0009987F E106                       	smpsAlterNote       $06
00099881 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099885 E10C                       	smpsAlterNote       $0C
00099887 E701                       	dc.b	smpsNoAttack, $01
00099889 E110                       	smpsAlterNote       $10
0009988B E701                       	dc.b	smpsNoAttack, $01
0009988D E10F                       	smpsAlterNote       $0F
0009988F E701                       	dc.b	smpsNoAttack, $01
00099891 E109                       	smpsAlterNote       $09
00099893 E701                       	dc.b	smpsNoAttack, $01
00099895 E105                       	smpsAlterNote       $05
00099897 E701                       	dc.b	smpsNoAttack, $01
00099899 E109                       	smpsAlterNote       $09
0009989B E701                       	dc.b	smpsNoAttack, $01
0009989D E10C                       	smpsAlterNote       $0C
0009989F E701                       	dc.b	smpsNoAttack, $01
000998A1 E110                       	smpsAlterNote       $10
000998A3 E701                       	dc.b	smpsNoAttack, $01
000998A5 E10C                       	smpsAlterNote       $0C
000998A7 E701                       	dc.b	smpsNoAttack, $01
000998A9 E106                       	smpsAlterNote       $06
000998AB E701                       	dc.b	smpsNoAttack, $01
000998AD E105                       	smpsAlterNote       $05
000998AF E701                       	dc.b	smpsNoAttack, $01
000998B1 E109                       	smpsAlterNote       $09
000998B3 E701                       	dc.b	smpsNoAttack, $01
000998B5 E10F                       	smpsAlterNote       $0F
000998B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000998BB E10C                       	smpsAlterNote       $0C
000998BD E701                       	dc.b	smpsNoAttack, $01
000998BF E106                       	smpsAlterNote       $06
000998C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000998C5 E10C                       	smpsAlterNote       $0C
000998C7 E701                       	dc.b	smpsNoAttack, $01
000998C9 E10F                       	smpsAlterNote       $0F
000998CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000998CF E109                       	smpsAlterNote       $09
000998D1 E701                       	dc.b	smpsNoAttack, $01
000998D3 E105                       	smpsAlterNote       $05
000998D5 E701                       	dc.b	smpsNoAttack, $01
000998D7 E106                       	smpsAlterNote       $06
000998D9 E701                       	dc.b	smpsNoAttack, $01
000998DB E10C                       	smpsAlterNote       $0C
000998DD E701                       	dc.b	smpsNoAttack, $01
000998DF E110                       	smpsAlterNote       $10
000998E1 E701                       	dc.b	smpsNoAttack, $01
000998E3 E10C                       	smpsAlterNote       $0C
000998E5 E701                       	dc.b	smpsNoAttack, $01
000998E7 E109                       	smpsAlterNote       $09
000998E9 E701                       	dc.b	smpsNoAttack, $01
000998EB E105                       	smpsAlterNote       $05
000998ED E701                       	dc.b	smpsNoAttack, $01
000998EF E109                       	smpsAlterNote       $09
000998F1 E701                       	dc.b	smpsNoAttack, $01
000998F3 E10F                       	smpsAlterNote       $0F
000998F5 E701                       	dc.b	smpsNoAttack, $01
000998F7 E110                       	smpsAlterNote       $10
000998F9 E701                       	dc.b	smpsNoAttack, $01
000998FB E10C                       	smpsAlterNote       $0C
000998FD E701                       	dc.b	smpsNoAttack, $01
000998FF E106                       	smpsAlterNote       $06
00099901 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099905 E109                       	smpsAlterNote       $09
00099907 E701                       	dc.b	smpsNoAttack, $01
00099909 E10F                       	smpsAlterNote       $0F
0009990B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009990F E109                       	smpsAlterNote       $09
00099911 E701                       	dc.b	smpsNoAttack, $01
00099913 E106                       	smpsAlterNote       $06
00099915 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099919 E10C                       	smpsAlterNote       $0C
0009991B E701                       	dc.b	smpsNoAttack, $01
0009991D E110                       	smpsAlterNote       $10
0009991F E701                       	dc.b	smpsNoAttack, $01
00099921 E10F                       	smpsAlterNote       $0F
00099923 E701                       	dc.b	smpsNoAttack, $01
00099925 E109                       	smpsAlterNote       $09
00099927 E701                       	dc.b	smpsNoAttack, $01
00099929 E105                       	smpsAlterNote       $05
0009992B E701                       	dc.b	smpsNoAttack, $01
0009992D E109                       	smpsAlterNote       $09
0009992F E701                       	dc.b	smpsNoAttack, $01
00099931 E10C                       	smpsAlterNote       $0C
00099933 E701                       	dc.b	smpsNoAttack, $01
00099935 E110                       	smpsAlterNote       $10
00099937 E701                       	dc.b	smpsNoAttack, $01
00099939 E10C                       	smpsAlterNote       $0C
0009993B E701                       	dc.b	smpsNoAttack, $01
0009993D E106                       	smpsAlterNote       $06
0009993F E701                       	dc.b	smpsNoAttack, $01
00099941 E105                       	smpsAlterNote       $05
00099943 E701                       	dc.b	smpsNoAttack, $01
00099945 E109                       	smpsAlterNote       $09
00099947 E701                       	dc.b	smpsNoAttack, $01
00099949 E10F                       	smpsAlterNote       $0F
0009994B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009994F E109                       	smpsAlterNote       $09
00099951 E701                       	dc.b	smpsNoAttack, $01
00099953 E106                       	smpsAlterNote       $06
00099955 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099959 E10C                       	smpsAlterNote       $0C
0009995B E701                       	dc.b	smpsNoAttack, $01
0009995D E110                       	smpsAlterNote       $10
0009995F E701                       	dc.b	smpsNoAttack, $01
00099961 E10F                       	smpsAlterNote       $0F
00099963 E701                       	dc.b	smpsNoAttack, $01
00099965 E109                       	smpsAlterNote       $09
00099967 E701                       	dc.b	smpsNoAttack, $01
00099969 E105                       	smpsAlterNote       $05
0009996B E701                       	dc.b	smpsNoAttack, $01
0009996D E109                       	smpsAlterNote       $09
0009996F E701                       	dc.b	smpsNoAttack, $01
00099971 E10C                       	smpsAlterNote       $0C
00099973 E701                       	dc.b	smpsNoAttack, $01
00099975 E110                       	smpsAlterNote       $10
00099977 E701                       	dc.b	smpsNoAttack, $01
00099979 E10C                       	smpsAlterNote       $0C
0009997B E701                       	dc.b	smpsNoAttack, $01
0009997D E106                       	smpsAlterNote       $06
0009997F E701                       	dc.b	smpsNoAttack, $01
00099981 E105                       	smpsAlterNote       $05
00099983 E701                       	dc.b	smpsNoAttack, $01
00099985 E109                       	smpsAlterNote       $09
00099987 E701                       	dc.b	smpsNoAttack, $01
00099989 E10F                       	smpsAlterNote       $0F
0009998B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009998F E10C                       	smpsAlterNote       $0C
00099991 E701                       	dc.b	smpsNoAttack, $01
00099993 E106                       	smpsAlterNote       $06
00099995 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099999 E10C                       	smpsAlterNote       $0C
0009999B E701                       	dc.b	smpsNoAttack, $01
0009999D E10F                       	smpsAlterNote       $0F
0009999F E701                       	dc.b	smpsNoAttack, $01
000999A1 E110                       	smpsAlterNote       $10
000999A3 8001                       	dc.b	nRst, $01
000999A5 E10F                       	smpsAlterNote       $0F
000999A7 C604                       	dc.b	nA5, $04
000999A9 E10D                       	smpsAlterNote       $0D
000999AB C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000999B1 E10B                       	smpsAlterNote       $0B
000999B3 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000999B9 E10F                       	smpsAlterNote       $0F
000999BB C604 8001                  	dc.b	nA5, $04, nRst, $01
000999BF E10D                       	smpsAlterNote       $0D
000999C1 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000999C7 E10C                       	smpsAlterNote       $0C
000999C9 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000999CF E10A                       	smpsAlterNote       $0A
000999D1 C904                       	dc.b	nC6, $04
000999D3 E110                       	smpsAlterNote       $10
000999D5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000999D9 E10F                       	smpsAlterNote       $0F
000999DB C604                       	dc.b	nA5, $04
000999DD E10D                       	smpsAlterNote       $0D
000999DF C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000999EB E109                       	smpsAlterNote       $09
000999ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000999F1 E10F                       	smpsAlterNote       $0F
000999F3 E701                       	dc.b	smpsNoAttack, $01
000999F5 E112                       	smpsAlterNote       $12
000999F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000999FB E10C                       	smpsAlterNote       $0C
000999FD E701                       	dc.b	smpsNoAttack, $01
000999FF E108                       	smpsAlterNote       $08
00099A01 E701                       	dc.b	smpsNoAttack, $01
00099A03 E109                       	smpsAlterNote       $09
00099A05 E701                       	dc.b	smpsNoAttack, $01
00099A07 E10F                       	smpsAlterNote       $0F
00099A09 E701                       	dc.b	smpsNoAttack, $01
00099A0B E113                       	smpsAlterNote       $13
00099A0D E701                       	dc.b	smpsNoAttack, $01
00099A0F E10D                       	smpsAlterNote       $0D
00099A11 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00099A17 E10C                       	smpsAlterNote       $0C
00099A19 C10D                       	dc.b	nE5, $0D
00099A1B E109                       	smpsAlterNote       $09
00099A1D E701                       	dc.b	smpsNoAttack, $01
00099A1F E106                       	smpsAlterNote       $06
00099A21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A25 E10C                       	smpsAlterNote       $0C
00099A27 E701                       	dc.b	smpsNoAttack, $01
00099A29 E110                       	smpsAlterNote       $10
00099A2B E701                       	dc.b	smpsNoAttack, $01
00099A2D E10F                       	smpsAlterNote       $0F
00099A2F E701                       	dc.b	smpsNoAttack, $01
00099A31 E109                       	smpsAlterNote       $09
00099A33 E701                       	dc.b	smpsNoAttack, $01
00099A35 E105                       	smpsAlterNote       $05
00099A37 E701                       	dc.b	smpsNoAttack, $01
00099A39 E109                       	smpsAlterNote       $09
00099A3B E701                       	dc.b	smpsNoAttack, $01
00099A3D E10C                       	smpsAlterNote       $0C
00099A3F E701                       	dc.b	smpsNoAttack, $01
00099A41 E110                       	smpsAlterNote       $10
00099A43 E701                       	dc.b	smpsNoAttack, $01
00099A45 E10C                       	smpsAlterNote       $0C
00099A47 E701                       	dc.b	smpsNoAttack, $01
00099A49 E106                       	smpsAlterNote       $06
00099A4B E701                       	dc.b	smpsNoAttack, $01
00099A4D E105                       	smpsAlterNote       $05
00099A4F E701                       	dc.b	smpsNoAttack, $01
00099A51 E109                       	smpsAlterNote       $09
00099A53 E701                       	dc.b	smpsNoAttack, $01
00099A55 E10F                       	smpsAlterNote       $0F
00099A57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A5B E10C                       	smpsAlterNote       $0C
00099A5D E701                       	dc.b	smpsNoAttack, $01
00099A5F E106                       	smpsAlterNote       $06
00099A61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A65 E10C                       	smpsAlterNote       $0C
00099A67 E701                       	dc.b	smpsNoAttack, $01
00099A69 E10F                       	smpsAlterNote       $0F
00099A6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099A6F E109                       	smpsAlterNote       $09
00099A71 E701                       	dc.b	smpsNoAttack, $01
00099A73 E105                       	smpsAlterNote       $05
00099A75 E701                       	dc.b	smpsNoAttack, $01
00099A77 E106                       	smpsAlterNote       $06
00099A79 E701                       	dc.b	smpsNoAttack, $01
00099A7B E10C                       	smpsAlterNote       $0C
00099A7D E701                       	dc.b	smpsNoAttack, $01
00099A7F E110                       	smpsAlterNote       $10
00099A81 E701                       	dc.b	smpsNoAttack, $01
00099A83 E10C                       	smpsAlterNote       $0C
00099A85 E701                       	dc.b	smpsNoAttack, $01
00099A87 E109                       	smpsAlterNote       $09
00099A89 E701                       	dc.b	smpsNoAttack, $01
00099A8B E105                       	smpsAlterNote       $05
00099A8D E701                       	dc.b	smpsNoAttack, $01
00099A8F E109                       	smpsAlterNote       $09
00099A91 E701                       	dc.b	smpsNoAttack, $01
00099A93 E10F                       	smpsAlterNote       $0F
00099A95 E701                       	dc.b	smpsNoAttack, $01
00099A97 E110                       	smpsAlterNote       $10
00099A99 E701                       	dc.b	smpsNoAttack, $01
00099A9B E10C                       	smpsAlterNote       $0C
00099A9D E701                       	dc.b	smpsNoAttack, $01
00099A9F E106                       	smpsAlterNote       $06
00099AA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099AA5 E109                       	smpsAlterNote       $09
00099AA7 E701                       	dc.b	smpsNoAttack, $01
00099AA9 E10F                       	smpsAlterNote       $0F
00099AAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099AAF E109                       	smpsAlterNote       $09
00099AB1 E701                       	dc.b	smpsNoAttack, $01
00099AB3 E106                       	smpsAlterNote       $06
00099AB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099AB9 E10C                       	smpsAlterNote       $0C
00099ABB E701                       	dc.b	smpsNoAttack, $01
00099ABD E110                       	smpsAlterNote       $10
00099ABF E701                       	dc.b	smpsNoAttack, $01
00099AC1 E10F                       	smpsAlterNote       $0F
00099AC3 E701                       	dc.b	smpsNoAttack, $01
00099AC5 E109                       	smpsAlterNote       $09
00099AC7 E701                       	dc.b	smpsNoAttack, $01
00099AC9 E105                       	smpsAlterNote       $05
00099ACB E701                       	dc.b	smpsNoAttack, $01
00099ACD E109                       	smpsAlterNote       $09
00099ACF E701                       	dc.b	smpsNoAttack, $01
00099AD1 E10F                       	smpsAlterNote       $0F
00099AD3 E701                       	dc.b	smpsNoAttack, $01
00099AD5 E110                       	smpsAlterNote       $10
00099AD7 E701                       	dc.b	smpsNoAttack, $01
00099AD9 E10C                       	smpsAlterNote       $0C
00099ADB E701                       	dc.b	smpsNoAttack, $01
00099ADD E106                       	smpsAlterNote       $06
00099ADF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099AE3 E109                       	smpsAlterNote       $09
00099AE5 E701                       	dc.b	smpsNoAttack, $01
00099AE7 E10F                       	smpsAlterNote       $0F
00099AE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099AED E109                       	smpsAlterNote       $09
00099AEF E701                       	dc.b	smpsNoAttack, $01
00099AF1 E106                       	smpsAlterNote       $06
00099AF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099AF7 E10C                       	smpsAlterNote       $0C
00099AF9 E701                       	dc.b	smpsNoAttack, $01
00099AFB E110                       	smpsAlterNote       $10
00099AFD E701                       	dc.b	smpsNoAttack, $01
00099AFF E10F                       	smpsAlterNote       $0F
00099B01 E701                       	dc.b	smpsNoAttack, $01
00099B03 E109                       	smpsAlterNote       $09
00099B05 E701                       	dc.b	smpsNoAttack, $01
00099B07 E105                       	smpsAlterNote       $05
00099B09 E701                       	dc.b	smpsNoAttack, $01
00099B0B E109                       	smpsAlterNote       $09
00099B0D E701                       	dc.b	smpsNoAttack, $01
00099B0F E10C                       	smpsAlterNote       $0C
00099B11 E701                       	dc.b	smpsNoAttack, $01
00099B13 E110                       	smpsAlterNote       $10
00099B15 E701                       	dc.b	smpsNoAttack, $01
00099B17 E10C                       	smpsAlterNote       $0C
00099B19 E701                       	dc.b	smpsNoAttack, $01
00099B1B E106                       	smpsAlterNote       $06
00099B1D E701                       	dc.b	smpsNoAttack, $01
00099B1F E105                       	smpsAlterNote       $05
00099B21 E701                       	dc.b	smpsNoAttack, $01
00099B23 E109                       	smpsAlterNote       $09
00099B25 E701                       	dc.b	smpsNoAttack, $01
00099B27 E10F                       	smpsAlterNote       $0F
00099B29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099B2D E10C                       	smpsAlterNote       $0C
00099B2F E701                       	dc.b	smpsNoAttack, $01
00099B31 E106                       	smpsAlterNote       $06
00099B33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099B37 E10C                       	smpsAlterNote       $0C
00099B39 E701                       	dc.b	smpsNoAttack, $01
00099B3B E10F                       	smpsAlterNote       $0F
00099B3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099B41 E109                       	smpsAlterNote       $09
00099B43 E701                       	dc.b	smpsNoAttack, $01
00099B45 E105                       	smpsAlterNote       $05
00099B47 E701                       	dc.b	smpsNoAttack, $01
00099B49 E106                       	smpsAlterNote       $06
00099B4B E701                       	dc.b	smpsNoAttack, $01
00099B4D E10C                       	smpsAlterNote       $0C
00099B4F E701                       	dc.b	smpsNoAttack, $01
00099B51 E110                       	smpsAlterNote       $10
00099B53 E701                       	dc.b	smpsNoAttack, $01
00099B55 E10C                       	smpsAlterNote       $0C
00099B57 E701                       	dc.b	smpsNoAttack, $01
00099B59 E109                       	smpsAlterNote       $09
00099B5B E701                       	dc.b	smpsNoAttack, $01
00099B5D E105                       	smpsAlterNote       $05
00099B5F E701                       	dc.b	smpsNoAttack, $01
00099B61 E109                       	smpsAlterNote       $09
00099B63 E701                       	dc.b	smpsNoAttack, $01
00099B65 E10F                       	smpsAlterNote       $0F
00099B67 E701                       	dc.b	smpsNoAttack, $01
00099B69 E110                       	smpsAlterNote       $10
00099B6B E701                       	dc.b	smpsNoAttack, $01
00099B6D E10C                       	smpsAlterNote       $0C
00099B6F E701                       	dc.b	smpsNoAttack, $01
00099B71 E106                       	smpsAlterNote       $06
00099B73 E701                       	dc.b	smpsNoAttack, $01
00099B75 E10B                       	smpsAlterNote       $0B
00099B77 BF02                       	dc.b	nD5, $02
00099B79 E10C                       	smpsAlterNote       $0C
00099B7B C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00099B81 E109                       	smpsAlterNote       $09
00099B83 E701                       	dc.b	smpsNoAttack, $01
00099B85 E105                       	smpsAlterNote       $05
00099B87 E701                       	dc.b	smpsNoAttack, $01
00099B89 E109                       	smpsAlterNote       $09
00099B8B E701                       	dc.b	smpsNoAttack, $01
00099B8D E10F                       	smpsAlterNote       $0F
00099B8F E701                       	dc.b	smpsNoAttack, $01
00099B91 E110                       	smpsAlterNote       $10
00099B93 E701                       	dc.b	smpsNoAttack, $01
00099B95 E10C                       	smpsAlterNote       $0C
00099B97 E701                       	dc.b	smpsNoAttack, $01
00099B99 E106                       	smpsAlterNote       $06
00099B9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099B9F E109                       	smpsAlterNote       $09
00099BA1 E701                       	dc.b	smpsNoAttack, $01
00099BA3 E10F                       	smpsAlterNote       $0F
00099BA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099BA9 E109                       	smpsAlterNote       $09
00099BAB E701                       	dc.b	smpsNoAttack, $01
00099BAD E106                       	smpsAlterNote       $06
00099BAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099BB3 E10C                       	smpsAlterNote       $0C
00099BB5 E701                       	dc.b	smpsNoAttack, $01
00099BB7 E110                       	smpsAlterNote       $10
00099BB9 E701                       	dc.b	smpsNoAttack, $01
00099BBB E10F                       	smpsAlterNote       $0F
00099BBD E701                       	dc.b	smpsNoAttack, $01
00099BBF E109                       	smpsAlterNote       $09
00099BC1 E701                       	dc.b	smpsNoAttack, $01
00099BC3 E105                       	smpsAlterNote       $05
00099BC5 E701                       	dc.b	smpsNoAttack, $01
00099BC7 E109                       	smpsAlterNote       $09
00099BC9 E701                       	dc.b	smpsNoAttack, $01
00099BCB E10C                       	smpsAlterNote       $0C
00099BCD E701                       	dc.b	smpsNoAttack, $01
00099BCF E110                       	smpsAlterNote       $10
00099BD1 E701                       	dc.b	smpsNoAttack, $01
00099BD3 E10C                       	smpsAlterNote       $0C
00099BD5 E701                       	dc.b	smpsNoAttack, $01
00099BD7 E106                       	smpsAlterNote       $06
00099BD9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00099BDD E10D                       	smpsAlterNote       $0D
00099BDF C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
00099BE7 E10C                       	smpsAlterNote       $0C
00099BE9 C10D                       	dc.b	nE5, $0D
00099BEB E106                       	smpsAlterNote       $06
00099BED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099BF1 E109                       	smpsAlterNote       $09
00099BF3 E701                       	dc.b	smpsNoAttack, $01
00099BF5 E10F                       	smpsAlterNote       $0F
00099BF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099BFB E109                       	smpsAlterNote       $09
00099BFD E701                       	dc.b	smpsNoAttack, $01
00099BFF E106                       	smpsAlterNote       $06
00099C01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099C05 E10C                       	smpsAlterNote       $0C
00099C07 E701                       	dc.b	smpsNoAttack, $01
00099C09 E110                       	smpsAlterNote       $10
00099C0B E701                       	dc.b	smpsNoAttack, $01
00099C0D E10F                       	smpsAlterNote       $0F
00099C0F E701                       	dc.b	smpsNoAttack, $01
00099C11 E109                       	smpsAlterNote       $09
00099C13 E701                       	dc.b	smpsNoAttack, $01
00099C15 E105                       	smpsAlterNote       $05
00099C17 E701                       	dc.b	smpsNoAttack, $01
00099C19 E106                       	smpsAlterNote       $06
00099C1B 800F                       	dc.b	nRst, $0F
00099C1F E6FF                       	smpsAlterVol        $FF
00099C21 E10F                       	smpsAlterNote       $0F
00099C23 BA01                       	dc.b	nA4, $01
00099C25 E110                       	smpsAlterNote       $10
00099C27 BB02                       	dc.b	nBb4, $02
00099C29 E10F                       	smpsAlterNote       $0F
00099C2B BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00099C31 E10B                       	smpsAlterNote       $0B
00099C33 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00099C37 E10C                       	smpsAlterNote       $0C
00099C39 C103                       	dc.b	nE5, $03
00099C3B E10D                       	smpsAlterNote       $0D
00099C3D C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00099C47 E10B                       	smpsAlterNote       $0B
00099C49 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00099C4D E104                       	smpsAlterNote       $04
00099C4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099C53 E10A                       	smpsAlterNote       $0A
00099C55 E701                       	dc.b	smpsNoAttack, $01
00099C57 E10D                       	smpsAlterNote       $0D
00099C59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099C5D E107                       	smpsAlterNote       $07
00099C5F E701                       	dc.b	smpsNoAttack, $01
00099C61 E104                       	smpsAlterNote       $04
00099C63 8001                       	dc.b	nRst, $01
00099C65 E110                       	smpsAlterNote       $10
00099C67 C703                       	dc.b	nBb5, $03
00099C69 E10F                       	smpsAlterNote       $0F
00099C6B C603 8001                  	dc.b	nA5, $03, nRst, $01
00099C6F E10D                       	smpsAlterNote       $0D
00099C71 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00099C75 E10C                       	smpsAlterNote       $0C
00099C77 E701                       	dc.b	smpsNoAttack, $01
00099C79 E108                       	smpsAlterNote       $08
00099C7B E701                       	dc.b	smpsNoAttack, $01
00099C7D E109                       	smpsAlterNote       $09
00099C7F E701                       	dc.b	smpsNoAttack, $01
00099C81 E10F                       	smpsAlterNote       $0F
00099C83 E701                       	dc.b	smpsNoAttack, $01
00099C85 E113                       	smpsAlterNote       $13
00099C87 E701                       	dc.b	smpsNoAttack, $01
00099C89 E10F                       	smpsAlterNote       $0F
00099C8B E701                       	dc.b	smpsNoAttack, $01
00099C8D E10C                       	smpsAlterNote       $0C
00099C8F E701                       	dc.b	smpsNoAttack, $01
00099C91 E108                       	smpsAlterNote       $08
00099C93 E701                       	dc.b	smpsNoAttack, $01
00099C95 E10C                       	smpsAlterNote       $0C
00099C97 E701                       	dc.b	smpsNoAttack, $01
00099C99 E112                       	smpsAlterNote       $12
00099C9B E701                       	dc.b	smpsNoAttack, $01
00099C9D E113                       	smpsAlterNote       $13
00099C9F E701                       	dc.b	smpsNoAttack, $01
00099CA1 E10F                       	smpsAlterNote       $0F
00099CA3 E701                       	dc.b	smpsNoAttack, $01
00099CA5 E109                       	smpsAlterNote       $09
00099CA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099CAB E10C                       	smpsAlterNote       $0C
00099CAD E701                       	dc.b	smpsNoAttack, $01
00099CAF E112                       	smpsAlterNote       $12
00099CB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099CB5 E10C                       	smpsAlterNote       $0C
00099CB7 E701                       	dc.b	smpsNoAttack, $01
00099CB9 E109                       	smpsAlterNote       $09
00099CBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099CBF E10F                       	smpsAlterNote       $0F
00099CC1 E701                       	dc.b	smpsNoAttack, $01
00099CC3 E113                       	smpsAlterNote       $13
00099CC5 E701                       	dc.b	smpsNoAttack, $01
00099CC7 E112                       	smpsAlterNote       $12
00099CC9 E701                       	dc.b	smpsNoAttack, $01
00099CCB E10C                       	smpsAlterNote       $0C
00099CCD E701                       	dc.b	smpsNoAttack, $01
00099CCF E108                       	smpsAlterNote       $08
00099CD1 E701                       	dc.b	smpsNoAttack, $01
00099CD3 E10C                       	smpsAlterNote       $0C
00099CD5 E701                       	dc.b	smpsNoAttack, $01
00099CD7 E10F                       	smpsAlterNote       $0F
00099CD9 E701                       	dc.b	smpsNoAttack, $01
00099CDB E113                       	smpsAlterNote       $13
00099CDD E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00099CE1 E10B                       	smpsAlterNote       $0B
00099CE3 BF03                       	dc.b	nD5, $03
00099CE5 E10C                       	smpsAlterNote       $0C
00099CE7 C103 8001                  	dc.b	nE5, $03, nRst, $01
00099CEB E10D                       	smpsAlterNote       $0D
00099CED C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00099CF7 E10B                       	smpsAlterNote       $0B
00099CF9 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00099D05 E110                       	smpsAlterNote       $10
00099D07 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00099D0B E10F                       	smpsAlterNote       $0F
00099D0D C604                       	dc.b	nA5, $04
00099D0F E10D                       	smpsAlterNote       $0D
00099D11 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00099D17 E109                       	smpsAlterNote       $09
00099D19 E701                       	dc.b	smpsNoAttack, $01
00099D1B E108                       	smpsAlterNote       $08
00099D1D E701                       	dc.b	smpsNoAttack, $01
00099D1F E10C                       	smpsAlterNote       $0C
00099D21 E701                       	dc.b	smpsNoAttack, $01
00099D23 E112                       	smpsAlterNote       $12
00099D25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099D29 E10F                       	smpsAlterNote       $0F
00099D2B E701                       	dc.b	smpsNoAttack, $01
00099D2D E109                       	smpsAlterNote       $09
00099D2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099D33 E10F                       	smpsAlterNote       $0F
00099D35 E701                       	dc.b	smpsNoAttack, $01
00099D37 E112                       	smpsAlterNote       $12
00099D39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099D3D E10C                       	smpsAlterNote       $0C
00099D3F E701                       	dc.b	smpsNoAttack, $01
00099D41 E108                       	smpsAlterNote       $08
00099D43 E701                       	dc.b	smpsNoAttack, $01
00099D45 E109                       	smpsAlterNote       $09
00099D47 E701                       	dc.b	smpsNoAttack, $01
00099D49 E10F                       	smpsAlterNote       $0F
00099D4B E701                       	dc.b	smpsNoAttack, $01
00099D4D E113                       	smpsAlterNote       $13
00099D4F E701                       	dc.b	smpsNoAttack, $01
00099D51 E10F                       	smpsAlterNote       $0F
00099D53 E701                       	dc.b	smpsNoAttack, $01
00099D55 E10C                       	smpsAlterNote       $0C
00099D57 E701                       	dc.b	smpsNoAttack, $01
00099D59 E108                       	smpsAlterNote       $08
00099D5B E701                       	dc.b	smpsNoAttack, $01
00099D5D E10C                       	smpsAlterNote       $0C
00099D5F E701                       	dc.b	smpsNoAttack, $01
00099D61 E112                       	smpsAlterNote       $12
00099D63 E701                       	dc.b	smpsNoAttack, $01
00099D65 E113                       	smpsAlterNote       $13
00099D67 E701                       	dc.b	smpsNoAttack, $01
00099D69 E10F                       	smpsAlterNote       $0F
00099D6B E701                       	dc.b	smpsNoAttack, $01
00099D6D E109                       	smpsAlterNote       $09
00099D6F E701                       	dc.b	smpsNoAttack, $01
00099D71 E10D                       	smpsAlterNote       $0D
00099D73 C402                       	dc.b	nG5, $02
00099D75 E10F                       	smpsAlterNote       $0F
00099D77 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00099D81 E10D                       	smpsAlterNote       $0D
00099D83 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00099D89 E10B                       	smpsAlterNote       $0B
00099D8B BF0D                       	dc.b	nD5, $0D
00099D8D E108                       	smpsAlterNote       $08
00099D8F E701                       	dc.b	smpsNoAttack, $01
00099D91 E104                       	smpsAlterNote       $04
00099D93 E701                       	dc.b	smpsNoAttack, $01
00099D95 E105                       	smpsAlterNote       $05
00099D97 E701                       	dc.b	smpsNoAttack, $01
00099D99 E10B                       	smpsAlterNote       $0B
00099D9B E701                       	dc.b	smpsNoAttack, $01
00099D9D E10F                       	smpsAlterNote       $0F
00099D9F E701                       	dc.b	smpsNoAttack, $01
00099DA1 E10B                       	smpsAlterNote       $0B
00099DA3 E701                       	dc.b	smpsNoAttack, $01
00099DA5 E108                       	smpsAlterNote       $08
00099DA7 E701                       	dc.b	smpsNoAttack, $01
00099DA9 E104                       	smpsAlterNote       $04
00099DAB E701                       	dc.b	smpsNoAttack, $01
00099DAD E108                       	smpsAlterNote       $08
00099DAF E701                       	dc.b	smpsNoAttack, $01
00099DB1 E10E                       	smpsAlterNote       $0E
00099DB3 E701                       	dc.b	smpsNoAttack, $01
00099DB5 E10F                       	smpsAlterNote       $0F
00099DB7 E701                       	dc.b	smpsNoAttack, $01
00099DB9 E10C                       	smpsAlterNote       $0C
00099DBB C101                       	dc.b	nE5, $01
00099DBD E10D                       	smpsAlterNote       $0D
00099DBF C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00099DC7 E10F                       	smpsAlterNote       $0F
00099DC9 C607                       	dc.b	nA5, $07
00099DCB E10C                       	smpsAlterNote       $0C
00099DCD CD07                       	dc.b	nE6, $07
00099DCF E10D                       	smpsAlterNote       $0D
00099DD1 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00099DD5 E10C                       	smpsAlterNote       $0C
00099DD7 CD03                       	dc.b	nE6, $03
00099DD9 E10A                       	smpsAlterNote       $0A
00099DDB C903 8001                  	dc.b	nC6, $03, nRst, $01
00099DDF E10D                       	smpsAlterNote       $0D
00099DE1 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00099DE7 E10A                       	smpsAlterNote       $0A
00099DE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099DED E110                       	smpsAlterNote       $10
00099DEF E701                       	dc.b	smpsNoAttack, $01
00099DF1 E114                       	smpsAlterNote       $14
00099DF3 E701                       	dc.b	smpsNoAttack, $01
00099DF5 E113                       	smpsAlterNote       $13
00099DF7 E701                       	dc.b	smpsNoAttack, $01
00099DF9 E10D                       	smpsAlterNote       $0D
00099DFB E701                       	dc.b	smpsNoAttack, $01
00099DFD E109                       	smpsAlterNote       $09
00099DFF E701                       	dc.b	smpsNoAttack, $01
00099E01 E10D                       	smpsAlterNote       $0D
00099E03 E701                       	dc.b	smpsNoAttack, $01
00099E05 E110                       	smpsAlterNote       $10
00099E07 E701                       	dc.b	smpsNoAttack, $01
00099E09 E114                       	smpsAlterNote       $14
00099E0B E701                       	dc.b	smpsNoAttack, $01
00099E0D E10F                       	smpsAlterNote       $0F
00099E0F C607                       	dc.b	nA5, $07
00099E11 E10D                       	smpsAlterNote       $0D
00099E13 C40D                       	dc.b	nG5, $0D
00099E15 E10A                       	smpsAlterNote       $0A
00099E17 E701                       	dc.b	smpsNoAttack, $01
00099E19 E106                       	smpsAlterNote       $06
00099E1B E701                       	dc.b	smpsNoAttack, $01
00099E1D E10A                       	smpsAlterNote       $0A
00099E1F E701                       	dc.b	smpsNoAttack, $01
00099E21 E10D                       	smpsAlterNote       $0D
00099E23 E701                       	dc.b	smpsNoAttack, $01
00099E25 E111                       	smpsAlterNote       $11
00099E27 E701                       	dc.b	smpsNoAttack, $01
00099E29 E10D                       	smpsAlterNote       $0D
00099E2B E701                       	dc.b	smpsNoAttack, $01
00099E2D E107                       	smpsAlterNote       $07
00099E2F E701                       	dc.b	smpsNoAttack, $01
00099E31 E106                       	smpsAlterNote       $06
00099E33 E701                       	dc.b	smpsNoAttack, $01
00099E35 E10A                       	smpsAlterNote       $0A
00099E37 E701                       	dc.b	smpsNoAttack, $01
00099E39 E110                       	smpsAlterNote       $10
00099E3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E3F E10D                       	smpsAlterNote       $0D
00099E41 E701                       	dc.b	smpsNoAttack, $01
00099E43 E107                       	smpsAlterNote       $07
00099E45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E49 E10F                       	smpsAlterNote       $0F
00099E4B C60E                       	dc.b	nA5, $0E
00099E4D E109                       	smpsAlterNote       $09
00099E4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E53 E10F                       	smpsAlterNote       $0F
00099E55 E701                       	dc.b	smpsNoAttack, $01
00099E57 E112                       	smpsAlterNote       $12
00099E59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099E5D E10C                       	smpsAlterNote       $0C
00099E5F E701                       	dc.b	smpsNoAttack, $01
00099E61 E108                       	smpsAlterNote       $08
00099E63 E701                       	dc.b	smpsNoAttack, $01
00099E65 E109                       	smpsAlterNote       $09
00099E67 E701                       	dc.b	smpsNoAttack, $01
00099E69 E10F                       	smpsAlterNote       $0F
00099E6B E701                       	dc.b	smpsNoAttack, $01
00099E6D E113                       	smpsAlterNote       $13
00099E6F E701                       	dc.b	smpsNoAttack, $01
00099E71 E10F                       	smpsAlterNote       $0F
00099E73 E701                       	dc.b	smpsNoAttack, $01
00099E75 E10C                       	smpsAlterNote       $0C
00099E77 E701                       	dc.b	smpsNoAttack, $01
00099E79 E108                       	smpsAlterNote       $08
00099E7B E701                       	dc.b	smpsNoAttack, $01
00099E7D E109                       	smpsAlterNote       $09
00099E7F 8001                       	dc.b	nRst, $01
00099E81 E110                       	smpsAlterNote       $10
00099E83 C70D                       	dc.b	nBb5, $0D
00099E85 E10D                       	smpsAlterNote       $0D
00099E87 E701                       	dc.b	smpsNoAttack, $01
00099E89 E109                       	smpsAlterNote       $09
00099E8B E701                       	dc.b	smpsNoAttack, $01
00099E8D E10D                       	smpsAlterNote       $0D
00099E8F E701                       	dc.b	smpsNoAttack, $01
00099E91 E113                       	smpsAlterNote       $13
00099E93 E701                       	dc.b	smpsNoAttack, $01
00099E95 E114                       	smpsAlterNote       $14
00099E97 E701                       	dc.b	smpsNoAttack, $01
00099E99 E110                       	smpsAlterNote       $10
00099E9B E701                       	dc.b	smpsNoAttack, $01
00099E9D E10A                       	smpsAlterNote       $0A
00099E9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099EA3 E10D                       	smpsAlterNote       $0D
00099EA5 E701                       	dc.b	smpsNoAttack, $01
00099EA7 E113                       	smpsAlterNote       $13
00099EA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099EAD E10D                       	smpsAlterNote       $0D
00099EAF E701                       	dc.b	smpsNoAttack, $01
00099EB1 E10A                       	smpsAlterNote       $0A
00099EB3 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00099EBD E10B                       	smpsAlterNote       $0B
00099EBF 8001                       	dc.b	nRst, $01
00099EC1 E10C                       	smpsAlterNote       $0C
00099EC3 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00099EC7 E10B                       	smpsAlterNote       $0B
00099EC9 CB0D                       	dc.b	nD6, $0D
00099ECB E105                       	smpsAlterNote       $05
00099ECD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099ED1 E108                       	smpsAlterNote       $08
00099ED3 E701                       	dc.b	smpsNoAttack, $01
00099ED5 E10E                       	smpsAlterNote       $0E
00099ED7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099EDB E108                       	smpsAlterNote       $08
00099EDD E701                       	dc.b	smpsNoAttack, $01
00099EDF E105                       	smpsAlterNote       $05
00099EE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099EE5 E10B                       	smpsAlterNote       $0B
00099EE7 E701                       	dc.b	smpsNoAttack, $01
00099EE9 E10F                       	smpsAlterNote       $0F
00099EEB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00099EEF E10C                       	smpsAlterNote       $0C
00099EF1 CC0D                       	dc.b	nEb6, $0D
00099EF3 E106                       	smpsAlterNote       $06
00099EF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099EF9 E109                       	smpsAlterNote       $09
00099EFB E701                       	dc.b	smpsNoAttack, $01
00099EFD E10C                       	smpsAlterNote       $0C
00099EFF 8001                       	dc.b	nRst, $01
00099F01 E10A                       	smpsAlterNote       $0A
00099F03 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00099F0F CB0E                       	dc.b	nD6, $0E
00099F11 E105                       	smpsAlterNote       $05
00099F13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099F17 E10B                       	smpsAlterNote       $0B
00099F19 E701                       	dc.b	smpsNoAttack, $01
00099F1B E10E                       	smpsAlterNote       $0E
00099F1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099F21 E108                       	smpsAlterNote       $08
00099F23 E701                       	dc.b	smpsNoAttack, $01
00099F25 E104                       	smpsAlterNote       $04
00099F27 E701                       	dc.b	smpsNoAttack, $01
00099F29 E105                       	smpsAlterNote       $05
00099F2B E701                       	dc.b	smpsNoAttack, $01
00099F2D E10B                       	smpsAlterNote       $0B
00099F2F E701                       	dc.b	smpsNoAttack, $01
00099F31 E10F                       	smpsAlterNote       $0F
00099F33 E701                       	dc.b	smpsNoAttack, $01
00099F35 E10D                       	smpsAlterNote       $0D
00099F37 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00099F3B E10C                       	smpsAlterNote       $0C
00099F3D CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00099F41 E10A                       	smpsAlterNote       $0A
00099F43 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00099F4F CB0D                       	dc.b	nD6, $0D
00099F51 E108                       	smpsAlterNote       $08
00099F53 E701                       	dc.b	smpsNoAttack, $01
00099F55 E104                       	smpsAlterNote       $04
00099F57 E701                       	dc.b	smpsNoAttack, $01
00099F59 E105                       	smpsAlterNote       $05
00099F5B E701                       	dc.b	smpsNoAttack, $01
00099F5D E10B                       	smpsAlterNote       $0B
00099F5F E701                       	dc.b	smpsNoAttack, $01
00099F61 E10F                       	smpsAlterNote       $0F
00099F63 E701                       	dc.b	smpsNoAttack, $01
00099F65 E10B                       	smpsAlterNote       $0B
00099F67 E701                       	dc.b	smpsNoAttack, $01
00099F69 E108                       	smpsAlterNote       $08
00099F6B E701                       	dc.b	smpsNoAttack, $01
00099F6D E104                       	smpsAlterNote       $04
00099F6F E701                       	dc.b	smpsNoAttack, $01
00099F71 E108                       	smpsAlterNote       $08
00099F73 E701                       	dc.b	smpsNoAttack, $01
00099F75 E10E                       	smpsAlterNote       $0E
00099F77 E701                       	dc.b	smpsNoAttack, $01
00099F79 E10F                       	smpsAlterNote       $0F
00099F7B E701                       	dc.b	smpsNoAttack, $01
00099F7D E10C                       	smpsAlterNote       $0C
00099F7F CC0D                       	dc.b	nEb6, $0D
00099F81 E109                       	smpsAlterNote       $09
00099F83 E701                       	dc.b	smpsNoAttack, $01
00099F85 E105                       	smpsAlterNote       $05
00099F87 E701                       	dc.b	smpsNoAttack, $01
00099F89 E106                       	smpsAlterNote       $06
00099F8B E701                       	dc.b	smpsNoAttack, $01
00099F8D E10C                       	smpsAlterNote       $0C
00099F8F E701                       	dc.b	smpsNoAttack, $01
00099F91 E10A                       	smpsAlterNote       $0A
00099F93 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00099F9F CB0D                       	dc.b	nD6, $0D
00099FA1 E108                       	smpsAlterNote       $08
00099FA3 E701                       	dc.b	smpsNoAttack, $01
00099FA5 E104                       	smpsAlterNote       $04
00099FA7 E701                       	dc.b	smpsNoAttack, $01
00099FA9 E108                       	smpsAlterNote       $08
00099FAB E701                       	dc.b	smpsNoAttack, $01
00099FAD E10B                       	smpsAlterNote       $0B
00099FAF E701                       	dc.b	smpsNoAttack, $01
00099FB1 E10F                       	smpsAlterNote       $0F
00099FB3 E701                       	dc.b	smpsNoAttack, $01
00099FB5 E10B                       	smpsAlterNote       $0B
00099FB7 E701                       	dc.b	smpsNoAttack, $01
00099FB9 E105                       	smpsAlterNote       $05
00099FBB E701                       	dc.b	smpsNoAttack, $01
00099FBD E104                       	smpsAlterNote       $04
00099FBF E701                       	dc.b	smpsNoAttack, $01
00099FC1 E108                       	smpsAlterNote       $08
00099FC3 E701                       	dc.b	smpsNoAttack, $01
00099FC5 E10E                       	smpsAlterNote       $0E
00099FC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00099FCB E10B                       	smpsAlterNote       $0B
00099FCD E701                       	dc.b	smpsNoAttack, $01
00099FCF E105                       	smpsAlterNote       $05
00099FD1 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00099FD9 03                         	dc.b	$03
00099FDA E601                       	smpsAlterVol        $01
00099FDC F6F1 D1                    	smpsJump            music84_Jump01
00099FDF                            
00099FDF                            ; FM5 Data
00099FDF                            music84_FM5:
00099FE1 E080                       	smpsPan             panLeft, $00
00099FE3 8003                       	dc.b	nRst, $03
00099FE5 E10D                       	smpsAlterNote       $0D
00099FE7 C203 8008                  	dc.b	nF5, $03, nRst, $08
00099FEB E10C                       	smpsAlterNote       $0C
00099FED C103 800A                  	dc.b	nE5, $03, nRst, $0A
00099FF1 E10F                       	smpsAlterNote       $0F
00099FF3 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00099FF9 E6FE                       	smpsAlterVol        $FE
00099FFB C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0009A001 E10D                       	smpsAlterNote       $0D
0009A003 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009A009 E10C                       	smpsAlterNote       $0C
0009A00B C102 8001                  	dc.b	nE5, $02, nRst, $01
0009A00F E10A                       	smpsAlterNote       $0A
0009A011 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0009A017 03                         	dc.b	$03
0009A018                            
0009A018                            music84_Jump00:
0009A018 8004                       	dc.b	nRst, $04
0009A01A E602                       	smpsAlterVol        $02
0009A01C E10D                       	smpsAlterNote       $0D
0009A01E B60D                       	dc.b	nF4, $0D
0009A020 E107                       	smpsAlterNote       $07
0009A022 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A026 E10A                       	smpsAlterNote       $0A
0009A028 E701                       	dc.b	smpsNoAttack, $01
0009A02A E110                       	smpsAlterNote       $10
0009A02C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A030 E10A                       	smpsAlterNote       $0A
0009A032 E701                       	dc.b	smpsNoAttack, $01
0009A034 E107                       	smpsAlterNote       $07
0009A036 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A03A E10D                       	smpsAlterNote       $0D
0009A03C E701                       	dc.b	smpsNoAttack, $01
0009A03E E111                       	smpsAlterNote       $11
0009A040 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A044 E10D                       	smpsAlterNote       $0D
0009A046 B80D                       	dc.b	nG4, $0D
0009A048 E107                       	smpsAlterNote       $07
0009A04A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A04E E10A                       	smpsAlterNote       $0A
0009A050 E701                       	dc.b	smpsNoAttack, $01
0009A052 E110                       	smpsAlterNote       $10
0009A054 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A058 E10A                       	smpsAlterNote       $0A
0009A05A E701                       	dc.b	smpsNoAttack, $01
0009A05C E107                       	smpsAlterNote       $07
0009A05E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A062 E10D                       	smpsAlterNote       $0D
0009A064 E701                       	dc.b	smpsNoAttack, $01
0009A066 E111                       	smpsAlterNote       $11
0009A068 E701                       	dc.b	smpsNoAttack, $01
0009A06A E110                       	smpsAlterNote       $10
0009A06C E701                       	dc.b	smpsNoAttack, $01
0009A06E E10A                       	smpsAlterNote       $0A
0009A070 E701                       	dc.b	smpsNoAttack, $01
0009A072 E106                       	smpsAlterNote       $06
0009A074 E701                       	dc.b	smpsNoAttack, $01
0009A076 E10A                       	smpsAlterNote       $0A
0009A078 E701                       	dc.b	smpsNoAttack, $01
0009A07A E10D                       	smpsAlterNote       $0D
0009A07C E701                       	dc.b	smpsNoAttack, $01
0009A07E E111                       	smpsAlterNote       $11
0009A080 E701                       	dc.b	smpsNoAttack, $01
0009A082 E10D                       	smpsAlterNote       $0D
0009A084 E701                       	dc.b	smpsNoAttack, $01
0009A086 E10F                       	smpsAlterNote       $0F
0009A088 BA0E                       	dc.b	nA4, $0E
0009A08A E109                       	smpsAlterNote       $09
0009A08C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A090 E10F                       	smpsAlterNote       $0F
0009A092 E701                       	dc.b	smpsNoAttack, $01
0009A094 E112                       	smpsAlterNote       $12
0009A096 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A09A E10C                       	smpsAlterNote       $0C
0009A09C E701                       	dc.b	smpsNoAttack, $01
0009A09E E108                       	smpsAlterNote       $08
0009A0A0 E701                       	dc.b	smpsNoAttack, $01
0009A0A2 E109                       	smpsAlterNote       $09
0009A0A4 E701                       	dc.b	smpsNoAttack, $01
0009A0A6 E10F                       	smpsAlterNote       $0F
0009A0A8 E701                       	dc.b	smpsNoAttack, $01
0009A0AA E113                       	smpsAlterNote       $13
0009A0AC E701                       	dc.b	smpsNoAttack, $01
0009A0AE E10F                       	smpsAlterNote       $0F
0009A0B0 E701                       	dc.b	smpsNoAttack, $01
0009A0B2 E109                       	smpsAlterNote       $09
0009A0B4 E701                       	dc.b	smpsNoAttack, $01
0009A0B6 E108                       	smpsAlterNote       $08
0009A0B8 E701                       	dc.b	smpsNoAttack, $01
0009A0BA E10C                       	smpsAlterNote       $0C
0009A0BC E701                       	dc.b	smpsNoAttack, $01
0009A0BE E112                       	smpsAlterNote       $12
0009A0C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A0C4 E10F                       	smpsAlterNote       $0F
0009A0C6 E701                       	dc.b	smpsNoAttack, $01
0009A0C8 E109                       	smpsAlterNote       $09
0009A0CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A0CE E10F                       	smpsAlterNote       $0F
0009A0D0 E701                       	dc.b	smpsNoAttack, $01
0009A0D2 E112                       	smpsAlterNote       $12
0009A0D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A0D8 E10C                       	smpsAlterNote       $0C
0009A0DA E701                       	dc.b	smpsNoAttack, $01
0009A0DC E108                       	smpsAlterNote       $08
0009A0DE E701                       	dc.b	smpsNoAttack, $01
0009A0E0 E109                       	smpsAlterNote       $09
0009A0E2 E701                       	dc.b	smpsNoAttack, $01
0009A0E4 E10F                       	smpsAlterNote       $0F
0009A0E6 E701                       	dc.b	smpsNoAttack, $01
0009A0E8 E113                       	smpsAlterNote       $13
0009A0EA E701                       	dc.b	smpsNoAttack, $01
0009A0EC E10F                       	smpsAlterNote       $0F
0009A0EE E701                       	dc.b	smpsNoAttack, $01
0009A0F0 E10C                       	smpsAlterNote       $0C
0009A0F2 E701                       	dc.b	smpsNoAttack, $01
0009A0F4 E108                       	smpsAlterNote       $08
0009A0F6 E701                       	dc.b	smpsNoAttack, $01
0009A0F8 E109                       	smpsAlterNote       $09
0009A0FA 8001                       	dc.b	nRst, $01
0009A0FC E10C                       	smpsAlterNote       $0C
0009A0FE B50A                       	dc.b	nE4, $0A
0009A100 E10D                       	smpsAlterNote       $0D
0009A102 B60D                       	dc.b	nF4, $0D
0009A104 E10A                       	smpsAlterNote       $0A
0009A106 E701                       	dc.b	smpsNoAttack, $01
0009A108 E106                       	smpsAlterNote       $06
0009A10A E701                       	dc.b	smpsNoAttack, $01
0009A10C E107                       	smpsAlterNote       $07
0009A10E E701                       	dc.b	smpsNoAttack, $01
0009A110 E10D                       	smpsAlterNote       $0D
0009A112 E701                       	dc.b	smpsNoAttack, $01
0009A114 E111                       	smpsAlterNote       $11
0009A116 E701                       	dc.b	smpsNoAttack, $01
0009A118 E10D                       	smpsAlterNote       $0D
0009A11A E701                       	dc.b	smpsNoAttack, $01
0009A11C E10A                       	smpsAlterNote       $0A
0009A11E E701                       	dc.b	smpsNoAttack, $01
0009A120 E106                       	smpsAlterNote       $06
0009A122 E701                       	dc.b	smpsNoAttack, $01
0009A124 E10A                       	smpsAlterNote       $0A
0009A126 E701                       	dc.b	smpsNoAttack, $01
0009A128 E110                       	smpsAlterNote       $10
0009A12A E701                       	dc.b	smpsNoAttack, $01
0009A12C E111                       	smpsAlterNote       $11
0009A12E E701                       	dc.b	smpsNoAttack, $01
0009A130 E10D                       	smpsAlterNote       $0D
0009A132 B80D                       	dc.b	nG4, $0D
0009A134 E10A                       	smpsAlterNote       $0A
0009A136 E701                       	dc.b	smpsNoAttack, $01
0009A138 E106                       	smpsAlterNote       $06
0009A13A E701                       	dc.b	smpsNoAttack, $01
0009A13C E107                       	smpsAlterNote       $07
0009A13E E701                       	dc.b	smpsNoAttack, $01
0009A140 E10D                       	smpsAlterNote       $0D
0009A142 E701                       	dc.b	smpsNoAttack, $01
0009A144 E111                       	smpsAlterNote       $11
0009A146 E701                       	dc.b	smpsNoAttack, $01
0009A148 E10D                       	smpsAlterNote       $0D
0009A14A E701                       	dc.b	smpsNoAttack, $01
0009A14C E10A                       	smpsAlterNote       $0A
0009A14E E701                       	dc.b	smpsNoAttack, $01
0009A150 E106                       	smpsAlterNote       $06
0009A152 E701                       	dc.b	smpsNoAttack, $01
0009A154 E10A                       	smpsAlterNote       $0A
0009A156 E701                       	dc.b	smpsNoAttack, $01
0009A158 E110                       	smpsAlterNote       $10
0009A15A E701                       	dc.b	smpsNoAttack, $01
0009A15C E111                       	smpsAlterNote       $11
0009A15E E701                       	dc.b	smpsNoAttack, $01
0009A160 E10D                       	smpsAlterNote       $0D
0009A162 E701                       	dc.b	smpsNoAttack, $01
0009A164 E107                       	smpsAlterNote       $07
0009A166 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A16A E10A                       	smpsAlterNote       $0A
0009A16C E701                       	dc.b	smpsNoAttack, $01
0009A16E E110                       	smpsAlterNote       $10
0009A170 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A174 E10D                       	smpsAlterNote       $0D
0009A176 8001                       	dc.b	nRst, $01
0009A178 E10F                       	smpsAlterNote       $0F
0009A17A BA0D                       	dc.b	nA4, $0D
0009A17C E10C                       	smpsAlterNote       $0C
0009A17E E701                       	dc.b	smpsNoAttack, $01
0009A180 E108                       	smpsAlterNote       $08
0009A182 E701                       	dc.b	smpsNoAttack, $01
0009A184 E10C                       	smpsAlterNote       $0C
0009A186 E701                       	dc.b	smpsNoAttack, $01
0009A188 E112                       	smpsAlterNote       $12
0009A18A E701                       	dc.b	smpsNoAttack, $01
0009A18C E113                       	smpsAlterNote       $13
0009A18E E701                       	dc.b	smpsNoAttack, $01
0009A190 E10F                       	smpsAlterNote       $0F
0009A192 E701                       	dc.b	smpsNoAttack, $01
0009A194 E109                       	smpsAlterNote       $09
0009A196 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A19A E10C                       	smpsAlterNote       $0C
0009A19C E701                       	dc.b	smpsNoAttack, $01
0009A19E E112                       	smpsAlterNote       $12
0009A1A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A1A4 E10C                       	smpsAlterNote       $0C
0009A1A6 E701                       	dc.b	smpsNoAttack, $01
0009A1A8 E109                       	smpsAlterNote       $09
0009A1AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A1AE E10F                       	smpsAlterNote       $0F
0009A1B0 E701                       	dc.b	smpsNoAttack, $01
0009A1B2 E113                       	smpsAlterNote       $13
0009A1B4 E701                       	dc.b	smpsNoAttack, $01
0009A1B6 E112                       	smpsAlterNote       $12
0009A1B8 E701                       	dc.b	smpsNoAttack, $01
0009A1BA E10C                       	smpsAlterNote       $0C
0009A1BC E701                       	dc.b	smpsNoAttack, $01
0009A1BE E108                       	smpsAlterNote       $08
0009A1C0 E701                       	dc.b	smpsNoAttack, $01
0009A1C2 E10C                       	smpsAlterNote       $0C
0009A1C4 E701                       	dc.b	smpsNoAttack, $01
0009A1C6 E10F                       	smpsAlterNote       $0F
0009A1C8 E701                       	dc.b	smpsNoAttack, $01
0009A1CA E113                       	smpsAlterNote       $13
0009A1CC E701                       	dc.b	smpsNoAttack, $01
0009A1CE E10F                       	smpsAlterNote       $0F
0009A1D0 E701                       	dc.b	smpsNoAttack, $01
0009A1D2 E109                       	smpsAlterNote       $09
0009A1D4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A1D8 E10D                       	smpsAlterNote       $0D
0009A1DA B609 8001                  	dc.b	nF4, $09, nRst, $01
0009A1DE E10C                       	smpsAlterNote       $0C
0009A1E0 B506 8001                  	dc.b	nE4, $06, nRst, $01
0009A1E4 E10B                       	smpsAlterNote       $0B
0009A1E6 B30D                       	dc.b	nD4, $0D
0009A1E8 E10C                       	smpsAlterNote       $0C
0009A1EA B503 8001                  	dc.b	nE4, $03, nRst, $01
0009A1EE E10D                       	smpsAlterNote       $0D
0009A1F0 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0009A1F8 E109                       	smpsAlterNote       $09
0009A1FA E701                       	dc.b	smpsNoAttack, $01
0009A1FC E108                       	smpsAlterNote       $08
0009A1FE E701                       	dc.b	smpsNoAttack, $01
0009A200 E10C                       	smpsAlterNote       $0C
0009A202 E701                       	dc.b	smpsNoAttack, $01
0009A204 E112                       	smpsAlterNote       $12
0009A206 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A20A E10F                       	smpsAlterNote       $0F
0009A20C E701                       	dc.b	smpsNoAttack, $01
0009A20E E109                       	smpsAlterNote       $09
0009A210 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A214 E10F                       	smpsAlterNote       $0F
0009A216 E701                       	dc.b	smpsNoAttack, $01
0009A218 E112                       	smpsAlterNote       $12
0009A21A E701                       	dc.b	smpsNoAttack, $01
0009A21C E113                       	smpsAlterNote       $13
0009A21E 8001                       	dc.b	nRst, $01
0009A220 E10D                       	smpsAlterNote       $0D
0009A222 C20D                       	dc.b	nF5, $0D
0009A224 E107                       	smpsAlterNote       $07
0009A226 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A22A E10A                       	smpsAlterNote       $0A
0009A22C E701                       	dc.b	smpsNoAttack, $01
0009A22E E110                       	smpsAlterNote       $10
0009A230 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A234 E10A                       	smpsAlterNote       $0A
0009A236 E701                       	dc.b	smpsNoAttack, $01
0009A238 E107                       	smpsAlterNote       $07
0009A23A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A23E E10D                       	smpsAlterNote       $0D
0009A240 E701                       	dc.b	smpsNoAttack, $01
0009A242 E111                       	smpsAlterNote       $11
0009A244 E701                       	dc.b	smpsNoAttack, $01
0009A246 E110                       	smpsAlterNote       $10
0009A248 E701                       	dc.b	smpsNoAttack, $01
0009A24A E10A                       	smpsAlterNote       $0A
0009A24C E701                       	dc.b	smpsNoAttack, $01
0009A24E E106                       	smpsAlterNote       $06
0009A250 E701                       	dc.b	smpsNoAttack, $01
0009A252 E10A                       	smpsAlterNote       $0A
0009A254 E701                       	dc.b	smpsNoAttack, $01
0009A256 E10D                       	smpsAlterNote       $0D
0009A258 E701                       	dc.b	smpsNoAttack, $01
0009A25A E111                       	smpsAlterNote       $11
0009A25C E701                       	dc.b	smpsNoAttack, $01
0009A25E E10D                       	smpsAlterNote       $0D
0009A260 E701                       	dc.b	smpsNoAttack, $01
0009A262 E107                       	smpsAlterNote       $07
0009A264 E701                       	dc.b	smpsNoAttack, $01
0009A266 E106                       	smpsAlterNote       $06
0009A268 E701                       	dc.b	smpsNoAttack, $01
0009A26A E10A                       	smpsAlterNote       $0A
0009A26C E701                       	dc.b	smpsNoAttack, $01
0009A26E E110                       	smpsAlterNote       $10
0009A270 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A274 E10D                       	smpsAlterNote       $0D
0009A276 E701                       	dc.b	smpsNoAttack, $01
0009A278 E107                       	smpsAlterNote       $07
0009A27A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A27E E10D                       	smpsAlterNote       $0D
0009A280 E701                       	dc.b	smpsNoAttack, $01
0009A282 E110                       	smpsAlterNote       $10
0009A284 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A288 E10A                       	smpsAlterNote       $0A
0009A28A E701                       	dc.b	smpsNoAttack, $01
0009A28C E106                       	smpsAlterNote       $06
0009A28E E701                       	dc.b	smpsNoAttack, $01
0009A290 E107                       	smpsAlterNote       $07
0009A292 E701                       	dc.b	smpsNoAttack, $01
0009A294 E10D                       	smpsAlterNote       $0D
0009A296 E701                       	dc.b	smpsNoAttack, $01
0009A298 E111                       	smpsAlterNote       $11
0009A29A E701                       	dc.b	smpsNoAttack, $01
0009A29C E10D                       	smpsAlterNote       $0D
0009A29E E701                       	dc.b	smpsNoAttack, $01
0009A2A0 E10A                       	smpsAlterNote       $0A
0009A2A2 E701                       	dc.b	smpsNoAttack, $01
0009A2A4 E106                       	smpsAlterNote       $06
0009A2A6 E701                       	dc.b	smpsNoAttack, $01
0009A2A8 E10A                       	smpsAlterNote       $0A
0009A2AA E701                       	dc.b	smpsNoAttack, $01
0009A2AC E110                       	smpsAlterNote       $10
0009A2AE E701                       	dc.b	smpsNoAttack, $01
0009A2B0 E111                       	smpsAlterNote       $11
0009A2B2 E701                       	dc.b	smpsNoAttack, $01
0009A2B4 E10D                       	smpsAlterNote       $0D
0009A2B6 E701                       	dc.b	smpsNoAttack, $01
0009A2B8 E107                       	smpsAlterNote       $07
0009A2BA E701                       	dc.b	smpsNoAttack, $01
0009A2BC E10D                       	smpsAlterNote       $0D
0009A2BE C207                       	dc.b	nF5, $07
0009A2C0 E10C                       	smpsAlterNote       $0C
0009A2C2 C10D                       	dc.b	nE5, $0D
0009A2C4 E109                       	smpsAlterNote       $09
0009A2C6 E701                       	dc.b	smpsNoAttack, $01
0009A2C8 E106                       	smpsAlterNote       $06
0009A2CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A2CE E10C                       	smpsAlterNote       $0C
0009A2D0 E701                       	dc.b	smpsNoAttack, $01
0009A2D2 E110                       	smpsAlterNote       $10
0009A2D4 E701                       	dc.b	smpsNoAttack, $01
0009A2D6 E10F                       	smpsAlterNote       $0F
0009A2D8 E701                       	dc.b	smpsNoAttack, $01
0009A2DA E109                       	smpsAlterNote       $09
0009A2DC E701                       	dc.b	smpsNoAttack, $01
0009A2DE E105                       	smpsAlterNote       $05
0009A2E0 E701                       	dc.b	smpsNoAttack, $01
0009A2E2 E109                       	smpsAlterNote       $09
0009A2E4 E701                       	dc.b	smpsNoAttack, $01
0009A2E6 E10C                       	smpsAlterNote       $0C
0009A2E8 E701                       	dc.b	smpsNoAttack, $01
0009A2EA E110                       	smpsAlterNote       $10
0009A2EC E701                       	dc.b	smpsNoAttack, $01
0009A2EE E10B                       	smpsAlterNote       $0B
0009A2F0 BF0D                       	dc.b	nD5, $0D
0009A2F2 E108                       	smpsAlterNote       $08
0009A2F4 E701                       	dc.b	smpsNoAttack, $01
0009A2F6 E105                       	smpsAlterNote       $05
0009A2F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A2FC E10B                       	smpsAlterNote       $0B
0009A2FE E701                       	dc.b	smpsNoAttack, $01
0009A300 E10F                       	smpsAlterNote       $0F
0009A302 E701                       	dc.b	smpsNoAttack, $01
0009A304 E10E                       	smpsAlterNote       $0E
0009A306 E701                       	dc.b	smpsNoAttack, $01
0009A308 E108                       	smpsAlterNote       $08
0009A30A E701                       	dc.b	smpsNoAttack, $01
0009A30C E104                       	smpsAlterNote       $04
0009A30E E701                       	dc.b	smpsNoAttack, $01
0009A310 E108                       	smpsAlterNote       $08
0009A312 E701                       	dc.b	smpsNoAttack, $01
0009A314 E10E                       	smpsAlterNote       $0E
0009A316 E701                       	dc.b	smpsNoAttack, $01
0009A318 E10F                       	smpsAlterNote       $0F
0009A31A E701                       	dc.b	smpsNoAttack, $01
0009A31C E10B                       	smpsAlterNote       $0B
0009A31E E701                       	dc.b	smpsNoAttack, $01
0009A320 E105                       	smpsAlterNote       $05
0009A322 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A326 E108                       	smpsAlterNote       $08
0009A328 E701                       	dc.b	smpsNoAttack, $01
0009A32A E10E                       	smpsAlterNote       $0E
0009A32C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A330 E108                       	smpsAlterNote       $08
0009A332 E701                       	dc.b	smpsNoAttack, $01
0009A334 E105                       	smpsAlterNote       $05
0009A336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A33A E10B                       	smpsAlterNote       $0B
0009A33C E701                       	dc.b	smpsNoAttack, $01
0009A33E E10F                       	smpsAlterNote       $0F
0009A340 E701                       	dc.b	smpsNoAttack, $01
0009A342 E10E                       	smpsAlterNote       $0E
0009A344 E701                       	dc.b	smpsNoAttack, $01
0009A346 E108                       	smpsAlterNote       $08
0009A348 E701                       	dc.b	smpsNoAttack, $01
0009A34A E104                       	smpsAlterNote       $04
0009A34C E701                       	dc.b	smpsNoAttack, $01
0009A34E E108                       	smpsAlterNote       $08
0009A350 E701                       	dc.b	smpsNoAttack, $01
0009A352 E10B                       	smpsAlterNote       $0B
0009A354 E701                       	dc.b	smpsNoAttack, $01
0009A356 E10F                       	smpsAlterNote       $0F
0009A358 E701                       	dc.b	smpsNoAttack, $01
0009A35A E10B                       	smpsAlterNote       $0B
0009A35C E701                       	dc.b	smpsNoAttack, $01
0009A35E E105                       	smpsAlterNote       $05
0009A360 E701                       	dc.b	smpsNoAttack, $01
0009A362 E104                       	smpsAlterNote       $04
0009A364 E701                       	dc.b	smpsNoAttack, $01
0009A366 E108                       	smpsAlterNote       $08
0009A368 E701                       	dc.b	smpsNoAttack, $01
0009A36A E10E                       	smpsAlterNote       $0E
0009A36C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A370 E10B                       	smpsAlterNote       $0B
0009A372 E701                       	dc.b	smpsNoAttack, $01
0009A374 E105                       	smpsAlterNote       $05
0009A376 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A37A E10B                       	smpsAlterNote       $0B
0009A37C E701                       	dc.b	smpsNoAttack, $01
0009A37E E10E                       	smpsAlterNote       $0E
0009A380 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A384 E108                       	smpsAlterNote       $08
0009A386 E701                       	dc.b	smpsNoAttack, $01
0009A388 E105                       	smpsAlterNote       $05
0009A38A 8001                       	dc.b	nRst, $01
0009A38E E601                       	smpsAlterVol        $01
0009A390 E10B                       	smpsAlterNote       $0B
0009A392 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0009A39E 8004                       	dc.b	nRst, $04
0009A3A2 E6FF                       	smpsAlterVol        $FF
0009A3A4 E10D                       	smpsAlterNote       $0D
0009A3A6 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0009A3AE E10C                       	smpsAlterNote       $0C
0009A3B0 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0009A3B5 E10D                       	smpsAlterNote       $0D
0009A3B7 B60D                       	dc.b	nF4, $0D
0009A3B9 E10A                       	smpsAlterNote       $0A
0009A3BB E701                       	dc.b	smpsNoAttack, $01
0009A3BD E106                       	smpsAlterNote       $06
0009A3BF E701                       	dc.b	smpsNoAttack, $01
0009A3C1 E10A                       	smpsAlterNote       $0A
0009A3C3 E701                       	dc.b	smpsNoAttack, $01
0009A3C5 E110                       	smpsAlterNote       $10
0009A3C7 E701                       	dc.b	smpsNoAttack, $01
0009A3C9 E111                       	smpsAlterNote       $11
0009A3CB E701                       	dc.b	smpsNoAttack, $01
0009A3CD E10D                       	smpsAlterNote       $0D
0009A3CF E701                       	dc.b	smpsNoAttack, $01
0009A3D1 E107                       	smpsAlterNote       $07
0009A3D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A3D7 E10A                       	smpsAlterNote       $0A
0009A3D9 E701                       	dc.b	smpsNoAttack, $01
0009A3DB E110                       	smpsAlterNote       $10
0009A3DD E701                       	dc.b	smpsNoAttack, $01
0009A3DF E111                       	smpsAlterNote       $11
0009A3E1 8001                       	dc.b	nRst, $01
0009A3E3 E10D                       	smpsAlterNote       $0D
0009A3E5 B80D                       	dc.b	nG4, $0D
0009A3E7 E10A                       	smpsAlterNote       $0A
0009A3E9 E701                       	dc.b	smpsNoAttack, $01
0009A3EB E106                       	smpsAlterNote       $06
0009A3ED E701                       	dc.b	smpsNoAttack, $01
0009A3EF E10A                       	smpsAlterNote       $0A
0009A3F1 E701                       	dc.b	smpsNoAttack, $01
0009A3F3 E110                       	smpsAlterNote       $10
0009A3F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A3F9 E10D                       	smpsAlterNote       $0D
0009A3FB E701                       	dc.b	smpsNoAttack, $01
0009A3FD E107                       	smpsAlterNote       $07
0009A3FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A403 E10D                       	smpsAlterNote       $0D
0009A405 E701                       	dc.b	smpsNoAttack, $01
0009A407 E110                       	smpsAlterNote       $10
0009A409 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A40D E10A                       	smpsAlterNote       $0A
0009A40F E701                       	dc.b	smpsNoAttack, $01
0009A411 E106                       	smpsAlterNote       $06
0009A413 E701                       	dc.b	smpsNoAttack, $01
0009A415 E107                       	smpsAlterNote       $07
0009A417 E701                       	dc.b	smpsNoAttack, $01
0009A419 E10D                       	smpsAlterNote       $0D
0009A41B E701                       	dc.b	smpsNoAttack, $01
0009A41D E111                       	smpsAlterNote       $11
0009A41F E701                       	dc.b	smpsNoAttack, $01
0009A421 E10D                       	smpsAlterNote       $0D
0009A423 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A427 E10F                       	smpsAlterNote       $0F
0009A429 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0009A42D E110                       	smpsAlterNote       $10
0009A42F BB03                       	dc.b	nBb4, $03
0009A431 E10F                       	smpsAlterNote       $0F
0009A433 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0009A439 E110                       	smpsAlterNote       $10
0009A43B C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009A43F E10F                       	smpsAlterNote       $0F
0009A441 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0009A447 E110                       	smpsAlterNote       $10
0009A449 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0009A44D E10F                       	smpsAlterNote       $0F
0009A44F D20D                       	dc.b	nA6, $0D
0009A451 E10C                       	smpsAlterNote       $0C
0009A453 E701                       	dc.b	smpsNoAttack, $01
0009A455 E108                       	smpsAlterNote       $08
0009A457 E701                       	dc.b	smpsNoAttack, $01
0009A459 E10C                       	smpsAlterNote       $0C
0009A45B E701                       	dc.b	smpsNoAttack, $01
0009A45D E10F                       	smpsAlterNote       $0F
0009A45F E701                       	dc.b	smpsNoAttack, $01
0009A461 E113                       	smpsAlterNote       $13
0009A463 E701                       	dc.b	smpsNoAttack, $01
0009A465 E10F                       	smpsAlterNote       $0F
0009A467 E701                       	dc.b	smpsNoAttack, $01
0009A469 E109                       	smpsAlterNote       $09
0009A46B E701                       	dc.b	smpsNoAttack, $01
0009A46D E108                       	smpsAlterNote       $08
0009A46F E701                       	dc.b	smpsNoAttack, $01
0009A471 E10C                       	smpsAlterNote       $0C
0009A473 E701                       	dc.b	smpsNoAttack, $01
0009A475 E112                       	smpsAlterNote       $12
0009A477 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A47B E10F                       	smpsAlterNote       $0F
0009A47D E701                       	dc.b	smpsNoAttack, $01
0009A47F E109                       	smpsAlterNote       $09
0009A481 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0009A487 E10D                       	smpsAlterNote       $0D
0009A489 CE07                       	dc.b	nF6, $07
0009A48B E10C                       	smpsAlterNote       $0C
0009A48D CD06 8001                  	dc.b	nE6, $06, nRst, $01
0009A491 E10D                       	smpsAlterNote       $0D
0009A493 CE03                       	dc.b	nF6, $03
0009A495 E10C                       	smpsAlterNote       $0C
0009A497 CC0D                       	dc.b	nEb6, $0D
0009A499 E109                       	smpsAlterNote       $09
0009A49B E701                       	dc.b	smpsNoAttack, $01
0009A49D E106                       	smpsAlterNote       $06
0009A49F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A4A3 E10C                       	smpsAlterNote       $0C
0009A4A5 E701                       	dc.b	smpsNoAttack, $01
0009A4A7 E110                       	smpsAlterNote       $10
0009A4A9 E701                       	dc.b	smpsNoAttack, $01
0009A4AB E10F                       	smpsAlterNote       $0F
0009A4AD E701                       	dc.b	smpsNoAttack, $01
0009A4AF E109                       	smpsAlterNote       $09
0009A4B1 E701                       	dc.b	smpsNoAttack, $01
0009A4B3 E105                       	smpsAlterNote       $05
0009A4B5 E701                       	dc.b	smpsNoAttack, $01
0009A4B7 E109                       	smpsAlterNote       $09
0009A4B9 E701                       	dc.b	smpsNoAttack, $01
0009A4BB E10C                       	smpsAlterNote       $0C
0009A4BD E701                       	dc.b	smpsNoAttack, $01
0009A4BF E110                       	smpsAlterNote       $10
0009A4C1 E701                       	dc.b	smpsNoAttack, $01
0009A4C3 E10C                       	smpsAlterNote       $0C
0009A4C5 E701                       	dc.b	smpsNoAttack, $01
0009A4C7 E106                       	smpsAlterNote       $06
0009A4C9 E701                       	dc.b	smpsNoAttack, $01
0009A4CB E105                       	smpsAlterNote       $05
0009A4CD E701                       	dc.b	smpsNoAttack, $01
0009A4CF E109                       	smpsAlterNote       $09
0009A4D1 E701                       	dc.b	smpsNoAttack, $01
0009A4D3 E10F                       	smpsAlterNote       $0F
0009A4D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A4D9 E10C                       	smpsAlterNote       $0C
0009A4DB E701                       	dc.b	smpsNoAttack, $01
0009A4DD E10B                       	smpsAlterNote       $0B
0009A4DF CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0009A4E9 E10F                       	smpsAlterNote       $0F
0009A4EB C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0009A4F5 E10D                       	smpsAlterNote       $0D
0009A4F7 C203                       	dc.b	nF5, $03
0009A4F9 E10C                       	smpsAlterNote       $0C
0009A4FB C103 8001                  	dc.b	nE5, $03, nRst, $01
0009A4FF E10D                       	smpsAlterNote       $0D
0009A501 C20D                       	dc.b	nF5, $0D
0009A503 E10C                       	smpsAlterNote       $0C
0009A505 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0009A509 E10B                       	smpsAlterNote       $0B
0009A50B BF0D                       	dc.b	nD5, $0D
0009A50D E108                       	smpsAlterNote       $08
0009A50F E701                       	dc.b	smpsNoAttack, $01
0009A511 E104                       	smpsAlterNote       $04
0009A513 E701                       	dc.b	smpsNoAttack, $01
0009A515 E108                       	smpsAlterNote       $08
0009A517 E701                       	dc.b	smpsNoAttack, $01
0009A519 E10E                       	smpsAlterNote       $0E
0009A51B E701                       	dc.b	smpsNoAttack, $01
0009A51D E10F                       	smpsAlterNote       $0F
0009A51F E701                       	dc.b	smpsNoAttack, $01
0009A521 E10B                       	smpsAlterNote       $0B
0009A523 E701                       	dc.b	smpsNoAttack, $01
0009A525 E105                       	smpsAlterNote       $05
0009A527 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A52B E108                       	smpsAlterNote       $08
0009A52D E701                       	dc.b	smpsNoAttack, $01
0009A52F E10E                       	smpsAlterNote       $0E
0009A531 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A535 E108                       	smpsAlterNote       $08
0009A537 E701                       	dc.b	smpsNoAttack, $01
0009A539 E105                       	smpsAlterNote       $05
0009A53B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A53F E10B                       	smpsAlterNote       $0B
0009A541 E701                       	dc.b	smpsNoAttack, $01
0009A543 E10F                       	smpsAlterNote       $0F
0009A545 E701                       	dc.b	smpsNoAttack, $01
0009A547 E10E                       	smpsAlterNote       $0E
0009A549 E701                       	dc.b	smpsNoAttack, $01
0009A54B E108                       	smpsAlterNote       $08
0009A54D E701                       	dc.b	smpsNoAttack, $01
0009A54F E104                       	smpsAlterNote       $04
0009A551 E701                       	dc.b	smpsNoAttack, $01
0009A553 E108                       	smpsAlterNote       $08
0009A555 E701                       	dc.b	smpsNoAttack, $01
0009A557 E10B                       	smpsAlterNote       $0B
0009A559 E701                       	dc.b	smpsNoAttack, $01
0009A55B E10F                       	smpsAlterNote       $0F
0009A55D E701                       	dc.b	smpsNoAttack, $01
0009A55F E10B                       	smpsAlterNote       $0B
0009A561 E701                       	dc.b	smpsNoAttack, $01
0009A563 E105                       	smpsAlterNote       $05
0009A565 E701                       	dc.b	smpsNoAttack, $01
0009A567 E104                       	smpsAlterNote       $04
0009A569 E701                       	dc.b	smpsNoAttack, $01
0009A56B E108                       	smpsAlterNote       $08
0009A56D E701                       	dc.b	smpsNoAttack, $01
0009A56F E10E                       	smpsAlterNote       $0E
0009A571 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A575 E10B                       	smpsAlterNote       $0B
0009A577 E701                       	dc.b	smpsNoAttack, $01
0009A579 E105                       	smpsAlterNote       $05
0009A57B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A57F E10B                       	smpsAlterNote       $0B
0009A581 E701                       	dc.b	smpsNoAttack, $01
0009A583 E10E                       	smpsAlterNote       $0E
0009A585 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A589 E108                       	smpsAlterNote       $08
0009A58B E701                       	dc.b	smpsNoAttack, $01
0009A58D E104                       	smpsAlterNote       $04
0009A58F E701                       	dc.b	smpsNoAttack, $01
0009A591 E105                       	smpsAlterNote       $05
0009A593 E701                       	dc.b	smpsNoAttack, $01
0009A595 E10B                       	smpsAlterNote       $0B
0009A597 E701                       	dc.b	smpsNoAttack, $01
0009A599 E10F                       	smpsAlterNote       $0F
0009A59B E701                       	dc.b	smpsNoAttack, $01
0009A59D E10B                       	smpsAlterNote       $0B
0009A59F E701                       	dc.b	smpsNoAttack, $01
0009A5A1 E108                       	smpsAlterNote       $08
0009A5A3 E701                       	dc.b	smpsNoAttack, $01
0009A5A5 E104                       	smpsAlterNote       $04
0009A5A7 E701                       	dc.b	smpsNoAttack, $01
0009A5A9 E108                       	smpsAlterNote       $08
0009A5AB E701                       	dc.b	smpsNoAttack, $01
0009A5AD E10E                       	smpsAlterNote       $0E
0009A5AF E701                       	dc.b	smpsNoAttack, $01
0009A5B1 E10F                       	smpsAlterNote       $0F
0009A5B3 E701                       	dc.b	smpsNoAttack, $01
0009A5B5 E10B                       	smpsAlterNote       $0B
0009A5B7 E701                       	dc.b	smpsNoAttack, $01
0009A5B9 E105                       	smpsAlterNote       $05
0009A5BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A5BF E108                       	smpsAlterNote       $08
0009A5C1 E701                       	dc.b	smpsNoAttack, $01
0009A5C3 E10E                       	smpsAlterNote       $0E
0009A5C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A5C9 E108                       	smpsAlterNote       $08
0009A5CB E701                       	dc.b	smpsNoAttack, $01
0009A5CD E105                       	smpsAlterNote       $05
0009A5CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A5D3 E10B                       	smpsAlterNote       $0B
0009A5D5 E701                       	dc.b	smpsNoAttack, $01
0009A5D7 E10F                       	smpsAlterNote       $0F
0009A5D9 E701                       	dc.b	smpsNoAttack, $01
0009A5DB E10E                       	smpsAlterNote       $0E
0009A5DD E701                       	dc.b	smpsNoAttack, $01
0009A5DF E108                       	smpsAlterNote       $08
0009A5E1 E701                       	dc.b	smpsNoAttack, $01
0009A5E3 E104                       	smpsAlterNote       $04
0009A5E5 E701                       	dc.b	smpsNoAttack, $01
0009A5E7 E108                       	smpsAlterNote       $08
0009A5E9 E701                       	dc.b	smpsNoAttack, $01
0009A5EB E10B                       	smpsAlterNote       $0B
0009A5ED E701                       	dc.b	smpsNoAttack, $01
0009A5EF E10F                       	smpsAlterNote       $0F
0009A5F1 E701                       	dc.b	smpsNoAttack, $01
0009A5F3 E10B                       	smpsAlterNote       $0B
0009A5F5 E701                       	dc.b	smpsNoAttack, $01
0009A5F7 E105                       	smpsAlterNote       $05
0009A5F9 E701                       	dc.b	smpsNoAttack, $01
0009A5FB E104                       	smpsAlterNote       $04
0009A5FD E701                       	dc.b	smpsNoAttack, $01
0009A5FF E105                       	smpsAlterNote       $05
0009A601 8001                       	dc.b	nRst, $01
0009A603 E10D                       	smpsAlterNote       $0D
0009A605 C20D                       	dc.b	nF5, $0D
0009A607 E107                       	smpsAlterNote       $07
0009A609 E701                       	dc.b	smpsNoAttack, $01
0009A60B E106                       	smpsAlterNote       $06
0009A60D E701                       	dc.b	smpsNoAttack, $01
0009A60F E10A                       	smpsAlterNote       $0A
0009A611 E701                       	dc.b	smpsNoAttack, $01
0009A613 E110                       	smpsAlterNote       $10
0009A615 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A619 E10D                       	smpsAlterNote       $0D
0009A61B E701                       	dc.b	smpsNoAttack, $01
0009A61D E107                       	smpsAlterNote       $07
0009A61F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A623 E10D                       	smpsAlterNote       $0D
0009A625 E701                       	dc.b	smpsNoAttack, $01
0009A627 E110                       	smpsAlterNote       $10
0009A629 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A62D E10A                       	smpsAlterNote       $0A
0009A62F E701                       	dc.b	smpsNoAttack, $01
0009A631 E106                       	smpsAlterNote       $06
0009A633 E701                       	dc.b	smpsNoAttack, $01
0009A635 E107                       	smpsAlterNote       $07
0009A637 E701                       	dc.b	smpsNoAttack, $01
0009A639 E10D                       	smpsAlterNote       $0D
0009A63B E701                       	dc.b	smpsNoAttack, $01
0009A63D E111                       	smpsAlterNote       $11
0009A63F E701                       	dc.b	smpsNoAttack, $01
0009A641 E10D                       	smpsAlterNote       $0D
0009A643 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A647 E10C                       	smpsAlterNote       $0C
0009A649 C10D                       	dc.b	nE5, $0D
0009A64B E10D                       	smpsAlterNote       $0D
0009A64D C20A                       	dc.b	nF5, $0A
0009A64F E10C                       	smpsAlterNote       $0C
0009A651 C10E                       	dc.b	nE5, $0E
0009A653 E106                       	smpsAlterNote       $06
0009A655 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A659 E10C                       	smpsAlterNote       $0C
0009A65B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A65F E10B                       	smpsAlterNote       $0B
0009A661 BF0D                       	dc.b	nD5, $0D
0009A663 E10C                       	smpsAlterNote       $0C
0009A665 C107                       	dc.b	nE5, $07
0009A667 E10D                       	smpsAlterNote       $0D
0009A669 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0009A673 E110                       	smpsAlterNote       $10
0009A675 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0009A67B E10F                       	smpsAlterNote       $0F
0009A67D C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0009A685 E10D                       	smpsAlterNote       $0D
0009A687 D003                       	dc.b	nG6, $03
0009A68B E0C0                       	smpsPan             panCenter, $00
0009A68D E6FF                       	smpsAlterVol        $FF
0009A68F AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0009A69B 8001                       	dc.b	nRst, $01
0009A69D E10C                       	smpsAlterNote       $0C
0009A69F A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0009A6A9 E604                       	smpsAlterVol        $04
0009A6AB E10B                       	smpsAlterNote       $0B
0009A6AD B306 8001                  	dc.b	nD4, $06, nRst, $01
0009A6B1 E10F                       	smpsAlterNote       $0F
0009A6B3 AE03                       	dc.b	nA3, $03
0009A6B5 E10D                       	smpsAlterNote       $0D
0009A6B7 B603 8001                  	dc.b	nF4, $03, nRst, $01
0009A6BB E10C                       	smpsAlterNote       $0C
0009A6BD B506 8001                  	dc.b	nE4, $06, nRst, $01
0009A6C1 E10B                       	smpsAlterNote       $0B
0009A6C3 B302 8001                  	dc.b	nD4, $02, nRst, $01
0009A6C7 E10A                       	smpsAlterNote       $0A
0009A6C9 B103                       	dc.b	nC4, $03
0009A6CB E110                       	smpsAlterNote       $10
0009A6CD AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009A6D1 E10F                       	smpsAlterNote       $0F
0009A6D3 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0009A6D7 E080                       	smpsPan             panLeft, $00
0009A6D9 01                         	dc.b	$01
0009A6DC E6FB                       	smpsAlterVol        $FB
0009A6DE E1E4                       	smpsAlterNote       $E4
0009A6E0 C501                       	dc.b	nAb5, $01
0009A6E2 E1F4                       	smpsAlterNote       $F4
0009A6E4 E701                       	dc.b	smpsNoAttack, $01
0009A6E6 E104                       	smpsAlterNote       $04
0009A6E8 E701                       	dc.b	smpsNoAttack, $01
0009A6EA E114                       	smpsAlterNote       $14
0009A6EC E701                       	dc.b	smpsNoAttack, $01
0009A6EE E11C                       	smpsAlterNote       $1C
0009A6F0 E701                       	dc.b	smpsNoAttack, $01
0009A6F2 E1EF                       	smpsAlterNote       $EF
0009A6F4 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0009A6F7 E1FF                       	smpsAlterNote       $FF
0009A6F9 E701                       	dc.b	smpsNoAttack, $01
0009A6FB E10F                       	smpsAlterNote       $0F
0009A6FD C606                       	dc.b	nA5, $06
0009A6FF E109                       	smpsAlterNote       $09
0009A701 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A705 E10F                       	smpsAlterNote       $0F
0009A707 E701                       	dc.b	smpsNoAttack, $01
0009A709 E112                       	smpsAlterNote       $12
0009A70B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A70F E10C                       	smpsAlterNote       $0C
0009A711 E701                       	dc.b	smpsNoAttack, $01
0009A713 E108                       	smpsAlterNote       $08
0009A715 E701                       	dc.b	smpsNoAttack, $01
0009A717 E109                       	smpsAlterNote       $09
0009A719 E701                       	dc.b	smpsNoAttack, $01
0009A71B E10F                       	smpsAlterNote       $0F
0009A71D E701                       	dc.b	smpsNoAttack, $01
0009A71F E113                       	smpsAlterNote       $13
0009A721 E701                       	dc.b	smpsNoAttack, $01
0009A723 E10F                       	smpsAlterNote       $0F
0009A725 E701                       	dc.b	smpsNoAttack, $01
0009A727 E10C                       	smpsAlterNote       $0C
0009A729 E701                       	dc.b	smpsNoAttack, $01
0009A72B E108                       	smpsAlterNote       $08
0009A72D E701                       	dc.b	smpsNoAttack, $01
0009A72F E10C                       	smpsAlterNote       $0C
0009A731 E701                       	dc.b	smpsNoAttack, $01
0009A733 E112                       	smpsAlterNote       $12
0009A735 E701                       	dc.b	smpsNoAttack, $01
0009A737 E113                       	smpsAlterNote       $13
0009A739 E701                       	dc.b	smpsNoAttack, $01
0009A73B E10F                       	smpsAlterNote       $0F
0009A73D E701                       	dc.b	smpsNoAttack, $01
0009A73F E109                       	smpsAlterNote       $09
0009A741 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A745 E10C                       	smpsAlterNote       $0C
0009A747 E701                       	dc.b	smpsNoAttack, $01
0009A749 E112                       	smpsAlterNote       $12
0009A74B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A74F E10C                       	smpsAlterNote       $0C
0009A751 E701                       	dc.b	smpsNoAttack, $01
0009A753 E109                       	smpsAlterNote       $09
0009A755 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A759 E10F                       	smpsAlterNote       $0F
0009A75B E701                       	dc.b	smpsNoAttack, $01
0009A75D E113                       	smpsAlterNote       $13
0009A75F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A763 E10D                       	smpsAlterNote       $0D
0009A765 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0009A76B E10C                       	smpsAlterNote       $0C
0009A76D C102 8001                  	dc.b	nE5, $02, nRst, $01
0009A771 E10D                       	smpsAlterNote       $0D
0009A773 C201 8001                  	dc.b	nF5, $01, nRst, $01
0009A777 E10C                       	smpsAlterNote       $0C
0009A779 C102                       	dc.b	nE5, $02
0009A77B E10B                       	smpsAlterNote       $0B
0009A77D BF02 8001                  	dc.b	nD5, $02, nRst, $01
0009A781 E10C                       	smpsAlterNote       $0C
0009A783 C101 8001                  	dc.b	nE5, $01, nRst, $01
0009A787 E10B                       	smpsAlterNote       $0B
0009A789 BF02                       	dc.b	nD5, $02
0009A78B E10A                       	smpsAlterNote       $0A
0009A78D BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0009A797 E110                       	smpsAlterNote       $10
0009A799 BB02                       	dc.b	nBb4, $02
0009A79B E10A                       	smpsAlterNote       $0A
0009A79D BD02 8001                  	dc.b	nC5, $02, nRst, $01
0009A7A1 E110                       	smpsAlterNote       $10
0009A7A3 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009A7A7 E10F                       	smpsAlterNote       $0F
0009A7A9 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0009A7AD E110                       	smpsAlterNote       $10
0009A7AF BB02                       	dc.b	nBb4, $02
0009A7B1 E10F                       	smpsAlterNote       $0F
0009A7B3 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0009A7BD E10C                       	smpsAlterNote       $0C
0009A7BF B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0009A7C7 E10B                       	smpsAlterNote       $0B
0009A7C9 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0009A7CD E10F                       	smpsAlterNote       $0F
0009A7CF BA02                       	dc.b	nA4, $02
0009A7D3 E0C0                       	smpsPan             panCenter, $00
0009A7D5 E601                       	smpsAlterVol        $01
0009A7D7 E109                       	smpsAlterNote       $09
0009A7D9 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0009A7E5 E108                       	smpsAlterNote       $08
0009A7E7 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0009A7ED E107                       	smpsAlterNote       $07
0009A7EF B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0009A7F5 E109                       	smpsAlterNote       $09
0009A7F7 B603 8001                  	dc.b	nF4, $03, nRst, $01
0009A7FB E108                       	smpsAlterNote       $08
0009A7FD B506 8001                  	dc.b	nE4, $06, nRst, $01
0009A801 E107                       	smpsAlterNote       $07
0009A803 B302 8001                  	dc.b	nD4, $02, nRst, $01
0009A807 E106                       	smpsAlterNote       $06
0009A809 B103                       	dc.b	nC4, $03
0009A80B E10C                       	smpsAlterNote       $0C
0009A80D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009A813 E080                       	smpsPan             panLeft, $00
0009A815 07                         	dc.b	$07
0009A816 E6FE                       	smpsAlterVol        $FE
0009A818 E10B                       	smpsAlterNote       $0B
0009A81A B20D                       	dc.b	nCs4, $0D
0009A81C E105                       	smpsAlterNote       $05
0009A81E E701                       	dc.b	smpsNoAttack, $01
0009A820 E104                       	smpsAlterNote       $04
0009A822 E701                       	dc.b	smpsNoAttack, $01
0009A824 E108                       	smpsAlterNote       $08
0009A826 E701                       	dc.b	smpsNoAttack, $01
0009A828 E10E                       	smpsAlterNote       $0E
0009A82A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A82E E10B                       	smpsAlterNote       $0B
0009A830 E701                       	dc.b	smpsNoAttack, $01
0009A832 E105                       	smpsAlterNote       $05
0009A834 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A838 E10B                       	smpsAlterNote       $0B
0009A83A E701                       	dc.b	smpsNoAttack, $01
0009A83C E10E                       	smpsAlterNote       $0E
0009A83E E701                       	dc.b	smpsNoAttack, $01
0009A840 E10F                       	smpsAlterNote       $0F
0009A842 8001                       	dc.b	nRst, $01
0009A844 E10B                       	smpsAlterNote       $0B
0009A846 B30D                       	dc.b	nD4, $0D
0009A848 E105                       	smpsAlterNote       $05
0009A84A E701                       	dc.b	smpsNoAttack, $01
0009A84C E104                       	smpsAlterNote       $04
0009A84E E701                       	dc.b	smpsNoAttack, $01
0009A850 E108                       	smpsAlterNote       $08
0009A852 E701                       	dc.b	smpsNoAttack, $01
0009A854 E10E                       	smpsAlterNote       $0E
0009A856 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A85A E10B                       	smpsAlterNote       $0B
0009A85C E701                       	dc.b	smpsNoAttack, $01
0009A85E E105                       	smpsAlterNote       $05
0009A860 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A864 E10B                       	smpsAlterNote       $0B
0009A866 E701                       	dc.b	smpsNoAttack, $01
0009A868 E10E                       	smpsAlterNote       $0E
0009A86A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A86E E108                       	smpsAlterNote       $08
0009A870 E701                       	dc.b	smpsNoAttack, $01
0009A872 E104                       	smpsAlterNote       $04
0009A874 E701                       	dc.b	smpsNoAttack, $01
0009A876 E105                       	smpsAlterNote       $05
0009A878 E701                       	dc.b	smpsNoAttack, $01
0009A87A E10B                       	smpsAlterNote       $0B
0009A87C E701                       	dc.b	smpsNoAttack, $01
0009A87E E10F                       	smpsAlterNote       $0F
0009A880 E701                       	dc.b	smpsNoAttack, $01
0009A882 E10B                       	smpsAlterNote       $0B
0009A884 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009A888 E10C                       	smpsAlterNote       $0C
0009A88A B50D                       	dc.b	nE4, $0D
0009A88C E106                       	smpsAlterNote       $06
0009A88E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A892 E10C                       	smpsAlterNote       $0C
0009A894 E701                       	dc.b	smpsNoAttack, $01
0009A896 E10F                       	smpsAlterNote       $0F
0009A898 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A89C E109                       	smpsAlterNote       $09
0009A89E E701                       	dc.b	smpsNoAttack, $01
0009A8A0 E105                       	smpsAlterNote       $05
0009A8A2 E701                       	dc.b	smpsNoAttack, $01
0009A8A4 E106                       	smpsAlterNote       $06
0009A8A6 E701                       	dc.b	smpsNoAttack, $01
0009A8A8 E10C                       	smpsAlterNote       $0C
0009A8AA E701                       	dc.b	smpsNoAttack, $01
0009A8AC E110                       	smpsAlterNote       $10
0009A8AE E701                       	dc.b	smpsNoAttack, $01
0009A8B0 E10B                       	smpsAlterNote       $0B
0009A8B2 B30E                       	dc.b	nD4, $0E
0009A8B4 E105                       	smpsAlterNote       $05
0009A8B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A8BA E10B                       	smpsAlterNote       $0B
0009A8BC E701                       	dc.b	smpsNoAttack, $01
0009A8BE E10E                       	smpsAlterNote       $0E
0009A8C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A8C4 E108                       	smpsAlterNote       $08
0009A8C6 E701                       	dc.b	smpsNoAttack, $01
0009A8C8 E104                       	smpsAlterNote       $04
0009A8CA E701                       	dc.b	smpsNoAttack, $01
0009A8CC E105                       	smpsAlterNote       $05
0009A8CE E701                       	dc.b	smpsNoAttack, $01
0009A8D0 E10B                       	smpsAlterNote       $0B
0009A8D2 E701                       	dc.b	smpsNoAttack, $01
0009A8D4 E10F                       	smpsAlterNote       $0F
0009A8D6 E701                       	dc.b	smpsNoAttack, $01
0009A8D8 E10B                       	smpsAlterNote       $0B
0009A8DA E701                       	dc.b	smpsNoAttack, $01
0009A8DC E108                       	smpsAlterNote       $08
0009A8DE E701                       	dc.b	smpsNoAttack, $01
0009A8E0 E104                       	smpsAlterNote       $04
0009A8E2 E701                       	dc.b	smpsNoAttack, $01
0009A8E4 E108                       	smpsAlterNote       $08
0009A8E6 E701                       	dc.b	smpsNoAttack, $01
0009A8E8 E10E                       	smpsAlterNote       $0E
0009A8EA E701                       	dc.b	smpsNoAttack, $01
0009A8EC E10F                       	smpsAlterNote       $0F
0009A8EE E701                       	dc.b	smpsNoAttack, $01
0009A8F0 E10B                       	smpsAlterNote       $0B
0009A8F2 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0009A8F6 E108                       	smpsAlterNote       $08
0009A8F8 E701                       	dc.b	smpsNoAttack, $01
0009A8FA E105                       	smpsAlterNote       $05
0009A8FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A900 E10B                       	smpsAlterNote       $0B
0009A902 E701                       	dc.b	smpsNoAttack, $01
0009A904 E10F                       	smpsAlterNote       $0F
0009A906 E701                       	dc.b	smpsNoAttack, $01
0009A908 E10E                       	smpsAlterNote       $0E
0009A90A E701                       	dc.b	smpsNoAttack, $01
0009A90C E108                       	smpsAlterNote       $08
0009A90E E701                       	dc.b	smpsNoAttack, $01
0009A910 E104                       	smpsAlterNote       $04
0009A912 E701                       	dc.b	smpsNoAttack, $01
0009A914 E108                       	smpsAlterNote       $08
0009A916 E701                       	dc.b	smpsNoAttack, $01
0009A918 E10B                       	smpsAlterNote       $0B
0009A91A E701                       	dc.b	smpsNoAttack, $01
0009A91C E10F                       	smpsAlterNote       $0F
0009A91E E701                       	dc.b	smpsNoAttack, $01
0009A920 E10B                       	smpsAlterNote       $0B
0009A922 B30D                       	dc.b	nD4, $0D
0009A924 E108                       	smpsAlterNote       $08
0009A926 E701                       	dc.b	smpsNoAttack, $01
0009A928 E105                       	smpsAlterNote       $05
0009A92A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A92E E10B                       	smpsAlterNote       $0B
0009A930 E701                       	dc.b	smpsNoAttack, $01
0009A932 E10F                       	smpsAlterNote       $0F
0009A934 E701                       	dc.b	smpsNoAttack, $01
0009A936 E10E                       	smpsAlterNote       $0E
0009A938 E701                       	dc.b	smpsNoAttack, $01
0009A93A E108                       	smpsAlterNote       $08
0009A93C E701                       	dc.b	smpsNoAttack, $01
0009A93E E104                       	smpsAlterNote       $04
0009A940 E701                       	dc.b	smpsNoAttack, $01
0009A942 E108                       	smpsAlterNote       $08
0009A944 E701                       	dc.b	smpsNoAttack, $01
0009A946 E10B                       	smpsAlterNote       $0B
0009A948 E701                       	dc.b	smpsNoAttack, $01
0009A94A E10F                       	smpsAlterNote       $0F
0009A94C E701                       	dc.b	smpsNoAttack, $01
0009A94E E10B                       	smpsAlterNote       $0B
0009A950 E701                       	dc.b	smpsNoAttack, $01
0009A952 E105                       	smpsAlterNote       $05
0009A954 E701                       	dc.b	smpsNoAttack, $01
0009A956 E104                       	smpsAlterNote       $04
0009A958 E701                       	dc.b	smpsNoAttack, $01
0009A95A E108                       	smpsAlterNote       $08
0009A95C E701                       	dc.b	smpsNoAttack, $01
0009A95E E10E                       	smpsAlterNote       $0E
0009A960 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A964 E10B                       	smpsAlterNote       $0B
0009A966 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0009A96A E108                       	smpsAlterNote       $08
0009A96C E701                       	dc.b	smpsNoAttack, $01
0009A96E E104                       	smpsAlterNote       $04
0009A970 E701                       	dc.b	smpsNoAttack, $01
0009A972 E108                       	smpsAlterNote       $08
0009A974 E701                       	dc.b	smpsNoAttack, $01
0009A976 E10B                       	smpsAlterNote       $0B
0009A978 E701                       	dc.b	smpsNoAttack, $01
0009A97C E0C0                       	smpsPan             panCenter, $00
0009A97E E601                       	smpsAlterVol        $01
0009A980 E108                       	smpsAlterNote       $08
0009A982 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0009A98E 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0009A996 E080                       	smpsPan             panLeft, $00
0009A998 07                         	dc.b	$07
0009A999 E6FF                       	smpsAlterVol        $FF
0009A99B E10D                       	smpsAlterNote       $0D
0009A99D B60D                       	dc.b	nF4, $0D
0009A99F E10A                       	smpsAlterNote       $0A
0009A9A1 E701                       	dc.b	smpsNoAttack, $01
0009A9A3 E106                       	smpsAlterNote       $06
0009A9A5 E701                       	dc.b	smpsNoAttack, $01
0009A9A7 E10A                       	smpsAlterNote       $0A
0009A9A9 E701                       	dc.b	smpsNoAttack, $01
0009A9AB E110                       	smpsAlterNote       $10
0009A9AD E701                       	dc.b	smpsNoAttack, $01
0009A9AF E111                       	smpsAlterNote       $11
0009A9B1 E701                       	dc.b	smpsNoAttack, $01
0009A9B3 E10D                       	smpsAlterNote       $0D
0009A9B5 E701                       	dc.b	smpsNoAttack, $01
0009A9B7 E107                       	smpsAlterNote       $07
0009A9B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A9BD E10A                       	smpsAlterNote       $0A
0009A9BF E701                       	dc.b	smpsNoAttack, $01
0009A9C1 E110                       	smpsAlterNote       $10
0009A9C3 E701                       	dc.b	smpsNoAttack, $01
0009A9C5 E111                       	smpsAlterNote       $11
0009A9C7 8001                       	dc.b	nRst, $01
0009A9C9 E10D                       	smpsAlterNote       $0D
0009A9CB B80D                       	dc.b	nG4, $0D
0009A9CD E10A                       	smpsAlterNote       $0A
0009A9CF E701                       	dc.b	smpsNoAttack, $01
0009A9D1 E106                       	smpsAlterNote       $06
0009A9D3 E701                       	dc.b	smpsNoAttack, $01
0009A9D5 E10A                       	smpsAlterNote       $0A
0009A9D7 E701                       	dc.b	smpsNoAttack, $01
0009A9D9 E110                       	smpsAlterNote       $10
0009A9DB E701                       	dc.b	smpsNoAttack, $01
0009A9DD E111                       	smpsAlterNote       $11
0009A9DF E701                       	dc.b	smpsNoAttack, $01
0009A9E1 E10D                       	smpsAlterNote       $0D
0009A9E3 E701                       	dc.b	smpsNoAttack, $01
0009A9E5 E107                       	smpsAlterNote       $07
0009A9E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A9EB E10D                       	smpsAlterNote       $0D
0009A9ED E701                       	dc.b	smpsNoAttack, $01
0009A9EF E110                       	smpsAlterNote       $10
0009A9F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009A9F5 E10A                       	smpsAlterNote       $0A
0009A9F7 E701                       	dc.b	smpsNoAttack, $01
0009A9F9 E106                       	smpsAlterNote       $06
0009A9FB E701                       	dc.b	smpsNoAttack, $01
0009A9FD E107                       	smpsAlterNote       $07
0009A9FF E701                       	dc.b	smpsNoAttack, $01
0009AA01 E10D                       	smpsAlterNote       $0D
0009AA03 E701                       	dc.b	smpsNoAttack, $01
0009AA05 E111                       	smpsAlterNote       $11
0009AA07 E701                       	dc.b	smpsNoAttack, $01
0009AA09 E10D                       	smpsAlterNote       $0D
0009AA0B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009AA0F E10F                       	smpsAlterNote       $0F
0009AA11 BA0D                       	dc.b	nA4, $0D
0009AA13 E109                       	smpsAlterNote       $09
0009AA15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA19 E10C                       	smpsAlterNote       $0C
0009AA1B E701                       	dc.b	smpsNoAttack, $01
0009AA1D E112                       	smpsAlterNote       $12
0009AA1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA23 E10C                       	smpsAlterNote       $0C
0009AA25 E701                       	dc.b	smpsNoAttack, $01
0009AA27 E109                       	smpsAlterNote       $09
0009AA29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA2D E10F                       	smpsAlterNote       $0F
0009AA2F E701                       	dc.b	smpsNoAttack, $01
0009AA31 E113                       	smpsAlterNote       $13
0009AA33 E701                       	dc.b	smpsNoAttack, $01
0009AA35 E112                       	smpsAlterNote       $12
0009AA37 E701                       	dc.b	smpsNoAttack, $01
0009AA39 E10C                       	smpsAlterNote       $0C
0009AA3B E701                       	dc.b	smpsNoAttack, $01
0009AA3D E108                       	smpsAlterNote       $08
0009AA3F E701                       	dc.b	smpsNoAttack, $01
0009AA41 E10C                       	smpsAlterNote       $0C
0009AA43 E701                       	dc.b	smpsNoAttack, $01
0009AA45 E10F                       	smpsAlterNote       $0F
0009AA47 E701                       	dc.b	smpsNoAttack, $01
0009AA49 E113                       	smpsAlterNote       $13
0009AA4B E701                       	dc.b	smpsNoAttack, $01
0009AA4D E10F                       	smpsAlterNote       $0F
0009AA4F E701                       	dc.b	smpsNoAttack, $01
0009AA51 E109                       	smpsAlterNote       $09
0009AA53 E701                       	dc.b	smpsNoAttack, $01
0009AA55 E108                       	smpsAlterNote       $08
0009AA57 E701                       	dc.b	smpsNoAttack, $01
0009AA59 E10C                       	smpsAlterNote       $0C
0009AA5B E701                       	dc.b	smpsNoAttack, $01
0009AA5D E112                       	smpsAlterNote       $12
0009AA5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA63 E10F                       	smpsAlterNote       $0F
0009AA65 E701                       	dc.b	smpsNoAttack, $01
0009AA67 E109                       	smpsAlterNote       $09
0009AA69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA6D E10F                       	smpsAlterNote       $0F
0009AA6F E701                       	dc.b	smpsNoAttack, $01
0009AA71 E112                       	smpsAlterNote       $12
0009AA73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA77 E10C                       	smpsAlterNote       $0C
0009AA79 E701                       	dc.b	smpsNoAttack, $01
0009AA7B E108                       	smpsAlterNote       $08
0009AA7D E701                       	dc.b	smpsNoAttack, $01
0009AA7F E109                       	smpsAlterNote       $09
0009AA81 E701                       	dc.b	smpsNoAttack, $01
0009AA83 E10C                       	smpsAlterNote       $0C
0009AA85 B50A                       	dc.b	nE4, $0A
0009AA87 E10D                       	smpsAlterNote       $0D
0009AA89 B60E                       	dc.b	nF4, $0E
0009AA8B E107                       	smpsAlterNote       $07
0009AA8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA91 E10D                       	smpsAlterNote       $0D
0009AA93 E701                       	dc.b	smpsNoAttack, $01
0009AA95 E110                       	smpsAlterNote       $10
0009AA97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AA9B E10A                       	smpsAlterNote       $0A
0009AA9D E701                       	dc.b	smpsNoAttack, $01
0009AA9F E106                       	smpsAlterNote       $06
0009AAA1 E701                       	dc.b	smpsNoAttack, $01
0009AAA3 E107                       	smpsAlterNote       $07
0009AAA5 E701                       	dc.b	smpsNoAttack, $01
0009AAA7 E10D                       	smpsAlterNote       $0D
0009AAA9 E701                       	dc.b	smpsNoAttack, $01
0009AAAB E111                       	smpsAlterNote       $11
0009AAAD E701                       	dc.b	smpsNoAttack, $01
0009AAAF E10D                       	smpsAlterNote       $0D
0009AAB1 B80D                       	dc.b	nG4, $0D
0009AAB3 E10A                       	smpsAlterNote       $0A
0009AAB5 E701                       	dc.b	smpsNoAttack, $01
0009AAB7 E107                       	smpsAlterNote       $07
0009AAB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AABD E10D                       	smpsAlterNote       $0D
0009AABF E701                       	dc.b	smpsNoAttack, $01
0009AAC1 E111                       	smpsAlterNote       $11
0009AAC3 E701                       	dc.b	smpsNoAttack, $01
0009AAC5 E110                       	smpsAlterNote       $10
0009AAC7 E701                       	dc.b	smpsNoAttack, $01
0009AAC9 E10A                       	smpsAlterNote       $0A
0009AACB E701                       	dc.b	smpsNoAttack, $01
0009AACD E106                       	smpsAlterNote       $06
0009AACF E701                       	dc.b	smpsNoAttack, $01
0009AAD1 E10A                       	smpsAlterNote       $0A
0009AAD3 E701                       	dc.b	smpsNoAttack, $01
0009AAD5 E10D                       	smpsAlterNote       $0D
0009AAD7 E701                       	dc.b	smpsNoAttack, $01
0009AAD9 E111                       	smpsAlterNote       $11
0009AADB E701                       	dc.b	smpsNoAttack, $01
0009AADD E10D                       	smpsAlterNote       $0D
0009AADF E701                       	dc.b	smpsNoAttack, $01
0009AAE1 E107                       	smpsAlterNote       $07
0009AAE3 E701                       	dc.b	smpsNoAttack, $01
0009AAE5 E106                       	smpsAlterNote       $06
0009AAE7 E701                       	dc.b	smpsNoAttack, $01
0009AAE9 E10A                       	smpsAlterNote       $0A
0009AAEB E701                       	dc.b	smpsNoAttack, $01
0009AAED E110                       	smpsAlterNote       $10
0009AAEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AAF3 E10D                       	smpsAlterNote       $0D
0009AAF5 E701                       	dc.b	smpsNoAttack, $01
0009AAF7 E10F                       	smpsAlterNote       $0F
0009AAF9 BA0D                       	dc.b	nA4, $0D
0009AAFB E10C                       	smpsAlterNote       $0C
0009AAFD E701                       	dc.b	smpsNoAttack, $01
0009AAFF E108                       	smpsAlterNote       $08
0009AB01 E701                       	dc.b	smpsNoAttack, $01
0009AB03 E109                       	smpsAlterNote       $09
0009AB05 E701                       	dc.b	smpsNoAttack, $01
0009AB07 E10F                       	smpsAlterNote       $0F
0009AB09 E701                       	dc.b	smpsNoAttack, $01
0009AB0B E113                       	smpsAlterNote       $13
0009AB0D E701                       	dc.b	smpsNoAttack, $01
0009AB0F E10F                       	smpsAlterNote       $0F
0009AB11 E701                       	dc.b	smpsNoAttack, $01
0009AB13 E10C                       	smpsAlterNote       $0C
0009AB15 E701                       	dc.b	smpsNoAttack, $01
0009AB17 E108                       	smpsAlterNote       $08
0009AB19 E701                       	dc.b	smpsNoAttack, $01
0009AB1B E10C                       	smpsAlterNote       $0C
0009AB1D E701                       	dc.b	smpsNoAttack, $01
0009AB1F E112                       	smpsAlterNote       $12
0009AB21 E701                       	dc.b	smpsNoAttack, $01
0009AB23 E113                       	smpsAlterNote       $13
0009AB25 E701                       	dc.b	smpsNoAttack, $01
0009AB27 E10F                       	smpsAlterNote       $0F
0009AB29 E701                       	dc.b	smpsNoAttack, $01
0009AB2B E109                       	smpsAlterNote       $09
0009AB2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB31 E10C                       	smpsAlterNote       $0C
0009AB33 E701                       	dc.b	smpsNoAttack, $01
0009AB35 E112                       	smpsAlterNote       $12
0009AB37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB3B E10C                       	smpsAlterNote       $0C
0009AB3D E701                       	dc.b	smpsNoAttack, $01
0009AB3F E109                       	smpsAlterNote       $09
0009AB41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB45 E10F                       	smpsAlterNote       $0F
0009AB47 E701                       	dc.b	smpsNoAttack, $01
0009AB49 E113                       	smpsAlterNote       $13
0009AB4B E701                       	dc.b	smpsNoAttack, $01
0009AB4D E112                       	smpsAlterNote       $12
0009AB4F E701                       	dc.b	smpsNoAttack, $01
0009AB51 E10C                       	smpsAlterNote       $0C
0009AB53 E701                       	dc.b	smpsNoAttack, $01
0009AB55 E109                       	smpsAlterNote       $09
0009AB57 8001                       	dc.b	nRst, $01
0009AB59 E10D                       	smpsAlterNote       $0D
0009AB5B B60A                       	dc.b	nF4, $0A
0009AB5D E10C                       	smpsAlterNote       $0C
0009AB5F B506 8001                  	dc.b	nE4, $06, nRst, $01
0009AB63 E10B                       	smpsAlterNote       $0B
0009AB65 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0009AB69 E10C                       	smpsAlterNote       $0C
0009AB6B B503                       	dc.b	nE4, $03
0009AB6D E10D                       	smpsAlterNote       $0D
0009AB6F B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0009AB79 E10C                       	smpsAlterNote       $0C
0009AB7B E701                       	dc.b	smpsNoAttack, $01
0009AB7D E108                       	smpsAlterNote       $08
0009AB7F E701                       	dc.b	smpsNoAttack, $01
0009AB81 E10C                       	smpsAlterNote       $0C
0009AB83 E701                       	dc.b	smpsNoAttack, $01
0009AB85 E112                       	smpsAlterNote       $12
0009AB87 E701                       	dc.b	smpsNoAttack, $01
0009AB89 E113                       	smpsAlterNote       $13
0009AB8B E701                       	dc.b	smpsNoAttack, $01
0009AB8D E10F                       	smpsAlterNote       $0F
0009AB8F E701                       	dc.b	smpsNoAttack, $01
0009AB91 E109                       	smpsAlterNote       $09
0009AB93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AB97 E10C                       	smpsAlterNote       $0C
0009AB99 E701                       	dc.b	smpsNoAttack, $01
0009AB9B E112                       	smpsAlterNote       $12
0009AB9D E701                       	dc.b	smpsNoAttack, $01
0009AB9F E113                       	smpsAlterNote       $13
0009ABA1 8001                       	dc.b	nRst, $01
0009ABA3 E10D                       	smpsAlterNote       $0D
0009ABA5 C20D                       	dc.b	nF5, $0D
0009ABA7 E10A                       	smpsAlterNote       $0A
0009ABA9 E701                       	dc.b	smpsNoAttack, $01
0009ABAB E106                       	smpsAlterNote       $06
0009ABAD E701                       	dc.b	smpsNoAttack, $01
0009ABAF E10A                       	smpsAlterNote       $0A
0009ABB1 E701                       	dc.b	smpsNoAttack, $01
0009ABB3 E110                       	smpsAlterNote       $10
0009ABB5 E701                       	dc.b	smpsNoAttack, $01
0009ABB7 E111                       	smpsAlterNote       $11
0009ABB9 E701                       	dc.b	smpsNoAttack, $01
0009ABBB E10D                       	smpsAlterNote       $0D
0009ABBD E701                       	dc.b	smpsNoAttack, $01
0009ABBF E107                       	smpsAlterNote       $07
0009ABC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ABC5 E10A                       	smpsAlterNote       $0A
0009ABC7 E701                       	dc.b	smpsNoAttack, $01
0009ABC9 E110                       	smpsAlterNote       $10
0009ABCB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ABCF E10A                       	smpsAlterNote       $0A
0009ABD1 E701                       	dc.b	smpsNoAttack, $01
0009ABD3 E107                       	smpsAlterNote       $07
0009ABD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ABD9 E10D                       	smpsAlterNote       $0D
0009ABDB E701                       	dc.b	smpsNoAttack, $01
0009ABDD E111                       	smpsAlterNote       $11
0009ABDF E701                       	dc.b	smpsNoAttack, $01
0009ABE1 E110                       	smpsAlterNote       $10
0009ABE3 E701                       	dc.b	smpsNoAttack, $01
0009ABE5 E10A                       	smpsAlterNote       $0A
0009ABE7 E701                       	dc.b	smpsNoAttack, $01
0009ABE9 E106                       	smpsAlterNote       $06
0009ABEB E701                       	dc.b	smpsNoAttack, $01
0009ABED E10A                       	smpsAlterNote       $0A
0009ABEF E701                       	dc.b	smpsNoAttack, $01
0009ABF1 E10D                       	smpsAlterNote       $0D
0009ABF3 E701                       	dc.b	smpsNoAttack, $01
0009ABF5 E111                       	smpsAlterNote       $11
0009ABF7 E701                       	dc.b	smpsNoAttack, $01
0009ABF9 E10D                       	smpsAlterNote       $0D
0009ABFB E701                       	dc.b	smpsNoAttack, $01
0009ABFD E107                       	smpsAlterNote       $07
0009ABFF E701                       	dc.b	smpsNoAttack, $01
0009AC01 E106                       	smpsAlterNote       $06
0009AC03 E701                       	dc.b	smpsNoAttack, $01
0009AC05 E10A                       	smpsAlterNote       $0A
0009AC07 E701                       	dc.b	smpsNoAttack, $01
0009AC09 E110                       	smpsAlterNote       $10
0009AC0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC0F E10D                       	smpsAlterNote       $0D
0009AC11 E701                       	dc.b	smpsNoAttack, $01
0009AC13 E107                       	smpsAlterNote       $07
0009AC15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC19 E10D                       	smpsAlterNote       $0D
0009AC1B E701                       	dc.b	smpsNoAttack, $01
0009AC1D E110                       	smpsAlterNote       $10
0009AC1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC23 E10A                       	smpsAlterNote       $0A
0009AC25 E701                       	dc.b	smpsNoAttack, $01
0009AC27 E106                       	smpsAlterNote       $06
0009AC29 E701                       	dc.b	smpsNoAttack, $01
0009AC2B E107                       	smpsAlterNote       $07
0009AC2D E701                       	dc.b	smpsNoAttack, $01
0009AC2F E10D                       	smpsAlterNote       $0D
0009AC31 E701                       	dc.b	smpsNoAttack, $01
0009AC33 E111                       	smpsAlterNote       $11
0009AC35 E701                       	dc.b	smpsNoAttack, $01
0009AC37 E10D                       	smpsAlterNote       $0D
0009AC39 E701                       	dc.b	smpsNoAttack, $01
0009AC3B E10A                       	smpsAlterNote       $0A
0009AC3D E701                       	dc.b	smpsNoAttack, $01
0009AC3F E107                       	smpsAlterNote       $07
0009AC41 8001                       	dc.b	nRst, $01
0009AC43 E10D                       	smpsAlterNote       $0D
0009AC45 C206 8001                  	dc.b	nF5, $06, nRst, $01
0009AC4B E601                       	smpsAlterVol        $01
0009AC4D E110                       	smpsAlterNote       $10
0009AC4F BB0D                       	dc.b	nBb4, $0D
0009AC51 E10A                       	smpsAlterNote       $0A
0009AC53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC57 E110                       	smpsAlterNote       $10
0009AC59 E701                       	dc.b	smpsNoAttack, $01
0009AC5B E113                       	smpsAlterNote       $13
0009AC5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AC61 E10D                       	smpsAlterNote       $0D
0009AC63 E701                       	dc.b	smpsNoAttack, $01
0009AC65 E109                       	smpsAlterNote       $09
0009AC67 E701                       	dc.b	smpsNoAttack, $01
0009AC69 E10A                       	smpsAlterNote       $0A
0009AC6B E701                       	dc.b	smpsNoAttack, $01
0009AC6D E110                       	smpsAlterNote       $10
0009AC6F E701                       	dc.b	smpsNoAttack, $01
0009AC71 E114                       	smpsAlterNote       $14
0009AC73 E701                       	dc.b	smpsNoAttack, $01
0009AC75 E110                       	smpsAlterNote       $10
0009AC77 E701                       	dc.b	smpsNoAttack, $01
0009AC79 E10D                       	smpsAlterNote       $0D
0009AC7B E701                       	dc.b	smpsNoAttack, $01
0009AC7D E109                       	smpsAlterNote       $09
0009AC7F E701                       	dc.b	smpsNoAttack, $01
0009AC81 E10A                       	smpsAlterNote       $0A
0009AC83 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0009AC87 E107                       	smpsAlterNote       $07
0009AC89 E701                       	dc.b	smpsNoAttack, $01
0009AC8B E103                       	smpsAlterNote       $03
0009AC8D E701                       	dc.b	smpsNoAttack, $01
0009AC8F E107                       	smpsAlterNote       $07
0009AC91 E701                       	dc.b	smpsNoAttack, $01
0009AC93 E10D                       	smpsAlterNote       $0D
0009AC95 E701                       	dc.b	smpsNoAttack, $01
0009AC97 E10E                       	smpsAlterNote       $0E
0009AC99 E701                       	dc.b	smpsNoAttack, $01
0009AC9B E10A                       	smpsAlterNote       $0A
0009AC9D E701                       	dc.b	smpsNoAttack, $01
0009AC9F E104                       	smpsAlterNote       $04
0009ACA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ACA5 E107                       	smpsAlterNote       $07
0009ACA7 E701                       	dc.b	smpsNoAttack, $01
0009ACA9 E10D                       	smpsAlterNote       $0D
0009ACAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ACAF E107                       	smpsAlterNote       $07
0009ACB1 E701                       	dc.b	smpsNoAttack, $01
0009ACB3 E104                       	smpsAlterNote       $04
0009ACB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ACB9 E10B                       	smpsAlterNote       $0B
0009ACBB BF0D                       	dc.b	nD5, $0D
0009ACBD E108                       	smpsAlterNote       $08
0009ACBF E701                       	dc.b	smpsNoAttack, $01
0009ACC1 E105                       	smpsAlterNote       $05
0009ACC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ACC7 E10B                       	smpsAlterNote       $0B
0009ACC9 E701                       	dc.b	smpsNoAttack, $01
0009ACCB E10F                       	smpsAlterNote       $0F
0009ACCD E701                       	dc.b	smpsNoAttack, $01
0009ACCF E10E                       	smpsAlterNote       $0E
0009ACD1 E701                       	dc.b	smpsNoAttack, $01
0009ACD3 E108                       	smpsAlterNote       $08
0009ACD5 E701                       	dc.b	smpsNoAttack, $01
0009ACD7 E104                       	smpsAlterNote       $04
0009ACD9 E701                       	dc.b	smpsNoAttack, $01
0009ACDB E108                       	smpsAlterNote       $08
0009ACDD E701                       	dc.b	smpsNoAttack, $01
0009ACDF E10B                       	smpsAlterNote       $0B
0009ACE1 E701                       	dc.b	smpsNoAttack, $01
0009ACE3 E10F                       	smpsAlterNote       $0F
0009ACE5 E701                       	dc.b	smpsNoAttack, $01
0009ACE7 E10B                       	smpsAlterNote       $0B
0009ACE9 E701                       	dc.b	smpsNoAttack, $01
0009ACEB E105                       	smpsAlterNote       $05
0009ACED E701                       	dc.b	smpsNoAttack, $01
0009ACEF E104                       	smpsAlterNote       $04
0009ACF1 E701                       	dc.b	smpsNoAttack, $01
0009ACF3 E105                       	smpsAlterNote       $05
0009ACF5 8001                       	dc.b	nRst, $01
0009ACF7 E10C                       	smpsAlterNote       $0C
0009ACF9 C10C                       	dc.b	nE5, $0C
0009ACFB E10D                       	smpsAlterNote       $0D
0009ACFD C201                       	dc.b	nF5, $01
0009ACFF E10E                       	smpsAlterNote       $0E
0009AD01 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0009AD05 E10D                       	smpsAlterNote       $0D
0009AD07 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009AD0B E10A                       	smpsAlterNote       $0A
0009AD0D E701                       	dc.b	smpsNoAttack, $01
0009AD0F E106                       	smpsAlterNote       $06
0009AD11 E701                       	dc.b	smpsNoAttack, $01
0009AD13 E10A                       	smpsAlterNote       $0A
0009AD15 E701                       	dc.b	smpsNoAttack, $01
0009AD17 E10D                       	smpsAlterNote       $0D
0009AD19 E701                       	dc.b	smpsNoAttack, $01
0009AD1B E111                       	smpsAlterNote       $11
0009AD1D E701                       	dc.b	smpsNoAttack, $01
0009AD1F E10D                       	smpsAlterNote       $0D
0009AD21 E701                       	dc.b	smpsNoAttack, $01
0009AD23 E107                       	smpsAlterNote       $07
0009AD25 E701                       	dc.b	smpsNoAttack, $01
0009AD27 E106                       	smpsAlterNote       $06
0009AD29 E701                       	dc.b	smpsNoAttack, $01
0009AD2B E10A                       	smpsAlterNote       $0A
0009AD2D E701                       	dc.b	smpsNoAttack, $01
0009AD2F E110                       	smpsAlterNote       $10
0009AD31 E701                       	dc.b	smpsNoAttack, $01
0009AD33 E111                       	smpsAlterNote       $11
0009AD35 8001                       	dc.b	nRst, $01
0009AD37 E10D                       	smpsAlterNote       $0D
0009AD39 C40D                       	dc.b	nG5, $0D
0009AD3B E10A                       	smpsAlterNote       $0A
0009AD3D E701                       	dc.b	smpsNoAttack, $01
0009AD3F E106                       	smpsAlterNote       $06
0009AD41 E701                       	dc.b	smpsNoAttack, $01
0009AD43 E10A                       	smpsAlterNote       $0A
0009AD45 E701                       	dc.b	smpsNoAttack, $01
0009AD47 E10D                       	smpsAlterNote       $0D
0009AD49 E701                       	dc.b	smpsNoAttack, $01
0009AD4B E10C                       	smpsAlterNote       $0C
0009AD4D C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0009AD59 8001                       	dc.b	nRst, $01
0009AD5B E10D                       	smpsAlterNote       $0D
0009AD5D C20D                       	dc.b	nF5, $0D
0009AD5F E10A                       	smpsAlterNote       $0A
0009AD61 E701                       	dc.b	smpsNoAttack, $01
0009AD63 E106                       	smpsAlterNote       $06
0009AD65 E701                       	dc.b	smpsNoAttack, $01
0009AD67 E10A                       	smpsAlterNote       $0A
0009AD69 E701                       	dc.b	smpsNoAttack, $01
0009AD6B E110                       	smpsAlterNote       $10
0009AD6D E701                       	dc.b	smpsNoAttack, $01
0009AD6F E111                       	smpsAlterNote       $11
0009AD71 E701                       	dc.b	smpsNoAttack, $01
0009AD73 E10D                       	smpsAlterNote       $0D
0009AD75 E701                       	dc.b	smpsNoAttack, $01
0009AD77 E107                       	smpsAlterNote       $07
0009AD79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009AD7D E10A                       	smpsAlterNote       $0A
0009AD7F E701                       	dc.b	smpsNoAttack, $01
0009AD81 E110                       	smpsAlterNote       $10
0009AD83 E701                       	dc.b	smpsNoAttack, $01
0009AD85 E111                       	smpsAlterNote       $11
0009AD87 8001                       	dc.b	nRst, $01
0009AD89 E10F                       	smpsAlterNote       $0F
0009AD8B C60A                       	dc.b	nA5, $0A
0009AD8D E10D                       	smpsAlterNote       $0D
0009AD8F C406 8001                  	dc.b	nG5, $06, nRst, $01
0009AD93 E10C                       	smpsAlterNote       $0C
0009AD95 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009ADA1 8001                       	dc.b	nRst, $01
0009ADA3 E10D                       	smpsAlterNote       $0D
0009ADA5 C20D                       	dc.b	nF5, $0D
0009ADA7 E107                       	smpsAlterNote       $07
0009ADA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ADAD E10A                       	smpsAlterNote       $0A
0009ADAF E701                       	dc.b	smpsNoAttack, $01
0009ADB1 E110                       	smpsAlterNote       $10
0009ADB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ADB7 E10A                       	smpsAlterNote       $0A
0009ADB9 E701                       	dc.b	smpsNoAttack, $01
0009ADBB E107                       	smpsAlterNote       $07
0009ADBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ADC1 E10D                       	smpsAlterNote       $0D
0009ADC3 E701                       	dc.b	smpsNoAttack, $01
0009ADC5 E111                       	smpsAlterNote       $11
0009ADC7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009ADCB E10D                       	smpsAlterNote       $0D
0009ADCD C40D                       	dc.b	nG5, $0D
0009ADCF E107                       	smpsAlterNote       $07
0009ADD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ADD5 E10A                       	smpsAlterNote       $0A
0009ADD7 E701                       	dc.b	smpsNoAttack, $01
0009ADD9 E10D                       	smpsAlterNote       $0D
0009ADDB 8001                       	dc.b	nRst, $01
0009ADDD E10C                       	smpsAlterNote       $0C
0009ADDF C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009ADEB E10D                       	smpsAlterNote       $0D
0009ADED C20E                       	dc.b	nF5, $0E
0009ADEF E107                       	smpsAlterNote       $07
0009ADF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009ADF5 E10D                       	smpsAlterNote       $0D
0009ADF7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009ADFD E0C0                       	smpsPan             panCenter, $00
0009ADFF E603                       	smpsAlterVol        $03
0009AE01 E108                       	smpsAlterNote       $08
0009AE03 B406                       	dc.b	nEb4, $06
0009AE05 E10C                       	smpsAlterNote       $0C
0009AE07 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009AE0B E108                       	smpsAlterNote       $08
0009AE0D B403                       	dc.b	nEb4, $03
0009AE0F E109                       	smpsAlterNote       $09
0009AE11 B803 8001                  	dc.b	nG4, $03, nRst, $01
0009AE15 E10C                       	smpsAlterNote       $0C
0009AE17 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0009AE1F 03                         	dc.b	$03
0009AE20 E6FD                       	smpsAlterVol        $FD
0009AE22 F6F1 F4                    	smpsJump            music84_Jump00
0009AE25                            
0009AE25                            ; PSG1 Data
0009AE25                            music84_PSG1:
0009AE25 E1FD                       	smpsAlterNote       $FD
0009AE27 EC04                       	smpsPSGAlterVol     $04
0009AE29 9203                       	dc.b	nF1, $03
0009AE2B E1FE                       	smpsAlterNote       $FE
0009AE2D 9603                       	dc.b	nA1, $03
0009AE2F EC04                       	smpsPSGAlterVol     $04
0009AE31 E701                       	dc.b	smpsNoAttack, $01
0009AE33 E1FF                       	smpsAlterNote       $FF
0009AE35 ECFC                       	smpsPSGAlterVol     $FC
0009AE37 9B03                       	dc.b	nD2, $03
0009AE39 E1FD                       	smpsAlterNote       $FD
0009AE3B 9403                       	dc.b	nG1, $03
0009AE3D EC04                       	smpsPSGAlterVol     $04
0009AE3F E701                       	dc.b	smpsNoAttack, $01
0009AE41 E1FE                       	smpsAlterNote       $FE
0009AE43 ECFC                       	smpsPSGAlterVol     $FC
0009AE45 9703                       	dc.b	nBb1, $03
0009AE47 E1FF                       	smpsAlterNote       $FF
0009AE49 9B03                       	dc.b	nD2, $03
0009AE4B EC04                       	smpsPSGAlterVol     $04
0009AE4D E701                       	dc.b	smpsNoAttack, $01
0009AE4F E1FE                       	smpsAlterNote       $FE
0009AE51 ECFC                       	smpsPSGAlterVol     $FC
0009AE53 A002                       	dc.b	nG2, $02
0009AE55 EC04                       	smpsPSGAlterVol     $04
0009AE57 E701                       	dc.b	smpsNoAttack, $01
0009AE59 E1FF                       	smpsAlterNote       $FF
0009AE5B ECFC                       	smpsPSGAlterVol     $FC
0009AE5D A203                       	dc.b	nA2, $03
0009AE5F EC0B                       	smpsPSGAlterVol     $0B
0009AE61 800A                       	dc.b	nRst, $0A
0009AE63 E105                       	smpsAlterNote       $05
0009AE65 01                         	dc.b	$01
0009AE66 E1FC                       	smpsAlterNote       $FC
0009AE68 01                         	dc.b	$01
0009AE69 E105                       	smpsAlterNote       $05
0009AE6B 01                         	dc.b	$01
0009AE6C E1FD                       	smpsAlterNote       $FD
0009AE6E 01                         	dc.b	$01
0009AE6F E105                       	smpsAlterNote       $05
0009AE71 01                         	dc.b	$01
0009AE72 E1FD                       	smpsAlterNote       $FD
0009AE74 01                         	dc.b	$01
0009AE75 E1FA                       	smpsAlterNote       $FA
0009AE77 01                         	dc.b	$01
0009AE78 E1FC                       	smpsAlterNote       $FC
0009AE7A 01                         	dc.b	$01
0009AE7B E105                       	smpsAlterNote       $05
0009AE7D 01                         	dc.b	$01
0009AE7E E108                       	smpsAlterNote       $08
0009AE80 0101                       	dc.b	$01, $01
0009AE82 E105                       	smpsAlterNote       $05
0009AE84 01                         	dc.b	$01
0009AE85 E1FA                       	smpsAlterNote       $FA
0009AE87 0101                       	dc.b	$01, $01
0009AE89 E1FD                       	smpsAlterNote       $FD
0009AE8B 01                         	dc.b	$01
0009AE8C E105                       	smpsAlterNote       $05
0009AE8E 01                         	dc.b	$01
0009AE8F E108                       	smpsAlterNote       $08
0009AE91 01                         	dc.b	$01
0009AE92 E105                       	smpsAlterNote       $05
0009AE94 01                         	dc.b	$01
0009AE95 E1FC                       	smpsAlterNote       $FC
0009AE97 01                         	dc.b	$01
0009AE98 E105                       	smpsAlterNote       $05
0009AE9A 01                         	dc.b	$01
0009AE9B E1FD                       	smpsAlterNote       $FD
0009AE9D 01                         	dc.b	$01
0009AE9E                            
0009AE9E                            music84_Jump07:
0009AE9E E105                       	smpsAlterNote       $05
0009AEA0 8001                       	dc.b	nRst, $01
0009AEA2 E1FD                       	smpsAlterNote       $FD
0009AEA4 01                         	dc.b	$01
0009AEA5 E1FA                       	smpsAlterNote       $FA
0009AEA7 01                         	dc.b	$01
0009AEA8 E1FC                       	smpsAlterNote       $FC
0009AEAA 01                         	dc.b	$01
0009AEAB E1FD                       	smpsAlterNote       $FD
0009AEAD ECF5                       	smpsPSGAlterVol     $F5
0009AEAF 9206                       	dc.b	nF1, $06
0009AEB1 EC04                       	smpsPSGAlterVol     $04
0009AEB3 E701                       	dc.b	smpsNoAttack, $01
0009AEB5 EC07                       	smpsPSGAlterVol     $07
0009AEB7 8003                       	dc.b	nRst, $03
0009AEB9 ECF5                       	smpsPSGAlterVol     $F5
0009AEBB 9206                       	dc.b	nF1, $06
0009AEBD EC04                       	smpsPSGAlterVol     $04
0009AEBF E701                       	dc.b	smpsNoAttack, $01
0009AEC1 EC07                       	smpsPSGAlterVol     $07
0009AEC3 8006                       	dc.b	nRst, $06
0009AEC5 E100                       	smpsAlterNote       $00
0009AEC7 01                         	dc.b	$01
0009AEC8 E104                       	smpsAlterNote       $04
0009AECA 01                         	dc.b	$01
0009AECB E100                       	smpsAlterNote       $00
0009AECD 01                         	dc.b	$01
0009AECE E1FB                       	smpsAlterNote       $FB
0009AED0 01                         	dc.b	$01
0009AED1 E1FD                       	smpsAlterNote       $FD
0009AED3 ECF5                       	smpsPSGAlterVol     $F5
0009AED5 9406                       	dc.b	nG1, $06
0009AED7 EC04                       	smpsPSGAlterVol     $04
0009AED9 E701                       	dc.b	smpsNoAttack, $01
0009AEDB EC07                       	smpsPSGAlterVol     $07
0009AEDD 8003                       	dc.b	nRst, $03
0009AEDF ECF5                       	smpsPSGAlterVol     $F5
0009AEE1 9407                       	dc.b	nG1, $07
0009AEE3 EC0B                       	smpsPSGAlterVol     $0B
0009AEE5 8006                       	dc.b	nRst, $06
0009AEE7 E100                       	smpsAlterNote       $00
0009AEE9 01                         	dc.b	$01
0009AEEA E103                       	smpsAlterNote       $03
0009AEEC 0101                       	dc.b	$01, $01
0009AEEE E1FD                       	smpsAlterNote       $FD
0009AEF0 01                         	dc.b	$01
0009AEF1 ECF5                       	smpsPSGAlterVol     $F5
0009AEF3 9207                       	dc.b	nF1, $07
0009AEF5 EC0B                       	smpsPSGAlterVol     $0B
0009AEF7 8004                       	dc.b	nRst, $04
0009AEF9 ECF5                       	smpsPSGAlterVol     $F5
0009AEFB 9206                       	dc.b	nF1, $06
0009AEFD EC04                       	smpsPSGAlterVol     $04
0009AEFF E701                       	dc.b	smpsNoAttack, $01
0009AF01 EC07                       	smpsPSGAlterVol     $07
0009AF03 8006                       	dc.b	nRst, $06
0009AF05 E103                       	smpsAlterNote       $03
0009AF07 01                         	dc.b	$01
0009AF08 E104                       	smpsAlterNote       $04
0009AF0A 01                         	dc.b	$01
0009AF0B E100                       	smpsAlterNote       $00
0009AF0D 01                         	dc.b	$01
0009AF0E E1FA                       	smpsAlterNote       $FA
0009AF10 01                         	dc.b	$01
0009AF11 E1FD                       	smpsAlterNote       $FD
0009AF13 ECF5                       	smpsPSGAlterVol     $F5
0009AF15 9206                       	dc.b	nF1, $06
0009AF17 EC04                       	smpsPSGAlterVol     $04
0009AF19 E701                       	dc.b	smpsNoAttack, $01
0009AF1B EC07                       	smpsPSGAlterVol     $07
0009AF1D 8003                       	dc.b	nRst, $03
0009AF1F ECF5                       	smpsPSGAlterVol     $F5
0009AF21 9106                       	dc.b	nE1, $06
0009AF23 EC04                       	smpsPSGAlterVol     $04
0009AF25 E701                       	dc.b	smpsNoAttack, $01
0009AF27 EC07                       	smpsPSGAlterVol     $07
0009AF29 8006                       	dc.b	nRst, $06
0009AF2B E100                       	smpsAlterNote       $00
0009AF2D 01                         	dc.b	$01
0009AF2E E104                       	smpsAlterNote       $04
0009AF30 01                         	dc.b	$01
0009AF31 E100                       	smpsAlterNote       $00
0009AF33 01                         	dc.b	$01
0009AF34 E1FD                       	smpsAlterNote       $FD
0009AF36 01                         	dc.b	$01
0009AF37 ECF5                       	smpsPSGAlterVol     $F5
0009AF39 9206                       	dc.b	nF1, $06
0009AF3B EC04                       	smpsPSGAlterVol     $04
0009AF3D E701                       	dc.b	smpsNoAttack, $01
0009AF3F EC07                       	smpsPSGAlterVol     $07
0009AF41 8003                       	dc.b	nRst, $03
0009AF43 ECF5                       	smpsPSGAlterVol     $F5
0009AF45 9207                       	dc.b	nF1, $07
0009AF47 EC0B                       	smpsPSGAlterVol     $0B
0009AF49 8007                       	dc.b	nRst, $07
0009AF4B E103                       	smpsAlterNote       $03
0009AF4D 0101                       	dc.b	$01, $01
0009AF4F E1FD                       	smpsAlterNote       $FD
0009AF51 01                         	dc.b	$01
0009AF52 E1FB                       	smpsAlterNote       $FB
0009AF54 01                         	dc.b	$01
0009AF55 E1FD                       	smpsAlterNote       $FD
0009AF57 ECF5                       	smpsPSGAlterVol     $F5
0009AF59 9406                       	dc.b	nG1, $06
0009AF5B EC0B                       	smpsPSGAlterVol     $0B
0009AF5D 8004                       	dc.b	nRst, $04
0009AF5F ECF5                       	smpsPSGAlterVol     $F5
0009AF61 9406                       	dc.b	nG1, $06
0009AF63 EC04                       	smpsPSGAlterVol     $04
0009AF65 E701                       	dc.b	smpsNoAttack, $01
0009AF67 EC07                       	smpsPSGAlterVol     $07
0009AF69 8006                       	dc.b	nRst, $06
0009AF6B E100                       	smpsAlterNote       $00
0009AF6D 01                         	dc.b	$01
0009AF6E E104                       	smpsAlterNote       $04
0009AF70 01                         	dc.b	$01
0009AF71 E100                       	smpsAlterNote       $00
0009AF73 01                         	dc.b	$01
0009AF74 E1F9                       	smpsAlterNote       $F9
0009AF76 01                         	dc.b	$01
0009AF77 E1FD                       	smpsAlterNote       $FD
0009AF79 ECF5                       	smpsPSGAlterVol     $F5
0009AF7B 9206                       	dc.b	nF1, $06
0009AF7D EC04                       	smpsPSGAlterVol     $04
0009AF7F E701                       	dc.b	smpsNoAttack, $01
0009AF81 EC07                       	smpsPSGAlterVol     $07
0009AF83 8003                       	dc.b	nRst, $03
0009AF85 ECF5                       	smpsPSGAlterVol     $F5
0009AF87 9207                       	dc.b	nF1, $07
0009AF89 EC0B                       	smpsPSGAlterVol     $0B
0009AF8B 8006                       	dc.b	nRst, $06
0009AF8D E100                       	smpsAlterNote       $00
0009AF8F 01                         	dc.b	$01
0009AF90 E104                       	smpsAlterNote       $04
0009AF92 01                         	dc.b	$01
0009AF93 E103                       	smpsAlterNote       $03
0009AF95 01                         	dc.b	$01
0009AF96 E1FD                       	smpsAlterNote       $FD
0009AF98 01                         	dc.b	$01
0009AF99 ECF5                       	smpsPSGAlterVol     $F5
0009AF9B 9207                       	dc.b	nF1, $07
0009AF9D EC0B                       	smpsPSGAlterVol     $0B
0009AF9F 8004                       	dc.b	nRst, $04
0009AFA1 ECF5                       	smpsPSGAlterVol     $F5
0009AFA3 9206                       	dc.b	nF1, $06
0009AFA5 EC0B                       	smpsPSGAlterVol     $0B
0009AFA7 8007                       	dc.b	nRst, $07
0009AFA9 E103                       	smpsAlterNote       $03
0009AFAB 0101                       	dc.b	$01, $01
0009AFAD E100                       	smpsAlterNote       $00
0009AFAF 01                         	dc.b	$01
0009AFB0 E1FA                       	smpsAlterNote       $FA
0009AFB2 01                         	dc.b	$01
0009AFB3 E1FD                       	smpsAlterNote       $FD
0009AFB5 ECF5                       	smpsPSGAlterVol     $F5
0009AFB7 9206                       	dc.b	nF1, $06
0009AFB9 EC04                       	smpsPSGAlterVol     $04
0009AFBB E701                       	dc.b	smpsNoAttack, $01
0009AFBD EC07                       	smpsPSGAlterVol     $07
0009AFBF 8003                       	dc.b	nRst, $03
0009AFC1 ECF5                       	smpsPSGAlterVol     $F5
0009AFC3 9206                       	dc.b	nF1, $06
0009AFC5 EC04                       	smpsPSGAlterVol     $04
0009AFC7 E701                       	dc.b	smpsNoAttack, $01
0009AFC9 EC07                       	smpsPSGAlterVol     $07
0009AFCB 8006                       	dc.b	nRst, $06
0009AFCD E100                       	smpsAlterNote       $00
0009AFCF 01                         	dc.b	$01
0009AFD0 E104                       	smpsAlterNote       $04
0009AFD2 01                         	dc.b	$01
0009AFD3 E100                       	smpsAlterNote       $00
0009AFD5 01                         	dc.b	$01
0009AFD6 E1FD                       	smpsAlterNote       $FD
0009AFD8 01                         	dc.b	$01
0009AFD9 ECF5                       	smpsPSGAlterVol     $F5
0009AFDB 9206                       	dc.b	nF1, $06
0009AFDD EC04                       	smpsPSGAlterVol     $04
0009AFDF E701                       	dc.b	smpsNoAttack, $01
0009AFE1 EC07                       	smpsPSGAlterVol     $07
0009AFE3 8003                       	dc.b	nRst, $03
0009AFE5 ECF5                       	smpsPSGAlterVol     $F5
0009AFE7 9207                       	dc.b	nF1, $07
0009AFE9 EC0B                       	smpsPSGAlterVol     $0B
0009AFEB 8007                       	dc.b	nRst, $07
0009AFED E103                       	smpsAlterNote       $03
0009AFEF 0101                       	dc.b	$01, $01
0009AFF1 E1FD                       	smpsAlterNote       $FD
0009AFF3 01                         	dc.b	$01
0009AFF4 E1FA                       	smpsAlterNote       $FA
0009AFF6 01                         	dc.b	$01
0009AFF7 E1FD                       	smpsAlterNote       $FD
0009AFF9 ECF5                       	smpsPSGAlterVol     $F5
0009AFFB 9206                       	dc.b	nF1, $06
0009AFFD EC0B                       	smpsPSGAlterVol     $0B
0009AFFF 8004                       	dc.b	nRst, $04
0009B001 ECF5                       	smpsPSGAlterVol     $F5
0009B003 9206                       	dc.b	nF1, $06
0009B005 EC04                       	smpsPSGAlterVol     $04
0009B007 E701                       	dc.b	smpsNoAttack, $01
0009B009 EC07                       	smpsPSGAlterVol     $07
0009B00B 8006                       	dc.b	nRst, $06
0009B00D E103                       	smpsAlterNote       $03
0009B00F 01                         	dc.b	$01
0009B010 E104                       	smpsAlterNote       $04
0009B012 01                         	dc.b	$01
0009B013 E100                       	smpsAlterNote       $00
0009B015 01                         	dc.b	$01
0009B016 E1FA                       	smpsAlterNote       $FA
0009B018 01                         	dc.b	$01
0009B019 E1FD                       	smpsAlterNote       $FD
0009B01B ECF5                       	smpsPSGAlterVol     $F5
0009B01D 9206                       	dc.b	nF1, $06
0009B01F EC04                       	smpsPSGAlterVol     $04
0009B021 E701                       	dc.b	smpsNoAttack, $01
0009B023 EC07                       	smpsPSGAlterVol     $07
0009B025 8003                       	dc.b	nRst, $03
0009B027 ECF5                       	smpsPSGAlterVol     $F5
0009B029 9206                       	dc.b	nF1, $06
0009B02B EC04                       	smpsPSGAlterVol     $04
0009B02D E701                       	dc.b	smpsNoAttack, $01
0009B02F EC07                       	smpsPSGAlterVol     $07
0009B031 8006                       	dc.b	nRst, $06
0009B033 E100                       	smpsAlterNote       $00
0009B035 01                         	dc.b	$01
0009B036 E104                       	smpsAlterNote       $04
0009B038 01                         	dc.b	$01
0009B039 E103                       	smpsAlterNote       $03
0009B03B 01                         	dc.b	$01
0009B03C E1FD                       	smpsAlterNote       $FD
0009B03E 01                         	dc.b	$01
0009B03F ECF5                       	smpsPSGAlterVol     $F5
0009B041 9107                       	dc.b	nE1, $07
0009B043 EC0B                       	smpsPSGAlterVol     $0B
0009B045 8004                       	dc.b	nRst, $04
0009B047 ECF5                       	smpsPSGAlterVol     $F5
0009B049 9106                       	dc.b	nE1, $06
0009B04B EC0B                       	smpsPSGAlterVol     $0B
0009B04D 8007                       	dc.b	nRst, $07
0009B04F E103                       	smpsAlterNote       $03
0009B051 0101                       	dc.b	$01, $01
0009B053 E100                       	smpsAlterNote       $00
0009B055 01                         	dc.b	$01
0009B056 E1FA                       	smpsAlterNote       $FA
0009B058 01                         	dc.b	$01
0009B059 E1FD                       	smpsAlterNote       $FD
0009B05B ECF5                       	smpsPSGAlterVol     $F5
0009B05D 9106                       	dc.b	nE1, $06
0009B05F EC04                       	smpsPSGAlterVol     $04
0009B061 E701                       	dc.b	smpsNoAttack, $01
0009B063 EC07                       	smpsPSGAlterVol     $07
0009B065 8003                       	dc.b	nRst, $03
0009B067 ECF5                       	smpsPSGAlterVol     $F5
0009B069 9106                       	dc.b	nE1, $06
0009B06B EC04                       	smpsPSGAlterVol     $04
0009B06D E701                       	dc.b	smpsNoAttack, $01
0009B06F EC07                       	smpsPSGAlterVol     $07
0009B071 8006                       	dc.b	nRst, $06
0009B073 E100                       	smpsAlterNote       $00
0009B075 01                         	dc.b	$01
0009B076 E104                       	smpsAlterNote       $04
0009B078 01                         	dc.b	$01
0009B079 E100                       	smpsAlterNote       $00
0009B07B 01                         	dc.b	$01
0009B07C E1FA                       	smpsAlterNote       $FA
0009B07E 01                         	dc.b	$01
0009B07F E1FD                       	smpsAlterNote       $FD
0009B081 ECF5                       	smpsPSGAlterVol     $F5
0009B083 9106                       	dc.b	nE1, $06
0009B085 EC04                       	smpsPSGAlterVol     $04
0009B087 E701                       	dc.b	smpsNoAttack, $01
0009B089 EC07                       	smpsPSGAlterVol     $07
0009B08B 8003                       	dc.b	nRst, $03
0009B08D ECF5                       	smpsPSGAlterVol     $F5
0009B08F 9107 9106                  	dc.b	nE1, $07, nE1, $06
0009B093 EC04                       	smpsPSGAlterVol     $04
0009B095 E701                       	dc.b	smpsNoAttack, $01
0009B097 ECFC                       	smpsPSGAlterVol     $FC
0009B099 9103 9103                  	dc.b	nE1, $03, nE1, $03
0009B09D EC04                       	smpsPSGAlterVol     $04
0009B09F E701                       	dc.b	smpsNoAttack, $01
0009B0A1 ECFC                       	smpsPSGAlterVol     $FC
0009B0A3 9106                       	dc.b	nE1, $06
0009B0A5 EC04                       	smpsPSGAlterVol     $04
0009B0A7 E701                       	dc.b	smpsNoAttack, $01
0009B0A9 EC07                       	smpsPSGAlterVol     $07
0009B0AB 8006                       	dc.b	nRst, $06
0009B0AD E100                       	smpsAlterNote       $00
0009B0AF 01                         	dc.b	$01
0009B0B0 E104                       	smpsAlterNote       $04
0009B0B2 01                         	dc.b	$01
0009B0B3 E100                       	smpsAlterNote       $00
0009B0B5 01                         	dc.b	$01
0009B0B6 E1FA                       	smpsAlterNote       $FA
0009B0B8 01                         	dc.b	$01
0009B0B9 E1F9                       	smpsAlterNote       $F9
0009B0BB 01                         	dc.b	$01
0009B0BC E1FD                       	smpsAlterNote       $FD
0009B0BE 01                         	dc.b	$01
0009B0BF E103                       	smpsAlterNote       $03
0009B0C1 01                         	dc.b	$01
0009B0C2 E104                       	smpsAlterNote       $04
0009B0C4 01                         	dc.b	$01
0009B0C5 E100                       	smpsAlterNote       $00
0009B0C7 01                         	dc.b	$01
0009B0C8 E1FA                       	smpsAlterNote       $FA
0009B0CA 0101                       	dc.b	$01, $01
0009B0CC E1FD                       	smpsAlterNote       $FD
0009B0CE ECF5                       	smpsPSGAlterVol     $F5
0009B0D0 9206                       	dc.b	nF1, $06
0009B0D2 EC04                       	smpsPSGAlterVol     $04
0009B0D4 E701                       	dc.b	smpsNoAttack, $01
0009B0D6 EC07                       	smpsPSGAlterVol     $07
0009B0D8 8003                       	dc.b	nRst, $03
0009B0DA ECF5                       	smpsPSGAlterVol     $F5
0009B0DC 9206                       	dc.b	nF1, $06
0009B0DE EC04                       	smpsPSGAlterVol     $04
0009B0E0 E701                       	dc.b	smpsNoAttack, $01
0009B0E2 EC07                       	smpsPSGAlterVol     $07
0009B0E4 8006                       	dc.b	nRst, $06
0009B0E6 E100                       	smpsAlterNote       $00
0009B0E8 01                         	dc.b	$01
0009B0E9 E104                       	smpsAlterNote       $04
0009B0EB 01                         	dc.b	$01
0009B0EC E103                       	smpsAlterNote       $03
0009B0EE 01                         	dc.b	$01
0009B0EF E1FD                       	smpsAlterNote       $FD
0009B0F1 01                         	dc.b	$01
0009B0F2 ECF5                       	smpsPSGAlterVol     $F5
0009B0F4 9407                       	dc.b	nG1, $07
0009B0F6 EC0B                       	smpsPSGAlterVol     $0B
0009B0F8 8004                       	dc.b	nRst, $04
0009B0FA ECF5                       	smpsPSGAlterVol     $F5
0009B0FC 9406                       	dc.b	nG1, $06
0009B0FE EC0B                       	smpsPSGAlterVol     $0B
0009B100 8007                       	dc.b	nRst, $07
0009B102 E103                       	smpsAlterNote       $03
0009B104 0101                       	dc.b	$01, $01
0009B106 E1FD                       	smpsAlterNote       $FD
0009B108 01                         	dc.b	$01
0009B109 E1F9                       	smpsAlterNote       $F9
0009B10B 01                         	dc.b	$01
0009B10C E1FD                       	smpsAlterNote       $FD
0009B10E ECF5                       	smpsPSGAlterVol     $F5
0009B110 9206                       	dc.b	nF1, $06
0009B112 EC04                       	smpsPSGAlterVol     $04
0009B114 E701                       	dc.b	smpsNoAttack, $01
0009B116 EC07                       	smpsPSGAlterVol     $07
0009B118 8003                       	dc.b	nRst, $03
0009B11A ECF5                       	smpsPSGAlterVol     $F5
0009B11C 9206                       	dc.b	nF1, $06
0009B11E EC04                       	smpsPSGAlterVol     $04
0009B120 E701                       	dc.b	smpsNoAttack, $01
0009B122 EC07                       	smpsPSGAlterVol     $07
0009B124 8006                       	dc.b	nRst, $06
0009B126 E100                       	smpsAlterNote       $00
0009B128 01                         	dc.b	$01
0009B129 E104                       	smpsAlterNote       $04
0009B12B 01                         	dc.b	$01
0009B12C E100                       	smpsAlterNote       $00
0009B12E 01                         	dc.b	$01
0009B12F E1FA                       	smpsAlterNote       $FA
0009B131 01                         	dc.b	$01
0009B132 E1FD                       	smpsAlterNote       $FD
0009B134 ECF5                       	smpsPSGAlterVol     $F5
0009B136 9206                       	dc.b	nF1, $06
0009B138 EC04                       	smpsPSGAlterVol     $04
0009B13A E701                       	dc.b	smpsNoAttack, $01
0009B13C EC07                       	smpsPSGAlterVol     $07
0009B13E 8003                       	dc.b	nRst, $03
0009B140 ECF5                       	smpsPSGAlterVol     $F5
0009B142 9107                       	dc.b	nE1, $07
0009B144 EC0B                       	smpsPSGAlterVol     $0B
0009B146 8006                       	dc.b	nRst, $06
0009B148 E100                       	smpsAlterNote       $00
0009B14A 01                         	dc.b	$01
0009B14B E103                       	smpsAlterNote       $03
0009B14D 0101                       	dc.b	$01, $01
0009B14F E1FD                       	smpsAlterNote       $FD
0009B151 01                         	dc.b	$01
0009B152 ECF5                       	smpsPSGAlterVol     $F5
0009B154 9207                       	dc.b	nF1, $07
0009B156 EC0B                       	smpsPSGAlterVol     $0B
0009B158 8004                       	dc.b	nRst, $04
0009B15A ECF5                       	smpsPSGAlterVol     $F5
0009B15C 9206                       	dc.b	nF1, $06
0009B15E EC04                       	smpsPSGAlterVol     $04
0009B160 E701                       	dc.b	smpsNoAttack, $01
0009B162 EC07                       	smpsPSGAlterVol     $07
0009B164 8006                       	dc.b	nRst, $06
0009B166 E103                       	smpsAlterNote       $03
0009B168 01                         	dc.b	$01
0009B169 E104                       	smpsAlterNote       $04
0009B16B 01                         	dc.b	$01
0009B16C E100                       	smpsAlterNote       $00
0009B16E 01                         	dc.b	$01
0009B16F E1FB                       	smpsAlterNote       $FB
0009B171 01                         	dc.b	$01
0009B172 E1FD                       	smpsAlterNote       $FD
0009B174 ECF5                       	smpsPSGAlterVol     $F5
0009B176 9406                       	dc.b	nG1, $06
0009B178 EC04                       	smpsPSGAlterVol     $04
0009B17A E701                       	dc.b	smpsNoAttack, $01
0009B17C EC07                       	smpsPSGAlterVol     $07
0009B17E 8003                       	dc.b	nRst, $03
0009B180 ECF5                       	smpsPSGAlterVol     $F5
0009B182 9406                       	dc.b	nG1, $06
0009B184 EC04                       	smpsPSGAlterVol     $04
0009B186 E701                       	dc.b	smpsNoAttack, $01
0009B188 EC07                       	smpsPSGAlterVol     $07
0009B18A 8006                       	dc.b	nRst, $06
0009B18C E100                       	smpsAlterNote       $00
0009B18E 01                         	dc.b	$01
0009B18F E104                       	smpsAlterNote       $04
0009B191 01                         	dc.b	$01
0009B192 E100                       	smpsAlterNote       $00
0009B194 01                         	dc.b	$01
0009B195 E1FD                       	smpsAlterNote       $FD
0009B197 01                         	dc.b	$01
0009B198 ECF5                       	smpsPSGAlterVol     $F5
0009B19A 9206                       	dc.b	nF1, $06
0009B19C EC04                       	smpsPSGAlterVol     $04
0009B19E E701                       	dc.b	smpsNoAttack, $01
0009B1A0 EC07                       	smpsPSGAlterVol     $07
0009B1A2 8003                       	dc.b	nRst, $03
0009B1A4 ECF5                       	smpsPSGAlterVol     $F5
0009B1A6 9207                       	dc.b	nF1, $07
0009B1A8 EC0B                       	smpsPSGAlterVol     $0B
0009B1AA 8007                       	dc.b	nRst, $07
0009B1AC E103                       	smpsAlterNote       $03
0009B1AE 0101                       	dc.b	$01, $01
0009B1B0 E1FD                       	smpsAlterNote       $FD
0009B1B2 01                         	dc.b	$01
0009B1B3 E1FA                       	smpsAlterNote       $FA
0009B1B5 01                         	dc.b	$01
0009B1B6 E1FD                       	smpsAlterNote       $FD
0009B1B8 ECF5                       	smpsPSGAlterVol     $F5
0009B1BA 9206                       	dc.b	nF1, $06
0009B1BC EC0B                       	smpsPSGAlterVol     $0B
0009B1BE 8004                       	dc.b	nRst, $04
0009B1C0 ECF5                       	smpsPSGAlterVol     $F5
0009B1C2 9206                       	dc.b	nF1, $06
0009B1C4 EC04                       	smpsPSGAlterVol     $04
0009B1C6 E701                       	dc.b	smpsNoAttack, $01
0009B1C8 EC07                       	smpsPSGAlterVol     $07
0009B1CA 8006                       	dc.b	nRst, $06
0009B1CC E100                       	smpsAlterNote       $00
0009B1CE 01                         	dc.b	$01
0009B1CF E104                       	smpsAlterNote       $04
0009B1D1 01                         	dc.b	$01
0009B1D2 E100                       	smpsAlterNote       $00
0009B1D4 01                         	dc.b	$01
0009B1D5 E1FA                       	smpsAlterNote       $FA
0009B1D7 01                         	dc.b	$01
0009B1D8 E1FD                       	smpsAlterNote       $FD
0009B1DA ECF5                       	smpsPSGAlterVol     $F5
0009B1DC 9206                       	dc.b	nF1, $06
0009B1DE EC04                       	smpsPSGAlterVol     $04
0009B1E0 E704                       	dc.b	smpsNoAttack, $04
0009B1E2 ECFC                       	smpsPSGAlterVol     $FC
0009B1E4 9207                       	dc.b	nF1, $07
0009B1E6 EC0B                       	smpsPSGAlterVol     $0B
0009B1E8 8006                       	dc.b	nRst, $06
0009B1EA E100                       	smpsAlterNote       $00
0009B1EC 01                         	dc.b	$01
0009B1ED E104                       	smpsAlterNote       $04
0009B1EF 01                         	dc.b	$01
0009B1F0 E103                       	smpsAlterNote       $03
0009B1F2 01                         	dc.b	$01
0009B1F3 E1FD                       	smpsAlterNote       $FD
0009B1F5 01                         	dc.b	$01
0009B1F6 ECF5                       	smpsPSGAlterVol     $F5
0009B1F8 9207                       	dc.b	nF1, $07
0009B1FA EC0B                       	smpsPSGAlterVol     $0B
0009B1FC 8004                       	dc.b	nRst, $04
0009B1FE ECF5                       	smpsPSGAlterVol     $F5
0009B200 9206                       	dc.b	nF1, $06
0009B202 EC0B                       	smpsPSGAlterVol     $0B
0009B204 8007                       	dc.b	nRst, $07
0009B206 E103                       	smpsAlterNote       $03
0009B208 0101                       	dc.b	$01, $01
0009B20A E100                       	smpsAlterNote       $00
0009B20C 01                         	dc.b	$01
0009B20D E1FA                       	smpsAlterNote       $FA
0009B20F 01                         	dc.b	$01
0009B210 E1FD                       	smpsAlterNote       $FD
0009B212 ECF5                       	smpsPSGAlterVol     $F5
0009B214 9206                       	dc.b	nF1, $06
0009B216 EC04                       	smpsPSGAlterVol     $04
0009B218 E704                       	dc.b	smpsNoAttack, $04
0009B21A ECFC                       	smpsPSGAlterVol     $FC
0009B21C 9206                       	dc.b	nF1, $06
0009B21E EC04                       	smpsPSGAlterVol     $04
0009B220 E701                       	dc.b	smpsNoAttack, $01
0009B222 EC07                       	smpsPSGAlterVol     $07
0009B224 8006                       	dc.b	nRst, $06
0009B226 E100                       	smpsAlterNote       $00
0009B228 01                         	dc.b	$01
0009B229 E104                       	smpsAlterNote       $04
0009B22B 01                         	dc.b	$01
0009B22C E100                       	smpsAlterNote       $00
0009B22E 01                         	dc.b	$01
0009B22F E1FD                       	smpsAlterNote       $FD
0009B231 01                         	dc.b	$01
0009B232 ECF5                       	smpsPSGAlterVol     $F5
0009B234 9206                       	dc.b	nF1, $06
0009B236 EC04                       	smpsPSGAlterVol     $04
0009B238 E701                       	dc.b	smpsNoAttack, $01
0009B23A EC07                       	smpsPSGAlterVol     $07
0009B23C 8003                       	dc.b	nRst, $03
0009B23E ECF5                       	smpsPSGAlterVol     $F5
0009B240 9207                       	dc.b	nF1, $07
0009B242 EC0B                       	smpsPSGAlterVol     $0B
0009B244 8007                       	dc.b	nRst, $07
0009B246 E103                       	smpsAlterNote       $03
0009B248 0101                       	dc.b	$01, $01
0009B24A E1FD                       	smpsAlterNote       $FD
0009B24C 01                         	dc.b	$01
0009B24D E1FA                       	smpsAlterNote       $FA
0009B24F 01                         	dc.b	$01
0009B250 E1FD                       	smpsAlterNote       $FD
0009B252 ECF5                       	smpsPSGAlterVol     $F5
0009B254 9106                       	dc.b	nE1, $06
0009B256 EC0B                       	smpsPSGAlterVol     $0B
0009B258 8004                       	dc.b	nRst, $04
0009B25A ECF5                       	smpsPSGAlterVol     $F5
0009B25C 9106                       	dc.b	nE1, $06
0009B25E EC04                       	smpsPSGAlterVol     $04
0009B260 E701                       	dc.b	smpsNoAttack, $01
0009B262 EC07                       	smpsPSGAlterVol     $07
0009B264 8006                       	dc.b	nRst, $06
0009B266 E100                       	smpsAlterNote       $00
0009B268 01                         	dc.b	$01
0009B269 E104                       	smpsAlterNote       $04
0009B26B 01                         	dc.b	$01
0009B26C E100                       	smpsAlterNote       $00
0009B26E 01                         	dc.b	$01
0009B26F E1FA                       	smpsAlterNote       $FA
0009B271 01                         	dc.b	$01
0009B272 E1FD                       	smpsAlterNote       $FD
0009B274 ECF5                       	smpsPSGAlterVol     $F5
0009B276 9106                       	dc.b	nE1, $06
0009B278 EC04                       	smpsPSGAlterVol     $04
0009B27A E701                       	dc.b	smpsNoAttack, $01
0009B27C EC07                       	smpsPSGAlterVol     $07
0009B27E 8003                       	dc.b	nRst, $03
0009B280 ECF5                       	smpsPSGAlterVol     $F5
0009B282 9106                       	dc.b	nE1, $06
0009B284 EC04                       	smpsPSGAlterVol     $04
0009B286 E701                       	dc.b	smpsNoAttack, $01
0009B288 EC07                       	smpsPSGAlterVol     $07
0009B28A 8006                       	dc.b	nRst, $06
0009B28C E100                       	smpsAlterNote       $00
0009B28E 01                         	dc.b	$01
0009B28F E104                       	smpsAlterNote       $04
0009B291 01                         	dc.b	$01
0009B292 E103                       	smpsAlterNote       $03
0009B294 01                         	dc.b	$01
0009B295 E1FD                       	smpsAlterNote       $FD
0009B297 01                         	dc.b	$01
0009B298 ECF5                       	smpsPSGAlterVol     $F5
0009B29A 9107                       	dc.b	nE1, $07
0009B29C EC0B                       	smpsPSGAlterVol     $0B
0009B29E 8004                       	dc.b	nRst, $04
0009B2A0 ECF5                       	smpsPSGAlterVol     $F5
0009B2A2 9106                       	dc.b	nE1, $06
0009B2A4 EC0B                       	smpsPSGAlterVol     $0B
0009B2A6 8007                       	dc.b	nRst, $07
0009B2A8 E103                       	smpsAlterNote       $03
0009B2AA 0101                       	dc.b	$01, $01
0009B2AC E100                       	smpsAlterNote       $00
0009B2AE 01                         	dc.b	$01
0009B2AF E1FA                       	smpsAlterNote       $FA
0009B2B1 01                         	dc.b	$01
0009B2B2 E1FD                       	smpsAlterNote       $FD
0009B2B4 ECF5                       	smpsPSGAlterVol     $F5
0009B2B6 9106                       	dc.b	nE1, $06
0009B2B8 EC04                       	smpsPSGAlterVol     $04
0009B2BA E701                       	dc.b	smpsNoAttack, $01
0009B2BC EC07                       	smpsPSGAlterVol     $07
0009B2BE 8003                       	dc.b	nRst, $03
0009B2C0 ECF5                       	smpsPSGAlterVol     $F5
0009B2C2 9106                       	dc.b	nE1, $06
0009B2C4 EC04                       	smpsPSGAlterVol     $04
0009B2C6 E701                       	dc.b	smpsNoAttack, $01
0009B2C8 EC07                       	smpsPSGAlterVol     $07
0009B2CA 8003                       	dc.b	nRst, $03
0009B2CC ECF5                       	smpsPSGAlterVol     $F5
0009B2CE 9207                       	dc.b	nF1, $07
0009B2D0 EC0B                       	smpsPSGAlterVol     $0B
0009B2D2 8006                       	dc.b	nRst, $06
0009B2D4 E100                       	smpsAlterNote       $00
0009B2D6 01                         	dc.b	$01
0009B2D7 E104                       	smpsAlterNote       $04
0009B2D9 01                         	dc.b	$01
0009B2DA E103                       	smpsAlterNote       $03
0009B2DC 01                         	dc.b	$01
0009B2DD E1FD                       	smpsAlterNote       $FD
0009B2DF 01                         	dc.b	$01
0009B2E0 E1F9                       	smpsAlterNote       $F9
0009B2E2 01                         	dc.b	$01
0009B2E3 E1FD                       	smpsAlterNote       $FD
0009B2E5 01                         	dc.b	$01
0009B2E6 E100                       	smpsAlterNote       $00
0009B2E8 01                         	dc.b	$01
0009B2E9 E104                       	smpsAlterNote       $04
0009B2EB 01                         	dc.b	$01
0009B2EC E1FD                       	smpsAlterNote       $FD
0009B2EE ECF5                       	smpsPSGAlterVol     $F5
0009B2F0 9203 9203                  	dc.b	nF1, $03, nF1, $03
0009B2F4 EC04                       	smpsPSGAlterVol     $04
0009B2F6 E701                       	dc.b	smpsNoAttack, $01
0009B2F8 EC07                       	smpsPSGAlterVol     $07
0009B2FA 8009                       	dc.b	nRst, $09
0009B2FC E100                       	smpsAlterNote       $00
0009B2FE 01                         	dc.b	$01
0009B2FF E104                       	smpsAlterNote       $04
0009B301 01                         	dc.b	$01
0009B302 E103                       	smpsAlterNote       $03
0009B304 01                         	dc.b	$01
0009B305 E1FD                       	smpsAlterNote       $FD
0009B307 01                         	dc.b	$01
0009B308 E1F9                       	smpsAlterNote       $F9
0009B30A 01                         	dc.b	$01
0009B30B E1FD                       	smpsAlterNote       $FD
0009B30D 01                         	dc.b	$01
0009B30E E100                       	smpsAlterNote       $00
0009B310 01                         	dc.b	$01
0009B311 E104                       	smpsAlterNote       $04
0009B313 01                         	dc.b	$01
0009B314 E100                       	smpsAlterNote       $00
0009B316 01                         	dc.b	$01
0009B317 E1FA                       	smpsAlterNote       $FA
0009B319 01                         	dc.b	$01
0009B31A E1F9                       	smpsAlterNote       $F9
0009B31C 01                         	dc.b	$01
0009B31D E1FD                       	smpsAlterNote       $FD
0009B31F 01                         	dc.b	$01
0009B320 E103                       	smpsAlterNote       $03
0009B322 0101                       	dc.b	$01, $01
0009B324 E100                       	smpsAlterNote       $00
0009B326 01                         	dc.b	$01
0009B327 E1FD                       	smpsAlterNote       $FD
0009B329 ECF5                       	smpsPSGAlterVol     $F5
0009B32B 9202                       	dc.b	nF1, $02
0009B32D EC04                       	smpsPSGAlterVol     $04
0009B32F E701                       	dc.b	smpsNoAttack, $01
0009B331 ECFC                       	smpsPSGAlterVol     $FC
0009B333 9106                       	dc.b	nE1, $06
0009B335 EC04                       	smpsPSGAlterVol     $04
0009B337 E701                       	dc.b	smpsNoAttack, $01
0009B339 EC07                       	smpsPSGAlterVol     $07
0009B33B 8006                       	dc.b	nRst, $06
0009B33D E100                       	smpsAlterNote       $00
0009B33F 01                         	dc.b	$01
0009B340 E104                       	smpsAlterNote       $04
0009B342 01                         	dc.b	$01
0009B343 E100                       	smpsAlterNote       $00
0009B345 01                         	dc.b	$01
0009B346 E1FD                       	smpsAlterNote       $FD
0009B348 01                         	dc.b	$01
0009B349 E1F9                       	smpsAlterNote       $F9
0009B34B 01                         	dc.b	$01
0009B34C E1FD                       	smpsAlterNote       $FD
0009B34E 01                         	dc.b	$01
0009B34F E103                       	smpsAlterNote       $03
0009B351 01                         	dc.b	$01
0009B352 E104                       	smpsAlterNote       $04
0009B354 01                         	dc.b	$01
0009B355 E1FD                       	smpsAlterNote       $FD
0009B357 ECF5                       	smpsPSGAlterVol     $F5
0009B359 9102                       	dc.b	nE1, $02
0009B35B EC04                       	smpsPSGAlterVol     $04
0009B35D E701                       	dc.b	smpsNoAttack, $01
0009B35F ECFC                       	smpsPSGAlterVol     $FC
0009B361 920D                       	dc.b	nF1, $0D
0009B363 E100                       	smpsAlterNote       $00
0009B365 E701                       	dc.b	smpsNoAttack, $01
0009B367 E104                       	smpsAlterNote       $04
0009B369 E701                       	dc.b	smpsNoAttack, $01
0009B36B E100                       	smpsAlterNote       $00
0009B36D E701                       	dc.b	smpsNoAttack, $01
0009B36F E1FD                       	smpsAlterNote       $FD
0009B371 E701                       	dc.b	smpsNoAttack, $01
0009B373 E1F9                       	smpsAlterNote       $F9
0009B375 E701                       	dc.b	smpsNoAttack, $01
0009B377 E1FD                       	smpsAlterNote       $FD
0009B379 E701                       	dc.b	smpsNoAttack, $01
0009B37B E103                       	smpsAlterNote       $03
0009B37D E701                       	dc.b	smpsNoAttack, $01
0009B37F E104                       	smpsAlterNote       $04
0009B381 E701                       	dc.b	smpsNoAttack, $01
0009B383 E100                       	smpsAlterNote       $00
0009B385 E701                       	dc.b	smpsNoAttack, $01
0009B387 E1FA                       	smpsAlterNote       $FA
0009B389 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B38D E1FD                       	smpsAlterNote       $FD
0009B38F E701                       	dc.b	smpsNoAttack, $01
0009B391 E103                       	smpsAlterNote       $03
0009B393 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B397 E1FD                       	smpsAlterNote       $FD
0009B399 E701                       	dc.b	smpsNoAttack, $01
0009B39B E1F9                       	smpsAlterNote       $F9
0009B39D E701                       	dc.b	smpsNoAttack, $01
0009B39F E1FA                       	smpsAlterNote       $FA
0009B3A1 E701                       	dc.b	smpsNoAttack, $01
0009B3A3 E100                       	smpsAlterNote       $00
0009B3A5 EC04                       	smpsPSGAlterVol     $04
0009B3A7 E701                       	dc.b	smpsNoAttack, $01
0009B3A9 EC07                       	smpsPSGAlterVol     $07
0009B3AB E104                       	smpsAlterNote       $04
0009B3AD 8001                       	dc.b	nRst, $01
0009B3AF E100                       	smpsAlterNote       $00
0009B3B1 01                         	dc.b	$01
0009B3B2 E1FD                       	smpsAlterNote       $FD
0009B3B4 01                         	dc.b	$01
0009B3B5 E1F9                       	smpsAlterNote       $F9
0009B3B7 01                         	dc.b	$01
0009B3B8 E1FD                       	smpsAlterNote       $FD
0009B3BA 01                         	dc.b	$01
0009B3BB E103                       	smpsAlterNote       $03
0009B3BD 01                         	dc.b	$01
0009B3BE E104                       	smpsAlterNote       $04
0009B3C0 01                         	dc.b	$01
0009B3C1 E1FD                       	smpsAlterNote       $FD
0009B3C3 ECF5                       	smpsPSGAlterVol     $F5
0009B3C5 9106                       	dc.b	nE1, $06
0009B3C7 EC04                       	smpsPSGAlterVol     $04
0009B3C9 E701                       	dc.b	smpsNoAttack, $01
0009B3CB EC07                       	smpsPSGAlterVol     $07
0009B3CD 8003                       	dc.b	nRst, $03
0009B3CF ECF5                       	smpsPSGAlterVol     $F5
0009B3D1 9106                       	dc.b	nE1, $06
0009B3D3 EC04                       	smpsPSGAlterVol     $04
0009B3D5 E701                       	dc.b	smpsNoAttack, $01
0009B3D7 EC07                       	smpsPSGAlterVol     $07
0009B3D9 8006                       	dc.b	nRst, $06
0009B3DB E100                       	smpsAlterNote       $00
0009B3DD 01                         	dc.b	$01
0009B3DE E104                       	smpsAlterNote       $04
0009B3E0 01                         	dc.b	$01
0009B3E1 E100                       	smpsAlterNote       $00
0009B3E3 01                         	dc.b	$01
0009B3E4 E1FA                       	smpsAlterNote       $FA
0009B3E6 01                         	dc.b	$01
0009B3E7 E1FD                       	smpsAlterNote       $FD
0009B3E9 ECF5                       	smpsPSGAlterVol     $F5
0009B3EB 9206                       	dc.b	nF1, $06
0009B3ED EC04                       	smpsPSGAlterVol     $04
0009B3EF E701                       	dc.b	smpsNoAttack, $01
0009B3F1 EC07                       	smpsPSGAlterVol     $07
0009B3F3 8003                       	dc.b	nRst, $03
0009B3F5 ECF5                       	smpsPSGAlterVol     $F5
0009B3F7 9207                       	dc.b	nF1, $07
0009B3F9 EC0B                       	smpsPSGAlterVol     $0B
0009B3FB 8006                       	dc.b	nRst, $06
0009B3FD E100                       	smpsAlterNote       $00
0009B3FF 01                         	dc.b	$01
0009B400 E103                       	smpsAlterNote       $03
0009B402 0101                       	dc.b	$01, $01
0009B404 E1FD                       	smpsAlterNote       $FD
0009B406 01                         	dc.b	$01
0009B407 ECF5                       	smpsPSGAlterVol     $F5
0009B409 9107                       	dc.b	nE1, $07
0009B40B EC0B                       	smpsPSGAlterVol     $0B
0009B40D 8004                       	dc.b	nRst, $04
0009B40F ECF5                       	smpsPSGAlterVol     $F5
0009B411 9106                       	dc.b	nE1, $06
0009B413 EC04                       	smpsPSGAlterVol     $04
0009B415 E701                       	dc.b	smpsNoAttack, $01
0009B417 EC07                       	smpsPSGAlterVol     $07
0009B419 8006                       	dc.b	nRst, $06
0009B41B E103                       	smpsAlterNote       $03
0009B41D 01                         	dc.b	$01
0009B41E E104                       	smpsAlterNote       $04
0009B420 01                         	dc.b	$01
0009B421 E100                       	smpsAlterNote       $00
0009B423 01                         	dc.b	$01
0009B424 E1FA                       	smpsAlterNote       $FA
0009B426 01                         	dc.b	$01
0009B427 E1FD                       	smpsAlterNote       $FD
0009B429 ECF5                       	smpsPSGAlterVol     $F5
0009B42B 9106                       	dc.b	nE1, $06
0009B42D EC04                       	smpsPSGAlterVol     $04
0009B42F E701                       	dc.b	smpsNoAttack, $01
0009B431 EC07                       	smpsPSGAlterVol     $07
0009B433 8003                       	dc.b	nRst, $03
0009B435 ECF5                       	smpsPSGAlterVol     $F5
0009B437 9106                       	dc.b	nE1, $06
0009B439 EC04                       	smpsPSGAlterVol     $04
0009B43B E701                       	dc.b	smpsNoAttack, $01
0009B43D EC07                       	smpsPSGAlterVol     $07
0009B43F 8003                       	dc.b	nRst, $03
0009B441 ECF5                       	smpsPSGAlterVol     $F5
0009B443 9207                       	dc.b	nF1, $07
0009B445 EC0B                       	smpsPSGAlterVol     $0B
0009B447 8006                       	dc.b	nRst, $06
0009B449 E100                       	smpsAlterNote       $00
0009B44B 01                         	dc.b	$01
0009B44C E103                       	smpsAlterNote       $03
0009B44E 0101                       	dc.b	$01, $01
0009B450 E1FD                       	smpsAlterNote       $FD
0009B452 01                         	dc.b	$01
0009B453 E1F9                       	smpsAlterNote       $F9
0009B455 01                         	dc.b	$01
0009B456 E1FA                       	smpsAlterNote       $FA
0009B458 01                         	dc.b	$01
0009B459 E100                       	smpsAlterNote       $00
0009B45B 01                         	dc.b	$01
0009B45C E104                       	smpsAlterNote       $04
0009B45E 01                         	dc.b	$01
0009B45F E1FD                       	smpsAlterNote       $FD
0009B461 ECF5                       	smpsPSGAlterVol     $F5
0009B463 9203 9203                  	dc.b	nF1, $03, nF1, $03
0009B467 EC04                       	smpsPSGAlterVol     $04
0009B469 E701                       	dc.b	smpsNoAttack, $01
0009B46B EC07                       	smpsPSGAlterVol     $07
0009B46D 8009                       	dc.b	nRst, $09
0009B46F E100                       	smpsAlterNote       $00
0009B471 01                         	dc.b	$01
0009B472 E103                       	smpsAlterNote       $03
0009B474 0101                       	dc.b	$01, $01
0009B476 E1FD                       	smpsAlterNote       $FD
0009B478 01                         	dc.b	$01
0009B479 E1F9                       	smpsAlterNote       $F9
0009B47B 01                         	dc.b	$01
0009B47C E1FA                       	smpsAlterNote       $FA
0009B47E 01                         	dc.b	$01
0009B47F E100                       	smpsAlterNote       $00
0009B481 01                         	dc.b	$01
0009B482 E104                       	smpsAlterNote       $04
0009B484 01                         	dc.b	$01
0009B485 E100                       	smpsAlterNote       $00
0009B487 01                         	dc.b	$01
0009B488 E1FD                       	smpsAlterNote       $FD
0009B48A 01                         	dc.b	$01
0009B48B E1F9                       	smpsAlterNote       $F9
0009B48D 01                         	dc.b	$01
0009B48E E1FD                       	smpsAlterNote       $FD
0009B490 01                         	dc.b	$01
0009B491 E103                       	smpsAlterNote       $03
0009B493 01                         	dc.b	$01
0009B494 E104                       	smpsAlterNote       $04
0009B496 01                         	dc.b	$01
0009B497 E100                       	smpsAlterNote       $00
0009B499 01                         	dc.b	$01
0009B49A E1FD                       	smpsAlterNote       $FD
0009B49C ECF5                       	smpsPSGAlterVol     $F5
0009B49E 9203 9106                  	dc.b	nF1, $03, nE1, $06
0009B4A2 EC04                       	smpsPSGAlterVol     $04
0009B4A4 E701                       	dc.b	smpsNoAttack, $01
0009B4A6 EC07                       	smpsPSGAlterVol     $07
0009B4A8 8006                       	dc.b	nRst, $06
0009B4AA E100                       	smpsAlterNote       $00
0009B4AC 01                         	dc.b	$01
0009B4AD E104                       	smpsAlterNote       $04
0009B4AF 01                         	dc.b	$01
0009B4B0 E103                       	smpsAlterNote       $03
0009B4B2 01                         	dc.b	$01
0009B4B3 E1FD                       	smpsAlterNote       $FD
0009B4B5 01                         	dc.b	$01
0009B4B6 E1F9                       	smpsAlterNote       $F9
0009B4B8 01                         	dc.b	$01
0009B4B9 E1FD                       	smpsAlterNote       $FD
0009B4BB 01                         	dc.b	$01
0009B4BC E100                       	smpsAlterNote       $00
0009B4BE 01                         	dc.b	$01
0009B4BF E104                       	smpsAlterNote       $04
0009B4C1 01                         	dc.b	$01
0009B4C2 E1FD                       	smpsAlterNote       $FD
0009B4C4 ECF5                       	smpsPSGAlterVol     $F5
0009B4C6 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0009B4CA E100                       	smpsAlterNote       $00
0009B4CC E701                       	dc.b	smpsNoAttack, $01
0009B4CE E104                       	smpsAlterNote       $04
0009B4D0 E701                       	dc.b	smpsNoAttack, $01
0009B4D2 E100                       	smpsAlterNote       $00
0009B4D4 E701                       	dc.b	smpsNoAttack, $01
0009B4D6 E1FD                       	smpsAlterNote       $FD
0009B4D8 E701                       	dc.b	smpsNoAttack, $01
0009B4DA E1F9                       	smpsAlterNote       $F9
0009B4DC E701                       	dc.b	smpsNoAttack, $01
0009B4DE E1FD                       	smpsAlterNote       $FD
0009B4E0 E701                       	dc.b	smpsNoAttack, $01
0009B4E2 E103                       	smpsAlterNote       $03
0009B4E4 E701                       	dc.b	smpsNoAttack, $01
0009B4E6 E104                       	smpsAlterNote       $04
0009B4E8 E701                       	dc.b	smpsNoAttack, $01
0009B4EA E100                       	smpsAlterNote       $00
0009B4EC E701                       	dc.b	smpsNoAttack, $01
0009B4EE E1FA                       	smpsAlterNote       $FA
0009B4F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B4F4 E1FD                       	smpsAlterNote       $FD
0009B4F6 E701                       	dc.b	smpsNoAttack, $01
0009B4F8 E103                       	smpsAlterNote       $03
0009B4FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B4FE E100                       	smpsAlterNote       $00
0009B500 E701                       	dc.b	smpsNoAttack, $01
0009B502 E1FA                       	smpsAlterNote       $FA
0009B504 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009B508 E100                       	smpsAlterNote       $00
0009B50A EC04                       	smpsPSGAlterVol     $04
0009B50C E701                       	dc.b	smpsNoAttack, $01
0009B50E EC07                       	smpsPSGAlterVol     $07
0009B510 E104                       	smpsAlterNote       $04
0009B512 8001                       	dc.b	nRst, $01
0009B514 E103                       	smpsAlterNote       $03
0009B516 01                         	dc.b	$01
0009B517 E1FD                       	smpsAlterNote       $FD
0009B519 01                         	dc.b	$01
0009B51A E1F9                       	smpsAlterNote       $F9
0009B51C 01                         	dc.b	$01
0009B51D E1FD                       	smpsAlterNote       $FD
0009B51F 01                         	dc.b	$01
0009B520 E100                       	smpsAlterNote       $00
0009B522 01                         	dc.b	$01
0009B523 E104                       	smpsAlterNote       $04
0009B525 01                         	dc.b	$01
0009B526 E1FD                       	smpsAlterNote       $FD
0009B528 ECF5                       	smpsPSGAlterVol     $F5
0009B52A 9106                       	dc.b	nE1, $06
0009B52C EC04                       	smpsPSGAlterVol     $04
0009B52E E701                       	dc.b	smpsNoAttack, $01
0009B530 EC07                       	smpsPSGAlterVol     $07
0009B532 8003                       	dc.b	nRst, $03
0009B534 ECF5                       	smpsPSGAlterVol     $F5
0009B536 9106                       	dc.b	nE1, $06
0009B538 EC04                       	smpsPSGAlterVol     $04
0009B53A E701                       	dc.b	smpsNoAttack, $01
0009B53C EC07                       	smpsPSGAlterVol     $07
0009B53E 8006                       	dc.b	nRst, $06
0009B540 E100                       	smpsAlterNote       $00
0009B542 01                         	dc.b	$01
0009B543 E104                       	smpsAlterNote       $04
0009B545 01                         	dc.b	$01
0009B546 E100                       	smpsAlterNote       $00
0009B548 01                         	dc.b	$01
0009B549 E1FD                       	smpsAlterNote       $FD
0009B54B 01                         	dc.b	$01
0009B54C ECF5                       	smpsPSGAlterVol     $F5
0009B54E 9206                       	dc.b	nF1, $06
0009B550 EC04                       	smpsPSGAlterVol     $04
0009B552 E701                       	dc.b	smpsNoAttack, $01
0009B554 EC07                       	smpsPSGAlterVol     $07
0009B556 8003                       	dc.b	nRst, $03
0009B558 ECF5                       	smpsPSGAlterVol     $F5
0009B55A 9207                       	dc.b	nF1, $07
0009B55C EC0B                       	smpsPSGAlterVol     $0B
0009B55E 8007                       	dc.b	nRst, $07
0009B560 E103                       	smpsAlterNote       $03
0009B562 0101                       	dc.b	$01, $01
0009B564 E1FD                       	smpsAlterNote       $FD
0009B566 01                         	dc.b	$01
0009B567 E1FA                       	smpsAlterNote       $FA
0009B569 01                         	dc.b	$01
0009B56A E1FD                       	smpsAlterNote       $FD
0009B56C ECF5                       	smpsPSGAlterVol     $F5
0009B56E 9106                       	dc.b	nE1, $06
0009B570 EC0B                       	smpsPSGAlterVol     $0B
0009B572 8004                       	dc.b	nRst, $04
0009B574 ECF5                       	smpsPSGAlterVol     $F5
0009B576 9106                       	dc.b	nE1, $06
0009B578 EC04                       	smpsPSGAlterVol     $04
0009B57A E701                       	dc.b	smpsNoAttack, $01
0009B57C EC07                       	smpsPSGAlterVol     $07
0009B57E 8006                       	dc.b	nRst, $06
0009B580 E100                       	smpsAlterNote       $00
0009B582 01                         	dc.b	$01
0009B583 E104                       	smpsAlterNote       $04
0009B585 01                         	dc.b	$01
0009B586 E100                       	smpsAlterNote       $00
0009B588 01                         	dc.b	$01
0009B589 E1FA                       	smpsAlterNote       $FA
0009B58B 01                         	dc.b	$01
0009B58C E1FD                       	smpsAlterNote       $FD
0009B58E ECF5                       	smpsPSGAlterVol     $F5
0009B590 9206                       	dc.b	nF1, $06
0009B592 EC04                       	smpsPSGAlterVol     $04
0009B594 E701                       	dc.b	smpsNoAttack, $01
0009B596 EC07                       	smpsPSGAlterVol     $07
0009B598 8003                       	dc.b	nRst, $03
0009B59A ECF5                       	smpsPSGAlterVol     $F5
0009B59C 9206                       	dc.b	nF1, $06
0009B59E EC04                       	smpsPSGAlterVol     $04
0009B5A0 E701                       	dc.b	smpsNoAttack, $01
0009B5A2 EC07                       	smpsPSGAlterVol     $07
0009B5A4 8006                       	dc.b	nRst, $06
0009B5A6 E100                       	smpsAlterNote       $00
0009B5A8 01                         	dc.b	$01
0009B5A9 E104                       	smpsAlterNote       $04
0009B5AB 01                         	dc.b	$01
0009B5AC E103                       	smpsAlterNote       $03
0009B5AE 01                         	dc.b	$01
0009B5AF E1FD                       	smpsAlterNote       $FD
0009B5B1 01                         	dc.b	$01
0009B5B2 ECF5                       	smpsPSGAlterVol     $F5
0009B5B4 9107                       	dc.b	nE1, $07
0009B5B6 EC0B                       	smpsPSGAlterVol     $0B
0009B5B8 8004                       	dc.b	nRst, $04
0009B5BA ECF5                       	smpsPSGAlterVol     $F5
0009B5BC 9106                       	dc.b	nE1, $06
0009B5BE EC0B                       	smpsPSGAlterVol     $0B
0009B5C0 8007                       	dc.b	nRst, $07
0009B5C2 E103                       	smpsAlterNote       $03
0009B5C4 0101                       	dc.b	$01, $01
0009B5C6 E100                       	smpsAlterNote       $00
0009B5C8 01                         	dc.b	$01
0009B5C9 E1FA                       	smpsAlterNote       $FA
0009B5CB 01                         	dc.b	$01
0009B5CC E1FD                       	smpsAlterNote       $FD
0009B5CE ECF5                       	smpsPSGAlterVol     $F5
0009B5D0 9206                       	dc.b	nF1, $06
0009B5D2 EC04                       	smpsPSGAlterVol     $04
0009B5D4 E701                       	dc.b	smpsNoAttack, $01
0009B5D6 EC07                       	smpsPSGAlterVol     $07
0009B5D8 8003                       	dc.b	nRst, $03
0009B5DA ECF5                       	smpsPSGAlterVol     $F5
0009B5DC 9206                       	dc.b	nF1, $06
0009B5DE EC04                       	smpsPSGAlterVol     $04
0009B5E0 E701                       	dc.b	smpsNoAttack, $01
0009B5E2 EC07                       	smpsPSGAlterVol     $07
0009B5E4 8006                       	dc.b	nRst, $06
0009B5E6 E100                       	smpsAlterNote       $00
0009B5E8 01                         	dc.b	$01
0009B5E9 E104                       	smpsAlterNote       $04
0009B5EB 01                         	dc.b	$01
0009B5EC E100                       	smpsAlterNote       $00
0009B5EE 01                         	dc.b	$01
0009B5EF E1FD                       	smpsAlterNote       $FD
0009B5F1 01                         	dc.b	$01
0009B5F2 ECF5                       	smpsPSGAlterVol     $F5
0009B5F4 9106                       	dc.b	nE1, $06
0009B5F6 EC04                       	smpsPSGAlterVol     $04
0009B5F8 E701                       	dc.b	smpsNoAttack, $01
0009B5FA EC07                       	smpsPSGAlterVol     $07
0009B5FC 8003                       	dc.b	nRst, $03
0009B5FE ECF5                       	smpsPSGAlterVol     $F5
0009B600 9107 9106                  	dc.b	nE1, $07, nE1, $06
0009B604 EC04                       	smpsPSGAlterVol     $04
0009B606 E701                       	dc.b	smpsNoAttack, $01
0009B608 ECFC                       	smpsPSGAlterVol     $FC
0009B60A 9103                       	dc.b	nE1, $03
0009B60C EC04                       	smpsPSGAlterVol     $04
0009B60E E701                       	dc.b	smpsNoAttack, $01
0009B610 ECFC                       	smpsPSGAlterVol     $FC
0009B612 9102                       	dc.b	nE1, $02
0009B614 EC04                       	smpsPSGAlterVol     $04
0009B616 E701                       	dc.b	smpsNoAttack, $01
0009B618 ECFC                       	smpsPSGAlterVol     $FC
0009B61A 9103                       	dc.b	nE1, $03
0009B61C EC0B                       	smpsPSGAlterVol     $0B
0009B61E 800A                       	dc.b	nRst, $0A
0009B620 E100                       	smpsAlterNote       $00
0009B622 01                         	dc.b	$01
0009B623 E104                       	smpsAlterNote       $04
0009B625 01                         	dc.b	$01
0009B626 E100                       	smpsAlterNote       $00
0009B628 01                         	dc.b	$01
0009B629 E1FA                       	smpsAlterNote       $FA
0009B62B 01                         	dc.b	$01
0009B62C E1F9                       	smpsAlterNote       $F9
0009B62E 01                         	dc.b	$01
0009B62F E1FD                       	smpsAlterNote       $FD
0009B631 01                         	dc.b	$01
0009B632 E103                       	smpsAlterNote       $03
0009B634 0101                       	dc.b	$01, $01
0009B636 E100                       	smpsAlterNote       $00
0009B638 01                         	dc.b	$01
0009B639 E1FA                       	smpsAlterNote       $FA
0009B63B 0101                       	dc.b	$01, $01
0009B63D E1FD                       	smpsAlterNote       $FD
0009B63F ECF5                       	smpsPSGAlterVol     $F5
0009B641 9206                       	dc.b	nF1, $06
0009B643 EC04                       	smpsPSGAlterVol     $04
0009B645 E704                       	dc.b	smpsNoAttack, $04
0009B647 ECFC                       	smpsPSGAlterVol     $FC
0009B649 9206                       	dc.b	nF1, $06
0009B64B EC04                       	smpsPSGAlterVol     $04
0009B64D E701                       	dc.b	smpsNoAttack, $01
0009B64F EC07                       	smpsPSGAlterVol     $07
0009B651 8006                       	dc.b	nRst, $06
0009B653 E100                       	smpsAlterNote       $00
0009B655 01                         	dc.b	$01
0009B656 E104                       	smpsAlterNote       $04
0009B658 01                         	dc.b	$01
0009B659 E103                       	smpsAlterNote       $03
0009B65B 01                         	dc.b	$01
0009B65C E1FD                       	smpsAlterNote       $FD
0009B65E 01                         	dc.b	$01
0009B65F ECF5                       	smpsPSGAlterVol     $F5
0009B661 9407                       	dc.b	nG1, $07
0009B663 EC0B                       	smpsPSGAlterVol     $0B
0009B665 8004                       	dc.b	nRst, $04
0009B667 ECF5                       	smpsPSGAlterVol     $F5
0009B669 9406                       	dc.b	nG1, $06
0009B66B EC0B                       	smpsPSGAlterVol     $0B
0009B66D 8007                       	dc.b	nRst, $07
0009B66F E103                       	smpsAlterNote       $03
0009B671 0101                       	dc.b	$01, $01
0009B673 E1FD                       	smpsAlterNote       $FD
0009B675 01                         	dc.b	$01
0009B676 E1F9                       	smpsAlterNote       $F9
0009B678 01                         	dc.b	$01
0009B679 E1FD                       	smpsAlterNote       $FD
0009B67B ECF5                       	smpsPSGAlterVol     $F5
0009B67D 9206                       	dc.b	nF1, $06
0009B67F EC04                       	smpsPSGAlterVol     $04
0009B681 E701                       	dc.b	smpsNoAttack, $01
0009B683 EC07                       	smpsPSGAlterVol     $07
0009B685 8003                       	dc.b	nRst, $03
0009B687 ECF5                       	smpsPSGAlterVol     $F5
0009B689 9206                       	dc.b	nF1, $06
0009B68B EC04                       	smpsPSGAlterVol     $04
0009B68D E701                       	dc.b	smpsNoAttack, $01
0009B68F EC07                       	smpsPSGAlterVol     $07
0009B691 8006                       	dc.b	nRst, $06
0009B693 E100                       	smpsAlterNote       $00
0009B695 01                         	dc.b	$01
0009B696 E104                       	smpsAlterNote       $04
0009B698 01                         	dc.b	$01
0009B699 E100                       	smpsAlterNote       $00
0009B69B 01                         	dc.b	$01
0009B69C E1FA                       	smpsAlterNote       $FA
0009B69E 01                         	dc.b	$01
0009B69F E1FD                       	smpsAlterNote       $FD
0009B6A1 ECF5                       	smpsPSGAlterVol     $F5
0009B6A3 9206                       	dc.b	nF1, $06
0009B6A5 EC04                       	smpsPSGAlterVol     $04
0009B6A7 E701                       	dc.b	smpsNoAttack, $01
0009B6A9 EC07                       	smpsPSGAlterVol     $07
0009B6AB 8003                       	dc.b	nRst, $03
0009B6AD ECF5                       	smpsPSGAlterVol     $F5
0009B6AF 9107                       	dc.b	nE1, $07
0009B6B1 EC0B                       	smpsPSGAlterVol     $0B
0009B6B3 8006                       	dc.b	nRst, $06
0009B6B5 E100                       	smpsAlterNote       $00
0009B6B7 01                         	dc.b	$01
0009B6B8 E103                       	smpsAlterNote       $03
0009B6BA 0101                       	dc.b	$01, $01
0009B6BC E1FD                       	smpsAlterNote       $FD
0009B6BE 01                         	dc.b	$01
0009B6BF ECF5                       	smpsPSGAlterVol     $F5
0009B6C1 9207                       	dc.b	nF1, $07
0009B6C3 EC0B                       	smpsPSGAlterVol     $0B
0009B6C5 8004                       	dc.b	nRst, $04
0009B6C7 ECF5                       	smpsPSGAlterVol     $F5
0009B6C9 9206                       	dc.b	nF1, $06
0009B6CB EC04                       	smpsPSGAlterVol     $04
0009B6CD E701                       	dc.b	smpsNoAttack, $01
0009B6CF EC07                       	smpsPSGAlterVol     $07
0009B6D1 8006                       	dc.b	nRst, $06
0009B6D3 E103                       	smpsAlterNote       $03
0009B6D5 01                         	dc.b	$01
0009B6D6 E104                       	smpsAlterNote       $04
0009B6D8 01                         	dc.b	$01
0009B6D9 E100                       	smpsAlterNote       $00
0009B6DB 01                         	dc.b	$01
0009B6DC E1FB                       	smpsAlterNote       $FB
0009B6DE 01                         	dc.b	$01
0009B6DF E1FD                       	smpsAlterNote       $FD
0009B6E1 ECF5                       	smpsPSGAlterVol     $F5
0009B6E3 9406                       	dc.b	nG1, $06
0009B6E5 EC04                       	smpsPSGAlterVol     $04
0009B6E7 E701                       	dc.b	smpsNoAttack, $01
0009B6E9 EC07                       	smpsPSGAlterVol     $07
0009B6EB 8003                       	dc.b	nRst, $03
0009B6ED ECF5                       	smpsPSGAlterVol     $F5
0009B6EF 9406                       	dc.b	nG1, $06
0009B6F1 EC04                       	smpsPSGAlterVol     $04
0009B6F3 E701                       	dc.b	smpsNoAttack, $01
0009B6F5 EC07                       	smpsPSGAlterVol     $07
0009B6F7 8006                       	dc.b	nRst, $06
0009B6F9 E100                       	smpsAlterNote       $00
0009B6FB 01                         	dc.b	$01
0009B6FC E104                       	smpsAlterNote       $04
0009B6FE 01                         	dc.b	$01
0009B6FF E100                       	smpsAlterNote       $00
0009B701 01                         	dc.b	$01
0009B702 E1FD                       	smpsAlterNote       $FD
0009B704 01                         	dc.b	$01
0009B705 ECF5                       	smpsPSGAlterVol     $F5
0009B707 9206                       	dc.b	nF1, $06
0009B709 EC04                       	smpsPSGAlterVol     $04
0009B70B E701                       	dc.b	smpsNoAttack, $01
0009B70D EC07                       	smpsPSGAlterVol     $07
0009B70F 8003                       	dc.b	nRst, $03
0009B711 ECF5                       	smpsPSGAlterVol     $F5
0009B713 9207                       	dc.b	nF1, $07
0009B715 EC0B                       	smpsPSGAlterVol     $0B
0009B717 8007                       	dc.b	nRst, $07
0009B719 E103                       	smpsAlterNote       $03
0009B71B 0101                       	dc.b	$01, $01
0009B71D E1FD                       	smpsAlterNote       $FD
0009B71F 01                         	dc.b	$01
0009B720 E1FA                       	smpsAlterNote       $FA
0009B722 01                         	dc.b	$01
0009B723 E1FD                       	smpsAlterNote       $FD
0009B725 ECF5                       	smpsPSGAlterVol     $F5
0009B727 9206                       	dc.b	nF1, $06
0009B729 EC0B                       	smpsPSGAlterVol     $0B
0009B72B 8004                       	dc.b	nRst, $04
0009B72D ECF5                       	smpsPSGAlterVol     $F5
0009B72F 9206                       	dc.b	nF1, $06
0009B731 EC04                       	smpsPSGAlterVol     $04
0009B733 E701                       	dc.b	smpsNoAttack, $01
0009B735 EC07                       	smpsPSGAlterVol     $07
0009B737 8006                       	dc.b	nRst, $06
0009B739 E100                       	smpsAlterNote       $00
0009B73B 01                         	dc.b	$01
0009B73C E104                       	smpsAlterNote       $04
0009B73E 01                         	dc.b	$01
0009B73F E100                       	smpsAlterNote       $00
0009B741 01                         	dc.b	$01
0009B742 E1FA                       	smpsAlterNote       $FA
0009B744 01                         	dc.b	$01
0009B745 E1FD                       	smpsAlterNote       $FD
0009B747 ECF5                       	smpsPSGAlterVol     $F5
0009B749 9206                       	dc.b	nF1, $06
0009B74B EC04                       	smpsPSGAlterVol     $04
0009B74D E701                       	dc.b	smpsNoAttack, $01
0009B74F EC07                       	smpsPSGAlterVol     $07
0009B751 8003                       	dc.b	nRst, $03
0009B753 ECF5                       	smpsPSGAlterVol     $F5
0009B755 9207                       	dc.b	nF1, $07
0009B757 EC0B                       	smpsPSGAlterVol     $0B
0009B759 8006                       	dc.b	nRst, $06
0009B75B E100                       	smpsAlterNote       $00
0009B75D 01                         	dc.b	$01
0009B75E E103                       	smpsAlterNote       $03
0009B760 0101                       	dc.b	$01, $01
0009B762 E1FD                       	smpsAlterNote       $FD
0009B764 01                         	dc.b	$01
0009B765 ECF5                       	smpsPSGAlterVol     $F5
0009B767 9207                       	dc.b	nF1, $07
0009B769 EC0B                       	smpsPSGAlterVol     $0B
0009B76B 8004                       	dc.b	nRst, $04
0009B76D ECF5                       	smpsPSGAlterVol     $F5
0009B76F 9206                       	dc.b	nF1, $06
0009B771 EC0B                       	smpsPSGAlterVol     $0B
0009B773 8007                       	dc.b	nRst, $07
0009B775 E103                       	smpsAlterNote       $03
0009B777 0101                       	dc.b	$01, $01
0009B779 E100                       	smpsAlterNote       $00
0009B77B 01                         	dc.b	$01
0009B77C E1FA                       	smpsAlterNote       $FA
0009B77E 01                         	dc.b	$01
0009B77F E1FD                       	smpsAlterNote       $FD
0009B781 ECF5                       	smpsPSGAlterVol     $F5
0009B783 9206                       	dc.b	nF1, $06
0009B785 EC04                       	smpsPSGAlterVol     $04
0009B787 E701                       	dc.b	smpsNoAttack, $01
0009B789 EC07                       	smpsPSGAlterVol     $07
0009B78B 8003                       	dc.b	nRst, $03
0009B78D ECF5                       	smpsPSGAlterVol     $F5
0009B78F 9206                       	dc.b	nF1, $06
0009B791 EC04                       	smpsPSGAlterVol     $04
0009B793 E701                       	dc.b	smpsNoAttack, $01
0009B795 EC07                       	smpsPSGAlterVol     $07
0009B797 8006                       	dc.b	nRst, $06
0009B799 E100                       	smpsAlterNote       $00
0009B79B 01                         	dc.b	$01
0009B79C E104                       	smpsAlterNote       $04
0009B79E 01                         	dc.b	$01
0009B79F E100                       	smpsAlterNote       $00
0009B7A1 01                         	dc.b	$01
0009B7A2 E1FD                       	smpsAlterNote       $FD
0009B7A4 01                         	dc.b	$01
0009B7A5 ECF5                       	smpsPSGAlterVol     $F5
0009B7A7 9206                       	dc.b	nF1, $06
0009B7A9 EC04                       	smpsPSGAlterVol     $04
0009B7AB E701                       	dc.b	smpsNoAttack, $01
0009B7AD EC07                       	smpsPSGAlterVol     $07
0009B7AF 8003                       	dc.b	nRst, $03
0009B7B1 ECF5                       	smpsPSGAlterVol     $F5
0009B7B3 9207                       	dc.b	nF1, $07
0009B7B5 EC0B                       	smpsPSGAlterVol     $0B
0009B7B7 8007                       	dc.b	nRst, $07
0009B7B9 E104                       	smpsAlterNote       $04
0009B7BB 0101                       	dc.b	$01, $01
0009B7BD E1FB                       	smpsAlterNote       $FB
0009B7BF 01                         	dc.b	$01
0009B7C0 E1F6                       	smpsAlterNote       $F6
0009B7C2 0101                       	dc.b	$01, $01
0009B7C4 E1FF                       	smpsAlterNote       $FF
0009B7C6 01                         	dc.b	$01
0009B7C7 E105                       	smpsAlterNote       $05
0009B7C9 01                         	dc.b	$01
0009B7CA E104                       	smpsAlterNote       $04
0009B7CC 01                         	dc.b	$01
0009B7CD E1FB                       	smpsAlterNote       $FB
0009B7CF 01                         	dc.b	$01
0009B7D0 E1F5                       	smpsAlterNote       $F5
0009B7D2 01                         	dc.b	$01
0009B7D3 E1FC                       	smpsAlterNote       $FC
0009B7D5 ECF5                       	smpsPSGAlterVol     $F5
0009B7D7 8B0E                       	dc.b	nBb0, $0E
0009B7D9 E102                       	smpsAlterNote       $02
0009B7DB EC0B                       	smpsPSGAlterVol     $0B
0009B7DD 8001                       	dc.b	nRst, $01
0009B7DF E101                       	smpsAlterNote       $01
0009B7E1 01                         	dc.b	$01
0009B7E2 E1FC                       	smpsAlterNote       $FC
0009B7E4 01                         	dc.b	$01
0009B7E5 E1F9                       	smpsAlterNote       $F9
0009B7E7 0101                       	dc.b	$01, $01
0009B7E9 E1FF                       	smpsAlterNote       $FF
0009B7EB 01                         	dc.b	$01
0009B7EC E102                       	smpsAlterNote       $02
0009B7EE 01                         	dc.b	$01
0009B7EF E1FF                       	smpsAlterNote       $FF
0009B7F1 01                         	dc.b	$01
0009B7F2 E1FC                       	smpsAlterNote       $FC
0009B7F4 01                         	dc.b	$01
0009B7F5 E1F8                       	smpsAlterNote       $F8
0009B7F7 01                         	dc.b	$01
0009B7F8 E1FC                       	smpsAlterNote       $FC
0009B7FA 01                         	dc.b	$01
0009B7FB E101                       	smpsAlterNote       $01
0009B7FD 01                         	dc.b	$01
0009B7FE E102                       	smpsAlterNote       $02
0009B800 01                         	dc.b	$01
0009B801 E1FF                       	smpsAlterNote       $FF
0009B803 01                         	dc.b	$01
0009B804 E1FB                       	smpsAlterNote       $FB
0009B806 ECF5                       	smpsPSGAlterVol     $F5
0009B808 8D0D                       	dc.b	nC1, $0D
0009B80A E101                       	smpsAlterNote       $01
0009B80C EC0B                       	smpsPSGAlterVol     $0B
0009B80E 8001                       	dc.b	nRst, $01
0009B810 E102                       	smpsAlterNote       $02
0009B812 01                         	dc.b	$01
0009B813 E1FF                       	smpsAlterNote       $FF
0009B815 01                         	dc.b	$01
0009B816 E1F9                       	smpsAlterNote       $F9
0009B818 0101                       	dc.b	$01, $01
0009B81A E1FC                       	smpsAlterNote       $FC
0009B81C 01                         	dc.b	$01
0009B81D E101                       	smpsAlterNote       $01
0009B81F 0101                       	dc.b	$01, $01
0009B821 E1FC                       	smpsAlterNote       $FC
0009B823 01                         	dc.b	$01
0009B824 E1F9                       	smpsAlterNote       $F9
0009B826 0101                       	dc.b	$01, $01
0009B828 E1FF                       	smpsAlterNote       $FF
0009B82A 01                         	dc.b	$01
0009B82B E102                       	smpsAlterNote       $02
0009B82D 01                         	dc.b	$01
0009B82E E101                       	smpsAlterNote       $01
0009B830 01                         	dc.b	$01
0009B831 E1FC                       	smpsAlterNote       $FC
0009B833 ECF5                       	smpsPSGAlterVol     $F5
0009B835 8F0D                       	dc.b	nD1, $0D
0009B837 E1FF                       	smpsAlterNote       $FF
0009B839 EC04                       	smpsPSGAlterVol     $04
0009B83B E701                       	dc.b	smpsNoAttack, $01
0009B83D EC07                       	smpsPSGAlterVol     $07
0009B83F E103                       	smpsAlterNote       $03
0009B841 8001                       	dc.b	nRst, $01
0009B843 E102                       	smpsAlterNote       $02
0009B845 01                         	dc.b	$01
0009B846 E1FD                       	smpsAlterNote       $FD
0009B848 01                         	dc.b	$01
0009B849 E1F9                       	smpsAlterNote       $F9
0009B84B 01                         	dc.b	$01
0009B84C E1FD                       	smpsAlterNote       $FD
0009B84E 01                         	dc.b	$01
0009B84F E100                       	smpsAlterNote       $00
0009B851 01                         	dc.b	$01
0009B852 E103                       	smpsAlterNote       $03
0009B854 01                         	dc.b	$01
0009B855 E100                       	smpsAlterNote       $00
0009B857 01                         	dc.b	$01
0009B858 E1FA                       	smpsAlterNote       $FA
0009B85A 01                         	dc.b	$01
0009B85B E1F9                       	smpsAlterNote       $F9
0009B85D 01                         	dc.b	$01
0009B85E E1FD                       	smpsAlterNote       $FD
0009B860 01                         	dc.b	$01
0009B861 E102                       	smpsAlterNote       $02
0009B863 0101                       	dc.b	$01, $01
0009B865 E100                       	smpsAlterNote       $00
0009B867 01                         	dc.b	$01
0009B868 E1FD                       	smpsAlterNote       $FD
0009B86A ECF5                       	smpsPSGAlterVol     $F5
0009B86C 910D                       	dc.b	nE1, $0D
0009B86E E103                       	smpsAlterNote       $03
0009B870 EC0B                       	smpsPSGAlterVol     $0B
0009B872 8001 01                    	dc.b	nRst, $01, $01
0009B875 E100                       	smpsAlterNote       $00
0009B877 01                         	dc.b	$01
0009B878 E1FA                       	smpsAlterNote       $FA
0009B87A 0101                       	dc.b	$01, $01
0009B87C E100                       	smpsAlterNote       $00
0009B87E 01                         	dc.b	$01
0009B87F E103                       	smpsAlterNote       $03
0009B881 01                         	dc.b	$01
0009B882 E1FD                       	smpsAlterNote       $FD
0009B884 ECF5                       	smpsPSGAlterVol     $F5
0009B886 9206                       	dc.b	nF1, $06
0009B888 EC04                       	smpsPSGAlterVol     $04
0009B88A E701                       	dc.b	smpsNoAttack, $01
0009B88C EC07                       	smpsPSGAlterVol     $07
0009B88E 8003                       	dc.b	nRst, $03
0009B890 ECF5                       	smpsPSGAlterVol     $F5
0009B892 9207                       	dc.b	nF1, $07
0009B894 EC0B                       	smpsPSGAlterVol     $0B
0009B896 8006                       	dc.b	nRst, $06
0009B898 E100                       	smpsAlterNote       $00
0009B89A 01                         	dc.b	$01
0009B89B E103                       	smpsAlterNote       $03
0009B89D 0101                       	dc.b	$01, $01
0009B89F E1FD                       	smpsAlterNote       $FD
0009B8A1 01                         	dc.b	$01
0009B8A2 ECF5                       	smpsPSGAlterVol     $F5
0009B8A4 9407                       	dc.b	nG1, $07
0009B8A6 EC0B                       	smpsPSGAlterVol     $0B
0009B8A8 8004                       	dc.b	nRst, $04
0009B8AA ECF5                       	smpsPSGAlterVol     $F5
0009B8AC 9406                       	dc.b	nG1, $06
0009B8AE EC04                       	smpsPSGAlterVol     $04
0009B8B0 E701                       	dc.b	smpsNoAttack, $01
0009B8B2 EC07                       	smpsPSGAlterVol     $07
0009B8B4 8006                       	dc.b	nRst, $06
0009B8B6 E103                       	smpsAlterNote       $03
0009B8B8 01                         	dc.b	$01
0009B8B9 E104                       	smpsAlterNote       $04
0009B8BB 01                         	dc.b	$01
0009B8BC E100                       	smpsAlterNote       $00
0009B8BE 01                         	dc.b	$01
0009B8BF E1F9                       	smpsAlterNote       $F9
0009B8C1 01                         	dc.b	$01
0009B8C2 E1FD                       	smpsAlterNote       $FD
0009B8C4 ECF5                       	smpsPSGAlterVol     $F5
0009B8C6 9206                       	dc.b	nF1, $06
0009B8C8 EC04                       	smpsPSGAlterVol     $04
0009B8CA E701                       	dc.b	smpsNoAttack, $01
0009B8CC EC07                       	smpsPSGAlterVol     $07
0009B8CE 8003                       	dc.b	nRst, $03
0009B8D0 ECF5                       	smpsPSGAlterVol     $F5
0009B8D2 9206                       	dc.b	nF1, $06
0009B8D4 EC04                       	smpsPSGAlterVol     $04
0009B8D6 E701                       	dc.b	smpsNoAttack, $01
0009B8D8 EC07                       	smpsPSGAlterVol     $07
0009B8DA 8006                       	dc.b	nRst, $06
0009B8DC E100                       	smpsAlterNote       $00
0009B8DE 01                         	dc.b	$01
0009B8DF E104                       	smpsAlterNote       $04
0009B8E1 01                         	dc.b	$01
0009B8E2 E103                       	smpsAlterNote       $03
0009B8E4 01                         	dc.b	$01
0009B8E5 E1FD                       	smpsAlterNote       $FD
0009B8E7 01                         	dc.b	$01
0009B8E8 ECF5                       	smpsPSGAlterVol     $F5
0009B8EA 9407                       	dc.b	nG1, $07
0009B8EC EC0B                       	smpsPSGAlterVol     $0B
0009B8EE 8004                       	dc.b	nRst, $04
0009B8F0 ECF5                       	smpsPSGAlterVol     $F5
0009B8F2 9406                       	dc.b	nG1, $06
0009B8F4 EC0B                       	smpsPSGAlterVol     $0B
0009B8F6 8007                       	dc.b	nRst, $07
0009B8F8 E103                       	smpsAlterNote       $03
0009B8FA 0101                       	dc.b	$01, $01
0009B8FC E100                       	smpsAlterNote       $00
0009B8FE 01                         	dc.b	$01
0009B8FF E1F9                       	smpsAlterNote       $F9
0009B901 01                         	dc.b	$01
0009B902 E1FD                       	smpsAlterNote       $FD
0009B904 ECF5                       	smpsPSGAlterVol     $F5
0009B906 9206                       	dc.b	nF1, $06
0009B908 EC04                       	smpsPSGAlterVol     $04
0009B90A E701                       	dc.b	smpsNoAttack, $01
0009B90C EC07                       	smpsPSGAlterVol     $07
0009B90E 8003                       	dc.b	nRst, $03
0009B910 ECF5                       	smpsPSGAlterVol     $F5
0009B912 9206                       	dc.b	nF1, $06
0009B914 EC04                       	smpsPSGAlterVol     $04
0009B916 E701                       	dc.b	smpsNoAttack, $01
0009B918 EC07                       	smpsPSGAlterVol     $07
0009B91A 8006                       	dc.b	nRst, $06
0009B91C E100                       	smpsAlterNote       $00
0009B91E 01                         	dc.b	$01
0009B91F E104                       	smpsAlterNote       $04
0009B921 01                         	dc.b	$01
0009B922 E100                       	smpsAlterNote       $00
0009B924 01                         	dc.b	$01
0009B925 E1FB                       	smpsAlterNote       $FB
0009B927 01                         	dc.b	$01
0009B928 E1FD                       	smpsAlterNote       $FD
0009B92A ECF5                       	smpsPSGAlterVol     $F5
0009B92C 9406                       	dc.b	nG1, $06
0009B92E EC04                       	smpsPSGAlterVol     $04
0009B930 E701                       	dc.b	smpsNoAttack, $01
0009B932 EC07                       	smpsPSGAlterVol     $07
0009B934 8003                       	dc.b	nRst, $03
0009B936 ECF5                       	smpsPSGAlterVol     $F5
0009B938 9407                       	dc.b	nG1, $07
0009B93A EC0B                       	smpsPSGAlterVol     $0B
0009B93C 8006                       	dc.b	nRst, $06
0009B93E E100                       	smpsAlterNote       $00
0009B940 01                         	dc.b	$01
0009B941 E103                       	smpsAlterNote       $03
0009B943 0101                       	dc.b	$01, $01
0009B945 E1FD                       	smpsAlterNote       $FD
0009B947 01                         	dc.b	$01
0009B948 ECF5                       	smpsPSGAlterVol     $F5
0009B94A 9207                       	dc.b	nF1, $07
0009B94C EC0B                       	smpsPSGAlterVol     $0B
0009B94E 8004                       	dc.b	nRst, $04
0009B950 ECF5                       	smpsPSGAlterVol     $F5
0009B952 9206                       	dc.b	nF1, $06
0009B954 EC04                       	smpsPSGAlterVol     $04
0009B956 E701                       	dc.b	smpsNoAttack, $01
0009B958 ECFC                       	smpsPSGAlterVol     $FC
0009B95A E1FC                       	smpsAlterNote       $FC
0009B95C 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0009B960 EC04                       	smpsPSGAlterVol     $04
0009B962 E701                       	dc.b	smpsNoAttack, $01
0009B964 ECFC                       	smpsPSGAlterVol     $FC
0009B966 9003                       	dc.b	nEb1, $03
0009B968 E1FD                       	smpsAlterNote       $FD
0009B96A 9403                       	dc.b	nG1, $03
0009B96C EC04                       	smpsPSGAlterVol     $04
0009B96E E701                       	dc.b	smpsNoAttack, $01
0009B970 E1FE                       	smpsAlterNote       $FE
0009B972 ECFC                       	smpsPSGAlterVol     $FC
0009B974 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0009B978 EC04                       	smpsPSGAlterVol     $04
0009B97A E701                       	dc.b	smpsNoAttack, $01
0009B97C EC07                       	smpsPSGAlterVol     $07
0009B97E 8009                       	dc.b	nRst, $09
0009B980 E100                       	smpsAlterNote       $00
0009B982 01                         	dc.b	$01
0009B983 F6F5 19                    	smpsJump            music84_Jump07
0009B986                            
0009B986                            ; PSG2 Data
0009B986                            music84_PSG2:
0009B986 E1FC                       	smpsAlterNote       $FC
0009B988 EC04                       	smpsPSGAlterVol     $04
0009B98A 8F03                       	dc.b	nD1, $03
0009B98C E1FD                       	smpsAlterNote       $FD
0009B98E 9203                       	dc.b	nF1, $03
0009B990 EC04                       	smpsPSGAlterVol     $04
0009B992 E701                       	dc.b	smpsNoAttack, $01
0009B994 E1FE                       	smpsAlterNote       $FE
0009B996 ECFC                       	smpsPSGAlterVol     $FC
0009B998 9603                       	dc.b	nA1, $03
0009B99A E1FD                       	smpsAlterNote       $FD
0009B99C 9103                       	dc.b	nE1, $03
0009B99E EC04                       	smpsPSGAlterVol     $04
0009B9A0 E701                       	dc.b	smpsNoAttack, $01
0009B9A2 ECFC                       	smpsPSGAlterVol     $FC
0009B9A4 9403                       	dc.b	nG1, $03
0009B9A6 E1FE                       	smpsAlterNote       $FE
0009B9A8 9703                       	dc.b	nBb1, $03
0009B9AA EC04                       	smpsPSGAlterVol     $04
0009B9AC E701                       	dc.b	smpsNoAttack, $01
0009B9AE E1FF                       	smpsAlterNote       $FF
0009B9B0 ECFC                       	smpsPSGAlterVol     $FC
0009B9B2 9B02                       	dc.b	nD2, $02
0009B9B4 EC04                       	smpsPSGAlterVol     $04
0009B9B6 E701                       	dc.b	smpsNoAttack, $01
0009B9B8 ECFC                       	smpsPSGAlterVol     $FC
0009B9BA E1FE                       	smpsAlterNote       $FE
0009B9BC 9A03                       	dc.b	nCs2, $03
0009B9BE EC0B                       	smpsPSGAlterVol     $0B
0009B9C0 800A                       	dc.b	nRst, $0A
0009B9C2 E102                       	smpsAlterNote       $02
0009B9C4 01                         	dc.b	$01
0009B9C5 E10A                       	smpsAlterNote       $0A
0009B9C7 01                         	dc.b	$01
0009B9C8 E102                       	smpsAlterNote       $02
0009B9CA 01                         	dc.b	$01
0009B9CB E1FC                       	smpsAlterNote       $FC
0009B9CD 01                         	dc.b	$01
0009B9CE E10A                       	smpsAlterNote       $0A
0009B9D0 01                         	dc.b	$01
0009B9D1 E1FC                       	smpsAlterNote       $FC
0009B9D3 01                         	dc.b	$01
0009B9D4 E108                       	smpsAlterNote       $08
0009B9D6 01                         	dc.b	$01
0009B9D7 E10A                       	smpsAlterNote       $0A
0009B9D9 01                         	dc.b	$01
0009B9DA E102                       	smpsAlterNote       $02
0009B9DC 01                         	dc.b	$01
0009B9DD E1F7                       	smpsAlterNote       $F7
0009B9DF 0101                       	dc.b	$01, $01
0009B9E1 E102                       	smpsAlterNote       $02
0009B9E3 01                         	dc.b	$01
0009B9E4 E108                       	smpsAlterNote       $08
0009B9E6 0101                       	dc.b	$01, $01
0009B9E8 E1FC                       	smpsAlterNote       $FC
0009B9EA 01                         	dc.b	$01
0009B9EB E10A                       	smpsAlterNote       $0A
0009B9ED 01                         	dc.b	$01
0009B9EE E1F7                       	smpsAlterNote       $F7
0009B9F0 01                         	dc.b	$01
0009B9F1 E102                       	smpsAlterNote       $02
0009B9F3 01                         	dc.b	$01
0009B9F4 E10A                       	smpsAlterNote       $0A
0009B9F6 01                         	dc.b	$01
0009B9F7 E102                       	smpsAlterNote       $02
0009B9F9 01                         	dc.b	$01
0009B9FA E1FC                       	smpsAlterNote       $FC
0009B9FC 01                         	dc.b	$01
0009B9FD                            
0009B9FD                            music84_Jump06:
0009B9FD E10A                       	smpsAlterNote       $0A
0009B9FF 8001                       	dc.b	nRst, $01
0009BA01 E1FC                       	smpsAlterNote       $FC
0009BA03 01                         	dc.b	$01
0009BA04 E108                       	smpsAlterNote       $08
0009BA06 01                         	dc.b	$01
0009BA07 E10A                       	smpsAlterNote       $0A
0009BA09 01                         	dc.b	$01
0009BA0A E1FC                       	smpsAlterNote       $FC
0009BA0C ECF5                       	smpsPSGAlterVol     $F5
0009BA0E 8F06                       	dc.b	nD1, $06
0009BA10 EC04                       	smpsPSGAlterVol     $04
0009BA12 E701                       	dc.b	smpsNoAttack, $01
0009BA14 EC07                       	smpsPSGAlterVol     $07
0009BA16 8003                       	dc.b	nRst, $03
0009BA18 ECF5                       	smpsPSGAlterVol     $F5
0009BA1A 8F06                       	dc.b	nD1, $06
0009BA1C EC04                       	smpsPSGAlterVol     $04
0009BA1E E701                       	dc.b	smpsNoAttack, $01
0009BA20 EC07                       	smpsPSGAlterVol     $07
0009BA22 8006                       	dc.b	nRst, $06
0009BA24 E1FF                       	smpsAlterNote       $FF
0009BA26 01                         	dc.b	$01
0009BA27 E102                       	smpsAlterNote       $02
0009BA29 01                         	dc.b	$01
0009BA2A E1FF                       	smpsAlterNote       $FF
0009BA2C 01                         	dc.b	$01
0009BA2D E1F9                       	smpsAlterNote       $F9
0009BA2F 01                         	dc.b	$01
0009BA30 E1FC                       	smpsAlterNote       $FC
0009BA32 ECF5                       	smpsPSGAlterVol     $F5
0009BA34 9006                       	dc.b	nEb1, $06
0009BA36 EC04                       	smpsPSGAlterVol     $04
0009BA38 E701                       	dc.b	smpsNoAttack, $01
0009BA3A EC07                       	smpsPSGAlterVol     $07
0009BA3C 8003                       	dc.b	nRst, $03
0009BA3E ECF5                       	smpsPSGAlterVol     $F5
0009BA40 9007                       	dc.b	nEb1, $07
0009BA42 EC0B                       	smpsPSGAlterVol     $0B
0009BA44 8006                       	dc.b	nRst, $06
0009BA46 E1FF                       	smpsAlterNote       $FF
0009BA48 01                         	dc.b	$01
0009BA49 E103                       	smpsAlterNote       $03
0009BA4B 0101                       	dc.b	$01, $01
0009BA4D E1FC                       	smpsAlterNote       $FC
0009BA4F 01                         	dc.b	$01
0009BA50 ECF5                       	smpsPSGAlterVol     $F5
0009BA52 8F07                       	dc.b	nD1, $07
0009BA54 EC0B                       	smpsPSGAlterVol     $0B
0009BA56 8004                       	dc.b	nRst, $04
0009BA58 ECF5                       	smpsPSGAlterVol     $F5
0009BA5A 8F06                       	dc.b	nD1, $06
0009BA5C EC04                       	smpsPSGAlterVol     $04
0009BA5E E701                       	dc.b	smpsNoAttack, $01
0009BA60 EC07                       	smpsPSGAlterVol     $07
0009BA62 8006                       	dc.b	nRst, $06
0009BA64 E102                       	smpsAlterNote       $02
0009BA66 01                         	dc.b	$01
0009BA67 E103                       	smpsAlterNote       $03
0009BA69 01                         	dc.b	$01
0009BA6A E1FF                       	smpsAlterNote       $FF
0009BA6C 01                         	dc.b	$01
0009BA6D E1F9                       	smpsAlterNote       $F9
0009BA6F 01                         	dc.b	$01
0009BA70 E1FC                       	smpsAlterNote       $FC
0009BA72 ECF5                       	smpsPSGAlterVol     $F5
0009BA74 8F06                       	dc.b	nD1, $06
0009BA76 EC04                       	smpsPSGAlterVol     $04
0009BA78 E701                       	dc.b	smpsNoAttack, $01
0009BA7A EC07                       	smpsPSGAlterVol     $07
0009BA7C 8003                       	dc.b	nRst, $03
0009BA7E ECF5                       	smpsPSGAlterVol     $F5
0009BA80 8F06                       	dc.b	nD1, $06
0009BA82 EC04                       	smpsPSGAlterVol     $04
0009BA84 E701                       	dc.b	smpsNoAttack, $01
0009BA86 EC07                       	smpsPSGAlterVol     $07
0009BA88 8006                       	dc.b	nRst, $06
0009BA8A E1FF                       	smpsAlterNote       $FF
0009BA8C 01                         	dc.b	$01
0009BA8D E103                       	smpsAlterNote       $03
0009BA8F 01                         	dc.b	$01
0009BA90 E1FF                       	smpsAlterNote       $FF
0009BA92 01                         	dc.b	$01
0009BA93 E1FC                       	smpsAlterNote       $FC
0009BA95 01                         	dc.b	$01
0009BA96 ECF5                       	smpsPSGAlterVol     $F5
0009BA98 8F06                       	dc.b	nD1, $06
0009BA9A EC04                       	smpsPSGAlterVol     $04
0009BA9C E701                       	dc.b	smpsNoAttack, $01
0009BA9E EC07                       	smpsPSGAlterVol     $07
0009BAA0 8003                       	dc.b	nRst, $03
0009BAA2 ECF5                       	smpsPSGAlterVol     $F5
0009BAA4 8F07                       	dc.b	nD1, $07
0009BAA6 EC0B                       	smpsPSGAlterVol     $0B
0009BAA8 8007                       	dc.b	nRst, $07
0009BAAA E101                       	smpsAlterNote       $01
0009BAAC 0101                       	dc.b	$01, $01
0009BAAE E1FC                       	smpsAlterNote       $FC
0009BAB0 01                         	dc.b	$01
0009BAB1 E1F9                       	smpsAlterNote       $F9
0009BAB3 01                         	dc.b	$01
0009BAB4 E1FC                       	smpsAlterNote       $FC
0009BAB6 ECF5                       	smpsPSGAlterVol     $F5
0009BAB8 9006                       	dc.b	nEb1, $06
0009BABA EC0B                       	smpsPSGAlterVol     $0B
0009BABC 8004                       	dc.b	nRst, $04
0009BABE ECF5                       	smpsPSGAlterVol     $F5
0009BAC0 9006                       	dc.b	nEb1, $06
0009BAC2 EC04                       	smpsPSGAlterVol     $04
0009BAC4 E701                       	dc.b	smpsNoAttack, $01
0009BAC6 EC07                       	smpsPSGAlterVol     $07
0009BAC8 8006                       	dc.b	nRst, $06
0009BACA E100                       	smpsAlterNote       $00
0009BACC 01                         	dc.b	$01
0009BACD E102                       	smpsAlterNote       $02
0009BACF 01                         	dc.b	$01
0009BAD0 E100                       	smpsAlterNote       $00
0009BAD2 01                         	dc.b	$01
0009BAD3 E1FD                       	smpsAlterNote       $FD
0009BAD5 01                         	dc.b	$01
0009BAD6 E1FF                       	smpsAlterNote       $FF
0009BAD8 ECF5                       	smpsPSGAlterVol     $F5
0009BADA 9B06                       	dc.b	nD2, $06
0009BADC EC04                       	smpsPSGAlterVol     $04
0009BADE E701                       	dc.b	smpsNoAttack, $01
0009BAE0 EC07                       	smpsPSGAlterVol     $07
0009BAE2 8003                       	dc.b	nRst, $03
0009BAE4 ECF5                       	smpsPSGAlterVol     $F5
0009BAE6 9B07                       	dc.b	nD2, $07
0009BAE8 EC0B                       	smpsPSGAlterVol     $0B
0009BAEA 8006                       	dc.b	nRst, $06
0009BAEC E102                       	smpsAlterNote       $02
0009BAEE 01                         	dc.b	$01
0009BAEF E106                       	smpsAlterNote       $06
0009BAF1 01                         	dc.b	$01
0009BAF2 E105                       	smpsAlterNote       $05
0009BAF4 01                         	dc.b	$01
0009BAF5 E1FF                       	smpsAlterNote       $FF
0009BAF7 01                         	dc.b	$01
0009BAF8 ECF5                       	smpsPSGAlterVol     $F5
0009BAFA 9B07                       	dc.b	nD2, $07
0009BAFC EC0B                       	smpsPSGAlterVol     $0B
0009BAFE 8004                       	dc.b	nRst, $04
0009BB00 ECF5                       	smpsPSGAlterVol     $F5
0009BB02 9B06                       	dc.b	nD2, $06
0009BB04 EC0B                       	smpsPSGAlterVol     $0B
0009BB06 8007                       	dc.b	nRst, $07
0009BB08 E105                       	smpsAlterNote       $05
0009BB0A 0101                       	dc.b	$01, $01
0009BB0C E102                       	smpsAlterNote       $02
0009BB0E 01                         	dc.b	$01
0009BB0F E1FC                       	smpsAlterNote       $FC
0009BB11 01                         	dc.b	$01
0009BB12 E1FF                       	smpsAlterNote       $FF
0009BB14 ECF5                       	smpsPSGAlterVol     $F5
0009BB16 9B06                       	dc.b	nD2, $06
0009BB18 EC04                       	smpsPSGAlterVol     $04
0009BB1A E701                       	dc.b	smpsNoAttack, $01
0009BB1C EC07                       	smpsPSGAlterVol     $07
0009BB1E 8003                       	dc.b	nRst, $03
0009BB20 ECF5                       	smpsPSGAlterVol     $F5
0009BB22 9B06                       	dc.b	nD2, $06
0009BB24 EC04                       	smpsPSGAlterVol     $04
0009BB26 E701                       	dc.b	smpsNoAttack, $01
0009BB28 EC07                       	smpsPSGAlterVol     $07
0009BB2A 8006                       	dc.b	nRst, $06
0009BB2C E102                       	smpsAlterNote       $02
0009BB2E 01                         	dc.b	$01
0009BB2F E106                       	smpsAlterNote       $06
0009BB31 01                         	dc.b	$01
0009BB32 E102                       	smpsAlterNote       $02
0009BB34 01                         	dc.b	$01
0009BB35 E1FF                       	smpsAlterNote       $FF
0009BB37 01                         	dc.b	$01
0009BB38 ECF5                       	smpsPSGAlterVol     $F5
0009BB3A 9B06                       	dc.b	nD2, $06
0009BB3C EC04                       	smpsPSGAlterVol     $04
0009BB3E E701                       	dc.b	smpsNoAttack, $01
0009BB40 EC07                       	smpsPSGAlterVol     $07
0009BB42 8003                       	dc.b	nRst, $03
0009BB44 ECF5                       	smpsPSGAlterVol     $F5
0009BB46 9B07                       	dc.b	nD2, $07
0009BB48 EC0B                       	smpsPSGAlterVol     $0B
0009BB4A 8007                       	dc.b	nRst, $07
0009BB4C E105                       	smpsAlterNote       $05
0009BB4E 0101                       	dc.b	$01, $01
0009BB50 E1FF                       	smpsAlterNote       $FF
0009BB52 01                         	dc.b	$01
0009BB53 E1FC                       	smpsAlterNote       $FC
0009BB55 01                         	dc.b	$01
0009BB56 E1FF                       	smpsAlterNote       $FF
0009BB58 ECF5                       	smpsPSGAlterVol     $F5
0009BB5A 9B06                       	dc.b	nD2, $06
0009BB5C EC0B                       	smpsPSGAlterVol     $0B
0009BB5E 8004                       	dc.b	nRst, $04
0009BB60 ECF5                       	smpsPSGAlterVol     $F5
0009BB62 9B06                       	dc.b	nD2, $06
0009BB64 EC04                       	smpsPSGAlterVol     $04
0009BB66 E701                       	dc.b	smpsNoAttack, $01
0009BB68 EC07                       	smpsPSGAlterVol     $07
0009BB6A 8006                       	dc.b	nRst, $06
0009BB6C E105                       	smpsAlterNote       $05
0009BB6E 01                         	dc.b	$01
0009BB6F E106                       	smpsAlterNote       $06
0009BB71 01                         	dc.b	$01
0009BB72 E102                       	smpsAlterNote       $02
0009BB74 01                         	dc.b	$01
0009BB75 E1FC                       	smpsAlterNote       $FC
0009BB77 01                         	dc.b	$01
0009BB78 E1FF                       	smpsAlterNote       $FF
0009BB7A ECF5                       	smpsPSGAlterVol     $F5
0009BB7C 9B06                       	dc.b	nD2, $06
0009BB7E EC04                       	smpsPSGAlterVol     $04
0009BB80 E701                       	dc.b	smpsNoAttack, $01
0009BB82 EC07                       	smpsPSGAlterVol     $07
0009BB84 8003                       	dc.b	nRst, $03
0009BB86 ECF5                       	smpsPSGAlterVol     $F5
0009BB88 9B06                       	dc.b	nD2, $06
0009BB8A EC04                       	smpsPSGAlterVol     $04
0009BB8C E701                       	dc.b	smpsNoAttack, $01
0009BB8E EC07                       	smpsPSGAlterVol     $07
0009BB90 8006                       	dc.b	nRst, $06
0009BB92 E102                       	smpsAlterNote       $02
0009BB94 01                         	dc.b	$01
0009BB95 E106                       	smpsAlterNote       $06
0009BB97 01                         	dc.b	$01
0009BB98 E105                       	smpsAlterNote       $05
0009BB9A 01                         	dc.b	$01
0009BB9B E1FF                       	smpsAlterNote       $FF
0009BB9D 01                         	dc.b	$01
0009BB9E ECF5                       	smpsPSGAlterVol     $F5
0009BBA0 9B07                       	dc.b	nD2, $07
0009BBA2 EC0B                       	smpsPSGAlterVol     $0B
0009BBA4 8004                       	dc.b	nRst, $04
0009BBA6 ECF5                       	smpsPSGAlterVol     $F5
0009BBA8 9B06                       	dc.b	nD2, $06
0009BBAA EC0B                       	smpsPSGAlterVol     $0B
0009BBAC 8007                       	dc.b	nRst, $07
0009BBAE E105                       	smpsAlterNote       $05
0009BBB0 0101                       	dc.b	$01, $01
0009BBB2 E102                       	smpsAlterNote       $02
0009BBB4 01                         	dc.b	$01
0009BBB5 E1FC                       	smpsAlterNote       $FC
0009BBB7 01                         	dc.b	$01
0009BBB8 E1FF                       	smpsAlterNote       $FF
0009BBBA ECF5                       	smpsPSGAlterVol     $F5
0009BBBC 9B06                       	dc.b	nD2, $06
0009BBBE EC04                       	smpsPSGAlterVol     $04
0009BBC0 E701                       	dc.b	smpsNoAttack, $01
0009BBC2 EC07                       	smpsPSGAlterVol     $07
0009BBC4 8003                       	dc.b	nRst, $03
0009BBC6 ECF5                       	smpsPSGAlterVol     $F5
0009BBC8 9B06                       	dc.b	nD2, $06
0009BBCA EC04                       	smpsPSGAlterVol     $04
0009BBCC E701                       	dc.b	smpsNoAttack, $01
0009BBCE EC07                       	smpsPSGAlterVol     $07
0009BBD0 8006                       	dc.b	nRst, $06
0009BBD2 E102                       	smpsAlterNote       $02
0009BBD4 01                         	dc.b	$01
0009BBD5 E106                       	smpsAlterNote       $06
0009BBD7 01                         	dc.b	$01
0009BBD8 E102                       	smpsAlterNote       $02
0009BBDA 01                         	dc.b	$01
0009BBDB E1FF                       	smpsAlterNote       $FF
0009BBDD 01                         	dc.b	$01
0009BBDE ECF5                       	smpsPSGAlterVol     $F5
0009BBE0 9B06                       	dc.b	nD2, $06
0009BBE2 EC04                       	smpsPSGAlterVol     $04
0009BBE4 E701                       	dc.b	smpsNoAttack, $01
0009BBE6 EC07                       	smpsPSGAlterVol     $07
0009BBE8 8003                       	dc.b	nRst, $03
0009BBEA ECF5                       	smpsPSGAlterVol     $F5
0009BBEC 9B07                       	dc.b	nD2, $07
0009BBEE E1FE                       	smpsAlterNote       $FE
0009BBF0 9706                       	dc.b	nBb1, $06
0009BBF2 EC04                       	smpsPSGAlterVol     $04
0009BBF4 E701                       	dc.b	smpsNoAttack, $01
0009BBF6 ECFC                       	smpsPSGAlterVol     $FC
0009BBF8 9703                       	dc.b	nBb1, $03
0009BBFA EC04                       	smpsPSGAlterVol     $04
0009BBFC E701                       	dc.b	smpsNoAttack, $01
0009BBFE ECFC                       	smpsPSGAlterVol     $FC
0009BC00 9702                       	dc.b	nBb1, $02
0009BC02 EC04                       	smpsPSGAlterVol     $04
0009BC04 E701                       	dc.b	smpsNoAttack, $01
0009BC06 ECFC                       	smpsPSGAlterVol     $FC
0009BC08 9606                       	dc.b	nA1, $06
0009BC0A EC04                       	smpsPSGAlterVol     $04
0009BC0C E701                       	dc.b	smpsNoAttack, $01
0009BC0E EC07                       	smpsPSGAlterVol     $07
0009BC10 8006                       	dc.b	nRst, $06
0009BC12 E101                       	smpsAlterNote       $01
0009BC14 01                         	dc.b	$01
0009BC15 E107                       	smpsAlterNote       $07
0009BC17 01                         	dc.b	$01
0009BC18 E101                       	smpsAlterNote       $01
0009BC1A 01                         	dc.b	$01
0009BC1B E1F8                       	smpsAlterNote       $F8
0009BC1D 01                         	dc.b	$01
0009BC1E E1F7                       	smpsAlterNote       $F7
0009BC20 01                         	dc.b	$01
0009BC21 E1FC                       	smpsAlterNote       $FC
0009BC23 01                         	dc.b	$01
0009BC24 E106                       	smpsAlterNote       $06
0009BC26 01                         	dc.b	$01
0009BC27 E107                       	smpsAlterNote       $07
0009BC29 01                         	dc.b	$01
0009BC2A E101                       	smpsAlterNote       $01
0009BC2C 01                         	dc.b	$01
0009BC2D E1F8                       	smpsAlterNote       $F8
0009BC2F 0101                       	dc.b	$01, $01
0009BC31 E1FC                       	smpsAlterNote       $FC
0009BC33 ECF5                       	smpsPSGAlterVol     $F5
0009BC35 8F06                       	dc.b	nD1, $06
0009BC37 EC04                       	smpsPSGAlterVol     $04
0009BC39 E701                       	dc.b	smpsNoAttack, $01
0009BC3B EC07                       	smpsPSGAlterVol     $07
0009BC3D 8003                       	dc.b	nRst, $03
0009BC3F ECF5                       	smpsPSGAlterVol     $F5
0009BC41 8F06                       	dc.b	nD1, $06
0009BC43 EC04                       	smpsPSGAlterVol     $04
0009BC45 E701                       	dc.b	smpsNoAttack, $01
0009BC47 EC07                       	smpsPSGAlterVol     $07
0009BC49 8006                       	dc.b	nRst, $06
0009BC4B E1FF                       	smpsAlterNote       $FF
0009BC4D 01                         	dc.b	$01
0009BC4E E102                       	smpsAlterNote       $02
0009BC50 01                         	dc.b	$01
0009BC51 E101                       	smpsAlterNote       $01
0009BC53 01                         	dc.b	$01
0009BC54 E1FC                       	smpsAlterNote       $FC
0009BC56 01                         	dc.b	$01
0009BC57 ECF5                       	smpsPSGAlterVol     $F5
0009BC59 9007                       	dc.b	nEb1, $07
0009BC5B EC0B                       	smpsPSGAlterVol     $0B
0009BC5D 8004                       	dc.b	nRst, $04
0009BC5F ECF5                       	smpsPSGAlterVol     $F5
0009BC61 9006                       	dc.b	nEb1, $06
0009BC63 EC0B                       	smpsPSGAlterVol     $0B
0009BC65 8007                       	dc.b	nRst, $07
0009BC67 E103                       	smpsAlterNote       $03
0009BC69 0101                       	dc.b	$01, $01
0009BC6B E1FC                       	smpsAlterNote       $FC
0009BC6D 01                         	dc.b	$01
0009BC6E E1F9                       	smpsAlterNote       $F9
0009BC70 01                         	dc.b	$01
0009BC71 E1FC                       	smpsAlterNote       $FC
0009BC73 ECF5                       	smpsPSGAlterVol     $F5
0009BC75 8F06                       	dc.b	nD1, $06
0009BC77 EC04                       	smpsPSGAlterVol     $04
0009BC79 E701                       	dc.b	smpsNoAttack, $01
0009BC7B EC07                       	smpsPSGAlterVol     $07
0009BC7D 8003                       	dc.b	nRst, $03
0009BC7F ECF5                       	smpsPSGAlterVol     $F5
0009BC81 8F06                       	dc.b	nD1, $06
0009BC83 EC04                       	smpsPSGAlterVol     $04
0009BC85 E701                       	dc.b	smpsNoAttack, $01
0009BC87 EC07                       	smpsPSGAlterVol     $07
0009BC89 8006                       	dc.b	nRst, $06
0009BC8B E1FF                       	smpsAlterNote       $FF
0009BC8D 01                         	dc.b	$01
0009BC8E E103                       	smpsAlterNote       $03
0009BC90 01                         	dc.b	$01
0009BC91 E1FF                       	smpsAlterNote       $FF
0009BC93 01                         	dc.b	$01
0009BC94 E1F9                       	smpsAlterNote       $F9
0009BC96 01                         	dc.b	$01
0009BC97 E1FC                       	smpsAlterNote       $FC
0009BC99 ECF5                       	smpsPSGAlterVol     $F5
0009BC9B 8F06                       	dc.b	nD1, $06
0009BC9D EC04                       	smpsPSGAlterVol     $04
0009BC9F E701                       	dc.b	smpsNoAttack, $01
0009BCA1 EC07                       	smpsPSGAlterVol     $07
0009BCA3 8003                       	dc.b	nRst, $03
0009BCA5 ECF5                       	smpsPSGAlterVol     $F5
0009BCA7 8F07                       	dc.b	nD1, $07
0009BCA9 EC0B                       	smpsPSGAlterVol     $0B
0009BCAB 8006                       	dc.b	nRst, $06
0009BCAD E1FF                       	smpsAlterNote       $FF
0009BCAF 01                         	dc.b	$01
0009BCB0 E102                       	smpsAlterNote       $02
0009BCB2 0101                       	dc.b	$01, $01
0009BCB4 E1FC                       	smpsAlterNote       $FC
0009BCB6 01                         	dc.b	$01
0009BCB7 ECF5                       	smpsPSGAlterVol     $F5
0009BCB9 8F07                       	dc.b	nD1, $07
0009BCBB EC0B                       	smpsPSGAlterVol     $0B
0009BCBD 8004                       	dc.b	nRst, $04
0009BCBF ECF5                       	smpsPSGAlterVol     $F5
0009BCC1 8F06                       	dc.b	nD1, $06
0009BCC3 EC04                       	smpsPSGAlterVol     $04
0009BCC5 E701                       	dc.b	smpsNoAttack, $01
0009BCC7 EC07                       	smpsPSGAlterVol     $07
0009BCC9 8006                       	dc.b	nRst, $06
0009BCCB E101                       	smpsAlterNote       $01
0009BCCD 01                         	dc.b	$01
0009BCCE E102                       	smpsAlterNote       $02
0009BCD0 01                         	dc.b	$01
0009BCD1 E1FF                       	smpsAlterNote       $FF
0009BCD3 01                         	dc.b	$01
0009BCD4 E1F9                       	smpsAlterNote       $F9
0009BCD6 01                         	dc.b	$01
0009BCD7 E1FC                       	smpsAlterNote       $FC
0009BCD9 ECF5                       	smpsPSGAlterVol     $F5
0009BCDB 9006                       	dc.b	nEb1, $06
0009BCDD EC04                       	smpsPSGAlterVol     $04
0009BCDF E701                       	dc.b	smpsNoAttack, $01
0009BCE1 EC07                       	smpsPSGAlterVol     $07
0009BCE3 8003                       	dc.b	nRst, $03
0009BCE5 ECF5                       	smpsPSGAlterVol     $F5
0009BCE7 9006                       	dc.b	nEb1, $06
0009BCE9 EC04                       	smpsPSGAlterVol     $04
0009BCEB E701                       	dc.b	smpsNoAttack, $01
0009BCED EC07                       	smpsPSGAlterVol     $07
0009BCEF 8006                       	dc.b	nRst, $06
0009BCF1 E100                       	smpsAlterNote       $00
0009BCF3 01                         	dc.b	$01
0009BCF4 E102                       	smpsAlterNote       $02
0009BCF6 01                         	dc.b	$01
0009BCF7 E100                       	smpsAlterNote       $00
0009BCF9 01                         	dc.b	$01
0009BCFA E1FF                       	smpsAlterNote       $FF
0009BCFC 01                         	dc.b	$01
0009BCFD ECF5                       	smpsPSGAlterVol     $F5
0009BCFF 9B06                       	dc.b	nD2, $06
0009BD01 EC04                       	smpsPSGAlterVol     $04
0009BD03 E701                       	dc.b	smpsNoAttack, $01
0009BD05 EC07                       	smpsPSGAlterVol     $07
0009BD07 8003                       	dc.b	nRst, $03
0009BD09 ECF5                       	smpsPSGAlterVol     $F5
0009BD0B 9B07                       	dc.b	nD2, $07
0009BD0D EC0B                       	smpsPSGAlterVol     $0B
0009BD0F 8007                       	dc.b	nRst, $07
0009BD11 E105                       	smpsAlterNote       $05
0009BD13 0101                       	dc.b	$01, $01
0009BD15 E1FF                       	smpsAlterNote       $FF
0009BD17 01                         	dc.b	$01
0009BD18 E1FC                       	smpsAlterNote       $FC
0009BD1A 01                         	dc.b	$01
0009BD1B E1FF                       	smpsAlterNote       $FF
0009BD1D ECF5                       	smpsPSGAlterVol     $F5
0009BD1F 9B06                       	dc.b	nD2, $06
0009BD21 EC0B                       	smpsPSGAlterVol     $0B
0009BD23 8004                       	dc.b	nRst, $04
0009BD25 ECF5                       	smpsPSGAlterVol     $F5
0009BD27 9B06                       	dc.b	nD2, $06
0009BD29 EC04                       	smpsPSGAlterVol     $04
0009BD2B E701                       	dc.b	smpsNoAttack, $01
0009BD2D EC07                       	smpsPSGAlterVol     $07
0009BD2F 8006                       	dc.b	nRst, $06
0009BD31 E102                       	smpsAlterNote       $02
0009BD33 01                         	dc.b	$01
0009BD34 E106                       	smpsAlterNote       $06
0009BD36 01                         	dc.b	$01
0009BD37 E102                       	smpsAlterNote       $02
0009BD39 01                         	dc.b	$01
0009BD3A E1FC                       	smpsAlterNote       $FC
0009BD3C 01                         	dc.b	$01
0009BD3D E1FF                       	smpsAlterNote       $FF
0009BD3F ECF5                       	smpsPSGAlterVol     $F5
0009BD41 9B06                       	dc.b	nD2, $06
0009BD43 EC04                       	smpsPSGAlterVol     $04
0009BD45 E701                       	dc.b	smpsNoAttack, $01
0009BD47 EC07                       	smpsPSGAlterVol     $07
0009BD49 8003                       	dc.b	nRst, $03
0009BD4B ECF5                       	smpsPSGAlterVol     $F5
0009BD4D 9B07                       	dc.b	nD2, $07
0009BD4F EC0B                       	smpsPSGAlterVol     $0B
0009BD51 8006                       	dc.b	nRst, $06
0009BD53 E102                       	smpsAlterNote       $02
0009BD55 01                         	dc.b	$01
0009BD56 E105                       	smpsAlterNote       $05
0009BD58 0101                       	dc.b	$01, $01
0009BD5A E1FF                       	smpsAlterNote       $FF
0009BD5C 01                         	dc.b	$01
0009BD5D ECF5                       	smpsPSGAlterVol     $F5
0009BD5F 9B07                       	dc.b	nD2, $07
0009BD61 EC0B                       	smpsPSGAlterVol     $0B
0009BD63 8004                       	dc.b	nRst, $04
0009BD65 ECF5                       	smpsPSGAlterVol     $F5
0009BD67 9B06                       	dc.b	nD2, $06
0009BD69 EC0B                       	smpsPSGAlterVol     $0B
0009BD6B 8007                       	dc.b	nRst, $07
0009BD6D E105                       	smpsAlterNote       $05
0009BD6F 0101                       	dc.b	$01, $01
0009BD71 E102                       	smpsAlterNote       $02
0009BD73 01                         	dc.b	$01
0009BD74 E1FC                       	smpsAlterNote       $FC
0009BD76 01                         	dc.b	$01
0009BD77 E1FF                       	smpsAlterNote       $FF
0009BD79 ECF5                       	smpsPSGAlterVol     $F5
0009BD7B 9B06                       	dc.b	nD2, $06
0009BD7D EC04                       	smpsPSGAlterVol     $04
0009BD7F E701                       	dc.b	smpsNoAttack, $01
0009BD81 EC07                       	smpsPSGAlterVol     $07
0009BD83 8003                       	dc.b	nRst, $03
0009BD85 ECF5                       	smpsPSGAlterVol     $F5
0009BD87 9B06                       	dc.b	nD2, $06
0009BD89 EC04                       	smpsPSGAlterVol     $04
0009BD8B E701                       	dc.b	smpsNoAttack, $01
0009BD8D EC07                       	smpsPSGAlterVol     $07
0009BD8F 8006                       	dc.b	nRst, $06
0009BD91 E102                       	smpsAlterNote       $02
0009BD93 01                         	dc.b	$01
0009BD94 E106                       	smpsAlterNote       $06
0009BD96 01                         	dc.b	$01
0009BD97 E102                       	smpsAlterNote       $02
0009BD99 01                         	dc.b	$01
0009BD9A E1FF                       	smpsAlterNote       $FF
0009BD9C 01                         	dc.b	$01
0009BD9D ECF5                       	smpsPSGAlterVol     $F5
0009BD9F 9B06                       	dc.b	nD2, $06
0009BDA1 EC04                       	smpsPSGAlterVol     $04
0009BDA3 E701                       	dc.b	smpsNoAttack, $01
0009BDA5 EC07                       	smpsPSGAlterVol     $07
0009BDA7 8003                       	dc.b	nRst, $03
0009BDA9 ECF5                       	smpsPSGAlterVol     $F5
0009BDAB 9B07                       	dc.b	nD2, $07
0009BDAD EC0B                       	smpsPSGAlterVol     $0B
0009BDAF 8007                       	dc.b	nRst, $07
0009BDB1 E105                       	smpsAlterNote       $05
0009BDB3 0101                       	dc.b	$01, $01
0009BDB5 E1FF                       	smpsAlterNote       $FF
0009BDB7 01                         	dc.b	$01
0009BDB8 E1FC                       	smpsAlterNote       $FC
0009BDBA 01                         	dc.b	$01
0009BDBB E1FF                       	smpsAlterNote       $FF
0009BDBD ECF5                       	smpsPSGAlterVol     $F5
0009BDBF 9B06                       	dc.b	nD2, $06
0009BDC1 EC0B                       	smpsPSGAlterVol     $0B
0009BDC3 8004                       	dc.b	nRst, $04
0009BDC5 ECF5                       	smpsPSGAlterVol     $F5
0009BDC7 9B06                       	dc.b	nD2, $06
0009BDC9 EC04                       	smpsPSGAlterVol     $04
0009BDCB E701                       	dc.b	smpsNoAttack, $01
0009BDCD EC07                       	smpsPSGAlterVol     $07
0009BDCF 8006                       	dc.b	nRst, $06
0009BDD1 E102                       	smpsAlterNote       $02
0009BDD3 01                         	dc.b	$01
0009BDD4 E106                       	smpsAlterNote       $06
0009BDD6 01                         	dc.b	$01
0009BDD7 E102                       	smpsAlterNote       $02
0009BDD9 01                         	dc.b	$01
0009BDDA E1FC                       	smpsAlterNote       $FC
0009BDDC 01                         	dc.b	$01
0009BDDD E1FF                       	smpsAlterNote       $FF
0009BDDF ECF5                       	smpsPSGAlterVol     $F5
0009BDE1 9B06                       	dc.b	nD2, $06
0009BDE3 EC04                       	smpsPSGAlterVol     $04
0009BDE5 E701                       	dc.b	smpsNoAttack, $01
0009BDE7 EC07                       	smpsPSGAlterVol     $07
0009BDE9 8003                       	dc.b	nRst, $03
0009BDEB ECF5                       	smpsPSGAlterVol     $F5
0009BDED 9B06                       	dc.b	nD2, $06
0009BDEF EC04                       	smpsPSGAlterVol     $04
0009BDF1 E701                       	dc.b	smpsNoAttack, $01
0009BDF3 EC07                       	smpsPSGAlterVol     $07
0009BDF5 8006                       	dc.b	nRst, $06
0009BDF7 E102                       	smpsAlterNote       $02
0009BDF9 01                         	dc.b	$01
0009BDFA E106                       	smpsAlterNote       $06
0009BDFC 01                         	dc.b	$01
0009BDFD E105                       	smpsAlterNote       $05
0009BDFF 01                         	dc.b	$01
0009BE00 E1FF                       	smpsAlterNote       $FF
0009BE02 01                         	dc.b	$01
0009BE03 ECF5                       	smpsPSGAlterVol     $F5
0009BE05 9B07                       	dc.b	nD2, $07
0009BE07 EC0B                       	smpsPSGAlterVol     $0B
0009BE09 8004                       	dc.b	nRst, $04
0009BE0B ECF5                       	smpsPSGAlterVol     $F5
0009BE0D 9B06                       	dc.b	nD2, $06
0009BE0F EC0B                       	smpsPSGAlterVol     $0B
0009BE11 8007                       	dc.b	nRst, $07
0009BE13 E105                       	smpsAlterNote       $05
0009BE15 0101                       	dc.b	$01, $01
0009BE17 E101                       	smpsAlterNote       $01
0009BE19 01                         	dc.b	$01
0009BE1A E1FB                       	smpsAlterNote       $FB
0009BE1C 01                         	dc.b	$01
0009BE1D E1FE                       	smpsAlterNote       $FE
0009BE1F ECF5                       	smpsPSGAlterVol     $F5
0009BE21 9A06                       	dc.b	nCs2, $06
0009BE23 EC04                       	smpsPSGAlterVol     $04
0009BE25 E701                       	dc.b	smpsNoAttack, $01
0009BE27 EC07                       	smpsPSGAlterVol     $07
0009BE29 8003                       	dc.b	nRst, $03
0009BE2B ECF5                       	smpsPSGAlterVol     $F5
0009BE2D 9A06                       	dc.b	nCs2, $06
0009BE2F EC04                       	smpsPSGAlterVol     $04
0009BE31 E701                       	dc.b	smpsNoAttack, $01
0009BE33 EC07                       	smpsPSGAlterVol     $07
0009BE35 8003                       	dc.b	nRst, $03
0009BE37 E1FC                       	smpsAlterNote       $FC
0009BE39 ECF5                       	smpsPSGAlterVol     $F5
0009BE3B 8F07                       	dc.b	nD1, $07
0009BE3D EC0B                       	smpsPSGAlterVol     $0B
0009BE3F 8006                       	dc.b	nRst, $06
0009BE41 E1FF                       	smpsAlterNote       $FF
0009BE43 01                         	dc.b	$01
0009BE44 E103                       	smpsAlterNote       $03
0009BE46 01                         	dc.b	$01
0009BE47 E102                       	smpsAlterNote       $02
0009BE49 01                         	dc.b	$01
0009BE4A E1FC                       	smpsAlterNote       $FC
0009BE4C 01                         	dc.b	$01
0009BE4D E1F8                       	smpsAlterNote       $F8
0009BE4F 01                         	dc.b	$01
0009BE50 E1FC                       	smpsAlterNote       $FC
0009BE52 01                         	dc.b	$01
0009BE53 E1FF                       	smpsAlterNote       $FF
0009BE55 01                         	dc.b	$01
0009BE56 E103                       	smpsAlterNote       $03
0009BE58 01                         	dc.b	$01
0009BE59 E1FC                       	smpsAlterNote       $FC
0009BE5B ECF5                       	smpsPSGAlterVol     $F5
0009BE5D 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0009BE61 EC04                       	smpsPSGAlterVol     $04
0009BE63 E701                       	dc.b	smpsNoAttack, $01
0009BE65 EC07                       	smpsPSGAlterVol     $07
0009BE67 8009                       	dc.b	nRst, $09
0009BE69 E1FF                       	smpsAlterNote       $FF
0009BE6B 01                         	dc.b	$01
0009BE6C E103                       	smpsAlterNote       $03
0009BE6E 01                         	dc.b	$01
0009BE6F E102                       	smpsAlterNote       $02
0009BE71 01                         	dc.b	$01
0009BE72 E1FC                       	smpsAlterNote       $FC
0009BE74 01                         	dc.b	$01
0009BE75 E1F8                       	smpsAlterNote       $F8
0009BE77 01                         	dc.b	$01
0009BE78 E1FC                       	smpsAlterNote       $FC
0009BE7A 01                         	dc.b	$01
0009BE7B E1FF                       	smpsAlterNote       $FF
0009BE7D 01                         	dc.b	$01
0009BE7E E103                       	smpsAlterNote       $03
0009BE80 01                         	dc.b	$01
0009BE81 E1FF                       	smpsAlterNote       $FF
0009BE83 01                         	dc.b	$01
0009BE84 E1F9                       	smpsAlterNote       $F9
0009BE86 01                         	dc.b	$01
0009BE87 E1F8                       	smpsAlterNote       $F8
0009BE89 01                         	dc.b	$01
0009BE8A E1FC                       	smpsAlterNote       $FC
0009BE8C 01                         	dc.b	$01
0009BE8D E102                       	smpsAlterNote       $02
0009BE8F 0101                       	dc.b	$01, $01
0009BE91 E1FF                       	smpsAlterNote       $FF
0009BE93 01                         	dc.b	$01
0009BE94 E1FC                       	smpsAlterNote       $FC
0009BE96 ECF5                       	smpsPSGAlterVol     $F5
0009BE98 8F02                       	dc.b	nD1, $02
0009BE9A EC04                       	smpsPSGAlterVol     $04
0009BE9C E701                       	dc.b	smpsNoAttack, $01
0009BE9E ECFC                       	smpsPSGAlterVol     $FC
0009BEA0 E1FB                       	smpsAlterNote       $FB
0009BEA2 8D06                       	dc.b	nC1, $06
0009BEA4 EC04                       	smpsPSGAlterVol     $04
0009BEA6 E701                       	dc.b	smpsNoAttack, $01
0009BEA8 EC07                       	smpsPSGAlterVol     $07
0009BEAA 8006                       	dc.b	nRst, $06
0009BEAC E1FE                       	smpsAlterNote       $FE
0009BEAE 01                         	dc.b	$01
0009BEAF E102                       	smpsAlterNote       $02
0009BEB1 01                         	dc.b	$01
0009BEB2 E1FE                       	smpsAlterNote       $FE
0009BEB4 01                         	dc.b	$01
0009BEB5 E1FB                       	smpsAlterNote       $FB
0009BEB7 01                         	dc.b	$01
0009BEB8 E1F7                       	smpsAlterNote       $F7
0009BEBA 01                         	dc.b	$01
0009BEBB E1FB                       	smpsAlterNote       $FB
0009BEBD 01                         	dc.b	$01
0009BEBE E101                       	smpsAlterNote       $01
0009BEC0 01                         	dc.b	$01
0009BEC1 E102                       	smpsAlterNote       $02
0009BEC3 01                         	dc.b	$01
0009BEC4 E1FB                       	smpsAlterNote       $FB
0009BEC6 ECF5                       	smpsPSGAlterVol     $F5
0009BEC8 8D02                       	dc.b	nC1, $02
0009BECA EC04                       	smpsPSGAlterVol     $04
0009BECC E701                       	dc.b	smpsNoAttack, $01
0009BECE E1FC                       	smpsAlterNote       $FC
0009BED0 ECFC                       	smpsPSGAlterVol     $FC
0009BED2 8F0D                       	dc.b	nD1, $0D
0009BED4 E1FF                       	smpsAlterNote       $FF
0009BED6 E701                       	dc.b	smpsNoAttack, $01
0009BED8 E103                       	smpsAlterNote       $03
0009BEDA E701                       	dc.b	smpsNoAttack, $01
0009BEDC E1FF                       	smpsAlterNote       $FF
0009BEDE E701                       	dc.b	smpsNoAttack, $01
0009BEE0 E1FC                       	smpsAlterNote       $FC
0009BEE2 E701                       	dc.b	smpsNoAttack, $01
0009BEE4 E1F8                       	smpsAlterNote       $F8
0009BEE6 E701                       	dc.b	smpsNoAttack, $01
0009BEE8 E1FC                       	smpsAlterNote       $FC
0009BEEA E701                       	dc.b	smpsNoAttack, $01
0009BEEC E102                       	smpsAlterNote       $02
0009BEEE E701                       	dc.b	smpsNoAttack, $01
0009BEF0 E103                       	smpsAlterNote       $03
0009BEF2 E701                       	dc.b	smpsNoAttack, $01
0009BEF4 E1FF                       	smpsAlterNote       $FF
0009BEF6 E701                       	dc.b	smpsNoAttack, $01
0009BEF8 E1F9                       	smpsAlterNote       $F9
0009BEFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009BEFE E1FC                       	smpsAlterNote       $FC
0009BF00 E701                       	dc.b	smpsNoAttack, $01
0009BF02 E102                       	smpsAlterNote       $02
0009BF04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009BF08 E1FC                       	smpsAlterNote       $FC
0009BF0A E701                       	dc.b	smpsNoAttack, $01
0009BF0C E1F9                       	smpsAlterNote       $F9
0009BF0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009BF12 E1FF                       	smpsAlterNote       $FF
0009BF14 EC04                       	smpsPSGAlterVol     $04
0009BF16 E701                       	dc.b	smpsNoAttack, $01
0009BF18 EC07                       	smpsPSGAlterVol     $07
0009BF1A E103                       	smpsAlterNote       $03
0009BF1C 8001                       	dc.b	nRst, $01
0009BF1E E102                       	smpsAlterNote       $02
0009BF20 01                         	dc.b	$01
0009BF21 E1FB                       	smpsAlterNote       $FB
0009BF23 01                         	dc.b	$01
0009BF24 E1F7                       	smpsAlterNote       $F7
0009BF26 01                         	dc.b	$01
0009BF27 E1FB                       	smpsAlterNote       $FB
0009BF29 01                         	dc.b	$01
0009BF2A E102                       	smpsAlterNote       $02
0009BF2C 01                         	dc.b	$01
0009BF2D E103                       	smpsAlterNote       $03
0009BF2F 01                         	dc.b	$01
0009BF30 E1FB                       	smpsAlterNote       $FB
0009BF32 ECF5                       	smpsPSGAlterVol     $F5
0009BF34 8E06                       	dc.b	nCs1, $06
0009BF36 EC04                       	smpsPSGAlterVol     $04
0009BF38 E701                       	dc.b	smpsNoAttack, $01
0009BF3A EC07                       	smpsPSGAlterVol     $07
0009BF3C 8003                       	dc.b	nRst, $03
0009BF3E ECF5                       	smpsPSGAlterVol     $F5
0009BF40 8E06                       	dc.b	nCs1, $06
0009BF42 EC04                       	smpsPSGAlterVol     $04
0009BF44 E701                       	dc.b	smpsNoAttack, $01
0009BF46 EC07                       	smpsPSGAlterVol     $07
0009BF48 8006                       	dc.b	nRst, $06
0009BF4A E1FE                       	smpsAlterNote       $FE
0009BF4C 01                         	dc.b	$01
0009BF4D E102                       	smpsAlterNote       $02
0009BF4F 01                         	dc.b	$01
0009BF50 E1FE                       	smpsAlterNote       $FE
0009BF52 01                         	dc.b	$01
0009BF53 E1F9                       	smpsAlterNote       $F9
0009BF55 01                         	dc.b	$01
0009BF56 E1FC                       	smpsAlterNote       $FC
0009BF58 ECF5                       	smpsPSGAlterVol     $F5
0009BF5A 8F06                       	dc.b	nD1, $06
0009BF5C EC04                       	smpsPSGAlterVol     $04
0009BF5E E701                       	dc.b	smpsNoAttack, $01
0009BF60 EC07                       	smpsPSGAlterVol     $07
0009BF62 8003                       	dc.b	nRst, $03
0009BF64 ECF5                       	smpsPSGAlterVol     $F5
0009BF66 8F07                       	dc.b	nD1, $07
0009BF68 EC0B                       	smpsPSGAlterVol     $0B
0009BF6A 8006                       	dc.b	nRst, $06
0009BF6C E1FF                       	smpsAlterNote       $FF
0009BF6E 01                         	dc.b	$01
0009BF6F E102                       	smpsAlterNote       $02
0009BF71 0101                       	dc.b	$01, $01
0009BF73 E1FB                       	smpsAlterNote       $FB
0009BF75 01                         	dc.b	$01
0009BF76 ECF5                       	smpsPSGAlterVol     $F5
0009BF78 8E07                       	dc.b	nCs1, $07
0009BF7A EC0B                       	smpsPSGAlterVol     $0B
0009BF7C 8004                       	dc.b	nRst, $04
0009BF7E ECF5                       	smpsPSGAlterVol     $F5
0009BF80 8E06                       	dc.b	nCs1, $06
0009BF82 EC04                       	smpsPSGAlterVol     $04
0009BF84 E701                       	dc.b	smpsNoAttack, $01
0009BF86 EC07                       	smpsPSGAlterVol     $07
0009BF88 8006                       	dc.b	nRst, $06
0009BF8A E101                       	smpsAlterNote       $01
0009BF8C 01                         	dc.b	$01
0009BF8D E102                       	smpsAlterNote       $02
0009BF8F 01                         	dc.b	$01
0009BF90 E1FE                       	smpsAlterNote       $FE
0009BF92 01                         	dc.b	$01
0009BF93 E1F8                       	smpsAlterNote       $F8
0009BF95 01                         	dc.b	$01
0009BF96 E1FB                       	smpsAlterNote       $FB
0009BF98 ECF5                       	smpsPSGAlterVol     $F5
0009BF9A 8E06                       	dc.b	nCs1, $06
0009BF9C EC04                       	smpsPSGAlterVol     $04
0009BF9E E701                       	dc.b	smpsNoAttack, $01
0009BFA0 EC07                       	smpsPSGAlterVol     $07
0009BFA2 8003                       	dc.b	nRst, $03
0009BFA4 ECF5                       	smpsPSGAlterVol     $F5
0009BFA6 8E06                       	dc.b	nCs1, $06
0009BFA8 EC04                       	smpsPSGAlterVol     $04
0009BFAA E701                       	dc.b	smpsNoAttack, $01
0009BFAC EC07                       	smpsPSGAlterVol     $07
0009BFAE 8004                       	dc.b	nRst, $04
0009BFB0 E1FC                       	smpsAlterNote       $FC
0009BFB2 ECF5                       	smpsPSGAlterVol     $F5
0009BFB4 8F06                       	dc.b	nD1, $06
0009BFB6 EC0B                       	smpsPSGAlterVol     $0B
0009BFB8 8006                       	dc.b	nRst, $06
0009BFBA E1FF                       	smpsAlterNote       $FF
0009BFBC 01                         	dc.b	$01
0009BFBD E102                       	smpsAlterNote       $02
0009BFBF 0101                       	dc.b	$01, $01
0009BFC1 E1FC                       	smpsAlterNote       $FC
0009BFC3 01                         	dc.b	$01
0009BFC4 E1F8                       	smpsAlterNote       $F8
0009BFC6 01                         	dc.b	$01
0009BFC7 E1F9                       	smpsAlterNote       $F9
0009BFC9 01                         	dc.b	$01
0009BFCA E1FF                       	smpsAlterNote       $FF
0009BFCC 01                         	dc.b	$01
0009BFCD E103                       	smpsAlterNote       $03
0009BFCF 01                         	dc.b	$01
0009BFD0 E1FC                       	smpsAlterNote       $FC
0009BFD2 ECF5                       	smpsPSGAlterVol     $F5
0009BFD4 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0009BFD8 EC04                       	smpsPSGAlterVol     $04
0009BFDA E701                       	dc.b	smpsNoAttack, $01
0009BFDC EC07                       	smpsPSGAlterVol     $07
0009BFDE 8009                       	dc.b	nRst, $09
0009BFE0 E1FF                       	smpsAlterNote       $FF
0009BFE2 01                         	dc.b	$01
0009BFE3 E102                       	smpsAlterNote       $02
0009BFE5 0101                       	dc.b	$01, $01
0009BFE7 E1FC                       	smpsAlterNote       $FC
0009BFE9 01                         	dc.b	$01
0009BFEA E1F8                       	smpsAlterNote       $F8
0009BFEC 01                         	dc.b	$01
0009BFED E1F9                       	smpsAlterNote       $F9
0009BFEF 01                         	dc.b	$01
0009BFF0 E1FF                       	smpsAlterNote       $FF
0009BFF2 01                         	dc.b	$01
0009BFF3 E103                       	smpsAlterNote       $03
0009BFF5 01                         	dc.b	$01
0009BFF6 E1FF                       	smpsAlterNote       $FF
0009BFF8 01                         	dc.b	$01
0009BFF9 E1FC                       	smpsAlterNote       $FC
0009BFFB 01                         	dc.b	$01
0009BFFC E1F8                       	smpsAlterNote       $F8
0009BFFE 01                         	dc.b	$01
0009BFFF E1FC                       	smpsAlterNote       $FC
0009C001 01                         	dc.b	$01
0009C002 E102                       	smpsAlterNote       $02
0009C004 01                         	dc.b	$01
0009C005 E103                       	smpsAlterNote       $03
0009C007 01                         	dc.b	$01
0009C008 E1FF                       	smpsAlterNote       $FF
0009C00A 01                         	dc.b	$01
0009C00B E1FC                       	smpsAlterNote       $FC
0009C00D ECF5                       	smpsPSGAlterVol     $F5
0009C00F 8F03                       	dc.b	nD1, $03
0009C011 E1FB                       	smpsAlterNote       $FB
0009C013 8D06                       	dc.b	nC1, $06
0009C015 EC04                       	smpsPSGAlterVol     $04
0009C017 E701                       	dc.b	smpsNoAttack, $01
0009C019 EC07                       	smpsPSGAlterVol     $07
0009C01B 8006                       	dc.b	nRst, $06
0009C01D E1FE                       	smpsAlterNote       $FE
0009C01F 01                         	dc.b	$01
0009C020 E102                       	smpsAlterNote       $02
0009C022 01                         	dc.b	$01
0009C023 E101                       	smpsAlterNote       $01
0009C025 01                         	dc.b	$01
0009C026 E1FB                       	smpsAlterNote       $FB
0009C028 01                         	dc.b	$01
0009C029 E1F7                       	smpsAlterNote       $F7
0009C02B 01                         	dc.b	$01
0009C02C E1FB                       	smpsAlterNote       $FB
0009C02E 01                         	dc.b	$01
0009C02F E1FE                       	smpsAlterNote       $FE
0009C031 01                         	dc.b	$01
0009C032 E102                       	smpsAlterNote       $02
0009C034 01                         	dc.b	$01
0009C035 E1FB                       	smpsAlterNote       $FB
0009C037 ECF5                       	smpsPSGAlterVol     $F5
0009C039 8D03                       	dc.b	nC1, $03
0009C03B E1FC                       	smpsAlterNote       $FC
0009C03D 8F0D                       	dc.b	nD1, $0D
0009C03F E1FF                       	smpsAlterNote       $FF
0009C041 E701                       	dc.b	smpsNoAttack, $01
0009C043 E103                       	smpsAlterNote       $03
0009C045 E701                       	dc.b	smpsNoAttack, $01
0009C047 E1FF                       	smpsAlterNote       $FF
0009C049 E701                       	dc.b	smpsNoAttack, $01
0009C04B E1FC                       	smpsAlterNote       $FC
0009C04D E701                       	dc.b	smpsNoAttack, $01
0009C04F E1F8                       	smpsAlterNote       $F8
0009C051 E701                       	dc.b	smpsNoAttack, $01
0009C053 E1FC                       	smpsAlterNote       $FC
0009C055 E701                       	dc.b	smpsNoAttack, $01
0009C057 E102                       	smpsAlterNote       $02
0009C059 E701                       	dc.b	smpsNoAttack, $01
0009C05B E103                       	smpsAlterNote       $03
0009C05D E701                       	dc.b	smpsNoAttack, $01
0009C05F E1FF                       	smpsAlterNote       $FF
0009C061 E701                       	dc.b	smpsNoAttack, $01
0009C063 E1F9                       	smpsAlterNote       $F9
0009C065 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009C069 E1FC                       	smpsAlterNote       $FC
0009C06B E701                       	dc.b	smpsNoAttack, $01
0009C06D E102                       	smpsAlterNote       $02
0009C06F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009C073 E1FF                       	smpsAlterNote       $FF
0009C075 E701                       	dc.b	smpsNoAttack, $01
0009C077 E1F9                       	smpsAlterNote       $F9
0009C079 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009C07D E1FF                       	smpsAlterNote       $FF
0009C07F EC04                       	smpsPSGAlterVol     $04
0009C081 E701                       	dc.b	smpsNoAttack, $01
0009C083 EC07                       	smpsPSGAlterVol     $07
0009C085 E103                       	smpsAlterNote       $03
0009C087 8001                       	dc.b	nRst, $01
0009C089 E102                       	smpsAlterNote       $02
0009C08B 01                         	dc.b	$01
0009C08C E1FB                       	smpsAlterNote       $FB
0009C08E 01                         	dc.b	$01
0009C08F E1F7                       	smpsAlterNote       $F7
0009C091 01                         	dc.b	$01
0009C092 E1FB                       	smpsAlterNote       $FB
0009C094 01                         	dc.b	$01
0009C095 E1FF                       	smpsAlterNote       $FF
0009C097 01                         	dc.b	$01
0009C098 E103                       	smpsAlterNote       $03
0009C09A 01                         	dc.b	$01
0009C09B E1FB                       	smpsAlterNote       $FB
0009C09D ECF5                       	smpsPSGAlterVol     $F5
0009C09F 8E06                       	dc.b	nCs1, $06
0009C0A1 EC04                       	smpsPSGAlterVol     $04
0009C0A3 E701                       	dc.b	smpsNoAttack, $01
0009C0A5 EC07                       	smpsPSGAlterVol     $07
0009C0A7 8003                       	dc.b	nRst, $03
0009C0A9 ECF5                       	smpsPSGAlterVol     $F5
0009C0AB 8E06                       	dc.b	nCs1, $06
0009C0AD EC04                       	smpsPSGAlterVol     $04
0009C0AF E701                       	dc.b	smpsNoAttack, $01
0009C0B1 EC07                       	smpsPSGAlterVol     $07
0009C0B3 8006                       	dc.b	nRst, $06
0009C0B5 E1FE                       	smpsAlterNote       $FE
0009C0B7 01                         	dc.b	$01
0009C0B8 E102                       	smpsAlterNote       $02
0009C0BA 01                         	dc.b	$01
0009C0BB E1FE                       	smpsAlterNote       $FE
0009C0BD 01                         	dc.b	$01
0009C0BE E1FC                       	smpsAlterNote       $FC
0009C0C0 01                         	dc.b	$01
0009C0C1 ECF5                       	smpsPSGAlterVol     $F5
0009C0C3 8F06                       	dc.b	nD1, $06
0009C0C5 EC04                       	smpsPSGAlterVol     $04
0009C0C7 E701                       	dc.b	smpsNoAttack, $01
0009C0C9 EC07                       	smpsPSGAlterVol     $07
0009C0CB 8003                       	dc.b	nRst, $03
0009C0CD ECF5                       	smpsPSGAlterVol     $F5
0009C0CF 8F07                       	dc.b	nD1, $07
0009C0D1 EC0B                       	smpsPSGAlterVol     $0B
0009C0D3 8007                       	dc.b	nRst, $07
0009C0D5 E102                       	smpsAlterNote       $02
0009C0D7 0101                       	dc.b	$01, $01
0009C0D9 E1FB                       	smpsAlterNote       $FB
0009C0DB 01                         	dc.b	$01
0009C0DC E1F8                       	smpsAlterNote       $F8
0009C0DE 01                         	dc.b	$01
0009C0DF E1FB                       	smpsAlterNote       $FB
0009C0E1 ECF5                       	smpsPSGAlterVol     $F5
0009C0E3 8E06                       	dc.b	nCs1, $06
0009C0E5 EC0B                       	smpsPSGAlterVol     $0B
0009C0E7 8004                       	dc.b	nRst, $04
0009C0E9 ECF5                       	smpsPSGAlterVol     $F5
0009C0EB 8E06                       	dc.b	nCs1, $06
0009C0ED EC04                       	smpsPSGAlterVol     $04
0009C0EF E701                       	dc.b	smpsNoAttack, $01
0009C0F1 EC07                       	smpsPSGAlterVol     $07
0009C0F3 8006                       	dc.b	nRst, $06
0009C0F5 E1FE                       	smpsAlterNote       $FE
0009C0F7 01                         	dc.b	$01
0009C0F8 E102                       	smpsAlterNote       $02
0009C0FA 01                         	dc.b	$01
0009C0FB E1FE                       	smpsAlterNote       $FE
0009C0FD 01                         	dc.b	$01
0009C0FE E1F9                       	smpsAlterNote       $F9
0009C100 01                         	dc.b	$01
0009C101 E1FC                       	smpsAlterNote       $FC
0009C103 ECF5                       	smpsPSGAlterVol     $F5
0009C105 8F06                       	dc.b	nD1, $06
0009C107 EC04                       	smpsPSGAlterVol     $04
0009C109 E701                       	dc.b	smpsNoAttack, $01
0009C10B EC07                       	smpsPSGAlterVol     $07
0009C10D 8003                       	dc.b	nRst, $03
0009C10F ECF5                       	smpsPSGAlterVol     $F5
0009C111 8F06                       	dc.b	nD1, $06
0009C113 EC04                       	smpsPSGAlterVol     $04
0009C115 E701                       	dc.b	smpsNoAttack, $01
0009C117 EC07                       	smpsPSGAlterVol     $07
0009C119 8006                       	dc.b	nRst, $06
0009C11B E1FF                       	smpsAlterNote       $FF
0009C11D 01                         	dc.b	$01
0009C11E E103                       	smpsAlterNote       $03
0009C120 01                         	dc.b	$01
0009C121 E102                       	smpsAlterNote       $02
0009C123 01                         	dc.b	$01
0009C124 E1FB                       	smpsAlterNote       $FB
0009C126 01                         	dc.b	$01
0009C127 ECF5                       	smpsPSGAlterVol     $F5
0009C129 8E07                       	dc.b	nCs1, $07
0009C12B EC0B                       	smpsPSGAlterVol     $0B
0009C12D 8004                       	dc.b	nRst, $04
0009C12F ECF5                       	smpsPSGAlterVol     $F5
0009C131 8E06                       	dc.b	nCs1, $06
0009C133 EC0B                       	smpsPSGAlterVol     $0B
0009C135 8007                       	dc.b	nRst, $07
0009C137 E101                       	smpsAlterNote       $01
0009C139 0101                       	dc.b	$01, $01
0009C13B E1FE                       	smpsAlterNote       $FE
0009C13D 01                         	dc.b	$01
0009C13E E1F9                       	smpsAlterNote       $F9
0009C140 01                         	dc.b	$01
0009C141 E1FC                       	smpsAlterNote       $FC
0009C143 ECF5                       	smpsPSGAlterVol     $F5
0009C145 8F06                       	dc.b	nD1, $06
0009C147 EC04                       	smpsPSGAlterVol     $04
0009C149 E701                       	dc.b	smpsNoAttack, $01
0009C14B EC07                       	smpsPSGAlterVol     $07
0009C14D 8003                       	dc.b	nRst, $03
0009C14F ECF5                       	smpsPSGAlterVol     $F5
0009C151 8F06                       	dc.b	nD1, $06
0009C153 EC04                       	smpsPSGAlterVol     $04
0009C155 E701                       	dc.b	smpsNoAttack, $01
0009C157 EC07                       	smpsPSGAlterVol     $07
0009C159 8006                       	dc.b	nRst, $06
0009C15B E1FF                       	smpsAlterNote       $FF
0009C15D 01                         	dc.b	$01
0009C15E E103                       	smpsAlterNote       $03
0009C160 01                         	dc.b	$01
0009C161 E1FF                       	smpsAlterNote       $FF
0009C163 01                         	dc.b	$01
0009C164 E1FB                       	smpsAlterNote       $FB
0009C166 01                         	dc.b	$01
0009C167 ECF5                       	smpsPSGAlterVol     $F5
0009C169 8E06                       	dc.b	nCs1, $06
0009C16B EC04                       	smpsPSGAlterVol     $04
0009C16D E701                       	dc.b	smpsNoAttack, $01
0009C16F EC07                       	smpsPSGAlterVol     $07
0009C171 8003                       	dc.b	nRst, $03
0009C173 ECF5                       	smpsPSGAlterVol     $F5
0009C175 8E07                       	dc.b	nCs1, $07
0009C177 E1FF                       	smpsAlterNote       $FF
0009C179 9B06                       	dc.b	nD2, $06
0009C17B EC04                       	smpsPSGAlterVol     $04
0009C17D E701                       	dc.b	smpsNoAttack, $01
0009C17F ECFC                       	smpsPSGAlterVol     $FC
0009C181 9B03                       	dc.b	nD2, $03
0009C183 EC04                       	smpsPSGAlterVol     $04
0009C185 E701                       	dc.b	smpsNoAttack, $01
0009C187 ECFC                       	smpsPSGAlterVol     $FC
0009C189 9B02                       	dc.b	nD2, $02
0009C18B EC04                       	smpsPSGAlterVol     $04
0009C18D E701                       	dc.b	smpsNoAttack, $01
0009C18F ECFC                       	smpsPSGAlterVol     $FC
0009C191 E1FE                       	smpsAlterNote       $FE
0009C193 9A03                       	dc.b	nCs2, $03
0009C195 EC0B                       	smpsPSGAlterVol     $0B
0009C197 800A                       	dc.b	nRst, $0A
0009C199 E102                       	smpsAlterNote       $02
0009C19B 01                         	dc.b	$01
0009C19C E10A                       	smpsAlterNote       $0A
0009C19E 01                         	dc.b	$01
0009C19F E102                       	smpsAlterNote       $02
0009C1A1 01                         	dc.b	$01
0009C1A2 E1F7                       	smpsAlterNote       $F7
0009C1A4 01                         	dc.b	$01
0009C1A5 E10A                       	smpsAlterNote       $0A
0009C1A7 01                         	dc.b	$01
0009C1A8 E1FC                       	smpsAlterNote       $FC
0009C1AA 01                         	dc.b	$01
0009C1AB E108                       	smpsAlterNote       $08
0009C1AD 0101                       	dc.b	$01, $01
0009C1AF E102                       	smpsAlterNote       $02
0009C1B1 01                         	dc.b	$01
0009C1B2 E1F7                       	smpsAlterNote       $F7
0009C1B4 0101                       	dc.b	$01, $01
0009C1B6 E1FC                       	smpsAlterNote       $FC
0009C1B8 ECF5                       	smpsPSGAlterVol     $F5
0009C1BA 8F06                       	dc.b	nD1, $06
0009C1BC EC04                       	smpsPSGAlterVol     $04
0009C1BE E701                       	dc.b	smpsNoAttack, $01
0009C1C0 EC07                       	smpsPSGAlterVol     $07
0009C1C2 8003                       	dc.b	nRst, $03
0009C1C4 ECF5                       	smpsPSGAlterVol     $F5
0009C1C6 8F06                       	dc.b	nD1, $06
0009C1C8 EC04                       	smpsPSGAlterVol     $04
0009C1CA E701                       	dc.b	smpsNoAttack, $01
0009C1CC EC07                       	smpsPSGAlterVol     $07
0009C1CE 8006                       	dc.b	nRst, $06
0009C1D0 E1FF                       	smpsAlterNote       $FF
0009C1D2 01                         	dc.b	$01
0009C1D3 E102                       	smpsAlterNote       $02
0009C1D5 01                         	dc.b	$01
0009C1D6 E101                       	smpsAlterNote       $01
0009C1D8 01                         	dc.b	$01
0009C1D9 E1FC                       	smpsAlterNote       $FC
0009C1DB 01                         	dc.b	$01
0009C1DC ECF5                       	smpsPSGAlterVol     $F5
0009C1DE 9007                       	dc.b	nEb1, $07
0009C1E0 EC0B                       	smpsPSGAlterVol     $0B
0009C1E2 8004                       	dc.b	nRst, $04
0009C1E4 ECF5                       	smpsPSGAlterVol     $F5
0009C1E6 9006                       	dc.b	nEb1, $06
0009C1E8 EC0B                       	smpsPSGAlterVol     $0B
0009C1EA 8007                       	dc.b	nRst, $07
0009C1EC E103                       	smpsAlterNote       $03
0009C1EE 0101                       	dc.b	$01, $01
0009C1F0 E1FF                       	smpsAlterNote       $FF
0009C1F2 01                         	dc.b	$01
0009C1F3 E1F9                       	smpsAlterNote       $F9
0009C1F5 01                         	dc.b	$01
0009C1F6 E1FC                       	smpsAlterNote       $FC
0009C1F8 ECF5                       	smpsPSGAlterVol     $F5
0009C1FA 8F06                       	dc.b	nD1, $06
0009C1FC EC04                       	smpsPSGAlterVol     $04
0009C1FE E701                       	dc.b	smpsNoAttack, $01
0009C200 EC07                       	smpsPSGAlterVol     $07
0009C202 8003                       	dc.b	nRst, $03
0009C204 ECF5                       	smpsPSGAlterVol     $F5
0009C206 8F06                       	dc.b	nD1, $06
0009C208 EC04                       	smpsPSGAlterVol     $04
0009C20A E701                       	dc.b	smpsNoAttack, $01
0009C20C EC07                       	smpsPSGAlterVol     $07
0009C20E 8006                       	dc.b	nRst, $06
0009C210 E1FF                       	smpsAlterNote       $FF
0009C212 01                         	dc.b	$01
0009C213 E103                       	smpsAlterNote       $03
0009C215 01                         	dc.b	$01
0009C216 E1FF                       	smpsAlterNote       $FF
0009C218 01                         	dc.b	$01
0009C219 E1F9                       	smpsAlterNote       $F9
0009C21B 01                         	dc.b	$01
0009C21C E1FC                       	smpsAlterNote       $FC
0009C21E ECF5                       	smpsPSGAlterVol     $F5
0009C220 8F06                       	dc.b	nD1, $06
0009C222 EC04                       	smpsPSGAlterVol     $04
0009C224 E701                       	dc.b	smpsNoAttack, $01
0009C226 EC07                       	smpsPSGAlterVol     $07
0009C228 8003                       	dc.b	nRst, $03
0009C22A ECF5                       	smpsPSGAlterVol     $F5
0009C22C 8F07                       	dc.b	nD1, $07
0009C22E EC0B                       	smpsPSGAlterVol     $0B
0009C230 8006                       	dc.b	nRst, $06
0009C232 E1FF                       	smpsAlterNote       $FF
0009C234 01                         	dc.b	$01
0009C235 E102                       	smpsAlterNote       $02
0009C237 0101                       	dc.b	$01, $01
0009C239 E1FC                       	smpsAlterNote       $FC
0009C23B 01                         	dc.b	$01
0009C23C ECF5                       	smpsPSGAlterVol     $F5
0009C23E 8F07                       	dc.b	nD1, $07
0009C240 EC0B                       	smpsPSGAlterVol     $0B
0009C242 8004                       	dc.b	nRst, $04
0009C244 ECF5                       	smpsPSGAlterVol     $F5
0009C246 8F06                       	dc.b	nD1, $06
0009C248 EC04                       	smpsPSGAlterVol     $04
0009C24A E701                       	dc.b	smpsNoAttack, $01
0009C24C EC07                       	smpsPSGAlterVol     $07
0009C24E 8006                       	dc.b	nRst, $06
0009C250 E101                       	smpsAlterNote       $01
0009C252 01                         	dc.b	$01
0009C253 E102                       	smpsAlterNote       $02
0009C255 01                         	dc.b	$01
0009C256 E1FF                       	smpsAlterNote       $FF
0009C258 01                         	dc.b	$01
0009C259 E1F9                       	smpsAlterNote       $F9
0009C25B 01                         	dc.b	$01
0009C25C E1FC                       	smpsAlterNote       $FC
0009C25E ECF5                       	smpsPSGAlterVol     $F5
0009C260 9006                       	dc.b	nEb1, $06
0009C262 EC04                       	smpsPSGAlterVol     $04
0009C264 E701                       	dc.b	smpsNoAttack, $01
0009C266 EC07                       	smpsPSGAlterVol     $07
0009C268 8003                       	dc.b	nRst, $03
0009C26A ECF5                       	smpsPSGAlterVol     $F5
0009C26C 9006                       	dc.b	nEb1, $06
0009C26E EC04                       	smpsPSGAlterVol     $04
0009C270 E701                       	dc.b	smpsNoAttack, $01
0009C272 EC07                       	smpsPSGAlterVol     $07
0009C274 8006                       	dc.b	nRst, $06
0009C276 E100                       	smpsAlterNote       $00
0009C278 01                         	dc.b	$01
0009C279 E102                       	smpsAlterNote       $02
0009C27B 01                         	dc.b	$01
0009C27C E100                       	smpsAlterNote       $00
0009C27E 01                         	dc.b	$01
0009C27F E1FF                       	smpsAlterNote       $FF
0009C281 01                         	dc.b	$01
0009C282 ECF5                       	smpsPSGAlterVol     $F5
0009C284 9B06                       	dc.b	nD2, $06
0009C286 EC04                       	smpsPSGAlterVol     $04
0009C288 E701                       	dc.b	smpsNoAttack, $01
0009C28A EC07                       	smpsPSGAlterVol     $07
0009C28C 8003                       	dc.b	nRst, $03
0009C28E ECF5                       	smpsPSGAlterVol     $F5
0009C290 9B07                       	dc.b	nD2, $07
0009C292 EC0B                       	smpsPSGAlterVol     $0B
0009C294 8007                       	dc.b	nRst, $07
0009C296 E105                       	smpsAlterNote       $05
0009C298 0101                       	dc.b	$01, $01
0009C29A E1FF                       	smpsAlterNote       $FF
0009C29C 01                         	dc.b	$01
0009C29D E1FC                       	smpsAlterNote       $FC
0009C29F 01                         	dc.b	$01
0009C2A0 E1FF                       	smpsAlterNote       $FF
0009C2A2 ECF5                       	smpsPSGAlterVol     $F5
0009C2A4 9B06                       	dc.b	nD2, $06
0009C2A6 EC0B                       	smpsPSGAlterVol     $0B
0009C2A8 8004                       	dc.b	nRst, $04
0009C2AA ECF5                       	smpsPSGAlterVol     $F5
0009C2AC 9B06                       	dc.b	nD2, $06
0009C2AE EC04                       	smpsPSGAlterVol     $04
0009C2B0 E701                       	dc.b	smpsNoAttack, $01
0009C2B2 EC07                       	smpsPSGAlterVol     $07
0009C2B4 8006                       	dc.b	nRst, $06
0009C2B6 E102                       	smpsAlterNote       $02
0009C2B8 01                         	dc.b	$01
0009C2B9 E106                       	smpsAlterNote       $06
0009C2BB 01                         	dc.b	$01
0009C2BC E102                       	smpsAlterNote       $02
0009C2BE 01                         	dc.b	$01
0009C2BF E1FC                       	smpsAlterNote       $FC
0009C2C1 01                         	dc.b	$01
0009C2C2 E1FF                       	smpsAlterNote       $FF
0009C2C4 ECF5                       	smpsPSGAlterVol     $F5
0009C2C6 9B06                       	dc.b	nD2, $06
0009C2C8 EC04                       	smpsPSGAlterVol     $04
0009C2CA E701                       	dc.b	smpsNoAttack, $01
0009C2CC EC07                       	smpsPSGAlterVol     $07
0009C2CE 8003                       	dc.b	nRst, $03
0009C2D0 ECF5                       	smpsPSGAlterVol     $F5
0009C2D2 9B07                       	dc.b	nD2, $07
0009C2D4 EC0B                       	smpsPSGAlterVol     $0B
0009C2D6 8006                       	dc.b	nRst, $06
0009C2D8 E102                       	smpsAlterNote       $02
0009C2DA 01                         	dc.b	$01
0009C2DB E105                       	smpsAlterNote       $05
0009C2DD 0101                       	dc.b	$01, $01
0009C2DF E1FF                       	smpsAlterNote       $FF
0009C2E1 01                         	dc.b	$01
0009C2E2 ECF5                       	smpsPSGAlterVol     $F5
0009C2E4 9B07                       	dc.b	nD2, $07
0009C2E6 EC0B                       	smpsPSGAlterVol     $0B
0009C2E8 8004                       	dc.b	nRst, $04
0009C2EA ECF5                       	smpsPSGAlterVol     $F5
0009C2EC 9B06                       	dc.b	nD2, $06
0009C2EE EC04                       	smpsPSGAlterVol     $04
0009C2F0 E701                       	dc.b	smpsNoAttack, $01
0009C2F2 EC07                       	smpsPSGAlterVol     $07
0009C2F4 8006                       	dc.b	nRst, $06
0009C2F6 E105                       	smpsAlterNote       $05
0009C2F8 0101                       	dc.b	$01, $01
0009C2FA E102                       	smpsAlterNote       $02
0009C2FC 01                         	dc.b	$01
0009C2FD E1FC                       	smpsAlterNote       $FC
0009C2FF 01                         	dc.b	$01
0009C300 E1FF                       	smpsAlterNote       $FF
0009C302 ECF5                       	smpsPSGAlterVol     $F5
0009C304 9B06                       	dc.b	nD2, $06
0009C306 EC04                       	smpsPSGAlterVol     $04
0009C308 E701                       	dc.b	smpsNoAttack, $01
0009C30A EC07                       	smpsPSGAlterVol     $07
0009C30C 8003                       	dc.b	nRst, $03
0009C30E ECF5                       	smpsPSGAlterVol     $F5
0009C310 9B06                       	dc.b	nD2, $06
0009C312 EC04                       	smpsPSGAlterVol     $04
0009C314 E701                       	dc.b	smpsNoAttack, $01
0009C316 EC07                       	smpsPSGAlterVol     $07
0009C318 8006                       	dc.b	nRst, $06
0009C31A E102                       	smpsAlterNote       $02
0009C31C 01                         	dc.b	$01
0009C31D E106                       	smpsAlterNote       $06
0009C31F 01                         	dc.b	$01
0009C320 E102                       	smpsAlterNote       $02
0009C322 01                         	dc.b	$01
0009C323 E1FF                       	smpsAlterNote       $FF
0009C325 01                         	dc.b	$01
0009C326 ECF5                       	smpsPSGAlterVol     $F5
0009C328 9B06                       	dc.b	nD2, $06
0009C32A EC04                       	smpsPSGAlterVol     $04
0009C32C E701                       	dc.b	smpsNoAttack, $01
0009C32E EC07                       	smpsPSGAlterVol     $07
0009C330 8003                       	dc.b	nRst, $03
0009C332 ECF5                       	smpsPSGAlterVol     $F5
0009C334 9B07                       	dc.b	nD2, $07
0009C336 EC0B                       	smpsPSGAlterVol     $0B
0009C338 8007                       	dc.b	nRst, $07
0009C33A E107                       	smpsAlterNote       $07
0009C33C 0101                       	dc.b	$01, $01
0009C33E E1FE                       	smpsAlterNote       $FE
0009C340 01                         	dc.b	$01
0009C341 E1FA                       	smpsAlterNote       $FA
0009C343 0101                       	dc.b	$01, $01
0009C345 E103                       	smpsAlterNote       $03
0009C347 01                         	dc.b	$01
0009C348 E109                       	smpsAlterNote       $09
0009C34A 01                         	dc.b	$01
0009C34B E107                       	smpsAlterNote       $07
0009C34D 01                         	dc.b	$01
0009C34E E1FE                       	smpsAlterNote       $FE
0009C350 01                         	dc.b	$01
0009C351 E108                       	smpsAlterNote       $08
0009C353 01                         	dc.b	$01
0009C354 E1FD                       	smpsAlterNote       $FD
0009C356 ECF5                       	smpsPSGAlterVol     $F5
0009C358 940E                       	dc.b	nG1, $0E
0009C35A E103                       	smpsAlterNote       $03
0009C35C EC0B                       	smpsPSGAlterVol     $0B
0009C35E 8001 01                    	dc.b	nRst, $01, $01
0009C361 E1FD                       	smpsAlterNote       $FD
0009C363 01                         	dc.b	$01
0009C364 E1FB                       	smpsAlterNote       $FB
0009C366 0101                       	dc.b	$01, $01
0009C368 E100                       	smpsAlterNote       $00
0009C36A 01                         	dc.b	$01
0009C36B E103                       	smpsAlterNote       $03
0009C36D 01                         	dc.b	$01
0009C36E E100                       	smpsAlterNote       $00
0009C370 01                         	dc.b	$01
0009C371 E1FD                       	smpsAlterNote       $FD
0009C373 01                         	dc.b	$01
0009C374 E1FA                       	smpsAlterNote       $FA
0009C376 01                         	dc.b	$01
0009C377 E1FD                       	smpsAlterNote       $FD
0009C379 01                         	dc.b	$01
0009C37A E103                       	smpsAlterNote       $03
0009C37C 0101                       	dc.b	$01, $01
0009C37E E100                       	smpsAlterNote       $00
0009C380 01                         	dc.b	$01
0009C381 E1FE                       	smpsAlterNote       $FE
0009C383 ECF5                       	smpsPSGAlterVol     $F5
0009C385 960D                       	dc.b	nA1, $0D
0009C387 E104                       	smpsAlterNote       $04
0009C389 EC0B                       	smpsPSGAlterVol     $0B
0009C38B 8001 01                    	dc.b	nRst, $01, $01
0009C38E E101                       	smpsAlterNote       $01
0009C390 01                         	dc.b	$01
0009C391 E1FB                       	smpsAlterNote       $FB
0009C393 0101                       	dc.b	$01, $01
0009C395 E1FE                       	smpsAlterNote       $FE
0009C397 01                         	dc.b	$01
0009C398 E104                       	smpsAlterNote       $04
0009C39A 0101                       	dc.b	$01, $01
0009C39C E1FE                       	smpsAlterNote       $FE
0009C39E 01                         	dc.b	$01
0009C39F E1FB                       	smpsAlterNote       $FB
0009C3A1 0101                       	dc.b	$01, $01
0009C3A3 E101                       	smpsAlterNote       $01
0009C3A5 01                         	dc.b	$01
0009C3A6 E104                       	smpsAlterNote       $04
0009C3A8 0101                       	dc.b	$01, $01
0009C3AA E1FE                       	smpsAlterNote       $FE
0009C3AC ECF5                       	smpsPSGAlterVol     $F5
0009C3AE 970D                       	dc.b	nBb1, $0D
0009C3B0 E101                       	smpsAlterNote       $01
0009C3B2 EC04                       	smpsPSGAlterVol     $04
0009C3B4 E701                       	dc.b	smpsNoAttack, $01
0009C3B6 EC07                       	smpsPSGAlterVol     $07
0009C3B8 E104                       	smpsAlterNote       $04
0009C3BA 8001                       	dc.b	nRst, $01
0009C3BC E103                       	smpsAlterNote       $03
0009C3BE 01                         	dc.b	$01
0009C3BF E1FE                       	smpsAlterNote       $FE
0009C3C1 01                         	dc.b	$01
0009C3C2 E1FA                       	smpsAlterNote       $FA
0009C3C4 01                         	dc.b	$01
0009C3C5 E1FE                       	smpsAlterNote       $FE
0009C3C7 01                         	dc.b	$01
0009C3C8 E101                       	smpsAlterNote       $01
0009C3CA 01                         	dc.b	$01
0009C3CB E104                       	smpsAlterNote       $04
0009C3CD 01                         	dc.b	$01
0009C3CE E101                       	smpsAlterNote       $01
0009C3D0 01                         	dc.b	$01
0009C3D1 E1FB                       	smpsAlterNote       $FB
0009C3D3 01                         	dc.b	$01
0009C3D4 E1FA                       	smpsAlterNote       $FA
0009C3D6 01                         	dc.b	$01
0009C3D7 E1FE                       	smpsAlterNote       $FE
0009C3D9 01                         	dc.b	$01
0009C3DA E103                       	smpsAlterNote       $03
0009C3DC 0101                       	dc.b	$01, $01
0009C3DE E101                       	smpsAlterNote       $01
0009C3E0 01                         	dc.b	$01
0009C3E1 E1FE                       	smpsAlterNote       $FE
0009C3E3 ECF5                       	smpsPSGAlterVol     $F5
0009C3E5 990D                       	dc.b	nC2, $0D
0009C3E7 E104                       	smpsAlterNote       $04
0009C3E9 EC0B                       	smpsPSGAlterVol     $0B
0009C3EB 8001 01                    	dc.b	nRst, $01, $01
0009C3EE E102                       	smpsAlterNote       $02
0009C3F0 01                         	dc.b	$01
0009C3F1 E1FC                       	smpsAlterNote       $FC
0009C3F3 0101                       	dc.b	$01, $01
0009C3F5 E102                       	smpsAlterNote       $02
0009C3F7 01                         	dc.b	$01
0009C3F8 E104                       	smpsAlterNote       $04
0009C3FA 01                         	dc.b	$01
0009C3FB E1FF                       	smpsAlterNote       $FF
0009C3FD ECF5                       	smpsPSGAlterVol     $F5
0009C3FF 9B06                       	dc.b	nD2, $06
0009C401 EC04                       	smpsPSGAlterVol     $04
0009C403 E701                       	dc.b	smpsNoAttack, $01
0009C405 EC07                       	smpsPSGAlterVol     $07
0009C407 8003                       	dc.b	nRst, $03
0009C409 ECF5                       	smpsPSGAlterVol     $F5
0009C40B 9B07                       	dc.b	nD2, $07
0009C40D EC0B                       	smpsPSGAlterVol     $0B
0009C40F 8006                       	dc.b	nRst, $06
0009C411 E101                       	smpsAlterNote       $01
0009C413 01                         	dc.b	$01
0009C414 E104                       	smpsAlterNote       $04
0009C416 0101                       	dc.b	$01, $01
0009C418 E1FE                       	smpsAlterNote       $FE
0009C41A 01                         	dc.b	$01
0009C41B E1FC                       	smpsAlterNote       $FC
0009C41D 01                         	dc.b	$01
0009C41E E1FE                       	smpsAlterNote       $FE
0009C420 ECF5                       	smpsPSGAlterVol     $F5
0009C422 9C06                       	dc.b	nEb2, $06
0009C424 EC0B                       	smpsPSGAlterVol     $0B
0009C426 8004                       	dc.b	nRst, $04
0009C428 ECF5                       	smpsPSGAlterVol     $F5
0009C42A 9C06                       	dc.b	nEb2, $06
0009C42C EC04                       	smpsPSGAlterVol     $04
0009C42E E701                       	dc.b	smpsNoAttack, $01
0009C430 EC07                       	smpsPSGAlterVol     $07
0009C432 8006                       	dc.b	nRst, $06
0009C434 E105                       	smpsAlterNote       $05
0009C436 01                         	dc.b	$01
0009C437 E106                       	smpsAlterNote       $06
0009C439 01                         	dc.b	$01
0009C43A E102                       	smpsAlterNote       $02
0009C43C 01                         	dc.b	$01
0009C43D E1FB                       	smpsAlterNote       $FB
0009C43F 01                         	dc.b	$01
0009C440 E1FF                       	smpsAlterNote       $FF
0009C442 ECF5                       	smpsPSGAlterVol     $F5
0009C444 9B06                       	dc.b	nD2, $06
0009C446 EC04                       	smpsPSGAlterVol     $04
0009C448 E701                       	dc.b	smpsNoAttack, $01
0009C44A EC07                       	smpsPSGAlterVol     $07
0009C44C 8003                       	dc.b	nRst, $03
0009C44E ECF5                       	smpsPSGAlterVol     $F5
0009C450 9B06                       	dc.b	nD2, $06
0009C452 EC04                       	smpsPSGAlterVol     $04
0009C454 E701                       	dc.b	smpsNoAttack, $01
0009C456 EC07                       	smpsPSGAlterVol     $07
0009C458 8006                       	dc.b	nRst, $06
0009C45A E101                       	smpsAlterNote       $01
0009C45C 01                         	dc.b	$01
0009C45D E105                       	smpsAlterNote       $05
0009C45F 01                         	dc.b	$01
0009C460 E104                       	smpsAlterNote       $04
0009C462 01                         	dc.b	$01
0009C463 E1FE                       	smpsAlterNote       $FE
0009C465 01                         	dc.b	$01
0009C466 ECF5                       	smpsPSGAlterVol     $F5
0009C468 9C07                       	dc.b	nEb2, $07
0009C46A EC0B                       	smpsPSGAlterVol     $0B
0009C46C 8004                       	dc.b	nRst, $04
0009C46E ECF5                       	smpsPSGAlterVol     $F5
0009C470 9C06                       	dc.b	nEb2, $06
0009C472 EC0B                       	smpsPSGAlterVol     $0B
0009C474 8007                       	dc.b	nRst, $07
0009C476 E105                       	smpsAlterNote       $05
0009C478 0101                       	dc.b	$01, $01
0009C47A E102                       	smpsAlterNote       $02
0009C47C 01                         	dc.b	$01
0009C47D E1FB                       	smpsAlterNote       $FB
0009C47F 01                         	dc.b	$01
0009C480 E1FF                       	smpsAlterNote       $FF
0009C482 ECF5                       	smpsPSGAlterVol     $F5
0009C484 9B06                       	dc.b	nD2, $06
0009C486 EC04                       	smpsPSGAlterVol     $04
0009C488 E701                       	dc.b	smpsNoAttack, $01
0009C48A EC07                       	smpsPSGAlterVol     $07
0009C48C 8003                       	dc.b	nRst, $03
0009C48E ECF5                       	smpsPSGAlterVol     $F5
0009C490 9B06                       	dc.b	nD2, $06
0009C492 EC04                       	smpsPSGAlterVol     $04
0009C494 E701                       	dc.b	smpsNoAttack, $01
0009C496 EC07                       	smpsPSGAlterVol     $07
0009C498 8006                       	dc.b	nRst, $06
0009C49A E101                       	smpsAlterNote       $01
0009C49C 01                         	dc.b	$01
0009C49D E105                       	smpsAlterNote       $05
0009C49F 01                         	dc.b	$01
0009C4A0 E101                       	smpsAlterNote       $01
0009C4A2 01                         	dc.b	$01
0009C4A3 E1FC                       	smpsAlterNote       $FC
0009C4A5 01                         	dc.b	$01
0009C4A6 E1FE                       	smpsAlterNote       $FE
0009C4A8 ECF5                       	smpsPSGAlterVol     $F5
0009C4AA 9C06                       	dc.b	nEb2, $06
0009C4AC EC04                       	smpsPSGAlterVol     $04
0009C4AE E701                       	dc.b	smpsNoAttack, $01
0009C4B0 EC07                       	smpsPSGAlterVol     $07
0009C4B2 8003                       	dc.b	nRst, $03
0009C4B4 ECF5                       	smpsPSGAlterVol     $F5
0009C4B6 9C07                       	dc.b	nEb2, $07
0009C4B8 EC0B                       	smpsPSGAlterVol     $0B
0009C4BA 8006                       	dc.b	nRst, $06
0009C4BC E102                       	smpsAlterNote       $02
0009C4BE 01                         	dc.b	$01
0009C4BF E105                       	smpsAlterNote       $05
0009C4C1 0101                       	dc.b	$01, $01
0009C4C3 E1FF                       	smpsAlterNote       $FF
0009C4C5 01                         	dc.b	$01
0009C4C6 ECF5                       	smpsPSGAlterVol     $F5
0009C4C8 9B07                       	dc.b	nD2, $07
0009C4CA EC0B                       	smpsPSGAlterVol     $0B
0009C4CC 8004                       	dc.b	nRst, $04
0009C4CE ECF5                       	smpsPSGAlterVol     $F5
0009C4D0 9B06                       	dc.b	nD2, $06
0009C4D2 EC04                       	smpsPSGAlterVol     $04
0009C4D4 E701                       	dc.b	smpsNoAttack, $01
0009C4D6 EC07                       	smpsPSGAlterVol     $07
0009C4D8 8002                       	dc.b	nRst, $02
0009C4DA E1FC                       	smpsAlterNote       $FC
0009C4DC ECF5                       	smpsPSGAlterVol     $F5
0009C4DE 9006                       	dc.b	nEb1, $06
0009C4E0 EC04                       	smpsPSGAlterVol     $04
0009C4E2 E701                       	dc.b	smpsNoAttack, $01
0009C4E4 ECFC                       	smpsPSGAlterVol     $FC
0009C4E6 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0009C4EA EC04                       	smpsPSGAlterVol     $04
0009C4EC E701                       	dc.b	smpsNoAttack, $01
0009C4EE E1FD                       	smpsAlterNote       $FD
0009C4F0 ECFC                       	smpsPSGAlterVol     $FC
0009C4F2 9402                       	dc.b	nG1, $02
0009C4F4 EC04                       	smpsPSGAlterVol     $04
0009C4F6 E701                       	dc.b	smpsNoAttack, $01
0009C4F8 E1FE                       	smpsAlterNote       $FE
0009C4FA ECFC                       	smpsPSGAlterVol     $FC
0009C4FC 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0009C500 EC04                       	smpsPSGAlterVol     $04
0009C502 E701                       	dc.b	smpsNoAttack, $01
0009C504 EC07                       	smpsPSGAlterVol     $07
0009C506 8008                       	dc.b	nRst, $08
0009C508 F6F4 F3                    	smpsJump            music84_Jump06
0009C50B                            
0009C50B                            ; PSG3 Data
0009C50B                            music84_PSG3:
0009C50B F500                       	smpsPSGvoice        $00
0009C50D E1FF                       	smpsAlterNote       $FF
0009C50F EC0F                       	smpsPSGAlterVol     $0F
0009C511 803A                       	dc.b	nRst, $3A
0009C513                            
0009C513                            music84_Jump05:
0009C513 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0009C51F 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0009C529 F6FF E8                    	smpsJump            music84_Jump05
0009C52C                            
0009C52C                            ; DAC Data
0009C52C                            music84_DAC:
0009C52C E0C0                       	smpsPan             panCenter, $00
0009C52E 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0009C53A 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0009C546 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0009C552 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0009C55E 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0009C56A 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0009C576 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0009C582 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0009C58E 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0009C59A 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0009C5A6 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0009C5B2 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0009C5BE 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0009C5CA 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0009C5D6 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0009C5E2 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0009C5EE 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0009C5FA 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0009C606 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0009C612 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0009C61E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009C62A 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0009C636 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0009C642 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0009C64E 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0009C65A 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0009C666 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0009C672 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009C67E 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0009C68A 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0009C696 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009C6A2 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009C6AE 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0009C6BA 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0009C6C6 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0009C6D2 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009C6DE 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0009C6EA 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0009C6F6 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0009C702 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0009C70E 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0009C71A 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0009C726 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009C732 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0009C73E 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0009C74A 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009C756 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009C762 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0009C76E 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0009C77A 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0009C786 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0009C792 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0009C79E 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0009C7AA 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0009C7B6 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009C7C2 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0009C7CE 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0009C7DA 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0009C7E6 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0009C7F2 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0009C7FE 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0009C80A 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0009C816 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0009C822 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0009C82E 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0009C83A 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0009C846 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0009C852 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0009C85E 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0009C86A 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0009C876 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0009C882 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009C88E 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0009C89A 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0009C8A6 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0009C8B2 E0C0                       	smpsPan             panCenter, $00
0009C8B4 F2                         	smpsStop
0009C8B5                            
0009C8B5                            music84_Voices:
0009C8B5                            ;	Voice $00
0009C8B5                            ;	$3D
0009C8B5                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0009C8B5                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0009C8B5                            	smpsVcAlgorithm     $05
0009C8B5                            	smpsVcFeedback      $07
0009C8B5                            	smpsVcUnusedBits    $00
0009C8B5                            	smpsVcDetune        $05, $04, $03, $04
0009C8B5                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009C8B5                            	smpsVcRateScale     $00, $00, $00, $00
0009C8B5                            	smpsVcAttackRate    $11, $11, $11, $11
0009C8B5                            	smpsVcAmpMod        $00, $00, $00, $00
0009C8B5                            	smpsVcDecayRate1    $00, $00, $00, $0A
0009C8B5                            	smpsVcDecayRate2    $00, $00, $00, $0B
0009C8B5                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C8B5                            	smpsVcReleaseRate   $08, $08, $08, $07
0009C8B5 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0009C8CE                            
0009C8CE                            ;	Voice $01
0009C8CE                            ;	$04
0009C8CE                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0009C8CE                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0009C8CE                            	smpsVcAlgorithm     $04
0009C8CE                            	smpsVcFeedback      $00
0009C8CE                            	smpsVcUnusedBits    $00
0009C8CE                            	smpsVcDetune        $04, $03, $04, $05
0009C8CE                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0009C8CE                            	smpsVcRateScale     $00, $01, $00, $01
0009C8CE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C8CE                            	smpsVcAmpMod        $00, $00, $00, $00
0009C8CE                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0009C8CE                            	smpsVcDecayRate2    $05, $00, $05, $00
0009C8CE                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0009C8CE                            	smpsVcReleaseRate   $06, $06, $06, $06
0009C8CE 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0009C8E7                            
0009C8E7                            ;	Voice $02
0009C8E7                            ;	$30
0009C8E7                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0009C8E7                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0009C8E7                            	smpsVcAlgorithm     $00
0009C8E7                            	smpsVcFeedback      $06
0009C8E7                            	smpsVcUnusedBits    $00
0009C8E7                            	smpsVcDetune        $04, $02, $00, $06
0009C8E7                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0009C8E7                            	smpsVcRateScale     $00, $00, $00, $00
0009C8E7                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0009C8E7                            	smpsVcAmpMod        $00, $00, $00, $00
0009C8E7                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0009C8E7                            	smpsVcDecayRate2    $01, $01, $01, $01
0009C8E7                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0009C8E7                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0009C8E7 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0009C900                            
0009C900                            ;	Voice $03
0009C900                            ;	$3A
0009C900                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0009C900                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0009C900                            	smpsVcAlgorithm     $02
0009C900                            	smpsVcFeedback      $07
0009C900                            	smpsVcUnusedBits    $00
0009C900                            	smpsVcDetune        $04, $06, $02, $00
0009C900                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009C900                            	smpsVcRateScale     $00, $00, $00, $00
0009C900                            	smpsVcAttackRate    $18, $19, $14, $14
0009C900                            	smpsVcAmpMod        $00, $00, $00, $00
0009C900                            	smpsVcDecayRate1    $09, $0D, $09, $09
0009C900                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C900                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0009C900                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0009C900 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0009C919                            
0009C919                            ;	Voice $04
0009C919                            ;	$3C
0009C919                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0009C919                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0009C919                            	smpsVcAlgorithm     $04
0009C919                            	smpsVcFeedback      $07
0009C919                            	smpsVcUnusedBits    $00
0009C919                            	smpsVcDetune        $07, $00, $00, $03
0009C919                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0009C919                            	smpsVcRateScale     $00, $00, $00, $00
0009C919                            	smpsVcAttackRate    $10, $1F, $10, $1F
0009C919                            	smpsVcAmpMod        $00, $00, $00, $00
0009C919                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C919                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C919                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C919                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0009C919 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0009C932                            
0009C932                            ;	Voice $05
0009C932                            ;	$38
0009C932                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0009C932                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0009C932                            	smpsVcAlgorithm     $00
0009C932                            	smpsVcFeedback      $07
0009C932                            	smpsVcUnusedBits    $00
0009C932                            	smpsVcDetune        $04, $06, $02, $00
0009C932                            	smpsVcCoarseFreq    $01, $01, $01, $00
0009C932                            	smpsVcRateScale     $00, $00, $00, $00
0009C932                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0009C932                            	smpsVcAmpMod        $00, $00, $00, $00
0009C932                            	smpsVcDecayRate1    $00, $03, $00, $17
0009C932                            	smpsVcDecayRate2    $00, $08, $08, $0B
0009C932                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0009C932                            	smpsVcReleaseRate   $08, $05, $05, $05
0009C932 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0009C94B                            
0009C94B                            
0009C94C 00                         		even
0009C94C                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
000A0B5C                            		even
000A0B5C                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A46B4 00                         		even
000A46B4                            Music87:	include	sound\music87.asm; Invincibility
000A46B4                            triple_Header:
000A46B4 =00000001                  smpsHeaderStartSong = 1
000A46B4 0000                       	smpsHeaderVoice     triple_Voices
000A46B6 0501                       	smpsHeaderChan      $05, $01
000A46B8 0200                       	smpsHeaderTempo     $02, $00
000A46BA                            
000A46BE 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A46C2 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A46C6 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A46CA 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A46CE 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A46D4                            
000A46D4                            ; DAC Data
000A46D4                            triple_DAC:
000A46D4 E0C0                       	smpsPan             panCenter, $00
000A46D6 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A46DC                            
000A46DC                            triple_Loop01:
000A46DC 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A46DF                            
000A46DF                            triple_Loop00:
000A46DF 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A46EB 06                         	dc.b	$06
000A46EC F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A46F1 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A46FD 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A4704 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A4709 0303 1B                    	dc.b	$03, $03, $1B
000A470C E0C0                       	smpsPan             panCenter, $00
000A470E F6FF C4                    	smpsJump triple_DAC
000A4711                            
000A4711                            ; FM1 Data
000A4711                            triple_FM1:
000A4711 E0C0                       	smpsPan             panCenter, $00
000A4715 8018                       	dc.b	nRst, $18
000A4717                            
000A4717                            triple_Loop0B:
000A4717 AC06 B8                    	dc.b	nG3, $06, nG4
000A471A F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A471F                            
000A471F                            triple_Loop0C:
000A471F A7B3                       	dc.b	nD3, nD4
000A4721 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A4726                            
000A4726                            triple_Loop0D:
000A4726 A9B5                       	dc.b	nE3, nE4
000A4728 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A472D A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A4735 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A473A A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A4746 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A4752 AD                         	dc.b	nAb3
000A4753 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A4758 8018                       	dc.b	nRst, $18
000A475A E0C0                       	smpsPan             panCenter, $00
000A475E F6FF B1                    	smpsJump triple_FM1
000A4761                            
000A4761                            ; FM2 Data
000A4761                            triple_FM2:
000A4761 E0C0                       	smpsPan             panCenter, $00
000A4765 8018                       	dc.b	nRst, $18
000A4767                            
000A4767                            triple_Loop07:
000A4767 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A4773 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A477F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A4784 8003                       	dc.b	nRst, $03
000A4786                            
000A4786                            triple_Loop08:
000A4786 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A478C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A4791 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A4797                            
000A4797                            triple_Loop09:
000A4797 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A47A3 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A47AF F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A47B4 8003                       	dc.b	nRst, $03
000A47B6                            
000A47B6                            triple_Loop0A:
000A47B6 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A47BC F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A47C1 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A47C7 E0C0                       	smpsPan             panCenter, $00
000A47CB F6FF 94                    	smpsJump triple_FM2
000A47CE                            
000A47CE                            ; FM3 Data
000A47CE                            triple_FM3:
000A47CE E0C0                       	smpsPan             panCenter, $00
000A47D2 8018                       	dc.b	nRst, $18
000A47D4                            
000A47D4                            triple_Loop06:
000A47D4 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A47DB F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A47E0 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A47EC BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A47F8 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A47FB F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A4800 8018                       	dc.b	nRst, $18
000A4802 E0C0                       	smpsPan             panCenter, $00
000A4806 F6FF C6                    	smpsJump triple_FM3
000A4809                            
000A4809                            ; FM4 Data
000A4809                            triple_FM4:
000A4809 E103                       	smpsAlterNote       $03
000A480D E0C0                       	smpsPan             panCenter, $00
000A480F 8018                       	dc.b	nRst, $18
000A4811                            
000A4811                            triple_Loop02:
000A4811 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A481D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A4829 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A482E 8003                       	dc.b	nRst, $03
000A4830                            
000A4830                            triple_Loop03:
000A4830 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A4836 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A483B B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A4841                            
000A4841                            triple_Loop04:
000A4841 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A484D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A4859 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A485E 8003                       	dc.b	nRst, $03
000A4860                            
000A4860                            triple_Loop05:
000A4860 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A4866 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A486B B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A4871 E0C0                       	smpsPan             panCenter, $00
000A4873 F6FF 94                    	smpsJump triple_FM4
000A4876                            
000A4876                            ; PSG1 Data
000A4876                            triple_PSG1:
000A4876 8018                       	dc.b	nRst, $18
000A4878                            
000A4878                            triple_Loop0E:
000A4878 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A4884 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A4890 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A489C 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A48A0 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A48A5 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A48B1 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A48BD 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A48C9 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A48CD                            
000A48CD                            triple_Loop0F:
000A48CD 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A48D3 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A48D8 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A48DE                            
000A48DE                            triple_Loop10:
000A48DE A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A48EA 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A48F6 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A4902 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A4906 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A490B A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A4917 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A4923 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A492F 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A4933                            
000A4933                            triple_Loop11:
000A4933 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A4939 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A493E 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A4944 F500                       	smpsPSGvoice        $00
000A4946 F6FF 2E                    	smpsJump triple_PSG1
000A4949                            
000A4949                            triple_Voices:
000A4949                            ;	Voice $00
000A4949                            ;	$3A
000A4949                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A4949                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A4949                            	smpsVcAlgorithm     $02
000A4949                            	smpsVcFeedback      $07
000A4949                            	smpsVcUnusedBits    $00
000A4949                            	smpsVcDetune        $00, $00, $00, $00
000A4949                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A4949                            	smpsVcRateScale     $01, $02, $02, $02
000A4949                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A4949                            	smpsVcAmpMod        $00, $00, $00, $00
000A4949                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A4949                            	smpsVcDecayRate2    $00, $00, $00, $00
000A4949                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A4949                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A4949 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A4962                            
000A4962                            ;	Voice $01
000A4962                            ;	$20
000A4962                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A4962                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A4962                            	smpsVcAlgorithm     $00
000A4962                            	smpsVcFeedback      $04
000A4962                            	smpsVcUnusedBits    $00
000A4962                            	smpsVcDetune        $00, $00, $03, $07
000A4962                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A4962                            	smpsVcRateScale     $03, $03, $03, $02
000A4962                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A4962                            	smpsVcAmpMod        $00, $00, $00, $00
000A4962                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A4962                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A4962                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A4962                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A4962 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A4962 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A497C 00                         		even
000A497C                            Music88:	incbin	sound\music88.bin; Extra Life
000A4A6A                            		even
000A4A6A                            Music89:	incbin	sound\music89.bin; Special Stage
000A8932 00                         		even
000A8932                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A8AFC                            		even
000A8AFC                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A8D96                            		even
000A8D96                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A9034                            		even
000A9034                            Music8D:	incbin	sound\music8D.bin; Final Zone
000AF2AC 00                         		even
000AF2AC                            Music8E:	include	sound\merry.asm ; Act Clear
000AF2AC =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000AF2AC =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000AF2AC =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000AF2AC =0000008A                  dMerryClap = dLowTimpani
000AF2AC                            
000AF2AC                            MerrysLittleLamb_Header:
000AF2AC 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000AF2AE 0603                       	smpsHeaderChan      $06, $03
000AF2B0 0100                       	smpsHeaderTempo     $01, $00
000AF2B2                            
000AF2B6 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000AF2BA 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000AF2BE 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000AF2C2 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000AF2C6 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000AF2CA 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000AF2D0 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000AF2D6 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000AF2DC                            
000AF2DC                            MerrysLittleLamb_FM1:
000AF2DC E0C0                       	smpsPan             panCenter, $00
000AF2DE 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000AF2E5 E60F                       	smpsAlterVol        $0F
000AF2E7 A704                       	dc.b	nD3, $04
000AF2E9 E606                       	smpsAlterVol        $06
000AF2EB A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF2F0 E6FA                       	smpsAlterVol        $FA
000AF2F2 A705                       	dc.b	nD3, $05
000AF2F4 E606                       	smpsAlterVol        $06
000AF2F6 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF2FB E6FA                       	smpsAlterVol        $FA
000AF2FD A704                       	dc.b	nD3, $04
000AF2FF E606                       	smpsAlterVol        $06
000AF301 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AF307 E6FA                       	smpsAlterVol        $FA
000AF309 A7                         	dc.b	nD3
000AF30A E606                       	smpsAlterVol        $06
000AF30C A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF311 E6FA                       	smpsAlterVol        $FA
000AF313 A704                       	dc.b	nD3, $04
000AF315 E606                       	smpsAlterVol        $06
000AF317 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AF31D E6FA                       	smpsAlterVol        $FA
000AF31F A7                         	dc.b	nD3
000AF320 E606                       	smpsAlterVol        $06
000AF322 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AF328 E6FA                       	smpsAlterVol        $FA
000AF32A A705                       	dc.b	nD3, $05
000AF32C E606                       	smpsAlterVol        $06
000AF32E A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF333 E6FA                       	smpsAlterVol        $FA
000AF335 A7                         	dc.b	nD3
000AF336 E606                       	smpsAlterVol        $06
000AF338 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AF33E E6FA                       	smpsAlterVol        $FA
000AF340 A705                       	dc.b	nD3, $05
000AF342 E606                       	smpsAlterVol        $06
000AF344 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF349 E6FA                       	smpsAlterVol        $FA
000AF34B A704                       	dc.b	nD3, $04
000AF34D E606                       	smpsAlterVol        $06
000AF34F A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF354 E6FA                       	smpsAlterVol        $FA
000AF356 A705                       	dc.b	nD3, $05
000AF358 E606                       	smpsAlterVol        $06
000AF35A A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF35F E6FA                       	smpsAlterVol        $FA
000AF361 A704                       	dc.b	nD3, $04
000AF363 E606                       	smpsAlterVol        $06
000AF365 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF36A E6FA                       	smpsAlterVol        $FA
000AF36C A705                       	dc.b	nD3, $05
000AF36E E606                       	smpsAlterVol        $06
000AF370 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF375 E6FA                       	smpsAlterVol        $FA
000AF377 A704                       	dc.b	nD3, $04
000AF379 E606                       	smpsAlterVol        $06
000AF37B A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AF381 E6FA                       	smpsAlterVol        $FA
000AF383 A7                         	dc.b	nD3
000AF384 E606                       	smpsAlterVol        $06
000AF386 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AF38C E6FA                       	smpsAlterVol        $FA
000AF38E A705                       	dc.b	nD3, $05
000AF390 E606                       	smpsAlterVol        $06
000AF392 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF397 E6FA                       	smpsAlterVol        $FA
000AF399 A7                         	dc.b	nD3
000AF39A E606                       	smpsAlterVol        $06
000AF39C A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AF3A2 E6FA                       	smpsAlterVol        $FA
000AF3A4 A705                       	dc.b	nD3, $05
000AF3A6 E606                       	smpsAlterVol        $06
000AF3A8 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF3AD E6FA                       	smpsAlterVol        $FA
000AF3AF A704                       	dc.b	nD3, $04
000AF3B1 E606                       	smpsAlterVol        $06
000AF3B3 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF3B8 E6FA                       	smpsAlterVol        $FA
000AF3BA A705                       	dc.b	nD3, $05
000AF3BC E606                       	smpsAlterVol        $06
000AF3BE A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF3C3 E6FA                       	smpsAlterVol        $FA
000AF3C5 A704                       	dc.b	nD3, $04
000AF3C7 E606                       	smpsAlterVol        $06
000AF3C9 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF3CE E6FA                       	smpsAlterVol        $FA
000AF3D0 A705                       	dc.b	nD3, $05
000AF3D2 E606                       	smpsAlterVol        $06
000AF3D4 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF3D9 E6FA                       	smpsAlterVol        $FA
000AF3DB A704                       	dc.b	nD3, $04
000AF3DD E606                       	smpsAlterVol        $06
000AF3DF A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AF3E5 E6FA                       	smpsAlterVol        $FA
000AF3E7 A7                         	dc.b	nD3
000AF3E8 E606                       	smpsAlterVol        $06
000AF3EA A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF3EF E6FA                       	smpsAlterVol        $FA
000AF3F1 A704                       	dc.b	nD3, $04
000AF3F3 E606                       	smpsAlterVol        $06
000AF3F5 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000AF3FB E6FA                       	smpsAlterVol        $FA
000AF3FD A7                         	dc.b	nD3
000AF3FE E606                       	smpsAlterVol        $06
000AF400 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000AF406 E6FA                       	smpsAlterVol        $FA
000AF408 A705                       	dc.b	nD3, $05
000AF40A E606                       	smpsAlterVol        $06
000AF40C A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF411 E6FA                       	smpsAlterVol        $FA
000AF413 A704                       	dc.b	nD3, $04
000AF415 E606                       	smpsAlterVol        $06
000AF417 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF41C E6FA                       	smpsAlterVol        $FA
000AF41E A705                       	dc.b	nD3, $05
000AF420 E606                       	smpsAlterVol        $06
000AF422 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000AF427 E6FA                       	smpsAlterVol        $FA
000AF429 A704                       	dc.b	nD3, $04
000AF42B E606                       	smpsAlterVol        $06
000AF42D A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000AF432 E6FA                       	smpsAlterVol        $FA
000AF434 A705                       	dc.b	nD3, $05
000AF436 E606                       	smpsAlterVol        $06
000AF438 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000AF43D E6FA                       	smpsAlterVol        $FA
000AF43F A704                       	dc.b	nD3, $04
000AF441 E606                       	smpsAlterVol        $06
000AF443 A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000AF44A F2                         	smpsStop
000AF44B                            
000AF44B                            MerrysLittleLamb_FM2:
000AF44B E0C0                       	smpsPan             panCenter, $00
000AF44D 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000AF455 E610                       	smpsAlterVol        $10
000AF457 A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000AF460                            
000AF460                            MerrysLittleLamb_FM3:
000AF460                            MerrysLittleLamb_FM4:
000AF460                            MerrysLittleLamb_FM5:
000AF460 F2                         	smpsStop
000AF461                            
000AF461                            MerrysLittleLamb_PSG1:
000AF461 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000AF469 EC02                       	smpsPSGAlterVol     $02
000AF46B B7                         	dc.b	nFs4
000AF46C EC03                       	smpsPSGAlterVol     $03
000AF46E B7                         	dc.b	nFs4
000AF46F EC03                       	smpsPSGAlterVol     $03
000AF471 B7                         	dc.b	nFs4
000AF472 EC03                       	smpsPSGAlterVol     $03
000AF474 B7                         	dc.b	nFs4
000AF475 ECF5                       	smpsPSGAlterVol     $F5
000AF477 B7                         	dc.b	nFs4
000AF478 EC02                       	smpsPSGAlterVol     $02
000AF47A B7                         	dc.b	nFs4
000AF47B EC03                       	smpsPSGAlterVol     $03
000AF47D B7                         	dc.b	nFs4
000AF47E EC03                       	smpsPSGAlterVol     $03
000AF480 B7                         	dc.b	nFs4
000AF481 ECF8                       	smpsPSGAlterVol     $F8
000AF483 B7                         	dc.b	nFs4
000AF484 EC02                       	smpsPSGAlterVol     $02
000AF486 B7                         	dc.b	nFs4
000AF487 EC03                       	smpsPSGAlterVol     $03
000AF489 B7                         	dc.b	nFs4
000AF48A EC03                       	smpsPSGAlterVol     $03
000AF48C B7                         	dc.b	nFs4
000AF48D EC03                       	smpsPSGAlterVol     $03
000AF48F B7                         	dc.b	nFs4
000AF490 ECF5                       	smpsPSGAlterVol     $F5
000AF492 B7                         	dc.b	nFs4
000AF493 EC02                       	smpsPSGAlterVol     $02
000AF495 B7                         	dc.b	nFs4
000AF496 EC03                       	smpsPSGAlterVol     $03
000AF498 B7                         	dc.b	nFs4
000AF499 EC03                       	smpsPSGAlterVol     $03
000AF49B B7                         	dc.b	nFs4
000AF49C EC03                       	smpsPSGAlterVol     $03
000AF49E B7                         	dc.b	nFs4
000AF49F ECF5                       	smpsPSGAlterVol     $F5
000AF4A1 B7                         	dc.b	nFs4
000AF4A2 EC02                       	smpsPSGAlterVol     $02
000AF4A4 B7                         	dc.b	nFs4
000AF4A5 EC06                       	smpsPSGAlterVol     $06
000AF4A7 B7                         	dc.b	nFs4
000AF4A8 EC03                       	smpsPSGAlterVol     $03
000AF4AA B7                         	dc.b	nFs4
000AF4AB ECF5                       	smpsPSGAlterVol     $F5
000AF4AD B7                         	dc.b	nFs4
000AF4AE EC02                       	smpsPSGAlterVol     $02
000AF4B0 B7                         	dc.b	nFs4
000AF4B1 EC03                       	smpsPSGAlterVol     $03
000AF4B3 B7                         	dc.b	nFs4
000AF4B4 EC03                       	smpsPSGAlterVol     $03
000AF4B6 B7                         	dc.b	nFs4
000AF4B7 EC03                       	smpsPSGAlterVol     $03
000AF4B9 B7                         	dc.b	nFs4
000AF4BA ECF5                       	smpsPSGAlterVol     $F5
000AF4BC B7                         	dc.b	nFs4
000AF4BD EC02                       	smpsPSGAlterVol     $02
000AF4BF B7                         	dc.b	nFs4
000AF4C0 EC03                       	smpsPSGAlterVol     $03
000AF4C2 B7                         	dc.b	nFs4
000AF4C3 EC03                       	smpsPSGAlterVol     $03
000AF4C5 B7                         	dc.b	nFs4
000AF4C6 EC03                       	smpsPSGAlterVol     $03
000AF4C8 B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000AF4CC ECF7                       	smpsPSGAlterVol     $F7
000AF4CE A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000AF4DA A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000AF4E6 A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000AF4F2 A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000AF4FE 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000AF50A F2                         	smpsStop
000AF50B                            
000AF50B                            MerrysLittleLamb_PSG2:
000AF50B 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000AF512 EC02                       	smpsPSGAlterVol     $02
000AF514 A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000AF520 E101                       	smpsAlterNote       $01
000AF522 AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000AF526 E101                       	smpsAlterNote       $01
000AF528 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000AF52C E101                       	smpsAlterNote       $01
000AF52E AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000AF532 E101                       	smpsAlterNote       $01
000AF534 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000AF538 E101                       	smpsAlterNote       $01
000AF53A AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000AF53E E101                       	smpsAlterNote       $01
000AF540 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AF544 E101                       	smpsAlterNote       $01
000AF546 AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000AF54A E101                       	smpsAlterNote       $01
000AF54C AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AF550 E101                       	smpsAlterNote       $01
000AF552 AB04 80                    	dc.b	nFs3, $04, nRst
000AF555 E101                       	smpsAlterNote       $01
000AF557 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AF55B E101                       	smpsAlterNote       $01
000AF55D AB04 80                    	dc.b	nFs3, $04, nRst
000AF560 E101                       	smpsAlterNote       $01
000AF562 AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000AF568 F2                         	smpsStop
000AF569                            
000AF569                            MerrysLittleLamb_PSG3:
000AF569 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000AF56F F3E7                       	smpsPSGform         $E7
000AF571 E108                       	smpsAlterNote       $08
000AF573 0002                       	dc.b	nMaxPSG, $02
000AF575 EC01                       	smpsPSGAlterVol     $01
000AF577 E108                       	smpsAlterNote       $08
000AF579 0005                       	dc.b	nMaxPSG, $05
000AF57B EC01                       	smpsPSGAlterVol     $01
000AF57D E108                       	smpsAlterNote       $08
000AF57F 0008                       	dc.b	nMaxPSG, $08
000AF581 EC01                       	smpsPSGAlterVol     $01
000AF583 E108                       	smpsAlterNote       $08
000AF585 00                         	dc.b	nMaxPSG
000AF586 EC01                       	smpsPSGAlterVol     $01
000AF588 E108                       	smpsAlterNote       $08
000AF58A 00                         	dc.b	nMaxPSG
000AF58B EC01                       	smpsPSGAlterVol     $01
000AF58D E108                       	smpsAlterNote       $08
000AF58F 0007                       	dc.b	nMaxPSG, $07
000AF591 EC01                       	smpsPSGAlterVol     $01
000AF593 E108                       	smpsAlterNote       $08
000AF595 0005                       	dc.b	nMaxPSG, $05
000AF597 EC01                       	smpsPSGAlterVol     $01
000AF599 E108                       	smpsAlterNote       $08
000AF59B 0007                       	dc.b	nMaxPSG, $07
000AF59D EC01                       	smpsPSGAlterVol     $01
000AF59F E108                       	smpsAlterNote       $08
000AF5A1 0004                       	dc.b	nMaxPSG, $04
000AF5A3 EC01                       	smpsPSGAlterVol     $01
000AF5A5 E108                       	smpsAlterNote       $08
000AF5A7 0007                       	dc.b	nMaxPSG, $07
000AF5A9 EC01                       	smpsPSGAlterVol     $01
000AF5AB E108                       	smpsAlterNote       $08
000AF5AD 0006                       	dc.b	nMaxPSG, $06
000AF5AF EC01                       	smpsPSGAlterVol     $01
000AF5B1 E108                       	smpsAlterNote       $08
000AF5B3 0009                       	dc.b	nMaxPSG, $09
000AF5B5 EC01                       	smpsPSGAlterVol     $01
000AF5B7 E108                       	smpsAlterNote       $08
000AF5B9 0007                       	dc.b	nMaxPSG, $07
000AF5BB EC01                       	smpsPSGAlterVol     $01
000AF5BD E108                       	smpsAlterNote       $08
000AF5BF 0001                       	dc.b	nMaxPSG, $01
000AF5C1 ECFF                       	smpsPSGAlterVol     $FF
000AF5C3 E108                       	smpsAlterNote       $08
000AF5C5 00                         	dc.b	nMaxPSG
000AF5C6 EC01                       	smpsPSGAlterVol     $01
000AF5C8 E108                       	smpsAlterNote       $08
000AF5CA 0009                       	dc.b	nMaxPSG, $09
000AF5CC EC01                       	smpsPSGAlterVol     $01
000AF5CE E108                       	smpsAlterNote       $08
000AF5D0 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000AF5D7 F2                         	smpsStop
000AF5D8                            
000AF5D8                            MerrysLittleLamb_DAC:
000AF5D8 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000AF5E4 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000AF5F0 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000AF5FC 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000AF608 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000AF614 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000AF620 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000AF62C 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000AF638 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000AF644 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000AF650 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000AF65C 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000AF668 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000AF674 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000AF680 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000AF68C 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000AF698 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000AF6A4 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000AF6B0 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000AF6BC 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000AF6C8 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000AF6D4 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000AF6E0 F2                         	smpsStop
000AF6E1                            
000AF6E1                            MerrysLittleLamb_Voices:
000AF6E1                            ;	Voice $00
000AF6E1                            ;	$00
000AF6E1                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000AF6E1                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000AF6E1                            	smpsVcAlgorithm     $00
000AF6E1                            	smpsVcFeedback      $00
000AF6E1                            	smpsVcUnusedBits    $00
000AF6E1                            	smpsVcDetune        $07, $07, $07, $07
000AF6E1                            	smpsVcCoarseFreq    $00, $00, $00, $00
000AF6E1                            	smpsVcRateScale     $00, $00, $00, $00
000AF6E1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AF6E1                            	smpsVcAmpMod        $00, $00, $00, $00
000AF6E1                            	smpsVcDecayRate1    $1F, $00, $00, $00
000AF6E1                            	smpsVcDecayRate2    $12, $00, $00, $00
000AF6E1                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000AF6E1                            	smpsVcReleaseRate   $0F, $00, $00, $00
000AF6E1 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000AF6FA                            
000AF6FA                            ;	Voice $01
000AF6FA                            ;	$25
000AF6FA                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000AF6FA                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000AF6FA                            	smpsVcAlgorithm     $05
000AF6FA                            	smpsVcFeedback      $04
000AF6FA                            	smpsVcUnusedBits    $00
000AF6FA                            	smpsVcDetune        $07, $00, $00, $00
000AF6FA                            	smpsVcCoarseFreq    $01, $01, $01, $01
000AF6FA                            	smpsVcRateScale     $00, $00, $00, $00
000AF6FA                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000AF6FA                            	smpsVcAmpMod        $00, $00, $00, $00
000AF6FA                            	smpsVcDecayRate1    $03, $0B, $06, $08
000AF6FA                            	smpsVcDecayRate2    $00, $00, $00, $00
000AF6FA                            	smpsVcDecayLevel    $00, $0A, $04, $04
000AF6FA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AF6FA 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000AF713                            
000AF713                            
000AF714 00                         		even
000AF714                            Music8F:	incbin	sound\music8F.bin ; Game Over
000AFD54 00                         		even
000AFD54                            Music90:	incbin	sound\music90.bin ; Continue
000B00EE 00                         		even
000B00EE                            Music91:	include	sound\mus91.asm ; Megurine Luka I mean Credits
000B00EE                            Mus91_Credits_Header:
000B00EE =00000001                  smpsHeaderStartSong = 1
000B00EE 0000                       	smpsHeaderVoice     Mus91_Credits_Voices
000B00F0 0603                       	smpsHeaderChan      $06, $03
000B00F2 0133                       	smpsHeaderTempo     $01, $33
000B00F4                            
000B00F8 0000 F412                  	smpsHeaderFM        Mus91_Credits_FM1,	$F4, $12
000B00FC 0000 000B                  	smpsHeaderFM        Mus91_Credits_FM2,	$00, $0B
000B0100 0000 F414                  	smpsHeaderFM        Mus91_Credits_FM3,	$F4, $14
000B0104 0000 F408                  	smpsHeaderFM        Mus91_Credits_FM4,	$F4, $08
000B0108 0000 F420                  	smpsHeaderFM        Mus91_Credits_FM5,	$F4, $20
000B010C 0000 D001 0000             	smpsHeaderPSG       Mus91_Credits_PSG1,	$D0, $01, $00, $00
000B0112 0000 D003 0000             	smpsHeaderPSG       Mus91_Credits_PSG2,	$D0, $03, $00, $00
000B0118 0000 0003 0004             	smpsHeaderPSG       Mus91_Credits_PSG3,	$00, $03, $00, fTone_04
000B011E                            ;	this is just a rip of the track
000B011E                            ;	ripper, 	part,		joke
000B011E                            ;	undecided, 	intro,		undecided
000B011E                            ;	coninight, 	ghz,		luka luka night fever -FM1 done
000B011E                            ;	coninight, 	lz,		the cleveland show (callback) - COMPLETE!
000B011E                            ;	undecided, 	mz,		undecided
000B011E                            ;	carlos, 	slz,		meltdown
000B011E                            ;	undecided, 	sbz,		undecided
000B011E                            ;	undecided, 	ccz,		undecided
000B011E                            ;	undecided, 	ending,		undecided
000B011E                            
000B011E                            ; FM1 Data
000B011E                            Mus91_Credits_FM1:
000B011E E201                       	smpsNop             $01
000B0120 8060                       	dc.b	nRst, $60
000B0124 E6F8                       	smpsAlterVol        $F8
000B0126 E806                       	smpsNoteFill        $06
000B0128 F800 00                    	smpsCall            Mus91_Credits_Call11
000B012B E0C0                       	smpsPan             panCenter, $00
000B012D E800                       	smpsNoteFill        $00
000B0131 F00D 0107 04               	smpsModSet          $0D, $01, $07, $04
000B0136                            ; conis turn
000B0136 F800 00                    	smpsCall            Mus91_Credits_Call12	;ruka ruka
000B0139 C40C C5C7 18C5 30          	dc.b	nG5, $0C, nAb5, nBb5, $18, nAb5, $30	;โ naito fiibaa
000B0140                            
000B0140 F800 00                    	smpsCall            Mus91_Credits_Call12	;watashi wa 
000B0143 CC0C CAC9 CA               	dc.b	nEb6, $0C, nCs6, nC6, nCs6		;koko ni
000B0148 C9C9 C7C5 80               	dc.b	nC6, nC6, nBb5, nAb5, nRst		;iru kara
000B014D                            
000B014D C2C2 C4C5 C718             	dc.b	nF5, nF5, nG5, nAb5, nBb5, $18		;sukoshi de mo
000B0153 C4C5 0CC7 18C5 80          	dc.b	nG5, nAb5, $0C, nBb5, $18, nAb5, nRst	;shisen o
000B015A                            
000B015A C2C4 C5C7 0C               	dc.b	nF5, nG5, nAb5, nBb5, $0C		;sorashicha
000B015F F800 00                    	smpsCall           Mus91_Credits_DameDameYo	;dame dame yo
000B0162 8060 6060 18               	dc.b	nRst, $60, $60, $60, $18
000B0167 F800 00                    	smpsCall           Mus91_Credits_DameDameYo	;dame dame yo
000B016A                            ;	dc.b	nRst, $30
000B016A                            ; conis turn again
000B016A F4                         	smpsModOff
000B016B E201                       	smpsNop             $01
000B016F E602                       	smpsAlterVol        $02
000B0171 C10C C4C1                  	dc.b	nE5, $0C, nG5, nE5			;My name is
000B0175                            ;cut for tempo change
000B0175 EA0F                       	smpsSetTempoMod     $0F
000B0177                            ;perfect now continue
000B0177 C409 C4C6 0C               	dc.b	nG5, $09, nG5, nA5, $0C			;Cleveland Brown
000B017C                            
000B017C C106 C103 BFBD 06          	dc.b	nE5, $06, nE5, $03, nD5, nC5, $06	;and I am
000B0183 BD09 BDBA 0680             	dc.b	nC5, $09, nC5, nA4, $06, nRst		;proud to be
000B0189                            
000B0189 CD06 CBC8                  	dc.b	nE6, $06, nD6, nB5			; and silence
000B018D CB09 C9C6 0C               	dc.b	nD6, $09, nC6, nA5, $0C
000B0192                            
000B0192 C806 C603 C4C6 06          	dc.b	nB5, $06, nA5, $03, nG5, nA5, $06
000B0199 C609 C6C8 0680 0C          	dc.b	nA5, $09, nA5, nB5, $06, nRst, $0C
000B01A0                            
000B01A0 C9CB 04C9 CBC9 24          	dc.b	nC6, nD6, $04, nC6, nD6, nC6, $24	;welcome back to labyrinth zone from sonic 1
000B01A7 E9F4                       	smpsAlterPitch      $F4
000B01A9 E609                       	smpsAlterVol        $09
000B01AD 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000B01B4 F800 00                    	smpsCall            Mus91_Credits_Call0C
000B01B9 E6EB                       	smpsAlterVol        $EB
000B01BB 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000B01C0 F800 00                    	smpsCall            Mus91_Credits_Call0D
000B01C3 CD1E D906 D518 8024        	dc.b	nE6, $1E, nE7, $06, nC7, $18, nRst, $24
000B01CB E201                       	smpsNop             $01
000B01CD EA0A                       	smpsSetTempoMod     $0A
000B01D1 E90C                       	smpsAlterPitch      $0C
000B01D3 E60B                       	smpsAlterVol        $0B
000B01D5 F800 00                    	smpsCall            Mus91_Credits_Call0E
000B01D8 E201                       	smpsNop             $01
000B01DA EA07                       	smpsSetTempoMod     $07
000B01DC 8060                       	dc.b	nRst, $60
000B01DE E201                       	smpsNop             $01
000B01E0 EA03                       	smpsSetTempoMod     $03
000B01E2 8030                       	dc.b	nRst, $30
000B01E6 E60E                       	smpsAlterVol        $0E
000B01E8 8004 CE08 CD03 80CB 80C9+  	dc.b	nRst, $04, nF6, $08, nE6, $03, nRst, nD6, nRst, nC6, nRst, nD6
000B01F4 80C9 04C6 8002 C780 04C7+  	dc.b	nRst, nC6, $04, nA5, nRst, $02, nBb5, nRst, $04, nBb5, $08, nC6
000B0200 0380 C780 C604 C780 02C9+  	dc.b	$03, nRst, nBb5, nRst, nA5, $04, nBb5, nRst, $02, nC6, $0E, nRst
000B020C 06CD 0280 04CD 0CCE CD0A+  	dc.b	$06, nE6, $02, nRst, $04, nE6, $0C, nF6, nE6, $0A, nD6, $02
000B0218 E201                       	smpsNop             $01
000B021A EA04                       	smpsSetTempoMod     $04
000B021C E6F5                       	smpsAlterVol        $F5
000B0220 8060                       	dc.b	nRst, $60
000B0222 F800 00                    	smpsCall            Mus91_Credits_Call07
000B0225 E609                       	smpsAlterVol        $09
000B0227 E103                       	smpsAlterNote       $03
000B022B F000 0106 04               	smpsModSet          $00, $01, $06, $04
000B0230 F800 00                    	smpsCall            Mus91_Credits_Call0B
000B0233 E6EF                       	smpsAlterVol        $EF
000B0237 E102                       	smpsAlterNote       $02
000B0239 966C E760                  	dc.b	nA1, $6C, smpsNoAttack, $60
000B023D E201                       	smpsNop             $01
000B023F F2                         	smpsStop
000B0240                            
000B0240                            Mus91_Credits_Call12:
000B0240                            	;whats the name of the pink haired vocaloid just askin'
000B0240                            	;and twice as well
000B0240                            	;them:
000B0240 C218 C9C2 C9               	dc.b	nF5, $18, nC6, nF5, nC6
000B0245 E3                         	smpsReturn
000B0246                            
000B0246                            Mus91_Credits_DameDameYo:
000B0246 C418 C50C C4C5 C2          	dc.b	nG5, $18, nAb5, $0C, nG5, nAb5, nF5	
000B024D E3                         	smpsReturn
000B024E                            
000B024E                            Mus91_Credits_Call07:
000B024E 800C CA15 8003 CA06 80CB+  	dc.b	nRst, $0C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
000B025A 03C8 1880 06CA 0680 CA80+  	dc.b	$03, nB5, $18, nRst, $06, nCs6, $06, nRst, nCs6, nRst, nCs6, nRst
000B0266 C680 C40F 8003 C818 8006   	dc.b	nA5, nRst, nG5, $0F, nRst, $03, nB5, $18, nRst, $06
000B0270 F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Call07
000B0275 E3                         	smpsReturn
000B0276                            
000B0276                            ; FM2 Data
000B0276                            Mus91_Credits_FM2:
000B0276 8060                       	dc.b	nRst, $60
000B027A                            
000B027A                            Mus91_Credits_Loop0F:
000B027A A70C A7B0 B0AC ACAE AEA7+  	dc.b	nD3, $0C, nD3, nB3, nB3, nG3, nG3, nA3, nA3, nD3, nD3, nA3
000B0286 AEAB ABAC ACA5 A5AC ACAB+  	dc.b	nA3, nFs3, nFs3, nG3, nG3, nC3, nC3, nG3, nG3, nFs3, nFs3, nG3
000B0292 ACA2 A2A2 A2A7 A7A7 A9     	dc.b	nG3, nA2, nA2, nA2, nA2, nD3, nD3, nD3, nE3
000B029B F700 02FF DB               	smpsLoop            $00, $02, Mus91_Credits_Loop0F
000B02A2                            
000B02A2                            Mus91_Credits_Loop10:
000B02A2 E805                       	smpsNoteFill        $05
000B02A4 AA0C                       	dc.b	nF3, $0C
000B02A6 F800 00                    	smpsCall            Mus91_Credits_Call0F
000B02A9 E805                       	smpsNoteFill        $05
000B02AB A90C 0C0C 0C0C             	dc.b	nE3, $0C, $0C, $0C, $0C, $0C
000B02B1 E800                       	smpsNoteFill        $00
000B02B3 A5A7 A9                    	dc.b	nC3, nD3, nE3
000B02B6 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop10
000B02BB E805                       	smpsNoteFill        $05
000B02BD AA                         	dc.b	nF3
000B02BE F800 00                    	smpsCall            Mus91_Credits_Call0F
000B02C1 E805                       	smpsNoteFill        $05
000B02C3 A9                         	dc.b	nE3
000B02C4 F800 00                    	smpsCall            Mus91_Credits_Call0F
000B02C7 E805                       	smpsNoteFill        $05
000B02C9 A7                         	dc.b	nD3
000B02CA F800 00                    	smpsCall            Mus91_Credits_Call0F
000B02CD E805                       	smpsNoteFill        $05
000B02CF A50C 0C0C 0C0C             	dc.b	nC3, $0C, $0C, $0C, $0C, $0C
000B02D5 E800                       	smpsNoteFill        $00
000B02D7 A0A2 A4                    	dc.b	nG2, nA2, nB2
000B02DA E805                       	smpsNoteFill        $05
000B02DC                            
000B02DC                            Mus91_Credits_Loop11:
000B02DC A5                         	dc.b	nC3
000B02DD F700 18FF FB               	smpsLoop            $00, $18, Mus91_Credits_Loop11
000B02E2 E800                       	smpsNoteFill        $00
000B02E4 A506 80A5 0CA2 0680 A20C+  	dc.b	nC3, $06, nRst, nC3, $0C, nA2, $06, nRst, nA2, $0C, nBb2, $06
000B02F0 80A3 0CA4 0680 A40C        	dc.b	nRst, nBb2, $0C, nB2, $06, nRst, nB2, $0C
000B02FA E9E8                       	smpsAlterPitch      $E8
000B02FC E602                       	smpsAlterVol        $02
000B02FE                            
000B02FE                            Mus91_Credits_Loop12:
000B02FE B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nA4, $09
000B030A 8003 BC0F 8003 BA80 B809+  	dc.b	nRst, $03, nB4, $0F, nRst, $03, nA4, nRst, nG4, $09, nRst, $03
000B0316 B509 8003                  	dc.b	nE4, $09, nRst, $03
000B031A E905                       	smpsAlterPitch      $05
000B031C F700 02FF DE               	smpsLoop            $00, $02, Mus91_Credits_Loop12
000B0321 E9F6                       	smpsAlterPitch      $F6
000B0323 B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nE4, $09
000B032F 8003 B106 8012 B518        	dc.b	nRst, $03, nC4, $06, nRst, $12, nE4, $18
000B0337 E601                       	smpsAlterVol        $01
000B033B                            
000B033B                            Mus91_Credits_Loop13:
000B033B AE03 80AE 06B5 0380 B506+  	dc.b	nA3, $03, nRst, nA3, $06, nE4, $03, nRst, nE4, $06, nD4, $03
000B0347 80B3 06B5 0380 B506        	dc.b	nRst, nD4, $06, nE4, $03, nRst, nE4, $06
000B034F F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop13
000B0354                            
000B0354                            Mus91_Credits_Loop14:
000B0354 B303 80B3 06BA 0380 BA06+  	dc.b	nD4, $03, nRst, nD4, $06, nA4, $03, nRst, nA4, $06, nF4, $03
000B0360 80B6 06BA 0380 BA06        	dc.b	nRst, nF4, $06, nA4, $03, nRst, nA4, $06
000B0368 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop14
000B036D B003 80B0 06B6 0380 B606+  	dc.b	nB3, $03, nRst, nB3, $06, nF4, $03, nRst, nF4, $06, nD4, $03
000B0379 80B3 06B6 0380 B606 B503+  	dc.b	nRst, nD4, $06, nF4, $03, nRst, nF4, $06, nE4, $03, nRst, nE4
000B0385 06BC 0380 BC06 B903 80B9+  	dc.b	$06, nB4, $03, nRst, nB4, $06, nAb4, $03, nRst, nAb4, $06, nB4
000B0391 0380 BC06 AE03 80AE 06B5+  	dc.b	$03, nRst, nB4, $06, nA3, $03, nRst, nA3, $06, nE4, $03, nRst
000B039D B506 B103 80B1 06B5 0380+  	dc.b	nE4, $06, nC4, $03, nRst, nC4, $06, nE4, $03, nRst, nE4, $06
000B03A9 AE03 8009 8024             	dc.b	nA3, $03, nRst, $09, nRst, $24
000B03AF E6F8                       	smpsAlterVol        $F8
000B03B1 B106 8003 B180 06B1 1280+  	dc.b	nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst, $06, nC4
000B03BD 0280 01B1 0280 01AF 0680+  	dc.b	$02, nRst, $01, nC4, $02, nRst, $01, nBb3, $06, nRst, $03, nBb3
000B03C9 0380 06AE 1280 06AE 0280+  	dc.b	$03, nRst, $06, nA3, $12, nRst, $06, nA3, $02, nRst, $01, nA3
000B03D5 0280 01                    	dc.b	$02, nRst, $01
000B03D8                            
000B03D8                            Mus91_Credits_Loop15:
000B03D8 B306 8003 B306 8003 B302+  	dc.b	nD4, $06, nRst, $03, nD4, $06, nRst, $03, nD4, $02, nRst, $01
000B03E4 B302 8001                  	dc.b	nD4, $02, nRst, $01
000B03E8 E9FF                       	smpsAlterPitch      $FF
000B03EA F700 04FF EA               	smpsLoop            $00, $04, Mus91_Credits_Loop15
000B03EF E904                       	smpsAlterPitch      $04
000B03F1 AC06 8003 AC80 06AC 1280+  	dc.b	nG3, $06, nRst, $03, nG3, nRst, $06, nG3, $12, nRst, $06, nG3
000B03FD 0280 01AC 0280 01B0 0680+  	dc.b	$02, nRst, $01, nG3, $02, nRst, $01, nB3, $06, nRst, $03, nB3
000B0409 8006 B012 8006 B302 8001+  	dc.b	nRst, $06, nB3, $12, nRst, $06, nD4, $02, nRst, $01, nB3, $02
000B0415 8001 B106 8003 B180 06B1+  	dc.b	nRst, $01, nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst
000B0421 06B5 0280 01B6 0280 01B8+  	dc.b	$06, nE4, $02, nRst, $01, nF4, $02, nRst, $01, nG4, $06, nRst
000B042D AC24                       	dc.b	nG3, $24
000B0431 E90C                       	smpsAlterPitch      $0C
000B0433 E607                       	smpsAlterVol        $07
000B0435 E806                       	smpsNoteFill        $06
000B0437                            
000B0437                            Mus91_Credits_Loop16:
000B0437 F800 00                    	smpsCall            Mus91_Credits_Call10
000B043A E906                       	smpsAlterPitch      $06
000B043C F800 00                    	smpsCall            Mus91_Credits_Call10
000B043F E9FF                       	smpsAlterPitch      $FF
000B0441 F800 00                    	smpsCall            Mus91_Credits_Call10
000B0444 E902                       	smpsAlterPitch      $02
000B0446 F800 00                    	smpsCall            Mus91_Credits_Call10
000B0449 E9F9                       	smpsAlterPitch      $F9
000B044B F702 02FF E8               	smpsLoop            $02, $02, Mus91_Credits_Loop16
000B0450 E800                       	smpsNoteFill        $00
000B0452 E9F4                       	smpsAlterPitch      $F4
000B0454 E6FC                       	smpsAlterVol        $FC
000B0458 8030 8030 BA03 80BA 80B8+  	dc.b	nRst, $30, nRst, $30, nA4, $03, nRst, nA4, nRst, nG4, nRst, nG4
000B0464 80B6 80B6 80B5 80B5 0280+  	dc.b	nRst, nF4, nRst, nF4, nRst, nE4, nRst, nE4, $02, nRst, nBb4
000B046F E602                       	smpsAlterVol        $02
000B0471 8004 BB08 BD03 80BB 80BA+  	dc.b	nRst, $04, nBb4, $08, nC5, $03, nRst, nBb4, nRst, nA4, $06, nRst
000B047D BB04 BA80 02B8 8004 B808+  	dc.b	nBb4, $04, nA4, nRst, $02, nG4, nRst, $04, nG4, $08, nA4, $03
000B0489 80B8 80B6 80B6 80B8 04B6+  	dc.b	nRst, nG4, nRst, nF4, nRst, nF4, nRst, nG4, $04, nF4, nRst, $02
000B0495 B580 04B5 08B5 0380 B580+  	dc.b	nE4, nRst, $04, nE4, $08, nE4, $03, nRst, nE4, nRst, nA4, $09
000B04A1 8003 BA0A B302             	dc.b	nRst, $03, nA4, $0A, nD4, $02
000B04A7 E90C                       	smpsAlterPitch      $0C
000B04A9 E6FE                       	smpsAlterVol        $FE
000B04AD 8060                       	dc.b	nRst, $60
000B04AF                            
000B04AF                            Mus91_Credits_Loop17:
000B04AF AE06 80AE 80A9 80A9 80AC+  	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $12, nFs3
000B04BB 0CAC 06AB 0CAE 0680 AE80+  	dc.b	$0C, nG3, $06, nFs3, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst
000B04C7 A980 B312 B20C B306 B20C   	dc.b	nE3, nRst, nD4, $12, nCs4, $0C, nD4, $06, nCs4, $0C
000B04D1 F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Loop17
000B04D6 AC06 80A9 80AA 80AB 80AC+  	dc.b	nG3, $06, nRst, nE3, nRst, nF3, nRst, nFs3, nRst, nG3, $06, nG3
000B04E2 06A9 0680 AA80 AC80 A906+  	dc.b	$06, nE3, $06, nRst, nF3, nRst, nG3, nRst, nE3, $06, nRst, nE3
000B04EE 80AD 80AD 80B0 0680 B080+  	dc.b	nRst, nAb3, nRst, nAb3, nRst, nB3, $06, nRst, nB3, nRst, nD4, nRst
000B04FA B380 800C AE12 8006 AE12+  	dc.b	nD4, nRst, nRst, $0C, nA3, $12, nRst, $06, nA3, $12, nAb3, $12
000B0506 AE06 80                    	dc.b	nA3, $06, nRst
000B0509 E6FD                       	smpsAlterVol        $FD
000B050B A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000B050F F2                         	smpsStop
000B0510                            
000B0510                            	; Unused data
000B0510                            	; Could this be a blanked-out 'smpsNop $01'? It's near an smpsStop.
000B0510 0001                       	dc.b	$00, $01
000B0512                            
000B0512                            Mus91_Credits_Call0F:
000B0512 0C0C 0C0C 0C0C             	dc.b	$0C, $0C, $0C, $0C, $0C, $0C
000B0518 E800                       	smpsNoteFill        $00
000B051A 0C                         	dc.b	$0C
000B051B E3                         	smpsReturn
000B051C                            
000B051C                            Mus91_Credits_Call10:
000B051C B103 B1AC ACAE AEAC AC     	dc.b	nC4, $03, nC4, nG3, nG3, nA3, nA3, nG3, nG3
000B0525 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Call10
000B052A E3                         	smpsReturn
000B052B                            
000B052B                            ; FM3 Data
000B052B                            Mus91_Credits_FM3:
000B052B 8060                       	dc.b	nRst, $60
000B052D F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_FM3
000B0534 E601                       	smpsAlterVol        $01
000B0536 E040                       	smpsPan             panRight, $00
000B0538 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000B0544 D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000B0549                            
000B0549                            Mus91_Credits_Loop0C:
000B0549 E080                       	smpsPan             panLeft, $00
000B054B D9                         	dc.b	nE7
000B054C E040                       	smpsPan             panRight, $00
000B054E D5                         	dc.b	nC7
000B054F E602                       	smpsAlterVol        $02
000B0551 F700 0DFF F4               	smpsLoop            $00, $0D, Mus91_Credits_Loop0C
000B0556 E0C0                       	smpsPan             panCenter, $00
000B055A E6E5                       	smpsAlterVol        $E5
000B055C E9E8                       	smpsAlterPitch      $E8
000B055E D006 D2D5 0CD2 804E 80D0+  	dc.b	nG6, $06, nA6, nC7, $0C, nA6, nRst, $4E, nRst, nG6, $06, nA6
000B056A D50C D980 4E80 D006 D2D5+  	dc.b	nC7, $0C, nE7, nRst, $4E, nRst, nG6, $06, nA6, nC7, $0C, nA6
000B0576 8036 80D5 0680 12D2 18D0+  	dc.b	nRst, $36, nRst, nC7, $06, nRst, $12, nA6, $18, nG6, $06, nRst
000B0582 D280 D580                  	dc.b	nA6, nRst, nC7, nRst
000B0586 F4                         	smpsModOff
000B0589 E6FE                       	smpsAlterVol        $FE
000B058B                            
000B058B                            Mus91_Credits_Loop0D:
000B058B C901 E7C8 1B80 08C7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $1B, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $1B
000B0597 8008                       	dc.b	nRst, $08
000B0599 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop0D
000B059E C901 E7C8 0B80 0CC7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $0B, nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $0B
000B05AA 800C CA01 E7C9 1B80 08C9+  	dc.b	nRst, $0C, nCs6, $01, smpsNoAttack, nC6, $1B, nRst, $08, nC6, $01, smpsNoAttack
000B05B6 C824 E718 E75A 8006        	dc.b	nB5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000B05BE E918                       	smpsAlterPitch      $18
000B05C0 8060 8080 30               	dc.b	nRst, $60, nRst, nRst, $30
000B05C5 E9E8                       	smpsAlterPitch      $E8
000B05C9 E90C                       	smpsAlterPitch      $0C
000B05CB E603                       	smpsAlterVol        $03
000B05CD E102                       	smpsAlterNote       $02
000B05CF 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000B05D6 F800 00                    	smpsCall            Mus91_Credits_Call0C
000B05DB E90C                       	smpsAlterPitch      $0C
000B05DD E60B                       	smpsAlterVol        $0B
000B05DF 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000B05E4 F800 00                    	smpsCall            Mus91_Credits_Call0D
000B05E9 E6EC                       	smpsAlterVol        $EC
000B05EB 8006                       	dc.b	nRst, $06
000B05ED E114                       	smpsAlterNote       $14
000B05EF C401 E7                    	dc.b	nG5, $01, smpsNoAttack
000B05F2 E100                       	smpsAlterNote       $00
000B05F4 02C6 03                    	dc.b	$02, nA5, $03
000B05F7 E805                       	smpsNoteFill        $05
000B05F9 C903 C906 C603 C9          	dc.b	nC6, $03, nC6, $06, nA5, $03, nC6
000B0600 E800                       	smpsNoteFill        $00
000B0602 C9                         	dc.b	nC6
000B0603 E6FC                       	smpsAlterVol        $FC
000B0605 E933                       	smpsAlterPitch      $33
000B0609 B403                       	dc.b	nEb4, $03
000B060B E607                       	smpsAlterVol        $07
000B060D B4                         	dc.b	nEb4
000B060E E607                       	smpsAlterVol        $07
000B0610 B4                         	dc.b	nEb4
000B0611 E607                       	smpsAlterVol        $07
000B0613 B4                         	dc.b	nEb4
000B0616 E6EF                       	smpsAlterVol        $EF
000B0618 E9CD                       	smpsAlterPitch      $CD
000B061A CD03 CED0 8009             	dc.b	nE6, $03, nF6, nG6, nRst, $09
000B0620 E1EC                       	smpsAlterNote       $EC
000B0622 D501 E7                    	dc.b	nC7, $01, smpsNoAttack
000B0625 E100                       	smpsAlterNote       $00
000B0627 F02C 0104 04               	smpsModSet          $2C, $01, $04, $04
000B062C D523                       	dc.b	nC7, $23
000B062E F4                         	smpsModOff
000B0631 E6FF                       	smpsAlterVol        $FF
000B0633 E103                       	smpsAlterNote       $03
000B0635 F800 00                    	smpsCall            Mus91_Credits_Call0E
000B0638 E100                       	smpsAlterNote       $00
000B063C E609                       	smpsAlterVol        $09
000B063E 8030 8030 802E C202 8004+  	dc.b	nRst, $30, nRst, $30, nRst, $2E, nF5, $02, nRst, $04, nF5, $08
000B064A C203 80C2 80C1 0380 13BF+  	dc.b	nF5, $03, nRst, nF5, nRst, nE5, $03, nRst, $13, nD5, $02, nRst
000B0656 04BF 08BF 0380 BF80 BD03+  	dc.b	$04, nD5, $08, nD5, $03, nRst, nD5, nRst, nC5, $03, nRst, $15
000B0662 8004 D208 D003 80D0 80CE+  	dc.b	nRst, $04, nA6, $08, nG6, $03, nRst, nG6, nRst, nF6, nRst, nF6
000B066E 80CD 04CE 02CD 04CB 02     	dc.b	nRst, nE6, $04, nF6, $02, nE6, $04, nD6, $02
000B0679 E6F9                       	smpsAlterVol        $F9
000B067B 8060                       	dc.b	nRst, $60
000B067D                            
000B067D                            Mus91_Credits_Loop0E:
000B067D CD06 80CD 80CA 80CA 80CB+  	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6, $12, nD6
000B0689 1ECD 0680 CD80 CA80 CA80+  	dc.b	$1E, nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nG6, $12
000B0695 D01E                       	dc.b	nG6, $1E
000B0697 F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0E
000B069C 800C CB12 8006 CB80 CA12+  	dc.b	nRst, $0C, nD6, $12, nRst, $06, nD6, nRst, nCs6, $12, nD6, nCs6
000B06A8 0CC5 18C8 CBD1 800C CD80+  	dc.b	$0C, nAb5, $18, nB5, nD6, nAb6, nRst, $0C, nE6, nRst, nE6, $12
000B06B4 CCCD 0680                  	dc.b	nEb6, nE6, $06, nRst
000B06BA E6F8                       	smpsAlterVol        $F8
000B06BC E103                       	smpsAlterNote       $03
000B06BE A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000B06C2 F2                         	smpsStop
000B06C3                            
000B06C3                            Mus91_Credits_Call14:
000B06C3 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000B06CF D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000B06D4 E3                         	smpsReturn
000B06D5                            
000B06D5                            ; FM4 Data
000B06D5                            Mus91_Credits_FM4:
000B06D7 8060                       	dc.b	nRst, $60
000B06D9 E608                       	smpsAlterVol        $08
000B06DB F800 00                    	smpsCall            Mus91_Credits_Call08
000B06DE C30C C380 80C6 C680 80     	dc.b	nFs5, $0C, nFs5, nRst, nRst, nA5, nA5, nRst, nRst
000B06E7 F800 00                    	smpsCall            Mus91_Credits_Call08
000B06EA C624 2418                  	dc.b	nA5, $24, $24, $18
000B06EE E080                       	smpsPan             panLeft, $00
000B06F0 F800 00                    	smpsCall            Mus91_Credits_Call03
000B06F3 E6F2                       	smpsAlterVol        $F2
000B06F5                            
000B06F5                            Mus91_Credits_Loop09:
000B06F5 C501 E7C4 1B80 08C3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $1B, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $1B
000B0701 8008                       	dc.b	nRst, $08
000B0703 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop09
000B0708 C501 E7C4 0B80 0CC3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $0B, nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $0B
000B0714 800C C701 E7C6 1B80 08C5+  	dc.b	nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $1B, nRst, $08, nAb5, $01, smpsNoAttack
000B0720 C424 E718 E75A 8006        	dc.b	nG5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000B0728 E918                       	smpsAlterPitch      $18
000B072A 8060 8080 5A               	dc.b	nRst, $60, nRst, nRst, $5A
000B072F E0C0                       	smpsPan             panCenter, $00
000B0733 E9F4                       	smpsAlterPitch      $F4
000B0735 E605                       	smpsAlterVol        $05
000B0737                            
000B0737                            Mus91_Credits_Loop0A:
000B0737 D409 8003 D480 D506 80D4+  	dc.b	nB6, $09, nRst, $03, nB6, nRst, nC7, $06, nRst, nB6, $0C, nRst
000B0743 06                         	dc.b	$06
000B0744 F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop0A
000B0749 8012 D503 800F D503 801B+  	dc.b	nRst, $12, nC7, $03, nRst, $0F, nC7, $03, nRst, $1B, nC7, $03
000B0755 800F D503 8009 CE09 8003+  	dc.b	nRst, $0F, nC7, $03, nRst, $09, nF6, $09, nRst, $03, nF6, nRst
000B0761 D206 80CE 0C80 06D1 0980+  	dc.b	nA6, $06, nRst, nF6, $0C, nRst, $06, nAb6, $09, nRst, $03, nAb6
000B076D 80D4 0680 D10C 8006 8080+  	dc.b	nRst, nB6, $06, nRst, nAb6, $0C, nRst, $06, nRst, nRst, $0C, nC7
000B0779 0380 0FD5 0380 0FD5 0380+  	dc.b	$03, nRst, $0F, nC7, $03, nRst, $0F, nC7, $03, nRst, $2D
000B0784 E9F4                       	smpsAlterPitch      $F4
000B0786 E603                       	smpsAlterVol        $03
000B078A E080                       	smpsPan             panLeft, $00
000B078C F800 00                    	smpsCall            Mus91_Credits_Call09
000B0791 E6F6                       	smpsAlterVol        $F6
000B0793 E918                       	smpsAlterPitch      $18
000B0795 F800 00                    	smpsCall            Mus91_Credits_Call0A
000B0798 800C                       	dc.b	nRst, $0C
000B079A E1EC                       	smpsAlterNote       $EC
000B079C C602                       	dc.b	nA5, $02
000B079E E100                       	smpsAlterNote       $00
000B07A0 E70A 8003 C680 80C6 8009   	dc.b	smpsNoAttack, $0A, nRst, $03, nA5, nRst, nRst, nA5, nRst, $09
000B07AA F800 00                    	smpsCall            Mus91_Credits_Call0A
000B07AD E1EC                       	smpsAlterNote       $EC
000B07AF C602                       	dc.b	nA5, $02
000B07B1 E100                       	smpsAlterNote       $00
000B07B3 0A80 06                    	dc.b	$0A, nRst, $06
000B07B6 F018 0107 04               	smpsModSet          $18, $01, $07, $04
000B07BB E1E2                       	smpsAlterNote       $E2
000B07BD C602 E7                    	dc.b	nA5, $02, smpsNoAttack
000B07C0 E100                       	smpsAlterNote       $00
000B07C2 1C                         	dc.b	$1C
000B07C3 E100                       	smpsAlterNote       $00
000B07C5 E103                       	smpsAlterNote       $03
000B07C7 F800 00                    	smpsCall            Mus91_Credits_Call06
000B07CA E100                       	smpsAlterNote       $00
000B07CC E0C0                       	smpsPan             panCenter, $00
000B07D0 E6F5                       	smpsAlterVol        $F5
000B07D2 8060                       	dc.b	nRst, $60
000B07D4                            
000B07D4                            Mus91_Credits_Loop0B:
000B07D4 CA06 80CA 80C6 80C6 80C8+  	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5, $12, nB5
000B07E0 1ECA 0680 CA80 C680 C680+  	dc.b	$1E, nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nD6, $12
000B07EC CB1E                       	dc.b	nD6, $1E
000B07EE F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0B
000B07F5 E103                       	smpsAlterNote       $03
000B07F7 E608                       	smpsAlterVol        $08
000B07F9 F800 00                    	smpsCall            Mus91_Credits_Call0B
000B07FE E6F0                       	smpsAlterVol        $F0
000B0800 F000 0106 04               	smpsModSet          $00, $01, $06, $04
000B0805 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000B0809 F2                         	smpsStop
000B080A                            
000B080A                            Mus91_Credits_Call08:
000B080A C824 2418 C624 2418 C424+  	dc.b	nB5, $24, $24, $18, nA5, $24, $24, $18, nG5, $24, $24, $18
000B0816 E3                         	smpsReturn
000B0817                            
000B0817                            Mus91_Credits_Call03:
000B0819 E9E8                       	smpsAlterPitch      $E8
000B081B E60D                       	smpsAlterVol        $0D
000B081D                            
000B081D                            Mus91_Credits_Loop2D:
000B081D F800 00                    	smpsCall            Mus91_Credits_Call1B
000B0820 BFBF                       	dc.b	nD5, nD5
000B0822 F700 02FF F7               	smpsLoop            $00, $02, Mus91_Credits_Loop2D
000B0827 F800 00                    	smpsCall            Mus91_Credits_Call1B
000B082A B5B5 BDBD BABA B6B6 B3B3+  	dc.b	nE4, nE4, nC5, nC5, nA4, nA4, nF4, nF4, nD4, nD4, nB4, nB4
000B0836 E603                       	smpsAlterVol        $03
000B0838 E90C                       	smpsAlterPitch      $0C
000B083C D018 D2D4                  	dc.b	nG6, $18, nA6, nB6
000B0840 E9F4                       	smpsAlterPitch      $F4
000B0844 E3                         	smpsReturn
000B0845                            
000B0845                            Mus91_Credits_Call1B:
000B0845 C10C C1BD BDBA BAB6 B6BF+  	dc.b	nE5, $0C, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5, nB4
000B0851 BCB8 B8                    	dc.b	nB4, nG4, nG4
000B0854 E3                         	smpsReturn
000B0855                            
000B0855                            Mus91_Credits_Call0A:
000B0855 800C                       	dc.b	nRst, $0C
000B0857 E1EC                       	smpsAlterNote       $EC
000B0859 C402                       	dc.b	nG5, $02
000B085B E100                       	smpsAlterNote       $00
000B085D E706 8001 C403 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nG5, $03, nRst, $18, nRst, $0C
000B0867 E1EC                       	smpsAlterNote       $EC
000B0869 CA02                       	dc.b	nCs6, $02
000B086B E100                       	smpsAlterNote       $00
000B086D E706 8001 CA03 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nCs6, $03, nRst, $18, nRst, $0C
000B0877 E1EC                       	smpsAlterNote       $EC
000B0879 C902                       	dc.b	nC6, $02
000B087B E100                       	smpsAlterNote       $00
000B087D E706 8001 C903 8018        	dc.b	smpsNoAttack, $06, nRst, $01, nC6, $03, nRst, $18
000B0885 E3                         	smpsReturn
000B0886                            
000B0886                            Mus91_Credits_Call06:
000B0886 E608                       	smpsAlterVol        $08
000B088A 8030 8030                  	dc.b	nRst, $30, nRst, $30
000B088E E501                       	smpsChanTempoDiv    $01
000B0890 F800 00                    	smpsCall            Mus91_Credits_Call17
000B0893 E502                       	smpsChanTempoDiv    $02
000B0897 F001 0101 04               	smpsModSet          $01, $01, $01, $04
000B089C CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000B08A8 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000B08B4 C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000B08C0 0CCD D60A D702             	dc.b	$0C, nE6, nCs7, $0A, nD7, $02
000B08C6 E3                         	smpsReturn
000B08C7                            
000B08C7                            Mus91_Credits_Call17:
000B08C7 AF01 E7AE 0480 07AF 01E7+  	dc.b	nBb3, $01, smpsNoAttack, nA3, $04, nRst, $07, nBb3, $01, smpsNoAttack, nA3, $04
000B08D3 8007 B101 E7B0 0480 07B1+  	dc.b	nRst, $07, nC4, $01, smpsNoAttack, nB3, $04, nRst, $07, nC4, $01, smpsNoAttack
000B08DF B004 8007 B201 E7B1 0480+  	dc.b	nB3, $04, nRst, $07, nCs4, $01, smpsNoAttack, nC4, $04, nRst, $07, nCs4
000B08EB 01E7 B104 8007 B301 E7B2+  	dc.b	$01, smpsNoAttack, nC4, $04, nRst, $07, nD4, $01, smpsNoAttack, nCs4, $04, nRst
000B08F7 07B3 01E7 B204 8003        	dc.b	$07, nD4, $01, smpsNoAttack, nCs4, $04, nRst, $03
000B08FF E3                         	smpsReturn
000B0900                            
000B0900                            Mus91_Credits_Call0B:
000B0900 800C D0D4 D7DB 8006 DB0C+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, nRst, $06, nFs7, $0C, nG7, $06
000B090C DB0C DD54 800C DE80 DE80+  	dc.b	nFs7, $0C, nAb7, $54, nRst, $0C, nA7, nRst, nA7, nRst, $12, nAb7
000B0918 DE0C                       	dc.b	nA7, $0C
000B091A E3                         	smpsReturn
000B091B                            
000B091B                            ; FM5 Data
000B091B                            Mus91_Credits_FM5:
000B091D 8060                       	dc.b	nRst, $60
000B091F E6F0                       	smpsAlterVol        $F0
000B0921 F800 00                    	smpsCall            Mus91_Credits_Call02
000B0924 BF0C 0C80 18C3 0C0C 8018   	dc.b	nD5, $0C, $0C, nRst, $18, nFs5, $0C, $0C, nRst, $18
000B092E F800 00                    	smpsCall            Mus91_Credits_Call02
000B0931 C324 2418                  	dc.b	nFs5, $24, $24, $18
000B0935 E040                       	smpsPan             panRight, $00
000B0937 F8FE DE                    	smpsCall            Mus91_Credits_Call03
000B093A E6F2                       	smpsAlterVol        $F2
000B093C                            
000B093C                            Mus91_Credits_Loop07:
000B093C C201 E7C1 1B80 08C0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $1B, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $1B
000B0948 8008                       	dc.b	nRst, $08
000B094A F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop07
000B094F C201 E7C1 0B80 0CC0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $0B, nRst, $0C, nEb5, $01, smpsNoAttack, nD5, $0B
000B095B 800C C301 E7C2 1B80 08C2+  	dc.b	nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $1B, nRst, $08, nF5, $01, smpsNoAttack
000B0967 C124 E718 E75A 8006        	dc.b	nE5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000B096F E918                       	smpsAlterPitch      $18
000B0971 E0C0                       	smpsPan             panCenter, $00
000B0973 E603                       	smpsAlterVol        $03
000B0975 E90C                       	smpsAlterPitch      $0C
000B0979 804E B803 BABD 80BA 8051+  	dc.b	nRst, $4E, nG4, $03, nA4, nC5, nRst, nA4, nRst, $51, nA5, $03
000B0985 C2BD 80C2 805D             	dc.b	nF5, nC5, nRst, nF5, nRst, $5D
000B098D E9E8                       	smpsAlterPitch      $E8
000B098F E602                       	smpsAlterVol        $02
000B0991                            
000B0991                            Mus91_Credits_Loop08:
000B0991 D009 8003 D080 D206 80D0+  	dc.b	nG6, $09, nRst, $03, nG6, nRst, nA6, $06, nRst, nG6, $0C, nRst
000B099D 06                         	dc.b	$06
000B099E F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop08
000B09A3 8012 D203 800F D203 801B+  	dc.b	nRst, $12, nA6, $03, nRst, $0F, nA6, $03, nRst, $1B, nA6, $03
000B09AF 800F D203 8009 CB09 8003+  	dc.b	nRst, $0F, nA6, $03, nRst, $09, nD6, $09, nRst, $03, nD6, nRst
000B09BB CE06 80CB 0C80 06CD 0980+  	dc.b	nF6, $06, nRst, nD6, $0C, nRst, $06, nE6, $09, nRst, $03, nE6
000B09C7 80D1 0680 CD0C 8018 D203+  	dc.b	nRst, nAb6, $06, nRst, nE6, $0C, nRst, $18, nA6, $03, nRst, $0F
000B09D3 D203 800F D203 802D        	dc.b	nA6, $03, nRst, $0F, nA6, $03, nRst, $2D
000B09DD E040                       	smpsPan             panRight, $00
000B09DF E9F4                       	smpsAlterPitch      $F4
000B09E1 E603                       	smpsAlterVol        $03
000B09E3 F800 00                    	smpsCall            Mus91_Credits_Call04
000B09E8 E924                       	smpsAlterPitch      $24
000B09EA E6F4                       	smpsAlterVol        $F4
000B09EC F800 00                    	smpsCall            Mus91_Credits_Call05
000B09EF CDCE D0                    	dc.b	nE6, nF6, nG6
000B09F2 F800 00                    	smpsCall            Mus91_Credits_Call05
000B09F5 D0CE CD                    	dc.b	nG6, nF6, nE6
000B09F8 E9F4                       	smpsAlterPitch      $F4
000B09FA F8FE 8A                    	smpsCall            Mus91_Credits_Call06
000B09FD E0C0                       	smpsPan             panCenter, $00
000B0A01 E103                       	smpsAlterNote       $03
000B0A03 E6F8                       	smpsAlterVol        $F8
000B0A05 8060                       	dc.b	nRst, $60
000B0A07 F8F8 45                    	smpsCall            Mus91_Credits_Call07
000B0A0A E600                       	smpsAlterVol        $00
000B0A0E 8060 800C CD06 80D4 CD06+  	dc.b	nRst, $60, nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C
000B0A1A CD06 80D4 CD06 8018        	dc.b	nE6, $06, nRst, nB6, nE6, $06, nRst, $18
000B0A22 E605                       	smpsAlterVol        $05
000B0A24 800C AE80 AE               	dc.b	nRst, $0C, nA3, nRst, nA3
000B0A29 F2                         	smpsStop
000B0A2A                            
000B0A2A                            Mus91_Credits_Call02:
000B0A2A C424 2418 C324 2418 C124+  	dc.b	nG5, $24, $24, $18, nFs5, $24, $24, $18, nE5, $24, $24, $18
000B0A36 E3                         	smpsReturn
000B0A37                            
000B0A37                            ; PSG1 Data
000B0A37                            Mus91_Credits_PSG1:
000B0A37 8060                       	dc.b	nRst, $60
000B0A39 F508                       	smpsPSGvoice        fTone_08
000B0A3B EC03                       	smpsPSGAlterVol     $03
000B0A3D E806                       	smpsNoteFill        $06
000B0A3F F800 00                    	smpsCall            Mus91_Credits_Call11
000B0A42 F501                       	smpsPSGvoice        fTone_01
000B0A44 E800                       	smpsNoteFill        $00
000B0A46 ECFD                       	smpsPSGAlterVol     $FD
000B0A48                            
000B0A48                            Mus91_Credits_Loop2A:
000B0A48 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000B0A54 C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000B0A5C F700 03FF E8               	smpsLoop            $00, $03, Mus91_Credits_Loop2A
000B0A61 8018 C606 801E C60C 8018+  	dc.b	nRst, $18, nA5, $06, nRst, $1E, nA5, $0C, nRst, $18, nRst, $18
000B0A6D C406 801E C40C 8018        	dc.b	nG5, $06, nRst, $1E, nG5, $0C, nRst, $18
000B0A75 F505                       	smpsPSGvoice        fTone_05
000B0A77 F00E 0101 03               	smpsModSet          $0E, $01, $01, $03
000B0A7C E810                       	smpsNoteFill        $10
000B0A7E C124 BFC1 BFC1 0C80 BF80+  	dc.b	nE5, $24, nD5, nE5, nD5, nE5, $0C, nRst, nD5, nRst, nF5, $24
000B0A8A E800                       	smpsNoteFill        $00
000B0A8C C160 E73C                  	dc.b	nE5, $60, smpsNoAttack, $3C
000B0A90 F4                         	smpsModOff
000B0A91 F508                       	smpsPSGvoice        fTone_08 ; changed from 9 to 8 for cleveland rip
000B0A93 EC01                       	smpsPSGAlterVol     $01
000B0A95                            
000B0A95                            Mus91_Credits_Loop2B:
000B0A95 8006 CD0C CDCD CD06 80CD+  	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, nE6, $0C, nE6
000B0AA1 CD03 0906                  	dc.b	nE6, $03, $09, $06
000B0AA5 E905                       	smpsAlterPitch      $05
000B0AA7 F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop2B
000B0AAC E9F6                       	smpsAlterPitch      $F6
000B0AAE 8006 CD0C CDCD CD06 8030   	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, $30
000B0AB8 F508                       	smpsPSGvoice        fTone_08
000B0ABA EC01                       	smpsPSGAlterVol     $01
000B0ABC F800 00                    	smpsCall            Mus91_Credits_Call15
000B0ABF 8002 8030                  	dc.b	nRst, $02, nRst, $30
000B0AC3 EC03                       	smpsPSGAlterVol     $03
000B0AC5 E9F4                       	smpsAlterPitch      $F4
000B0AC7 F505                       	smpsPSGvoice        fTone_05
000B0AC9 F800 00                    	smpsCall            Mus91_Credits_Call09
000B0ACC E90C                       	smpsAlterPitch      $0C
000B0ACE ECFC                       	smpsPSGAlterVol     $FC
000B0AD0 F500                       	smpsPSGvoice        $00
000B0AD2 F800 00                    	smpsCall            Mus91_Credits_Call16
000B0AD5 800C C280 03C2 8080 C280+  	dc.b	nRst, $0C, nF5, nRst, $03, nF5, nRst, nRst, nF5, nRst, $09
000B0AE0 F800 00                    	smpsCall            Mus91_Credits_Call16
000B0AE3 C20C 8006 C21E             	dc.b	nF5, $0C, nRst, $06, nF5, $1E
000B0AE9 F506                       	smpsPSGvoice        fTone_06
000B0AEB EC04                       	smpsPSGAlterVol     $04
000B0AED 8030 8030                  	dc.b	nRst, $30, nRst, $30
000B0AF1 E501                       	smpsChanTempoDiv    $01
000B0AF3 F8FD D2                    	smpsCall            Mus91_Credits_Call17
000B0AF6 E502                       	smpsChanTempoDiv    $02
000B0AF8 CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000B0B04 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000B0B10 C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000B0B1C 0CCD D60A D702 8060 8080+  	dc.b	$0C, nE6, nCs7, $0A, nD7, $02, nRst, $60, nRst, nRst, nRst, nRst
000B0B28 ECFF                       	smpsPSGAlterVol     $FF
000B0B2A 800C C812 8006 C880 C612+  	dc.b	nRst, $0C, nB5, $12, nRst, $06, nB5, nRst, nA5, $12, nB5, nA5
000B0B36 0CC1 18C5 C8CB 800C CA80+  	dc.b	$0C, nE5, $18, nAb5, nB5, nD6, nRst, $0C, nCs6, nRst, nCs6, $12
000B0B42 C9CA 06                    	dc.b	nC6, nCs6, $06
000B0B45 F2                         	smpsStop
000B0B46                            
000B0B46                            Mus91_Credits_Call16:
000B0B46 800C C107 8002 C103 8018+  	dc.b	nRst, $0C, nE5, $07, nRst, $02, nE5, $03, nRst, $18, nRst, $0C
000B0B52 C707 8002 C703 8018 800C+  	dc.b	nBb5, $07, nRst, $02, nBb5, $03, nRst, $18, nRst, $0C, nA5, $07
000B0B5E 8002 C603 8018             	dc.b	nRst, $02, nA5, $03, nRst, $18
000B0B64 E3                         	smpsReturn
000B0B65                            
000B0B65                            ; PSG2 Data
000B0B65                            Mus91_Credits_PSG2:
000B0B65 8060                       	dc.b	nRst, $60
000B0B67 F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_PSG2
000B0B6C 8002                       	dc.b	nRst, $02
000B0B6E F8FB 53                    	smpsCall            Mus91_Credits_Call14
000B0B71 ECFE                       	smpsPSGAlterVol     $FE
000B0B73 F501                       	smpsPSGvoice        fTone_01
000B0B75 8016 CD06 801E CD0C 8018+  	dc.b	nRst, $16, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000B0B81 CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000B0B89                            Mus91_Credits_Loop24:
000B0B89 8018 CD06 801E CD0C 8018+  	dc.b	nRst, $18, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000B0B95 CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000B0B9D F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop24
000B0BA2 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000B0BAE C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000B0BB6 E806                       	smpsNoteFill        $06
000B0BB8 F506                       	smpsPSGvoice        fTone_06
000B0BBA                            
000B0BBA                            Mus91_Credits_Loop25:
000B0BBA D50C D4D2 D0               	dc.b	nC7, $0C, nB6, nA6, nG6
000B0BBF F700 08FF F7               	smpsLoop            $00, $08, Mus91_Credits_Loop25
000B0BC4 E800                       	smpsNoteFill        $00
000B0BC6 F508                       	smpsPSGvoice        fTone_08 ; changed from 9 to 8 for cleveland rip
000B0BC8 EC01                       	smpsPSGAlterVol     $01
000B0BCA                            
000B0BCA                            Mus91_Credits_Loop26:
000B0BCA 8006 D00C D0D0 D006 80D0+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, nG6, $0C, nG6
000B0BD6 D003 0906                  	dc.b	nG6, $03, $09, $06
000B0BDA E905                       	smpsAlterPitch      $05
000B0BDC F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop26
000B0BE1 E9F6                       	smpsAlterPitch      $F6
000B0BE3 8006 D00C D0D0 D006 8030+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, $30, nRst, $02
000B0BEF E101                       	smpsAlterNote       $01
000B0BF1 EC03                       	smpsPSGAlterVol     $03
000B0BF3 F800 00                    	smpsCall            Mus91_Credits_Call15
000B0BF6 E100                       	smpsAlterNote       $00
000B0BF8 8030                       	dc.b	nRst, $30
000B0BFA EC01                       	smpsPSGAlterVol     $01
000B0BFC E9F4                       	smpsAlterPitch      $F4
000B0BFE F505                       	smpsPSGvoice        fTone_05
000B0C00 F800 00                    	smpsCall            Mus91_Credits_Call04
000B0C03 E90C                       	smpsAlterPitch      $0C
000B0C05 ECFD                       	smpsPSGAlterVol     $FD
000B0C07 E803                       	smpsNoteFill        $03
000B0C09                            
000B0C09                            Mus91_Credits_Loop27:
000B0C09 D503 D5DC D5DA D5D9 D5     	dc.b	nC7, $03, nC7, nG7, nC7, nF7, nC7, nE7, nC7
000B0C12 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop27
000B0C17                            
000B0C17                            Mus91_Credits_Loop28:
000B0C17 D3D3 DAD3 D8D3 D6D3        	dc.b	nBb6, nBb6, nF7, nBb6, nEb7, nBb6, nCs7, nBb6
000B0C1F F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop28
000B0C24                            
000B0C24                            Mus91_Credits_Loop29:
000B0C24 D2D2 D9D2 D7D2 D5D2        	dc.b	nA6, nA6, nE7, nA6, nD7, nA6, nC7, nA6
000B0C2C F700 04FF F4               	smpsLoop            $00, $04, Mus91_Credits_Loop29
000B0C31 F701 02FF D4               	smpsLoop            $01, $02, Mus91_Credits_Loop27
000B0C36 8060 8080 8080 80          	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst
000B0C3D                            ;	; These rests are unnecessary, and cause the following notes to play way too late.
000B0C3D                            ;	; Delete these three notes to fix this.
000B0C3D                            ;	dc.b	nRst, nRst, nRst
000B0C3D                            ;	; This erroneous FM-only command causes the following notes to be inaudible.
000B0C3D                            ;	smpsAlterVol        $0C
000B0C3D                            ; there we go i fixed it - coni
000B0C3D E102                       	smpsAlterNote       $02
000B0C3F EC02                       	smpsPSGAlterVol     $02
000B0C41 800C CD06 80D4 CD06 800C+  	dc.b	nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C, nE6, $06
000B0C4D 80D4 CD                    	dc.b	nRst, nB6, nE6
000B0C50 F2                         	smpsStop
000B0C51                            
000B0C51                            ; PSG3 Data
000B0C51                            Mus91_Credits_PSG3:
000B0C51 F3E7                       	smpsPSGform         $E7
000B0C53 E804                       	smpsNoteFill        $04
000B0C55                            
000B0C55                            Mus91_Credits_Loop18:
000B0C55 000C                       	dc.b	nMaxPSG, $0C
000B0C57 F700 48FF FA               	smpsLoop            $00, $48, Mus91_Credits_Loop18
000B0C5C E806                       	smpsNoteFill        $06
000B0C5E                            
000B0C5E                            Mus91_Credits_Loop19:
000B0C5E 0C                         	dc.b	$0C
000B0C5F F700 60FF FB               	smpsLoop            $00, $60, Mus91_Credits_Loop19
000B0C64 ECFF                       	smpsPSGAlterVol     $FF
000B0C66 F800 00                    	smpsCall            Mus91_Credits_Call13
000B0C69 E80E                       	smpsNoteFill        $0E
000B0C6B 0C                         	dc.b	$0C
000B0C6C E803                       	smpsNoteFill        $03
000B0C6E 0606 0303 0603 0306        	dc.b	$06, $06, $03, $03, $06, $03, $03, $06
000B0C76                            
000B0C76                            Mus91_Credits_Loop1A:
000B0C76 F800 00                    	smpsCall            Mus91_Credits_Call13
000B0C79 F700 04FF F9               	smpsLoop            $00, $04, Mus91_Credits_Loop1A
000B0C7E F509                       	smpsPSGvoice        fTone_09
000B0C80 EC01                       	smpsPSGAlterVol     $01
000B0C82 E90B                       	smpsAlterPitch      $0B
000B0C84                            
000B0C84                            Mus91_Credits_Loop1B:
000B0C84 AE06 AEB5 B5B3 B3B5 B5     	dc.b	nA3, $06, nA3, nE4, nE4, nD4, nD4, nE4, nE4
000B0C8D F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop1B
000B0C92                            
000B0C92                            Mus91_Credits_Loop1C:
000B0C92 B3B3 BABA B6B6 BABA        	dc.b	nD4, nD4, nA4, nA4, nF4, nF4, nA4, nA4
000B0C9A F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop1C
000B0C9F B0B0 B6B6 B3B3 B6B6 B5B5+  	dc.b	nB3, nB3, nF4, nF4, nD4, nD4, nF4, nF4, nE4, nE4, nB4, nB4
000B0CAB B9B9 BCBC AEAE B5B5 B1B1+  	dc.b	nAb4, nAb4, nB4, nB4, nA3, nA3, nE4, nE4, nC4, nC4, nE4, nE4
000B0CB7 AE06 801E                  	dc.b	nA3, $06, nRst, $1E
000B0CBB E802                       	smpsNoteFill        $02
000B0CBD E9F5                       	smpsAlterPitch      $F5
000B0CBF                            
000B0CBF                            Mus91_Credits_Loop1D:
000B0CBF F504                       	smpsPSGvoice        fTone_04
000B0CC1 0003 03                    	dc.b	nMaxPSG, $03, $03
000B0CC4 EC02                       	smpsPSGAlterVol     $02
000B0CC6 F508                       	smpsPSGvoice        fTone_08
000B0CC8 E808                       	smpsNoteFill        $08
000B0CCA 06                         	dc.b	$06
000B0CCB E803                       	smpsNoteFill        $03
000B0CCD ECFE                       	smpsPSGAlterVol     $FE
000B0CCF F700 1EFF EC               	smpsLoop            $00, $1E, Mus91_Credits_Loop1D
000B0CD4 8024                       	dc.b	nRst, $24
000B0CD6                            
000B0CD6                            Mus91_Credits_Loop1E:
000B0CD6 F504                       	smpsPSGvoice        fTone_04
000B0CD8 0303                       	dc.b	$03, $03
000B0CDA EC02                       	smpsPSGAlterVol     $02
000B0CDC F508                       	smpsPSGvoice        fTone_08
000B0CDE E808                       	smpsNoteFill        $08
000B0CE0 06                         	dc.b	$06
000B0CE1 E803                       	smpsNoteFill        $03
000B0CE3 ECFE                       	smpsPSGAlterVol     $FE
000B0CE5 F700 20FF ED               	smpsLoop            $00, $20, Mus91_Credits_Loop1E
000B0CEA 8030                       	dc.b	nRst, $30
000B0CEC E801                       	smpsNoteFill        $01
000B0CEE F504                       	smpsPSGvoice        fTone_04
000B0CF0 EC03                       	smpsPSGAlterVol     $03
000B0CF2                            
000B0CF2                            Mus91_Credits_Loop1F:
000B0CF2 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000B0CF6 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop1F
000B0CFB                            
000B0CFB                            Mus91_Credits_Loop20:
000B0CFB 8004 0002                  	dc.b	nRst, $04, nMaxPSG, $02
000B0CFF F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop20
000B0D04 ECFF                       	smpsPSGAlterVol     $FF
000B0D06                            
000B0D06                            Mus91_Credits_Loop21:
000B0D06 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000B0D0A F700 18FF F8               	smpsLoop            $00, $18, Mus91_Credits_Loop21
000B0D0F ECFE                       	smpsPSGAlterVol     $FE
000B0D11                            
000B0D11                            Mus91_Credits_Loop22:
000B0D11 0004 8000                  	dc.b	nMaxPSG, $04, nRst, nMaxPSG
000B0D15 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop22
000B0D1A                            
000B0D1A                            Mus91_Credits_Loop23:
000B0D1A E803                       	smpsNoteFill        $03
000B0D1C 0C                         	dc.b	$0C
000B0D1D E80C                       	smpsNoteFill        $0C
000B0D1F 0C                         	dc.b	$0C
000B0D20 E803                       	smpsNoteFill        $03
000B0D22 0C                         	dc.b	$0C
000B0D23 E80C                       	smpsNoteFill        $0C
000B0D25 0C                         	dc.b	$0C
000B0D26 F700 0DFF F0               	smpsLoop            $00, $0D, Mus91_Credits_Loop23
000B0D2B E803                       	smpsNoteFill        $03
000B0D2D 06                         	dc.b	$06
000B0D2E E80E                       	smpsNoteFill        $0E
000B0D30 12                         	dc.b	$12
000B0D31 E803                       	smpsNoteFill        $03
000B0D33 0C                         	dc.b	$0C
000B0D34 E80F                       	smpsNoteFill        $0F
000B0D36 0C                         	dc.b	$0C
000B0D37 F2                         	smpsStop
000B0D38                            
000B0D38                            ; DAC Data
000B0D38                            Mus91_Credits_DAC:
000B0D38 8206 8282 8282 0C06 0C06+  	dc.b	dSnare, $06, dSnare, dSnare, dSnare, dSnare, $0C, $06, $0C, $06, $0C, $0C
000B0D44 0C                         	dc.b	$0C
000B0D45 F800 00                    	smpsCall            Mus91_Credits_Call00
000B0D48 8118 820C 8281 1882 0C82   	dc.b	dKick, $18, dSnare, $0C, dSnare, dKick, $18, dSnare, $0C, dSnare
000B0D52 F800 00                    	smpsCall            Mus91_Credits_Call00
000B0D55 810C 8282 8282 8282 82     	dc.b	dKick, $0C, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000B0D5E                            
000B0D5E                            Mus91_Credits_Loop00:
000B0D5E 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000B0D67 F700 07FF F3               	smpsLoop            $00, $07, Mus91_Credits_Loop00
000B0D6C 8118 820C 8118 820C 0C0C   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, $0C, $0C
000B0D76                            
000B0D76                            Mus91_Credits_Loop01:
000B0D76 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000B0D7F F700 03FF F3               	smpsLoop            $00, $03, Mus91_Credits_Loop01
000B0D84 8118 820C 8118 820C 8282   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, dSnare, dSnare
000B0D8E EB02                       	smpsSetTempoDiv     $02
000B0D90                            
000B0D90                            Mus91_Credits_Loop02:
000B0D90 8112 8106 810C 82          	dc.b	dKick, $12, dKick, $06, dKick, $0C, dSnare
000B0D97 F700 05FF F5               	smpsLoop            $00, $05, Mus91_Credits_Loop02
000B0D9C 8112 8106 8106 8282 82     	dc.b	dKick, $12, dKick, $06, dKick, $06, dSnare, dSnare, dSnare
000B0DA5                            
000B0DA5                            Mus91_Credits_Loop03:
000B0DA5 810C                       	dc.b	dKick, $0C
000B0DA7 F700 18FF FA               	smpsLoop            $00, $18, Mus91_Credits_Loop03
000B0DAC 810C 8181 8106 8102 8182+  	dc.b	dKick, $0C, dKick, dKick, dKick, $06, dKick, $02, dKick, dSnare, dSnare, $0C
000B0DB8 8024                       	dc.b	nRst, $24
000B0DBA                            
000B0DBA                            Mus91_Credits_Loop04:
000B0DBA 810C 8181 81               	dc.b	dKick, $0C, dKick, dKick, dKick
000B0DBF F700 07FF F7               	smpsLoop            $00, $07, Mus91_Credits_Loop04
000B0DC4 810C 8182 0382 8282 8282+  	dc.b	dKick, $0C, dKick, dSnare, $03, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000B0DD0 F800 00                    	smpsCall            Mus91_Credits_Call01
000B0DD3 8802 8101 8905 8201 8805+  	dc.b	dHiTimpani, $02, dKick, $01, dMidTimpani, $05, dSnare, $01, dHiTimpani, $05, dMidTimpani, $06
000B0DDF F800 00                    	smpsCall            Mus91_Credits_Call01
000B0DE2 8902 8201 8805 8201 8905+  	dc.b	dMidTimpani, $02, dSnare, $01, dHiTimpani, $05, dSnare, $01, dMidTimpani, $05, dSnare, $01
000B0DEE 8802 8203 8203 8281 8182+  	dc.b	dHiTimpani, $02, dSnare, $03, dSnare, $03, dSnare, dKick, dKick, dSnare, dSnare, dKick
000B0DFA 8181 8209 8206 0303 8109+  	dc.b	dKick, dKick, dSnare, $09, dSnare, $06, $03, $03, dKick, $09, $03, dSnare
000B0E06 0981 0606 0382 0603 0382+  	dc.b	$09, dKick, $06, $06, $03, dSnare, $06, $03, $03, dSnare, $06, dSnare
000B0E12 8282 8282 8204 0204 8102   	dc.b	dSnare, dSnare, dSnare, dSnare, dSnare, $04, $02, $04, dKick, $02
000B0E1C                            
000B0E1C                            Mus91_Credits_Loop05:
000B0E1C 8004 8108 8206 8181 0C82+  	dc.b	nRst, $04, dKick, $08, dSnare, $06, dKick, dKick, $0C, dSnare, $0A, dKick
000B0E28 02                         	dc.b	$02
000B0E29 F700 03FF EF               	smpsLoop            $00, $03, Mus91_Credits_Loop05
000B0E2E EB01                       	smpsSetTempoDiv     $01
000B0E30 8018 8214 8104 820C 8282+  	dc.b	nRst, $18, dSnare, $14, dKick, $04, dSnare, $0C, dSnare, dSnare, $0C, $08
000B0E3C 8104                       	dc.b	dKick, $04
000B0E3E                            
000B0E3E                            Mus91_Credits_Loop06:
000B0E3E 810C 8281 82               	dc.b	dKick, $0C, dSnare, dKick, dSnare
000B0E43 F701 03FF F7               	smpsLoop            $01, $03, Mus91_Credits_Loop06
000B0E48 810C 8281 0680 0282 8282+  	dc.b	dKick, $0C, dSnare, dKick, $06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare
000B0E54 03                         	dc.b	$03
000B0E55 F700 03FF E5               	smpsLoop            $00, $03, Mus91_Credits_Loop06
000B0E5A 810C 8281 8281 0682 1282+  	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, $06, dSnare, $12, dSnare, $0C, dKick
000B0E66 F2                         	smpsStop
000B0E67                            
000B0E67                            Mus91_Credits_Call00:
000B0E67 8118 820C 8118 810C 8281   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dKick, $0C, dSnare, dKick
000B0E71 F700 03FF F2               	smpsLoop            $00, $03, Mus91_Credits_Call00
000B0E76 E3                         	smpsReturn
000B0E77                            
000B0E77                            Mus91_Credits_Call01:
000B0E77 810C 8209 8106 0381 0188+  	dc.b	dKick, $0C, dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani
000B0E83 0382 0188 0B81 0C82 0981+  	dc.b	$03, dSnare, $01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, $03
000B0E8F 8101 8802 8903 8201 880B+  	dc.b	dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare, $01, dHiTimpani, $0B, dKick, $0C
000B0E9B 8209 8106 0381 0188 0289+  	dc.b	dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare
000B0EA7 0188 0B81 0C82 0981 0682+  	dc.b	$01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, dSnare, $01
000B0EB2 E3                         	smpsReturn
000B0EB3                            
000B0EB3                            Mus91_Credits_Call11:
000B0EB3 F800 00                    	smpsCall            Mus91_Credits_Call1A
000B0EB6 C3BF C1C3 BF               	dc.b	nFs5, nD5, nE5, nFs5, nD5
000B0EBB F800 00                    	smpsCall            Mus91_Credits_Call1A
000B0EBE C8C6 C8C9 CB               	dc.b	nB5, nA5, nB5, nC6, nD6
000B0EC3 E3                         	smpsReturn
000B0EC4                            
000B0EC4                            Mus91_Credits_Call1A:
000B0EC4 C80C C4C8 CBC9 C8C6 C8C6+  	dc.b	nB5, $0C, nG5, nB5, nD6, nC6, nB5, nA5, nB5, nA5, nFs5, nA5
000B0ED0 C9C8 C6C4 C6C4 C1C4 C8C6+  	dc.b	nC6, nB5, nA5, nG5, nA5, nG5, nE5, nG5, nB5, nA5, nG5, nFs5
000B0EDC C4C3 C4C6                  	dc.b	nG5, nFs5, nG5, nA5
000B0EE0 E3                         	smpsReturn
000B0EE1                            
000B0EE1                            ; Unused alternate version of Mus91_Credits_Call0B
000B0EE1                            ; Mus91_Credits_CallUnk:
000B0EE1 800C D0D4 D7DB 0C80 06DB+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, $0C, nRst, $06, nFs7, $0C, nG7
000B0EED 06DB 0CD9 6080 0CD0 D4D7+  	dc.b	$06, nFs7, $0C, nE7, $60, nRst, $0C, nG6, nB6, nD7, nFs7, $0C
000B0EF9 8006 DB0C DC06 DB0C DD5D+  	dc.b	nRst, $06, nFs7, $0C, nG7, $06, nFs7, $0C, nAb7, $5D, nRst, $03
000B0F05 DE12 8006 DE12 8006 8006+  	dc.b	nA7, $12, nRst, $06, nA7, $12, nRst, $06, nRst, $06, nAb7, $12
000B0F11 DE06 8012                  	dc.b	nA7, $06, nRst, $12
000B0F15 E3                         	smpsReturn
000B0F16                            
000B0F16                            Mus91_Credits_Call13:
000B0F16 E80E                       	smpsNoteFill        $0E
000B0F18 0C                         	dc.b	$0C
000B0F19 E803                       	smpsNoteFill        $03
000B0F1B 0606 0606 0606             	dc.b	$06, $06, $06, $06, $06, $06
000B0F21 E3                         	smpsReturn
000B0F22                            
000B0F22                            Mus91_Credits_Call0C:
000B0F22 D409 8003 D406 D2          	dc.b	nB6, $09, nRst, $03, nB6, $06, nA6
000B0F29 F700 03FF F5               	smpsLoop            $00, $03, Mus91_Credits_Call0C
000B0F2E D4D2 CDC9 D00C D206 E7CE+  	dc.b	nB6, nA6, nE6, nC6, nG6, $0C, nA6, $06, smpsNoAttack, nF6, $4D, nRst
000B0F3A 01D2 24D4 0CD1 24D4 0980+  	dc.b	$01, nA6, $24, nB6, $0C, nAb6, $24, nB6, $09, nRst, $03, nB6
000B0F46 12D2 1E                    	dc.b	$12, nA6, $1E
000B0F49 E3                         	smpsReturn
000B0F4A                            
000B0F4A                            Mus91_Credits_Call15:
000B0F4A 8030 8080 DA03 D7D2 CED7+  	dc.b	nRst, $30, nRst, nRst, nF7, $03, nD7, nA6, nF6, nD7, nA6, nF6
000B0F56 CBD2 CECB C6CE CBC6 C233+  	dc.b	nD6, nA6, nF6, nD6, nA5, nF6, nD6, nA5, nF5, $33, nRst, $5E
000B0F62 E3                         	smpsReturn
000B0F63                            
000B0F63                            Mus91_Credits_Call0D:
000B0F63 CD2A CD03 CED0 09D2 D306+  	dc.b	nE6, $2A, nE6, $03, nF6, nG6, $09, nA6, nBb6, $06, nA6, $0C
000B0F6F D0CE 1ECE 06CD CE1E CB0C+  	dc.b	nG6, nF6, $1E, nF6, $06, nE6, nF6, $1E, nD6, $0C, nE6, nF6
000B0F7B 2ACB 03CD CE09 D0D1 06D0+  	dc.b	$2A, nD6, $03, nE6, nF6, $09, nG6, nAb6, $06, nG6, $0C, nF6
000B0F87 E3                         	smpsReturn
000B0F88                            
000B0F88                            Mus91_Credits_Call04:
000B0F88 F800 00                    	smpsCall            Mus91_Credits_Call19
000B0F8B CB06 8003 CB80 06CA 1880+  	dc.b	nD6, $06, nRst, $03, nD6, nRst, $06, nCs6, $18, nRst, $06
000B0F96                            
000B0F96                            Mus91_Credits_Loop2C:
000B0F96 CE06 8003 CD06 8003 CB80   	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, nRst
000B0FA0 F700 02FF F2               	smpsLoop            $00, $02, Mus91_Credits_Loop2C
000B0FA5 CE06 8003 CD06 8003 CB18+  	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, $18, nRst, $06
000B0FB1 E9FE                       	smpsAlterPitch      $FE
000B0FB3 F800 00                    	smpsCall            Mus91_Credits_Call19
000B0FB6 E903                       	smpsAlterPitch      $03
000B0FB8 F800 00                    	smpsCall            Mus91_Credits_Call19
000B0FBB E9FF                       	smpsAlterPitch      $FF
000B0FBD 8006                       	dc.b	nRst, $06
000B0FBF E808                       	smpsNoteFill        $08
000B0FC1 D009 0909 09               	dc.b	nG6, $09, $09, $09, $09
000B0FC6 E805                       	smpsNoteFill        $05
000B0FC8 0303                       	dc.b	$03, $03
000B0FCA E800                       	smpsNoteFill        $00
000B0FCC 800C CE24                  	dc.b	nRst, $0C, nF6, $24
000B0FD0 E3                         	smpsReturn
000B0FD1                            
000B0FD1                            Mus91_Credits_Call19:
000B0FD1 CD06 8003 CD80 06CD 1880+  	dc.b	nE6, $06, nRst, $03, nE6, nRst, $06, nE6, $18, nRst, $06
000B0FDC E3                         	smpsReturn
000B0FDD                            
000B0FDD                            Mus91_Credits_Call09:
000B0FDD D006 8003 D080 06D0 1880+  	dc.b	nG6, $06, nRst, $03, nG6, nRst, $06, nG6, $18, nRst, $06, nF6
000B0FE9 0680 03CE 8006 CD18 8006+  	dc.b	$06, nRst, $03, nF6, nRst, $06, nE6, $18, nRst, $06, nA6, $06
000B0FF5 8003 D006 8003 CE80 D206+  	dc.b	nRst, $03, nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03
000B1001 D006 8003 CE80 D206 8003+  	dc.b	nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03, nG6, $06
000B100D 8003 CE18 8006 CE06 8003+  	dc.b	nRst, $03, nF6, $18, nRst, $06, nF6, $06, nRst, $03, nF6, nRst
000B1019 06CE 1880 06D1 0680 03D1+  	dc.b	$06, nF6, $18, nRst, $06, nAb6, $06, nRst, $03, nAb6, nRst, $06
000B1025 D118 8006 8006             	dc.b	nAb6, $18, nRst, $06, nRst, $06
000B102B E808                       	smpsNoteFill        $08
000B102D D409 0909 09               	dc.b	nB6, $09, $09, $09, $09
000B1032 E805                       	smpsNoteFill        $05
000B1034 0303                       	dc.b	$03, $03
000B1036 E800                       	smpsNoteFill        $00
000B1038 800C D224                  	dc.b	nRst, $0C, nA6, $24
000B103C E3                         	smpsReturn
000B103D                            
000B103D                            Mus91_Credits_Call0E:
000B103D F800 00                    	smpsCall            Mus91_Credits_Call18
000B1040 D012 D206 D012 CD0C        	dc.b	nG6, $12, nA6, $06, nG6, $12, nE6, $0C
000B1048 F800 00                    	smpsCall            Mus91_Credits_Call18
000B104B D030 8006                  	dc.b	nG6, $30, nRst, $06
000B104F E3                         	smpsReturn
000B1050                            
000B1050                            Mus91_Credits_Call18:
000B1050 D01E CD06 C9D5 D30C D506+  	dc.b	nG6, $1E, nE6, $06, nC6, nC7, nBb6, $0C, nC7, $06, nBb6, $0C
000B105C D006 D3D2 24CD 06CE        	dc.b	nG6, $06, nBb6, nA6, $24, nE6, $06, nF6
000B1064 E3                         	smpsReturn
000B1065                            
000B1065                            Mus91_Credits_Call05:
000B1065 8003 CDC9 0606 C4C9 09CD+  	dc.b	nRst, $03, nE6, nC6, $06, $06, nG5, nC6, $09, nE6, $09, nRst
000B1071 0680 03CE CA06 06C7 CA09+  	dc.b	$06, nRst, $03, nF6, nCs6, $06, $06, nBb5, nCs6, $09, nF6, $09
000B107D 8006 8003 CDC9 0606 C6C9+  	dc.b	nRst, $06, nRst, $03, nE6, nC6, $06, $06, nA5, nC6, $09, nE6
000B1089 0FCB 0C                    	dc.b	$0F, nD6, $0C
000B108C E3                         	smpsReturn
000B108D                            
000B108D                            Mus91_Credits_Voices:
000B108D                            ;	Voice $00
000B108D                            ;	$20
000B108D                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B108D                            ;	$07, $06, $06, $08, 	$20, $10, $10, $F8, 	$19, $37, $13, $80
000B108D                            	smpsVcAlgorithm     $00
000B108D                            	smpsVcFeedback      $04
000B108D                            	smpsVcUnusedBits    $00
000B108D                            	smpsVcDetune        $03, $03, $03, $03
000B108D                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B108D                            	smpsVcRateScale     $02, $02, $03, $03
000B108D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B108D                            	smpsVcAmpMod        $00, $00, $00, $00
000B108D                            	smpsVcDecayRate1    $06, $09, $06, $07
000B108D                            	smpsVcDecayRate2    $08, $06, $06, $07
000B108D                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B108D                            	smpsVcReleaseRate   $08, $00, $00, $00
000B108D 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000B10A6                            
000B10A6                            ;	Voice $01
000B10A6                            ;	$2C
000B10A6                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000B10A6                            ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$16, $80, $17, $80
000B10A6                            	smpsVcAlgorithm     $04
000B10A6                            	smpsVcFeedback      $05
000B10A6                            	smpsVcUnusedBits    $00
000B10A6                            	smpsVcDetune        $03, $03, $07, $07
000B10A6                            	smpsVcCoarseFreq    $04, $04, $08, $02
000B10A6                            	smpsVcRateScale     $00, $00, $00, $00
000B10A6                            	smpsVcAttackRate    $12, $1F, $12, $1F
000B10A6                            	smpsVcAmpMod        $00, $00, $00, $00
000B10A6                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000B10A6                            	smpsVcDecayRate2    $00, $00, $00, $00
000B10A6                            	smpsVcDecayLevel    $01, $00, $01, $00
000B10A6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B10A6 2C72 7834 341F 121F 1200+  	smpsVcTotalLevel    $00, $17, $00, $16
000B10BF                            
000B10BF                            ;	Voice $02
000B10BF                            ;	$2C
000B10BF                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $00, $00, $00
000B10BF                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000B10BF                            	smpsVcAlgorithm     $04
000B10BF                            	smpsVcFeedback      $05
000B10BF                            	smpsVcUnusedBits    $00
000B10BF                            	smpsVcDetune        $03, $03, $07, $07
000B10BF                            	smpsVcCoarseFreq    $04, $04, $04, $04
000B10BF                            	smpsVcRateScale     $00, $00, $00, $00
000B10BF                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000B10BF                            	smpsVcAmpMod        $00, $00, $00, $00
000B10BF                            	smpsVcDecayRate1    $00, $00, $00, $00
000B10BF                            	smpsVcDecayRate2    $01, $00, $01, $00
000B10BF                            	smpsVcDecayLevel    $03, $00, $03, $00
000B10BF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B10BF 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000B10D8                            
000B10D8                            ;	Voice $03
000B10D8                            ;	$04
000B10D8                            ;	$72, $42, $32, $32, 	$12, $12, $12, $12, 	$00, $08, $00, $08
000B10D8                            ;	$00, $08, $00, $08, 	$0F, $1F, $0F, $1F, 	$23, $80, $23, $80
000B10D8                            	smpsVcAlgorithm     $04
000B10D8                            	smpsVcFeedback      $00
000B10D8                            	smpsVcUnusedBits    $00
000B10D8                            	smpsVcDetune        $03, $03, $04, $07
000B10D8                            	smpsVcCoarseFreq    $02, $02, $02, $02
000B10D8                            	smpsVcRateScale     $00, $00, $00, $00
000B10D8                            	smpsVcAttackRate    $12, $12, $12, $12
000B10D8                            	smpsVcAmpMod        $00, $00, $00, $00
000B10D8                            	smpsVcDecayRate1    $08, $00, $08, $00
000B10D8                            	smpsVcDecayRate2    $08, $00, $08, $00
000B10D8                            	smpsVcDecayLevel    $01, $00, $01, $00
000B10D8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B10D8 0472 4232 3212 1212 1200+  	smpsVcTotalLevel    $00, $23, $00, $23
000B10F1                            
000B10F1                            ;	Voice $04
000B10F1                            ;	$2C
000B10F1                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $07, $00, $07
000B10F1                            ;	$00, $07, $00, $07, 	$00, $38, $00, $38, 	$16, $80, $17, $80
000B10F1                            	smpsVcAlgorithm     $04
000B10F1                            	smpsVcFeedback      $05
000B10F1                            	smpsVcUnusedBits    $00
000B10F1                            	smpsVcDetune        $03, $03, $07, $07
000B10F1                            	smpsVcCoarseFreq    $04, $04, $04, $04
000B10F1                            	smpsVcRateScale     $00, $00, $00, $00
000B10F1                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000B10F1                            	smpsVcAmpMod        $00, $00, $00, $00
000B10F1                            	smpsVcDecayRate1    $07, $00, $07, $00
000B10F1                            	smpsVcDecayRate2    $07, $00, $07, $00
000B10F1                            	smpsVcDecayLevel    $03, $00, $03, $00
000B10F1                            	smpsVcReleaseRate   $08, $00, $08, $00
000B10F1 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000B110A                            
000B110A                            ;	Voice $05
000B110A                            ;	$31
000B110A                            ;	$34, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$0C, $07, $0C, $09
000B110A                            ;	$07, $07, $07, $08, 	$2F, $1F, $1F, $2F, 	$17, $32, $14, $80
000B110A                            	smpsVcAlgorithm     $01
000B110A                            	smpsVcFeedback      $06
000B110A                            	smpsVcUnusedBits    $00
000B110A                            	smpsVcDetune        $03, $03, $03, $03
000B110A                            	smpsVcCoarseFreq    $01, $00, $05, $04
000B110A                            	smpsVcRateScale     $02, $02, $03, $03
000B110A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B110A                            	smpsVcAmpMod        $00, $00, $00, $00
000B110A                            	smpsVcDecayRate1    $09, $0C, $07, $0C
000B110A                            	smpsVcDecayRate2    $08, $07, $07, $07
000B110A                            	smpsVcDecayLevel    $02, $01, $01, $02
000B110A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B110A 3134 3530 31DF DF9F 9F0C+  	smpsVcTotalLevel    $00, $14, $32, $17
000B1123                            
000B1123                            ;	Voice $06
000B1123                            ;	$18
000B1123                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000B1123                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$2C, $22, $14, $80
000B1123                            	smpsVcAlgorithm     $00
000B1123                            	smpsVcFeedback      $03
000B1123                            	smpsVcUnusedBits    $00
000B1123                            	smpsVcDetune        $03, $03, $03, $03
000B1123                            	smpsVcCoarseFreq    $01, $00, $00, $07
000B1123                            	smpsVcRateScale     $02, $00, $03, $02
000B1123                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000B1123                            	smpsVcAmpMod        $00, $00, $00, $00
000B1123                            	smpsVcDecayRate1    $01, $04, $06, $0D
000B1123                            	smpsVcDecayRate2    $05, $03, $0A, $08
000B1123                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000B1123                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1123 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $2C
000B113C                            
000B113C                            ;	Voice $07
000B113C                            ;	$3C
000B113C                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000B113C                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $80, $16, $80
000B113C                            	smpsVcAlgorithm     $04
000B113C                            	smpsVcFeedback      $07
000B113C                            	smpsVcUnusedBits    $00
000B113C                            	smpsVcDetune        $03, $05, $05, $03
000B113C                            	smpsVcCoarseFreq    $00, $00, $02, $01
000B113C                            	smpsVcRateScale     $01, $01, $01, $01
000B113C                            	smpsVcAttackRate    $13, $12, $13, $12
000B113C                            	smpsVcAmpMod        $00, $00, $00, $00
000B113C                            	smpsVcDecayRate1    $00, $08, $00, $08
000B113C                            	smpsVcDecayRate2    $00, $04, $00, $04
000B113C                            	smpsVcDecayLevel    $00, $01, $00, $01
000B113C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B113C 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000B1155                            
000B1155                            ;	Voice $08
000B1155                            ;	$22
000B1155                            ;	$0A, $13, $05, $11, 	$03, $12, $12, $11, 	$00, $13, $13, $00
000B1155                            ;	$03, $02, $02, $01, 	$1F, $1F, $0F, $0F, 	$1E, $18, $26, $81
000B1155                            	smpsVcAlgorithm     $02
000B1155                            	smpsVcFeedback      $04
000B1155                            	smpsVcUnusedBits    $00
000B1155                            	smpsVcDetune        $01, $00, $01, $00
000B1155                            	smpsVcCoarseFreq    $01, $05, $03, $0A
000B1155                            	smpsVcRateScale     $00, $00, $00, $00
000B1155                            	smpsVcAttackRate    $11, $12, $12, $03
000B1155                            	smpsVcAmpMod        $00, $00, $00, $00
000B1155                            	smpsVcDecayRate1    $00, $13, $13, $00
000B1155                            	smpsVcDecayRate2    $01, $02, $02, $03
000B1155                            	smpsVcDecayLevel    $00, $00, $01, $01
000B1155                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1155 220A 1305 1103 1212 1100+  	smpsVcTotalLevel    $01, $26, $18, $1E
000B116E                            
000B116E                            ;	Voice $09
000B116E                            ;	$3A
000B116E                            ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
000B116E                            ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
000B116E                            	smpsVcAlgorithm     $02
000B116E                            	smpsVcFeedback      $07
000B116E                            	smpsVcUnusedBits    $00
000B116E                            	smpsVcDetune        $03, $01, $03, $06
000B116E                            	smpsVcCoarseFreq    $01, $04, $0C, $01
000B116E                            	smpsVcRateScale     $03, $02, $03, $02
000B116E                            	smpsVcAttackRate    $1A, $1C, $1B, $1C
000B116E                            	smpsVcAmpMod        $00, $00, $00, $00
000B116E                            	smpsVcDecayRate1    $03, $04, $09, $04
000B116E                            	smpsVcDecayRate2    $00, $03, $01, $03
000B116E                            	smpsVcDecayLevel    $0A, $00, $00, $01
000B116E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B116E 3A61 3C14 319C DB9C DA04+  	smpsVcTotalLevel    $00, $31, $47, $21
000B1187                            
000B1187                            ;	Voice $0A
000B1187                            ;	$3A
000B1187                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000B1187                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000B1187                            	smpsVcAlgorithm     $02
000B1187                            	smpsVcFeedback      $07
000B1187                            	smpsVcUnusedBits    $00
000B1187                            	smpsVcDetune        $00, $00, $00, $00
000B1187                            	smpsVcCoarseFreq    $01, $01, $07, $01
000B1187                            	smpsVcRateScale     $01, $02, $02, $02
000B1187                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000B1187                            	smpsVcAmpMod        $00, $00, $00, $00
000B1187                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000B1187                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1187                            	smpsVcDecayLevel    $00, $01, $0F, $01
000B1187                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1187 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000B11A0                            
000B11A0                            ;	Voice $0B
000B11A0                            ;	$34
000B11A0                            ;	$33, $41, $7E, $74, 	$5B, $9F, $5F, $1F, 	$04, $07, $07, $08
000B11A0                            ;	$00, $00, $00, $00, 	$FF, $FF, $EF, $FF, 	$23, $90, $29, $97
000B11A0                            	smpsVcAlgorithm     $04
000B11A0                            	smpsVcFeedback      $06
000B11A0                            	smpsVcUnusedBits    $00
000B11A0                            	smpsVcDetune        $07, $07, $04, $03
000B11A0                            	smpsVcCoarseFreq    $04, $0E, $01, $03
000B11A0                            	smpsVcRateScale     $00, $01, $02, $01
000B11A0                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000B11A0                            	smpsVcAmpMod        $00, $00, $00, $00
000B11A0                            	smpsVcDecayRate1    $08, $07, $07, $04
000B11A0                            	smpsVcDecayRate2    $00, $00, $00, $00
000B11A0                            	smpsVcDecayLevel    $0F, $0E, $0F, $0F
000B11A0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B11A0 3433 417E 745B 9F5F 1F04+  	smpsVcTotalLevel    $17, $29, $10, $23
000B11B9                            
000B11B9                            ;	Voice $0C
000B11B9                            ;	$04
000B11B9                            ;	$72, $42, $32, $32, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B11B9                            ;	$00, $00, $00, $00, 	$00, $07, $00, $07, 	$23, $80, $23, $80
000B11B9                            	smpsVcAlgorithm     $04
000B11B9                            	smpsVcFeedback      $00
000B11B9                            	smpsVcUnusedBits    $00
000B11B9                            	smpsVcDetune        $03, $03, $04, $07
000B11B9                            	smpsVcCoarseFreq    $02, $02, $02, $02
000B11B9                            	smpsVcRateScale     $00, $00, $00, $00
000B11B9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B11B9                            	smpsVcAmpMod        $00, $00, $00, $00
000B11B9                            	smpsVcDecayRate1    $00, $00, $00, $00
000B11B9                            	smpsVcDecayRate2    $00, $00, $00, $00
000B11B9                            	smpsVcDecayLevel    $00, $00, $00, $00
000B11B9                            	smpsVcReleaseRate   $07, $00, $07, $00
000B11B9 0472 4232 321F 1F1F 1F00+  	smpsVcTotalLevel    $00, $23, $00, $23
000B11D2                            
000B11D2                            ;	Voice $0D
000B11D2                            ;	$3C
000B11D2                            ;	$38, $74, $76, $33, 	$10, $10, $10, $10, 	$02, $07, $04, $07
000B11D2                            ;	$03, $09, $03, $09, 	$2F, $2F, $2F, $2F, 	$1E, $80, $1E, $80
000B11D2                            	smpsVcAlgorithm     $04
000B11D2                            	smpsVcFeedback      $07
000B11D2                            	smpsVcUnusedBits    $00
000B11D2                            	smpsVcDetune        $03, $07, $07, $03
000B11D2                            	smpsVcCoarseFreq    $03, $06, $04, $08
000B11D2                            	smpsVcRateScale     $00, $00, $00, $00
000B11D2                            	smpsVcAttackRate    $10, $10, $10, $10
000B11D2                            	smpsVcAmpMod        $00, $00, $00, $00
000B11D2                            	smpsVcDecayRate1    $07, $04, $07, $02
000B11D2                            	smpsVcDecayRate2    $09, $03, $09, $03
000B11D2                            	smpsVcDecayLevel    $02, $02, $02, $02
000B11D2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B11D2 3C38 7476 3310 1010 1002+  	smpsVcTotalLevel    $00, $1E, $00, $1E
000B11EB                            
000B11EB                            ;	Voice $0E
000B11EB                            ;	$F4
000B11EB                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B11EB                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$15, $85, $02, $8A
000B11EB                            	smpsVcAlgorithm     $04
000B11EB                            	smpsVcFeedback      $06
000B11EB                            	smpsVcUnusedBits    $03
000B11EB                            	smpsVcDetune        $00, $00, $00, $00
000B11EB                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B11EB                            	smpsVcRateScale     $00, $00, $00, $00
000B11EB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B11EB                            	smpsVcAmpMod        $00, $00, $00, $00
000B11EB                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B11EB                            	smpsVcDecayRate2    $08, $05, $00, $00
000B11EB                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B11EB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B11EB F406 040F 0E1F 1F1F 1F00+  	smpsVcTotalLevel    $0A, $02, $05, $15
000B1204                            
000B1204                            ;	Voice $0F
000B1204                            ;	$29
000B1204                            ;	$36, $74, $71, $31, 	$04, $04, $05, $1D, 	$12, $0E, $1F, $1F
000B1204                            ;	$04, $06, $03, $01, 	$5F, $6F, $0F, $0F, 	$27, $27, $2E, $80
000B1204                            	smpsVcAlgorithm     $01
000B1204                            	smpsVcFeedback      $05
000B1204                            	smpsVcUnusedBits    $00
000B1204                            	smpsVcDetune        $03, $07, $07, $03
000B1204                            	smpsVcCoarseFreq    $01, $01, $04, $06
000B1204                            	smpsVcRateScale     $00, $00, $00, $00
000B1204                            	smpsVcAttackRate    $1D, $05, $04, $04
000B1204                            	smpsVcAmpMod        $00, $00, $00, $00
000B1204                            	smpsVcDecayRate1    $1F, $1F, $0E, $12
000B1204                            	smpsVcDecayRate2    $01, $03, $06, $04
000B1204                            	smpsVcDecayLevel    $00, $00, $06, $05
000B1204                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1204 2936 7471 3104 0405 1D12+  	smpsVcTotalLevel    $00, $2E, $27, $27
000B121D                            
000B121D                            ;	Voice $10
000B121D                            ;	$08
000B121D                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000B121D                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000B121D                            	smpsVcAlgorithm     $00
000B121D                            	smpsVcFeedback      $01
000B121D                            	smpsVcUnusedBits    $00
000B121D                            	smpsVcDetune        $00, $03, $07, $00
000B121D                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000B121D                            	smpsVcRateScale     $01, $01, $00, $00
000B121D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B121D                            	smpsVcAmpMod        $00, $00, $00, $00
000B121D                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000B121D                            	smpsVcDecayRate2    $03, $04, $04, $00
000B121D                            	smpsVcDecayLevel    $02, $02, $02, $02
000B121D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B121D 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000B1236                            
000B1236                            ;	Voice $11
000B1236                            ;	$3D
000B1236                            ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
000B1236                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
000B1236                            	smpsVcAlgorithm     $05
000B1236                            	smpsVcFeedback      $07
000B1236                            	smpsVcUnusedBits    $00
000B1236                            	smpsVcDetune        $00, $00, $00, $00
000B1236                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B1236                            	smpsVcRateScale     $01, $00, $01, $02
000B1236                            	smpsVcAttackRate    $0C, $14, $12, $0E
000B1236                            	smpsVcAmpMod        $00, $00, $00, $00
000B1236                            	smpsVcDecayRate1    $03, $0E, $08, $08
000B1236                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1236                            	smpsVcDecayLevel    $01, $01, $01, $01
000B1236                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1236 3D01 0101 018E 5214 4C08+  	smpsVcTotalLevel    $1B, $00, $00, $1B
000B124F                            
000B124F                            ;	Voice $12
000B124F                            ;	$3D
000B124F                            ;	$01, $02, $00, $01, 	$1F, $0E, $0E, $0E, 	$07, $1F, $1F, $1F
000B124F                            ;	$00, $00, $00, $00, 	$1F, $0F, $0F, $0F, 	$17, $8D, $8C, $8C
000B124F                            	smpsVcAlgorithm     $05
000B124F                            	smpsVcFeedback      $07
000B124F                            	smpsVcUnusedBits    $00
000B124F                            	smpsVcDetune        $00, $00, $00, $00
000B124F                            	smpsVcCoarseFreq    $01, $00, $02, $01
000B124F                            	smpsVcRateScale     $00, $00, $00, $00
000B124F                            	smpsVcAttackRate    $0E, $0E, $0E, $1F
000B124F                            	smpsVcAmpMod        $00, $00, $00, $00
000B124F                            	smpsVcDecayRate1    $1F, $1F, $1F, $07
000B124F                            	smpsVcDecayRate2    $00, $00, $00, $00
000B124F                            	smpsVcDecayLevel    $00, $00, $00, $01
000B124F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B124F 3D01 0200 011F 0E0E 0E07+  	smpsVcTotalLevel    $0C, $0C, $0D, $17
000B1268                            
000B1268                            ;	Voice $13
000B1268                            ;	$3C
000B1268                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000B1268                            ;	$04, $00, $04, $00, 	$10, $07, $10, $07, 	$1A, $80, $16, $80
000B1268                            	smpsVcAlgorithm     $04
000B1268                            	smpsVcFeedback      $07
000B1268                            	smpsVcUnusedBits    $00
000B1268                            	smpsVcDetune        $03, $05, $05, $03
000B1268                            	smpsVcCoarseFreq    $00, $00, $02, $01
000B1268                            	smpsVcRateScale     $01, $01, $01, $01
000B1268                            	smpsVcAttackRate    $13, $12, $13, $12
000B1268                            	smpsVcAmpMod        $00, $00, $00, $00
000B1268                            	smpsVcDecayRate1    $00, $08, $00, $08
000B1268                            	smpsVcDecayRate2    $00, $04, $00, $04
000B1268                            	smpsVcDecayLevel    $00, $01, $00, $01
000B1268                            	smpsVcReleaseRate   $07, $00, $07, $00
000B1268 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000B1281                            
000B1281                            ;	Voice $14
000B1281                            ;	$18
000B1281                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000B1281                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $80
000B1281                            	smpsVcAlgorithm     $00
000B1281                            	smpsVcFeedback      $03
000B1281                            	smpsVcUnusedBits    $00
000B1281                            	smpsVcDetune        $03, $03, $03, $03
000B1281                            	smpsVcCoarseFreq    $01, $00, $00, $07
000B1281                            	smpsVcRateScale     $02, $00, $03, $02
000B1281                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000B1281                            	smpsVcAmpMod        $00, $00, $00, $00
000B1281                            	smpsVcDecayRate1    $01, $04, $06, $0D
000B1281                            	smpsVcDecayRate2    $05, $03, $0A, $08
000B1281                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000B1281                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1281 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $32
000B129A                            
000B129A                            ;	Voice $15
000B129A                            ;	$3A
000B129A                            ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
000B129A                            ;	$01, $02, $02, $00, 	$5F, $0F, $0F, $2F, 	$18, $22, $18, $80
000B129A                            	smpsVcAlgorithm     $02
000B129A                            	smpsVcFeedback      $07
000B129A                            	smpsVcUnusedBits    $00
000B129A                            	smpsVcDetune        $00, $00, $00, $00
000B129A                            	smpsVcCoarseFreq    $02, $01, $01, $01
000B129A                            	smpsVcRateScale     $01, $00, $00, $02
000B129A                            	smpsVcAttackRate    $12, $07, $07, $0D
000B129A                            	smpsVcAmpMod        $00, $00, $00, $00
000B129A                            	smpsVcDecayRate1    $03, $00, $00, $09
000B129A                            	smpsVcDecayRate2    $00, $02, $02, $01
000B129A                            	smpsVcDecayLevel    $02, $00, $00, $05
000B129A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B129A 3A01 0101 028D 0707 5209+  	smpsVcTotalLevel    $00, $18, $22, $18
000B12B3                            
000B12B3                            ;	Voice $16
000B12B3                            ;	$2C
000B12B3                            ;	$74, $74, $34, $34, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B12B3                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000B12B3                            	smpsVcAlgorithm     $04
000B12B3                            	smpsVcFeedback      $05
000B12B3                            	smpsVcUnusedBits    $00
000B12B3                            	smpsVcDetune        $03, $03, $07, $07
000B12B3                            	smpsVcCoarseFreq    $04, $04, $04, $04
000B12B3                            	smpsVcRateScale     $00, $00, $00, $00
000B12B3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B12B3                            	smpsVcAmpMod        $00, $00, $00, $00
000B12B3                            	smpsVcDecayRate1    $00, $00, $00, $00
000B12B3                            	smpsVcDecayRate2    $01, $00, $01, $00
000B12B3                            	smpsVcDecayLevel    $03, $00, $03, $00
000B12B3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B12B3 2C74 7434 341F 1F1F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000B12CC                            
000B12CC                            ;	Voice $17
000B12CC                            ;	$04
000B12CC                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B12CC                            ;	$00, $00, $00, $00, 	$10, $07, $10, $07, 	$23, $80, $23, $80
000B12CC                            	smpsVcAlgorithm     $04
000B12CC                            	smpsVcFeedback      $00
000B12CC                            	smpsVcUnusedBits    $00
000B12CC                            	smpsVcDetune        $04, $07, $07, $03
000B12CC                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B12CC                            	smpsVcRateScale     $00, $00, $00, $00
000B12CC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B12CC                            	smpsVcAmpMod        $00, $00, $00, $00
000B12CC                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B12CC                            	smpsVcDecayRate2    $00, $00, $00, $00
000B12CC                            	smpsVcDecayLevel    $00, $01, $00, $01
000B12CC                            	smpsVcReleaseRate   $07, $00, $07, $00
000B12CC 0437 7277 491F 1F1F 1F07+  	smpsVcTotalLevel    $00, $23, $00, $23
000B12E5                            
000B12E5                            ;	Voice $18
000B12E5                            ;	$3D
000B12E5                            ;	$01, $02, $02, $02, 	$14, $0E, $8C, $0E, 	$08, $05, $02, $05
000B12E5                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $80
000B12E5                            	smpsVcAlgorithm     $05
000B12E5                            	smpsVcFeedback      $07
000B12E5                            	smpsVcUnusedBits    $00
000B12E5                            	smpsVcDetune        $00, $00, $00, $00
000B12E5                            	smpsVcCoarseFreq    $02, $02, $02, $01
000B12E5                            	smpsVcRateScale     $00, $02, $00, $00
000B12E5                            	smpsVcAttackRate    $0E, $0C, $0E, $14
000B12E5                            	smpsVcAmpMod        $00, $00, $00, $00
000B12E5                            	smpsVcDecayRate1    $05, $02, $05, $08
000B12E5                            	smpsVcDecayRate2    $00, $00, $00, $00
000B12E5                            	smpsVcDecayLevel    $01, $01, $01, $01
000B12E5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B12E5 3D01 0202 0214 0E8C 0E08+  	smpsVcTotalLevel    $00, $00, $00, $1A
000B12FE                            
000B12FE                            ;	Voice $19
000B12FE                            ;	$20
000B12FE                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B12FE                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
000B12FE                            	smpsVcAlgorithm     $00
000B12FE                            	smpsVcFeedback      $04
000B12FE                            	smpsVcUnusedBits    $00
000B12FE                            	smpsVcDetune        $03, $03, $03, $03
000B12FE                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B12FE                            	smpsVcRateScale     $02, $02, $03, $03
000B12FE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B12FE                            	smpsVcAmpMod        $00, $00, $00, $00
000B12FE                            	smpsVcDecayRate1    $06, $09, $06, $07
000B12FE                            	smpsVcDecayRate2    $08, $06, $06, $07
000B12FE                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B12FE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B12FE 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000B1317                            
000B1317                            ;	Voice $1A
000B1317                            ;	$3A
000B1317                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
000B1317                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
000B1317                            	smpsVcAlgorithm     $02
000B1317                            	smpsVcFeedback      $07
000B1317                            	smpsVcUnusedBits    $00
000B1317                            	smpsVcDetune        $00, $05, $00, $05
000B1317                            	smpsVcCoarseFreq    $02, $01, $08, $01
000B1317                            	smpsVcRateScale     $00, $00, $00, $00
000B1317                            	smpsVcAttackRate    $10, $1E, $1E, $1E
000B1317                            	smpsVcAmpMod        $00, $00, $00, $00
000B1317                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
000B1317                            	smpsVcDecayRate2    $02, $00, $00, $00
000B1317                            	smpsVcDecayLevel    $01, $00, $00, $00
000B1317                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1317 3A51 0851 021E 1E1E 101F+  	smpsVcTotalLevel    $01, $22, $24, $18
000B1330                            
000B1330                            ;	Voice $1B
000B1330                            ;	$3A
000B1330                            ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
000B1330                            ;	$02, $00, $00, $00, 	$1F, $1F, $2F, $2F, 	$19, $20, $2A, $80
000B1330                            	smpsVcAlgorithm     $02
000B1330                            	smpsVcFeedback      $07
000B1330                            	smpsVcUnusedBits    $00
000B1330                            	smpsVcDetune        $04, $03, $05, $03
000B1330                            	smpsVcCoarseFreq    $02, $02, $06, $02
000B1330                            	smpsVcRateScale     $01, $00, $01, $02
000B1330                            	smpsVcAttackRate    $12, $15, $0F, $0D
000B1330                            	smpsVcAmpMod        $00, $00, $00, $00
000B1330                            	smpsVcDecayRate1    $04, $07, $08, $06
000B1330                            	smpsVcDecayRate2    $00, $00, $00, $02
000B1330                            	smpsVcDecayLevel    $02, $02, $01, $01
000B1330                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1330 3A32 5632 428D 4F15 5206+  	smpsVcTotalLevel    $00, $2A, $20, $19
000B1349                            
000B1349                            ;	Voice $1C
000B1349                            ;	$3A
000B1349                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000B1349                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000B1349                            	smpsVcAlgorithm     $02
000B1349                            	smpsVcFeedback      $07
000B1349                            	smpsVcUnusedBits    $00
000B1349                            	smpsVcDetune        $00, $00, $00, $00
000B1349                            	smpsVcCoarseFreq    $01, $01, $07, $01
000B1349                            	smpsVcRateScale     $01, $02, $02, $02
000B1349                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000B1349                            	smpsVcAmpMod        $00, $00, $00, $00
000B1349                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000B1349                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1349                            	smpsVcDecayLevel    $00, $01, $0F, $01
000B1349                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1349 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000B1362                            
000B1362                            ;	Voice $1D
000B1362                            ;	$08
000B1362                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000B1362                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000B1362                            	smpsVcAlgorithm     $00
000B1362                            	smpsVcFeedback      $01
000B1362                            	smpsVcUnusedBits    $00
000B1362                            	smpsVcDetune        $00, $03, $07, $00
000B1362                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000B1362                            	smpsVcRateScale     $01, $01, $00, $00
000B1362                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1362                            	smpsVcAmpMod        $00, $00, $00, $00
000B1362                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000B1362                            	smpsVcDecayRate2    $03, $04, $04, $00
000B1362                            	smpsVcDecayLevel    $02, $02, $02, $02
000B1362                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1362 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000B137B                            
000B137B                            ;	Voice $1E
000B137B                            ;	$3A
000B137B                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000B137B                            ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000B137B                            	smpsVcAlgorithm     $02
000B137B                            	smpsVcFeedback      $07
000B137B                            	smpsVcUnusedBits    $00
000B137B                            	smpsVcDetune        $00, $00, $00, $00
000B137B                            	smpsVcCoarseFreq    $01, $01, $07, $01
000B137B                            	smpsVcRateScale     $01, $02, $02, $02
000B137B                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000B137B                            	smpsVcAmpMod        $00, $00, $00, $00
000B137B                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000B137B                            	smpsVcDecayRate2    $07, $00, $00, $00
000B137B                            	smpsVcDecayLevel    $00, $01, $0F, $01
000B137B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B137B 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000B1394                            
000B1394                            ;	Voice $1F
000B1394                            ;	$36
000B1394                            ;	$0F, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$12, $11, $0E, $00
000B1394                            ;	$00, $0A, $07, $09, 	$FF, $0F, $1F, $0F, 	$18, $80, $80, $80
000B1394                            	smpsVcAlgorithm     $06
000B1394                            	smpsVcFeedback      $06
000B1394                            	smpsVcUnusedBits    $00
000B1394                            	smpsVcDetune        $00, $00, $00, $00
000B1394                            	smpsVcCoarseFreq    $01, $01, $01, $0F
000B1394                            	smpsVcRateScale     $00, $00, $00, $00
000B1394                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1394                            	smpsVcAmpMod        $00, $00, $00, $00
000B1394                            	smpsVcDecayRate1    $00, $0E, $11, $12
000B1394                            	smpsVcDecayRate2    $09, $07, $0A, $00
000B1394                            	smpsVcDecayLevel    $00, $01, $00, $0F
000B1394                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1394 360F 0101 011F 1F1F 1F12+  	smpsVcTotalLevel    $00, $00, $00, $18
000B13AD                            
000B13AD                            ;	Voice $20
000B13AD                            ;	$3A
000B13AD                            ;	$03, $19, $01, $53, 	$1F, $DF, $1F, $9F, 	$0C, $02, $0C, $05
000B13AD                            ;	$04, $04, $04, $07, 	$1F, $FF, $0F, $2F, 	$1D, $36, $1B, $80
000B13AD                            	smpsVcAlgorithm     $02
000B13AD                            	smpsVcFeedback      $07
000B13AD                            	smpsVcUnusedBits    $00
000B13AD                            	smpsVcDetune        $05, $00, $01, $00
000B13AD                            	smpsVcCoarseFreq    $03, $01, $09, $03
000B13AD                            	smpsVcRateScale     $02, $00, $03, $00
000B13AD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B13AD                            	smpsVcAmpMod        $00, $00, $00, $00
000B13AD                            	smpsVcDecayRate1    $05, $0C, $02, $0C
000B13AD                            	smpsVcDecayRate2    $07, $04, $04, $04
000B13AD                            	smpsVcDecayLevel    $02, $00, $0F, $01
000B13AD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B13AD 3A03 1901 531F DF1F 9F0C+  	smpsVcTotalLevel    $00, $1B, $36, $1D
000B13C6                            
000B13C6                            
000B13C6                            		even
000B13C6                            Music92:	incbin	sound\music92.bin ; Drowning
000B1708 00                         		even
000B1708                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000B17D8                            		even
000B17D8                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000B24AE 00                         		even
000B24AE                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000B25FE 00                         		even
000B25FE                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000B2638 00                         		even
000B2638                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000B29A0                            		even
000B29A0                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000B29DA 00                         		even
000B29DA                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000B2A14 00                         		even
000B2A14                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000B2A4E 00                         		even
000B2A4E                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000B2A88 00                         		even
000B2A88                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000B2AC2 00                         		even
000B2AC2                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000B2AFC 00                         		even
000B2AFC                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000B2FEC                            		even
000B2FEC                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000B2FEC                            GentleBreeze_Header:
000B2FEC =00000001                  smpsHeaderStartSong = 1
000B2FEC 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000B2FEE 0603                       	smpsHeaderChan      $06, $03
000B2FF0 0100                       	smpsHeaderTempo     $01, $00
000B2FF2                            
000B2FF6 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000B2FFA 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000B2FFE 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000B3002 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000B3006 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000B300A 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000B3010 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000B3016 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000B301C                            
000B301C                            ; PSG3 Data
000B301C                            GentleBreeze_PSG3:
000B301C F2                         	smpsStop
000B301D                            
000B301D                            ; FM1 Data
000B301D                            GentleBreeze_FM1:
000B301F E0C0                       	smpsPan             panCenter, $00
000B3021 E1FF                       	smpsAlterNote       $FF
000B3023 C410                       	dc.b	nG5, $10
000B3025 E60F                       	smpsAlterVol        $0F
000B3027 C4                         	dc.b	nG5
000B3028 E6F1                       	smpsAlterVol        $F1
000B302A E100                       	smpsAlterNote       $00
000B302C C2                         	dc.b	nF5
000B302D E60F                       	smpsAlterVol        $0F
000B302F 08                         	dc.b	$08
000B3030 E6F1                       	smpsAlterVol        $F1
000B3032 C010                       	dc.b	nEb5, $10
000B3034 E60F                       	smpsAlterVol        $0F
000B3036 C0                         	dc.b	nEb5
000B3037 E6F1                       	smpsAlterVol        $F1
000B3039 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000B303F E60F                       	smpsAlterVol        $0F
000B3041 C9                         	dc.b	nC6
000B3042 E6F1                       	smpsAlterVol        $F1
000B3044 C5                         	dc.b	nAb5
000B3045 E60F                       	smpsAlterVol        $0F
000B3047 08                         	dc.b	$08
000B3048 E6F1                       	smpsAlterVol        $F1
000B304A C010                       	dc.b	nEb5, $10
000B304C E60F                       	smpsAlterVol        $0F
000B304E C0                         	dc.b	nEb5
000B304F E6F1                       	smpsAlterVol        $F1
000B3051 C208                       	dc.b	nF5, $08
000B3053 E1FF                       	smpsAlterNote       $FF
000B3055 C410                       	dc.b	nG5, $10
000B3057 E100                       	smpsAlterNote       $00
000B3059 C5C7                       	dc.b	nAb5, nBb5
000B305B E60F                       	smpsAlterVol        $0F
000B305D C7                         	dc.b	nBb5
000B305E E6F1                       	smpsAlterVol        $F1
000B3060 C5                         	dc.b	nAb5
000B3061 E60F                       	smpsAlterVol        $0F
000B3063 08                         	dc.b	$08
000B3064 E6F1                       	smpsAlterVol        $F1
000B3066 E1FF                       	smpsAlterNote       $FF
000B3068 C410                       	dc.b	nG5, $10
000B306A E60F                       	smpsAlterVol        $0F
000B306C C4                         	dc.b	nG5
000B306D E6F1                       	smpsAlterVol        $F1
000B306F C4                         	dc.b	nG5
000B3070 E100                       	smpsAlterNote       $00
000B3072 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000B3077 E60F                       	smpsAlterVol        $0F
000B3079 C2                         	dc.b	nF5
000B307A E6F1                       	smpsAlterVol        $F1
000B307C E1FF                       	smpsAlterNote       $FF
000B307E C4                         	dc.b	nG5
000B307F E60F                       	smpsAlterVol        $0F
000B3081 08                         	dc.b	$08
000B3082 E6F1                       	smpsAlterVol        $F1
000B3084 10                         	dc.b	$10
000B3085 E60F                       	smpsAlterVol        $0F
000B3087 38                         	dc.b	$38
000B3088 E6F1                       	smpsAlterVol        $F1
000B308A 10                         	dc.b	$10
000B308B E60F                       	smpsAlterVol        $0F
000B308D C4                         	dc.b	nG5
000B308E E6F1                       	smpsAlterVol        $F1
000B3090 E100                       	smpsAlterNote       $00
000B3092 C2                         	dc.b	nF5
000B3093 E60F                       	smpsAlterVol        $0F
000B3095 08                         	dc.b	$08
000B3096 E6F1                       	smpsAlterVol        $F1
000B3098 C010                       	dc.b	nEb5, $10
000B309A E60F                       	smpsAlterVol        $0F
000B309C C0                         	dc.b	nEb5
000B309D E6F1                       	smpsAlterVol        $F1
000B309F BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000B30A5 E60F                       	smpsAlterVol        $0F
000B30A7 C9                         	dc.b	nC6
000B30A8 E6F1                       	smpsAlterVol        $F1
000B30AA C5                         	dc.b	nAb5
000B30AB E60F                       	smpsAlterVol        $0F
000B30AD 08                         	dc.b	$08
000B30AE E6F1                       	smpsAlterVol        $F1
000B30B0 C010                       	dc.b	nEb5, $10
000B30B2 E60F                       	smpsAlterVol        $0F
000B30B4 C0                         	dc.b	nEb5
000B30B5 E6F1                       	smpsAlterVol        $F1
000B30B7 C208                       	dc.b	nF5, $08
000B30B9 E1FF                       	smpsAlterNote       $FF
000B30BB C410                       	dc.b	nG5, $10
000B30BD E100                       	smpsAlterNote       $00
000B30BF C5C7                       	dc.b	nAb5, nBb5
000B30C1 E60F                       	smpsAlterVol        $0F
000B30C3 C7                         	dc.b	nBb5
000B30C4 E6F1                       	smpsAlterVol        $F1
000B30C6 C5                         	dc.b	nAb5
000B30C7 E60F                       	smpsAlterVol        $0F
000B30C9 08                         	dc.b	$08
000B30CA E6F1                       	smpsAlterVol        $F1
000B30CC E1FF                       	smpsAlterNote       $FF
000B30CE C410                       	dc.b	nG5, $10
000B30D0 E60F                       	smpsAlterVol        $0F
000B30D2 C4                         	dc.b	nG5
000B30D3 E6F1                       	smpsAlterVol        $F1
000B30D5 C4                         	dc.b	nG5
000B30D6 E100                       	smpsAlterNote       $00
000B30D8 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000B30DD E60F                       	smpsAlterVol        $0F
000B30DF 28                         	dc.b	$28
000B30E0 E6F1                       	smpsAlterVol        $F1
000B30E2 C008 10                    	dc.b	nEb5, $08, $10
000B30E5 E60F                       	smpsAlterVol        $0F
000B30E7 21                         	dc.b	$21
000B30E8                            
000B30E8                            GentleBreeze_Loop12:
000B30E8 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000B30EB F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000B30F0 E717                       	dc.b	smpsNoAttack, $17
000B30F2 E6F1                       	smpsAlterVol        $F1
000B30F4 E1FF                       	smpsAlterNote       $FF
000B30F6 C410                       	dc.b	nG5, $10
000B30F8 E60F                       	smpsAlterVol        $0F
000B30FA C4                         	dc.b	nG5
000B30FB E6F1                       	smpsAlterVol        $F1
000B30FD E100                       	smpsAlterNote       $00
000B30FF C2                         	dc.b	nF5
000B3100 E60F                       	smpsAlterVol        $0F
000B3102 08                         	dc.b	$08
000B3103 E6F1                       	smpsAlterVol        $F1
000B3105 C010                       	dc.b	nEb5, $10
000B3107 E60F                       	smpsAlterVol        $0F
000B3109 C0                         	dc.b	nEb5
000B310A E6F1                       	smpsAlterVol        $F1
000B310C BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000B3112 E60F                       	smpsAlterVol        $0F
000B3114 C9                         	dc.b	nC6
000B3115 E6F1                       	smpsAlterVol        $F1
000B3117 C5                         	dc.b	nAb5
000B3118 E60F                       	smpsAlterVol        $0F
000B311A 08                         	dc.b	$08
000B311B E6F1                       	smpsAlterVol        $F1
000B311D C010                       	dc.b	nEb5, $10
000B311F E60F                       	smpsAlterVol        $0F
000B3121 C0                         	dc.b	nEb5
000B3122 E6F1                       	smpsAlterVol        $F1
000B3124 C208                       	dc.b	nF5, $08
000B3126 E1FF                       	smpsAlterNote       $FF
000B3128 C410                       	dc.b	nG5, $10
000B312A E100                       	smpsAlterNote       $00
000B312C C5C7                       	dc.b	nAb5, nBb5
000B312E E60F                       	smpsAlterVol        $0F
000B3130 C7                         	dc.b	nBb5
000B3131 E6F1                       	smpsAlterVol        $F1
000B3133 C5                         	dc.b	nAb5
000B3134 E60F                       	smpsAlterVol        $0F
000B3136 08                         	dc.b	$08
000B3137 E6F1                       	smpsAlterVol        $F1
000B3139 E1FF                       	smpsAlterNote       $FF
000B313B C410                       	dc.b	nG5, $10
000B313D E60F                       	smpsAlterVol        $0F
000B313F C4                         	dc.b	nG5
000B3140 E6F1                       	smpsAlterVol        $F1
000B3142 C4                         	dc.b	nG5
000B3143 E100                       	smpsAlterNote       $00
000B3145 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000B314A E60F                       	smpsAlterVol        $0F
000B314C C2                         	dc.b	nF5
000B314D E6F1                       	smpsAlterVol        $F1
000B314F E1FF                       	smpsAlterNote       $FF
000B3151 C4                         	dc.b	nG5
000B3152 E60F                       	smpsAlterVol        $0F
000B3154 08                         	dc.b	$08
000B3155 E6F1                       	smpsAlterVol        $F1
000B3157 10                         	dc.b	$10
000B3158 E60F                       	smpsAlterVol        $0F
000B315A 38                         	dc.b	$38
000B315B E6F1                       	smpsAlterVol        $F1
000B315D 10                         	dc.b	$10
000B315E E60F                       	smpsAlterVol        $0F
000B3160 C4                         	dc.b	nG5
000B3161 E6F1                       	smpsAlterVol        $F1
000B3163 E100                       	smpsAlterNote       $00
000B3165 C2                         	dc.b	nF5
000B3166 E60F                       	smpsAlterVol        $0F
000B3168 08                         	dc.b	$08
000B3169 E6F1                       	smpsAlterVol        $F1
000B316B C010                       	dc.b	nEb5, $10
000B316D E60F                       	smpsAlterVol        $0F
000B316F C0                         	dc.b	nEb5
000B3170 E6F1                       	smpsAlterVol        $F1
000B3172 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000B3178 E60F                       	smpsAlterVol        $0F
000B317A C9                         	dc.b	nC6
000B317B E6F1                       	smpsAlterVol        $F1
000B317D C5                         	dc.b	nAb5
000B317E E60F                       	smpsAlterVol        $0F
000B3180 08                         	dc.b	$08
000B3181 E6F1                       	smpsAlterVol        $F1
000B3183 C010                       	dc.b	nEb5, $10
000B3185 E60F                       	smpsAlterVol        $0F
000B3187 C0                         	dc.b	nEb5
000B3188 E6F1                       	smpsAlterVol        $F1
000B318A C208                       	dc.b	nF5, $08
000B318C E1FF                       	smpsAlterNote       $FF
000B318E C410                       	dc.b	nG5, $10
000B3190 E100                       	smpsAlterNote       $00
000B3192 C5C7                       	dc.b	nAb5, nBb5
000B3194 E60F                       	smpsAlterVol        $0F
000B3196 C7                         	dc.b	nBb5
000B3197 E6F1                       	smpsAlterVol        $F1
000B3199 C5                         	dc.b	nAb5
000B319A E60F                       	smpsAlterVol        $0F
000B319C 08                         	dc.b	$08
000B319D E6F1                       	smpsAlterVol        $F1
000B319F E1FF                       	smpsAlterNote       $FF
000B31A1 C410                       	dc.b	nG5, $10
000B31A3 E60F                       	smpsAlterVol        $0F
000B31A5 C4                         	dc.b	nG5
000B31A6 E6F1                       	smpsAlterVol        $F1
000B31A8 C4                         	dc.b	nG5
000B31A9 E100                       	smpsAlterNote       $00
000B31AB C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000B31B0 E60F                       	smpsAlterVol        $0F
000B31B2 28                         	dc.b	$28
000B31B3 E6F1                       	smpsAlterVol        $F1
000B31B5 C008 10                    	dc.b	nEb5, $08, $10
000B31B8 E60F                       	smpsAlterVol        $0F
000B31BA 21                         	dc.b	$21
000B31BB E0C0                       	smpsPan             panCenter, $00
000B31BD F6FF 29                    	smpsJump            GentleBreeze_Loop12
000B31C0                            
000B31C0                            ; FM2 Data
000B31C0                            GentleBreeze_FM2:
000B31C2 E60C                       	smpsAlterVol        $0C
000B31C4 E0C0                       	smpsPan             panCenter, $00
000B31C6 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000B31D2 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000B31DE 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000B31EA 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000B31F6 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000B3202 A039                       	dc.b	nG2, $39
000B3204                            
000B3204                            GentleBreeze_Jump04:
000B3204 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000B3207                            
000B3207                            GentleBreeze_Loop11:
000B3207 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000B3213 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000B321F 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000B322B 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000B3237 A3                         	dc.b	nBb2
000B3238 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000B323D 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000B3249 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000B3255 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000B3261 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000B326D 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000B3279 A039                       	dc.b	nG2, $39
000B327B E0C0                       	smpsPan             panCenter, $00
000B327D F6FF 85                    	smpsJump            GentleBreeze_Jump04
000B3280                            
000B3280                            ; FM3 Data
000B3280                            GentleBreeze_FM3:
000B3282 E0C0                       	smpsPan             panCenter, $00
000B3284 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000B328C E616                       	smpsAlterVol        $16
000B328E F000 0207 03               	smpsModSet          $00, $02, $07, $03
000B3293                            
000B3293                            GentleBreeze_Loop0F:
000B3293 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000B3297 E1FF                       	smpsAlterNote       $FF
000B3299 C4                         	dc.b	nG5
000B329A E100                       	smpsAlterNote       $00
000B329C C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000B32A1 E608                       	smpsAlterVol        $08
000B32A3 C080 08                    	dc.b	nEb5, nRst, $08
000B32A6 E6F8                       	smpsAlterVol        $F8
000B32A8 C7                         	dc.b	nBb5
000B32A9 E1FF                       	smpsAlterNote       $FF
000B32AB C4                         	dc.b	nG5
000B32AC E100                       	smpsAlterNote       $00
000B32AE C0BB                       	dc.b	nEb5, nBb4
000B32B0 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000B32B5 C0BD C9                    	dc.b	nEb5, nC5, nC6
000B32B8 E1FF                       	smpsAlterNote       $FF
000B32BA C4                         	dc.b	nG5
000B32BB E100                       	smpsAlterNote       $00
000B32BD C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000B32C2 E608                       	smpsAlterVol        $08
000B32C4 C080 08                    	dc.b	nEb5, nRst, $08
000B32C7 E6F8                       	smpsAlterVol        $F8
000B32C9 E1FF                       	smpsAlterNote       $FF
000B32CB C4                         	dc.b	nG5
000B32CC E100                       	smpsAlterNote       $00
000B32CE C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000B32D5 E1FF                       	smpsAlterNote       $FF
000B32D7 C4                         	dc.b	nG5
000B32D8 E100                       	smpsAlterNote       $00
000B32DA C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000B32DF E1FF                       	smpsAlterNote       $FF
000B32E1 C4                         	dc.b	nG5
000B32E2 E100                       	smpsAlterNote       $00
000B32E4 C7                         	dc.b	nBb5
000B32E5 E1FF                       	smpsAlterNote       $FF
000B32E7 C4                         	dc.b	nG5
000B32E8 E100                       	smpsAlterNote       $00
000B32EA C2C0 01                    	dc.b	nF5, nEb5, $01
000B32ED                            
000B32ED                            GentleBreeze_Jump03:
000B32ED E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000B32F4 E6FA                       	smpsAlterVol        $FA
000B32F6 F4                         	smpsModOff
000B32F7 E1FF                       	smpsAlterNote       $FF
000B32F9 B850                       	dc.b	nG4, $50
000B32FB E100                       	smpsAlterNote       $00
000B32FD B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000B3309 E1FF                       	smpsAlterNote       $FF
000B330B B810                       	dc.b	nG4, $10
000B330D E100                       	smpsAlterNote       $00
000B330F BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000B3314 E1FF                       	smpsAlterNote       $FF
000B3316 B8                         	dc.b	nG4
000B3317 E100                       	smpsAlterNote       $00
000B3319 B610                       	dc.b	nF4, $10
000B331B E1FF                       	smpsAlterNote       $FF
000B331D B850                       	dc.b	nG4, $50
000B331F E100                       	smpsAlterNote       $00
000B3321 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000B3329 E1FF                       	smpsAlterNote       $FF
000B332B AC08                       	dc.b	nG3, $08
000B332D E100                       	smpsAlterNote       $00
000B332F AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000B3334 E1FF                       	smpsAlterNote       $FF
000B3336 B850                       	dc.b	nG4, $50
000B3338 E100                       	smpsAlterNote       $00
000B333A BB08                       	dc.b	nBb4, $08
000B333C E1FF                       	smpsAlterNote       $FF
000B333E B8                         	dc.b	nG4
000B333F E100                       	smpsAlterNote       $00
000B3341 BDBB B6                    	dc.b	nC5, nBb4, nF4
000B3344 E1FF                       	smpsAlterNote       $FF
000B3346 B810 08                    	dc.b	nG4, $10, $08
000B3349 E100                       	smpsAlterNote       $00
000B334B B6                         	dc.b	nF4
000B334C E1FF                       	smpsAlterNote       $FF
000B334E B880                       	dc.b	nG4, nRst
000B3350 E100                       	smpsAlterNote       $00
000B3352 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000B3355 E1FF                       	smpsAlterNote       $FF
000B3357 B810                       	dc.b	nG4, $10
000B3359 E100                       	smpsAlterNote       $00
000B335B B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000B3362 E1FF                       	smpsAlterNote       $FF
000B3364 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000B3372 E606                       	smpsAlterVol        $06
000B3374 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000B3379 E100                       	smpsAlterNote       $00
000B337B                            
000B337B                            GentleBreeze_Loop10:
000B337B C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000B337F E1FF                       	smpsAlterNote       $FF
000B3381 C4                         	dc.b	nG5
000B3382 E100                       	smpsAlterNote       $00
000B3384 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000B3389 E608                       	smpsAlterVol        $08
000B338B C080 08                    	dc.b	nEb5, nRst, $08
000B338E E6F8                       	smpsAlterVol        $F8
000B3390 C7                         	dc.b	nBb5
000B3391 E1FF                       	smpsAlterNote       $FF
000B3393 C4                         	dc.b	nG5
000B3394 E100                       	smpsAlterNote       $00
000B3396 C0BB                       	dc.b	nEb5, nBb4
000B3398 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000B339D C0BD C9                    	dc.b	nEb5, nC5, nC6
000B33A0 E1FF                       	smpsAlterNote       $FF
000B33A2 C4                         	dc.b	nG5
000B33A3 E100                       	smpsAlterNote       $00
000B33A5 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000B33AA E608                       	smpsAlterVol        $08
000B33AC C080 08                    	dc.b	nEb5, nRst, $08
000B33AF E6F8                       	smpsAlterVol        $F8
000B33B1 E1FF                       	smpsAlterNote       $FF
000B33B3 C4                         	dc.b	nG5
000B33B4 E100                       	smpsAlterNote       $00
000B33B6 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000B33BD E1FF                       	smpsAlterNote       $FF
000B33BF C4                         	dc.b	nG5
000B33C0 E100                       	smpsAlterNote       $00
000B33C2 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000B33C7 E1FF                       	smpsAlterNote       $FF
000B33C9 C4                         	dc.b	nG5
000B33CA E100                       	smpsAlterNote       $00
000B33CC C7                         	dc.b	nBb5
000B33CD E1FF                       	smpsAlterNote       $FF
000B33CF C4                         	dc.b	nG5
000B33D0 E100                       	smpsAlterNote       $00
000B33D2 C2C0 01                    	dc.b	nF5, nEb5, $01
000B33D5 E0C0                       	smpsPan             panCenter, $00
000B33D7 F1                         	smpsModOn
000B33D8 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000B33DB                            
000B33DB                            ; FM4 Data
000B33DB                            GentleBreeze_FM4:
000B33DD E0C0                       	smpsPan             panCenter, $00
000B33DF 80                         	dc.b	nRst
000B33E0                            
000B33E0                            GentleBreeze_Loop0D:
000B33E0 7F                         	dc.b	$7F
000B33E1 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000B33E6 77                         	dc.b	$77
000B33E9 E609                       	smpsAlterVol        $09
000B33EB C001                       	dc.b	nEb5, $01
000B33ED                            
000B33ED                            GentleBreeze_Jump02:
000B33ED E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000B33F2 E607                       	smpsAlterVol        $07
000B33F4 E1FF                       	smpsAlterNote       $FF
000B33F6 C450                       	dc.b	nG5, $50
000B33F8 E100                       	smpsAlterNote       $00
000B33FA C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000B3406 E1FF                       	smpsAlterNote       $FF
000B3408 C410                       	dc.b	nG5, $10
000B340A E100                       	smpsAlterNote       $00
000B340C C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000B3411 E1FF                       	smpsAlterNote       $FF
000B3413 C4                         	dc.b	nG5
000B3414 E100                       	smpsAlterNote       $00
000B3416 C210                       	dc.b	nF5, $10
000B3418 E1FF                       	smpsAlterNote       $FF
000B341A C450                       	dc.b	nG5, $50
000B341C E100                       	smpsAlterNote       $00
000B341E C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000B3426 E1FF                       	smpsAlterNote       $FF
000B3428 B808                       	dc.b	nG4, $08
000B342A E100                       	smpsAlterNote       $00
000B342C BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000B3431 E1FF                       	smpsAlterNote       $FF
000B3433 C450                       	dc.b	nG5, $50
000B3435 E100                       	smpsAlterNote       $00
000B3437 C708                       	dc.b	nBb5, $08
000B3439 E1FF                       	smpsAlterNote       $FF
000B343B C4                         	dc.b	nG5
000B343C E100                       	smpsAlterNote       $00
000B343E C9C7 C2                    	dc.b	nC6, nBb5, nF5
000B3441 E1FF                       	smpsAlterNote       $FF
000B3443 C410 08                    	dc.b	nG5, $10, $08
000B3446 E100                       	smpsAlterNote       $00
000B3448 C2                         	dc.b	nF5
000B3449 E1FF                       	smpsAlterNote       $FF
000B344B C480                       	dc.b	nG5, nRst
000B344D E100                       	smpsAlterNote       $00
000B344F C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000B3452 E1FF                       	smpsAlterNote       $FF
000B3454 C410                       	dc.b	nG5, $10
000B3456 E100                       	smpsAlterNote       $00
000B3458 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000B345F E1FF                       	smpsAlterNote       $FF
000B3461 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000B3469                            
000B3469                            GentleBreeze_Loop0E:
000B3469 7F                         	dc.b	$7F
000B346A F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000B346F 77                         	dc.b	$77
000B3470 E100                       	smpsAlterNote       $00
000B3472 C001                       	dc.b	nEb5, $01
000B3474 E6F9                       	smpsAlterVol        $F9
000B3476 E0C0                       	smpsPan             panCenter, $00
000B3478 E100                       	smpsAlterNote       $00
000B347A F6FF 71                    	smpsJump            GentleBreeze_Jump02
000B347D                            
000B347D                            ; FM5 Data
000B347D                            GentleBreeze_FM5:
000B347F E0C0                       	smpsPan             panCenter, $00
000B3481 A5                         	dc.b	nC3
000B3482                            
000B3482                            GentleBreeze_Loop06:
000B3482 10                         	dc.b	$10
000B3483 E607                       	smpsAlterVol        $07
000B3485 A5                         	dc.b	nC3
000B3486 E6F9                       	smpsAlterVol        $F9
000B3488 08                         	dc.b	$08
000B3489 E607                       	smpsAlterVol        $07
000B348B A5                         	dc.b	nC3
000B348C E608                       	smpsAlterVol        $08
000B348E A5                         	dc.b	nC3
000B348F E6F1                       	smpsAlterVol        $F1
000B3491 18                         	dc.b	$18
000B3492 E607                       	smpsAlterVol        $07
000B3494 10                         	dc.b	$10
000B3495 E608                       	smpsAlterVol        $08
000B3497 A5                         	dc.b	nC3
000B3498 E6F1                       	smpsAlterVol        $F1
000B349A A5                         	dc.b	nC3
000B349B F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000B34A0 A5                         	dc.b	nC3
000B34A1                            
000B34A1                            GentleBreeze_Loop07:
000B34A1 E607                       	smpsAlterVol        $07
000B34A3 A5                         	dc.b	nC3
000B34A4 E6F9                       	smpsAlterVol        $F9
000B34A6 08                         	dc.b	$08
000B34A7 E607                       	smpsAlterVol        $07
000B34A9 A5                         	dc.b	nC3
000B34AA E608                       	smpsAlterVol        $08
000B34AC A5                         	dc.b	nC3
000B34AD E6F1                       	smpsAlterVol        $F1
000B34AF 10                         	dc.b	$10
000B34B0 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000B34B5                            
000B34B5                            GentleBreeze_Loop08:
000B34B5 A5                         	dc.b	nC3
000B34B6 E607                       	smpsAlterVol        $07
000B34B8 A5                         	dc.b	nC3
000B34B9 E6F9                       	smpsAlterVol        $F9
000B34BB 08                         	dc.b	$08
000B34BC E607                       	smpsAlterVol        $07
000B34BE A5                         	dc.b	nC3
000B34BF E608                       	smpsAlterVol        $08
000B34C1 A5                         	dc.b	nC3
000B34C2 E6F1                       	smpsAlterVol        $F1
000B34C4 18                         	dc.b	$18
000B34C5 E607                       	smpsAlterVol        $07
000B34C7 10                         	dc.b	$10
000B34C8 E608                       	smpsAlterVol        $08
000B34CA A5                         	dc.b	nC3
000B34CB E6F1                       	smpsAlterVol        $F1
000B34CD A5                         	dc.b	nC3
000B34CE F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000B34D3 A5                         	dc.b	nC3
000B34D4 E607                       	smpsAlterVol        $07
000B34D6 A5                         	dc.b	nC3
000B34D7 E6F9                       	smpsAlterVol        $F9
000B34D9 08                         	dc.b	$08
000B34DA E607                       	smpsAlterVol        $07
000B34DC A5                         	dc.b	nC3
000B34DD E608                       	smpsAlterVol        $08
000B34DF A5                         	dc.b	nC3
000B34E0 E6F1                       	smpsAlterVol        $F1
000B34E2 10                         	dc.b	$10
000B34E3 E607                       	smpsAlterVol        $07
000B34E5 A5                         	dc.b	nC3
000B34E6 E6F9                       	smpsAlterVol        $F9
000B34E8 08                         	dc.b	$08
000B34E9 E607                       	smpsAlterVol        $07
000B34EB A5                         	dc.b	nC3
000B34EC E608                       	smpsAlterVol        $08
000B34EE A5                         	dc.b	nC3
000B34EF E6F1                       	smpsAlterVol        $F1
000B34F1 01                         	dc.b	$01
000B34F2                            
000B34F2                            GentleBreeze_Jump01:
000B34F2 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000B34F5 E607                       	smpsAlterVol        $07
000B34F7                            
000B34F7                            GentleBreeze_Loop09:
000B34F7 10                         	dc.b	$10
000B34F8 E608                       	smpsAlterVol        $08
000B34FA A5                         	dc.b	nC3
000B34FB E6F1                       	smpsAlterVol        $F1
000B34FD 08                         	dc.b	$08
000B34FE E60F                       	smpsAlterVol        $0F
000B3500 18                         	dc.b	$18
000B3501 E6F8                       	smpsAlterVol        $F8
000B3503 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000B3508 10                         	dc.b	$10
000B3509 E608                       	smpsAlterVol        $08
000B350B A5                         	dc.b	nC3
000B350C E6F1                       	smpsAlterVol        $F1
000B350E 08                         	dc.b	$08
000B350F E60F                       	smpsAlterVol        $0F
000B3511 18                         	dc.b	$18
000B3512 E6F1                       	smpsAlterVol        $F1
000B3514                            
000B3514                            GentleBreeze_Loop0A:
000B3514 10                         	dc.b	$10
000B3515 E607                       	smpsAlterVol        $07
000B3517 A5                         	dc.b	nC3
000B3518 E6F9                       	smpsAlterVol        $F9
000B351A 08                         	dc.b	$08
000B351B E607                       	smpsAlterVol        $07
000B351D A5                         	dc.b	nC3
000B351E E608                       	smpsAlterVol        $08
000B3520 A5                         	dc.b	nC3
000B3521 E6F1                       	smpsAlterVol        $F1
000B3523 18                         	dc.b	$18
000B3524 E607                       	smpsAlterVol        $07
000B3526 10                         	dc.b	$10
000B3527 E608                       	smpsAlterVol        $08
000B3529 A5                         	dc.b	nC3
000B352A E6F1                       	smpsAlterVol        $F1
000B352C A5                         	dc.b	nC3
000B352D F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000B3532 A5                         	dc.b	nC3
000B3533                            
000B3533                            GentleBreeze_Loop0B:
000B3533 E607                       	smpsAlterVol        $07
000B3535 A5                         	dc.b	nC3
000B3536 E6F9                       	smpsAlterVol        $F9
000B3538 08                         	dc.b	$08
000B3539 E607                       	smpsAlterVol        $07
000B353B A5                         	dc.b	nC3
000B353C E608                       	smpsAlterVol        $08
000B353E A5                         	dc.b	nC3
000B353F E6F1                       	smpsAlterVol        $F1
000B3541 10                         	dc.b	$10
000B3542 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000B3547                            
000B3547                            GentleBreeze_Loop0C:
000B3547 A5                         	dc.b	nC3
000B3548 E607                       	smpsAlterVol        $07
000B354A A5                         	dc.b	nC3
000B354B E6F9                       	smpsAlterVol        $F9
000B354D 08                         	dc.b	$08
000B354E E607                       	smpsAlterVol        $07
000B3550 A5                         	dc.b	nC3
000B3551 E608                       	smpsAlterVol        $08
000B3553 A5                         	dc.b	nC3
000B3554 E6F1                       	smpsAlterVol        $F1
000B3556 18                         	dc.b	$18
000B3557 E607                       	smpsAlterVol        $07
000B3559 10                         	dc.b	$10
000B355A E608                       	smpsAlterVol        $08
000B355C A5                         	dc.b	nC3
000B355D E6F1                       	smpsAlterVol        $F1
000B355F A5                         	dc.b	nC3
000B3560 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000B3565 A5                         	dc.b	nC3
000B3566 E607                       	smpsAlterVol        $07
000B3568 A5                         	dc.b	nC3
000B3569 E6F9                       	smpsAlterVol        $F9
000B356B 08                         	dc.b	$08
000B356C E607                       	smpsAlterVol        $07
000B356E A5                         	dc.b	nC3
000B356F E608                       	smpsAlterVol        $08
000B3571 A5                         	dc.b	nC3
000B3572 E6F1                       	smpsAlterVol        $F1
000B3574 10                         	dc.b	$10
000B3575 E607                       	smpsAlterVol        $07
000B3577 A5                         	dc.b	nC3
000B3578 E6F9                       	smpsAlterVol        $F9
000B357A 08                         	dc.b	$08
000B357B E607                       	smpsAlterVol        $07
000B357D A5                         	dc.b	nC3
000B357E E608                       	smpsAlterVol        $08
000B3580 A5                         	dc.b	nC3
000B3581 E6F1                       	smpsAlterVol        $F1
000B3583 01                         	dc.b	$01
000B3584 E0C0                       	smpsPan             panCenter, $00
000B3586 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000B3589                            
000B3589                            ; DAC Data
000B3589                            GentleBreeze_DAC:
000B3589 81                         	dc.b	dKick
000B358A                            
000B358A                            GentleBreeze_Loop00:
000B358A 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B3590 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000B3595 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000B35A0                            
000B35A0                            GentleBreeze_Loop01:
000B35A0 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B35A6 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000B35AB 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000B35B5                            
000B35B5                            GentleBreeze_Jump00:
000B35B5 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000B35B9                            
000B35B9                            GentleBreeze_Loop02:
000B35B9 81                         	dc.b	dKick
000B35BA                            
000B35BA                            GentleBreeze_Loop03:
000B35BA 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000B35C6 088A                       	dc.b	$08, dLowTimpani
000B35C8 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000B35CD 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000B35D9 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000B35DE F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000B35E3                            
000B35E3                            GentleBreeze_Loop04:
000B35E3 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B35E9 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000B35EE 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000B35F9                            
000B35F9                            GentleBreeze_Loop05:
000B35F9 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B35FF F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000B3604 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000B360E F6FF A5                    	smpsJump            GentleBreeze_Jump00
000B3611                            
000B3611                            ; PSG 1 Data
000B3611                            GentleBreeze_PSG1:
000B3611 80                         	dc.b	nRst
000B3612                            
000B3612                            GentleBreeze_LoopPSG02:
000B3612 7F                         	dc.b	$7F
000B3613 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000B3618 08                         	dc.b	$08
000B3619 EC04                       	smpsPSGAlterVol     $04
000B361B                            
000B361B                            GentleBreeze_JumpPSG01:
000B361B A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000B3627 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000B362F                            
000B362F                            GentleBreeze_LoopPSG03:
000B362F 7F                         	dc.b	$7F
000B3630 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000B3635 08A3 01                    	dc.b	$08, nBb2, $01
000B3638 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000B363B                            
000B363B                            ; PSG2 Data
000B363B                            GentleBreeze_PSG2:
000B363B 80                         	dc.b	nRst
000B363C                            
000B363C                            GentleBreeze_LoopPSG00:
000B363C 7F                         	dc.b	$7F
000B363D F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000B3642 08                         	dc.b	$08
000B3643 EC04                       	smpsPSGAlterVol     $04
000B3645                            
000B3645                            GentleBreeze_JumpPSG00:
000B3645 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000B3651 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000B3659                            
000B3659                            GentleBreeze_LoopPSG01:
000B3659 7F                         	dc.b	$7F
000B365A F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000B365F 08A8 01                    	dc.b	$08, nEb3, $01
000B3662 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000B3665                            
000B3665                            GentleBreeze_Voices:
000B3665                            ;	Voice $00
000B3665                            ;	$0C
000B3665                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000B3665                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000B3665                            	smpsVcAlgorithm     $04
000B3665                            	smpsVcFeedback      $01
000B3665                            	smpsVcUnusedBits    $00
000B3665                            	smpsVcDetune        $07, $02, $07, $02
000B3665                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000B3665                            	smpsVcRateScale     $00, $00, $00, $00
000B3665                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3665                            	smpsVcAmpMod        $00, $00, $00, $00
000B3665                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000B3665                            	smpsVcDecayRate2    $01, $00, $00, $00
000B3665                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000B3665                            	smpsVcReleaseRate   $09, $01, $04, $03
000B3665 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000B367E                            
000B367E                            ;	Voice $01
000B367E                            ;	$38
000B367E                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000B367E                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000B367E                            	smpsVcAlgorithm     $00
000B367E                            	smpsVcFeedback      $07
000B367E                            	smpsVcUnusedBits    $00
000B367E                            	smpsVcDetune        $03, $07, $01, $05
000B367E                            	smpsVcCoarseFreq    $00, $00, $07, $04
000B367E                            	smpsVcRateScale     $00, $02, $00, $02
000B367E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B367E                            	smpsVcAmpMod        $00, $00, $00, $00
000B367E                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000B367E                            	smpsVcDecayRate2    $00, $00, $10, $00
000B367E                            	smpsVcDecayLevel    $00, $00, $00, $00
000B367E                            	smpsVcReleaseRate   $08, $05, $05, $05
000B367E 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000B3697                            
000B3697                            ;	Voice $02
000B3697                            ;	$00
000B3697                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000B3697                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000B3697                            	smpsVcAlgorithm     $00
000B3697                            	smpsVcFeedback      $00
000B3697                            	smpsVcUnusedBits    $00
000B3697                            	smpsVcDetune        $00, $00, $00, $00
000B3697                            	smpsVcCoarseFreq    $00, $00, $00, $00
000B3697                            	smpsVcRateScale     $00, $00, $00, $00
000B3697                            	smpsVcAttackRate    $00, $00, $00, $00
000B3697                            	smpsVcAmpMod        $00, $00, $00, $00
000B3697                            	smpsVcDecayRate1    $00, $00, $00, $00
000B3697                            	smpsVcDecayRate2    $00, $00, $00, $00
000B3697                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B3697                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3697 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B36B0                            
000B36B0                            ;	Voice $03
000B36B0                            ;	$36
000B36B0                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000B36B0                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000B36B0                            	smpsVcAlgorithm     $06
000B36B0                            	smpsVcFeedback      $06
000B36B0                            	smpsVcUnusedBits    $00
000B36B0                            	smpsVcDetune        $00, $00, $00, $00
000B36B0                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000B36B0                            	smpsVcRateScale     $00, $00, $00, $00
000B36B0                            	smpsVcAttackRate    $1F, $00, $18, $16
000B36B0                            	smpsVcAmpMod        $00, $00, $00, $00
000B36B0                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000B36B0                            	smpsVcDecayRate2    $00, $00, $12, $00
000B36B0                            	smpsVcDecayLevel    $04, $04, $02, $00
000B36B0                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000B36B0 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000B36C9                            
000B36C9                            ;	Voice $04
000B36C9                            ;	$07
000B36C9                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000B36C9                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000B36C9                            	smpsVcAlgorithm     $07
000B36C9                            	smpsVcFeedback      $00
000B36C9                            	smpsVcUnusedBits    $00
000B36C9                            	smpsVcDetune        $07, $06, $05, $00
000B36C9                            	smpsVcCoarseFreq    $05, $04, $03, $05
000B36C9                            	smpsVcRateScale     $00, $01, $01, $01
000B36C9                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000B36C9                            	smpsVcAmpMod        $00, $00, $00, $00
000B36C9                            	smpsVcDecayRate1    $17, $17, $17, $17
000B36C9                            	smpsVcDecayRate2    $00, $00, $00, $00
000B36C9                            	smpsVcDecayLevel    $02, $02, $02, $02
000B36C9                            	smpsVcReleaseRate   $06, $06, $06, $06
000B36C9 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000B36E2                            
000B36E2                            ;	Voice $05
000B36E2                            ;	$3C
000B36E2                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000B36E2                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000B36E2                            	smpsVcAlgorithm     $04
000B36E2                            	smpsVcFeedback      $07
000B36E2                            	smpsVcUnusedBits    $00
000B36E2                            	smpsVcDetune        $06, $06, $02, $02
000B36E2                            	smpsVcCoarseFreq    $01, $03, $01, $01
000B36E2                            	smpsVcRateScale     $00, $00, $00, $00
000B36E2                            	smpsVcAttackRate    $0E, $14, $10, $13
000B36E2                            	smpsVcAmpMod        $00, $00, $00, $00
000B36E2                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000B36E2                            	smpsVcDecayRate2    $04, $04, $04, $04
000B36E2                            	smpsVcDecayLevel    $02, $01, $01, $01
000B36E2                            	smpsVcReleaseRate   $07, $07, $07, $07
000B36E2 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000B36FB                            
000B36FB                            
000B36FC 00                         		even
000B36FC                            ; ---------------------------------------------------------------------------
000B36FC                            ; Sound	effect pointers
000B36FC                            ; ---------------------------------------------------------------------------
000B36FC 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000B3708 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000B3714 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000B3720 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000B372C 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000B3738 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000B3744 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000B3750 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000B375C 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000B3768 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000B3774 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000B3780 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000B378C 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000B3798 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000B37A4 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000B37B0 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000B37BC 0000 0000                  SoundD0Index:	dc.l SoundD0
000B37C0 0000 0000 0000 0000        		dc.l SoundD1, SoundD2
000B37C8                            SoundA0:	include	sound\jump.asm
000B37C8                            SndA0_Jump_Header:
000B37C8 =00000001                  smpsHeaderStartSong = 1
000B37C8 0000                       	smpsHeaderVoice     SndA0_Jump_Voices
000B37CA 01                         	smpsHeaderTempoSFX  $01
000B37CB 01                         	smpsHeaderChanSFX   $01
000B37CC                            
000B37D2                            
000B37D2                            ; PSG1 Data
000B37D2                            SndA0_Jump_PSG1:
000B37D2 F500                       	smpsPSGvoice        $00
000B37D4 A201                       	dc.b	nA2, $01
000B37D6 F002 01F8 65               	smpsModSet          $02, $01, $F8, $65
000B37DB 9C15                       	dc.b	nEb2, $15
000B37DD F2                         	smpsStop
000B37DE                            
000B37DE                            ; Song seems to not use any FM voices
000B37DE                            SndA0_Jump_Voices:
000B37DE                            SndA0_Jump_Voices:
000B37DE                            		even
000B37DE                            SoundA1:	incbin	sound\soundA1.bin
000B3808                            		even
000B3808                            SoundA2:	incbin	sound\soundA2.bin
000B3828                            		even
000B3828                            SoundA3:	incbin	sound\soundA3.bin
000B385A                            		even
000B385A                            SoundA4:	incbin	sound\soundA4.bin
000B3890                            		even
000B3890                            SoundA5:	include	sound\fart.asm
000B3890                            Fart_Header:
000B3890 =00000001                  smpsHeaderStartSong = 1
000B3890 0000                       	smpsHeaderVoice     Fart_Voices
000B3892 01                         	smpsHeaderTempoSFX  $01
000B3893 04                         	smpsHeaderChanSFX   $04
000B3894                            
000B38AC                            
000B38AC                            Fart_FM3:
000B38AE E607                       	smpsAlterVol        $07
000B38B0 E0C0                       	smpsPan             panCenter, $00
000B38B2 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B38B7 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000B38BA E1FE                       	smpsAlterNote       $FE
000B38BC A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000B38BF E100                       	smpsAlterNote       $00
000B38C1 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000B38C6 F2                         	smpsStop
000B38C7                            
000B38C7                            ; FM4 Data
000B38C7                            Fart_FM4:
000B38C9 E0C0                       	smpsPan             panCenter, $00
000B38CB 8006                       	dc.b	nRst, $06
000B38CF E616                       	smpsAlterVol        $16
000B38D1 E080                       	smpsPan             panLeft, $00
000B38D3 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B38D8 A212                       	dc.b	nA2, $12
000B38DA E60A                       	smpsAlterVol        $0A
000B38DC E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B38DF E603                       	smpsAlterVol        $03
000B38E1 E7A2                       	dc.b	smpsNoAttack, nA2
000B38E3 E603                       	smpsAlterVol        $03
000B38E5 E7A2                       	dc.b	smpsNoAttack, nA2
000B38E7 E604                       	smpsAlterVol        $04
000B38E9 E7A2                       	dc.b	smpsNoAttack, nA2
000B38EB E606                       	smpsAlterVol        $06
000B38ED E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000B38F0 E610                       	smpsAlterVol        $10
000B38F2 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B38F5 E610                       	smpsAlterVol        $10
000B38F7 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000B38FC F2                         	smpsStop
000B38FD                            
000B38FD                            ; FM5 Data
000B38FD                            Fart_FM5:
000B38FF E0C0                       	smpsPan             panCenter, $00
000B3901 8009                       	dc.b	nRst, $09
000B3905 E616                       	smpsAlterVol        $16
000B3907 E040                       	smpsPan             panRight, $00
000B3909 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B390E A215                       	dc.b	nA2, $15
000B3910 E60A                       	smpsAlterVol        $0A
000B3912 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B3915 E603                       	smpsAlterVol        $03
000B3917 E7A2                       	dc.b	smpsNoAttack, nA2
000B3919 E603                       	smpsAlterVol        $03
000B391B E7A2                       	dc.b	smpsNoAttack, nA2
000B391D E604                       	smpsAlterVol        $04
000B391F E7A2                       	dc.b	smpsNoAttack, nA2
000B3921 E606                       	smpsAlterVol        $06
000B3923 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000B3926 E610                       	smpsAlterVol        $10
000B3928 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B392B E610                       	smpsAlterVol        $10
000B392D E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000B3932 F2                         	smpsStop
000B3933                            
000B3933                            ; PSG3 Data
000B3933                            Fart_PSG3:
000B3933 F2                         	smpsStop
000B3934                            
000B3934                            ; FM Voices
000B3934                            Fart_Voices:
000B3934                            ;	Voice $00
000B3934                            ;	$39
000B3934                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000B3934                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000B3934                            	smpsVcAlgorithm     $01
000B3934                            	smpsVcFeedback      $07
000B3934                            	smpsVcUnusedBits    $00
000B3934                            	smpsVcDetune        $00, $07, $03, $07
000B3934                            	smpsVcCoarseFreq    $01, $01, $02, $00
000B3934                            	smpsVcRateScale     $00, $03, $03, $03
000B3934                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3934                            	smpsVcAmpMod        $00, $00, $00, $00
000B3934                            	smpsVcDecayRate1    $00, $00, $00, $04
000B3934                            	smpsVcDecayRate2    $00, $00, $16, $1F
000B3934                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000B3934                            	smpsVcReleaseRate   $0A, $09, $00, $00
000B3934 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000B394D                            
000B394D                            ;	Voice $01
000B394D                            ;	$00
000B394D                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000B394D                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000B394D                            	smpsVcAlgorithm     $00
000B394D                            	smpsVcFeedback      $00
000B394D                            	smpsVcUnusedBits    $00
000B394D                            	smpsVcDetune        $00, $00, $00, $00
000B394D                            	smpsVcCoarseFreq    $00, $00, $00, $00
000B394D                            	smpsVcRateScale     $00, $00, $00, $00
000B394D                            	smpsVcAttackRate    $00, $00, $00, $00
000B394D                            	smpsVcAmpMod        $00, $00, $00, $00
000B394D                            	smpsVcDecayRate1    $00, $00, $00, $00
000B394D                            	smpsVcDecayRate2    $00, $00, $00, $00
000B394D                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B394D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B394D 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B394D 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B3966                            		even
000B3966                            SoundA6:	incbin	sound\soundA6.bin
000B3996                            		even
000B3996                            SoundA7:	incbin	sound\soundA7.bin
000B39C6                            		even
000B39C6                            SoundA8:	incbin	sound\soundA8.bin
000B39FA                            		even
000B39FA                            SoundA9:	incbin	sound\soundA9.bin
000B3A0C                            		even
000B3A0C                            SoundAA:	incbin	sound\soundAA.bin
000B3A4E                            		even
000B3A4E                            SoundAB:	incbin	sound\soundAB.bin
000B3A6E                            		even
000B3A6E                            SoundAC:	incbin	sound\soundAC.bin
000B3AA2                            		even
000B3AA2                            SoundAD:	incbin	sound\soundAD.bin
000B3AD8                            		even
000B3AD8                            SoundAE:	incbin	sound\soundAE.bin
000B3B22                            		even
000B3B22                            SoundAF:	incbin	sound\soundAF.bin
000B3B50                            		even
000B3B50                            SoundB0:	incbin	sound\soundB0.bin
000B3B82                            		even
000B3B82                            SoundB1:	incbin	sound\soundB1.bin
000B3BAE                            		even
000B3BAE                            SoundB2:	incbin	sound\soundB2.bin
000B3BFE                            		even
000B3BFE                            SoundB3:	incbin	sound\soundB3.bin
000B3C48                            		even
000B3C48                            SoundB4:	include	sound\soundB4.asm
000B3C48                            SndB4_Bumper_Header:
000B3C48 =00000001                  smpsHeaderStartSong = 1
000B3C48 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000B3C4A 01                         	smpsHeaderTempoSFX  $01
000B3C4B 03                         	smpsHeaderChanSFX   $03
000B3C4C                            
000B3C5E                            
000B3C5E                            ; FM5 Data
000B3C5E                            SndB4_Bumper_FM5:
000B3C60 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000B3C63                            
000B3C63                            ; FM4 Data
000B3C63                            SndB4_Bumper_FM4:
000B3C63 F2                         	smpsStop
000B3C64                            
000B3C64                            SndB4_Bumper_Jump00:
000B3C64 A020                       	dc.b	nG2, $20
000B3C66 F2                         	smpsStop
000B3C67                            
000B3C67                            ; FM3 Data
000B3C67                            SndB4_Bumper_FM3:
000B3C67 F2                         	smpsStop
000B3C68                            
000B3C68                            SndB4_Bumper_Voices:
000B3C68                            ;	Voice $00
000B3C68                            ;	$32
000B3C68                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000B3C68                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000B3C68                            	smpsVcAlgorithm     $02
000B3C68                            	smpsVcFeedback      $06
000B3C68                            	smpsVcUnusedBits    $00
000B3C68                            	smpsVcDetune        $07, $07, $02, $00
000B3C68                            	smpsVcCoarseFreq    $00, $00, $00, $04
000B3C68                            	smpsVcRateScale     $00, $00, $00, $00
000B3C68                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3C68                            	smpsVcAmpMod        $00, $00, $00, $00
000B3C68                            	smpsVcDecayRate1    $08, $00, $00, $09
000B3C68                            	smpsVcDecayRate2    $0B, $00, $00, $09
000B3C68                            	smpsVcDecayLevel    $00, $00, $00, $00
000B3C68                            	smpsVcReleaseRate   $0F, $00, $00, $00
000B3C68 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000B3C68 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000B3C82 00                         		even
000B3C82                            SoundB5:	incbin	sound\soundB5.bin
000B3CA0 00                         		even
000B3CA0                            SoundB6:	incbin	sound\soundB6.bin
000B3CBE                            		even
000B3CBE                            SoundB7:	incbin	sound\soundB7.bin
000B3CFA                            		even
000B3CFA                            SoundB8:	incbin	sound\soundB8.bin
000B3D18                            		even
000B3D18                            SoundB9:	incbin	sound\soundB9.bin
000B3D7C                            		even
000B3D7C                            SoundBA:	incbin	sound\soundBA.bin
000B3DE0                            		even
000B3DE0                            SoundBB:	incbin	sound\soundBB.bin
000B3E0C                            		even
000B3E0C                            SoundBC:	incbin	sound\soundBC.bin
000B3E4E                            		even
000B3E4E                            SoundBD:	incbin	sound\soundBD.bin
000B3EA2                            		even
000B3EA2                            SoundBE:	incbin	sound\soundBE.bin
000B3EDC                            		even
000B3EDC                            SoundBF:	incbin	sound\soundBF.bin
000B3F4E                            		even
000B3F4E                            SoundC0:	incbin	sound\soundC0.bin
000B3F7C                            		even
000B3F7C                            SoundC1:	incbin	sound\soundC1.bin
000B3FD6                            		even
000B3FD6                            SoundC2:	incbin	sound\soundC2.bin
000B4000                            		even
000B4000                            SoundC3:	incbin	sound\soundC3.bin
000B407A                            		even
000B407A                            SoundC4:	incbin	sound\soundC4.bin
000B4178                            		even
000B4178                            SoundC5:	incbin	sound\soundC5.bin
000B41E0                            		even
000B41E0                            SoundC6:	incbin	sound\soundC6.bin
000B4222                            		even
000B4222                            SoundC7:	incbin	sound\soundC7.bin
000B4250                            		even
000B4250                            SoundC8:	incbin	sound\soundC8.bin
000B4262                            		even
000B4262                            SoundC9:	incbin	sound\soundC9.bin
000B4290                            		even
000B4290                            SoundCA:	incbin	sound\soundCA.bin
000B42BE                            		even
000B42BE                            SoundCB:	incbin	sound\soundCB.bin
000B430A                            		even
000B430A                            SoundCC:	incbin	sound\C9.ssf
000B4338                            		even
000B4338                            SoundCD:	incbin	sound\soundCD.bin
000B4364                            		even
000B4364                            SoundCE:	incbin	sound\soundCE.bin
000B4382 00                         		even
000B4382                            SoundCF:	incbin	sound\soundCF.bin
000B43BA                            		even
000B43BA                            SoundD0:	incbin	sound\soundD0.bin
000B43F4                            		even
000B43F4                            SoundD1:	incbin	sound\MenuBIT.bin
000B4402                            		even
000B4402                            SoundD2:	incbin	sound\MenuAffirm.bin
000B446A 00                         		even
000B446A                            SegaPCM:	incbin	sound\segapcm.bin
000CE5C0                            SegaPCM_end:
000CE5C0                            	even
000CE5C0                            
000CE5C0                            IdiotPCM:	incbin	sound\youare.bin
000D8691                            IdiotPCM_end:
000D8692 00                         	even
000D8692                            GM_AntiTMSS:	include _inc\GM_AntiTMSS.asm
000D8692                            ;GM_AntiTMSS:
000D8692 4EB8 12DE                  		jsr	ClearScreen
000D8696                            
000D8696 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000D86A0 41FA 0000                  		lea	@nem(pc),a0		; load Gomer patterns
000D86A4 4EB8 145A                  		jsr	NemDec
000D86A8 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000D86B2 41F9 0006 ECBA             		lea	(Nem_CreditText).l,a0	; load alphabet
000D86B8 4EB8 145A                  		jsr	NemDec
000D86BC 43F9 00FF 0000             		lea	($FF0000).l,a1
000D86C2 41FA 0000                  		lea	@eni(pc),a0		; load mappings for Gomer credits
000D86C6 7000                       		moveq	#0,d0
000D86C8 4EB8 1738                  		jsr	EniDec
000D86CC 43F9 00FF 0000             		lea	($FF0000).l,a1
000D86D2 203C 4000 0003             		move.l	#$40000003,d0
000D86D8 7227                       		moveq	#$27,d1
000D86DA 741B                       		moveq	#$1B,d2
000D86DC 4EB8 143A                  		jsr	ShowVDPGraphics
000D86E0 41FA 0000                  		lea	@pal(pc),a0
000D86E4 43F8 FB80                  		lea	($FFFFFB80).w,a1
000D86E8 701F                       		moveq	#$1F,d0
000D86EA                            @palset:
000D86EA 22D8                       		move.l	(a0)+,(a1)+
000D86EC 51C8 FFFC                  		dbf	d0,@palset
000D86F0                            
000D86F0 33FC 8C8B 00C0 0004        		move.w	#$8C8B,($C00004).l	; S/H mode, single res interlace
000D86F8 1E38 F600                  		move.b	($FFFFF600).w,d7	; save game mode
000D86FC 11FC 0000 F600             		move.b	#0,($FFFFF600).w	; make sure it's not using title screen code
000D8702 31FC 000B FFF4             		move.w	#$B,($FFFFFFF4).w	; set frame
000D8708 41F8 D080                  		lea	($FFFFD080).w,a0
000D870C 10BC 0001                  		move.b	#1,(a0)
000D8710 4EB9 0001 7BDC             		jsr	Obj8A
000D8716 11C7 F600                  		move.b	d7,($FFFFF600).w	; restore game mode
000D871A 0068 E000 0002             		or.w	#$E000,2(a0)		; S/H brightness, palette 4
000D8720 4EB9 0000 DEDE             		jsr	BuildSprites
000D8726                            
000D8726 3038 F60C                  		move.w	($FFFFF60C).w,d0
000D872A 0000 0040                  		ori.b	#$40,d0
000D872E 0880 0003                  		bclr	#3,d0
000D8732 33C0 00C0 0004             		move.w	d0,($C00004).l
000D8738 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w	; SMPS needs a frame to init
000D873E 4EB8 2B26                  		jsr	DelayProgram
000D8742 303C 0086                  		move.w	#$86,d0			; play title screen music
000D8746 4EB8 13B0                  		jsr	PlaySound
000D874A                            
000D874A 4EB8 1D96                  		jsr	Pal_FadeTo
000D874E 31FC 00B4 F614             		move.w	#180,($FFFFF614).w
000D8754                            @mainloop:
000D8754 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000D875A 4EB8 2B26                  		jsr	DelayProgram
000D875E 4A78 F614                  		tst.w	($FFFFF614).w		; if timer isn't up, loop
000D8762 66F0                       		bne.s	@mainloop
000D8764 303C 0080                  		move.w	#$80,d0			; if player is holding start, exit
000D8768 C038 F604                  		and.b	($FFFFF604).w,d0
000D876C 67E6                       		beq.s	@mainloop
000D876E 4E75                       		rts
000D8770                            @nem:	incbin artnem\tmss.bin
000DA300                            	even
000DA300                            @eni:	incbin mapeni\tmss.bin
000DA408                            	even
000DA408                            @pal:	incbin pallet\tmss.bin
000DA488                            	even
000DA488                            	even
000DA488                            
000DA488                            Minecraft:	include	minecraft\code\main.asm
000DA488                            ; Minecraft: Very Legacy Console Edition
000DA488                            ; Main file
000DA488                            
000DA488                            ;	align	$20000
000DA488                            	opt	l.
000DA488                            	include	"minecraft\code\variables.asm"
000DA488                            ; Minecraft: Very Legacy Console Edition
000DA488                            ; Variable Definitions
000DA488                            
000DA488 =00000040                  MAP_HEIGHT	equ	64
000DA488 =00000100                  MAP_WIDTH	equ	256
000DA488                            
000DA488                            		rsset	$FF0000
000DA488 =00FF0000                  mcRAM		rs.b	0
000DA488 =00FF0000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000DA488 =00FF4000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000DA488                            
000DA488                            		rsset	$FFFF8000
000DA488 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000DA488 =FFFF8E80                  planeBuffer_End	rs.b	0
000DA488 =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000DA488                            
000DA488 =FFFF8E80                  scrollBuffer	rs.l	256
000DA488                            
000DA488 =FFFF9280                  camXPosFG	rs.w	1			; camera foreground layout x position
000DA488 =FFFF9282                  camYposFG	rs.w	1			; camera foreground layout y position
000DA488 =FFFF9284                  camXPosBG	rs.w	1			; camera background layout x position
000DA488 =FFFF9286                  camYposBG	rs.w	1			; camera background layout y position
000DA488                            
000DA488 =FFFF9288                  vblankWait	rs.w	1
000DA488 =FFFF928A                  cloudFrameCnt	rs.w	1
000DA488 =FFFF928C                  cloudSkew	rs.l	36
000DA488                            
000DA488                            
000DA488                            		rsset	__rs&$FFFFFF
000DA488 =00FF931C                  mcRAM_End	rs.b	0
000DA488                            
000DA488                            ; VRAM Definitions
000DA488 =00000020                  TILE		equ	32			; number of bytes a single tile occupies in VRAM
000DA488                            
000DA488                            		rsreset
000DA488 =00000000                  vramEmptyTile	rs.b	TILE
000DA488 =00000020                  vramTerrain	rs.b	255*TILE
000DA488 =00002000                  vramBackground	rs.b	408*TILE
000DA488                            
000DA488 =0000C000                  VRAM_PLANE_A	equ	$C000
000DA488 =0000D000                  VRAM_PLANE_W	equ	$D000
000DA488 =0000E000                  VRAM_PLANE_B	equ	$E000
000DA488                            
000DA488 =0000F800                  VRAM_SPR_LIST	equ	$F800
000DA488 =0000FC00                  VRAM_HSCROLL	equ	$FC00
000DA488 =0000FC00                  VRAM_HSCROLL	equ	$FC00
000DA488                            	include	"minecraft\code\macros.asm"
000DA488                            ; =========================================================================================================================================================
000DA488                            ; MegaDrive macros
000DA488                            ; =========================================================================================================================================================
000DA488                            clrRAM		macro	starta, enda
000DA488                            		local	endaddr
000DA488                            		if narg<2
000DA488                            endaddr			EQUS	"\starta\_End"
000DA488                            		else
000DA488                            endaddr			EQUS	"\enda"
000DA488                            		endif
000DA488                            
000DA488                            		moveq	#0,d0
000DA488                            
000DA488                            		if ((\starta)&$8000)=0
000DA488                            			lea	\starta,a1
000DA488                            		else
000DA488                            			lea	(\starta).w,a1
000DA488                            		endif
000DA488                            		if (\starta)&1
000DA488                            			move.b	d0,(a1)+
000DA488                            		endif
000DA488                            
000DA488                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000DA488                            .Clear\@:	move.l	d0,(a1)+
000DA488                            		dbf	d1,.Clear\@
000DA488                            
000DA488                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000DA488                            			move.w	d0,(a1)+
000DA488                            		endif
000DA488                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000DA488                            			move.b	d0,(a1)+
000DA488                            		endif
000DA488                            		endm
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; Disable interrupts
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; ARGUMENTS:
000DA488                            ;	Nothing
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; RETURNS:
000DA488                            ;	Nothing
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            intsOff		macros
000DA488                            		ori	#$700,sr
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; Enable interrupts
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; ARGUMENTS:
000DA488                            ;	Nothing
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; RETURNS:
000DA488                            ;	Nothing
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            intsOn		macros
000DA488                            		andi	#$F8FF,sr
000DA488                            
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; VDP command instruction
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; ARGUMENTS:
000DA488                            ;	addr	- Address in VDP memory
000DA488                            ;	type	- Type of VDP memory
000DA488                            ;	rwd	- VDP command
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; RETURNS:
000DA488                            ;	Nothing
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488 =00000021                  VRAM		EQU	%100001		; VRAM
000DA488 =0000002B                  CRAM		EQU	%101011		; CRAM
000DA488 =00000025                  VSRAM		EQU	%100101		; VSRAM
000DA488 =0000000C                  READ		EQU	%001100		; VDP read
000DA488 =00000007                  WRITE		EQU	%000111		; VDP write
000DA488 =00000027                  DMA		EQU	%100111		; VDP DMA
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000DA488                            		if narg=5
000DA488                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000DA488                            		elseif narg>=6
000DA488                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000DA488                            		else
000DA488                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000DA488                            		endif
000DA488                            		endm
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; VDP DMA from 68000 memory to VDP memory
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; ARGUMENTS:
000DA488                            ;	src	- Source address in 68000 memory
000DA488                            ;	dest	- Destination address in VDP memory
000DA488                            ;	len	- Length of data in bytes
000DA488                            ;	type	- Type of VDP memory
000DA488                            ;	a6.l	- VDP control port
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; RETURNS:
000DA488                            ;	Nothing
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            dma68k		macro	src, dest, len, type
000DA488                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000DA488                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000DA488                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000DA488                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000DA488                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000DA488                            		move.w	(sp)+,(a6)
000DA488                            		endm
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000DA488                            
000DA488                            MC_Init:
000DA488 007C 0700                  		intsOff						; disable CPU interrupts
000DA48C 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000DA494                            
000DA494 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000DA49A 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000DA49E                            
000DA49E 3CBC 8230                  		move.w	#$8200+(VRAM_PLANE_A>>10),(a6)		; set plane A address
000DA4A2 3CBC 8334                  		move.w	#$8300+(VRAM_PLANE_W>>10),(a6)		; set plane W address
000DA4A6 3CBC 8407                  		move.w	#$8400+(VRAM_PLANE_B>>13),(a6)		; set plane B address
000DA4AA 3CBC 857C                  		move.w	#$8500+(VRAM_SPR_LIST>>9),(a6)		; set sprite table address
000DA4AE                            		
000DA4AE 3CBC 8B03                  		move.w	#$8B03,(a6)				; EXT-INT off, VScroll by screen, HScroll by line
000DA4B2 3CBC 8D3F                  		move.w	#$8D00+(VRAM_HSCROLL>>10),(a6)		; set HScroll table address
000DA4B6 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000DA4BA 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000DA4BE                            
000DA4D0 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000DA4D4                            
000DA4D4                            .waitVBlank:	
000DA4D4 44D6                       		move.w	(a6),ccr				; is v-blank active?
000DA4D6 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000DA4D8                            
000DA50C 6100 0000                  		bsr.w	MC_LoadBackground
000DA510 6100 0000                  		bsr.w	MC_LoadWorld
000DA514                            
000DA514 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000DA518 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000DA51C 027C F8FF                  		intsOn						; enable CPU interrupts
000DA520                            
000DA520 4278 928A                  		clr.w	(cloudFrameCnt).w		
000DA524                            
000DA524                            .gameLoop:
000DA524 50F8 9288                  		st.b	(vblankWait).w
000DA528 6100 0000                  		bsr.w	MC_UpdateScrollBuffer
000DA52C 6100                       		bsr.s	MC_RenderBlocks
000DA52E                            
000DA52E                            .spin:
000DA52E 4A38 9288                  		tst.b	(vblankWait).w
000DA532 67F0                       		beq.s	.gameLoop
000DA534 60F8                       		bra.s	.spin
000DA536                            ; ---------------------------------------------------------------------------
000DA536                            
000DA536                            ; ===========================================================================
000DA536                            ; ---------------------------------------------------------------------------
000DA536                            ; Render the Visible Portion of the World to the Screen
000DA536                            ; ---------------------------------------------------------------------------
000DA536                            MC_RenderBlocks:
000DA536 3038 9280                  		move.w	(camXPosFG).w,d0	; Get the camera's x coordinate
000DA53A E648                       		lsr.w	#3,d0			; Divide by 8 to get the index of the tile within the row
000DA53C 0240 00FF                  		andi.w	#$FF,d0			; Cap to a maximum index value of 0xFF
000DA540                            
000DA540 3238 9282                  		move.w	(camYPosFG).w,d1	; Get the camera's y coordinate
000DA544 EB49                       		lsl.w	#5,d1			; Make into row offset
000DA546 0241 3F00                  		andi.w	#$3F00,d1		; ^
000DA54A                            
000DA54A 41F9 00FF 0000             		lea	(mapCollBlocks).l,a0	; Load the world map collision layer into a0
000DA550 43F9 00FF 0000             		lea	(mapCollBlocks).l,a1	; Load the world map wall layer into a1
000DA556 45F8 8000                  		lea	(planeBuffer).w,a2	; Load the plane A buffer into a2
000DA55A 7600                       		moveq	#0,d3			; Clear d3
000DA55C 7C1C                       		moveq	#28,d6			; Load the number of rows as the outer loop counter
000DA55E                            
000DA55E                            .renderScreen:
000DA55E 7E28                       		moveq	#40,d7			; Load the number of blocks in each row as the inner loop counter
000DA560 3401                       		move.w	d1,d2			; Load the offset into the current row into d2
000DA562 1400                       		move.b	d0,d2			; ^
000DA564                            
000DA564                            .renderRow:
000DA564 1630 2000                  		move.b	(a0,d2.w),d3		; Get the block ID at the current main layout coordinates
000DA568 6700                       		beq.s	.renderWall
000DA56A                            
000DA56A 383C 8000                  		move.w	#$8000,d4			; Set the priority bit
000DA56E D643                       		add.w	d3,d3				; Turn tile ID into index
000DA570 887B 3000                  		or.w	.renderProperties(pc,d3.w),d4	; Combine with the tile render properties
000DA574 34C4                       		move.w	d4,(a2)+			; Load the corresponding tile to the plane A buffer
000DA576                            		
000DA576 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000DA578 51CF FFEA                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000DA57C 6000                       		bra.s	.endRenderRow		; Branch
000DA57E                            
000DA57E                            .renderWall:
000DA57E 1631 2000                  		move.b	(a1,d2.w),d3				; Get the block ID at the current wall layout coordinates
000DA582 D643                       		add.w	d3,d3					; Turn tile ID into index
000DA584 34FB 3000                  		move.w	.renderProperties(pc,d3.w),(a2)+	; Load the corresponding tile to the plane A buffer
000DA588                            
000DA588 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000DA58A 51CF FFD8                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000DA58E                            
000DA58E                            .endRenderRow:
000DA58E D4FC 002E                  		adda.w	#(64-41)*2,a2		; Skip the rest of the row in the plane buffer
000DA592 0641 0100                  		add.w	#$100,d1		; Increment to the next row
000DA596 0C41 3F00                  		cmpi.w	#$3F00,d1		; Check to make sure we're still in bounds
000DA59A 6200                       		bhi.s	.inBounds		; If so, branch
000DA59C 323C 3F00                  		move.w	#$3F00,d1		; If not, render the last row for the rest of the screen (Bedrock)
000DA5A0                            
000DA5A0                            .inBounds:	
000DA5A0 51CE FFBC                  		dbf	d6,.renderScreen	; Loop until the entire screen is rendered
000DA5A4 4E75                       		rts
000DA5A6                            
000DA5A6                            ; ---------------------------------------------------------------------------
000DA5A6                            block_entry	macro	tileID, palLine, priority
000DA5A6                            	if (narg<3)
000DA5A6                            		dc.w	(palLine<<13)|tileID
000DA5A6                            	else
000DA5A6                            		dc.w	$8000|(palLine<<13)|tileID
000DA5A6                            	endif
000DA5A6                            		endm
000DA5A6                            
000DA5A6                            .renderProperties:
000DA5E6                            
000DA604                            ; ---------------------------------------------------------------------------
000DA604                            
000DA604                            ; ===========================================================================
000DA604                            ; ---------------------------------------------------------------------------
000DA604                            ; Update Foreground and Background Scrolling
000DA604                            ; ---------------------------------------------------------------------------
000DA604 =00000500                  CLOUD_SCROLL_RATE	equ	1280
000DA604                            
000DA604                            MC_UpdateScrollBuffer:
000DA604 41F8 8E80                  		lea	(scrollBuffer).w,a0
000DA608 7E13                       		moveq	#20-1,d7
000DA60A 3038 9280                  		move.w	(camXPosFG).w,d0			; update scrolling
000DA60E 0240 0007                  		andi.w	#7,d0					; ^
000DA612 4440                       		neg.w	d0					; ^
000DA614 4840                       		swap	d0					; ^
000DA616 4240                       		clr.w	d0
000DA618                            
000DA618                            .blankBGSegment:
000DA618 20C0                       		move.l	d0,(a0)+
000DA61A 51CF FFFC                  		dbf	d7,.blankBGSegment
000DA61E                            
000DA61E 43F8 928C                  		lea	(cloudSkew).w,a1
000DA622 7200                       		moveq	#0,d1
000DA624 7E23                       		moveq	#36-1,d7
000DA626                            
000DA626 5378 928A                  		subq.w	#1,(cloudFrameCnt).w
000DA62A 6A00                       		bpl.s	.cloudBGSegment
000DA62C                            	
000DA62C 31FC 04FF 928A             		move.w	#CLOUD_SCROLL_RATE-1,(cloudFrameCnt).w
000DA632                            
000DA632                            .resetClouds:
000DA632 20C0                       		move.l	d0,(a0)+
000DA634 4299                       		clr.l	(a1)+
000DA636 51CF FFFA                  		dbf	d7,.resetClouds
000DA63A 6000                       		bra.s	.return
000DA63C                            
000DA63C                            .cloudBGSegment:
000DA63C 2411                       		move.l	(a1),d2
000DA63E D4BB 1000                  		add.l	.cloudSkewFactor(pc,d1.w),d2
000DA642 22C2                       		move.l	d2,(a1)+
000DA644                            
000DA644 4842                       		swap	d2
000DA646 3002                       		move.w	d2,d0
000DA648 4440                       		neg.w	d0
000DA64A 20C0                       		move.l	d0,(a0)+
000DA64C                            		
000DA64C 5841                       		addq.w	#4,d1
000DA64E 51CF FFEC                  		dbf	d7,.cloudBGSegment
000DA652                            
000DA652                            .return:
000DA652 4E75                       		rts
000DA654                            ; ---------------------------------------------------------------------------
000DA654                            .cloudSkewFactor:
000DA654 =00000080                  	.i: = 128
000DA654                            
000DA654                            	rept	36
000DA654                            	dc.l	(.i<<16)/CLOUD_SCROLL_RATE
000DA654                            	.i: = .i-2
000DA654 0000 1999 0000 1933 0000+  	endr
000DA6E4                            
000DA6E4                            ; ===========================================================================
000DA6E4                            ; ---------------------------------------------------------------------------
000DA6E4                            ; Clear The Screen
000DA6E4                            ; ---------------------------------------------------------------------------
000DA6E4                            MC_ClearScreen:
000DA6E4 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000DA6E8                            
000DA6E8 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000DA6EE 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000DA6F2 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000DA6F8 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000DA6FE                            
000DA6FE 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000DA700 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000DA702                            
000DA702 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000DA708 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000DA70C 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000DA712 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000DA718                            
000DA718 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000DA71A 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000DA71C                            
000DA71C 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000DA722 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000DA726 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000DA72C 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000DA732                            
000DA732 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000DA734 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000DA736                            
000DA736 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000DA73A 4E75                       		rts						; return
000DA73C                            ; ---------------------------------------------------------------------------
000DA73C                            
000DA73C                            ; ===========================================================================
000DA73C                            ; ---------------------------------------------------------------------------
000DA73C                            ; Load the Background
000DA73C                            ; ---------------------------------------------------------------------------
000DA73C                            MC_LoadBackground:
000DA756                            
000DA75C 41F9 0000 0000             		lea	MC_BGMap,a0
000DA762 3E3C 07FF                  		move.w	#(32*64)-1,d7				; Set loop count to plane size - 1
000DA766                            
000DA766                            .loop:
000DA766 3018                       		move.w	(a0)+,d0
000DA768 6700                       		beq.s	.empty
000DA76A 0640 0100                  		add.w	#(vramBackground>>5),d0
000DA76E 0040 6000                  		ori.w	#(3<<13),d0
000DA772                            
000DA772                            .empty:
000DA772 3D40 FFFC                  		move.w	d0,-4(a6)
000DA776 51CF FFEE                  		dbf	d7,.loop
000DA77A 4E75                       		rts						; return
000DA77C                            ; ---------------------------------------------------------------------------
000DA77C                            
000DA77C                            ; ===========================================================================
000DA77C                            ; ---------------------------------------------------------------------------
000DA77C                            ; Load the World
000DA77C                            ; ---------------------------------------------------------------------------
000DA77C                            MC_LoadWorld:
000DA77C 41F9 0000 0000             		lea	MC_TestMap,a0
000DA782 43F9 00FF 4000             		lea	mapWallBlocks,a1
000DA788 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000DA78C                            
000DA78C                            .loadWalls:
000DA78C 22D8                       		move.l	(a0)+,(a1)+
000DA78E 51CF FFFC                  		dbf	d7,.loadWalls
000DA792                            
000DA792 41F9 0000 0000             		lea	MC_TestMap,a0
000DA798 43F9 00FF 0000             		lea	mapCollBlocks,a1
000DA79E 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000DA7A2                            
000DA7A2                            .loadBlocks:
000DA7A2 22D8                       		move.l	(a0)+,(a1)+
000DA7A4 51CF FFFC                  		dbf	d7,.loadBlocks
000DA7A8 4E75                       		rts						; return
000DA7AA                            ; ---------------------------------------------------------------------------
000DA7AA                            
000DA7AA                            ; ===========================================================================
000DA7AA                            ; ---------------------------------------------------------------------------
000DA7AA                            ; VBlank Interrupt
000DA7AA                            ; ---------------------------------------------------------------------------
000DA7AA                            MC_VInt:
000DA7DE                            
000DA7DE                            ;		move.w	(camXPosFG).w,d0			; update scrolling
000DA7DE                            ;		andi.w	#7,d0					; ^
000DA7DE                            ;		neg.w	d0					; ^
000DA7DE                            ;	vdpCmd	move.l, VRAM_HSCROLL, VRAM, WRITE, (a6)		; ^
000DA7DE                            ;		move.w	d0,-4(a6)				; ^
000DA7DE                            
000DA7DE                            ;		addq.w	#1,(camXPosFG).w			
000DA7DE 51F8 9288                  		sf.b	(vblankWait).w
000DA7E2 4E73                       		rte						; return
000DA7E4                            ; ---------------------------------------------------------------------------
000DA7E4                            
000DA7E4                            ; ---------------------------------------------------------------------------
000DA7E4                            MC_Palette:
000DA7E4 0E84 08AE 068E 046C 0EE0+  	dc.w	$E84, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000DA804 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000DA824 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000DA844 0000 0EEE 0CAA 0A88 0866+  	dc.w	$000, $EEE, $CAA, $A88, $866, $644, $422, $46A, $448, $226, $6C4, $680, $8CE, $6AC, $EA6, $E44
000DA864                            ; ---------------------------------------------------------------------------
000DA864                            MC_Terrain:
000DA864                            	incbin	"minecraft\assets\bin\terrain.bin"
000DACE4                            MC_Terrain_End:
000DACE4                            	even
000DACE4                            ; ---------------------------------------------------------------------------
000DACE4                            MC_BGArt:
000DACE4                            	incbin	"minecraft\assets\bin\bgArt.bin"
000DDFE4                            MC_BGArt_End:
000DDFE4                            	even
000DDFE4                            ; ---------------------------------------------------------------------------
000DDFE4                            MC_BGMap:
000DDFE4                            	incbin	"minecraft\assets\bin\bgMap.bin"
000DEFE4                            MC_BGMap_End:
000DEFE4                            	even
000DEFE4                            ; ---------------------------------------------------------------------------
000DEFE4                            MC_TestMap:
000DEFE4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 00
000DF0E4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 01
000DF1E4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 02
000DF2E4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 03
000DF3E4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 04
000DF4E4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 05
000DF5E4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 06
000DF6E4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 07
000DF7E4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 09
000DF8E4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0A
000DF9E4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0B
000DFAE4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0C
000DFBE4 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0E
000DFCE4                            	
000DFCE4                            ;	dcb.b	32,$01	; Row 0F
000DFCE4                            ;	dcb.b	32,$02	; Row 0F
000DFCE4                            ;	dcb.b	32,$03	; Row 0F
000DFCE4                            ;	dcb.b	32,$04	; Row 0F
000DFCE4                            ;	dcb.b	32,$05	; Row 0F
000DFCE4                            ;	dcb.b	32,$06	; Row 0F
000DFCE4                            ;	dcb.b	32,$07	; Row 0F
000DFCE4                            ;	dcb.b	32,$08	; Row 0F
000DFCE4                            
000DFCE4                            ;	dcb.b	256,$03	; Row 10
000DFCE4                            ;	dcb.b	256,$02	; Row 11
000DFCE4                            ;	dcb.b	256,$02	; Row 12
000DFCE4                            ;	dcb.b	256,$02	; Row 13
000DFCE4                            ;	dcb.b	256,$01	; Row 14
000DFCE4                            ;	dcb.b	256,$01	; Row 15
000DFCE4                            ;	dcb.b	256,$01	; Row 16
000DFCE4                            ;	dcb.b	256,$01	; Row 17
000DFCE4                            ;	dcb.b	256,$01	; Row 19
000DFCE4                            ;	dcb.b	256,$01	; Row 1A
000DFCE4                            ;	dcb.b	256,$01	; Row 1B
000DFCE4                            ;	dcb.b	256,$01	; Row 1C
000DFCE4                            ;	dcb.b	256,$01	; Row 1E
000DFCE4                            ;	dcb.b	256,$01	; Row 1F
000DFCE4                            MC_TestMap_End:
000DFCE4                            MC_TestMap_End:
000DFCE4                            		
000DFCE4                            		include beebush\_BEEBUSH.68k
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; I'm Glenn Quagmire, and this is Code Bush.
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            
000DFCE4                                    include "beebush/Mega Drive.inc"
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; Basic system memory location equates
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            
000DFCE4 =00000000                  CARTRIDGE       EQU     $0                    
000DFCE4 =00080000                  CARTRIDGEE      EQU     $80000
000DFCE4 =00080000                  CARTRIDGESZ     EQU     CARTRIDGEE-CARTRIDGE
000DFCE4                            
000DFCE4 =00FF0000                  WORKRAM         EQU     $FF0000
000DFCE4 =01000000                  WORKRAME        EQU     $1000000
000DFCE4 =00010000                  WORKRAMSZ       EQU     WORKRAME-WORKRAM
000DFCE4                            
000DFCE4 =00A00000                  Z80RAM          EQU     $A00000
000DFCE4 =00A02000                  Z80RAME		EQU	$A02000
000DFCE4 =00002000                  Z80RAMSZ	EQU	Z80RAME-Z80RAM
000DFCE4 =00A11100                  Z80BUS		EQU	$A11100
000DFCE4 =00A11200                  Z80RES	        EQU	$A11200
000DFCE4                            
000DFCE4 =00080000                  CARTRAM         EQU     CARTRIDGEE	
000DFCE4                            	
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; System and VDP registers 
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            
000DFCE4                            ; I/O
000DFCE4                            
000DFCE4                            ; Word
000DFCE4 =00A10000                  VERSION_	EQU	$A10000		; Hardware version
000DFCE4 =00A10002                  IODATA1_	EQU	$A10002		; Pad 1 Data
000DFCE4 =00A10004                  IODATA2_	EQU	$A10004         ; Pad 2 Data
000DFCE4 =00A10006                  IODATA3_	EQU	$A10006         ; EXT Data
000DFCE4 =00A10008                  IOCTRL1_	EQU	$A10008         ; Pad 1 Ctrl
000DFCE4 =00A1000A                  IOCTRL2_	EQU	$A1000A         ; Pad 2 Ctrl
000DFCE4 =00A1000C                  IOCTRL3_	EQU	$A1000C         ; EXT Ctrl
000DFCE4                            
000DFCE4                            ; Byte
000DFCE4 =00A10001                  VERSION         EQU     VERSION_+1
000DFCE4 =00A10003                  IODATA1         EQU     IODATA1_+1
000DFCE4 =00A10005                  IODATA2         EQU     IODATA2_+1
000DFCE4 =00A10007                  IODATA3         EQU     IODATA3_+1
000DFCE4 =00A10009                  IOCTRL1         EQU     IOCTRL1_+1
000DFCE4 =00A1000B                  IOCTRL2         EQU     IOCTRL2_+1
000DFCE4 =00A1000D                  IOCTRL3         EQU     IOCTRL3_+1
000DFCE4                            
000DFCE4                            ; Sound
000DFCE4 =00A04000                  YMADDR0		EQU	$A04000		; YM2612 address port 0
000DFCE4 =00A04001                  YMDATA0		EQU	$A04001		; YM2612 data port 0
000DFCE4 =00A04002                  YMADDR1		EQU	$A04002		; YM2612 address port 1
000DFCE4 =00A04003                  YMDATA1		EQU	$A04003		; YM2612 data port 1
000DFCE4 =00C00011                  PSGCTRL		EQU	$C00011		; PSG control port
000DFCE4                            
000DFCE4                            ; VDP
000DFCE4 =00C00000                  VDPDATA		EQU	$C00000		; VDP data port
000DFCE4 =00C00004                  VDPCTRL		EQU	$C00004		; VDP control port
000DFCE4 =00C00008                  VDPHVCNT	EQU	$C00008		; VDP H/V counter
000DFCE4 =00C0001C                  VDPDEBUG	EQU	$C0001C		; VDP debug register
000DFCE4                            
000DFCE4                            ; TMSS
000DFCE4 =00A14000                  TMSSSEGA	EQU	$A14000		; TMSS "SEGA" register
000DFCE4 =00A14100                  TMSSMODE	EQU	$A14100		; TMSS bus mode
000DFCE4                            
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; VDP operation codes
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            
000DFCE4 =40000000                  VRAMWRITE	EQU	$40000000		; VRAM write
000DFCE4 =C0000000                  CRAMWRITE	EQU	$C0000000		; CRAM write
000DFCE4 =40000010                  VSRAMWRITE	EQU	$40000010		; VSRAM write
000DFCE4 =00000000                  VRAMREAD	EQU	$00000000		; VRAM read
000DFCE4 =00000020                  CRAMREAD	EQU	$00000020		; CRAM read
000DFCE4 =00000010                  VSRAMREAD	EQU	$00000010		; VSRAM read
000DFCE4 =40000080                  VRAMDMA		EQU	$40000080		; VRAM DMA
000DFCE4 =C0000080                  CRAMDMA		EQU	$C0000080		; CRAM DMA
000DFCE4 =40000090                  VSRAMDMA	EQU	$40000090		; VSRAM DMA
000DFCE4 =000000C0                  VRAMCOPY	EQU	$000000C0		; VRAM DMA copy
000DFCE4                            
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; VDP status codes
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            
000DFCE4 =00000000                  PAL_CLOCK:          EQU 0
000DFCE4 =00000001                  DMA_RUNNING:        EQU 1 
000DFCE4 =00000002                  HBLANKING:       	EQU 2
000DFCE4 =00000003                  VBLANKING:       	EQU 3
000DFCE4 =00000004                  ODDFRAME:        	EQU 4
000DFCE4 =00000005                  SPRITE_COLLIDE:		EQU 5
000DFCE4 =00000006                  SPRITE_OVERFLOW: 	EQU 6
000DFCE4 =00000007                  VBLANK_PENDING:  	EQU 7
000DFCE4 =00000008                  FIFO_FULL:       	EQU 8
000DFCE4 =00000009                  FIFO_EMPTY:      	EQU 9
000DFCE4                            
000DFCE4                            
000DFCE4                            
000DFCE4                                    include "beebush/Macros.inc"
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; General purpose macros for defining pointer data
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            
000DFCE4                            dclww	macro	long, word1, word2
000DFCE4                            	dc.l 	\long
000DFCE4                            	dc.w 	\word1
000DFCE4                            	dc.w 	\word2
000DFCE4                            	endm
000DFCE4                            
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; Stop the Z80
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            
000DFCE4                            Z80STOP macro
000DFCE4                            	move.w	#$100,Z80BUS			; Request Z80 bus access
000DFCE4                            .Wait\@:
000DFCE4                            	btst	#0,Z80BUS			; Was the request acknowledged?
000DFCE4                            	bne.s	.Wait\@				; If not, wait
000DFCE4                            	endm
000DFCE4                            
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; Stop the Z80
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            
000DFCE4                            Z80START macro
000DFCE4                            	move.w	#0,Z80BUS
000DFCE4                            	endm
000DFCE4                            
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; VDP command set
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            
000DFCE4                            VDPCMD macro ins, addr, type, rwd, end, end2
000DFCE4                            	local	cmd
000DFCE4                            cmd	= (\type\\rwd\)|(((\addr)&$3FFF)<<16)|((\addr)/$4000)
000DFCE4                            	if narg=5
000DFCE4                            		\ins	#\#cmd,\end
000DFCE4                            	elseif narg>=6
000DFCE4                            		\ins	#(\#cmd)\end,\end2
000DFCE4                            	else
000DFCE4                            		\ins	cmd
000DFCE4                            	endif
000DFCE4                            	endm
000DFCE4                            
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; Wait for DMA
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            
000DFCE4                            DMAWAIT macro ctrl
000DFCE4                            .Wait\@:
000DFCE4                            	if narg>0
000DFCE4                            		btst	#1,1(\ctrl)		; Is DMA active?
000DFCE4                            	else
000DFCE4                            		move.w	VDPCTRL,d0		; Is DMA active?
000DFCE4                            		btst	#1,d0
000DFCE4                            	endif
000DFCE4                            	bne.s	.Wait\@				; If so, wait
000DFCE4                            	endm
000DFCE4                            
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; VDP DMA from 68000 memory to VDP memory
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; PARAMETERS:
000DFCE4                            ;	src  - Source address in 68000 memory
000DFCE4                            ;	dest - Destination address in VDP memory
000DFCE4                            ;	len  - Length of data in bytes
000DFCE4                            ;	type - Type of VDP memory
000DFCE4                            ;	port - Address register for the VDP port
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; kys
000DFCE4 =FFFFF644                  vdpIntBuffer = $FFFFF644
000DFCE4                            
000DFCE4                            VDPDMA  macro src, dest, len, type, port
000DFCE4                            	; DMA data
000DFCE4                            	lea	VDPCTRL,\port
000DFCE4                            	move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(\port)
000DFCE4                            	move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(\port)
000DFCE4                            	move.w	#$9700|(((\src)>>17)&$7F),(\port)
000DFCE4                            	VDPCMD	move.w,\dest,\type,DMA,>>16,(\port)
000DFCE4                            	VDPCMD	move.w,\dest,\type,DMA,&$FFFF,vdpIntBuffer.w
000DFCE4                            	move.w	vdpIntBuffer.w,(\port)
000DFCE4                            	endm
000DFCE4                            
000DFCE4                            ; -------------------------------------------------------------------------
000DFCE4                            ; VDP DMA fill VRAM with byte
000DFCE4                            ; -------------------------------------------------------------------------
000DFCE4                            ; PARAMETERS:
000DFCE4                            ;	addr - Address in VRAM
000DFCE4                            ;	len  - Length of fill in bytes
000DFCE4                            ;	byte - Byte to fill VRAM with
000DFCE4                            ;	inc  - VDP autoincrement value
000DFCE4                            ;	port - Control port address register
000DFCE4                            ; -------------------------------------------------------------------------
000DFCE4                            
000DFCE4                            VDPFILL macro addr, len, byte, inc, port
000DFCE4                            	; DMA fill
000DFCE4                            	lea	VDPCTRL,\port
000DFCE4                            	move.w	#$8F00+\inc,(\port)
000DFCE4                            	move.l	#$93009400|((((\len)-1)&$FF00)>>8)|((((\len)-1)&$FF)<<16),(\port)
000DFCE4                            	move.w	#$9780,(\port)
000DFCE4                            	VDPCMD	move.l,\addr,VRAM,DMA,(\port)
000DFCE4                            	move.w	#(\byte)<<8,VDPDATA
000DFCE4                            	DMAWAIT	\port
000DFCE4                            	endm
000DFCE4                            
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            ; Macro to create ids from objects
000DFCE4                            ; ---------------------------------------------------------------------------
000DFCE4                            
000DFCE4                            OBJDEF      macro   addr, id
000DFCE4                                    dc.l    \addr
000DFCE4                            \id     rs.b    1
000DFCE4                                    endm
000DFCE4                                    endm
000DFCE4                            
000DFCE4                                    opt     l.
000DFCE4 =FFFFCC00                  hscroll =       $FFFFCC00
000DFCE4 =FFFFF800                  vdpSprites =    $FFFFF800
000DFCE4 =FFFFFB00                  palette =       $FFFFFB00
000DFCE4 =FFFFFE04                  frameCntr =     $FFFFFE04
000DFCE4                                    rsset   $FFFFF600
000DFCE4                            
000DFCE4 =FFFFF600                  gamemode:               rs.b 1  
000DFCE4 =FFFFF601                  submode                 rs.b 1
000DFCE4 =FFFFF602                  joypadMirr:             rs.b 1    
000DFCE4 =FFFFF603                  joypadPressMirr:        rs.b 1  
000DFCE4 =FFFFF604                  joypad:                 rs.b 1    
000DFCE4 =FFFFF605                  joypadPress:            rs.b 1  
000DFCE4                                                    rs.b 2  
000DFCE4 =FFFFF608                  distance:               rs.b 4
000DFCE4 =FFFFF60C                  displayMode:            rs.b 2    
000DFCE4                                                    rs.b 6
000DFCE4 =FFFFF614                  genericTimer:           rs.b 2    
000DFCE4 =FFFFF616                  mainAPosY:              rs.b 2    
000DFCE4 =FFFFF618                  mainBPosY:              rs.b 2    
000DFCE4 =FFFFF61A                  mainAPosX:              rs.b 2    
000DFCE4 =FFFFF61C                  mainBPosX:              rs.b 2    
000DFCE4 =FFFFF61E                  mainZPosY:              rs.b 2    
000DFCE4 =FFFFF620                  mainZPosX:              rs.b 2    
000DFCE4 =FFFFF622                  mainCPosX:              rs.b 2    
000DFCE4 =FFFFF624                  mainCPosY:              rs.b 2    
000DFCE4 =FFFFF626                  palFadeArgs:            rs.b 0
000DFCE4 =FFFFF626                  palFadeOff:             rs.b 1    
000DFCE4 =FFFFF627                  palFadeSize:            rs.b 1    
000DFCE4 =FFFFF628                  vblankUnk1:             rs.b 1    
000DFCE4 =FFFFF629                  vblankUnk2:             rs.b 1    
000DFCE4 =FFFFF62A                  vblankCmd:              rs.b 1   
000DFCE4                                    rsset   $FFFFF700
000DFCE4 =FFFFF700                  cameraAPosX:            rs.b 4                  
000DFCE4 =FFFFF704                  cameraAPosY:            rs.b 4                  
000DFCE4 =FFFFF708                  cameraBPosX:            rs.b 4                  
000DFCE4 =FFFFF70C                  cameraBPosY:            rs.b 4                  
000DFCE4 =FFFFF710                  cameraCPosX:            rs.b 4                  
000DFCE4 =FFFFF714                  cameraCPosY:            rs.b 4                  
000DFCE4 =FFFFF718                  cameraZPosX:            rs.b 4                  
000DFCE4 =FFFFF71C                  cameraZPosY:            rs.b 4  
000DFCE4                            
000DFCE4 =FFFFD000                  OBJECTRAM               EQU $FFFFD000 
000DFCE4 =00000040                  OBJSZ                   EQU 64
000DFCE4                            OBJECTRAMSZ             EQU OBJECTRAME-OBJECTRAM    
000DFCE4                            
000DFCE4                                    rsset           $FFFFD000 
000DFCE4 =FFFFD000                  objSlot00:      rs.b    OBJSZ
000DFCE4 =FFFFD040                  objSlot01:      rs.b    OBJSZ
000DFCE4 =FFFFD080                  objSlot02:      rs.b    OBJSZ
000DFCE4 =FFFFD0C0                  objSlot03:      rs.b    OBJSZ
000DFCE4 =FFFFD100                  objSlot04:      rs.b    OBJSZ
000DFCE4 =FFFFD140                  objSlot05:      rs.b    OBJSZ
000DFCE4 =FFFFD180                  objSlot06:      rs.b    OBJSZ
000DFCE4 =FFFFD1C0                  objSlot07:      rs.b    OBJSZ  
000DFCE4 =FFFFD200                  objSlot08:      rs.b    OBJSZ  
000DFCE4 =FFFFD240                  objSlot09:      rs.b    OBJSZ  
000DFCE4 =FFFFD280                  objSlot0A:      rs.b    OBJSZ  
000DFCE4 =FFFFD2C0                  objSlot0B:      rs.b    OBJSZ  
000DFCE4 =FFFFD300                  objSlot0C:      rs.b    OBJSZ
000DFCE4 =FFFFD340                  objSlot0D:      rs.b    OBJSZ
000DFCE4 =FFFFD380                  objSlot0E:      rs.b    OBJSZ
000DFCE4 =FFFFD3C0                  objSlot0F:      rs.b    OBJSZ
000DFCE4 =FFFFD400                  objSlot10:      rs.b    OBJSZ  
000DFCE4 =FFFFD440                  objSlot11:      rs.b    OBJSZ
000DFCE4 =FFFFD480                  objSlot12:      rs.b    OBJSZ
000DFCE4 =FFFFD4C0                  objSlot13:      rs.b    OBJSZ
000DFCE4 =FFFFD500                  objSlot14:      rs.b    OBJSZ  
000DFCE4 =FFFFD540                  objSlot15:      rs.b    OBJSZ
000DFCE4 =FFFFD580                  objSlot16:      rs.b    OBJSZ
000DFCE4 =FFFFD5C0                  objSlot17:      rs.b    OBJSZ
000DFCE4 =FFFFD600                  objSlot18:      rs.b    OBJSZ  
000DFCE4 =FFFFD640                  objSlot19:      rs.b    OBJSZ
000DFCE4 =FFFFD680                  objSlot1A:      rs.b    OBJSZ
000DFCE4 =FFFFD6C0                  objSlot1B:      rs.b    OBJSZ
000DFCE4 =FFFFD700                  objSlot1C:      rs.b    OBJSZ
000DFCE4 =FFFFD740                  objSlot1D:      rs.b    OBJSZ
000DFCE4 =FFFFD780                  objSlot1E:      rs.b    OBJSZ
000DFCE4 =FFFFD7C0                  objSlot1F:      rs.b    OBJSZ
000DFCE4 =FFFFD800                  objsAlloc:              rs.b    OBJSZ*96
000DFCE4                            OBJECTRAME:
000DFCE4                            
000DFCE4                            GM_BEEBUSH:  
000DFCE4 1038 F601                        	move.b  submode.w,d0
000DFCE8 0240 001C                          andi.w  #$1C,d0
000DFCEC 4EBB 0000                          jsr     .Index(pc,d0.w)
000DFCF0 4E75                               rts
000DFCF2                            
000DFCF2                            ; ---------------------------------------------------------------------------
000DFCF2                            
000DFCF2 =00000000                  SMNO_BEEBUSH_INIT       = 0*4   ; Init 
000DFCF2 =00000004                  SMNO_BEEBUSH_INTRO      = 1*4   ; Intro seq.
000DFCF2 =00000008                  SMNO_BEEBUSH_STATIC     = 2*4   ; Static scr.
000DFCF2 =0000000C                  SMNO_BEEBUSH_INITMAIN   = 3*4   ; Main Init
000DFCF2 =00000010                  SMNO_BEEBUSH_MAIN       = 4*4   ; Main game
000DFCF2                            
000DFCF2                            .Index:      
000DFCF2 6000 0000                          bra.w   BEEBUSH_INIT
000DFCF6 6000 0000                          bra.w   BEEBUSH_INTRO
000DFCFA 6000 0000                          bra.w   BEEBUSH_STATIC
000DFCFE 6000 0000                          bra.w   BEEBUSH_INITMAIN
000DFD02 6000 0000                          bra.w   BEEBUSH_MAIN
000DFD06                            .Null:
000DFD06 4E75                               rts 
000DFD08                            
000DFD08                            ; ---------------------------------------------------------------------------
000DFD08                            ; Initialization
000DFD08                            ; ---------------------------------------------------------------------------
000DFD08                            
000DFD08                            BEEBUSH_INIT:   
000DFD08 46FC 2700                  	move    #$2700,sr  		; interrupt disable               
000DFD0C 4EB8 15F8                          jsr     ClearArtListQueue	; clr art lists, we're not using them
000DFD10 4EB8 1E40                          jsr     PalFadeOut		; fade palette out
000DFD14 4EB8 12DE                          jsr     InitScreen		
000DFD18 4DF9 00C0 0004                     lea     VDPCTRL,a6		; init regs
000DFD1E 3038 F60C                          move.w  displayMode.w,d0	; Get mode reg. 1 info
000DFD22 0200 00BF                          andi.b  #%10111111,d0           ; Mask display enable bit
000DFD26 33C0 00C0 0004                     move.w  d0,VDPCTRL              ; Set mode reg. 1 
000DFD2C 3CBC 8004                          move.w  #$8000+%00000100,(a6)
000DFD30 3CBC 8230                          move.w  #$8230,(a6)
000DFD34 3CBC 8407                          move.w  #$8407,(a6)
000DFD38 3CBC 857C                          move.w  #$857C,(a6)
000DFD3C 3CBC 8720                          move.w  #$8720,(a6)
000DFD40 3CBC 8B00                          move.w  #$8B00+%00000000,(a6)
000DFD44 43F8 D000                          lea     OBJECTRAM.w,a1
000DFD48 7000                               moveq   #0,d0
000DFD4A 323C 013F                          move.w  #((OBJSZ*20)/4)-1,d1
000DFD4E                            
000DFD4E                            .ClearObjects:                         
000DFD4E 22C0                               move.l  d0,(a1)+
000DFD50 51C9 FFFC                          dbf     d1,.ClearObjects
000DFD54 43F8 F700                          lea     cameraAPosX.w,a1
000DFD58 7000                               moveq   #0,d0
000DFD5A 323C 0007                          move.w  #$8-1,d1
000DFD5E                            
000DFD5E                            .ClearCams:                            
000DFD5E 22C0                               move.l  d0,(a1)+
000DFD60 51C9 FFFC                          dbf     d1,.ClearCams
000DFD64                            
000DFD64 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000DFD6A 4EB8 2B26                          jsr     VSync
000DFD6E                            
000DFD6E 11FC 0000 D000                     move.b  #BBUSH_OBJNO_BODY,objSlot00.w        
000DFD74 11FC 0000 D040                     move.b  #BBUSH_OBJNO_HEAD,objSlot01.w      
000DFD7A 11FC 0000 D080                     move.b  #BBUSH_OBJNO_EYES,objSlot02.w     
000DFD80 11FC 0000 D0C0                     move.b  #BBUSH_OBJNO_MOUTH,objSlot03.w   
000DFD86 11FC 0000 D100                     move.b  #BBUSH_OBJNO_DBUG,objSlot04.w
000DFD8C                            
000DFD8C =FFFFD000                  membushBody  = objSlot00
000DFD8C =FFFFD040                  membushHead  = objSlot01       
000DFD8C =FFFFD080                  membushEyes  = objSlot02
000DFD8C =FFFFD0C0                  membushMouth = objSlot03    
000DFD8C                                                    
000DFD8C 31FC 0000 F602                     move.w  #0,joypadMirr.w
000DFD92 31FC 0000 F604                     move.w  #0,joypad.w
000DFD98                            
000DFD98                                    ; Load art direct
000DFD98                            
000DFDA2 41F9 0000 0000                     lea     ArtNem_BEEBUSH,a0                       ; Get compressed bitstream
000DFDA8 4EB8 145A                          jsr     NemDec
000DFDAC                            
000DFDB6 41F9 0000 0000                     lea     ArtNem_QUAGMIRE,a0                      ; Get compressed bitstream
000DFDBC 4EB8 145A                          jsr     NemDec
000DFDC0                            
000DFDCA 3E3C 01FF                          move.w  #(8*64)-1,d7
000DFDCE                            
000DFDCE                            .FillStatic:
000DFDCE 4EB8 2B32                          jsr     CalcRandom
000DFDD2 23C0 00C0 0000                     move.l  d0,VDPDATA
000DFDD8 D280                               add.l   d0,d1
000DFDDA 23C1 00C0 0000                     move.l  d1,VDPDATA
000DFDE0                            
000DFDE0 51CF FFEC                          dbf     d7,.FillStatic
000DFDE4                            
000DFDE4                                    ; Load screen A tilemap
000DFDE4                            
000DFDE4 43F9 0000 0000                     lea     MapScrA_BEEBUSH,a1
000DFDF0 7227                               moveq   #40-1,d1                     ; Set Width
000DFDF2 741B                               moveq   #28-1,d2                     ; Set Height
000DFDF4 4EB8 143A                          jsr     DrawTileMap                  ; Draw Tilemap to location
000DFDF8                            
000DFDF8                                    ; Load screen B tilemap
000DFDF8                            
000DFDF8 43F9 0000 0000                     lea     MapScrB_BEEBUSH,a1
000DFE04 7227                               moveq   #40-1,d1                     ; Set Width
000DFE06 741B                               moveq   #28-1,d2                     ; Set Height
000DFE08 4EB8 143A                          jsr     DrawTileMap                  ; Draw Tilemap to location
000DFE0C                            
000DFE0C                                    ; Load palette into buffer directly
000DFE0C                            
000DFE0C 7E3F                               moveq   #64-1,d7
000DFE0E 45F9 0000 0000                     lea     Pal_BEEBUSH,a2
000DFE14 47F8 FB00                          lea     palette,a3
000DFE18                            
000DFE18                            .LoadToBuffer:                         
000DFE18 26DA                               move.l  (a2)+,(a3)+
000DFE1A 51CF FFFC                          dbf     d7,.LoadToBuffer
000DFE1E                            
000DFE1E                                    ; !!!DEBUG!!!
000DFE1E                            
000DFE1E 4EB9 0000 0000                     jsr     _beebushDbugLoad
000DFE24                            
000DFE24 3038 F60C                          move.w  displayMode.w,d0          
000DFE28 0000 0040                          ori.b   #%1000000,d0
000DFE2C                            
000DFE2C 33C0 00C0 0004                     move.w  d0,VDPCTRL		     ; Enable display when ready
000DFE32 11FC 0004 F601                     move.b  #SMNO_BEEBUSH_INTRO,submode.w ; Move to next mode
000DFE38 4E75                               rts
000DFE3A                            
000DFE3A                            ; ---------------------------------------------------------------------------
000DFE3A                            ; Main cutscene loop
000DFE3A                            ; ---------------------------------------------------------------------------
000DFE3A                            
000DFE3A                            BEEBUSH_INTRO:                              
000DFE3A 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000DFE40 4EB8 2B26                          jsr     VSync
000DFE44 5278 FE04                          addq.w  #1,frameCntr.w
000DFE48 6100 0000                          bsr.w   _beebushCamShake
000DFE4C 6100 0000                          bsr.w   _beebushRunObjects    
000DFE50 4EB9 0000 DEDE                     jsr     DrawObjects
000DFE56                            
000DFE56 4A38 D070                          tst.b   membushHead+$30
000DFE5A 6700                               beq.s   .NoChg
000DFE5C 11FC 0008 F601                     move.b  #SMNO_BEEBUSH_STATIC,submode.w ; Move to next mode
000DFE62 31FC 003C F614                     move.w  #60,genericTimer.w
000DFE68 6100 0000                          bsr.w   _beebushClrSprites
000DFE6C                            
000DFE6C                            .NoChg: 
000DFE6C 4E75                               rts 
000DFE6E                            
000DFE6E                            ; ---------------------------------------------------------------------------
000DFE6E                            ; Static Transition sequence
000DFE6E                            ; ---------------------------------------------------------------------------
000DFE6E                            
000DFE6E                            BEEBUSH_STATIC:                              
000DFE6E 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000DFE74 4EB8 2B26                          jsr     VSync
000DFE78 5278 FE04                          addq.w  #1,frameCntr.w
000DFE7C 6100 0000                          bsr.w   _beebushDrawStatic
000DFE80 5378 F614                          subq.w  #1,genericTimer.w
000DFE84 6600 0000                          bne.w   .Exit
000DFE88 11FC 000C F601                     move.b  #SMNO_BEEBUSH_INITMAIN,submode.w ; Move to next mode
000DFE8E 4E75                               rts
000DFE90                            .Exit:
000DFE90                            
000DFE90 4E75                               rts
000DFE92                            
000DFE92                            ; ---------------------------------------------------------------------------
000DFE92                            ; Initialize main sequence
000DFE92                            ; ---------------------------------------------------------------------------
000DFE92                            
000DFE92 =FFFFD000                  membushPlayer = objSlot00
000DFE92                            
000DFE92                            BEEBUSH_INITMAIN:                              
000DFE92 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
000DFE98 4EB8 2B26                          jsr     VSync
000DFE9C 43F9 0000 0000                     lea     MapScrB_BEEBUSHMAIN,a1
000DFEA2 33FC 8B00 00C0 0004                move.w  #$8B00+%00000000,VDPCTRL
000DFEB0 723F                               moveq   #64-1,d1                     ; Set Width
000DFEB2 741B                               moveq   #28-1,d2                     ; Set Height
000DFEB4 4EB8 143A                          jsr     DrawTileMap                  ; Draw Tilemap to location
000DFEB8 43F8 D000                          lea     OBJECTRAM.w,a1
000DFEBC 7000                               moveq   #0,d0
000DFEBE 323C 013F                          move.w  #((OBJSZ*20)/4)-1,d1
000DFEC2                            
000DFEC2                            .ClearObjects:                         
000DFEC2 22C0                               move.l  d0,(a1)+
000DFEC4 51C9 FFFC                          dbf     d1,.ClearObjects
000DFEC8 11FC 0000 D000                     move.b  #BBUSH_OBJNO_PLAYER,objSlot00.w
000DFECE 21FC 1234 5678 F608                move.l  #$12345678,distance
000DFED6 11FC 0010 F601                     move.b  #SMNO_BEEBUSH_MAIN,submode.w ; Move to next mode
000DFEDC 4E75                               rts
000DFEDE                            
000DFEDE                            ; ---------------------------------------------------------------------------
000DFEDE                            ; Main    lGod wfyuck ioff
000DFEDE                            ; ---------------------------------------------------------------------------
000DFEDE                            
000DFEDE                            BEEBUSH_MAIN:                              
000DFEDE 11FC 001C F62A                     move.b  #VBLNO_BEEBUSHSCR,vblankCmd.w
000DFEE4 4EB8 2B26                          jsr     VSync
000DFEE8 5278 FE04                          addq.w  #1,frameCntr.w
000DFEEC 6100 0000                          bsr.w   _beebushScroll
000DFEF0 6100 0000                          bsr.w   _beebushRunObjects    
000DFEF4 4EB9 0000 DEDE                     jsr     DrawObjects
000DFEFA 4E75                               rts
000DFEFC                            
000DFEFC                            ; ---------------------------------------------------------------------------
000DFEFC                            
000DFEFC                            Pal_BEEBUSH:
000DFEFC                                    incbin	"beebush/Data/BEEBUSH.PAL"
000DFF7C                                    even
000DFF7C                            
000DFF7C                            MapScrA_BEEBUSH:
000DFF7C                                    incbin  "beebush/Data/BEEBUSH_SCR_A.MAP"
000E083C                                    even
000E083C                            
000E083C                            MapScrB_BEEBUSH:
000E083C                                    incbin  "beebush/Data/BEEBUSH_SCR_B.MAP"
000E10FC                                    even
000E10FC                            
000E10FC                            MapScrB_BEEBUSHMAIN:
000E10FC                                    incbin  "beebush/Data/BEEBUSH_MAIN_B.MAP"
000E1EFC                                    even
000E1EFC                            
000E1EFC                            ArtNem_BEEBUSH:
000E1EFC                                    incbin  "beebush/Data/BEEBUSH_ART.NEM"
000E2260                                    even
000E2260                            
000E2260                            ArtNem_QUAGMIRE:
000E2260                                    incbin  "beebush/Data/QUAGMIRE_ART.NEM"
000E3238                                    even
000E3238                            
000E3238                            ; ---------------------------------------------------------------------------
000E3238                            ; Do camera unsteadiness movement
000E3238                            ;
000E3238                            ; camera A = REC. and camera overlay
000E3238                            ; camera B = background (moves)
000E3238                            ; ---------------------------------------------------------------------------
000E3238                            
000E3238 =FFFFF760                  beeSinCntr = $FFFFF760
000E3238 =FFFFF762                  beeSin     = $FFFFF762      
000E3238 =FFFFF764                  beeCos     = $FFFFF764
000E3238                            
000E3238                            _beebushCamShake:
000E3238 5438 F760                          add.b   #2,beeSinCntr.w
000E323C 1038 F760                          move.b  beeSinCntr.w,d0
000E3240 4EB8 2B58                          jsr     CalcSinCos
000E3244 31C0 F764                          move.w  d0,beeCos.w
000E3248 31C1 F762                          move.w  d1,beeSin.w
000E324C EE40                               asr.w   #7,d0
000E324E EC41                               asr.w   #6,d1
000E3250                            
000E3250                                    
000E3250 31C0 F61C                          move.w  d0,mainBPosX
000E3254 4440                               neg.w   d0
000E3256 31C0 F708                          move.w  d0,cameraBPosX
000E325A                            
000E325A 31C1 F618                          move.w  d1,mainBPosY
000E325E 31C1 F70C                          move.w  d1,cameraBPosY
000E3262 4E75                               rts
000E3264                            
000E3264                            ; ---------------------------------------------------------------------------
000E3264                            ; Main scrolling for gameplay
000E3264                            ; ---------------------------------------------------------------------------
000E3264                            
000E3264                            
000E3264                            _beebushScroll:                    
000E3264 43F8 CC00                          lea     hscroll.w,a1
000E3268                            
000E3268 3238 F700                          move.w  cameraAPosX.w,d1
000E326C E241                               asr.w   #1,d1
000E326E 31C1 F708                          move.w  d1,cameraBPosX
000E3272                            
000E3272 3238 F710                          move.w  cameraCPosX.w,d1
000E3276 D241                               add.w   d1,d1
000E3278 31C1 F718                          move.w  d1,cameraZPosX.w
000E327C                            
000E327C 3038 F708                          move.w  cameraBPosX.w,d0
000E3280                            
000E3280                                    ; Far away BG segment
000E3280                            
000E3280 323C 0047                          move.w  #72-1,d1
000E3284 E480                               asr.l   #2,d0
000E3286                            .FarBG:                         
000E3286 22C0                               move.l  d0,(a1)+
000E3288 51C9 FFFC                          dbf     d1,.FarBG
000E328C                            
000E328C                                    ; Sidewalk perspective effect
000E328C                            
000E328C 3038 F710                          move.w  cameraCPosX.w,d0
000E3290 E440                               asr.w   #2,d0
000E3292 31C0 F622                          move.w  d0,mainCPosX.w
000E3296 0C40 0021                          cmp.w   #32+1,d0
000E329A 6600                               bne.s   .SkipBRes
000E329C 31FC 0000 F710                     move.w  #0,cameraCPosX.w
000E32A2 31FC 0000 F718                     move.w  #0,cameraZPosX.w
000E32A8 303C 0000                          move.w  #0,d0
000E32AC                            .SkipBRes
000E32AC 4440                               neg     d0
000E32AE 3438 F718                          move.w  cameraZPosX.w,d2
000E32B2 E442                               asr.w   #2,d2
000E32B4 31C2 F620                          move.w  d2,mainZPosX.w
000E32B8 4442                               neg     d2
000E32BA 9440                               sub.w   d0,d2
000E32BC 48C2                               ext.l   d2
000E32BE E182                               asl.l   #8,d2
000E32C0 85FC 0068                          divs.w  #$68,d2
000E32C4 48C2                               ext.l   d2
000E32C6 E182                               asl.l   #8,d2
000E32C8 3600                               move.w  d0,d3
000E32CA 323C 001F                          move.w  #32-1,d1
000E32CE                            
000E32CE                            .Road:                                                    
000E32CE 3003                               move.w  d3,d0
000E32D0 4440                               neg.w   d0
000E32D2 22C0                               move.l  d0,(a1)+
000E32D4 4843                               swap    d3
000E32D6 D682                               add.l   d2,d3
000E32D8 4843                               swap    d3
000E32DA 51C9 FFF2                          dbf     d1,.Road
000E32DE                            
000E32DE                                    ; Grass (far away)
000E32DE                            
000E32DE 3038 F708                          move.w  cameraBPosX.w,d0
000E32E2 2400                               move.l  d0,d2
000E32E4 E482                               asr.l   #2,d2
000E32E6 9082                               sub.l   d2,d0
000E32E8 323C 001F                          move.w  #32-1,d1
000E32EC                            
000E32EC                            .GrassFar
000E32EC                            
000E32EC 22C0                               move.l  d0,(a1)+
000E32EE 51C9 FFFC                          dbf     d1,.GrassFar
000E32F2                            
000E32F2 3038 F708                          move.w  cameraBPosX.w,d0
000E32F6 323C 001F                          move.w  #32-1,d1
000E32FA                                    
000E32FA                            .GrassMid
000E32FA                            
000E32FA 22C0                               move.l  d0,(a1)+
000E32FC 51C9 FFFC                          dbf     d1,.GrassMid
000E3300                            
000E3300 3038 F708                          move.w  cameraBPosX.w,d0
000E3304 2400                               move.l  d0,d2
000E3306 E482                               asr.l   #2,d2
000E3308 D082                               add.l   d2,d0
000E330A 323C 001F                          move.w  #32-1,d1
000E330E                            
000E330E                            .GrassClose
000E330E                            
000E330E 22C0                               move.l  d0,(a1)+
000E3310 51C9 FFFC                          dbf     d1,.GrassClose
000E3314 31F8 F700 F61A                     move.w  cameraAPosX.w,mainAPosX
000E331A 31F8 F708 F61C                     move.w  cameraBPosX.w,mainBPosX
000E3320 4E75                               rts
000E3322                            
000E3322                            ; ---------------------------------------------------------------------------
000E3322                            ; Clear screen sprites
000E3322                            ; ---------------------------------------------------------------------------
000E3322                            
000E3322                            _beebushClrSprites:
000E3322 21FC 0000 0000 F616                move.l  #0,mainAPosY.w
000E332A 21FC 0000 0000 F61A                move.l  #0,mainAPosX.w
000E3332                            
000E3332 43F8 F800                          lea     vdpSprites.w,a1
000E3336 7000                               moveq   #0,d0
000E3338 323C 009F                          move.w  #$A0-1,d1               ; Clear all sprites
000E333C                            
000E333C                            .ClearSprites:
000E333C 22C0                               move.l  d0,(a1)+
000E333E 51C9 FFFC                          dbf     d1,.ClearSprites
000E3342 43F8 CC00                          lea     hscroll.w,a1
000E3346 7000                               moveq   #0,d0
000E3348 323C 0100                          move.w  #$100,d1
000E334C                            
000E334C                            .ClearHScroll:
000E334C 22C0                               move.l  d0,(a1)+
000E334E 51C9 FFFC                          dbf     d1,.ClearHScroll
000E3352 4E75                               rts
000E3354                            
000E3354                            ; ---------------------------------------------------------------------------
000E3354                            ; Draw tilemap static for transitory sequences
000E3354                            ; Draws 2 "random" tiles out of a memory space location (document later idk)
000E3354                            ; ---------------------------------------------------------------------------
000E3354                            
000E3354                            _beebushDrawStatic:
000E3354 4DF9 00C0 0000                     lea     VDPDATA,a6                      ; a6 = VDPDATA        
000E3360 383C 000E                          move.w  #(30/2)-1,d4                    ; d4 = width / 2
000E3364 3A3C 0013                          move.w  #20-1,d5                        ; d5 = height
000E3368 2C3C 0080 0000                     move.l  #$800000,d6                     ; d6 = cmd row delta 
000E336E                            
000E336E                            .LoopRow:                              
000E336E 2D43 0004                          move.l  d3,VDPCTRL-VDPDATA(a6)          ; set addr
000E3372 3E04                               move.w  d4,d7                           ; copy width to d7
000E3374                            
000E3374                            .LoopColumn:            
000E3374 4EB8 2B32                          jsr     CalcRandom                      ; get rand
000E3378 0240 003F                          andi.w  #$003F,d0                       ; mask high bits of tile no.
000E337C 0040 2200                          ori.w   #$2200,d0                       ; set line 2 and id $1XX
000E3380 3C80                               move.w  d0,(a6)                         ; write 1 tile
000E3382 D007                               add.b   d7,d0                           ; add whatever d7 is to d0
000E3384 0240 003F                          andi.w  #$003F,d0                       ; do the same to it
000E3388 0040 2200                          ori.w   #$2200,d0
000E338C 3C80                               move.w  d0,(a6)                         ; write 1 tile
000E338E                            
000E338E 51CF FFE4                          dbf     d7,.LoopColumn                  ; loop for width
000E3392 D686                               add.l   d6,d3                           ; move to next row
000E3394 51CD FFD8                          dbf     d5,.LoopRow                     ; loop for height
000E3398 4E75                               rts
000E339A                            
000E339A                            ; ---------------------------------------------------------------------------
000E339A                            ; local memory usage derived from global (this sucks)
000E339A                            
000E339A                            
000E339A                                    include 'beebush/Objects.asm'
000E339A                            ; ---------------------------------------------------------------------------
000E339A                            ; Bee Bush Screen objects library
000E339A                            ; Depends on Stock Sonic 1 object library and sprite renderer
000E339A                            ; ---------------------------------------------------------------------------
000E339A                            
000E339A =00000038                  OBJ.GRAVITY    EQU     56              ; Gravity delta
000E339A                            
000E339A                                                rsreset
000E339A =00000000                  obj.No:             rs.b 1                  
000E339A =00000001                  obj.Render:         rs.b 1                  
000E339A =00000002                  obj.Tile:           rs.b 2                  
000E339A =00000004                  obj.Map:            rs.b 4                  
000E339A =00000008                  obj.X:              rs.b 2                  
000E339A =0000000A                  obj.YScr:           rs.b 2                  
000E339A =0000000C                  obj.Y:              rs.b 2                  
000E339A =0000000E                  obj.YSub:           rs.b 2                  
000E339A =00000010                  obj.XSpeed:         rs.b 2                  
000E339A =00000012                  obj.YSpeed:         rs.b 2                  
000E339A =00000014                  obj.Momentum:       rs.b 2                  
000E339A =00000016                  obj.YRad:           rs.b 1                  
000E339A =00000017                  obj.XRad:           rs.b 1                  
000E339A =00000018                  obj.XDraw:          rs.b 1                  
000E339A =00000019                  obj.Priority:       rs.b 1                  
000E339A =0000001A                  obj.Frame:          rs.b 1                  
000E339A =0000001B                  obj.AnimFrame:      rs.b 1                  
000E339A =0000001C                  obj.Anim:           rs.b 1                  
000E339A =0000001D                  obj.LastAnim:       rs.b 1                  
000E339A =0000001E                  obj.FrameTimer:     rs.b 1                  
000E339A =0000001F                  obj.FrameMirr:      rs.b 1                  
000E339A =00000020                  obj.Collision:      rs.b 1                  
000E339A =00000021                  obj.ColliCnt:       rs.b 1                  
000E339A =00000022                  obj.Status:         rs.b 1                  
000E339A =00000023                  obj.Respawn:        rs.b 1                  
000E339A =00000024                  obj.Action:         rs.b 1                  
000E339A =00000025                  obj.SubAction:      rs.b 1                  
000E339A =00000026                  obj.Angle:          rs.b 2                  
000E339A =00000028                  obj.Arg:            rs.b 1                   
000E339A                            
000E339A                            ; --------------------------------------------------------------------------- 
000E339A                            
000E339A =00000000                  STAT.XDIR:       equ 0
000E339A =00000001                  STAT.YDIR:       equ 1                  
000E339A =00000003                  STAT.HOISTING:   equ 3                  
000E339A =00000005                  STAT.PUSHED:     equ 5                  
000E339A =00000007                  STAT.FLAG:       equ 7
000E339A                            
000E339A                            ; ---------------------------------------------------------------------------
000E339A                            
000E339A =00000000                  PHYS.DIR:        equ 0                  
000E339A =00000001                  PHYS.AIRBORNE:   equ 1                  
000E339A =00000002                  PHYS.ROLLING:    equ 2                  
000E339A =00000003                  PHYS.HOISTED:    equ 3                  
000E339A =00000004                  PHYS.ROLLJUMP:   equ 4                  
000E339A =00000005                  PHYS.PUSH:       equ 5                  
000E339A =00000006                  PHYS.WATER:      equ 6
000E339A =00000007                  PHYS.FLAG:       equ 7
000E339A                            
000E339A                            ; ---------------------------------------------------------------------------
000E339A                            
000E339A =00000000                  REND.XMIRR:      equ 0
000E339A =00000001                  REND.YMIRR:      equ 1
000E339A =00000002                  REND.CAMOFF:     equ 2
000E339A =00000003                  REND.CAMOFF2:    equ 3
000E339A =00000004                  REND.HEIGHT:     equ 4
000E339A =00000005                  REND.SPTYPE:     equ 5
000E339A =00000006                  REND.BEHIND:     equ 6                  
000E339A =00000007                  REND.ONSCREEN:   equ 7
000E339A                            
000E339A                            ; ---------------------------------------------------------------------------
000E339A                            
000E339A                            _beebushRunObjects:                             
000E339A 41F8 D000                          lea     OBJECTRAM.w,a0
000E339E 7E5F                               moveq   #96-1,d7
000E33A0 7000                               moveq   #0,d0
000E33A2                            
000E33A2                            .RunObjLoop:                       
000E33A2 1010                               move.b  obj.No(a0),d0
000E33A4 6700                               beq.s   .EmptySlot
000E33A6 D040                               add.w   d0,d0
000E33A8 D040                               add.w   d0,d0
000E33AA 227B 0000                          movea.l .ObjectIndex-4(pc,d0.w),a1       ; No zero offset - start at 1
000E33AE 4E91                               jsr     (a1)
000E33B0 7000                               moveq   #0,d0
000E33B2                            
000E33B2                            .EmptySlot:                            
000E33B2 41E8 0040                          lea     OBJSZ(a0),a0            ; Move into next object memory space
000E33B6 51CF FFEA                          dbf     d7,.RunObjLoop
000E33BA 4E75                               rts
000E33BC                            
000E33BC                            ; ---------------------------------------------------------------------------
000E33BC                            ; Object Index for Bee Bush
000E33BC                            ; ---------------------------------------------------------------------------
000E33BC =00000001                  BBUSH_OBJNO_PLAYER      = 1
000E33BC =00000002                  BBUSH_OBJNO_BODY        = 2
000E33BC =00000003                  BBUSH_OBJNO_HEAD        = 3
000E33BC =00000004                  BBUSH_OBJNO_EYES        = 4
000E33BC =00000005                  BBUSH_OBJNO_MOUTH       = 5
000E33BC =00000006                  BBUSH_OBJNO_DBUG        = 6
000E33BC                            
000E33BC                            
000E33BC                            .ObjectIndex:    
000E33BC 0000 0000                          dc.l BbushObj_Player
000E33C0 0000 0000                          dc.l BbushObj_QuagmireBody
000E33C4 0000 0000                          dc.l BbushObj_QuagmireHead
000E33C8 0000 0000                          dc.l BbushObj_QuagmireEyes
000E33CC 0000 0000                          dc.l BbushObj_QuagmireMouth
000E33D0 0000 0000                          dc.l BbushObj_Dbug
000E33D4                            .Null:
000E33D4 4E75                               rts 
000E33D6                            
000E33D6                                    include  "beebush/Objects/OBJ_QUAGMIRE.asm"
000E33D6                            ; ---------------------------------------------------------------------------
000E33D6                            ; Body
000E33D6                            ; ---------------------------------------------------------------------------
000E33D6                            
000E33D6 =00000030                  bbush.Flag  = $30
000E33D6 =00000032                  bbush.orgX  = $32
000E33D6 =00000034                  bbush.orgY  = $34
000E33D6 =00000036                  bbush.Cntr  = $36
000E33D6 =00000038                  bbush.Timer = $38
000E33D6 =00000039                  bbush.MvChk = $39
000E33D6                            
000E33D6                            
000E33D6 =00000300                  QUAGTILE = $300
000E33D6                            
000E33D6                            BbushObj_QuagmireBody:                          
000E33D6 7000                               moveq   #0,d0
000E33D8 1028 0024                          move.b  obj.Action(a0),d0
000E33DC 323B 0000                          move.w  .Index(pc,d0.w),d1
000E33E0 4EFB 1000                          jmp     .Index(pc,d1.w)
000E33E4                            
000E33E4                            ; ---------------------------------------------------------------------------
000E33E4                            .Index:                                
000E33E4 0000                               dc.w QuagmireBody_Init-.Index
000E33E6 0000                               dc.w QuagmireBody_Display-.Index
000E33E8                            ; ---------------------------------------------------------------------------
000E33E8                            
000E33E8                            QuagmireBody_Init:                         
000E33E8 5428 0024                          addq.b  #2,obj.Action(a0)
000E33EC 317C 00A8 0008                     move.w  #168,obj.X(a0)
000E33F2 317C 00A0 000C                     move.w  #160,obj.Y(a0)
000E33F8 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E3400 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E3406 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E340C 117C 0007 0019                     move.b  #7,obj.Priority(a0)
000E3412 117C 0002 001A                     move.b  #2,obj.Frame(a0)
000E3418 43F8 D040                          lea     membushHead,a1
000E341C 3368 0008 0008                     move.w  obj.X(a0),obj.X(a1)
000E3422 3368 000C 000C                     move.w  obj.Y(a0),obj.Y(a1)
000E3428 0469 003C 000C                     sub.w   #60,obj.Y(a1)
000E342E 5169 0008                          sub.w   #8,obj.X(a1)    
000E3432 3369 0008 0032                     move.w  obj.X(a1),bbush.orgX(a1)
000E3438 3369 000C 0034                     move.w  obj.Y(a1),bbush.orgY(a1)
000E343E                                  
000E343E                            
000E343E                            QuagmireBody_Display:                           
000E343E 4EB9 0000 DE84                     jsr     _objectDraw  
000E3444 4E75                               rts
000E3446                            
000E3446                            ; ---------------------------------------------------------------------------
000E3446                            ; Head
000E3446                            ; ---------------------------------------------------------------------------
000E3446                            
000E3446                            BbushObj_QuagmireHead:                          
000E3446 7000                               moveq   #0,d0
000E3448 1028 0024                          move.b  obj.Action(a0),d0
000E344C 323B 0000                          move.w  .Index(pc,d0.w),d1
000E3450 4EFB 1000                          jmp     .Index(pc,d1.w)
000E3454                            
000E3454                            ; ---------------------------------------------------------------------------
000E3454                            .Index:                                
000E3454 0000                               dc.w QuagmireHead_Init-.Index
000E3456 0000                               dc.w QuagmireHead_Display-.Index
000E3458 0000                               dc.w QuagmireHead_InitBck-.Index
000E345A 0000                               dc.w QuagmireHead_MoveBck-.Index
000E345C 0000                               dc.w QuagmireHead_WaitInit-.Index
000E345E 0000                               dc.w QuagmireHead_Wait-.Index
000E3460                            ; ---------------------------------------------------------------------------
000E3460                            
000E3460                            QuagmireHead_Init:                         
000E3460 5428 0024                          addq.b  #2,obj.Action(a0)
000E3464 117C 0012 0016                     move.b  #18,obj.YRad(a0)
000E346A 117C 0009 0017                     move.b  #9,obj.XRad(a0)
000E3470 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E3478 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E347E 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E3484 117C 0006 0019                     move.b  #6,obj.Priority(a0)
000E348A 117C 0001 001A                     move.b  #1,obj.Frame(a0)
000E3490                            
000E3490                            QuagmireHead_Display:  
000E3490 11FC 0003 D09A                     move.b  #3,(membushEyes+obj.Frame)
000E3496 3168 0032 0008                     move.w  bbush.orgX(a0),obj.X(a0)
000E349C 3168 0034 000C                     move.w  bbush.orgY(a0),obj.Y(a0)                    
000E34A2 4EB9 0000 DE84                     jsr     _objectDraw  
000E34A8 4E75                               rts
000E34AA                            
000E34AA                            QuagmireHead_InitBck:
000E34AA 117C 009A 0036                     move.b  #$9A,bbush.Cntr(a0)     ; set initial "phase" of sine
000E34B0 117C 003C 0038                     move.b  #60,bbush.Timer(a0)  
000E34B6 5428 0024                          addq.b  #2,obj.Action(a0)   
000E34BA 11FC 0004 D09A                     move.b  #4,(membushEyes+obj.Frame)
000E34C0                                
000E34C0                            QuagmireHead_MoveBck:
000E34C0 1028 0036                          move.b  bbush.Cntr(a0),d0
000E34C4 5028 0036                          add.b   #8,bbush.Cntr(a0)
000E34C8 4EB8 2B58                          jsr     CalcSinCos              ; note: d0 yshift div. needs to be 6 so adj.
000E34CC                            
000E34CC                            
000E34CC E840                               asr.w   #4,d0
000E34CE 0C68 00B0 0008                     cmpi.w  #$B0,obj.X(a0)
000E34D4                            
000E34D4 3428 0032                          move.w  bbush.orgX(a0),d2
000E34D8 9440                               sub.w   d0,d2
000E34DA                            
000E34DA 0C42 00B0                          cmpi.w  #$B0,d2
000E34DE 6200                               bhi.s   .SkipSet
000E34E0 0C42 0091                          cmpi.w  #$91,d2
000E34E4 6500                               blo.s   .SkipSet
000E34E6                            
000E34E6 3142 0008                          move.w  d2,obj.X(a0)
000E34EA                            
000E34EA                            
000E34EA E640                               asr.w   #3,d0        
000E34EC 3628 0034                          move.w  bbush.orgY(a0),d3
000E34F0 D640                               add.w   d0,d3
000E34F2 3143 000C                          move.w  d3,obj.Y(a0) 
000E34F6                            
000E34F6                            .SkipSet:
000E34F6 4EB9 0000 DE84                     jsr     _objectDraw 
000E34FC 5328 0038                          sub.b   #1,bbush.Timer(a0) 
000E3500 6700                               beq.s   .Exit
000E3502 4E75                               rts
000E3504                            .Exit:
000E3504 5428 0024                          addq.b  #2,obj.Action(a0)
000E3508 4E75                               rts  
000E350A                            
000E350A                            QuagmireHead_WaitInit:  
000E350A 5428 0024                          addq.b  #2,obj.Action(a0)     
000E350E 117C 001E 0038                     move.b  #30,bbush.Timer(a0) 
000E3514                            
000E3514                            QuagmireHead_Wait:
000E3514 4EB9 0000 DE84                     jsr     _objectDraw                    
000E351A 5328 0038                          sub.b   #1,bbush.Timer(a0) 
000E351E 6600                               bne.s   .Exit
000E3520 50E8 0030                          st      bbush.Flag(a0)
000E3524                            
000E3524                            .Exit:
000E3524 4E75                               rts
000E3526                            
000E3526                            ; ---------------------------------------------------------------------------
000E3526                            ; Eyes
000E3526                            ; ---------------------------------------------------------------------------
000E3526                            
000E3526                            BbushObj_QuagmireEyes:                          
000E3526 7000                               moveq   #0,d0
000E3528 1028 0024                          move.b  obj.Action(a0),d0
000E352C 323B 0000                          move.w  .Index(pc,d0.w),d1
000E3530 4EFB 1000                          jmp     .Index(pc,d1.w)
000E3534                            
000E3534                            ; ---------------------------------------------------------------------------
000E3534                            .Index:                                
000E3534 0000                               dc.w QuagmireEyes_Init-.Index
000E3536 0000                               dc.w QuagmireEyes_Display-.Index
000E3538                            ; ---------------------------------------------------------------------------
000E3538                            
000E3538                            QuagmireEyes_Init:                         
000E3538 5428 0024                          addq.b  #2,obj.Action(a0)
000E353C 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E3544 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E354A 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E3550 117C 0005 0019                     move.b  #5,obj.Priority(a0)
000E3556 117C 0003 001A                     move.b  #3,obj.Frame(a0)
000E355C                            
000E355C                            QuagmireEyes_Display:   
000E355C 43F8 D040                          lea     membushHead,a1
000E3560 3169 0008 0008                     move.w  obj.X(a1),obj.X(a0)
000E3566 3169 000C 000C                     move.w  obj.Y(a1),obj.Y(a0)
000E356C 0468 0016 000C                     sub.w   #22,obj.Y(a0)                        
000E3572 4EB9 0000 DE84                     jsr     _objectDraw  
000E3578 4E75                               rts
000E357A                            
000E357A                            ; ---------------------------------------------------------------------------
000E357A                            ; Mouth
000E357A                            ; ---------------------------------------------------------------------------
000E357A                            
000E357A                            BbushObj_QuagmireMouth:
000E357A 7000                               moveq   #0,d0
000E357C 1028 0024                          move.b  obj.Action(a0),d0
000E3580 323B 0000                          move.w  .Index(pc,d0.w),d1
000E3584 4EFB 1000                          jmp     .Index(pc,d1.w)
000E3588                            
000E3588                            ; ---------------------------------------------------------------------------
000E3588                            .Index:                                
000E3588 0000                               dc.w QuagmireMouth_Init1-.Index
000E358A 0000                               dc.w QuagmireMouth_Speak1-.Index
000E358C 0000                               dc.w QuagmireMouth_Init2-.Index
000E358E 0000                               dc.w QuagmireMouth_Speak2-.Index
000E3590                            ; ---------------------------------------------------------------------------
000E3590                            
000E3590                            QuagmireMouth_Init1:                         
000E3590 5428 0024                          addq.b  #2,obj.Action(a0)
000E3594 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
000E359C 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E35A2 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
000E35A8 117C 0005 0019                     move.b  #5,obj.Priority(a0)
000E35AE 117C 0008 001A                     move.b  #8,obj.Frame(a0)
000E35B4                            
000E35B4                            QuagmireMouth_Speak1:   
000E35B4 6100 0000                          bsr.w   _quagEyeAdjToHead
000E35B8 43F9 0000 0000                     lea     AniSpr_QuagmireMouth,a1
000E35BE 6100 0000                          bsr.w   _objectAnimate
000E35C2 4EB9 0000 DE84                     jsr     _objectDraw  
000E35C8 4E75                               rts
000E35CA                            
000E35CA                            QuagmireMouth_Init2:   
000E35CA 5228 001C                          addq.b  #1,obj.Anim(a0)
000E35CE 5428 0024                          addq.b  #2,obj.Action(a0)
000E35D2 5438 D064                          add.b   #2,(membushHead+obj.Action)
000E35D6                            
000E35D6                            QuagmireMouth_Speak2:
000E35D6 6100 0000                          bsr.w   _quagEyeAdjToHead
000E35DA 43F9 0000 0000                     lea     AniSpr_QuagmireMouth,a1
000E35E0 6100 0000                          bsr.w   _objectAnimate
000E35E4 4EB9 0000 DE84                     jsr     _objectDraw  
000E35EA 4E75                               rts        
000E35EC                            
000E35EC                            _quagEyeAdjToHead:
000E35EC 43F8 D040                          lea     membushHead,a1
000E35F0 3169 0008 0008                     move.w  obj.X(a1),obj.X(a0)
000E35F6 3169 000C 000C                     move.w  obj.Y(a1),obj.Y(a0)
000E35FC 0668 000A 000C                     add.w   #10,obj.Y(a0)   
000E3602 4E75                               rts
000E3604                            
000E3604                            ; ---------------------------------------------------------------------------
000E3604                            AniSpr_QuagmireMouth:
000E3604                            .tbl
000E3604 0000                               dc.w quagvocal_imglennqua-.tbl
000E3606 0000                               dc.w quagvocal_beebush-.tbl
000E3608                            
000E3608                            quagvocal_imglennqua: 
000E3608                            
000E3608                                    ; playback speed delta (wait time)
000E3608 04                                 dc.b   4
000E3609                            
000E3609                                    ; "...im glenn quagmire"
000E3609 0808 0808 0806 0807 0506+          dc.b   8, 8, 8, 8, 8, 6, 8, 7, 5, 6, 8, 5, 6, 7, 8, 6, 5
000E361A                            
000E361A                                    ; "...and this is-"
000E361A 0808 0808 0806 0706 0706+          dc.b   8, 8, 8, 8, 8, 6, 7, 6, 7, 6, 7
000E3625                            
000E3625                                    ; routine chg
000E3625 FC                                 dc.b   $FC
000E3626                            
000E3626                                    even
000E3626                            
000E3626                            quagvocal_beebush:
000E3626                            
000E3626                                    ; playback speed delta (wait time)
000E3626 04                                 dc.b   4
000E3627                            
000E3627                                    ; "bee bush"
000E3627 0708 0806 0608 0805 0507+          dc.b   7, 8, 8, 6, 6, 8, 8, 5, 5, 7, 7, 8, 8, 8, 8
000E3636                            
000E3636                                    ; loop 8 forever
000E3636 FE01                               dc.b   $FE, 1
000E3638                                    even
000E3638                            
000E3638                            ; ---------------------------------------------------------------------------      
000E3638                            ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
000E3638                            ; DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG 
000E3638                            ; ---------------------------------------------------------------------------  
000E3638                            
000E3638                            BbushObj_Dbug:                          
000E3638 4E75                               rts
000E363A                            
000E363A                            SprPat_Quagmire:
000E363A                                    include "beebush/Objects/SPRPAT_QUAGMIRE.asm"
000E363A                            Map_879c:
000E363A 0000                       Map_879c_0: 	dc.w Map_879c_12-Map_879c
000E363C 0000                       Map_879c_2: 	dc.w Map_879c_13-Map_879c
000E363E 0000                       Map_879c_4: 	dc.w Map_879c_3C-Map_879c
000E3640 0000                       Map_879c_6: 	dc.w Map_879c_56-Map_879c
000E3642 0000                       Map_879c_8: 	dc.w Map_879c_61-Map_879c
000E3644 0000                       Map_879c_A: 	dc.w Map_879c_6C-Map_879c
000E3646 0000                       Map_879c_C: 	dc.w Map_879c_72-Map_879c
000E3648 0000                       Map_879c_E: 	dc.w Map_879c_7D-Map_879c
000E364A 0000                       Map_879c_10: 	dc.w Map_879c_88-Map_879c
000E364C 00                         Map_879c_12: 	dc.b $0
000E364D 08                         Map_879c_13: 	dc.b $8
000E364E D20F 0000 E7               	dc.b $D2, $F, $0, $0, $E7
000E3653 D20F 0010 07               	dc.b $D2, $F, $0, $10, $7
000E3658 F20F 0020 D7               	dc.b $F2, $F, $0, $20, $D7
000E365D F20F 0030 F7               	dc.b $F2, $F, $0, $30, $F7
000E3662 F207 0040 17               	dc.b $F2, $7, $0, $40, $17
000E3667 120E 0048 D7               	dc.b $12, $E, $0, $48, $D7
000E366C 120E 0054 F7               	dc.b $12, $E, $0, $54, $F7
000E3671 1205 0060 17               	dc.b $12, $5, $0, $60, $17
000E3676 05                         Map_879c_3C: 	dc.b $5
000E3677 E70F 0064 E7               	dc.b $E7, $F, $0, $64, $E7
000E367C 070F 0074 E7               	dc.b $7, $F, $0, $74, $E7
000E3681 E70B 0084 07               	dc.b $E7, $B, $0, $84, $7
000E3686 070B 0090 07               	dc.b $7, $B, $0, $90, $7
000E368B D709 00DD EF               	dc.b $D7, $9, $0, $DD, $EF
000E3690 02                         Map_879c_56: 	dc.b $2
000E3691 F306 00A8 ED               	dc.b $F3, $6, $0, $A8, $ED
000E3696 F306 00AE 01               	dc.b $F3, $6, $0, $AE, $1
000E369B 02                         Map_879c_61: 	dc.b $2
000E369C F306 009C ED               	dc.b $F3, $6, $0, $9C, $ED
000E36A1 F306 00A2 01               	dc.b $F3, $6, $0, $A2, $1
000E36A6 01                         Map_879c_6C: 	dc.b $1
000E36A7 FD09 00B4 F2               	dc.b $FD, $9, $0, $B4, $F2
000E36AC 02                         Map_879c_72: 	dc.b $2
000E36AD F70E 00BA F0               	dc.b $F7, $E, $0, $BA, $F0
000E36B2 EF00 00C6 08               	dc.b $EF, $0, $0, $C6, $8
000E36B7 02                         Map_879c_7D: 	dc.b $2
000E36B8 F306 00C7 00               	dc.b $F3, $6, $0, $C7, $0
000E36BD FB06 00CD F0               	dc.b $FB, $6, $0, $CD, $F0
000E36C2 02                         Map_879c_88: 	dc.b $2
000E36C3 FC0D 00D3 EC               	dc.b $FC, $D, $0, $D3, $EC
000E36C8 F404 00DB 04               	dc.b $F4, $4, $0, $DB, $4
000E36CE 00                         	even
000E36CE 00                         	even
000E36CE 00                         	even
000E36CE                                    include  "beebush/Objects/OBJ_PLAYER.asm"
000E36CE                                   
000E36CE =00000030                  bbplay.WindowSz        equ     $30
000E36CE =00000031                  bbplay.WindowCnt       equ     $31
000E36CE =00000034                  bbplay.Xorg            equ     $34
000E36CE =00000036                  bbplay.Yorg            equ     $36
000E36CE                            
000E36CE                            BbushObj_Player:                          
000E36CE 7000                               moveq   #0,d0
000E36D0 1028 0024                          move.b  obj.Action(a0),d0
000E36D4 323B 0000                          move.w  .Index(pc,d0.w),d1
000E36D8 4EFB 1000                          jmp     .Index(pc,d1.w)
000E36DC                            ; ---------------------------------------------------------------------------
000E36DC                            .Index:                                
000E36DC 0000                               dc.w BbushPlayer_InitMain-.Index
000E36DE 0000                               dc.w BbushPlayer_Main-.Index
000E36E0                            ; ---------------------------------------------------------------------------
000E36E0                            
000E36E0                            BbushPlayer_InitMain:                         
000E36E0 5428 0024                          addq.b  #2,obj.Action(a0)
000E36E4 117C 0012 0016                     move.b  #18,obj.YRad(a0)
000E36EA 117C 0009 0017                     move.b  #9,obj.XRad(a0)
000E36F0 217C 0000 0000 0004                move.l  #SprPat_BBushPlayer,obj.Map(a0)
000E36F8 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
000E36FE 117C 0000 0001                     move.b  #0,obj.Render(a0)
000E3704 317C 014A 0008                     move.w  #160+42+128,obj.X(a0)
000E370A 317C 00E4 000A                     move.w  #100+128,obj.YScr(a0)
000E3710 117C 0002 0019                     move.b  #2,obj.Priority(a0)
000E3716 117C 0003 001A                     move.b  #3,obj.Frame(a0)
000E371C 317C 9204 0030                     move.w  #$9204,bbplay.WindowSz(a0)
000E3722 6000                               bra.s   BbushPlayer_Main
000E3724                            
000E3724                            .strCams:
000E3724 2070 6C61 7920 6361 6D42+          dc.b    ' play camB camC camZ   dist                 ', -1
000E3752 00                                 even
000E3752                            
000E3752                            ; ---------------------------------------------------------------------------
000E3752                            
000E3752                            BbushPlayer_Main:                           
000E3752 1838 F604                          move.b  joypad.w,d4         ;SACBRLDU
000E3756 1A38 F605                          move.b  joypadPress.w,d5    
000E375A 6100 0000                          bsr.w   _bbplayNormalCtrl 
000E375E 4EF9 0000 DE84                     jmp     _objectDraw   
000E3764                            
000E3764                            ; ---------------------------------------------------------------------------
000E3764                            ; Control window vertical location  (VDPREG $12)
000E3764                            ; ---------------------------------------------------------------------------
000E3764                            
000E3764                            _bbplayNormalCtrl:                                                 
000E3764 0804 0002                          btst    #2,d4
000E3768 6700                               beq.s   .NoLeft
000E376A 5278 F700                          addi.w  #1,cameraAPosX
000E376E 5278 F710                          addi.w  #1,cameraCPosX
000E3772 53B8 F608                          subi.l  #1,distance
000E3776 43F9 0000 0000                     lea     AniSpr_QuagmirePlayer,a1
000E377C 4EF9 0000 0000                     jmp    _objectAnimate
000E3782                            .NoLeft:                                             
000E3782 4E75                               rts
000E3784                            
000E3784                            AniSpr_QuagmirePlayer:
000E3784                            .tbl
000E3784 0000                               dc.w .qaugplaywalk-.tbl
000E3786                            
000E3786                            .qaugplaywalk: 
000E3786 08                                 dc.b   8
000E3787 0102 0304 0506 07FF                dc.b   1, 2, 3, 4, 5, 6, 7, $FF
000E3790 00                                 even 
000E3790                            
000E3790                            ; ---------------------------------------------------------------------------
000E3790                            
000E3790                            _bbplayPrintCams:
000E3790 4E75                               rts
000E3792                            
000E3792                            ; ---------------------------------------------------------------------------
000E3792                            
000E3792                            SprPat_BBushPlayer:
000E3792                                    include "beebush/Objects/SPRPAT_PLAYER.asm"
000E3792                            Map_ffc1:
000E3792 0000                       Map_ffc1_0: 	dc.w Map_ffc1_14-Map_ffc1
000E3794 0000                       Map_ffc1_2: 	dc.w Map_ffc1_15-Map_ffc1
000E3796 0000                       Map_ffc1_4: 	dc.w Map_ffc1_43-Map_ffc1
000E3798 0000                       Map_ffc1_6: 	dc.w Map_ffc1_71-Map_ffc1
000E379A 0000                       Map_ffc1_8: 	dc.w Map_ffc1_9F-Map_ffc1
000E379C 0000                       Map_ffc1_A: 	dc.w Map_ffc1_CD-Map_ffc1
000E379E 0000                       Map_ffc1_C: 	dc.w Map_ffc1_FB-Map_ffc1
000E37A0 0000                       Map_ffc1_E: 	dc.w Map_ffc1_129-Map_ffc1
000E37A2 0000                       Map_ffc1_10: 	dc.w Map_ffc1_157-Map_ffc1
000E37A4 0000                       Map_ffc1_12: 	dc.w Map_ffc1_15D-Map_ffc1
000E37A6 00                         Map_ffc1_14: 	dc.b $0
000E37A7 09                         Map_ffc1_15: 	dc.b $9
000E37A8 D10F 0103 EF               	dc.b $D1, $F, $1, $3, $EF
000E37AD F309 0113 FB               	dc.b $F3, $9, $1, $13, $FB
000E37B2 E40E 0119 0B               	dc.b $E4, $E, $1, $19, $B
000E37B7 E40E 0919 DE               	dc.b $E4, $E, $9, $19, $DE
000E37BC EE04 007E FC               	dc.b $EE, $4, $0, $7E, $FC
000E37C1 000A 0165 ED               	dc.b $0, $A, $1, $65, $ED
000E37C6 1806 016E ED               	dc.b $18, $6, $1, $6E, $ED
000E37CB 000E 0931 04               	dc.b $0, $E, $9, $31, $4
000E37D0 160A 093D 0C               	dc.b $16, $A, $9, $3D, $C
000E37D5 09                         Map_ffc1_43: 	dc.b $9
000E37D6 D00F 00E3 F1               	dc.b $D0, $F, $0, $E3, $F1
000E37DB F309 0113 FC               	dc.b $F3, $9, $1, $13, $FC
000E37E0 E40E 0119 0B               	dc.b $E4, $E, $1, $19, $B
000E37E5 E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
000E37EA EE04 007E FD               	dc.b $EE, $4, $0, $7E, $FD
000E37EF 000A 0165 EE               	dc.b $0, $A, $1, $65, $EE
000E37F4 1806 016E EE               	dc.b $18, $6, $1, $6E, $EE
000E37F9 000A 0956 04               	dc.b $0, $A, $9, $56, $4
000E37FE 1806 095F 0C               	dc.b $18, $6, $9, $5F, $C
000E3803 09                         Map_ffc1_71: 	dc.b $9
000E3804 D00F 00E3 F3               	dc.b $D0, $F, $0, $E3, $F3
000E3809 F309 0113 FC               	dc.b $F3, $9, $1, $13, $FC
000E380E E40E 0119 0C               	dc.b $E4, $E, $1, $19, $C
000E3813 E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
000E3818 EE04 007E FE               	dc.b $EE, $4, $0, $7E, $FE
000E381D FF0A 0156 EE               	dc.b $FF, $A, $1, $56, $EE
000E3822 1706 015F EE               	dc.b $17, $6, $1, $5F, $EE
000E3827 000A 0956 05               	dc.b $0, $A, $9, $56, $5
000E382C 1806 095F 0D               	dc.b $18, $6, $9, $5F, $D
000E3831 09                         Map_ffc1_9F: 	dc.b $9
000E3832 D00F 00E3 F5               	dc.b $D0, $F, $0, $E3, $F5
000E3837 F309 0113 FD               	dc.b $F3, $9, $1, $13, $FD
000E383C E40E 0119 0D               	dc.b $E4, $E, $1, $19, $D
000E3841 E40E 0919 E0               	dc.b $E4, $E, $9, $19, $E0
000E3846 EE04 007E FF               	dc.b $EE, $4, $0, $7E, $FF
000E384B FF0A 0174 EF               	dc.b $FF, $A, $1, $74, $EF
000E3850 1706 017D EF               	dc.b $17, $6, $1, $7D, $EF
000E3855 000A 0956 06               	dc.b $0, $A, $9, $56, $6
000E385A 1806 095F 0E               	dc.b $18, $6, $9, $5F, $E
000E385F 09                         Map_ffc1_CD: 	dc.b $9
000E3860 D10F 00F3 F7               	dc.b $D1, $F, $0, $F3, $F7
000E3865 F309 0113 FE               	dc.b $F3, $9, $1, $13, $FE
000E386A E40E 0119 0E               	dc.b $E4, $E, $1, $19, $E
000E386F E40E 0919 E1               	dc.b $E4, $E, $9, $19, $E1
000E3874 EE04 007E 00               	dc.b $EE, $4, $0, $7E, $0
000E3879 FF0E 0131 E8               	dc.b $FF, $E, $1, $31, $E8
000E387E 1706 013D E8               	dc.b $17, $6, $1, $3D, $E8
000E3883 000A 0956 07               	dc.b $0, $A, $9, $56, $7
000E3888 1806 095F 0F               	dc.b $18, $6, $9, $5F, $F
000E388D 09                         Map_ffc1_FB: 	dc.b $9
000E388E D10F 00E3 F3               	dc.b $D1, $F, $0, $E3, $F3
000E3893 F309 0113 FA               	dc.b $F3, $9, $1, $13, $FA
000E3898 E40E 0119 0A               	dc.b $E4, $E, $1, $19, $A
000E389D E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
000E38A2 EE04 007E FB               	dc.b $EE, $4, $0, $7E, $FB
000E38A7 000A 0156 EC               	dc.b $0, $A, $1, $56, $EC
000E38AC 1806 015F EC               	dc.b $18, $6, $1, $5F, $EC
000E38B1 100B 0943 0B               	dc.b $10, $B, $9, $43, $B
000E38B6 0009 094F 04               	dc.b $0, $9, $9, $4F, $4
000E38BB 09                         Map_ffc1_129: 	dc.b $9
000E38BC D00F 00E3 F2               	dc.b $D0, $F, $0, $E3, $F2
000E38C1 F309 0113 FA               	dc.b $F3, $9, $1, $13, $FA
000E38C6 E40E 0119 0A               	dc.b $E4, $E, $1, $19, $A
000E38CB E40E 0919 DE               	dc.b $E4, $E, $9, $19, $DE
000E38D0 EE04 007E FD               	dc.b $EE, $4, $0, $7E, $FD
000E38D5 000A 0165 EC               	dc.b $0, $A, $1, $65, $EC
000E38DA 1806 016E EC               	dc.b $18, $6, $1, $6E, $EC
000E38DF 000A 0974 04               	dc.b $0, $A, $9, $74, $4
000E38E4 1806 097D 0C               	dc.b $18, $6, $9, $7D, $C
000E38E9 01                         Map_ffc1_157: 	dc.b $1
000E38EA F00F 0183 F0               	dc.b $F0, $F, $1, $83, $F0
000E38EF 01                         Map_ffc1_15D: 	dc.b $1
000E38F0 F00F 0193 F0               	dc.b $F0, $F, $1, $93, $F0
000E38F6 00                         	even
000E38F6 00                         	even
000E38F6 00                         	even
000E38F6                            
000E38F6                            ; ---------------------------------------------------------------------------
000E38F6                            ; Animate an object based on an animation script
000E38F6                            ; !!!TODO: document script
000E38F6                            ; ---------------------------------------------------------------------------
000E38F6                            
000E38F6                            _objectAnimate:                         
000E38F6 7000                               moveq   #0,d0
000E38F8 1028 001C                          move.b  obj.Anim(a0),d0
000E38FC B028 001D                          cmp.b   obj.LastAnim(a0),d0
000E3900 6700                               beq.s   .DoAnim
000E3902 1140 001D                          move.b  d0,obj.LastAnim(a0)
000E3906 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
000E390C 117C 0000 001E                     move.b  #0,obj.FrameTimer(a0)
000E3912                            
000E3912                            .DoAnim:                               
000E3912 D040                               add.w   d0,d0
000E3914 D2F1 0000                          adda.w  (a1,d0.w),a1
000E3918 5328 001E                          subq.b  #1,obj.FrameTimer(a0)
000E391C 6A00                               bpl.s   .Exit
000E391E 1151 001E                          move.b  (a1),obj.FrameTimer(a0)
000E3922 7200                               moveq   #0,d1
000E3924 1228 001B                          move.b  obj.AnimFrame(a0),d1
000E3928 1031 1001                          move.b  1(a1,d1.w),d0
000E392C 6B00                               bmi.s   .HandleFlags
000E392E                            
000E392E                            .Finish:                               
000E392E 1200                               move.b  d0,d1
000E3930 0200 001F                          andi.b  #$1F,d0
000E3934 1140 001A                          move.b  d0,obj.Frame(a0)
000E3938 1028 0022                          move.b  obj.Status(a0),d0
000E393C 0200 0003                          andi.b  #3,d0
000E3940 0228 00FC 0001                     andi.b  #$FC,obj.Render(a0)
000E3946 EA09                               lsr.b   #5,d1
000E3948 B101                               eor.b   d0,d1
000E394A 8328 0001                          or.b    d1,obj.Render(a0)
000E394E 5228 001B                          addq.b  #1,obj.AnimFrame(a0)
000E3952                            
000E3952                            .Exit:                                 
000E3952 4E75                               rts
000E3954                            
000E3954                            .HandleFlags:                          
000E3954 5200                               addq.b  #1,d0
000E3956 6600                               bne.s   .NotLoop
000E3958 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
000E395E 1029 0001                          move.b  1(a1),d0
000E3962 60CA                               bra.s   .Finish
000E3964                            
000E3964                            .NotLoop:                              
000E3964 5200                               addq.b  #1,d0
000E3966 6600                               bne.s   .NotBack
000E3968 1031 1002                          move.b  2(a1,d1.w),d0
000E396C 9128 001B                          sub.b   d0,obj.AnimFrame(a0)
000E3970 9200                               sub.b   d0,d1
000E3972 1031 1001                          move.b  1(a1,d1.w),d0
000E3976 60B6                               bra.s   .Finish
000E3978                            
000E3978                            .NotBack:                              
000E3978 5200                               addq.b  #1,d0
000E397A 6600                               bne.s   .NotChgAni
000E397C 1171 1002 001C                     move.b  2(a1,d1.w),obj.Anim(a0)
000E3982                            
000E3982                            .NotChgAni:                            
000E3982 5200                               addq.b  #1,d0
000E3984 6600                               bne.s   .NotRoutine
000E3986 5428 0024                          addq.b  #2,obj.Action(a0)
000E398A                            
000E398A                            .NotRoutine:                           
000E398A 5200                               addq.b  #1,d0
000E398C 6600                               bne.s   .NotReset
000E398E 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
000E3994 4228 0025                          clr.b   obj.SubAction(a0)
000E3998                            
000E3998                            .NotReset:                             
000E3998 4E75                               rts
000E3998 4E75                               rts
000E399A                            
000E399A                            ; ---------------------------------------------------------------------------
000E399A                            
000E399A                            _beebushDbugLoad:
000E399A 4E75                               rts
000E399C                            ; ---------------------------------------------------------------------------   
000E399C                            ; VBlank code relocation from main file (called from Jmptos)
000E399C                            ; ---------------------------------------------------------------------------
000E399C                            
000E399C                            VBLANK_BEEBUSH:                               
000E399C 4EB8 11F4                          jsr   ReadJoypads
000E39A0                            
000E39A0 33FC 0100 00A1 1100                move.w  #$100,Z80BUS
000E39A8                            .WaitZ80:                              
000E39A8 0839 0000 00A1 1100                btst    #0,Z80BUS
000E39B0 66F6                               bne.s   .WaitZ80
000E39B2                            
000E39B2 33FC 8B00 00C0 0004                move.w  #$8B00+%0000,VDPCTRL
000E3A0C 23F8 F61A 00C0 0000                move.l  mainAPosX.w,VDPDATA
000E3A14                            
000E3A14 33FC 0000 00A1 1100                move.w  #0,Z80BUS
000E3A1C 4E75                               rts
000E3A1E                            
000E3A1E                            ; ---------------------------------------------------------------------------
000E3A1E                            
000E3A1E                            VBLANK_BEEBUSHSCR:                               
000E3A1E 4EB8 11F4                          jsr  ReadJoypads
000E3A22                            
000E3A22 33FC 0100 00A1 1100                move.w  #$100,Z80BUS
000E3A2A                            .WaitZ80:                              
000E3A2A 0839 0000 00A1 1100                btst    #0,Z80BUS
000E3A32 66F6                               bne.s   .WaitZ80
000E3A34                            
000E3A34 33FC 8B03 00C0 0004                move.w  #$8B00+%0011,VDPCTRL
000E3AA8                            
000E3AA8 33FC 0000 00A1 1100                move.w  #0,Z80BUS
000E3AB0 4E75                               rts
000E3AB0 4E75                               rts
000E3AB2                            ; end of 'ROM'
000E3AB2                            EndOfRom:
000E3AB2                            
000E3AB2                            
