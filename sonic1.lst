00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330 1039 00A1 0001             		move.b	($A10001).l,d0
00000336 0200 00C0                  		andi.b	#$C0,d0
0000033A 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000033E 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000346                            
00000346                            GameInit:
00000346 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000034C 7E00                       		moveq	#0,d7
0000034E 3C3C 3F7F                  		move.w	#$3F7F,d6
00000352                            
00000352                            GameClrRAM:
00000352 2CC7                       		move.l	d7,(a6)+
00000354 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000358                            
00000358 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
0000035E 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
00000366                            
00000366 6100 0000                  		bsr.w	VDPSetupGame
0000036A 6100 0000                  		bsr.w	SoundDriverLoad
0000036E 6100 0000                  		bsr.w	JoypadInit
00000372 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000378                            
00000378                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000378                            
00000378                            MainGameLoop:
00000378 707E                       		moveq	#$7E,d0
0000037A C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
0000037E 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000382 60F4                       		bra.s	MainGameLoop
00000384                            ; ===========================================================================
00000384                            ; ---------------------------------------------------------------------------
00000384                            ; Main game mode array
00000384                            ; ---------------------------------------------------------------------------
00000384                            
00000384                            GameModeArray:
00000384 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
00000388                            ; ===========================================================================
00000388 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000038C                            ; ===========================================================================
0000038C 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000390                            ; ===========================================================================
00000390 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000394                            ; ===========================================================================
00000394 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
00000398                            ; ===========================================================================
00000398 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
0000039C                            ; ===========================================================================
0000039C 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003A0                            ; ===========================================================================
000003A0 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003A4                            ; ===========================================================================
000003A4 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003AA                            ; ===========================================================================
000003AA                            
000003AA                            CheckSumError:
000003AA 6100 0000                  		bsr.w	VDPSetupGame
000003AE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003B8 7E3F                       		moveq	#$3F,d7
000003BA                            
000003BA                            CheckSum_Red:
000003BA 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003C2 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003C6                            
000003C6                            CheckSum_Loop:
000003C6 60FE                       		bra.s	CheckSum_Loop
000003C8                            ; ===========================================================================
000003C8                            
000003C8                            BusError:
000003C8 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003CE 6000                       		bra.s	loc_43A
000003D0                            ; ===========================================================================
000003D0                            
000003D0                            AddressError:
000003D0 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003D6 6000                       		bra.s	loc_43A
000003D8                            ; ===========================================================================
000003D8                            
000003D8                            IllegalInstr:
000003D8 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003DE 54AF 0002                  		addq.l	#2,2(sp)
000003E2 6000                       		bra.s	loc_462
000003E4                            ; ===========================================================================
000003E4                            
000003E4                            ZeroDivide:
000003E4 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003EA 6000                       		bra.s	loc_462
000003EC                            ; ===========================================================================
000003EC                            
000003EC                            ChkInstr:
000003EC 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
000003F2 6000                       		bra.s	loc_462
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            TrapvInstr:
000003F4 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_462
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            PrivilegeViol:
000003FC 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000402 6000                       		bra.s	loc_462
00000404                            ; ===========================================================================
00000404                            
00000404                            Trace:
00000404 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000040A 6000                       		bra.s	loc_462
0000040C                            ; ===========================================================================
0000040C                            
0000040C                            Line1010Emu:
0000040C 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000412 54AF 0002                  		addq.l	#2,2(sp)
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            Line1111Emu:
00000418 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000041E 54AF 0002                  		addq.l	#2,2(sp)
00000422 6000                       		bra.s	loc_462
00000424                            ; ===========================================================================
00000424                            
00000424                            ErrorExcept:
00000424 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000042A 6000                       		bra.s	loc_462
0000042C                            ; ===========================================================================
0000042C                            
0000042C                            loc_43A:
0000042C 46FC 2700                  		move	#$2700,sr
00000430 544F                       		addq.w	#2,sp
00000432 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000436 544F                       		addq.w	#2,sp
00000438 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000043E 6100 0000                  		bsr.w	ShowErrorMsg
00000442 202F 0002                  		move.l	2(sp),d0
00000446 6100 0000                  		bsr.w	sub_5BA
0000044A 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000044E 6100 0000                  		bsr.w	sub_5BA
00000452 6000                       		bra.s	loc_478
00000454                            ; ===========================================================================
00000454                            
00000454                            loc_462:
00000454 46FC 2700                  		move	#$2700,sr
00000458 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000045E 6100 0000                  		bsr.w	ShowErrorMsg
00000462 202F 0002                  		move.l	2(sp),d0
00000466 6100 0000                  		bsr.w	sub_5BA
0000046A                            
0000046A                            loc_478:
0000046A 6100 0000                  		bsr.w	ErrorWaitForC
0000046E 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000474 46FC 2300                  		move	#$2300,sr
00000478 4E73                       		rte	
0000047A                            
0000047A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000047A                            
0000047A                            
0000047A                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000047A 4DF9 00C0 0000             		lea	($C00000).l,a6
00000480 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000048A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000490 323C 027F                  		move.w	#$27F,d1
00000494                            
00000494                            Error_LoadGfx:
00000494 3C98                       		move.w	(a0)+,(a6)
00000496 51C9 FFFC                  		dbf	d1,Error_LoadGfx
0000049A 7000                       		moveq	#0,d0		; clear	d0
0000049C 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004A0 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004A4 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004A8 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004B2 7212                       		moveq	#$12,d1		; number of characters
000004B4                            
000004B4                            Error_LoopChars:
000004B4 7000                       		moveq	#0,d0
000004B6 1018                       		move.b	(a0)+,d0
000004B8 0640 0790                  		addi.w	#$790,d0
000004BC 3C80                       		move.w	d0,(a6)
000004BE 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004C2 4E75                       		rts	
000004C4                            ; End of function ShowErrorMsg
000004C4                            
000004C4                            ; ===========================================================================
000004C4 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004C8 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004CC 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004D0 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004D4 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004D8 0000                       		dc.w asc_5A6-ErrorText
000004DA 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004ED 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000500 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000513 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000526 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000539 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000054C 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000055F 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000572 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000585 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000598 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005AC 00                         		even
000005AC                            
000005AC                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005AC                            
000005AC                            
000005AC                            sub_5BA:				; XREF: loc_43A; loc_462
000005AC 3CBC 07CA                  		move.w	#$7CA,(a6)
000005B0 7407                       		moveq	#7,d2
000005B2                            
000005B2                            loc_5C0:
000005B2 E998                       		rol.l	#4,d0
000005B4 6100                       		bsr.s	sub_5CA
000005B6 51CA FFFA                  		dbf	d2,loc_5C0
000005BA 4E75                       		rts	
000005BC                            ; End of function sub_5BA
000005BC                            
000005BC                            
000005BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BC                            
000005BC                            
000005BC                            sub_5CA:				; XREF: sub_5BA
000005BC 3200                       		move.w	d0,d1
000005BE 0241 000F                  		andi.w	#$F,d1
000005C2 0C41 000A                  		cmpi.w	#$A,d1
000005C6 6500                       		bcs.s	loc_5D8
000005C8 5E41                       		addq.w	#7,d1
000005CA                            
000005CA                            loc_5D8:
000005CA 0641 07C0                  		addi.w	#$7C0,d1
000005CE 3C81                       		move.w	d1,(a6)
000005D0 4E75                       		rts	
000005D2                            ; End of function sub_5CA
000005D2                            
000005D2                            
000005D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005D2                            
000005D2                            
000005D2                            ErrorWaitForC:				; XREF: loc_478
000005D2 6100 0000                  		bsr.w	ReadJoypads
000005D6 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005DC 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005E0 4E75                       		rts	
000005E2                            ; End of function ErrorWaitForC
000005E2                            
000005E2                            ; ===========================================================================
000005E2                            
000005E2                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D22                            Art_Text_end:		even
00000D22                            
00000D22                            ; ===========================================================================
00000D22                            ;VBlank
00000D22                            loc_B10:				; XREF: Vectors
00000D22 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D26 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D2A 6700                       		beq.s	loc_B88
00000D2C 3039 00C0 0004             		move.w	($C00004).l,d0
00000D32 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D3C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D44                            ;		btst	#6,($FFFFFFF8).w
00000D44                            ;		beq.s	loc_B42
00000D44                            ;		move.w	#$700,d0
00000D44                            ;
00000D44                            ;loc_B3E:
00000D44                            ;		dbf	d0,loc_B3E
00000D44                            
00000D44                            ;loc_B42:
00000D44 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D48 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D4E 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D54 0240 003E                  		andi.w	#$3E,d0
00000D58 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D5C 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D60                            
00000D60                            loc_B5E:				; XREF: loc_B88
00000D60 4EB9 0000 0000             		jsr	sub_71B4C
00000D66                            
00000D66                            loc_B64:				; XREF: loc_D50
00000D66 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D6A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D6E 4E73                       		rte	
00000D70                            ; ===========================================================================
00000D70 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D74 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D78 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D7C 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D80 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000D84 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000D88 0000                       		dc.w loc_E72-off_B6E
00000D8A                            ; ===========================================================================
00000D8A                            
00000D8A                            loc_B88:				; XREF: loc_B10; off_B6E
00000D8A 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000D90 6700                       		beq.s	loc_B9A
00000D92 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000D98 6600 FFC6                  		bne.w	loc_B5E
00000D9C                            
00000D9C                            loc_B9A:
00000D9C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DA2 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DA6 3039 00C0 0004             		move.w	($C00004).l,d0
00000DAC                            ;		btst	#6,($FFFFFFF8).w
00000DAC                            ;		beq.s	loc_BBA
00000DAC                            ;		move.w	#$700,d0
00000DAC                            ;
00000DAC                            ;loc_BB6:
00000DAC                            ;		dbf	d0,loc_BB6
00000DAC                            ;
00000DAC                            ;loc_BBA:
00000DAC 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DB2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DBA                            
00000DBA                            loc_BC8:
00000DBA 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DC2 66F6                       		bne.s	loc_BC8
00000DC4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DC8 6600                       		bne.s	loc_BFE
00000DCA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DD0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DD6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DDC 3ABC 977F                  		move.w	#$977F,(a5)
00000DE0 3ABC C000                  		move.w	#$C000,(a5)
00000DE4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DEE 6000                       		bra.s	loc_C22
00000DF0                            ; ===========================================================================
00000DF0                            
00000DF0                            loc_BFE:				; XREF: loc_BC8
00000DF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DF6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DFC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E02 3ABC 977F                  		move.w	#$977F,(a5)
00000E06 3ABC C000                  		move.w	#$C000,(a5)
00000E0A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E10 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E14                            
00000E14                            loc_C22:				; XREF: loc_BC8
00000E14 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E18 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E20 6000 FF3E                  		bra.w	loc_B5E
00000E24                            ; ===========================================================================
00000E24                            
00000E24                            loc_C32:				; XREF: off_B6E
00000E24 6100 0000                  		bsr.w	sub_106E
00000E28                            
00000E28                            loc_C36:				; XREF: off_B6E
00000E28 4A78 F614                  		tst.w	($FFFFF614).w
00000E2C 6700 0000                  		beq.w	locret_C42
00000E30 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E34                            
00000E34                            locret_C42:
00000E34 4E75                       		rts	
00000E36                            ; ===========================================================================
00000E36                            
00000E36                            loc_C44:				; XREF: off_B6E
00000E36 6100 0000                  		bsr.w	sub_106E
00000E3A 6100 0000                  		bsr.w	sub_6886
00000E3E 6100 0000                  		bsr.w	sub_1642
00000E42 4A78 F614                  		tst.w	($FFFFF614).w
00000E46 6700 0000                  		beq.w	locret_C5C
00000E4A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E4E                            
00000E4E                            locret_C5C:
00000E4E 4E75                       		rts	
00000E50                            ; ===========================================================================
00000E50                            
00000E50                            loc_C5E:				; XREF: off_B6E
00000E50 6100 0000                  		bsr.w	sub_106E
00000E54 4E75                       		rts	
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C64:				; XREF: off_B6E
00000E56 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E5C 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E60                            
00000E60                            loc_C6E:				; XREF: off_B6E
00000E60 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E68                            
00000E68                            loc_C76:
00000E68 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E70 66F6                       		bne.s	loc_C76		; if not, branch
00000E72 6100 0000                  		bsr.w	ReadJoypads
00000E76 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E7A 6600                       		bne.s	loc_CB0
00000E7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E82 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E88 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E8E 3ABC 977F                  		move.w	#$977F,(a5)
00000E92 3ABC C000                  		move.w	#$C000,(a5)
00000E96 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E9C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EA0 6000                       		bra.s	loc_CD4
00000EA2                            ; ===========================================================================
00000EA2                            
00000EA2                            loc_CB0:				; XREF: loc_C76
00000EA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EAE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EB4 3ABC 977F                  		move.w	#$977F,(a5)
00000EB8 3ABC C000                  		move.w	#$C000,(a5)
00000EBC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC6                            
00000EC6                            loc_CD4:				; XREF: loc_C76
00000EC6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000ECA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000ED6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EDC 3ABC 977F                  		move.w	#$977F,(a5)
00000EE0 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EE4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EEE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000EFA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F00 3ABC 977F                  		move.w	#$977F,(a5)
00000F04 3ABC 7800                  		move.w	#$7800,(a5)
00000F08 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F0E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F12 4A38 F767                  		tst.b	($FFFFF767).w
00000F16 6700                       		beq.s	loc_D50
00000F18 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F1E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F24 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F2A 3ABC 977F                  		move.w	#$977F,(a5)
00000F2E 3ABC 7000                  		move.w	#$7000,(a5)
00000F32 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F38 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F3C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F42                            
00000F42                            loc_D50:
00000F42 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F4A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F50 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F56 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F5C 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F62 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F68 6400                       		bcc.s	Demo_Time
00000F6A 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F70 588F                       		addq.l	#4,sp
00000F72 6000 FDF2                  		bra.w	loc_B64
00000F76                            
00000F76                            ; ---------------------------------------------------------------------------
00000F76                            ; Subroutine to	run a demo for an amount of time
00000F76                            ; ---------------------------------------------------------------------------
00000F76                            
00000F76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F76                            
00000F76                            
00000F76                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000F76 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F7A 4EB9 0000 0000             		jsr	AniArt_Load
00000F80 4EB9 0000 0000             		jsr	HudUpdate
00000F86 6100 0000                  		bsr.w	sub_165E
00000F8A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000F8E 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000F92 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000F96                            
00000F96                            Demo_TimeEnd:
00000F96 4E75                       		rts	
00000F98                            ; End of function Demo_Time
00000F98                            
00000F98                            ; ===========================================================================
00000F98                            
00000F98                            loc_DA6:				; XREF: off_B6E
00000F98 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FA0                            
00000FA0                            loc_DAE:
00000FA0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FA8 66F6                       		bne.s	loc_DAE		; if not, branch
00000FAA 6100 0000                  		bsr.w	ReadJoypads
00000FAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FC0 3ABC 977F                  		move.w	#$977F,(a5)
00000FC4 3ABC C000                  		move.w	#$C000,(a5)
00000FC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FCE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FD2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FD8 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FDE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FE4 3ABC 977F                  		move.w	#$977F,(a5)
00000FE8 3ABC 7800                  		move.w	#$7800,(a5)
00000FEC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FF2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FFC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001002 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001008 3ABC 977F                  		move.w	#$977F,(a5)
0000100C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001010 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001016 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000101A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001022 6100 0000                  		bsr.w	PalCycle_SS
00001026 4A38 F767                  		tst.b	($FFFFF767).w
0000102A 6700                       		beq.s	loc_E64
0000102C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001032 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001038 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000103E 3ABC 977F                  		move.w	#$977F,(a5)
00001042 3ABC 7000                  		move.w	#$7000,(a5)
00001046 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000104C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001050 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001056                            
00001056                            loc_E64:
00001056 4A78 F614                  		tst.w	($FFFFF614).w
0000105A 6700 0000                  		beq.w	locret_E70
0000105E 5378 F614                  		subq.w	#1,($FFFFF614).w
00001062                            
00001062                            locret_E70:
00001062 4E75                       		rts	
00001064                            ; ===========================================================================
00001064                            
00001064                            loc_E72:				; XREF: off_B6E
00001064 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000106C                            
0000106C                            loc_E7A:
0000106C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001074 66F6                       		bne.s	loc_E7A		; if not, branch
00001076 6100 0000                  		bsr.w	ReadJoypads
0000107A 4A38 F64E                  		tst.b	($FFFFF64E).w
0000107E 6600                       		bne.s	loc_EB4
00001080 4BF9 00C0 0004             		lea	($C00004).l,a5
00001086 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000108C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001092 3ABC 977F                  		move.w	#$977F,(a5)
00001096 3ABC C000                  		move.w	#$C000,(a5)
0000109A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010A0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010A4 6000                       		bra.s	loc_ED8
000010A6                            ; ===========================================================================
000010A6                            
000010A6                            loc_EB4:				; XREF: loc_E7A
000010A6 4BF9 00C0 0004             		lea	($C00004).l,a5
000010AC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010B2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010B8 3ABC 977F                  		move.w	#$977F,(a5)
000010BC 3ABC C000                  		move.w	#$C000,(a5)
000010C0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010C6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010CA                            
000010CA                            loc_ED8:				; XREF: loc_E7A
000010CA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010CE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010D4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000010DA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000010E0                            
000010E0                            loc_EEE:
000010E0 3ABC 977F                  		move.w	#$977F,(a5)
000010E4 3ABC 7C00                  		move.w	#$7C00,(a5)
000010E8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010EE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010F8 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010FE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001104 3ABC 977F                  		move.w	#$977F,(a5)
00001108 3ABC 7800                  		move.w	#$7800,(a5)
0000110C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001112 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001116 4A38 F767                  		tst.b	($FFFFF767).w
0000111A 6700                       		beq.s	loc_F54
0000111C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001122 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001128 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000112E 3ABC 977F                  		move.w	#$977F,(a5)
00001132 3ABC 7000                  		move.w	#$7000,(a5)
00001136 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000113C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001140 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001146                            
00001146                            loc_F54:
00001146 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000114E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001154 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000115A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001160 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001166 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000116A 4EB9 0000 0000             		jsr	AniArt_Load
00001170 4EB9 0000 0000             		jsr	HudUpdate
00001176 6100 0000                  		bsr.w	sub_1642
0000117A 4E75                       		rts	
0000117C                            ; ===========================================================================
0000117C                            
0000117C                            loc_F8A:				; XREF: off_B6E
0000117C 6100 0000                  		bsr.w	sub_106E
00001180 5238 F628                  		addq.b	#1,($FFFFF628).w
00001184 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
0000118A 4E75                       		rts	
0000118C                            ; ===========================================================================
0000118C                            
0000118C                            loc_F9A:				; XREF: off_B6E
0000118C 6100 0000                  		bsr.w	sub_106E
00001190 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001194 6000 0000                  		bra.w	sub_1642
00001198                            ; ===========================================================================
00001198                            
00001198                            loc_FA6:				; XREF: off_B6E
00001198 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011A0                            
000011A0                            loc_FAE:
000011A0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011A8 66F6                       		bne.s	loc_FAE		; if not, branch
000011AA 6100 0000                  		bsr.w	ReadJoypads
000011AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000011B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011C0 3ABC 977F                  		move.w	#$977F,(a5)
000011C4 3ABC C000                  		move.w	#$C000,(a5)
000011C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011D2 4BF9 00C0 0004             		lea	($C00004).l,a5
000011D8 2ABC 9401 9340             		move.l	#$94019340,(a5)
000011DE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000011E4 3ABC 977F                  		move.w	#$977F,(a5)
000011E8 3ABC 7800                  		move.w	#$7800,(a5)
000011EC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000011F2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011F6 4BF9 00C0 0004             		lea	($C00004).l,a5
000011FC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001202 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001208 3ABC 977F                  		move.w	#$977F,(a5)
0000120C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001210 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001216 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000121A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001222 4A38 F767                  		tst.b	($FFFFF767).w
00001226 6700                       		beq.s	loc_1060
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001234 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7000                  		move.w	#$7000,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001252                            
00001252                            loc_1060:
00001252 4A78 F614                  		tst.w	($FFFFF614).w
00001256 6700 0000                  		beq.w	locret_106C
0000125A 5378 F614                  		subq.w	#1,($FFFFF614).w
0000125E                            
0000125E                            locret_106C:
0000125E 4E75                       		rts	
00001260                            
00001260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001260                            
00001260                            
00001260                            sub_106E:				; XREF: loc_C32; et al
00001260 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001268                            
00001268                            loc_1076:
00001268 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001270 66F6                       		bne.s	loc_1076	; if not, branch
00001272 6100 0000                  		bsr.w	ReadJoypads
00001276 4A38 F64E                  		tst.b	($FFFFF64E).w
0000127A 6600                       		bne.s	loc_10B0
0000127C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001282 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001288 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000128E 3ABC 977F                  		move.w	#$977F,(a5)
00001292 3ABC C000                  		move.w	#$C000,(a5)
00001296 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000129C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012A0 6000                       		bra.s	loc_10D4
000012A2                            ; ===========================================================================
000012A2                            
000012A2                            loc_10B0:				; XREF: sub_106E
000012A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000012A8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012AE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012B4 3ABC 977F                  		move.w	#$977F,(a5)
000012B8 3ABC C000                  		move.w	#$C000,(a5)
000012BC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012C2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012C6                            
000012C6                            loc_10D4:				; XREF: sub_106E
000012C6 4BF9 00C0 0004             		lea	($C00004).l,a5
000012CC 2ABC 9401 9340             		move.l	#$94019340,(a5)
000012D2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000012D8 3ABC 977F                  		move.w	#$977F,(a5)
000012DC 3ABC 7800                  		move.w	#$7800,(a5)
000012E0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000012E6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012F0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000012F6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000012FC 3ABC 977F                  		move.w	#$977F,(a5)
00001300 3ABC 7C00                  		move.w	#$7C00,(a5)
00001304 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000130A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000130E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001316 4E75                       		rts	
00001318                            ; End of function sub_106E
00001318                            
00001318                            ; ---------------------------------------------------------------------------
00001318                            ; Subroutine to	move pallets from the RAM to CRAM
00001318                            ; ---------------------------------------------------------------------------
00001318                            
00001318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001318                            
00001318                            
00001318                            PalToCRAM:
00001318 46FC 2700                  		move	#$2700,sr
0000131C 4A78 F644                  		tst.w	($FFFFF644).w
00001320 6700                       		beq.s	locret_119C
00001322 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001328 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000132C 43F9 00C0 0000             		lea	($C00000).l,a1
00001332 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001336 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000133E 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001340 2298                       		move.l	(a0)+,(a1)
00001342 2298                       		move.l	(a0)+,(a1)
00001344 2298                       		move.l	(a0)+,(a1)
00001346 2298                       		move.l	(a0)+,(a1)
00001348 2298                       		move.l	(a0)+,(a1)
0000134A 2298                       		move.l	(a0)+,(a1)
0000134C 2298                       		move.l	(a0)+,(a1)
0000134E 2298                       		move.l	(a0)+,(a1)
00001350 2298                       		move.l	(a0)+,(a1)
00001352 2298                       		move.l	(a0)+,(a1)
00001354 2298                       		move.l	(a0)+,(a1)
00001356 2298                       		move.l	(a0)+,(a1)
00001358 2298                       		move.l	(a0)+,(a1)
0000135A 2298                       		move.l	(a0)+,(a1)
0000135C 2298                       		move.l	(a0)+,(a1)
0000135E 2298                       		move.l	(a0)+,(a1)
00001360 2298                       		move.l	(a0)+,(a1)
00001362 2298                       		move.l	(a0)+,(a1)
00001364 2298                       		move.l	(a0)+,(a1)
00001366 2298                       		move.l	(a0)+,(a1)
00001368 2298                       		move.l	(a0)+,(a1)
0000136A 2298                       		move.l	(a0)+,(a1)
0000136C 2298                       		move.l	(a0)+,(a1)
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001384 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001388 4A38 F64F                  		tst.b	($FFFFF64F).w
0000138C 6600                       		bne.s	loc_119E
0000138E                            
0000138E                            locret_119C:
0000138E 4E73                       		rte	
00001390                            ; ===========================================================================
00001390                            
00001390                            loc_119E:				; XREF: PalToCRAM
00001390 4238 F64F                  		clr.b	($FFFFF64F).w
00001394 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001398 6100 FBDC                  		bsr.w	Demo_Time
0000139C 4EB9 0000 0000             		jsr	sub_71B4C
000013A2 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013A6 4E73                       		rte	
000013A8                            ; End of function PalToCRAM
000013A8                            
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            ; Subroutine to	initialise joypads
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            
000013A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013A8                            
000013A8                            
000013A8                            JoypadInit:				; XREF: GameClrRAM
000013A8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013B0                            
000013B0                            Joypad_WaitZ80:
000013B0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013B8 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013BA 7040                       		moveq	#$40,d0
000013BC 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013C2 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013C8 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013CE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000013D6 4E75                       		rts	
000013D8                            ; End of function JoypadInit
000013D8                            
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            ; Subroutine to	read joypad input, and send it to the RAM
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            
000013D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D8                            
000013D8                            
000013D8                            ReadJoypads:
000013D8 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000013DC 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000013E2 6100                       		bsr.s	Joypad_Read	; do the first joypad
000013E4 5449                       		addq.w	#2,a1		; do the second	joypad
000013E6                            
000013E6                            Joypad_Read:
000013E6 12BC 0000                  		move.b	#0,(a1)
000013EA 4E71                       		nop	
000013EC 4E71                       		nop	
000013EE 1011                       		move.b	(a1),d0
000013F0 E508                       		lsl.b	#2,d0
000013F2 0200 00C0                  		andi.b	#$C0,d0
000013F6 12BC 0040                  		move.b	#$40,(a1)
000013FA 4E71                       		nop	
000013FC 4E71                       		nop	
000013FE 1211                       		move.b	(a1),d1
00001400 0201 003F                  		andi.b	#$3F,d1
00001404 8001                       		or.b	d1,d0
00001406 4600                       		not.b	d0
00001408 1210                       		move.b	(a0),d1
0000140A B101                       		eor.b	d0,d1
0000140C 10C0                       		move.b	d0,(a0)+
0000140E C200                       		and.b	d0,d1
00001410 10C1                       		move.b	d1,(a0)+
00001412 4E75                       		rts	
00001414                            ; End of function ReadJoypads
00001414                            
00001414                            
00001414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001414                            
00001414                            
00001414                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001414 41F9 00C0 0004             		lea	($C00004).l,a0
0000141A 43F9 00C0 0000             		lea	($C00000).l,a1
00001420 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001426 7E12                       		moveq	#$12,d7
00001428                            
00001428                            VDP_Loop:
00001428 309A                       		move.w	(a2)+,(a0)
0000142A 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000142E                            
0000142E 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001434 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001438 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000143E 7000                       		moveq	#0,d0
00001440 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000144A 3E3C 003F                  		move.w	#$3F,d7
0000144E                            
0000144E                            VDP_ClrCRAM:
0000144E 3280                       		move.w	d0,(a1)
00001450 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001454                            
00001454 42B8 F616                  		clr.l	($FFFFF616).w
00001458 42B8 F61A                  		clr.l	($FFFFF61A).w
0000145C 2F01                       		move.l	d1,-(sp)
0000145E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001464 3ABC 8F01                  		move.w	#$8F01,(a5)
00001468 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000146E 3ABC 9780                  		move.w	#$9780,(a5)
00001472 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001478 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00001480                            
00001480                            loc_128E:
00001480 3215                       		move.w	(a5),d1
00001482 0801 0001                  		btst	#1,d1
00001486 66F8                       		bne.s	loc_128E
00001488                            
00001488 3ABC 8F02                  		move.w	#$8F02,(a5)
0000148C 221F                       		move.l	(sp)+,d1
0000148E 4E75                       		rts	
00001490                            ; End of function VDPSetupGame
00001490                            
00001490                            ; ===========================================================================
00001490 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001498 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014A0 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014A8 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014B0 9001 9100 9200             		dc.w $9001, $9100, $9200
000014B6                            
000014B6                            ; ---------------------------------------------------------------------------
000014B6                            ; Subroutine to	clear the screen
000014B6                            ; ---------------------------------------------------------------------------
000014B6                            
000014B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014B6                            
000014B6                            
000014B6                            ClearScreen:
000014B6 4BF9 00C0 0004             		lea	($C00004).l,a5
000014BC 3ABC 8F01                  		move.w	#$8F01,(a5)
000014C0 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014C6 3ABC 9780                  		move.w	#$9780,(a5)
000014CA 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014D0 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000014D8                            
000014D8                            loc_12E6:
000014D8 3215                       		move.w	(a5),d1
000014DA 0801 0001                  		btst	#1,d1
000014DE 66F8                       		bne.s	loc_12E6
000014E0                            
000014E0 3ABC 8F02                  		move.w	#$8F02,(a5)
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 6000 0083             		move.l	#$60000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_1314:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_1314
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000151A 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001522 43F8 F800                  		lea	($FFFFF800).w,a1
00001526 7000                       		moveq	#0,d0
00001528 323C 009F                  		move.w	#$9F,d1
0000152C                            
0000152C                            loc_133A:
0000152C 22C0                       		move.l	d0,(a1)+
0000152E 51C9 FFFC                  		dbf	d1,loc_133A
00001532                            
00001532 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001536 7000                       		moveq	#0,d0
00001538 323C 00FF                  		move.w	#$FF,d1
0000153C                            
0000153C                            loc_134A:
0000153C 22C0                       		move.l	d0,(a1)+
0000153E 51C9 FFFC                  		dbf	d1,loc_134A
00001542 4E75                       		rts	
00001544                            ; End of function ClearScreen
00001544                            
00001544                            ; ---------------------------------------------------------------------------
00001544                            ; Subroutine to	load the sound driver
00001544                            ; ---------------------------------------------------------------------------
00001544                            
00001544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001544                            
00001544                            
00001544                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001544 4E71                       		nop	
00001546 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000154E 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001556 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000155C 43F9 00A0 0000             		lea	($A00000).l,a1
00001562 6100 0000                  		bsr.w	KosDec		; decompress
00001566 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000156E 4E71                       		nop	
00001570 4E71                       		nop	
00001572 4E71                       		nop	
00001574 4E71                       		nop	
00001576 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000157E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001586 4E75                       		rts	
00001588                            ; End of function SoundDriverLoad
00001588                            
00001588                            ; ---------------------------------------------------------------------------
00001588                            ; Subroutine to	play a sound or	music track
00001588                            ; ---------------------------------------------------------------------------
00001588                            
00001588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001588                            
00001588                            
00001588                            PlaySound:
00001588 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000158C 4E75                       		rts	
0000158E                            ; End of function PlaySound
0000158E                            
0000158E                            ; ---------------------------------------------------------------------------
0000158E                            ; Subroutine to	play a special sound/music (E0-E4)
0000158E                            ;
0000158E                            ; E0 - Fade out
0000158E                            ; E1 - Sega
0000158E                            ; E2 - Speed up
0000158E                            ; E3 - Normal speed
0000158E                            ; E4 - Stop
0000158E                            ; ---------------------------------------------------------------------------
0000158E                            
0000158E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000158E                            
0000158E                            
0000158E                            PlaySound_Special:
0000158E 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001592 4E75                       		rts	
00001594                            ; End of function PlaySound_Special
00001594                            
00001594                            ; ===========================================================================
00001594                            ; ---------------------------------------------------------------------------
00001594                            ; Unused sound/music subroutine
00001594                            ; ---------------------------------------------------------------------------
00001594                            
00001594                            PlaySound_Unk:
00001594 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001598 4E75                       		rts	
0000159A                            
0000159A                            ; ---------------------------------------------------------------------------
0000159A                            ; Subroutine to	pause the game
0000159A                            ; ---------------------------------------------------------------------------
0000159A                            
0000159A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000159A                            
0000159A                            
0000159A                            PauseGame:				; XREF: Level_MainLoop; et al
0000159A 4E71                       		nop	
0000159C 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015A0 6700                       		beq.s	Unpause		; if not, branch
000015A2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015A6 6600                       		bne.s	loc_13BE	; if yes, branch
000015A8 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015AE 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015B0                            
000015B0                            loc_13BE:
000015B0 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015B6 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015BC                            
000015BC                            loc_13CA:
000015BC 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015C2 6100 0000                  		bsr.w	DelayProgram
000015C6 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015CA 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015CC 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000015D2 6700                       		beq.s	Pause_ChkBC	; if not, branch
000015D4 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000015DA 4E71                       		nop	
000015DC 6000                       		bra.s	loc_1404
000015DE                            ; ===========================================================================
000015DE                            
000015DE                            Pause_ChkBC:				; XREF: PauseGame
000015DE 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000015E4 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000015E6 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000015EC 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000015EE                            
000015EE                            Pause_ChkStart:				; XREF: PauseGame
000015EE 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015F4 67C6                       		beq.s	loc_13CA	; if not, branch
000015F6                            
000015F6                            loc_1404:				; XREF: PauseGame
000015F6 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000015FC                            
000015FC                            Unpause:				; XREF: PauseGame
000015FC 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001602                            
00001602                            Pause_DoNothing:			; XREF: PauseGame
00001602 4E75                       		rts	
00001604                            ; ===========================================================================
00001604                            
00001604                            Pause_SlowMo:				; XREF: PauseGame
00001604 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000160A 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001610 4E75                       		rts	
00001612                            ; End of function PauseGame
00001612                            
00001612                            ; ---------------------------------------------------------------------------
00001612                            ; Subroutine to	display	patterns via the VDP
00001612                            ; ---------------------------------------------------------------------------
00001612                            
00001612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001612                            
00001612                            
00001612                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001612 4DF9 00C0 0000             		lea	($C00000).l,a6
00001618 283C 0080 0000             		move.l	#$800000,d4
0000161E                            
0000161E                            loc_142C:
0000161E 2D40 0004                  		move.l	d0,4(a6)
00001622 3601                       		move.w	d1,d3
00001624                            
00001624                            loc_1432:
00001624 3C99                       		move.w	(a1)+,(a6)
00001626 51CB FFFC                  		dbf	d3,loc_1432
0000162A D084                       		add.l	d4,d0
0000162C 51CA FFF0                  		dbf	d2,loc_142C
00001630 4E75                       		rts	
00001632                            ; End of function ShowVDPGraphics
00001632                            
00001632                            ; ---------------------------------------------------------------------------
00001632                            ; Nemesis decompression	algorithm
00001632                            ; ---------------------------------------------------------------------------
00001632                            
00001632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001632                            
00001632                            
00001632                            NemDec:
00001632 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001636 47F9 0000 0000             		lea	(loc_1502).l,a3
0000163C 49F9 00C0 0000             		lea	($C00000).l,a4
00001642 6000                       		bra.s	loc_145C
00001644                            ; ===========================================================================
00001644 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001648 47F9 0000 0000             		lea	(loc_1518).l,a3
0000164E                            
0000164E                            loc_145C:				; XREF: NemDec
0000164E 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001652 3418                       		move.w	(a0)+,d2
00001654 E34A                       		lsl.w	#1,d2
00001656 6400                       		bcc.s	loc_146A
00001658 D6FC 000A                  		adda.w	#$A,a3
0000165C                            
0000165C                            loc_146A:
0000165C E54A                       		lsl.w	#2,d2
0000165E 3A42                       		movea.w	d2,a5
00001660 7608                       		moveq	#8,d3
00001662 7400                       		moveq	#0,d2
00001664 7800                       		moveq	#0,d4
00001666 6100 0000                  		bsr.w	NemDec4
0000166A 1A18                       		move.b	(a0)+,d5
0000166C E145                       		asl.w	#8,d5
0000166E 1A18                       		move.b	(a0)+,d5
00001670 3C3C 0010                  		move.w	#$10,d6
00001674 6100                       		bsr.s	NemDec2
00001676 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
0000167A 4E75                       		rts	
0000167C                            ; End of function NemDec
0000167C                            
0000167C                            
0000167C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000167C                            
0000167C                            
0000167C                            NemDec2:				; XREF: NemDec
0000167C 3E06                       		move.w	d6,d7
0000167E 5147                       		subq.w	#8,d7
00001680 3205                       		move.w	d5,d1
00001682 EE69                       		lsr.w	d7,d1
00001684 0C01 00FC                  		cmpi.b	#-4,d1
00001688 6400                       		bcc.s	loc_14D6
0000168A 0241 00FF                  		andi.w	#$FF,d1
0000168E D241                       		add.w	d1,d1
00001690 1031 1000                  		move.b	(a1,d1.w),d0
00001694 4880                       		ext.w	d0
00001696 9C40                       		sub.w	d0,d6
00001698 0C46 0009                  		cmpi.w	#9,d6
0000169C 6400                       		bcc.s	loc_14B2
0000169E 5046                       		addq.w	#8,d6
000016A0 E145                       		asl.w	#8,d5
000016A2 1A18                       		move.b	(a0)+,d5
000016A4                            
000016A4                            loc_14B2:
000016A4 1231 1001                  		move.b	1(a1,d1.w),d1
000016A8 3001                       		move.w	d1,d0
000016AA 0241 000F                  		andi.w	#$F,d1
000016AE 0240 00F0                  		andi.w	#$F0,d0
000016B2                            
000016B2                            loc_14C0:				; XREF: NemDec3
000016B2 E848                       		lsr.w	#4,d0
000016B4                            
000016B4                            loc_14C2:				; XREF: NemDec3
000016B4 E98C                       		lsl.l	#4,d4
000016B6 8801                       		or.b	d1,d4
000016B8 5343                       		subq.w	#1,d3
000016BA 6600                       		bne.s	loc_14D0
000016BC 4ED3                       		jmp	(a3)
000016BE                            ; End of function NemDec2
000016BE                            
000016BE                            
000016BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016BE                            
000016BE                            
000016BE                            NemDec3:				; XREF: loc_1502
000016BE 7800                       		moveq	#0,d4
000016C0 7608                       		moveq	#8,d3
000016C2                            
000016C2                            loc_14D0:				; XREF: NemDec2
000016C2 51C8 FFF0                  		dbf	d0,loc_14C2
000016C6 60B4                       		bra.s	NemDec2
000016C8                            ; ===========================================================================
000016C8                            
000016C8                            loc_14D6:				; XREF: NemDec2
000016C8 5D46                       		subq.w	#6,d6
000016CA 0C46 0009                  		cmpi.w	#9,d6
000016CE 6400                       		bcc.s	loc_14E4
000016D0 5046                       		addq.w	#8,d6
000016D2 E145                       		asl.w	#8,d5
000016D4 1A18                       		move.b	(a0)+,d5
000016D6                            
000016D6                            loc_14E4:				; XREF: NemDec3
000016D6 5F46                       		subq.w	#7,d6
000016D8 3205                       		move.w	d5,d1
000016DA EC69                       		lsr.w	d6,d1
000016DC 3001                       		move.w	d1,d0
000016DE 0241 000F                  		andi.w	#$F,d1
000016E2 0240 0070                  		andi.w	#$70,d0
000016E6 0C46 0009                  		cmpi.w	#9,d6
000016EA 64C6                       		bcc.s	loc_14C0
000016EC 5046                       		addq.w	#8,d6
000016EE E145                       		asl.w	#8,d5
000016F0 1A18                       		move.b	(a0)+,d5
000016F2 60BE                       		bra.s	loc_14C0
000016F4                            ; End of function NemDec3
000016F4                            
000016F4                            ; ===========================================================================
000016F4                            
000016F4                            loc_1502:				; XREF: NemDec
000016F4 2884                       		move.l	d4,(a4)
000016F6 534D                       		subq.w	#1,a5
000016F8 380D                       		move.w	a5,d4
000016FA 66C2                       		bne.s	NemDec3
000016FC 4E75                       		rts	
000016FE                            ; ===========================================================================
000016FE B982                       		eor.l	d4,d2
00001700 2882                       		move.l	d2,(a4)
00001702 534D                       		subq.w	#1,a5
00001704 380D                       		move.w	a5,d4
00001706 66B6                       		bne.s	NemDec3
00001708 4E75                       		rts	
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            loc_1518:				; XREF: NemDec
0000170A 28C4                       		move.l	d4,(a4)+
0000170C 534D                       		subq.w	#1,a5
0000170E 380D                       		move.w	a5,d4
00001710 66AC                       		bne.s	NemDec3
00001712 4E75                       		rts	
00001714                            ; ===========================================================================
00001714 B982                       		eor.l	d4,d2
00001716 28C2                       		move.l	d2,(a4)+
00001718 534D                       		subq.w	#1,a5
0000171A 380D                       		move.w	a5,d4
0000171C 66A0                       		bne.s	NemDec3
0000171E 4E75                       		rts	
00001720                            
00001720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001720                            
00001720                            
00001720                            NemDec4:				; XREF: NemDec
00001720 1018                       		move.b	(a0)+,d0
00001722                            
00001722                            loc_1530:
00001722 0C00 00FF                  		cmpi.b	#-1,d0
00001726 6600                       		bne.s	loc_1538
00001728 4E75                       		rts	
0000172A                            ; ===========================================================================
0000172A                            
0000172A                            loc_1538:				; XREF: NemDec4
0000172A 3E00                       		move.w	d0,d7
0000172C                            
0000172C                            loc_153A:
0000172C 1018                       		move.b	(a0)+,d0
0000172E 0C00 0080                  		cmpi.b	#$80,d0
00001732 64EE                       		bcc.s	loc_1530
00001734 1200                       		move.b	d0,d1
00001736 0247 000F                  		andi.w	#$F,d7
0000173A 0241 0070                  		andi.w	#$70,d1
0000173E 8E41                       		or.w	d1,d7
00001740 0240 000F                  		andi.w	#$F,d0
00001744 1200                       		move.b	d0,d1
00001746 E149                       		lsl.w	#8,d1
00001748 8E41                       		or.w	d1,d7
0000174A 7208                       		moveq	#8,d1
0000174C 9240                       		sub.w	d0,d1
0000174E 6600                       		bne.s	loc_1568
00001750 1018                       		move.b	(a0)+,d0
00001752 D040                       		add.w	d0,d0
00001754 3387 0000                  		move.w	d7,(a1,d0.w)
00001758 60D2                       		bra.s	loc_153A
0000175A                            ; ===========================================================================
0000175A                            
0000175A                            loc_1568:				; XREF: NemDec4
0000175A 1018                       		move.b	(a0)+,d0
0000175C E368                       		lsl.w	d1,d0
0000175E D040                       		add.w	d0,d0
00001760 7A01                       		moveq	#1,d5
00001762 E36D                       		lsl.w	d1,d5
00001764 5345                       		subq.w	#1,d5
00001766                            
00001766                            loc_1574:
00001766 3387 0000                  		move.w	d7,(a1,d0.w)
0000176A 5440                       		addq.w	#2,d0
0000176C 51CD FFF8                  		dbf	d5,loc_1574
00001770 60BA                       		bra.s	loc_153A
00001772                            ; End of function NemDec4
00001772                            
00001772                            ; ---------------------------------------------------------------------------
00001772                            ; Subroutine to	load pattern load cues
00001772                            ; ---------------------------------------------------------------------------
00001772                            
00001772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001772                            
00001772                            
00001772                            LoadPLC:
00001772 48E7 0060                  		movem.l	a1-a2,-(sp)
00001776 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000177C D040                       		add.w	d0,d0
0000177E 3031 0000                  		move.w	(a1,d0.w),d0
00001782 43F1 0000                  		lea	(a1,d0.w),a1
00001786 45F8 F680                  		lea	($FFFFF680).w,a2
0000178A                            
0000178A                            loc_1598:
0000178A 4A92                       		tst.l	(a2)
0000178C 6700                       		beq.s	loc_15A0
0000178E 5C4A                       		addq.w	#6,a2
00001790 60F8                       		bra.s	loc_1598
00001792                            ; ===========================================================================
00001792                            
00001792                            loc_15A0:				; XREF: LoadPLC
00001792 3019                       		move.w	(a1)+,d0
00001794 6B00                       		bmi.s	loc_15AC
00001796                            
00001796                            loc_15A4:
00001796 24D9                       		move.l	(a1)+,(a2)+
00001798 34D9                       		move.w	(a1)+,(a2)+
0000179A 51C8 FFFA                  		dbf	d0,loc_15A4
0000179E                            
0000179E                            loc_15AC:
0000179E 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017A2 4E75                       		rts	
000017A4                            ; End of function LoadPLC
000017A4                            
000017A4                            
000017A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A4                            
000017A4                            
000017A4                            LoadPLC2:
000017A4 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AE D040                       		add.w	d0,d0
000017B0 3031 0000                  		move.w	(a1,d0.w),d0
000017B4 43F1 0000                  		lea	(a1,d0.w),a1
000017B8 6100                       		bsr.s	ClearPLC
000017BA 45F8 F680                  		lea	($FFFFF680).w,a2
000017BE 3019                       		move.w	(a1)+,d0
000017C0 6B00                       		bmi.s	loc_15D8
000017C2                            
000017C2                            loc_15D0:
000017C2 24D9                       		move.l	(a1)+,(a2)+
000017C4 34D9                       		move.w	(a1)+,(a2)+
000017C6 51C8 FFFA                  		dbf	d0,loc_15D0
000017CA                            
000017CA                            loc_15D8:
000017CA 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017CE 4E75                       		rts	
000017D0                            ; End of function LoadPLC2
000017D0                            
000017D0                            ; ---------------------------------------------------------------------------
000017D0                            ; Subroutine to	clear the pattern load cues
000017D0                            ; ---------------------------------------------------------------------------
000017D0                            
000017D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D0                            
000017D0                            
000017D0                            ClearPLC:				; XREF: LoadPLC2
000017D0 45F8 F680                  		lea	($FFFFF680).w,a2
000017D4 701F                       		moveq	#$1F,d0
000017D6                            
000017D6                            ClearPLC_Loop:
000017D6 429A                       		clr.l	(a2)+
000017D8 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000017DC 4E75                       		rts	
000017DE                            ; End of function ClearPLC
000017DE                            
000017DE                            ; ---------------------------------------------------------------------------
000017DE                            ; Subroutine to	use graphics listed in a pattern load cue
000017DE                            ; ---------------------------------------------------------------------------
000017DE                            
000017DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017DE                            
000017DE                            
000017DE                            RunPLC_RAM:				; XREF: Pal_FadeTo
000017DE 4AB8 F680                  		tst.l	($FFFFF680).w
000017E2 6700                       		beq.s	locret_1640
000017E4 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017E8 6600                       		bne.s	locret_1640
000017EA 2078 F680                  		movea.l	($FFFFF680).w,a0
000017EE 47F9 0000 16F4             		lea	(loc_1502).l,a3
000017F4 43F8 AA00                  		lea	($FFFFAA00).w,a1
000017F8 3418                       		move.w	(a0)+,d2
000017FA 6A00                       		bpl.s	loc_160E
000017FC D6FC 000A                  		adda.w	#$A,a3
00001800                            
00001800                            loc_160E:
00001800 0242 7FFF                  		andi.w	#$7FFF,d2
00001804 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001808 6100 FF16                  		bsr.w	NemDec4
0000180C 1A18                       		move.b	(a0)+,d5
0000180E E145                       		asl.w	#8,d5
00001810 1A18                       		move.b	(a0)+,d5
00001812 7C10                       		moveq	#$10,d6
00001814 7000                       		moveq	#0,d0
00001816 21C8 F680                  		move.l	a0,($FFFFF680).w
0000181A 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000181E 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001822 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001826 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000182A 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000182E 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001832                            
00001832                            locret_1640:
00001832 4E75                       		rts	
00001834                            ; End of function RunPLC_RAM
00001834                            
00001834                            
00001834                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001834                            
00001834                            
00001834                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001834 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001838 6700 0000                  		beq.w	locret_16DA
0000183C 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001842 7000                       		moveq	#0,d0
00001844 3038 F684                  		move.w	($FFFFF684).w,d0
00001848 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000184E 6000                       		bra.s	loc_1676
00001850                            ; End of function sub_1642
00001850                            
00001850                            
00001850                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001850                            
00001850                            
00001850                            sub_165E:				; XREF: Demo_Time
00001850 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001854 6700                       		beq.s	locret_16DA
00001856 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000185C 7000                       		moveq	#0,d0
0000185E 3038 F684                  		move.w	($FFFFF684).w,d0
00001862 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001868                            
00001868                            loc_1676:				; XREF: sub_1642
00001868 49F9 00C0 0004             		lea	($C00004).l,a4
0000186E E588                       		lsl.l	#2,d0
00001870 E448                       		lsr.w	#2,d0
00001872 0040 4000                  		ori.w	#$4000,d0
00001876 4840                       		swap	d0
00001878 2880                       		move.l	d0,(a4)
0000187A 594C                       		subq.w	#4,a4
0000187C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001880 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001884 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001888 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000188C 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001890 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001894 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001898 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000189C                            
0000189C                            loc_16AA:				; XREF: sub_165E
0000189C 3A7C 0008                  		movea.w	#8,a5
000018A0 6100 FE1C                  		bsr.w	NemDec3
000018A4 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018A8 6700                       		beq.s	loc_16DC
000018AA 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018AE 66EC                       		bne.s	loc_16AA
000018B0 21C8 F680                  		move.l	a0,($FFFFF680).w
000018B4 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018B8 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018BC 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018C0 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018C4 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018C8 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018CC                            
000018CC                            locret_16DA:				; XREF: sub_1642
000018CC 4E75                       		rts	
000018CE                            ; ===========================================================================
000018CE                            
000018CE                            loc_16DC:				; XREF: sub_165E
000018CE 41F8 F680                  		lea	($FFFFF680).w,a0
000018D2 7015                       		moveq	#$15,d0
000018D4                            
000018D4                            loc_16E2:				; XREF: sub_165E
000018D4 20E8 0006                  		move.l	6(a0),(a0)+
000018D8 51C8 FFFA                  		dbf	d0,loc_16E2
000018DC 4E75                       		rts	
000018DE                            ; End of function sub_165E
000018DE                            
000018DE                            ; ---------------------------------------------------------------------------
000018DE                            ; Subroutine to	execute	the pattern load cue
000018DE                            ; ---------------------------------------------------------------------------
000018DE                            
000018DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018DE                            
000018DE                            
000018DE                            RunPLC_ROM:
000018DE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018E4 D040                       		add.w	d0,d0
000018E6 3031 0000                  		move.w	(a1,d0.w),d0
000018EA 43F1 0000                  		lea	(a1,d0.w),a1
000018EE 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000018F0                            
000018F0                            RunPLC_Loop:
000018F0 2059                       		movea.l	(a1)+,a0	; get art pointer
000018F2 7000                       		moveq	#0,d0
000018F4 3019                       		move.w	(a1)+,d0	; get VRAM address
000018F6 E588                       		lsl.l	#2,d0		; divide address by $20
000018F8 E448                       		lsr.w	#2,d0
000018FA 0040 4000                  		ori.w	#$4000,d0
000018FE 4840                       		swap	d0
00001900 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001906 6100 FD2A                  		bsr.w	NemDec		; decompress
0000190A 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000190E 4E75                       		rts	
00001910                            ; End of function RunPLC_ROM
00001910                            
00001910                            ; ---------------------------------------------------------------------------
00001910                            ; Enigma decompression algorithm
00001910                            ; ---------------------------------------------------------------------------
00001910                            
00001910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001910                            
00001910                            
00001910                            EniDec:
00001910 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001914 3640                       		movea.w	d0,a3
00001916 1018                       		move.b	(a0)+,d0
00001918 4880                       		ext.w	d0
0000191A 3A40                       		movea.w	d0,a5
0000191C 1818                       		move.b	(a0)+,d4
0000191E E70C                       		lsl.b	#3,d4
00001920 3458                       		movea.w	(a0)+,a2
00001922 D4CB                       		adda.w	a3,a2
00001924 3858                       		movea.w	(a0)+,a4
00001926 D8CB                       		adda.w	a3,a4
00001928 1A18                       		move.b	(a0)+,d5
0000192A E145                       		asl.w	#8,d5
0000192C 1A18                       		move.b	(a0)+,d5
0000192E 7C10                       		moveq	#$10,d6
00001930                            
00001930                            loc_173E:				; XREF: loc_1768
00001930 7007                       		moveq	#7,d0
00001932 3E06                       		move.w	d6,d7
00001934 9E40                       		sub.w	d0,d7
00001936 3205                       		move.w	d5,d1
00001938 EE69                       		lsr.w	d7,d1
0000193A 0241 007F                  		andi.w	#$7F,d1
0000193E 3401                       		move.w	d1,d2
00001940 0C41 0040                  		cmpi.w	#$40,d1
00001944 6400                       		bcc.s	loc_1758
00001946 7006                       		moveq	#6,d0
00001948 E24A                       		lsr.w	#1,d2
0000194A                            
0000194A                            loc_1758:
0000194A 6100 0000                  		bsr.w	sub_188C
0000194E 0242 000F                  		andi.w	#$F,d2
00001952 E849                       		lsr.w	#4,d1
00001954 D241                       		add.w	d1,d1
00001956 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000195A                            ; End of function EniDec
0000195A                            
0000195A                            ; ===========================================================================
0000195A                            
0000195A                            loc_1768:				; XREF: loc_17B4
0000195A 32CA                       		move.w	a2,(a1)+
0000195C 524A                       		addq.w	#1,a2
0000195E 51CA FFFA                  		dbf	d2,loc_1768
00001962 60CC                       		bra.s	loc_173E
00001964                            ; ===========================================================================
00001964                            
00001964                            loc_1772:				; XREF: loc_17B4
00001964 32CC                       		move.w	a4,(a1)+
00001966 51CA FFFC                  		dbf	d2,loc_1772
0000196A 60C4                       		bra.s	loc_173E
0000196C                            ; ===========================================================================
0000196C                            
0000196C                            loc_177A:				; XREF: loc_17B4
0000196C 6100 0000                  		bsr.w	loc_17DC
00001970                            
00001970                            loc_177E:
00001970 32C1                       		move.w	d1,(a1)+
00001972 51CA FFFC                  		dbf	d2,loc_177E
00001976 60B8                       		bra.s	loc_173E
00001978                            ; ===========================================================================
00001978                            
00001978                            loc_1786:				; XREF: loc_17B4
00001978 6100 0000                  		bsr.w	loc_17DC
0000197C                            
0000197C                            loc_178A:
0000197C 32C1                       		move.w	d1,(a1)+
0000197E 5241                       		addq.w	#1,d1
00001980 51CA FFFA                  		dbf	d2,loc_178A
00001984 60AA                       		bra.s	loc_173E
00001986                            ; ===========================================================================
00001986                            
00001986                            loc_1794:				; XREF: loc_17B4
00001986 6100 0000                  		bsr.w	loc_17DC
0000198A                            
0000198A                            loc_1798:
0000198A 32C1                       		move.w	d1,(a1)+
0000198C 5341                       		subq.w	#1,d1
0000198E 51CA FFFA                  		dbf	d2,loc_1798
00001992 609C                       		bra.s	loc_173E
00001994                            ; ===========================================================================
00001994                            
00001994                            loc_17A2:				; XREF: loc_17B4
00001994 0C42 000F                  		cmpi.w	#$F,d2
00001998 6700                       		beq.s	loc_17C4
0000199A                            
0000199A                            loc_17A8:
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFF8                  		dbf	d2,loc_17A8
000019A4 608A                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_17B4:				; XREF: EniDec
000019A6 60B2                       		bra.s	loc_1768
000019A8                            ; ===========================================================================
000019A8 60B0                       		bra.s	loc_1768
000019AA                            ; ===========================================================================
000019AA 60B8                       		bra.s	loc_1772
000019AC                            ; ===========================================================================
000019AC 60B6                       		bra.s	loc_1772
000019AE                            ; ===========================================================================
000019AE 60BC                       		bra.s	loc_177A
000019B0                            ; ===========================================================================
000019B0 60C6                       		bra.s	loc_1786
000019B2                            ; ===========================================================================
000019B2 60D2                       		bra.s	loc_1794
000019B4                            ; ===========================================================================
000019B4 60DE                       		bra.s	loc_17A2
000019B6                            ; ===========================================================================
000019B6                            
000019B6                            loc_17C4:				; XREF: loc_17A2
000019B6 5348                       		subq.w	#1,a0
000019B8 0C46 0010                  		cmpi.w	#$10,d6
000019BC 6600                       		bne.s	loc_17CE
000019BE 5348                       		subq.w	#1,a0
000019C0                            
000019C0                            loc_17CE:
000019C0 3008                       		move.w	a0,d0
000019C2 E248                       		lsr.w	#1,d0
000019C4 6400                       		bcc.s	loc_17D6
000019C6 5248                       		addq.w	#1,a0
000019C8                            
000019C8                            loc_17D6:
000019C8 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019CC 4E75                       		rts	
000019CE                            ; ===========================================================================
000019CE                            
000019CE                            loc_17DC:				; XREF: loc_17A2
000019CE 360B                       		move.w	a3,d3
000019D0 1204                       		move.b	d4,d1
000019D2 D201                       		add.b	d1,d1
000019D4 6400                       		bcc.s	loc_17EE
000019D6 5346                       		subq.w	#1,d6
000019D8 0D05                       		btst	d6,d5
000019DA 6700                       		beq.s	loc_17EE
000019DC 0043 8000                  		ori.w	#-$8000,d3
000019E0                            
000019E0                            loc_17EE:
000019E0 D201                       		add.b	d1,d1
000019E2 6400                       		bcc.s	loc_17FC
000019E4 5346                       		subq.w	#1,d6
000019E6 0D05                       		btst	d6,d5
000019E8 6700                       		beq.s	loc_17FC
000019EA 0643 4000                  		addi.w	#$4000,d3
000019EE                            
000019EE                            loc_17FC:
000019EE D201                       		add.b	d1,d1
000019F0 6400                       		bcc.s	loc_180A
000019F2 5346                       		subq.w	#1,d6
000019F4 0D05                       		btst	d6,d5
000019F6 6700                       		beq.s	loc_180A
000019F8 0643 2000                  		addi.w	#$2000,d3
000019FC                            
000019FC                            loc_180A:
000019FC D201                       		add.b	d1,d1
000019FE 6400                       		bcc.s	loc_1818
00001A00 5346                       		subq.w	#1,d6
00001A02 0D05                       		btst	d6,d5
00001A04 6700                       		beq.s	loc_1818
00001A06 0043 1000                  		ori.w	#$1000,d3
00001A0A                            
00001A0A                            loc_1818:
00001A0A D201                       		add.b	d1,d1
00001A0C 6400                       		bcc.s	loc_1826
00001A0E 5346                       		subq.w	#1,d6
00001A10 0D05                       		btst	d6,d5
00001A12 6700                       		beq.s	loc_1826
00001A14 0043 0800                  		ori.w	#$800,d3
00001A18                            
00001A18                            loc_1826:
00001A18 3205                       		move.w	d5,d1
00001A1A 3E06                       		move.w	d6,d7
00001A1C 9E4D                       		sub.w	a5,d7
00001A1E 6400                       		bcc.s	loc_1856
00001A20 3C07                       		move.w	d7,d6
00001A22 0646 0010                  		addi.w	#$10,d6
00001A26 4447                       		neg.w	d7
00001A28 EF69                       		lsl.w	d7,d1
00001A2A 1A10                       		move.b	(a0),d5
00001A2C EF3D                       		rol.b	d7,d5
00001A2E DE47                       		add.w	d7,d7
00001A30 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A34 D245                       		add.w	d5,d1
00001A36                            
00001A36                            loc_1844:				; XREF: loc_1868
00001A36 300D                       		move.w	a5,d0
00001A38 D040                       		add.w	d0,d0
00001A3A C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A3E D243                       		add.w	d3,d1
00001A40 1A18                       		move.b	(a0)+,d5
00001A42 E14D                       		lsl.w	#8,d5
00001A44 1A18                       		move.b	(a0)+,d5
00001A46 4E75                       		rts	
00001A48                            ; ===========================================================================
00001A48                            
00001A48                            loc_1856:				; XREF: loc_1826
00001A48 6700                       		beq.s	loc_1868
00001A4A EE69                       		lsr.w	d7,d1
00001A4C 300D                       		move.w	a5,d0
00001A4E D040                       		add.w	d0,d0
00001A50 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A54 D243                       		add.w	d3,d1
00001A56 300D                       		move.w	a5,d0
00001A58 6000                       		bra.s	sub_188C
00001A5A                            ; ===========================================================================
00001A5A                            
00001A5A                            loc_1868:				; XREF: loc_1856
00001A5A 7C10                       		moveq	#$10,d6
00001A5C                            
00001A5C                            loc_186A:
00001A5C 60D8                       		bra.s	loc_1844
00001A5E                            ; ===========================================================================
00001A5E 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001A74 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001A7E                            
00001A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A7E                            
00001A7E                            
00001A7E                            sub_188C:				; XREF: EniDec
00001A7E 9C40                       		sub.w	d0,d6
00001A80 0C46 0009                  		cmpi.w	#9,d6
00001A84 6400                       		bcc.s	locret_189A
00001A86 5046                       		addq.w	#8,d6
00001A88 E145                       		asl.w	#8,d5
00001A8A 1A18                       		move.b	(a0)+,d5
00001A8C                            
00001A8C                            locret_189A:
00001A8C 4E75                       		rts	
00001A8E                            ; End of function sub_188C
00001A8E                            
00001A8E                            ; ---------------------------------------------------------------------------
00001A8E                            ; Kosinski decompression algorithm
00001A8E                            ; ---------------------------------------------------------------------------
00001A8E                            
00001A8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A8E                            
00001A8E                            
00001A8E                            KosDec:
00001A8E                            
00001A8E =FFFFFFFE                  var_2		= -2
00001A8E =FFFFFFFF                  var_1		= -1
00001A8E                            
00001A8E 558F                       		subq.l	#2,sp
00001A90 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A94 1E98                       		move.b	(a0)+,(sp)
00001A96 3A17                       		move.w	(sp),d5
00001A98 780F                       		moveq	#$F,d4
00001A9A                            
00001A9A                            loc_18A8:
00001A9A E24D                       		lsr.w	#1,d5
00001A9C 40C6                       		move	sr,d6
00001A9E 51CC 0000                  		dbf	d4,loc_18BA
00001AA2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AA6 1E98                       		move.b	(a0)+,(sp)
00001AA8 3A17                       		move.w	(sp),d5
00001AAA 780F                       		moveq	#$F,d4
00001AAC                            
00001AAC                            loc_18BA:
00001AAC 44C6                       		move	d6,ccr
00001AAE 6400                       		bcc.s	loc_18C2
00001AB0 12D8                       		move.b	(a0)+,(a1)+
00001AB2 60E6                       		bra.s	loc_18A8
00001AB4                            ; ===========================================================================
00001AB4                            
00001AB4                            loc_18C2:				; XREF: KosDec
00001AB4 7600                       		moveq	#0,d3
00001AB6 E24D                       		lsr.w	#1,d5
00001AB8 40C6                       		move	sr,d6
00001ABA 51CC 0000                  		dbf	d4,loc_18D6
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18D6:
00001AC8 44C6                       		move	d6,ccr
00001ACA 6500                       		bcs.s	loc_1906
00001ACC E24D                       		lsr.w	#1,d5
00001ACE 51CC 0000                  		dbf	d4,loc_18EA
00001AD2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD6 1E98                       		move.b	(a0)+,(sp)
00001AD8 3A17                       		move.w	(sp),d5
00001ADA 780F                       		moveq	#$F,d4
00001ADC                            
00001ADC                            loc_18EA:
00001ADC E353                       		roxl.w	#1,d3
00001ADE E24D                       		lsr.w	#1,d5
00001AE0 51CC 0000                  		dbf	d4,loc_18FC
00001AE4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AE8 1E98                       		move.b	(a0)+,(sp)
00001AEA 3A17                       		move.w	(sp),d5
00001AEC 780F                       		moveq	#$F,d4
00001AEE                            
00001AEE                            loc_18FC:
00001AEE E353                       		roxl.w	#1,d3
00001AF0 5243                       		addq.w	#1,d3
00001AF2 74FF                       		moveq	#-1,d2
00001AF4 1418                       		move.b	(a0)+,d2
00001AF6 6000                       		bra.s	loc_191C
00001AF8                            ; ===========================================================================
00001AF8                            
00001AF8                            loc_1906:				; XREF: loc_18C2
00001AF8 1018                       		move.b	(a0)+,d0
00001AFA 1218                       		move.b	(a0)+,d1
00001AFC 74FF                       		moveq	#-1,d2
00001AFE 1401                       		move.b	d1,d2
00001B00 EB4A                       		lsl.w	#5,d2
00001B02 1400                       		move.b	d0,d2
00001B04 0241 0007                  		andi.w	#7,d1
00001B08 6700                       		beq.s	loc_1928
00001B0A 1601                       		move.b	d1,d3
00001B0C 5243                       		addq.w	#1,d3
00001B0E                            
00001B0E                            loc_191C:
00001B0E 1031 2000                  		move.b	(a1,d2.w),d0
00001B12 12C0                       		move.b	d0,(a1)+
00001B14 51CB FFF8                  		dbf	d3,loc_191C
00001B18 6080                       		bra.s	loc_18A8
00001B1A                            ; ===========================================================================
00001B1A                            
00001B1A                            loc_1928:				; XREF: loc_1906
00001B1A 1218                       		move.b	(a0)+,d1
00001B1C 6700                       		beq.s	loc_1938
00001B1E 0C01 0001                  		cmpi.b	#1,d1
00001B22 6700 FF76                  		beq.w	loc_18A8
00001B26 1601                       		move.b	d1,d3
00001B28 60E4                       		bra.s	loc_191C
00001B2A                            ; ===========================================================================
00001B2A                            
00001B2A                            loc_1938:				; XREF: loc_1928
00001B2A 548F                       		addq.l	#2,sp
00001B2C 4E75                       		rts	
00001B2E                            ; End of function KosDec
00001B2E                            
00001B2E                            ; ---------------------------------------------------------------------------
00001B2E                            ; Pallet cycling routine loading subroutine
00001B2E                            ; ---------------------------------------------------------------------------
00001B2E                            
00001B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B2E                            
00001B2E                            
00001B2E                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B2E 7400                       		moveq	#0,d2
00001B30 7000                       		moveq	#0,d0
00001B32 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B36 D040                       		add.w	d0,d0		; multiply by 2
00001B38 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B3C 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B40                            ; End of function PalCycle_Load
00001B40                            
00001B40                            ; ===========================================================================
00001B40                            ; ---------------------------------------------------------------------------
00001B40                            ; Pallet cycling routines
00001B40                            ; ---------------------------------------------------------------------------
00001B40 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B42 0000                       		dc.w PalCycle_LZ-PalCycle
00001B44 0000                       		dc.w PalCycle_MZ-PalCycle
00001B46 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B48 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B4A 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B4C 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B4E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B50                            
00001B50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B50                            
00001B50                            
00001B50                            PalCycle_Title:				; XREF: TitleScreen
00001B50 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B56 6000                       		bra.s	loc_196A
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            PalCycle_GHZ:				; XREF: PalCycle
00001B58 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B5E                            
00001B5E                            loc_196A:				; XREF: PalCycle_Title
00001B5E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B62 6A00                       		bpl.s	locret_1990
00001B64 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B6A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B6E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B72 0240 0003                  		andi.w	#3,d0
00001B76 E748                       		lsl.w	#3,d0
00001B78 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001B7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B80 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B84                            
00001B84                            locret_1990:
00001B84 4E75                       		rts	
00001B86                            ; End of function PalCycle_Title
00001B86                            
00001B86                            
00001B86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B86                            
00001B86                            
00001B86                            PalCycle_LZ:				; XREF: PalCycle
00001B86 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8A 6A00                       		bpl.s	loc_19D8
00001B8C 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B92 3038 F632                  		move.w	($FFFFF632).w,d0
00001B96 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9A 0240 0003                  		andi.w	#3,d0
00001B9E E748                       		lsl.w	#3,d0
00001BA0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BA6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BAC 6600                       		bne.s	loc_19C0
00001BAE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BB4                            
00001BB4                            loc_19C0:
00001BB4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BB8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BBC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BC0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BC4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BC8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BCC                            
00001BCC                            loc_19D8:
00001BCC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BD0 0240 0007                  		andi.w	#7,d0
00001BD4 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001BD8 6700                       		beq.s	locret_1A3A
00001BDA 7201                       		moveq	#1,d1
00001BDC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001BE0 6700                       		beq.s	loc_19F0
00001BE2 4441                       		neg.w	d1
00001BE4                            
00001BE4                            loc_19F0:
00001BE4 3038 F650                  		move.w	($FFFFF650).w,d0
00001BE8 0240 0003                  		andi.w	#3,d0
00001BEC D041                       		add.w	d1,d0
00001BEE 0C40 0003                  		cmpi.w	#3,d0
00001BF2 6500                       		bcs.s	loc_1A0A
00001BF4 3200                       		move.w	d0,d1
00001BF6 7000                       		moveq	#0,d0
00001BF8 4A41                       		tst.w	d1
00001BFA 6A00                       		bpl.s	loc_1A0A
00001BFC 7002                       		moveq	#2,d0
00001BFE                            
00001BFE                            loc_1A0A:
00001BFE 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C02 D040                       		add.w	d0,d0
00001C04 3200                       		move.w	d0,d1
00001C06 D040                       		add.w	d0,d0
00001C08 D041                       		add.w	d1,d0
00001C0A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C10 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C14 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C18 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C1C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C22 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C26 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C2A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C2E                            
00001C2E                            locret_1A3A:
00001C2E 4E75                       		rts	
00001C30                            ; End of function PalCycle_LZ
00001C30                            
00001C30                            ; ===========================================================================
00001C30 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C38                            ; ===========================================================================
00001C38                            
00001C38                            PalCycle_MZ:				; XREF: PalCycle
00001C38 4E75                       		rts	
00001C3A                            
00001C3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C3A                            
00001C3A                            
00001C3A                            PalCycle_SLZ:				; XREF: PalCycle
00001C3A 4E75                       		rts	
00001C3C                            ; End of function PalCycle_SLZ
00001C3C                            
00001C3C                            
00001C3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C3C                            
00001C3C                            
00001C3C                            PalCycle_SYZ:				; XREF: PalCycle
00001C3C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C40 6A00                       		bpl.s	locret_1AC6
00001C42 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C48 3038 F632                  		move.w	($FFFFF632).w,d0
00001C4C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C50 0240 0003                  		andi.w	#3,d0
00001C54 E548                       		lsl.w	#2,d0
00001C56 3200                       		move.w	d0,d1
00001C58 D040                       		add.w	d0,d0
00001C5A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C60 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C64 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C68 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C6C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C72 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C76 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C7A 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C80                            
00001C80                            locret_1AC6:
00001C80 4E75                       		rts	
00001C82                            ; End of function PalCycle_SYZ
00001C82                            
00001C82                            
00001C82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C82                            
00001C82                            
00001C82                            PalCycle_SBZ:				; XREF: PalCycle
00001C82 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C88 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C8C 6700                       		beq.s	loc_1ADA
00001C8E 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001C94                            
00001C94                            loc_1ADA:
00001C94 43F8 F650                  		lea	($FFFFF650).w,a1
00001C98 321A                       		move.w	(a2)+,d1
00001C9A                            
00001C9A                            loc_1AE0:
00001C9A 5311                       		subq.b	#1,(a1)
00001C9C 6B00                       		bmi.s	loc_1AEA
00001C9E 5489                       		addq.l	#2,a1
00001CA0 5C8A                       		addq.l	#6,a2
00001CA2 6000                       		bra.s	loc_1B06
00001CA4                            ; ===========================================================================
00001CA4                            
00001CA4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CA4 12DA                       		move.b	(a2)+,(a1)+
00001CA6 1011                       		move.b	(a1),d0
00001CA8 5200                       		addq.b	#1,d0
00001CAA B01A                       		cmp.b	(a2)+,d0
00001CAC 6500                       		bcs.s	loc_1AF6
00001CAE 7000                       		moveq	#0,d0
00001CB0                            
00001CB0                            loc_1AF6:
00001CB0 12C0                       		move.b	d0,(a1)+
00001CB2 0240 000F                  		andi.w	#$F,d0
00001CB6 D040                       		add.w	d0,d0
00001CB8 305A                       		movea.w	(a2)+,a0
00001CBA 365A                       		movea.w	(a2)+,a3
00001CBC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CC0                            
00001CC0                            loc_1B06:				; XREF: PalCycle_SBZ
00001CC0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CC4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CC8 6A00                       		bpl.s	locret_1B64
00001CCA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001CD0 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001CD6 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CDA 6700                       		beq.s	loc_1B2E
00001CDC 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001CE2 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001CE8                            
00001CE8                            loc_1B2E:
00001CE8 72FF                       		moveq	#-1,d1
00001CEA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CEE 6700                       		beq.s	loc_1B38
00001CF0 4441                       		neg.w	d1
00001CF2                            
00001CF2                            loc_1B38:
00001CF2 3038 F632                  		move.w	($FFFFF632).w,d0
00001CF6 0240 0003                  		andi.w	#3,d0
00001CFA D041                       		add.w	d1,d0
00001CFC 0C40 0003                  		cmpi.w	#3,d0
00001D00 6500                       		bcs.s	loc_1B52
00001D02 3200                       		move.w	d0,d1
00001D04 7000                       		moveq	#0,d0
00001D06 4A41                       		tst.w	d1
00001D08 6A00                       		bpl.s	loc_1B52
00001D0A 7002                       		moveq	#2,d0
00001D0C                            
00001D0C                            loc_1B52:
00001D0C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D10 D040                       		add.w	d0,d0
00001D12 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D16 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D1A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D1E                            
00001D1E                            locret_1B64:
00001D1E 4E75                       		rts	
00001D20                            ; End of function PalCycle_SBZ
00001D20                            
00001D20                            ; ===========================================================================
00001D20                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D40                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D60                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001D80                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001D92                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DA4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E0C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E30                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E50                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E60                            
00001E60                            Pal_SBZCycList:
00001E60                            	include "_inc\SBZ pallet script 1.asm"
00001E60                            ; ---------------------------------------------------------------------------
00001E60                            ; Scrap Brain Zone 1 pallet cycling script
00001E60                            ; ---------------------------------------------------------------------------
00001E60 0008                       	dc.w 8			; number of entries - 1
00001E62 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E64 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E66 FB50                       	dc.w $FB50		; RAM address
00001E68 0D08                       	dc.b $D, 8
00001E6A 0000                       	dc.w Pal_SBZCyc2
00001E6C FB52                       	dc.w $FB52
00001E6E 0E08                       	dc.b $E, 8
00001E70 0000                       	dc.w Pal_SBZCyc3
00001E72 FB6E                       	dc.w $FB6E
00001E74 0B08                       	dc.b $B, 8
00001E76 0000                       	dc.w Pal_SBZCyc5
00001E78 FB70                       	dc.w $FB70
00001E7A 0708                       	dc.b 7,	8
00001E7C 0000                       	dc.w Pal_SBZCyc6
00001E7E FB72                       	dc.w $FB72
00001E80 1C10                       	dc.b $1C, $10
00001E82 0000                       	dc.w Pal_SBZCyc7
00001E84 FB7E                       	dc.w $FB7E
00001E86 0303                       	dc.b 3,	3
00001E88 0000                       	dc.w Pal_SBZCyc8
00001E8A FB78                       	dc.w $FB78
00001E8C 0303                       	dc.b 3,	3
00001E8E 0000                       	dc.w Pal_SBZCyc8+2
00001E90 FB7A                       	dc.w $FB7A
00001E92 0303                       	dc.b 3,	3
00001E94 0000                       	dc.w Pal_SBZCyc8+4
00001E96 FB7C                       	dc.w $FB7C
00001E98                            	even
00001E98                            	even
00001E98                            
00001E98                            Pal_SBZCycList2:
00001E98                            	include "_inc\SBZ pallet script 2.asm"
00001E98                            ; ---------------------------------------------------------------------------
00001E98                            ; Scrap Brain Zone 2 pallet cycling script
00001E98                            ; ---------------------------------------------------------------------------
00001E98 0006                       	dc.w 6
00001E9A 0708                       	dc.b 7,	8
00001E9C 0000                       	dc.w Pal_SBZCyc1
00001E9E FB50                       	dc.w $FB50
00001EA0 0D08                       	dc.b $D, 8
00001EA2 0000                       	dc.w Pal_SBZCyc2
00001EA4 FB52                       	dc.w $FB52
00001EA6 0908                       	dc.b 9,	8
00001EA8 0000                       	dc.w Pal_SBZCyc9
00001EAA FB70                       	dc.w $FB70
00001EAC 0708                       	dc.b 7,	8
00001EAE 0000                       	dc.w Pal_SBZCyc6
00001EB0 FB72                       	dc.w $FB72
00001EB2 0303                       	dc.b 3,	3
00001EB4 0000                       	dc.w Pal_SBZCyc8
00001EB6 FB78                       	dc.w $FB78
00001EB8 0303                       	dc.b 3,	3
00001EBA 0000                       	dc.w Pal_SBZCyc8+2
00001EBC FB7A                       	dc.w $FB7A
00001EBE 0303                       	dc.b 3,	3
00001EC0 0000                       	dc.w Pal_SBZCyc8+4
00001EC2 FB7C                       	dc.w $FB7C
00001EC4                            	even
00001EC4                            	even
00001EC4                            
00001EC4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001ED4                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001EE4                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001EF4                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F00                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F10                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F20                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F40                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F4A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F5A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F66                            ; ---------------------------------------------------------------------------
00001F66                            ; Subroutine to	fade out and fade in
00001F66                            ; ---------------------------------------------------------------------------
00001F66                            
00001F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F66                            
00001F66                            
00001F66                            Pal_FadeTo:
00001F66 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F6C                            
00001F6C                            Pal_FadeTo2:
00001F6C 7000                       		moveq	#0,d0
00001F6E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F72 1038 F626                  		move.b	($FFFFF626).w,d0
00001F76 D0C0                       		adda.w	d0,a0
00001F78 7200                       		moveq	#0,d1
00001F7A 1038 F627                  		move.b	($FFFFF627).w,d0
00001F7E                            
00001F7E                            Pal_ToBlack:
00001F7E 30C1                       		move.w	d1,(a0)+
00001F80 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001F84                            
00001F84 383C 0015                  		move.w	#$15,d4
00001F88 1A3C 0009                  		move.b	#9,d5
00001F8C                            
00001F8C                            loc_1DCE:
00001F8C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F92 6100 0000                  		bsr.w	DelayProgram
00001F96 6100                       		bsr.s	Pal_FadeIn
00001F98 6100 F844                  		bsr.w	RunPLC_RAM
00001F9C 51CC FFEE                  		dbf	d4,loc_1DCE
00001FA0 4E75                       		rts	
00001FA2                            ; End of function Pal_FadeTo
00001FA2                            
00001FA2                            ; ---------------------------------------------------------------------------
00001FA2                            ; Pallet fade-in subroutine
00001FA2                            ; ---------------------------------------------------------------------------
00001FA2                            
00001FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FA2                            
00001FA2                            
00001FA2                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FA2 7000                       		moveq	#0,d0
00001FA4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA8 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FAC 1038 F626                  		move.b	($FFFFF626).w,d0
00001FB0 D0C0                       		adda.w	d0,a0
00001FB2 D2C0                       		adda.w	d0,a1
00001FB4 1038 F627                  		move.b	($FFFFF627).w,d0
00001FB8                            
00001FB8                            loc_1DFA:
00001FB8 6100                       		bsr.s	Pal_AddColor
00001FBA 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FC4 6600                       		bne.s	locret_1E24
00001FC6 7000                       		moveq	#0,d0
00001FC8 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FCC 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FD0 1038 F626                  		move.b	($FFFFF626).w,d0
00001FD4 D0C0                       		adda.w	d0,a0
00001FD6 D2C0                       		adda.w	d0,a1
00001FD8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FDC                            
00001FDC                            loc_1E1E:
00001FDC 6100                       		bsr.s	Pal_AddColor
00001FDE 51C8 FFFC                  		dbf	d0,loc_1E1E
00001FE2                            
00001FE2                            locret_1E24:
00001FE2 4E75                       		rts	
00001FE4                            ; End of function Pal_FadeIn
00001FE4                            
00001FE4                            
00001FE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE4                            
00001FE4                            
00001FE4                            Pal_AddColor:				; XREF: Pal_FadeIn
00001FE4 3419                       		move.w	(a1)+,d2
00001FE6 3610                       		move.w	(a0),d3
00001FE8 B642                       		cmp.w	d2,d3
00001FEA 6700                       		beq.s	loc_1E4E
00001FEC 3203                       		move.w	d3,d1
00001FEE 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001FF2 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001FF4 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001FF6 30C1                       		move.w	d1,(a0)+	; update pallet
00001FF8 4E75                       		rts	
00001FFA                            ; ===========================================================================
00001FFA                            
00001FFA                            Pal_AddGreen:				; XREF: Pal_AddColor
00001FFA 3203                       		move.w	d3,d1
00001FFC 0641 0020                  		addi.w	#$20,d1		; increase green value
00002000 B242                       		cmp.w	d2,d1
00002002 6200                       		bhi.s	Pal_AddRed
00002004 30C1                       		move.w	d1,(a0)+	; update pallet
00002006 4E75                       		rts	
00002008                            ; ===========================================================================
00002008                            
00002008                            Pal_AddRed:				; XREF: Pal_AddGreen
00002008 5458                       		addq.w	#2,(a0)+	; increase red value
0000200A 4E75                       		rts	
0000200C                            ; ===========================================================================
0000200C                            
0000200C                            loc_1E4E:				; XREF: Pal_AddColor
0000200C 5448                       		addq.w	#2,a0
0000200E 4E75                       		rts	
00002010                            ; End of function Pal_AddColor
00002010                            
00002010                            
00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            
00002010                            
00002010                            Pal_FadeFrom:
00002010 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002016 383C 0015                  		move.w	#$15,d4
0000201A                            loc_1E5C:
0000201A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002020 6100 0000                  		bsr.w	DelayProgram
00002024 6100                       		bsr.s	Pal_FadeOut
00002026 6100 F7B6                  		bsr.w	RunPLC_RAM
0000202A 51CC FFEE                  		dbf	d4,loc_1E5C
0000202E 4E75                       		rts	
00002030                            ; End of function Pal_FadeFrom
00002030                            
00002030                            ; ---------------------------------------------------------------------------
00002030                            ; Pallet fade-out subroutine
00002030                            ; ---------------------------------------------------------------------------
00002030                            
00002030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002030                            
00002030                            
00002030                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002030 7000                       		moveq	#0,d0
00002032 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002036 1038 F626                  		move.b	($FFFFF626).w,d0
0000203A D0C0                       		adda.w	d0,a0
0000203C 1038 F627                  		move.b	($FFFFF627).w,d0
00002040                            
00002040                            loc_1E82:
00002040 6100                       		bsr.s	Pal_DecColor
00002042 51C8 FFFC                  		dbf	d0,loc_1E82
00002046                            
00002046 7000                       		moveq	#0,d0
00002048 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000204C 1038 F626                  		move.b	($FFFFF626).w,d0
00002050 D0C0                       		adda.w	d0,a0
00002052 1038 F627                  		move.b	($FFFFF627).w,d0
00002056                            
00002056                            loc_1E98:
00002056 6100                       		bsr.s	Pal_DecColor
00002058 51C8 FFFC                  		dbf	d0,loc_1E98
0000205C 4E75                       		rts	
0000205E                            ; End of function Pal_FadeOut
0000205E                            
0000205E                            
0000205E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205E                            
0000205E                            
0000205E                            Pal_DecColor:				; XREF: Pal_FadeOut
0000205E 3410                       		move.w	(a0),d2
00002060 6700                       		beq.s	loc_1ECC
00002062 3202                       		move.w	d2,d1
00002064 0241 000E                  		andi.w	#$E,d1
00002068 6700                       		beq.s	Pal_DecGreen
0000206A 5558                       		subq.w	#2,(a0)+	; decrease red value
0000206C 4E75                       		rts	
0000206E                            ; ===========================================================================
0000206E                            
0000206E                            Pal_DecGreen:				; XREF: Pal_DecColor
0000206E 3202                       		move.w	d2,d1
00002070 0241 00E0                  		andi.w	#$E0,d1
00002074 6700                       		beq.s	Pal_DecBlue
00002076 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
0000207A 4E75                       		rts	
0000207C                            ; ===========================================================================
0000207C                            
0000207C                            Pal_DecBlue:				; XREF: Pal_DecGreen
0000207C 3202                       		move.w	d2,d1
0000207E 0241 0E00                  		andi.w	#$E00,d1
00002082 6700                       		beq.s	loc_1ECC
00002084 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00002088 4E75                       		rts	
0000208A                            ; ===========================================================================
0000208A                            
0000208A                            loc_1ECC:				; XREF: Pal_DecColor
0000208A 5448                       		addq.w	#2,a0
0000208C 4E75                       		rts	
0000208E                            ; End of function Pal_DecColor
0000208E                            
0000208E                            ; ---------------------------------------------------------------------------
0000208E                            ; Subroutine to	fill the pallet	with white (special stage)
0000208E                            ; ---------------------------------------------------------------------------
0000208E                            
0000208E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208E                            
0000208E                            
0000208E                            Pal_MakeWhite:				; XREF: SpecialStage
0000208E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002094 7000                       		moveq	#0,d0
00002096 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000209A 1038 F626                  		move.b	($FFFFF626).w,d0
0000209E D0C0                       		adda.w	d0,a0
000020A0 323C 0EEE                  		move.w	#$EEE,d1
000020A4 1038 F627                  		move.b	($FFFFF627).w,d0
000020A8                            
000020A8                            PalWhite_Loop:
000020A8 30C1                       		move.w	d1,(a0)+
000020AA 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020AE 383C 0015                  		move.w	#$15,d4
000020B2                            
000020B2                            loc_1EF4:
000020B2 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020B8 6100 0000                  		bsr.w	DelayProgram
000020BC 6100                       		bsr.s	Pal_WhiteToBlack
000020BE 6100 F71E                  		bsr.w	RunPLC_RAM
000020C2 51CC FFEE                  		dbf	d4,loc_1EF4
000020C6 4E75                       		rts	
000020C8                            ; End of function Pal_MakeWhite
000020C8                            
000020C8                            
000020C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C8                            
000020C8                            
000020C8                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020C8 7000                       		moveq	#0,d0
000020CA 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020CE 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020D2 1038 F626                  		move.b	($FFFFF626).w,d0
000020D6 D0C0                       		adda.w	d0,a0
000020D8 D2C0                       		adda.w	d0,a1
000020DA 1038 F627                  		move.b	($FFFFF627).w,d0
000020DE                            
000020DE                            loc_1F20:
000020DE 6100                       		bsr.s	Pal_DecColor2
000020E0 51C8 FFFC                  		dbf	d0,loc_1F20
000020E4                            
000020E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000020EA 6600                       		bne.s	locret_1F4A
000020EC 7000                       		moveq	#0,d0
000020EE 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020F2 43F8 FA00                  		lea	($FFFFFA00).w,a1
000020F6 1038 F626                  		move.b	($FFFFF626).w,d0
000020FA D0C0                       		adda.w	d0,a0
000020FC D2C0                       		adda.w	d0,a1
000020FE 1038 F627                  		move.b	($FFFFF627).w,d0
00002102                            
00002102                            loc_1F44:
00002102 6100                       		bsr.s	Pal_DecColor2
00002104 51C8 FFFC                  		dbf	d0,loc_1F44
00002108                            
00002108                            locret_1F4A:
00002108 4E75                       		rts	
0000210A                            ; End of function Pal_WhiteToBlack
0000210A                            
0000210A                            
0000210A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000210A                            
0000210A                            
0000210A                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000210A 3419                       		move.w	(a1)+,d2
0000210C 3610                       		move.w	(a0),d3
0000210E B642                       		cmp.w	d2,d3
00002110 6700                       		beq.s	loc_1F78
00002112 3203                       		move.w	d3,d1
00002114 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002118 6500                       		bcs.s	loc_1F64
0000211A B242                       		cmp.w	d2,d1
0000211C 6500                       		bcs.s	loc_1F64
0000211E 30C1                       		move.w	d1,(a0)+
00002120 4E75                       		rts	
00002122                            ; ===========================================================================
00002122                            
00002122                            loc_1F64:				; XREF: Pal_DecColor2
00002122 3203                       		move.w	d3,d1
00002124 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002128 6500                       		bcs.s	loc_1F74
0000212A B242                       		cmp.w	d2,d1
0000212C 6500                       		bcs.s	loc_1F74
0000212E 30C1                       		move.w	d1,(a0)+
00002130 4E75                       		rts	
00002132                            ; ===========================================================================
00002132                            
00002132                            loc_1F74:				; XREF: loc_1F64
00002132 5558                       		subq.w	#2,(a0)+	; decrease red value
00002134 4E75                       		rts	
00002136                            ; ===========================================================================
00002136                            
00002136                            loc_1F78:				; XREF: Pal_DecColor2
00002136 5448                       		addq.w	#2,a0
00002138 4E75                       		rts	
0000213A                            ; End of function Pal_DecColor2
0000213A                            
0000213A                            ; ---------------------------------------------------------------------------
0000213A                            ; Subroutine to	make a white flash when	you enter a special stage
0000213A                            ; ---------------------------------------------------------------------------
0000213A                            
0000213A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000213A                            
0000213A                            
0000213A                            Pal_MakeFlash:				; XREF: SpecialStage
0000213A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002140 383C 0015                  		move.w	#$15,d4
00002144                            
00002144                            loc_1F86:
00002144 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000214A 6100 0000                  		bsr.w	DelayProgram
0000214E 6100                       		bsr.s	Pal_ToWhite
00002150 6100 F68C                  		bsr.w	RunPLC_RAM
00002154 51CC FFEE                  		dbf	d4,loc_1F86
00002158 4E75                       		rts	
0000215A                            ; End of function Pal_MakeFlash
0000215A                            
0000215A                            
0000215A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000215A                            
0000215A                            
0000215A                            Pal_ToWhite:				; XREF: Pal_MakeFlash
0000215A 7000                       		moveq	#0,d0
0000215C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002160 1038 F626                  		move.b	($FFFFF626).w,d0
00002164 D0C0                       		adda.w	d0,a0
00002166 1038 F627                  		move.b	($FFFFF627).w,d0
0000216A                            
0000216A                            loc_1FAC:
0000216A 6100                       		bsr.s	Pal_AddColor2
0000216C 51C8 FFFC                  		dbf	d0,loc_1FAC
00002170 7000                       		moveq	#0,d0
00002172 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002176 1038 F626                  		move.b	($FFFFF626).w,d0
0000217A D0C0                       		adda.w	d0,a0
0000217C 1038 F627                  		move.b	($FFFFF627).w,d0
00002180                            
00002180                            loc_1FC2:
00002180 6100                       		bsr.s	Pal_AddColor2
00002182 51C8 FFFC                  		dbf	d0,loc_1FC2
00002186 4E75                       		rts	
00002188                            ; End of function Pal_ToWhite
00002188                            
00002188                            
00002188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002188                            
00002188                            
00002188                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002188 3410                       		move.w	(a0),d2
0000218A 0C42 0EEE                  		cmpi.w	#$EEE,d2
0000218E 6700                       		beq.s	loc_2006
00002190 3202                       		move.w	d2,d1
00002192 0241 000E                  		andi.w	#$E,d1
00002196 0C41 000E                  		cmpi.w	#$E,d1
0000219A 6700                       		beq.s	loc_1FE2
0000219C 5458                       		addq.w	#2,(a0)+	; increase red value
0000219E 4E75                       		rts	
000021A0                            ; ===========================================================================
000021A0                            
000021A0                            loc_1FE2:				; XREF: Pal_AddColor2
000021A0 3202                       		move.w	d2,d1
000021A2 0241 00E0                  		andi.w	#$E0,d1
000021A6 0C41 00E0                  		cmpi.w	#$E0,d1
000021AA 6700                       		beq.s	loc_1FF4
000021AC 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021B0 4E75                       		rts	
000021B2                            ; ===========================================================================
000021B2                            
000021B2                            loc_1FF4:				; XREF: loc_1FE2
000021B2 3202                       		move.w	d2,d1
000021B4 0241 0E00                  		andi.w	#$E00,d1
000021B8 0C41 0E00                  		cmpi.w	#$E00,d1
000021BC 6700                       		beq.s	loc_2006
000021BE 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021C2 4E75                       		rts	
000021C4                            ; ===========================================================================
000021C4                            
000021C4                            loc_2006:				; XREF: Pal_AddColor2
000021C4 5448                       		addq.w	#2,a0
000021C6 4E75                       		rts	
000021C8                            ; End of function Pal_AddColor2
000021C8                            
000021C8                            ; ---------------------------------------------------------------------------
000021C8                            ; Pallet cycling routine - Sega	logo
000021C8                            ; ---------------------------------------------------------------------------
000021C8                            
000021C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021C8                            
000021C8                            
000021C8                            PalCycle_Sega:				; XREF: SegaScreen
000021C8 4A38 F635                  		tst.b	($FFFFF635).w
000021CC 6600                       		bne.s	loc_206A
000021CE 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021D2 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000021D8 7205                       		moveq	#5,d1
000021DA 3038 F632                  		move.w	($FFFFF632).w,d0
000021DE                            
000021DE                            loc_2020:
000021DE 6A00                       		bpl.s	loc_202A
000021E0 5448                       		addq.w	#2,a0
000021E2 5341                       		subq.w	#1,d1
000021E4 5440                       		addq.w	#2,d0
000021E6 60F6                       		bra.s	loc_2020
000021E8                            ; ===========================================================================
000021E8                            
000021E8                            loc_202A:				; XREF: PalCycle_Sega
000021E8 3400                       		move.w	d0,d2
000021EA 0242 001E                  		andi.w	#$1E,d2
000021EE 6600                       		bne.s	loc_2034
000021F0 5440                       		addq.w	#2,d0
000021F2                            
000021F2                            loc_2034:
000021F2 0C40 0060                  		cmpi.w	#$60,d0
000021F6 6400                       		bcc.s	loc_203E
000021F8 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000021FC                            
000021FC                            loc_203E:
000021FC 5440                       		addq.w	#2,d0
000021FE 51C9 FFE8                  		dbf	d1,loc_202A
00002202 3038 F632                  		move.w	($FFFFF632).w,d0
00002206 5440                       		addq.w	#2,d0
00002208 3400                       		move.w	d0,d2
0000220A 0242 001E                  		andi.w	#$1E,d2
0000220E 6600                       		bne.s	loc_2054
00002210 5440                       		addq.w	#2,d0
00002212                            
00002212                            loc_2054:
00002212 0C40 0064                  		cmpi.w	#$64,d0
00002216 6D00                       		blt.s	loc_2062
00002218 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000221E 70F4                       		moveq	#-$C,d0
00002220                            
00002220                            loc_2062:
00002220 31C0 F632                  		move.w	d0,($FFFFF632).w
00002224 7001                       		moveq	#1,d0
00002226 4E75                       		rts	
00002228                            ; ===========================================================================
00002228                            
00002228                            loc_206A:				; XREF: loc_202A
00002228 5338 F634                  		subq.b	#1,($FFFFF634).w
0000222C 6A00                       		bpl.s	loc_20BC
0000222E 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002234 3038 F632                  		move.w	($FFFFF632).w,d0
00002238 0640 000C                  		addi.w	#$C,d0
0000223C 0C40 0030                  		cmpi.w	#$30,d0
00002240 6500                       		bcs.s	loc_2088
00002242 7000                       		moveq	#0,d0
00002244 4E75                       		rts	
00002246                            ; ===========================================================================
00002246                            
00002246                            loc_2088:				; XREF: loc_206A
00002246 31C0 F632                  		move.w	d0,($FFFFF632).w
0000224A 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002250 41F0 0000                  		lea	(a0,d0.w),a0
00002254 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002258 22D8                       		move.l	(a0)+,(a1)+
0000225A 22D8                       		move.l	(a0)+,(a1)+
0000225C 3298                       		move.w	(a0)+,(a1)
0000225E 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002262 7000                       		moveq	#0,d0
00002264 722C                       		moveq	#$2C,d1
00002266                            
00002266                            loc_20A8:
00002266 3400                       		move.w	d0,d2
00002268 0242 001E                  		andi.w	#$1E,d2
0000226C 6600                       		bne.s	loc_20B2
0000226E 5440                       		addq.w	#2,d0
00002270                            
00002270                            loc_20B2:
00002270 3390 0000                  		move.w	(a0),(a1,d0.w)
00002274 5440                       		addq.w	#2,d0
00002276 51C9 FFEE                  		dbf	d1,loc_20A8
0000227A                            
0000227A                            loc_20BC:
0000227A 7001                       		moveq	#1,d0
0000227C 4E75                       		rts	
0000227E                            ; End of function PalCycle_Sega
0000227E                            
0000227E                            ; ===========================================================================
0000227E                            
0000227E                            Pal_Sega1:	incbin	pallet\sega1.bin
0000228A                            Pal_Sega2:	incbin	pallet\sega2.bin
000022BA                            
000022BA                            ; ---------------------------------------------------------------------------
000022BA                            ; Subroutines to load pallets
000022BA                            ; ---------------------------------------------------------------------------
000022BA                            
000022BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022BA                            
000022BA                            
000022BA                            PalLoad1:
000022BA 43F9 0000 0000             		lea	(PalPointers).l,a1
000022C0 E748                       		lsl.w	#3,d0
000022C2 D2C0                       		adda.w	d0,a1
000022C4 2459                       		movea.l	(a1)+,a2
000022C6 3659                       		movea.w	(a1)+,a3
000022C8 D6FC 0080                  		adda.w	#$80,a3
000022CC 3E19                       		move.w	(a1)+,d7
000022CE                            
000022CE                            loc_2110:
000022CE 26DA                       		move.l	(a2)+,(a3)+
000022D0 51CF FFFC                  		dbf	d7,loc_2110
000022D4 4E75                       		rts	
000022D6                            ; End of function PalLoad1
000022D6                            
000022D6                            
000022D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022D6                            
000022D6                            
000022D6                            PalLoad2:
000022D6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022DC E748                       		lsl.w	#3,d0
000022DE D2C0                       		adda.w	d0,a1
000022E0 2459                       		movea.l	(a1)+,a2
000022E2 3659                       		movea.w	(a1)+,a3
000022E4 3E19                       		move.w	(a1)+,d7
000022E6                            
000022E6                            loc_2128:
000022E6 26DA                       		move.l	(a2)+,(a3)+
000022E8 51CF FFFC                  		dbf	d7,loc_2128
000022EC 4E75                       		rts	
000022EE                            ; End of function PalLoad2
000022EE                            
000022EE                            ; ---------------------------------------------------------------------------
000022EE                            ; Underwater pallet loading subroutine
000022EE                            ; ---------------------------------------------------------------------------
000022EE                            
000022EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022EE                            
000022EE                            
000022EE                            PalLoad3_Water:
000022EE 43F9 0000 0000             		lea	(PalPointers).l,a1
000022F4 E748                       		lsl.w	#3,d0
000022F6 D2C0                       		adda.w	d0,a1
000022F8 2459                       		movea.l	(a1)+,a2
000022FA 3659                       		movea.w	(a1)+,a3
000022FC 96FC 0080                  		suba.w	#$80,a3
00002300 3E19                       		move.w	(a1)+,d7
00002302                            
00002302                            loc_2144:
00002302 26DA                       		move.l	(a2)+,(a3)+
00002304 51CF FFFC                  		dbf	d7,loc_2144
00002308 4E75                       		rts	
0000230A                            ; End of function PalLoad3_Water
0000230A                            
0000230A                            
0000230A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000230A                            
0000230A                            
0000230A                            PalLoad4_Water:
0000230A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002310 E748                       		lsl.w	#3,d0
00002312 D2C0                       		adda.w	d0,a1
00002314 2459                       		movea.l	(a1)+,a2
00002316 3659                       		movea.w	(a1)+,a3
00002318 96FC 0100                  		suba.w	#$100,a3
0000231C 3E19                       		move.w	(a1)+,d7
0000231E                            
0000231E                            loc_2160:
0000231E 26DA                       		move.l	(a2)+,(a3)+
00002320 51CF FFFC                  		dbf	d7,loc_2160
00002324 4E75                       		rts	
00002326                            ; End of function PalLoad4_Water
00002326                            
00002326                            ; ===========================================================================
00002326                            ; ---------------------------------------------------------------------------
00002326                            ; Pallet pointers
00002326                            ; ---------------------------------------------------------------------------
00002326                            PalPointers:
00002326                            	include "_inc\Pallet pointers.asm"
00002326                            ; ---------------------------------------------------------------------------
00002326                            ; Pallet pointers
00002326                            ; ---------------------------------------------------------------------------
00002326 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000232A FB00                       	dc.w $FB00		; RAM address
0000232C 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000232E 0000 0000                  	dc.l Pal_Title
00002332 FB00                       	dc.w $FB00
00002334 001F                       	dc.w $1F
00002336 0000 0000                  	dc.l Pal_LevelSel
0000233A FB00                       	dc.w $FB00
0000233C 001F                       	dc.w $1F
0000233E 0000 0000                  	dc.l Pal_Sonic
00002342 FB00                       	dc.w $FB00
00002344 0007                       	dc.w 7
00002346 0000 0000                  	dc.l Pal_GHZ
0000234A FB20                       	dc.w $FB20
0000234C 0017                       	dc.w $17
0000234E 0000 0000                  	dc.l Pal_LZ
00002352 FB20                       	dc.w $FB20
00002354 0017                       	dc.w $17
00002356 0000 0000                  	dc.l Pal_MZ
0000235A FB20                       	dc.w $FB20
0000235C 0017                       	dc.w $17
0000235E 0000 0000                  	dc.l Pal_SLZ
00002362 FB20                       	dc.w $FB20
00002364 0017                       	dc.w $17
00002366 0000 0000                  	dc.l Pal_SYZ
0000236A FB20                       	dc.w $FB20
0000236C 0017                       	dc.w $17
0000236E 0000 0000                  	dc.l Pal_SBZ1
00002372 FB20                       	dc.w $FB20
00002374 0017                       	dc.w $17
00002376 0000 0000                  	dc.l Pal_Special
0000237A FB00                       	dc.w $FB00
0000237C 001F                       	dc.w $1F
0000237E 0000 0000                  	dc.l Pal_LZWater
00002382 FB00                       	dc.w $FB00
00002384 001F                       	dc.w $1F
00002386 0000 0000                  	dc.l Pal_SBZ3
0000238A FB20                       	dc.w $FB20
0000238C 0017                       	dc.w $17
0000238E 0000 0000                  	dc.l Pal_SBZ3Water
00002392 FB00                       	dc.w $FB00
00002394 001F                       	dc.w $1F
00002396 0000 0000                  	dc.l Pal_SBZ2
0000239A FB20                       	dc.w $FB20
0000239C 0017                       	dc.w $17
0000239E 0000 0000                  	dc.l Pal_LZSonWater
000023A2 FB00                       	dc.w $FB00
000023A4 0007                       	dc.w 7
000023A6 0000 0000                  	dc.l Pal_SBZ3SonWat
000023AA FB00                       	dc.w $FB00
000023AC 0007                       	dc.w 7
000023AE 0000 0000                  	dc.l Pal_SpeResult
000023B2 FB00                       	dc.w $FB00
000023B4 001F                       	dc.w $1F
000023B6 0000 0000                  	dc.l Pal_SpeContinue
000023BA FB00                       	dc.w $FB00
000023BC 000F                       	dc.w $F
000023BE 0000 0000                  	dc.l Pal_Ending
000023C2 FB00                       	dc.w $FB00
000023C4 001F                       	dc.w $1F
000023C6 0000 0000                  	dc.l Pal_Idiot
000023CA FB20                       	dc.w $FB20
000023CC 0007                       	dc.w 7
000023CE 0000 0000                  	dc.l Pal_BHZ
000023D2 FB20                       	dc.w $FB20
000023D4 0017                       	dc.w $17
000023D6 0000 0000                  	dc.l Pal_Gronic
000023DA FB00                       	dc.w $FB00
000023DC 0007                       	dc.w 7
000023DE 0000 0000                  	dc.l Pal_LZGroWater
000023E2 FB00                       	dc.w $FB00
000023E4 0007                       	dc.w 7
000023E6 0000 0000                  	dc.l Pal_SBZ3GroWat
000023EA FB00                       	dc.w $FB00
000023EC 0007                       	dc.w 7
000023EE 0000 0000                  	dc.l Pal_Anakama
000023F2 FB00                       	dc.w $FB00
000023F4 0007                       	dc.w 7
000023F4 0007                       	dc.w 7
000023F6                            
000023F6                            ; ---------------------------------------------------------------------------
000023F6                            ; Pallet data
000023F6                            ; ---------------------------------------------------------------------------
000023F6                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002476                            Pal_Title:	incbin	pallet\title.bin
000024F6                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002576                            Pal_Sonic:	incbin	pallet\sonic.bin
00002596                            Pal_GHZ:	incbin	pallet\ghz.bin
000025F6                            Pal_LZ:		incbin	pallet\lz.bin
00002656                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026D6                            Pal_MZ:		incbin	pallet\mz.bin
00002736                            Pal_SLZ:	incbin	pallet\slz.bin
00002796                            Pal_SYZ:	incbin	pallet\syz.bin
000027F6                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002856                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028B6                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002936                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00002996                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A16                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A36                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A56                            Pal_BHZ:	incbin	pallet\bhz.bin
00002AB6                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B36                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B76                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BF6                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C16                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C36                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C56                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C76                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002CF6                            
00002CF6                            ; ---------------------------------------------------------------------------
00002CF6                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002CF6                            ; ---------------------------------------------------------------------------
00002CF6                            
00002CF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CF6                            
00002CF6                            
00002CF6                            DelayProgram:				; XREF: PauseGame
00002CF6 46FC 2300                  		move	#$2300,sr
00002CFA                            
00002CFA                            loc_29AC:
00002CFA 4A38 F62A                  		tst.b	($FFFFF62A).w
00002CFE 66FA                       		bne.s	loc_29AC
00002D00 4E75                       		rts	
00002D02                            ; End of function DelayProgram
00002D02                            
00002D02                            ; ---------------------------------------------------------------------------
00002D02                            ; Subroutine to	generate a pseudo-random number	in d0
00002D02                            ; ---------------------------------------------------------------------------
00002D02                            
00002D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D02                            
00002D02                            
00002D02                            RandomNumber:
00002D02 2238 F636                  		move.l	($FFFFF636).w,d1
00002D06 6600                       		bne.s	loc_29C0
00002D08 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D0E                            
00002D0E                            loc_29C0:
00002D0E 2001                       		move.l	d1,d0
00002D10 E581                       		asl.l	#2,d1
00002D12 D280                       		add.l	d0,d1
00002D14 E781                       		asl.l	#3,d1
00002D16 D280                       		add.l	d0,d1
00002D18 3001                       		move.w	d1,d0
00002D1A 4841                       		swap	d1
00002D1C D041                       		add.w	d1,d0
00002D1E 3200                       		move.w	d0,d1
00002D20 4841                       		swap	d1
00002D22 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D26 4E75                       		rts	
00002D28                            ; End of function RandomNumber
00002D28                            
00002D28                            
00002D28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D28                            
00002D28                            
00002D28                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D28 0240 00FF                  		andi.w	#$FF,d0
00002D2C D040                       		add.w	d0,d0
00002D2E 0640 0080                  		addi.w	#$80,d0
00002D32 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D36 0440 0080                  		subi.w	#$80,d0
00002D3A 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D3E 4E75                       		rts	
00002D40                            ; End of function CalcSine
00002D40                            
00002D40                            ; ===========================================================================
00002D40                            
00002D40                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002FC0                            
00002FC0                            ; ===========================================================================
00002FC0 48E7 6000                  		movem.l	d1-d2,-(sp)
00002FC4 3200                       		move.w	d0,d1
00002FC6 4841                       		swap	d1
00002FC8 7000                       		moveq	#0,d0
00002FCA 3200                       		move.w	d0,d1
00002FCC 7407                       		moveq	#7,d2
00002FCE                            
00002FCE                            loc_2C80:
00002FCE E599                       		rol.l	#2,d1
00002FD0 D040                       		add.w	d0,d0
00002FD2 5240                       		addq.w	#1,d0
00002FD4 9240                       		sub.w	d0,d1
00002FD6 6400                       		bcc.s	loc_2C9A
00002FD8 D240                       		add.w	d0,d1
00002FDA 5340                       		subq.w	#1,d0
00002FDC 51CA FFF0                  		dbf	d2,loc_2C80
00002FE0 E248                       		lsr.w	#1,d0
00002FE2 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FE6 4E75                       		rts	
00002FE8                            ; ===========================================================================
00002FE8                            
00002FE8                            loc_2C9A:
00002FE8 5240                       		addq.w	#1,d0
00002FEA 51CA FFE2                  		dbf	d2,loc_2C80
00002FEE E248                       		lsr.w	#1,d0
00002FF0 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FF4 4E75                       		rts	
00002FF6                            
00002FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002FF6                            
00002FF6                            
00002FF6                            CalcAngle:
00002FF6 48E7 1800                  		movem.l	d3-d4,-(sp)
00002FFA 7600                       		moveq	#0,d3
00002FFC 7800                       		moveq	#0,d4
00002FFE 3601                       		move.w	d1,d3
00003000 3802                       		move.w	d2,d4
00003002 8843                       		or.w	d3,d4
00003004 6700                       		beq.s	loc_2D04
00003006 3802                       		move.w	d2,d4
00003008 4A43                       		tst.w	d3
0000300A 6A00 0000                  		bpl.w	loc_2CC2
0000300E 4443                       		neg.w	d3
00003010                            
00003010                            loc_2CC2:
00003010 4A44                       		tst.w	d4
00003012 6A00 0000                  		bpl.w	loc_2CCA
00003016 4444                       		neg.w	d4
00003018                            
00003018                            loc_2CCA:
00003018 B843                       		cmp.w	d3,d4
0000301A 6400 0000                  		bcc.w	loc_2CDC
0000301E E18C                       		lsl.l	#8,d4
00003020 88C3                       		divu.w	d3,d4
00003022 7000                       		moveq	#0,d0
00003024 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003028 6000                       		bra.s	loc_2CE6
0000302A                            ; ===========================================================================
0000302A                            
0000302A                            loc_2CDC:				; XREF: CalcAngle
0000302A E18B                       		lsl.l	#8,d3
0000302C 86C4                       		divu.w	d4,d3
0000302E 7040                       		moveq	#$40,d0
00003030 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003034                            
00003034                            loc_2CE6:
00003034 4A41                       		tst.w	d1
00003036 6A00 0000                  		bpl.w	loc_2CF2
0000303A 4440                       		neg.w	d0
0000303C 0640 0080                  		addi.w	#$80,d0
00003040                            
00003040                            loc_2CF2:
00003040 4A42                       		tst.w	d2
00003042 6A00 0000                  		bpl.w	loc_2CFE
00003046 4440                       		neg.w	d0
00003048 0640 0100                  		addi.w	#$100,d0
0000304C                            
0000304C                            loc_2CFE:
0000304C 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003050 4E75                       		rts	
00003052                            ; ===========================================================================
00003052                            
00003052                            loc_2D04:				; XREF: CalcAngle
00003052 303C 0040                  		move.w	#$40,d0
00003056 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000305A 4E75                       		rts	
0000305C                            ; End of function CalcAngle
0000305C                            
0000305C                            ; ===========================================================================
0000305C                            
0000305C                            Angle_Data:	incbin	misc\angles.bin
0000315E                            
0000315E                            ; ===========================================================================
0000315E                            
0000315E                            ; ---------------------------------------------------------------------------
0000315E                            ; Sega screen
0000315E                            ; ---------------------------------------------------------------------------
0000315E                            
0000315E                            SegaScreen:				; XREF: GameModeArray
0000315E 103C 00E4                  		move.b	#$E4,d0
00003162 6100 E42A                  		bsr.w	PlaySound_Special ; stop music
00003166 6100 E668                  		bsr.w	ClearPLC
0000316A 6100 EEA4                  		bsr.w	Pal_FadeFrom
0000316E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003174 3CBC 8004                  		move.w	#$8004,(a6)
00003178 3CBC 8230                  		move.w	#$8230,(a6)
0000317C 3CBC 8407                  		move.w	#$8407,(a6)
00003180 3CBC 8700                  		move.w	#$8700,(a6)
00003184 3CBC 8B00                  		move.w	#$8B00,(a6)
00003188 4238 F64E                  		clr.b	($FFFFF64E).w
0000318C 46FC 2700                  		move	#$2700,sr
00003190 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003194 0200 00BF                  		andi.b	#$BF,d0
00003198 33C0 00C0 0004             		move.w	d0,($C00004).l
0000319E 6100 E316                  		bsr.w	ClearScreen
000031A2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031AC 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000031B2 6100 E47E                  		bsr.w	NemDec
000031B6 43F9 00FF 0000             		lea	($FF0000).l,a1
000031BC 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000031C2 303C 0000                  		move.w	#0,d0
000031C6 6100 E748                  		bsr.w	EniDec
000031CA 43F9 00FF 0000             		lea	($FF0000).l,a1
000031D0 203C 6510 0003             		move.l	#$65100003,d0
000031D6 7217                       		moveq	#$17,d1
000031D8 7407                       		moveq	#7,d2
000031DA 6100 E436                  		bsr.w	ShowVDPGraphics
000031DE 43F9 00FF 0180             		lea	($FF0180).l,a1
000031E4 203C 4000 0003             		move.l	#$40000003,d0
000031EA 7227                       		moveq	#$27,d1
000031EC 741B                       		moveq	#$1B,d2
000031EE 6100 E422                  		bsr.w	ShowVDPGraphics
000031F2 7000                       		moveq	#0,d0
000031F4 6100 F0E0                  		bsr.w	PalLoad2	; load Sega logo pallet
000031F8 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000031FE 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003204 31FC 0000 F662             		move.w	#0,($FFFFF662).w
0000320A 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003210 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003214 0000 0040                  		ori.b	#$40,d0
00003218 33C0 00C0 0004             		move.w	d0,($C00004).l
0000321E                            
0000321E                            Sega_WaitPallet:
0000321E 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003224 6100 FAD0                  		bsr.w	DelayProgram
00003228 6100 EF9E                  		bsr.w	PalCycle_Sega
0000322C 66F0                       		bne.s	Sega_WaitPallet
0000322E                            
0000322E 103C 00E1                  		move.b	#$E1,d0
00003232 6100 E35A                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003236 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000323C 6100 FAB8                  		bsr.w	DelayProgram
00003240 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003246                            
00003246                            Sega_WaitEnd:
00003246 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000324C 6100 FAA8                  		bsr.w	DelayProgram
00003250 4A78 F614                  		tst.w	($FFFFF614).w
00003254 6700                       		beq.s	Sega_GotoTitle
00003256 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000325C 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000325E                            
0000325E                            Sega_GotoTitle:
0000325E 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003264 4E75                       		rts	
00003266                            ; ===========================================================================
00003266                            
00003266                            ; ---------------------------------------------------------------------------
00003266                            ; Title	screen
00003266                            ; ---------------------------------------------------------------------------
00003266                            
00003266                            TitleScreen:				; XREF: GameModeArray
00003266 103C 00E4                  		move.b	#$E4,d0
0000326A 6100 E322                  		bsr.w	PlaySound_Special ; stop music
0000326E 6100 EDA0                  		bsr.w	Pal_FadeFrom
00003272 6100 E55C                  		bsr.w	ClearPLC
00003276 46FC 2700                  		move	#$2700,sr
0000327A 6100 E2C8                  		bsr.w	SoundDriverLoad
0000327E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003284 3CBC 8004                  		move.w	#$8004,(a6)
00003288 3CBC 8230                  		move.w	#$8230,(a6)
0000328C 3CBC 8407                  		move.w	#$8407,(a6)
00003290 3CBC 9001                  		move.w	#$9001,(a6)
00003294 3CBC 9200                  		move.w	#$9200,(a6)
00003298 3CBC 8B03                  		move.w	#$8B03,(a6)
0000329C 3CBC 8720                  		move.w	#$8720,(a6)
000032A0 4238 F64E                  		clr.b	($FFFFF64E).w
000032A4 6100 E210                  		bsr.w	ClearScreen
000032A8 43F8 D000                  		lea	($FFFFD000).w,a1
000032AC 7000                       		moveq	#0,d0
000032AE 323C 07FF                  		move.w	#$7FF,d1
000032B2                            
000032B2                            Title_ClrObjRam:
000032B2 22C0                       		move.l	d0,(a1)+
000032B4 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000032B8                            
000032B8                            ; gomer
000032B8 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032C2 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
000032C8 6100 E368                  		bsr.w	NemDec
000032CC 7003                       		moveq	#3,d0		; load Sonic's pallet
000032CE 6100 EFEA                  		bsr.w	PalLoad1
000032D2                            
000032D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000032D8 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000032DE 303C 0000                  		move.w	#0,d0
000032E2 6100 E62C                  		bsr.w	EniDec
000032E6                            ; help how the fuck can i do this IT SHOWS NOTHING
000032E6 6100 EC7E                  		bsr.w	Pal_FadeTo
000032EA 43F9 00FF 0000             		lea	($FF0000).l,a1
000032F0 203C 4000 0003             		move.l	#$40000003,d0
000032F6 7227                       		moveq	#$27,d1
000032F8 741B                       		moveq	#$1B,d2
000032FA 6100 E316                  		bsr.w	ShowVDPGraphics
000032FE                            
000032FE                            
000032FE 43F9 00FF 0000             		lea	($FF0000).l,a1
00003304 203C 6000 0003             		move.l	#$60000003,d0
0000330A 7227                       		moveq	#$27,d1
0000330C 741B                       		moveq	#$1B,d2
0000330E                            
0000330E 6100 ED00                  		bsr.w	Pal_FadeFrom
00003312                            
00003312                            
00003312 6100 E1A2                  		bsr.w	ClearScreen
00003316 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003320 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003326 6100 E30A                  		bsr.w	NemDec
0000332A 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003334 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000333A 6100 E2F6                  		bsr.w	NemDec
0000333E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003344 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000334A 303C 0000                  		move.w	#0,d0
0000334E 6100 E5C0                  		bsr.w	EniDec
00003352 43F9 00FF 0000             		lea	($FF0000).l,a1
00003358 203C 4000 0003             		move.l	#$40000003,d0
0000335E 7227                       		moveq	#$27,d1
00003360 741B                       		moveq	#$1B,d2
00003362 6100 E2AE                  		bsr.w	ShowVDPGraphics
00003366 6100 ECA8                  		bsr.w	Pal_FadeFrom
0000336A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000336E 7000                       		moveq	#0,d0
00003370 323C 001F                  		move.w	#$1F,d1
00003374                            
00003374                            
00003374                            Title_ClrPallet:
00003374 22C0                       		move.l	d0,(a1)+
00003376 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
0000337A                            
0000337A 7003                       		moveq	#3,d0		; load Sonic's pallet
0000337C 6100 EF3C                  		bsr.w	PalLoad1
00003380 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003386 4EB9 0000 0000             		jsr	ObjectsLoad
0000338C 4EB9 0000 0000             		jsr	BuildSprites
00003392 6100 EBD2                  		bsr.w	Pal_FadeTo
00003396 46FC 2700                  		move	#$2700,sr
0000339A 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000033A4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000033AA 6100 E286                  		bsr.w	NemDec
000033AE 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000033B8 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000033BE 6100 E272                  		bsr.w	NemDec
000033C2 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000033CC 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000033D2 6100 E25E                  		bsr.w	NemDec
000033D6 4DF9 00C0 0000             		lea	($C00000).l,a6
000033DC 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000033E4 4BF9 0000 05E2             		lea	(Art_Text).l,a5
000033EA 323C 0BA9                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000033EE                            
000033EE                            Title_LoadText:
000033EE 2C9D                       		move.l	(a5)+,(a6)
000033F0 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000033F4                            
000033F4 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000033FA 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003400 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003406 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000340C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003412 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003418 6100 0000                  		bsr.w	LevelSizeLoad
0000341C 6100 0000                  		bsr.w	DeformBgLayer
00003420                            
00003420 43F8 B000                  		lea	($FFFFB000).w,a1
00003424 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000342A 303C 0000                  		move.w	#0,d0
0000342E 6100 E4E0                  		bsr.w	EniDec
00003432 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003438 43F9 00FF 0000             		lea	($FF0000).l,a1
0000343E 6100 E64E                  		bsr.w	KosDec
00003442 6100 0000                  		bsr.w	LevelLayoutLoad
00003446                            
00003446 46FC 2700                  		move	#$2700,sr
0000344A 6100 E06A                  		bsr.w	ClearScreen
0000344E 4BF9 00C0 0004             		lea	($C00004).l,a5
00003454 4DF9 00C0 0000             		lea	($C00000).l,a6
0000345A 47F8 F708                  		lea	($FFFFF708).w,a3
0000345E 49F8 A440                  		lea	($FFFFA440).w,a4
00003462 343C 6000                  		move.w	#$6000,d2
00003466 6100 0000                  		bsr.w	LoadTilesFromStart2
0000346A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003470 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003476 303C 0000                  		move.w	#0,d0
0000347A 6100 E494                  		bsr.w	EniDec
0000347E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003484 203C 4206 0003             		move.l	#$42060003,d0
0000348A 7221                       		moveq	#$21,d1
0000348C 7415                       		moveq	#$15,d2
0000348E 6100 E182                  		bsr.w	ShowVDPGraphics
00003492 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000349C 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000034A2 6100 E18E                  		bsr.w	NemDec
000034A6 7001                       		moveq	#1,d0		; load title screen pallet
000034A8 6100 EE10                  		bsr.w	PalLoad1
000034AC 103C 008A                  		move.b	#$8A,d0		; play title screen music
000034B0 6100 E0DC                  		bsr.w	PlaySound_Special
000034B4 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000034BA 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000034C0 43F8 D080                  		lea	($FFFFD080).w,a1
000034C4 7000                       		moveq	#0,d0
000034C6 323C 000F                  		move.w	#$F,d1
000034CA                            
000034CA                            Title_ClrObjRam2:
000034CA 22C0                       		move.l	d0,(a1)+
000034CC 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000034D0                            
000034D0 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000034D6 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000034DC 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000034E2 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000034E8 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000034EE 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000034F4 4EB9 0000 0000             		jsr	ObjectsLoad
000034FA 6100 0000                  		bsr.w	DeformBgLayer
000034FE 4EB9 0000 0000             		jsr	BuildSprites
00003504 7000                       		moveq	#0,d0
00003506 6100 E29C                  		bsr.w	LoadPLC2
0000350A 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003510 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003516 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000351A 0000 0040                  		ori.b	#$40,d0
0000351E 33C0 00C0 0004             		move.w	d0,($C00004).l
00003524 6100 EA40                  		bsr.w	Pal_FadeTo
00003528                            
00003528                            loc_317C:
00003528 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000352E 6100 F7C6                  		bsr.w	DelayProgram
00003532 4EB9 0000 0000             		jsr	ObjectsLoad
00003538 6100 0000                  		bsr.w	DeformBgLayer
0000353C 4EB9 0000 0000             		jsr	BuildSprites
00003542 6100 E60C                  		bsr.w	PalCycle_Title
00003546 6100 E296                  		bsr.w	RunPLC_RAM
0000354A 3038 D008                  		move.w	($FFFFD008).w,d0
0000354E 5440                       		addq.w	#2,d0
00003550 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003554 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003558 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000355A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003560 4E75                       		rts	
00003562                            ; ===========================================================================
00003562                            
00003562                            Title_ChkRegion:
00003562 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003566 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003568 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000356E 6000                       		bra.s	Title_EnterCheat
00003570                            ; ===========================================================================
00003570                            
00003570                            Title_RegionJ:				; XREF: Title_ChkRegion
00003570 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003576                            
00003576                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003576 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
0000357A D0C0                       		adda.w	d0,a0
0000357C 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003580 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003584 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003586 6600                       		bne.s	loc_3210	; if not, branch
00003588 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
0000358C 4A00                       		tst.b	d0
0000358E 6600                       		bne.s	Title_CountC
00003590 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003594 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003598 E249                       		lsr.w	#1,d1
0000359A 0241 0003                  		andi.w	#3,d1
0000359E 6700                       		beq.s	Title_PlayRing
000035A0 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000035A4 6A00                       		bpl.s	Title_PlayRing
000035A6 7201                       		moveq	#1,d1
000035A8 1181 1001                  		move.b	d1,1(a0,d1.w)
000035AC                            
000035AC                            Title_PlayRing:
000035AC 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000035B2 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035B6 6100 DFD6                  		bsr.w	PlaySound_Special
000035BA 6000                       		bra.s	Title_CountC
000035BC                            ; ===========================================================================
000035BC                            
000035BC                            loc_3210:				; XREF: Title_EnterCheat
000035BC 4A00                       		tst.b	d0
000035BE 6700                       		beq.s	Title_CountC
000035C0 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000035C6 6700                       		beq.s	Title_CountC
000035C8 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000035CE                            
000035CE                            Title_CountC:
000035CE 1038 F605                  		move.b	($FFFFF605).w,d0
000035D2 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000035D6 6700                       		beq.s	loc_3230	; if not, branch
000035D8 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000035DC                            
000035DC                            loc_3230:
000035DC 4A78 F614                  		tst.w	($FFFFF614).w
000035E0 6700 0000                  		beq.w	Demo
000035E4                            		; (temporary until we have an actual options screen)
000035E4 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000035EA 6700                       		beq.s	@notc
000035EC                            
000035EC 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
000035F0 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
000035F6 6D00                       		blt.s	@notoverflow
000035F8 11FC 0000 FFE8             		move.b	#0,(v_character).w
000035FE                            	@notoverflow:
000035FE 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003602 6100 DF8A                  		bsr.w	PlaySound_Special
00003606                            	@notc:
00003606 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000360C 6700 FF1A                  		beq.w	loc_317C	; if not, branch
00003610                            
00003610                            Title_ChkLevSel:
00003610 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003616 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000361A                            		
0000361A                            		
0000361A 7002                       		moveq	#2,d0
0000361C 6100 ECB8                  		bsr.w	PalLoad2	; load level select pallet
00003620 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003624 7000                       		moveq	#0,d0
00003626 323C 00DF                  		move.w	#$DF,d1
0000362A                            
0000362A                            Title_ClrScroll:
0000362A 22C0                       		move.l	d0,(a1)+
0000362C 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003630                            
00003630 21C0 F616                  		move.l	d0,($FFFFF616).w
00003634 46FC 2700                  		move	#$2700,sr
00003638 4DF9 00C0 0000             		lea	($C00000).l,a6
0000363E 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003648 323C 03FF                  		move.w	#$3FF,d1
0000364C                            
0000364C                            Title_ClrVram:
0000364C 2C80                       		move.l	d0,(a6)
0000364E 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003652                            
00003652 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003656 6700 0000                  		beq.w	GotoOptions	; if not, play level
0000365A                            
0000365A 6100 0000                  		bsr.w	LevSelTextLoad
0000365E                            		
0000365E                            		; sound test fix
0000365E 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003662 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003668                            		
00003668 363C C65F                  		move.w	#$C680-$21,d3 ; selected
0000366C 0C46 0014                  		cmpi.w	#$14,d6
00003670 6700                       		beq.s	@issndtst
00003672 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003676                            	@issndtst:
00003676 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
0000367A 31C6 FF82                  		move.w	d6,($FFFFFF82).w
0000367E                            		
0000367E 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003682 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000368A                            		
0000368A 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003690 6700                       		beq.s	@issndtst2
00003692                            		
00003692 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
00003698 6100 0000                  		bsr.w	CStringSlop
0000369C 6000                       		bra.s	LevelSelect
0000369E                            	@issndtst2:
0000369E 43F9 0000 0000             		lea	(Controls_SND).l,a1
000036A4 6100 0000                  		bsr.w	CStringSlop
000036A8                            		
000036A8                            ; ---------------------------------------------------------------------------
000036A8                            ; Level	Select
000036A8                            ; ---------------------------------------------------------------------------
000036A8                            LevelSelect:
000036A8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036AE 6100 F646                  		bsr.w	DelayProgram
000036B2 6100 0000                  		bsr.w	LevSelControls
000036B6 6100 E126                  		bsr.w	RunPLC_RAM
000036BA 4AB8 F680                  		tst.l	($FFFFF680).w
000036BE 66E8                       		bne.s	LevelSelect
000036C0 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000036C6 67E0                       		beq.s	LevelSelect	; if not, branch
000036C8 3038 FF82                  		move.w	($FFFFFF82).w,d0
000036CC 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000036D0 6600                       		bne.s	@dont	; if not, dont blow this place up
000036D2                            			
000036D2 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
000036D8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036DE 6100 F616                  		bsr.w	DelayProgram
000036E2                            	@dont:
000036E2 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000036E6 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000036E8                            		
000036E8 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
000036EE 67B8                       		beq.s	LevelSelect	; if not, branch
000036F0                            		
000036F0 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
000036F6 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
000036F8                            		
000036F8 1038 FF84                  		move.b	($FFFFFF84).w,d0
000036FC 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003700                            		
00003700 4EB9 0000 0000             		jsr		ShowNow_Playing
00003706 60A0                       		bra.s	LevelSelect
00003708                            ; ===========================================================================
00003708                            
00003708                            LevSel_SEGA:				; XREF: LevelSelect
00003708 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
0000370E 4E75                       		rts	
00003710                            ; ===========================================================================
00003710                            
00003710                            LevSel_Ending:				; XREF: LevelSelect
00003710 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003716 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
0000371C 4E75                       		rts	
0000371E                            ; ===========================================================================
0000371E                            
0000371E                            LevSel_Credits:				; XREF: LevelSelect
0000371E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003724 103C 0091                  		move.b	#$91,d0
00003728 6100 DE64                  		bsr.w	PlaySound_Special ; play credits music
0000372C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003732 4E75                       		rts	
00003734                            ; ===========================================================================
00003734                            
00003734                            LevSel_Level_SS:			; XREF: LevelSelect
00003734 D040                       		add.w	d0,d0
00003736 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000373A 6B00 FF6C                  		bmi.w	LevelSelect
0000373E 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
00003742 6600                       		bne.s	LevSel_Level	; if not, branch
00003744 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000374A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000374E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003754 7000                       		moveq	#0,d0
00003756 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000375A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000375E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003762 4E75                       		rts	
00003764                            ; ===========================================================================
00003764                            
00003764                            LevSel_Level:				; XREF: LevSel_Level_SS
00003764 0240 3FFF                  		andi.w	#$3FFF,d0
00003768 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000376C                            
0000376C                            PlayLevel:				; XREF: ROM:00003246j ...
0000376C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003772 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003778 7000                       		moveq	#0,d0
0000377A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000377E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003782 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003786 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000378A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000378E 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003792 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003796 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000379A 103C 00E0                  		move.b	#$E0,d0
0000379E 6100 DDEE                  		bsr.w	PlaySound_Special ; fade out music
000037A2 4E75                       		rts	
000037A4                            ; ===========================================================================
000037A4                            ; ---------------------------------------------------------------------------
000037A4                            ; Level	select - level pointers
000037A4                            ; ---------------------------------------------------------------------------
000037A4                            LSelectPointers:
000037A4 0000                       		dc.w $0000 ; crz
000037A6 0001                       		dc.w $0001
000037A8 0002                       		dc.w $0002
000037AA 0100                       		dc.w $0100 ; ilfez
000037AC 0101                       		dc.w $0101
000037AE 0102                       		dc.w $0102
000037B0 0200                       		dc.w $0200 ; mz
000037B2 0201                       		dc.w $0201
000037B4 0202                       		dc.w $0202
000037B6 0300                       		dc.w $0300 ; dgrotz
000037B8 0301                       		dc.w $0301 
000037BA 0302                       		dc.w $0302 
000037BC 0700                       		dc.w $0700 ; the other mz...
000037BE 0701                       		dc.w $0701 
000037C0 0702                       		dc.w $0702 
000037C2 0400                       		dc.w $0400 ; tpfbz
000037C4 0401                       		dc.w $0401
000037C6 0402                       		dc.w $0402
000037C8 0500                       		dc.w $0500 ; zzzzz
000037CA 0501                       		dc.w $0501 
000037CC 0103                       		dc.w $0103 
000037CE 0502                       		dc.w $0502 ; fz
000037D0 FFFF                       		dc.w $FFFF ; special
000037D2 8000                       		dc.w $8000 ; sound test
000037D4                            		even
000037D4                            ; --------------------------------------
000037D4                            ; ---------------------------------------------------------------------------
000037D4                            ; Level	select codes
000037D4                            ; ---------------------------------------------------------------------------
000037D4                            LevelSelectCode_J:
000037D4                            		incbin	misc\ls_jcode.bin
000037DA                            		even
000037DA                            
000037DA                            LevelSelectCode_US:
000037DA                            		incbin	misc\ls_ucode.bin
000037E0                            		even
000037E0                            ; ===========================================================================
000037E0                            
000037E0                            ; ---------------------------------------------------------------------------
000037E0                            ; Demo mode
000037E0                            ; ---------------------------------------------------------------------------
000037E0                            
000037E0                            Demo:					; XREF: TitleScreen
000037E0 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000037E6                            
000037E6                            loc_33B6:				; XREF: loc_33E4
000037E6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000037EC 6100 F508                  		bsr.w	DelayProgram
000037F0 6100 0000                  		bsr.w	DeformBgLayer
000037F4 6100 E338                  		bsr.w	PalCycle_Load
000037F8 6100 DFE4                  		bsr.w	RunPLC_RAM
000037FC 3038 D008                  		move.w	($FFFFD008).w,d0
00003800 5440                       		addq.w	#2,d0
00003802 31C0 D008                  		move.w	d0,($FFFFD008).w
00003806 0C40 1C00                  		cmpi.w	#$1C00,d0
0000380A 6500                       		bcs.s	loc_33E4
0000380C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003812 4E75                       		rts	
00003814                            ; ===========================================================================
00003814                            
00003814                            loc_33E4:				; XREF: Demo
00003814 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000381A 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
0000381E 4A78 F614                  		tst.w	($FFFFF614).w
00003822 6600 FFC2                  		bne.w	loc_33B6
00003826 103C 00E0                  		move.b	#$E0,d0
0000382A 6100 DD62                  		bsr.w	PlaySound_Special ; fade out music
0000382E 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003832 0240 0007                  		andi.w	#7,d0
00003836 D040                       		add.w	d0,d0
00003838 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000383C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003840 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003844 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000384A 6500                       		bcs.s	loc_3422	; if yes, branch
0000384C 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003852                            
00003852                            loc_3422:
00003852 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003858 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000385E 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003862 6600                       		bne.s	Demo_Level	; if not, branch
00003864 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000386A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000386E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003872                            
00003872                            Demo_Level:
00003872 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003878 7000                       		moveq	#0,d0
0000387A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000387E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003882 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003886 4E75                       		rts	
00003888                            ; ===========================================================================
00003888                            ; ---------------------------------------------------------------------------
00003888                            ; Levels used in demos
00003888                            ; ---------------------------------------------------------------------------
00003888                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003890                            		even
00003890                            
00003890                            ; ---------------------------------------------------------------------------
00003890                            ; Subroutine to	change what you're selecting in the level select
00003890                            ; ---------------------------------------------------------------------------
00003890                            
00003890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003890                            
00003890                            
00003890                            LevSelControls:				; XREF: LevelSelect
00003890 1238 F605                  		move.b	($FFFFF605).w,d1
00003894 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003898 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000389A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000389E 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000038A2                            
000038A2                            LevSel_UpDown:
000038A2 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000038A8 1238 F604                  		move.b	($FFFFF604).w,d1
000038AC 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000038B0 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000038B4 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000038B8 0801 0000                  		btst	#0,d1		; is up	pressed?
000038BC 6700                       		beq.s	LevSel_Down	; if not, branch
000038BE 5346                       		subq.w	#1,d6		; move up 1 selection
000038C0 6400                       		bcc.s	LevSel_Down
000038C2 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000038C4                            
000038C4                            LevSel_Down:
000038C4 0801 0001                  		btst	#1,d1		; is down pressed?
000038C8 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038CA 5246                       		addq.w	#1,d6		; move down 1 selection
000038CC 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038D0 6500                       		bcs.s	LevSel_Refresh
000038D2 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000038D4 6000                       		bra.s	LevSel_Refresh
000038D6                            		
000038D6                            LevSel_LR:
000038D6 0801 0002                  		btst	#2,d1		; is left pressed?
000038DA 6700                       		beq.s	LevSel_Right	; if not, branch
000038DC 0446 0000                  		sub.w	#lsrow2size,d6
000038E0 64E2                       		bcc.s	LevSel_Down
000038E2 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000038E6                            LevSel_Right:
000038E6 0801 0003                  		btst	#3,d1		; is right pressed?
000038EA 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038EC 0646 0000                  		add.w	#lsrow1size,d6
000038F0 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038F4 6500                       		bcs.s	LevSel_Refresh
000038F6 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
000038FA                            ; ===========================================================================
000038FA                            LevSel_Refresh:
000038FA                            		
000038FA 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000038FE 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003902                            		
00003902 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003908 6600                       		bne.s	@exitsndtest
0000390A                            		
0000390A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000390E 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00003914 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000391C 6100 0000                  		bsr.w	CStringSlop
00003920                            	@exitsndtest:
00003920                            	
00003920 363C C65F                  		move.w	#$C680-$21,d3
00003924 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003928 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000392C                            		
0000392C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00003932 6600                       		bne.s	@entersndtest
00003934                            		
00003934 363C C65F                  		move.w	#$C680-$21,d3
00003938 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000393E 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003946 6100 0000                  		bsr.w	CStringSlop
0000394A                            	@entersndtest:
0000394A 4E75                       		rts	
0000394C                            		
0000394C                            LevSel_SndTest:				; XREF: LevSelControls
0000394C 1238 F605                  		move.b	($FFFFF605).w,d1
00003950 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003954 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003956 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
0000395C 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
00003960                            		
00003960 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003964 0801 0002                  		btst	#2,d1		; is left pressed?
00003968 6700                       		beq.s	SndTest_Right	; if not, branch
0000396A 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
0000396C                            		; no need the fact it's a byte does the trick
0000396C                            
0000396C                            SndTest_Right:
0000396C 0801 0003                  		btst	#3,d1		; is right pressed?
00003970 6700                       		beq.s	SndTest_A	; if not, branch
00003972 5200                       		addq.b	#1,d0		; add 1	to sound test
00003974                            		; same here
00003974                            		
00003974                            SndTest_A:
00003974 0801 0006                  		btst	#6,d1		; is A pressed?
00003978 6700                       		beq.s	SndTest_B	; if not, branch
0000397A 5100                       		subq.b	#8,d0		; subtract $10 to sound test
0000397C 5100                       		subq.b	#8,d0
0000397E                            		
0000397E                            SndTest_B:
0000397E 0801 0004                  		btst	#4,d1		; is B pressed?
00003982 6700                       		beq.s	SndTest_Refresh	; if not, branch
00003984 5000                       		addq.b	#8,d0		; add $10 to sound test
00003986 5000                       		addq.b	#8,d0
00003988                            
00003988                            SndTest_Refresh:
00003988 363C C65F                  		move.w	#$C680-$21,d3
0000398C 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
00003990 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00003994                            
00003994                            LevSel_NoMove:
00003994 4E75                       		rts	
00003996                            ; End of function LevSelControls
00003996                            
00003996                            ; ---------------------------------------------------------------------------
00003996                            ; Subroutine to load level select text
00003996                            ; ---------------------------------------------------------------------------
00003996                            
00003996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003996                            
00003996                            LevSelTextLoad_loop:
00003996 2D44 0004                  		move.l	d4,4(a6)
0000399A 6100 0000                  		bsr.w	LevSel_ChgLine
0000399E 0684 0080 0000             		addi.l	#$800000,d4
000039A4 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000039A8 4E75                       		rts
000039AA                            LevSelTextLoad:				; XREF: TitleScreen
000039AA 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039B0 4DF9 00C0 0000             		lea	($C00000).l,a6
000039B6 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000039BA 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000039C0                            		
000039C0 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000039C4 61D0                       		bsr.s	LevSelTextLoad_loop
000039C6                            		
000039C6                            		
000039C6 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000039CC 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000039D0 61C4                       		bsr.s	LevSelTextLoad_loop
000039D2 363C C65F                  		move.w	#$C680-$21,d3
000039D6                            		
000039D6                            LevSelHighlightCode:
000039D6 4DF9 00C0 0000             		lea	($C00000).l,a6
000039DC 7000                       		moveq	#0,d0
000039DE 3038 FF82                  		move.w	($FFFFFF82).w,d0
000039E2 3200                       		move.w	d0,d1
000039E4 283C 6086 0003             		move.l	#lsscrpos,d4
000039EA                            		
000039EA 0C40 0000                  		cmpi.w	#lsrow1size,d0
000039EE 6D00                       		blt.s	@notsecond
000039F0                            		
000039F0 0440 0000                  		sub.w	#lsrow1size,d0
000039F4 0684 0024 0000             		addi.l	#lsoff,d4
000039FA                            	@notsecond:
000039FA EF48                       		lsl.w	#7,d0
000039FC 4840                       		swap	d0
000039FE D880                       		add.l	d0,d4
00003A00 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A06 E749                       		lsl.w	#3,d1
00003A08 D241                       		add.w	d1,d1
00003A0A D2C1                       		adda.w	d1,a1
00003A0C 2D44 0004                  		move.l	d4,4(a6)
00003A10 6100 0000                  		bsr.w	LevSel_ChgLine
00003A14 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003A1A 6700                       		beq.s	LevSelSndTest
00003A1C 4E75                       		rts
00003A1E                            
00003A1E                            LevSelSndTest:
00003A1E 0643 0030                  		add.w	#$30,d3
00003A22 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A2C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A30 1400                       		move.b	d0,d2
00003A32 E808                       		lsr.b	#4,d0
00003A34 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A38 1002                       		move.b	d2,d0
00003A3A 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A3E 4E75                       		rts	
00003A40                            ; End of function LevSelTextLoad
00003A40                            
00003A40                            
00003A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A40                            
00003A40                            
00003A40                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A40 0240 000F                  		andi.w	#$F,d0
00003A44 0C00 000A                  		cmpi.b	#$A,d0
00003A48 6500                       		bcs.s	loc_3580
00003A4A 5E00                       		addi.b	#7,d0
00003A4C                            
00003A4C                            loc_3580:
00003A4C D043                       		add.w	d3,d0
00003A4E 3C80                       		move.w	d0,(a6)
00003A50 4E75                       		rts	
00003A52                            ; End of function LevSel_ChgSnd
00003A52                            
00003A52                            
00003A52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A52                            
00003A52                            
00003A52                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A52 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A54                            
00003A54                            @loop:
00003A54 7000                       		moveq	#0,d0
00003A56 1019                       		move.b	(a1)+,d0
00003A58 0C00 0020                  		cmpi.b	#$20,d0
00003A5C 6E00                       		bgt.s	@draw
00003A5E 3CBC 0000                  		move.w	#0,(a6)
00003A62 51CA FFF0                  		dbf	d2,@loop
00003A66 4E75                       		rts	
00003A68                            ; ===========================================================================
00003A68                            
00003A68                            @draw:				; XREF: LevSel_ChgLine
00003A68 D043                       		add.w	d3,d0
00003A6A 3C80                       		move.w	d0,(a6)
00003A6C 51CA FFE6                  		dbf	d2,@loop
00003A70 4E75                       		rts	
00003A72                            ; End of function LevSel_ChgLine
00003A72                            		
00003A72                            CStringSlop_draw:
00003A72 D043                       		add.w	d3,d0
00003A74 3C80                       		move.w	d0,(a6)
00003A76                            CStringSlop:				; XREF: LevSelTextLoad
00003A76 7000                       		moveq	#0,d0
00003A78 1019                       		move.b	(a1)+,d0
00003A7A 0C00 0020                  		cmpi.b	#$20,d0
00003A7E 6EF2                       		bgt.s	CStringSlop_draw
00003A80                            		
00003A80 0C00 0001                  		cmpi.b	#1,d0
00003A84 6700                       		beq.s	@InsertSpaces
00003A86 6500                       		blo.s	@end
00003A88                            		
00003A88 3CBC 0000                  		move.w	#0,(a6)
00003A8C 60E8                       		bra.s	CStringSlop
00003A8E                            	@end:
00003A8E 4E75                       		rts
00003A90                            	@InsertSpaces:
00003A90 7000                       		moveq	#0,d0
00003A92 1019                       		move.b	(a1)+,d0
00003A94                            		
00003A94                            	@insert:
00003A94 3CBC 0000                  		move.w	#0,(a6)
00003A98 51C8 FFFA                  		dbf.w	d0,@insert
00003A9C 60D8                       		bra.s	CStringSlop
00003A9E                            ; End of function LevSel_ChgLine
00003A9E                            
00003A9E                            ; ===========================================================================
00003A9E                            ; ---------------------------------------------------------------------------
00003A9E                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003A9E                            ; ---------------------------------------------------------------------------
00003A9E                            LevelMenuText:	
00003A9E 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003AAE 2020 2020 2020 2020 2020+          dc.b    "               2"
00003ABE 2020 2020 2020 2020 2020+          dc.b    "               3"
00003ACE 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003ADE 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003AEE 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AFE 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003B0E 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B1E 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B2E 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B3E 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B4E 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B5E 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
00003B6E 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B7E 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B8E                            LMTSecondRow:
00003B8E 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003B9E 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003BAE 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BBE 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003BCE 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BDE 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BEE 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003BFE 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003C0E 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003C1E 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003C2E 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003C3E                            LMTSelectableEnd:
00003C3E 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003C4E                            LMTEnd:
00003C4E                            
00003C4E                            Now_Playing:
00003C4E 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003C5E                            		even
00003C5E                            NP_Track:
00003C5E 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003C66                            		even
00003C66                            NP_SFX:
00003C66 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003C6E                            		even
00003C6E                            
00003C6E                            ShowNow_Playing:
00003C6E 1C00                       		move.b	d0,d6
00003C70 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C74 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C78 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C7E 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C86 6100 FDEE                  		bsr.w	CStringSlop
00003C8A                            		
00003C8A 43FA FFD2                  		lea	NP_Track(pc),a1
00003C8E 0C06 00A0                  		cmpi.b	#$A0,d6
00003C92 6D00                       		blt.s	@track
00003C94                            		
00003C94 43FA FFD0                  		lea	NP_SFX(pc),a1
00003C98                            	@track:
00003C98 6100 FDDC                  		bsr.w	CStringSlop
00003C9C                            		
00003C9C 0643 0030                  		add.w	#$30,d3
00003CA0 1006                       		move.b	d6,d0
00003CA2 1400                       		move.b	d0,d2
00003CA4 E808                       		lsr.b	#4,d0
00003CA6 6100 FD98                  		bsr.w	LevSel_ChgSnd
00003CAA 1002                       		move.b	d2,d0
00003CAC 6100 FD92                  		bsr.w	LevSel_ChgSnd
00003CB0 4E75                       		rts	
00003CB2                            
00003CB2                            ; 1 is insert spaces btw
00003CB2                            Controls_Normal:
00003CB2 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003CBE                            		even		
00003CBE                            Controls_SND:
00003CBE 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003CE4 00                         		even
00003CE4                            		
00003CE4                            OptionMenuText:	
00003CE4 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003CF4 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003D04                            OMTEnd:
00003D04                            		
00003D04                            ; ---------------------------------------------------------------------------
00003D04                            ; Level	Select
00003D04                            ; ---------------------------------------------------------------------------
00003D04                            GotoOptions:
00003D04 43F9 0000 3CE4             		lea	(OptionMenuText).l,a1
00003D0A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D10 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003D14 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003D1A                            		
00003D1A 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003D1E 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00003D22                            
00003D22                            OptionsMenu:
00003D22 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003D28 6100 EFCC                  		bsr.w	DelayProgram
00003D2C 6100 0000                  		bsr.w	OptControls
00003D30 6100 DAAC                  		bsr.w	RunPLC_RAM
00003D34 4AB8 F680                  		tst.l	($FFFFF680).w
00003D38 66E8                       		bne.s	OptionsMenu
00003D3A 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003D40 67E0                       		beq.s	OptionsMenu	; if not, branch
00003D42 4E71                       		nop
00003D44 60DC                       		bra.s	OptionsMenu
00003D46                            		
00003D46                            OptReturn:
00003D46 4E75                       		rts
00003D48                            OptControls:				; XREF: LevelSelect
00003D48 1238 F605                  		move.b	($FFFFF605).w,d1
00003D4C 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003D50 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003D52 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003D56 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003D58                            Opt_UpDown:
00003D58 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003D5E 1238 F604                  		move.b	($FFFFF604).w,d1
00003D62 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003D66 0801 0000                  		btst	#0,d1		; is up	pressed?
00003D6A 6700                       		beq.s	Opt_Down	; if not, branch
00003D6C 5346                       		subq.w	#1,d6		; move up 1 selection
00003D6E 6400                       		bcc.s	Opt_Down
00003D70 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003D72                            
00003D72                            Opt_Down:
00003D72 0801 0001                  		btst	#1,d1		; is down pressed?
00003D76 6700                       		beq.s	Opt_Refresh	; if not, branch
00003D78 5246                       		addq.w	#1,d6		; move down 1 selection
00003D7A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003D7E 6500                       		bcs.s	Opt_Refresh
00003D80 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003D82                            Opt_Refresh:
00003D82                            		
00003D82                            ; ---------------------------------------------------------------------------
00003D82                            ; Music	playlist
00003D82                            ; ---------------------------------------------------------------------------
00003D82                            MusicList1:	incbin	misc\muslist1.bin
00003D8A                            		even
00003D8A                            MusicList2:	incbin	misc\muslist2.bin
00003D92                            		even
00003D92                            MusicList3:	incbin	misc\muslist3.bin
00003D9A                            		even
00003D9A                            MusicList4:	incbin	misc\muslist4.bin
00003DA2                            		even
00003DA2                            ; ===========================================================================
00003DA2                            
00003DA2                            ; ---------------------------------------------------------------------------
00003DA2                            ; Level
00003DA2                            ; ---------------------------------------------------------------------------
00003DA2                            
00003DA2                            Level:					; XREF: GameModeArray
00003DA2 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003DA8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DAC 6B00                       		bmi.s	loc_37B6
00003DAE 103C 00E0                  		move.b	#$E0,d0
00003DB2 6100 D7DA                  		bsr.w	PlaySound_Special ; fade out music
00003DB6                            
00003DB6                            loc_37B6:
00003DB6 6100 DA18                  		bsr.w	ClearPLC
00003DBA 6100 E254                  		bsr.w	Pal_FadeFrom
00003DBE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DC2 6B00                       		bmi.s	Level_ClrRam
00003DC4 46FC 2700                  		move	#$2700,sr
00003DC8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003DD2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003DD8 6100 D858                  		bsr.w	NemDec
00003DDC 46FC 2300                  		move	#$2300,sr
00003DE0 7000                       		moveq	#0,d0
00003DE2 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DE6 E948                       		lsl.w	#4,d0
00003DE8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003DEE 45F2 0000                  		lea	(a2,d0.w),a2
00003DF2 7000                       		moveq	#0,d0
00003DF4 1012                       		move.b	(a2),d0
00003DF6 6700                       		beq.s	loc_37FC
00003DF8 6100 D978                  		bsr.w	LoadPLC		; load level patterns
00003DFC                            
00003DFC                            loc_37FC:
00003DFC 7001                       		moveq	#1,d0
00003DFE 6100 D972                  		bsr.w	LoadPLC		; load standard	patterns
00003E02                            
00003E02                            Level_ClrRam:
00003E02 43F8 D000                  		lea	($FFFFD000).w,a1
00003E06 7000                       		moveq	#0,d0
00003E08 323C 07FF                  		move.w	#$7FF,d1
00003E0C                            
00003E0C                            Level_ClrObjRam:
00003E0C 22C0                       		move.l	d0,(a1)+
00003E0E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003E12                            
00003E12 43F8 F628                  		lea	($FFFFF628).w,a1
00003E16 7000                       		moveq	#0,d0
00003E18 323C 0015                  		move.w	#$15,d1
00003E1C                            
00003E1C                            Level_ClrVars:
00003E1C 22C0                       		move.l	d0,(a1)+
00003E1E 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003E22                            
00003E22 43F8 F700                  		lea	($FFFFF700).w,a1
00003E26 7000                       		moveq	#0,d0
00003E28 323C 003F                  		move.w	#$3F,d1
00003E2C                            
00003E2C                            Level_ClrVars2:
00003E2C 22C0                       		move.l	d0,(a1)+
00003E2E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003E32                            
00003E32 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003E36 7000                       		moveq	#0,d0
00003E38 323C 0047                  		move.w	#$47,d1
00003E3C                            
00003E3C                            Level_ClrVars3:
00003E3C 22C0                       		move.l	d0,(a1)+
00003E3E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003E42                            
00003E42 46FC 2700                  		move	#$2700,sr
00003E46 6100 D66E                  		bsr.w	ClearScreen
00003E4A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003E50 3CBC 8B03                  		move.w	#$8B03,(a6)
00003E54 3CBC 8230                  		move.w	#$8230,(a6)
00003E58 3CBC 8407                  		move.w	#$8407,(a6)
00003E5C 3CBC 857C                  		move.w	#$857C,(a6)
00003E60 3CBC 9001                  		move.w	#$9001,(a6)
00003E64 3CBC 8004                  		move.w	#$8004,(a6)
00003E68 3CBC 8720                  		move.w	#$8720,(a6)
00003E6C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003E72 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003E76 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E7C 6600                       		bne.s	Level_LoadPal	; if not, branch
00003E7E 3CBC 8014                  		move.w	#$8014,(a6)
00003E82 7000                       		moveq	#0,d0
00003E84 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E88 D040                       		add.w	d0,d0
00003E8A 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003E90 3031 0000                  		move.w	(a1,d0.w),d0
00003E94 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003E98 31C0 F648                  		move.w	d0,($FFFFF648).w
00003E9C 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003EA0 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003EA4 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003EA8 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003EAE 6000 0000                  		bra.w	Level_LoadPal
00003EB2                            Player_Palette:
00003EB2                            		; normal, lz, sbz, blank
00003EB2 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003EBA                            		
00003EBA 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003EC2 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003ECA 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003ED2                            
00003ED2                            		; add more player palettes
00003ED2                            Level_LoadPal:
00003ED2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003ED8 46FC 2300                  		move	#$2300,sr
00003EDC                            
00003EDC 7200                       		moveq	#0,d1
00003EDE 1238 FFE8                  		move.b	(v_character),d1
00003EE2 D241                       		add.w	d1,d1
00003EE4 D241                       		add.w	d1,d1
00003EE6 D241                       		add.w	d1,d1
00003EE8 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003EEC                            		
00003EEC 6100 E3E8                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003EF0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003EF6 6600                       		bne.s	Level_GetBgm	; if not, branch
00003EF8 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003EFC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003F02 6600                       		bne.s	Level_WaterPal	; if not, branch
00003F04 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003F08                            
00003F08                            Level_WaterPal:
00003F08 6100 E3E4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003F0C 4A38 FE30                  		tst.b	($FFFFFE30).w
00003F10 6700                       		beq.s	Level_GetBgm
00003F12 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003F18                            
00003F18                            ; NineKode begins here - How to play different songs on different acts
00003F18                             
00003F18                            Level_GetBgm:
00003F18 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F1C 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003F20 7000                       		moveq	#0,d0
00003F22 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F26                             
00003F26 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003F2C 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003F2E 43F9 0000 3D82             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003F34 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F36                             
00003F36                            Level_GetBgm2:
00003F36 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003F3C 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003F3E 43F9 0000 3D8A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003F44 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F46                             
00003F46                            Level_GetBgm3:
00003F46 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003F4C 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003F4E 43F9 0000 3D92             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003F54 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F56                             
00003F56                            Level_GetBgm4:
00003F56 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003F5C 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003F5E 43F9 0000 3D9A             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003F64                             
00003F64                            Level_PlayBgm:
00003F64 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003F68 6100 D61E                  		bsr.w	PlaySound	; play music
00003F6C 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003F72                             
00003F72                            ; NineKode ends here
00003F72                            
00003F72                            Level_TtlCard:
00003F72 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003F78 6100 ED7C                  		bsr.w	DelayProgram
00003F7C 4EB9 0000 0000             		jsr	ObjectsLoad
00003F82 4EB9 0000 0000             		jsr	BuildSprites
00003F88 6100 D854                  		bsr.w	RunPLC_RAM
00003F8C 3038 D108                  		move.w	($FFFFD108).w,d0
00003F90 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003F94 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003F96 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003F9A 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003F9C 4EB9 0000 0000             		jsr	Hud_Base
00003FA2                            
00003FA2                            loc_3946:
00003FA2 7003                       		moveq	#3,d0
00003FA4 6100 E314                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003FA8 6100 0000                  		bsr.w	LevelSizeLoad
00003FAC 6100 0000                  		bsr.w	DeformBgLayer
00003FB0 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003FB6 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003FBA 6100 0000                  		bsr.w	LoadTilesFromStart
00003FBE 4EB9 0000 0000             		jsr	FloorLog_Unk
00003FC4 6100 0000                  		bsr.w	ColIndexLoad
00003FC8 6100 0000                  		bsr.w	LZWaterEffects
00003FCC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003FD2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FD6 6B00                       		bmi.s	Level_ChkDebug
00003FD8 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003FDE                            
00003FDE                            Level_ChkDebug:
00003FDE 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003FE2 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FE4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003FEA 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FEC 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003FF2                            
00003FF2                            Level_ChkWater:
00003FF2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003FF8 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003FFE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004004 6600                       		bne.s	Level_LoadObj	; if not, branch
00004006 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000400C 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00004012 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004018 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000401E                            
0000401E                            Level_LoadObj:
0000401E 4EB9 0000 0000             		jsr	ObjPosLoad
00004024 4EB9 0000 0000             		jsr	ObjectsLoad
0000402A 4EB9 0000 0000             		jsr	BuildSprites
00004030 7000                       		moveq	#0,d0
00004032 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004036 6600                       		bne.s	loc_39E8	; if yes, branch
00004038 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000403C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004040 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004044                            
00004044                            loc_39E8:
00004044 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004048 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
0000404C 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00004050 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00004054                            		; move.b	d0,($FFFFFE2F).w
00004054 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
0000405A 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000405E 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00004062 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00004066 6100 0000                  		bsr.w	OscillateNumInit
0000406A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004070 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00004076 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
0000407C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004082 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00004088 7000                       		moveq	#0,d0
0000408A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000408E E548                       		lsl.w	#2,d0
00004090 2271 0000                  		movea.l	(a1,d0.w),a1
00004094 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004098 6A00                       		bpl.s	Level_Demo	; if yes, branch
0000409A 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000040A0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000040A4 5340                       		subq.w	#1,d0
000040A6 E548                       		lsl.w	#2,d0
000040A8 2271 0000                  		movea.l	(a1,d0.w),a1
000040AC                            
000040AC                            Level_Demo:
000040AC 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000040B2 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000040B6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000040BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000040C0 6A00                       		bpl.s	Level_ChkWaterPal
000040C2 31FC 021C F614             		move.w	#540,($FFFFF614).w
000040C8 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000040CE 6600                       		bne.s	Level_ChkWaterPal
000040D0 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000040D6                            
000040D6                            Level_ChkWaterPal:
000040D6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000040DC 6600                       		bne.s	Level_Delay	; if not, branch
000040DE 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000040E0 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000040E6 6600                       		bne.s	Level_WaterPal2	; if not, branch
000040E8 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000040EA                            
000040EA                            Level_WaterPal2:
000040EA 6100 E21E                  		bsr.w	PalLoad4_Water
000040EE                            
000040EE                            Level_Delay:
000040EE 323C 0003                  		move.w	#3,d1
000040F2                            
000040F2                            Level_DelayLoop:
000040F2 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000040F8 6100 EBFC                  		bsr.w	DelayProgram
000040FC 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004100                            
00004100 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004106 6100 DE64                  		bsr.w	Pal_FadeTo2
0000410A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000410E 6B00                       		bmi.s	Level_ClrCardArt
00004110 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004114 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00004118 5838 D124                  		addq.b	#4,($FFFFD124).w
0000411C 5838 D164                  		addq.b	#4,($FFFFD164).w
00004120 6000                       		bra.s	Level_StartGame
00004122                            ; ===========================================================================
00004122                            
00004122                            Level_ClrCardArt:
00004122 7002                       		moveq	#2,d0
00004124 4EB9 0000 1772             		jsr	(LoadPLC).l	; load explosion patterns
0000412A 7000                       		moveq	#0,d0
0000412C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004130 0640 0015                  		addi.w	#$15,d0
00004134 4EB9 0000 1772             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000413A                            
0000413A                            Level_StartGame:
0000413A 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004140                            
00004140                            ; ---------------------------------------------------------------------------
00004140                            ; Main level loop (when	all title card and loading sequences are finished)
00004140                            ; ---------------------------------------------------------------------------
00004140                            
00004140                            Level_MainLoop:
00004140 6100 D458                  		bsr.w	PauseGame
00004144 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000414A 6100 EBAA                  		bsr.w	DelayProgram
0000414E 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004152 6100 0000                  		bsr.w	MoveSonicInDemo
00004156 6100 0000                  		bsr.w	LZWaterEffects
0000415A 4EB9 0000 0000             		jsr	ObjectsLoad
00004160 4A78 FE08                  		tst.w	($FFFFFE08).w
00004164 6600                       		bne.s	loc_3B10
00004166 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000416C 6400                       		bcc.s	loc_3B14
0000416E                            
0000416E                            loc_3B10:
0000416E 6100 0000                  		bsr.w	DeformBgLayer
00004172                            
00004172                            loc_3B14:
00004172 4EB9 0000 0000             		jsr	BuildSprites
00004178 4EB9 0000 0000             		jsr	ObjPosLoad
0000417E 6100 D9AE                  		bsr.w	PalCycle_Load
00004182 6100 D65A                  		bsr.w	RunPLC_RAM
00004186 6100 0000                  		bsr.w	OscillateNumDo
0000418A 6100 0000                  		bsr.w	ChangeRingFrame
0000418E 6100 0000                  		bsr.w	SignpostArtLoad
00004192 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004198 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000419A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
0000419E 6600 FC02                  		bne.w	Level		; if yes, branch
000041A2 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000041A8 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000041AC 4E75                       		rts	
000041AE                            ; ===========================================================================
000041AE                            
000041AE                            Level_ChkDemo:				; XREF: Level_MainLoop
000041AE 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000041B2 6600                       		bne.s	Level_EndDemo	; if yes, branch
000041B4 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000041B8 6700                       		beq.s	Level_EndDemo	; if not, branch
000041BA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041C0 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000041C4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041CA 4E75                       		rts	
000041CC                            ; ===========================================================================
000041CC                            
000041CC                            Level_EndDemo:				; XREF: Level_ChkDemo
000041CC 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000041D2 6600                       		bne.s	loc_3B88	; if not, branch
000041D4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041DA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000041DE 6A00                       		bpl.s	loc_3B88	; if yes, branch
000041E0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000041E6                            
000041E6                            loc_3B88:
000041E6 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000041EC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000041F2 4278 F794                  		clr.w	($FFFFF794).w
000041F6                            
000041F6                            loc_3B98:
000041F6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000041FC 6100 EAF8                  		bsr.w	DelayProgram
00004200 6100 0000                  		bsr.w	MoveSonicInDemo
00004204 4EB9 0000 0000             		jsr	ObjectsLoad
0000420A 4EB9 0000 0000             		jsr	BuildSprites
00004210 4EB9 0000 0000             		jsr	ObjPosLoad
00004216 5378 F794                  		subq.w	#1,($FFFFF794).w
0000421A 6A00                       		bpl.s	loc_3BC8
0000421C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004222 6100 DE0C                  		bsr.w	Pal_FadeOut
00004226                            
00004226                            loc_3BC8:
00004226 4A78 F614                  		tst.w	($FFFFF614).w
0000422A 66CA                       		bne.s	loc_3B98
0000422C 4E75                       		rts	
0000422E                            ; ===========================================================================
0000422E                            ; ---------------------------------------------------------------------------
0000422E                            ; Subroutine to	do special water effects in Labyrinth Zone
0000422E                            ; ---------------------------------------------------------------------------
0000422E                            
0000422E                            LZWaterEffects:				; XREF: Level
0000422E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004234 6600                       		bne.s	locret_3C28	; if not, branch
00004236 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000423C 6400                       		bcc.s	LZMoveWater
0000423E 6100 0000                  		bsr.w	LZWindTunnels
00004242 6100 0000                  		bsr.w	LZWaterSlides
00004246 6100 0000                  		bsr.w	LZDynamicWater
0000424A                            
0000424A                            LZMoveWater:
0000424A 4238 F64E                  		clr.b	($FFFFF64E).w
0000424E 7000                       		moveq	#0,d0
00004250 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004254 E248                       		lsr.w	#1,d0
00004256 D078 F648                  		add.w	($FFFFF648).w,d0
0000425A 31C0 F646                  		move.w	d0,($FFFFF646).w
0000425E 3038 F646                  		move.w	($FFFFF646).w,d0
00004262 9078 F704                  		sub.w	($FFFFF704).w,d0
00004266 6400                       		bcc.s	loc_3C1A
00004268 4A40                       		tst.w	d0
0000426A 6A00                       		bpl.s	loc_3C1A
0000426C 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004272 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004278                            
00004278                            loc_3C1A:
00004278 0C40 00DF                  		cmpi.w	#$DF,d0
0000427C 6500                       		bcs.s	loc_3C24
0000427E 303C 00DF                  		move.w	#$DF,d0
00004282                            
00004282                            loc_3C24:
00004282 11C0 F625                  		move.b	d0,($FFFFF625).w
00004286                            
00004286                            locret_3C28:
00004286 4E75                       		rts	
00004288                            ; ===========================================================================
00004288                            ; ---------------------------------------------------------------------------
00004288                            ; Labyrinth default water heights
00004288                            ; ---------------------------------------------------------------------------
00004288                            WaterHeight:	incbin	misc\lz_heigh.bin
00004290                            		even
00004290                            ; ===========================================================================
00004290                            
00004290                            ; ---------------------------------------------------------------------------
00004290                            ; Labyrinth dynamic water routines
00004290                            ; ---------------------------------------------------------------------------
00004290                            
00004290                            LZDynamicWater:				; XREF: LZWaterEffects
00004290 7000                       		moveq	#0,d0
00004292 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004296 D040                       		add.w	d0,d0
00004298 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
0000429C 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000042A0 7200                       		moveq	#0,d1
000042A2 1238 F64C                  		move.b	($FFFFF64C).w,d1
000042A6 3038 F64A                  		move.w	($FFFFF64A).w,d0
000042AA 9078 F648                  		sub.w	($FFFFF648).w,d0
000042AE 6700                       		beq.s	locret_3C5A
000042B0 6400                       		bcc.s	loc_3C56
000042B2 4441                       		neg.w	d1
000042B4                            
000042B4                            loc_3C56:
000042B4 D378 F648                  		add.w	d1,($FFFFF648).w
000042B8                            
000042B8                            locret_3C5A:
000042B8 4E75                       		rts	
000042BA                            ; ===========================================================================
000042BA 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000042BC 0000                       		dc.w DynWater_LZ2-DynWater_Index
000042BE 0000                       		dc.w DynWater_LZ3-DynWater_Index
000042C0 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000042C2                            ; ===========================================================================
000042C2                            
000042C2                            DynWater_LZ1:				; XREF: DynWater_Index
000042C2 3038 F700                  		move.w	($FFFFF700).w,d0
000042C6 1438 F64D                  		move.b	($FFFFF64D).w,d2
000042CA 6600                       		bne.s	loc_3CD0
000042CC 323C 00B8                  		move.w	#$B8,d1
000042D0 0C40 0600                  		cmpi.w	#$600,d0
000042D4 6500                       		bcs.s	loc_3CB4
000042D6 323C 0108                  		move.w	#$108,d1
000042DA 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000042E0 6500                       		bcs.s	loc_3CBA
000042E2 0C40 0C00                  		cmpi.w	#$C00,d0
000042E6 6500                       		bcs.s	loc_3CB4
000042E8 323C 0318                  		move.w	#$318,d1
000042EC 0C40 1080                  		cmpi.w	#$1080,d0
000042F0 6500                       		bcs.s	loc_3CB4
000042F2 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000042F8 323C 05C8                  		move.w	#$5C8,d1
000042FC 0C40 1380                  		cmpi.w	#$1380,d0
00004300 6500                       		bcs.s	loc_3CB4
00004302 323C 03A8                  		move.w	#$3A8,d1
00004306 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000430A 6600                       		bne.s	loc_3CB4
0000430C 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004312                            
00004312                            loc_3CB4:
00004312 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004316 4E75                       		rts	
00004318                            ; ===========================================================================
00004318                            
00004318                            loc_3CBA:				; XREF: DynWater_LZ1
00004318 0C40 0C80                  		cmpi.w	#$C80,d0
0000431C 65F4                       		bcs.s	loc_3CB4
0000431E 323C 00E8                  		move.w	#$E8,d1
00004322 0C40 1500                  		cmpi.w	#$1500,d0
00004326 65EA                       		bcs.s	loc_3CB4
00004328 323C 0108                  		move.w	#$108,d1
0000432C 60E4                       		bra.s	loc_3CB4
0000432E                            ; ===========================================================================
0000432E                            
0000432E                            loc_3CD0:				; XREF: DynWater_LZ1
0000432E 5302                       		subq.b	#1,d2
00004330 6600                       		bne.s	locret_3CF4
00004332 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004338 6400                       		bcc.s	locret_3CF4
0000433A 323C 03A8                  		move.w	#$3A8,d1
0000433E 0C40 1300                  		cmpi.w	#$1300,d0
00004342 6500                       		bcs.s	loc_3CF0
00004344 323C 0108                  		move.w	#$108,d1
00004348 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000434E                            
0000434E                            loc_3CF0:
0000434E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004352                            
00004352                            locret_3CF4:
00004352 4E75                       		rts	
00004354                            ; ===========================================================================
00004354                            
00004354                            DynWater_LZ2:				; XREF: DynWater_Index
00004354 3038 F700                  		move.w	($FFFFF700).w,d0
00004358 323C 0328                  		move.w	#$328,d1
0000435C 0C40 0500                  		cmpi.w	#$500,d0
00004360 6500                       		bcs.s	loc_3D12
00004362 323C 03C8                  		move.w	#$3C8,d1
00004366 0C40 0B00                  		cmpi.w	#$B00,d0
0000436A 6500                       		bcs.s	loc_3D12
0000436C 323C 0428                  		move.w	#$428,d1
00004370                            
00004370                            loc_3D12:
00004370 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004374 4E75                       		rts	
00004376                            ; ===========================================================================
00004376                            
00004376                            DynWater_LZ3:				; XREF: DynWater_Index
00004376 3038 F700                  		move.w	($FFFFF700).w,d0
0000437A 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000437E 6600                       		bne.s	loc_3D5E
00004380 323C 0500                  		move.w	#$500,d1
00004384 0C40 0600                  		cmpi.w	#$600,d0
00004388 6500                       		bcs.s	loc_3D54
0000438A 0C40 1B00                  		cmpi.w	#$1B00,d0
0000438E 6500                       		bcs.s	loc_3D54
00004390 323C 0850                  		move.w	#$850,d1
00004394                            
00004394                            loc_3D54:
00004394 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004398 31C1 F648                  		move.w	d1,($FFFFF648).w
0000439C 4E75                       		rts	
0000439E                            ; ===========================================================================
0000439E                            
0000439E                            loc_3D5E:				; XREF: DynWater_LZ3
0000439E 5302                       		subq.b	#1,d2
000043A0 6600                       		bne.s	loc_3DA8
000043A2 323C 04C8                  		move.w	#$4C8,d1
000043A6 0C40 0770                  		cmpi.w	#$770,d0
000043AA 6500                       		bcs.s	loc_3DA2
000043AC 323C 0308                  		move.w	#$308,d1
000043B0 0C40 1400                  		cmpi.w	#$1400,d0
000043B4 6500                       		bcs.s	loc_3DA2
000043B6 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000043BC 6700                       		beq.s	loc_3D8E
000043BE 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000043C4 6400                       		bcc.s	loc_3D8E
000043C6 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000043CC 6400                       		bcc.s	loc_3DA2
000043CE                            
000043CE                            loc_3D8E:
000043CE 323C 0508                  		move.w	#$508,d1
000043D2 31C1 F648                  		move.w	d1,($FFFFF648).w
000043D6 0C40 1770                  		cmpi.w	#$1770,d0
000043DA 6500                       		bcs.s	loc_3DA2
000043DC 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000043E2                            
000043E2                            loc_3DA2:
000043E2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043E6 4E75                       		rts	
000043E8                            ; ===========================================================================
000043E8                            
000043E8                            loc_3DA8:
000043E8 5302                       		subq.b	#1,d2
000043EA 6600                       		bne.s	loc_3DD2
000043EC 323C 0508                  		move.w	#$508,d1
000043F0 0C40 1860                  		cmpi.w	#$1860,d0
000043F4 6500                       		bcs.s	loc_3DCC
000043F6 323C 0188                  		move.w	#$188,d1
000043FA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000043FE 6400                       		bcc.s	loc_3DC6
00004400 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004404 6600                       		bne.s	loc_3DCC
00004406                            
00004406                            loc_3DC6:
00004406 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000440C                            
0000440C                            loc_3DCC:
0000440C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004410 4E75                       		rts	
00004412                            ; ===========================================================================
00004412                            
00004412                            loc_3DD2:
00004412 5302                       		subq.b	#1,d2
00004414 6600                       		bne.s	loc_3E0E
00004416 323C 0188                  		move.w	#$188,d1
0000441A 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000441E 6500                       		bcs.s	loc_3E04
00004420 323C 0900                  		move.w	#$900,d1
00004424 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004428 6500                       		bcs.s	loc_3E04
0000442A 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004430 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004436 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000443C 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004442 4E75                       		rts	
00004444                            ; ===========================================================================
00004444                            
00004444                            loc_3E04:
00004444 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004448 31C1 F648                  		move.w	d1,($FFFFF648).w
0000444C 4E75                       		rts	
0000444E                            ; ===========================================================================
0000444E                            
0000444E                            loc_3E0E:
0000444E 0C40 1E00                  		cmpi.w	#$1E00,d0
00004452 6500                       		bcs.s	locret_3E1A
00004454 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000445A                            
0000445A                            locret_3E1A:
0000445A 4E75                       		rts	
0000445C                            ; ===========================================================================
0000445C                            
0000445C                            DynWater_SBZ3:				; XREF: DynWater_Index
0000445C 323C 0228                  		move.w	#$228,d1
00004460 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004466 6500                       		bcs.s	loc_3E2C
00004468 323C 04C8                  		move.w	#$4C8,d1
0000446C                            
0000446C                            loc_3E2C:
0000446C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004470 4E75                       		rts
00004472                            
00004472                            ; ---------------------------------------------------------------------------
00004472                            ; Labyrinth Zone "wind tunnels"	subroutine
00004472                            ; ---------------------------------------------------------------------------
00004472                            
00004472                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004472                            
00004472                            
00004472                            LZWindTunnels:				; XREF: LZWaterEffects
00004472 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004476 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000447A 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004480 7000                       		moveq	#0,d0
00004482 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004486 E748                       		lsl.w	#3,d0
00004488 D4C0                       		adda.w	d0,a2
0000448A 7200                       		moveq	#0,d1
0000448C 4A38 FE11                  		tst.b	($FFFFFE11).w
00004490 6600                       		bne.s	loc_3E56
00004492 7201                       		moveq	#1,d1
00004494 514A                       		subq.w	#8,a2
00004496                            
00004496                            loc_3E56:
00004496 43F8 D000                  		lea	($FFFFD000).w,a1
0000449A                            
0000449A                            LZWind_Loop:
0000449A 3029 0008                  		move.w	8(a1),d0
0000449E B052                       		cmp.w	(a2),d0
000044A0 6500 0000                  		bcs.w	loc_3EF4
000044A4 B06A 0004                  		cmp.w	4(a2),d0
000044A8 6400 0000                  		bcc.w	loc_3EF4
000044AC 3429 000C                  		move.w	$C(a1),d2
000044B0 B46A 0002                  		cmp.w	2(a2),d2
000044B4 6500                       		bcs.s	loc_3EF4
000044B6 B46A 0006                  		cmp.w	6(a2),d2
000044BA 6400                       		bcc.s	loc_3EF4
000044BC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000044C0 0200 003F                  		andi.b	#$3F,d0
000044C4 6600                       		bne.s	loc_3E90
000044C6 303C 00D0                  		move.w	#$D0,d0
000044CA 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play rushing water sound
000044D0                            
000044D0                            loc_3E90:
000044D0 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000044D4 6600 0000                  		bne.w	locret_3F0A
000044D8 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000044DE 6400                       		bcc.s	loc_3F06
000044E0 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000044E6 0440 0080                  		subi.w	#$80,d0
000044EA B052                       		cmp.w	(a2),d0
000044EC 6400                       		bcc.s	LZWind_Move
000044EE 7002                       		moveq	#2,d0
000044F0 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000044F6 6600                       		bne.s	loc_3EBA
000044F8 4440                       		neg.w	d0
000044FA                            
000044FA                            loc_3EBA:
000044FA D169 000C                  		add.w	d0,$C(a1)
000044FE                            
000044FE                            LZWind_Move:
000044FE 5869 0008                  		addq.w	#4,8(a1)
00004502 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004508 337C 0000 0012             		move.w	#0,$12(a1)
0000450E 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004514 08E9 0001 0022             		bset	#1,$22(a1)
0000451A 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004520 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004522 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004526                            
00004526                            LZWind_MoveDown:
00004526 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000452C 6700                       		beq.s	locret_3EF2	; if not, branch
0000452E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004532                            
00004532                            locret_3EF2:
00004532 4E75                       		rts	
00004534                            ; ===========================================================================
00004534                            
00004534                            loc_3EF4:				; XREF: LZWindTunnels
00004534 504A                       		addq.w	#8,a2
00004536 51C9 FF62                  		dbf	d1,LZWind_Loop
0000453A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000453E 6700                       		beq.s	locret_3F0A
00004540 137C 0000 001C             		move.b	#0,$1C(a1)
00004546                            
00004546                            loc_3F06:
00004546 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000454A                            
0000454A                            locret_3F0A:
0000454A 4E75                       		rts	
0000454C                            ; End of function LZWindTunnels
0000454C                            
0000454C                            ; ===========================================================================
0000454C 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004554 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004566 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004574                            					; XREF: LZWindTunnels
00004574                            		even
00004574                            
00004574                            ; ---------------------------------------------------------------------------
00004574                            ; Labyrinth Zone water slide subroutine
00004574                            ; ---------------------------------------------------------------------------
00004574                            
00004574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004574                            
00004574                            
00004574                            LZWaterSlides:				; XREF: LZWaterEffects
00004574 43F8 D000                  		lea	($FFFFD000).w,a1
00004578 0829 0001 0022             		btst	#1,$22(a1)
0000457E 6600                       		bne.s	loc_3F6A
00004580 3029 000C                  		move.w	$C(a1),d0
00004584 E248                       		lsr.w	#1,d0
00004586 0240 0380                  		andi.w	#$380,d0
0000458A 1229 0008                  		move.b	8(a1),d1
0000458E 0241 007F                  		andi.w	#$7F,d1
00004592 D041                       		add.w	d1,d0
00004594 45F8 A400                  		lea	($FFFFA400).w,a2
00004598 1032 0000                  		move.b	(a2,d0.w),d0
0000459C 45FA 0000                  		lea	byte_3FCF(pc),a2
000045A0 7206                       		moveq	#6,d1
000045A2                            
000045A2                            loc_3F62:
000045A2 B022                       		cmp.b	-(a2),d0
000045A4 57C9 FFFC                  		dbeq	d1,loc_3F62
000045A8 6700                       		beq.s	LZSlide_Move
000045AA                            
000045AA                            loc_3F6A:
000045AA 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000045AE 6700                       		beq.s	locret_3F7A
000045B0 337C 0005 003E             		move.w	#5,$3E(a1)
000045B6 4238 F7CA                  		clr.b	($FFFFF7CA).w
000045BA                            
000045BA                            locret_3F7A:
000045BA 4E75                       		rts	
000045BC                            ; ===========================================================================
000045BC                            
000045BC                            LZSlide_Move:				; XREF: LZWaterSlides
000045BC 0C41 0003                  		cmpi.w	#3,d1
000045C0 6400                       		bcc.s	loc_3F84
000045C2 4E71                       		nop	
000045C4                            
000045C4                            loc_3F84:
000045C4 08A9 0000 0022             		bclr	#0,$22(a1)
000045CA 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000045CE 1340 0014                  		move.b	d0,$14(a1)
000045D2 6A00                       		bpl.s	loc_3F9A
000045D4 08E9 0000 0022             		bset	#0,$22(a1)
000045DA                            
000045DA                            loc_3F9A:
000045DA 4229 0015                  		clr.b	$15(a1)
000045DE 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000045E4 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000045EA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000045EE 0200 001F                  		andi.b	#$1F,d0
000045F2 6600                       		bne.s	locret_3FBE
000045F4 303C 00D0                  		move.w	#$D0,d0
000045F8 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play water sound
000045FE                            
000045FE                            locret_3FBE:
000045FE 4E75                       		rts	
00004600                            ; End of function LZWaterSlides
00004600                            
00004600                            ; ===========================================================================
00004600 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000460F 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004610                            		even
00004610                            
00004610                            ; ---------------------------------------------------------------------------
00004610                            ; Subroutine to	move Sonic in demo mode
00004610                            ; ---------------------------------------------------------------------------
00004610                            
00004610                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004610                            
00004610                            
00004610                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004610 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004614 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004616 4E75                       		rts	
00004618                            ; ===========================================================================
00004618                            
00004618                            ; This is an unused subroutine for recording a demo
00004618                            
00004618                            MoveDemo_Record:
00004618 43F9 0008 0000             		lea	($80000).l,a1
0000461E 3038 F790                  		move.w	($FFFFF790).w,d0
00004622 D2C0                       		adda.w	d0,a1
00004624 1038 F604                  		move.b	($FFFFF604).w,d0
00004628 B011                       		cmp.b	(a1),d0
0000462A 6600                       		bne.s	loc_3FFA
0000462C 5229 0001                  		addq.b	#1,1(a1)
00004630 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004636 6700                       		beq.s	loc_3FFA
00004638 4E75                       		rts	
0000463A                            ; ===========================================================================
0000463A                            
0000463A                            loc_3FFA:				; XREF: MoveDemo_Record
0000463A 1340 0002                  		move.b	d0,2(a1)
0000463E 137C 0000 0003             		move.b	#0,3(a1)
00004644 5478 F790                  		addq.w	#2,($FFFFF790).w
00004648 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000464E 4E75                       		rts	
00004650                            ; ===========================================================================
00004650                            
00004650                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004650 4A38 F604                  		tst.b	($FFFFF604).w
00004654 6A00                       		bpl.s	loc_4022
00004656 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000465A 6B00                       		bmi.s	loc_4022
0000465C 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004662                            
00004662                            loc_4022:
00004662 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004668 7000                       		moveq	#0,d0
0000466A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000466E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004674 6600                       		bne.s	loc_4038
00004676 7006                       		moveq	#6,d0
00004678                            
00004678                            loc_4038:
00004678 E548                       		lsl.w	#2,d0
0000467A 2271 0000                  		movea.l	(a1,d0.w),a1
0000467E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004682 6A00                       		bpl.s	loc_4056
00004684 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000468A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000468E 5340                       		subq.w	#1,d0
00004690 E548                       		lsl.w	#2,d0
00004692 2271 0000                  		movea.l	(a1,d0.w),a1
00004696                            
00004696                            loc_4056:
00004696 3038 F790                  		move.w	($FFFFF790).w,d0
0000469A D2C0                       		adda.w	d0,a1
0000469C 1011                       		move.b	(a1),d0
0000469E 41F8 F604                  		lea	($FFFFF604).w,a0
000046A2 1200                       		move.b	d0,d1
000046A4 1410                       		move.b	(a0),d2
000046A6 B500                       		eor.b	d2,d0
000046A8 10C1                       		move.b	d1,(a0)+
000046AA C001                       		and.b	d1,d0
000046AC 10C0                       		move.b	d0,(a0)+
000046AE 5338 F792                  		subq.b	#1,($FFFFF792).w
000046B2 6400                       		bcc.s	locret_407E
000046B4 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000046BA 5478 F790                  		addq.w	#2,($FFFFF790).w
000046BE                            
000046BE                            locret_407E:
000046BE 4E75                       		rts	
000046C0                            ; End of function MoveSonicInDemo
000046C0                            
000046C0                            ; ===========================================================================
000046C0                            ; ---------------------------------------------------------------------------
000046C0                            ; Demo sequence	pointers
000046C0                            ; ---------------------------------------------------------------------------
000046C0                            Demo_Index:
000046C0                            	include "_inc\Demo pointers for intro.asm"
000046C0                            ; ---------------------------------------------------------------------------
000046C0                            ; Demo sequence	pointers
000046C0                            ; ---------------------------------------------------------------------------
000046C0 0000 0000                  	dc.l Demo_GHZ
000046C4 0000 0000                  	dc.l Demo_GHZ
000046C8 0000 0000                  	dc.l Demo_MZ
000046CC 0000 0000                  	dc.l Demo_MZ
000046D0 0000 0000                  	dc.l Demo_SYZ
000046D4 0000 0000                  	dc.l Demo_SYZ
000046D8 0000 0000                  	dc.l Demo_SS
000046DC 0000 0000                  	dc.l Demo_SS
000046DC 0000 0000                  	dc.l Demo_SS
000046E0                            
000046E0                            Demo_EndIndex:
000046E0                            	include "_inc\Demo pointers for ending.asm"
000046E0                            ; ---------------------------------------------------------------------------
000046E0                            ; Demo (ending) sequence pointers
000046E0                            ; ---------------------------------------------------------------------------
000046E0 0000 0000                  	dc.l Demo_EndGHZ1
000046E4 0000 0000                  	dc.l Demo_EndMZ
000046E8 0000 0000                  	dc.l Demo_EndSYZ
000046EC 0000 0000                  	dc.l Demo_EndLZ
000046F0 0000 0000                  	dc.l Demo_EndSLZ
000046F4 0000 0000                  	dc.l Demo_EndSBZ1
000046F8 0000 0000                  	dc.l Demo_EndSBZ2
000046FC 0000 0000                  	dc.l Demo_EndGHZ2
000046FC 0000 0000                  	dc.l Demo_EndGHZ2
00004700                            
00004700 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004710 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004720 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004730                            		even
00004730                            
00004730                            ; ---------------------------------------------------------------------------
00004730                            ; Collision index loading subroutine
00004730                            ; ---------------------------------------------------------------------------
00004730                            
00004730                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004730                            
00004730                            
00004730                            ColIndexLoad:				; XREF: Level
00004730 7000                       		moveq	#0,d0
00004732 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004736 E548                       		lsl.w	#2,d0
00004738 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000473E 4E75                       		rts	
00004740                            ; End of function ColIndexLoad
00004740                            
00004740                            ; ===========================================================================
00004740                            ; ---------------------------------------------------------------------------
00004740                            ; Collision index pointers
00004740                            ; ---------------------------------------------------------------------------
00004740                            ColPointers:
00004740                            	include "_inc\Collision index pointers.asm"
00004740                            ; ---------------------------------------------------------------------------
00004740                            ; Collision index pointers
00004740                            ; ---------------------------------------------------------------------------
00004740 0000 0000                  	dc.l Col_GHZ
00004744 0000 0000                  	dc.l Col_LZ
00004748 0000 0000                  	dc.l Col_MZ
0000474C 0000 0000                  	dc.l Col_SLZ
00004750 0000 0000                  	dc.l Col_SYZ
00004754 0000 0000                  	dc.l Col_SBZ
00004758 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
0000475C 0000 0000                  	dc.l Col_BHZ
0000475C 0000 0000                  	dc.l Col_BHZ
00004760                            
00004760                            ; ---------------------------------------------------------------------------
00004760                            ; Oscillating number subroutine
00004760                            ; ---------------------------------------------------------------------------
00004760                            
00004760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004760                            
00004760                            
00004760                            OscillateNumInit:			; XREF: Level
00004760 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004764 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000476A 7220                       		moveq	#$20,d1
0000476C                            
0000476C                            Osc_Loop:
0000476C 32DA                       		move.w	(a2)+,(a1)+
0000476E 51C9 FFFC                  		dbf	d1,Osc_Loop
00004772 4E75                       		rts	
00004774                            ; End of function OscillateNumInit
00004774                            
00004774                            ; ===========================================================================
00004774 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004778 0000 0080                  		dc.w 0,	$80
0000477C 0000 0080                  		dc.w 0,	$80
00004780 0000 0080                  		dc.w 0,	$80
00004784 0000 0080                  		dc.w 0,	$80
00004788 0000 0080                  		dc.w 0,	$80
0000478C 0000 0080                  		dc.w 0,	$80
00004790 0000 0080                  		dc.w 0,	$80
00004794 0000 0080                  		dc.w 0,	$80
00004798 0000 50F0                  		dc.w 0,	$50F0
0000479C 011E 2080                  		dc.w $11E, $2080
000047A0 00B4 3080                  		dc.w $B4, $3080
000047A4 010E 5080                  		dc.w $10E, $5080
000047A8 01C2 7080                  		dc.w $1C2, $7080
000047AC 0276 0080                  		dc.w $276, $80
000047B0 0000 0080                  		dc.w 0,	$80
000047B4 0000                       		dc.w 0
000047B6                            		even
000047B6                            
000047B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047B6                            
000047B6                            
000047B6                            OscillateNumDo:				; XREF: Level
000047B6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000047BC 6400                       		bcc.s	locret_41C4
000047BE 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000047C2 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000047C8 3619                       		move.w	(a1)+,d3
000047CA 720F                       		moveq	#$F,d1
000047CC                            
000047CC                            loc_4184:
000047CC 341A                       		move.w	(a2)+,d2
000047CE 381A                       		move.w	(a2)+,d4
000047D0 0303                       		btst	d1,d3
000047D2 6600                       		bne.s	loc_41A4
000047D4 3029 0002                  		move.w	2(a1),d0
000047D8 D042                       		add.w	d2,d0
000047DA 3340 0002                  		move.w	d0,2(a1)
000047DE D151                       		add.w	d0,0(a1)
000047E0 B811                       		cmp.b	0(a1),d4
000047E2 6200                       		bhi.s	loc_41BA
000047E4 03C3                       		bset	d1,d3
000047E6 6000                       		bra.s	loc_41BA
000047E8                            ; ===========================================================================
000047E8                            
000047E8                            loc_41A4:				; XREF: OscillateNumDo
000047E8 3029 0002                  		move.w	2(a1),d0
000047EC 9042                       		sub.w	d2,d0
000047EE 3340 0002                  		move.w	d0,2(a1)
000047F2 D151                       		add.w	d0,0(a1)
000047F4 B811                       		cmp.b	0(a1),d4
000047F6 6300                       		bls.s	loc_41BA
000047F8 0383                       		bclr	d1,d3
000047FA                            
000047FA                            loc_41BA:
000047FA 5849                       		addq.w	#4,a1
000047FC 51C9 FFCE                  		dbf	d1,loc_4184
00004800 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004804                            
00004804                            locret_41C4:
00004804 4E75                       		rts	
00004806                            ; End of function OscillateNumDo
00004806                            
00004806                            ; ===========================================================================
00004806 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000480A 0002 0018                  		dc.w 2,	$18
0000480E 0002 0020                  		dc.w 2,	$20
00004812 0002 0030                  		dc.w 2,	$30
00004816 0004 0020                  		dc.w 4,	$20
0000481A 0008 0008                  		dc.w 8,	8
0000481E 0008 0040                  		dc.w 8,	$40
00004822 0004 0040                  		dc.w 4,	$40
00004826 0002 0050                  		dc.w 2,	$50
0000482A 0002 0050                  		dc.w 2,	$50
0000482E 0002 0020                  		dc.w 2,	$20
00004832 0003 0030                  		dc.w 3,	$30
00004836 0005 0050                  		dc.w 5,	$50
0000483A 0007 0070                  		dc.w 7,	$70
0000483E 0002 0010                  		dc.w 2,	$10
00004842 0002 0010                  		dc.w 2,	$10
00004846                            		even
00004846                            
00004846                            ; ---------------------------------------------------------------------------
00004846                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004846                            ; ---------------------------------------------------------------------------
00004846                            
00004846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004846                            
00004846                            
00004846                            ChangeRingFrame:			; XREF: Level
00004846 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000484A 6A00                       		bpl.s	loc_421C
0000484C 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004852 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004856 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000485C                            
0000485C                            loc_421C:
0000485C 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004860 6A00                       		bpl.s	loc_4232
00004862 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004868 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0000486C 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004872                            
00004872                            loc_4232:
00004872 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004876 6A00                       		bpl.s	loc_4250
00004878 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000487E 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004882 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004888 6500                       		bcs.s	loc_4250
0000488A 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004890                            
00004890                            loc_4250:
00004890 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004894 6700                       		beq.s	locret_4272
00004896 7000                       		moveq	#0,d0
00004898 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000489C D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000048A0 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000048A4 EF58                       		rol.w	#7,d0
000048A6 0240 0003                  		andi.w	#3,d0
000048AA 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000048AE 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000048B2                            
000048B2                            locret_4272:
000048B2 4E75                       		rts	
000048B4                            ; End of function ChangeRingFrame
000048B4                            
000048B4                            ; ---------------------------------------------------------------------------
000048B4                            ; End-of-act signpost pattern loading subroutine
000048B4                            ; ---------------------------------------------------------------------------
000048B4                            
000048B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048B4                            
000048B4                            
000048B4                            SignpostArtLoad:			; XREF: Level
000048B4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000048B8 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000048BC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000048C2 6700                       		beq.s	Signpost_Exit	; if yes, branch
000048C4 3038 F700                  		move.w	($FFFFF700).w,d0
000048C8 3238 F72A                  		move.w	($FFFFF72A).w,d1
000048CC 0441 0100                  		subi.w	#$100,d1
000048D0 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000048D2 6D00                       		blt.s	Signpost_Exit	; if not, branch
000048D4 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000048D8 6700                       		beq.s	Signpost_Exit
000048DA B278 F728                  		cmp.w	($FFFFF728).w,d1
000048DE 6700                       		beq.s	Signpost_Exit
000048E0 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000048E4 7012                       		moveq	#$12,d0
000048E6 6000 CEBC                  		bra.w	LoadPLC2	; load signpost	patterns
000048EA                            ; ===========================================================================
000048EA                            
000048EA                            Signpost_Exit:
000048EA 4E75                       		rts	
000048EC                            ; End of function SignpostArtLoad
000048EC                            
000048EC                            ; ===========================================================================
000048EC                            Demo_GHZ:	incbin	demodata\i_ghz.bin
0000496C                            Demo_MZ:	incbin	demodata\i_mz.bin
00004A9C                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004B1C                            Demo_SS:	incbin	demodata\i_ss.bin
00004C1C                            ; ===========================================================================
00004C1C                            
00004C1C                            ; ---------------------------------------------------------------------------
00004C1C                            ; Special Stage
00004C1C                            ; ---------------------------------------------------------------------------
00004C1C                            
00004C1C                            SpecialStage:				; XREF: GameModeArray
00004C1C 303C 00CA                  		move.w	#$CA,d0
00004C20 6100 C96C                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004C24 6100 D514                  		bsr.w	Pal_MakeFlash
00004C28 46FC 2700                  		move	#$2700,sr
00004C2C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C32 3CBC 8B03                  		move.w	#$8B03,(a6)
00004C36 3CBC 8004                  		move.w	#$8004,(a6)
00004C3A 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004C40 3CBC 9011                  		move.w	#$9011,(a6)
00004C44 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C48 0200 00BF                  		andi.b	#$BF,d0
00004C4C 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C52 6100 C862                  		bsr.w	ClearScreen
00004C56 46FC 2300                  		move	#$2300,sr
00004C5A 4BF9 00C0 0004             		lea	($C00004).l,a5
00004C60 3ABC 8F01                  		move.w	#$8F01,(a5)
00004C64 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004C6A 3ABC 9780                  		move.w	#$9780,(a5)
00004C6E 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004C74 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004C7C                            
00004C7C                            loc_463C:
00004C7C 3215                       		move.w	(a5),d1
00004C7E 0801 0001                  		btst	#1,d1
00004C82 66F8                       		bne.s	loc_463C
00004C84 3ABC 8F02                  		move.w	#$8F02,(a5)
00004C88 6100 0000                  		bsr.w	SS_BGLoad
00004C8C 7014                       		moveq	#$14,d0
00004C8E 6100 CC4E                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004C92 43F8 D000                  		lea	($FFFFD000).w,a1
00004C96 7000                       		moveq	#0,d0
00004C98 323C 07FF                  		move.w	#$7FF,d1
00004C9C                            
00004C9C                            SS_ClrObjRam:
00004C9C 22C0                       		move.l	d0,(a1)+
00004C9E 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004CA2                            
00004CA2 43F8 F700                  		lea	($FFFFF700).w,a1
00004CA6 7000                       		moveq	#0,d0
00004CA8 323C 003F                  		move.w	#$3F,d1
00004CAC                            
00004CAC                            SS_ClrRam:
00004CAC 22C0                       		move.l	d0,(a1)+
00004CAE 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004CB2                            
00004CB2 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004CB6 7000                       		moveq	#0,d0
00004CB8 323C 0027                  		move.w	#$27,d1
00004CBC                            
00004CBC                            SS_ClrRam2:
00004CBC 22C0                       		move.l	d0,(a1)+
00004CBE 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004CC2                            
00004CC2 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004CC6 7000                       		moveq	#0,d0
00004CC8 323C 007F                  		move.w	#$7F,d1
00004CCC                            
00004CCC                            SS_ClrNemRam:
00004CCC 22C0                       		move.l	d0,(a1)+
00004CCE 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004CD2                            
00004CD2 4238 F64E                  		clr.b	($FFFFF64E).w
00004CD6 4278 FE02                  		clr.w	($FFFFFE02).w
00004CDA 700A                       		moveq	#$A,d0
00004CDC 6100 D5DC                  		bsr.w	PalLoad1	; load special stage pallet
00004CE0 4EB9 0000 0000             		jsr	SS_Load
00004CE6 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004CEE 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004CF6 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004CFC 6100 0000                  		bsr.w	PalCycle_SS
00004D00 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004D04 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004D08 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004D0E 303C 0089                  		move.w	#$89,d0
00004D12 6100 C874                  		bsr.w	PlaySound	; play special stage BG	music
00004D16 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004D1C 43F9 0000 46C0             		lea	(Demo_Index).l,a1
00004D22 7006                       		moveq	#6,d0
00004D24 E548                       		lsl.w	#2,d0
00004D26 2271 0000                  		movea.l	(a1,d0.w),a1
00004D2A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004D30 5338 F792                  		subq.b	#1,($FFFFF792).w
00004D34 4278 FE20                  		clr.w	($FFFFFE20).w
00004D38 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004D3C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004D42 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004D48                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004D48                            ;		beq.s	SS_NoDebug	; if not, branch
00004D48                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004D48                            ;		beq.s	SS_NoDebug	; if not, branch
00004D48                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004D48                            
00004D48                            SS_NoDebug:
00004D48 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D4C 0000 0040                  		ori.b	#$40,d0
00004D50 33C0 00C0 0004             		move.w	d0,($C00004).l
00004D56 6100 D336                  		bsr.w	Pal_MakeWhite
00004D5A                            
00004D5A                            ; ---------------------------------------------------------------------------
00004D5A                            ; Main Special Stage loop
00004D5A                            ; ---------------------------------------------------------------------------
00004D5A                            
00004D5A                            SS_MainLoop:
00004D5A 6100 C83E                  		bsr.w	PauseGame
00004D5E 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004D64 6100 DF90                  		bsr.w	DelayProgram
00004D68 4A78 F784                          tst.w   ($FFFFF784).w
00004D6C 6700                               beq.s   SS_NotReversed
00004D6E 5378 F784                          subi.w  #1,($FFFFF784).w
00004D72                            
00004D72                            SS_NotReversed:
00004D72 6100 F89C                  		bsr.w	MoveSonicInDemo
00004D76 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004D7C 4EB9 0000 0000             		jsr	ObjectsLoad
00004D82 4EB9 0000 0000             		jsr	BuildSprites
00004D88 4EB9 0000 0000             		jsr	SS_ShowLayout
00004D8E 6100 0000                  		bsr.w	SS_BGAnimate
00004D92 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004D96 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004D98 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004D9C 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004DA0                            
00004DA0                            SS_ChkEnd:
00004DA0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004DA6 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004DAA                            
00004DAA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DAE 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004DB2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004DB8 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004DBE 6500                       		bcs.s	SS_End		; if not, branch
00004DC0 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004DC4                            
00004DC4                            SS_End:
00004DC4 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004DCA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004DD0 4278 F794                  		clr.w	($FFFFF794).w
00004DD4                            
00004DD4                            SS_EndLoop:
00004DD4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DDA 6100 DF1A                  		bsr.w	DelayProgram
00004DDE 6100 F830                  		bsr.w	MoveSonicInDemo
00004DE2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004DE8 4EB9 0000 0000             		jsr	ObjectsLoad
00004DEE 4EB9 0000 0000             		jsr	BuildSprites
00004DF4 4EB9 0000 0000             		jsr	SS_ShowLayout
00004DFA 6100 0000                  		bsr.w	SS_BGAnimate
00004DFE 5378 F794                  		subq.w	#1,($FFFFF794).w
00004E02 6A00                       		bpl.s	loc_47D4
00004E04 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004E0A 6100 D34E                  		bsr.w	Pal_ToWhite
00004E0E                            
00004E0E                            loc_47D4:
00004E0E 4A78 F614                  		tst.w	($FFFFF614).w
00004E12 66C0                       		bne.s	SS_EndLoop
00004E14                            
00004E14 46FC 2700                  		move	#$2700,sr
00004E18 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E1E 3CBC 8230                  		move.w	#$8230,(a6)
00004E22 3CBC 8407                  		move.w	#$8407,(a6)
00004E26 3CBC 9001                  		move.w	#$9001,(a6)
00004E2A 6100 C68A                  		bsr.w	ClearScreen
00004E2E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004E38 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004E3E 6100 C7F2                  		bsr.w	NemDec
00004E42 4EB9 0000 0000             		jsr	Hud_Base
00004E48 46FC 2300                  		move	#$2300,sr
00004E4C 7011                       		moveq	#$11,d0
00004E4E 6100 D486                  		bsr.w	PalLoad2	; load results screen pallet
00004E52 7000                       		moveq	#0,d0
00004E54 6100 C94E                  		bsr.w	LoadPLC2
00004E58 701B                       		moveq	#$1B,d0
00004E5A 6100 C916                  		bsr.w	LoadPLC		; load results screen patterns
00004E5E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004E64 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004E6A 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004E6E C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004E72 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004E76 303C 008E                  		move.w	#$8E,d0
00004E7A 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004E80 43F8 D000                  		lea	($FFFFD000).w,a1
00004E84 7000                       		moveq	#0,d0
00004E86 323C 07FF                  		move.w	#$7FF,d1
00004E8A                            
00004E8A                            SS_EndClrObjRam:
00004E8A 22C0                       		move.l	d0,(a1)+
00004E8C 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004E90                            
00004E90 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004E96                            
00004E96                            SS_NormalExit:
00004E96 6100 C702                  		bsr.w	PauseGame
00004E9A 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004EA0 6100 DE54                  		bsr.w	DelayProgram
00004EA4 4EB9 0000 0000             		jsr	ObjectsLoad
00004EAA 4EB9 0000 0000             		jsr	BuildSprites
00004EB0 6100 C92C                  		bsr.w	RunPLC_RAM
00004EB4 4A78 FE02                  		tst.w	($FFFFFE02).w
00004EB8 67DC                       		beq.s	SS_NormalExit
00004EBA 4AB8 F680                  		tst.l	($FFFFF680).w
00004EBE 66D6                       		bne.s	SS_NormalExit
00004EC0 303C 00CA                  		move.w	#$CA,d0
00004EC4 6100 C6C8                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004EC8 6100 D270                  		bsr.w	Pal_MakeFlash
00004ECC 4E75                       		rts	
00004ECE                            ; ===========================================================================
00004ECE                            
00004ECE                            SS_ToSegaScreen:
00004ECE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004ED4 4E75                       		rts
00004ED6                            
00004ED6                            ; ---------------------------------------------------------------------------
00004ED6                            ; Special stage	background loading subroutine
00004ED6                            ; ---------------------------------------------------------------------------
00004ED6                            
00004ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004ED6                            
00004ED6                            
00004ED6                            SS_BGLoad:				; XREF: SpecialStage
00004ED6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004EDC 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004EE2 303C 4051                  		move.w	#$4051,d0
00004EE6 6100 CA28                  		bsr.w	EniDec
00004EEA 263C 5000 0001             		move.l	#$50000001,d3
00004EF0 45F9 00FF 0080             		lea	($FF0080).l,a2
00004EF6 7E06                       		moveq	#6,d7
00004EF8                            
00004EF8                            loc_48BE:
00004EF8 2003                       		move.l	d3,d0
00004EFA 7C03                       		moveq	#3,d6
00004EFC 7800                       		moveq	#0,d4
00004EFE 0C47 0003                  		cmpi.w	#3,d7
00004F02 6400                       		bcc.s	loc_48CC
00004F04 7801                       		moveq	#1,d4
00004F06                            
00004F06                            loc_48CC:
00004F06 7A07                       		moveq	#7,d5
00004F08                            
00004F08                            loc_48CE:
00004F08 224A                       		movea.l	a2,a1
00004F0A 0A04 0001                  		eori.b	#1,d4
00004F0E 6600                       		bne.s	loc_48E2
00004F10 0C47 0006                  		cmpi.w	#6,d7
00004F14 6600                       		bne.s	loc_48F2
00004F16 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F1C                            
00004F1C                            loc_48E2:
00004F1C 48E7 F800                  		movem.l	d0-d4,-(sp)
00004F20 7207                       		moveq	#7,d1
00004F22 7407                       		moveq	#7,d2
00004F24 6100 C6EC                  		bsr.w	ShowVDPGraphics
00004F28 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004F2C                            
00004F2C                            loc_48F2:
00004F2C 0680 0010 0000             		addi.l	#$100000,d0
00004F32 51CD FFD4                  		dbf	d5,loc_48CE
00004F36 0680 0380 0000             		addi.l	#$3800000,d0
00004F3C 0A04 0001                  		eori.b	#1,d4
00004F40 51CE FFC4                  		dbf	d6,loc_48CC
00004F44 0683 1000 0000             		addi.l	#$10000000,d3
00004F4A 6A00                       		bpl.s	loc_491C
00004F4C 4843                       		swap	d3
00004F4E 0683 0000 C000             		addi.l	#$C000,d3
00004F54 4843                       		swap	d3
00004F56                            
00004F56                            loc_491C:
00004F56 D4FC 0080                  		adda.w	#$80,a2
00004F5A 51CF FF9C                  		dbf	d7,loc_48BE
00004F5E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F64 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004F6A 303C 4000                  		move.w	#$4000,d0
00004F6E 6100 C9A0                  		bsr.w	EniDec
00004F72 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F78 203C 4000 0003             		move.l	#$40000003,d0
00004F7E 723F                       		moveq	#$3F,d1
00004F80 741F                       		moveq	#$1F,d2
00004F82 6100 C68E                  		bsr.w	ShowVDPGraphics
00004F86 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F8C 203C 5000 0003             		move.l	#$50000003,d0
00004F92 723F                       		moveq	#$3F,d1
00004F94 743F                       		moveq	#$3F,d2
00004F96 6100 C67A                  		bsr.w	ShowVDPGraphics
00004F9A 4E75                       		rts	
00004F9C                            ; End of function SS_BGLoad
00004F9C                            
00004F9C                            ; ---------------------------------------------------------------------------
00004F9C                            ; Pallet cycling routine - special stage
00004F9C                            ; ---------------------------------------------------------------------------
00004F9C                            
00004F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F9C                            
00004F9C                            
00004F9C                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004F9C 4A78 F63A                  		tst.w	($FFFFF63A).w
00004FA0 6600                       		bne.s	locret_49E6
00004FA2 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004FA6 6A00                       		bpl.s	locret_49E6
00004FA8 4DF9 00C0 0004             		lea	($C00004).l,a6
00004FAE 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004FB2 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004FB6 0240 001F                  		andi.w	#$1F,d0
00004FBA E548                       		lsl.w	#2,d0
00004FBC 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004FC2 D0C0                       		adda.w	d0,a0
00004FC4 1018                       		move.b	(a0)+,d0
00004FC6 6A00                       		bpl.s	loc_4992
00004FC8 303C 01FF                  		move.w	#$1FF,d0
00004FCC                            
00004FCC                            loc_4992:
00004FCC 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004FD0 7000                       		moveq	#0,d0
00004FD2 1018                       		move.b	(a0)+,d0
00004FD4 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004FD8 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004FDE 43F1 0000                  		lea	(a1,d0.w),a1
00004FE2 303C 8200                  		move.w	#-$7E00,d0
00004FE6 1019                       		move.b	(a1)+,d0
00004FE8 3C80                       		move.w	d0,(a6)
00004FEA 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004FEE 303C 8400                  		move.w	#-$7C00,d0
00004FF2 1018                       		move.b	(a0)+,d0
00004FF4 3C80                       		move.w	d0,(a6)
00004FF6 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005000 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005008 7000                       		moveq	#0,d0
0000500A 1018                       		move.b	(a0)+,d0
0000500C 6B00                       		bmi.s	loc_49E8
0000500E 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005014 D2C0                       		adda.w	d0,a1
00005016 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
0000501A 24D9                       		move.l	(a1)+,(a2)+
0000501C 24D9                       		move.l	(a1)+,(a2)+
0000501E 24D9                       		move.l	(a1)+,(a2)+
00005020                            
00005020                            locret_49E6:
00005020 4E75                       		rts	
00005022                            ; ===========================================================================
00005022                            
00005022                            loc_49E8:				; XREF: PalCycle_SS
00005022 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005026 0C40 008A                  		cmpi.w	#$8A,d0
0000502A 6500                       		bcs.s	loc_49F4
0000502C 5241                       		addq.w	#1,d1
0000502E                            
0000502E                            loc_49F4:
0000502E C2FC 002A                  		mulu.w	#$2A,d1
00005032 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005038 D2C1                       		adda.w	d1,a1
0000503A 0240 007F                  		andi.w	#$7F,d0
0000503E 0880 0000                  		bclr	#0,d0
00005042 6700                       		beq.s	loc_4A18
00005044 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00005048 24D1                       		move.l	(a1),(a2)+
0000504A 24E9 0004                  		move.l	4(a1),(a2)+
0000504E 24E9 0008                  		move.l	8(a1),(a2)+
00005052                            
00005052                            loc_4A18:
00005052 D2FC 000C                  		adda.w	#$C,a1
00005056 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000505A 0C40 000A                  		cmpi.w	#$A,d0
0000505E 6500                       		bcs.s	loc_4A2E
00005060 0440 000A                  		subi.w	#$A,d0
00005064 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00005068                            
00005068                            loc_4A2E:
00005068 3200                       		move.w	d0,d1
0000506A D040                       		add.w	d0,d0
0000506C D041                       		add.w	d1,d0
0000506E D2C0                       		adda.w	d0,a1
00005070 24D9                       		move.l	(a1)+,(a2)+
00005072 34D9                       		move.w	(a1)+,(a2)+
00005074 4E75                       		rts	
00005076                            ; End of function PalCycle_SS
00005076                            
00005076                            ; ===========================================================================
00005076 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005086                            					; XREF: PalCycle_SS
00005086 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005096 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000050A6 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000050B6 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000050C6 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000050D6 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000050E6 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
000050F6                            		even
000050F6 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005104                            					; XREF: PalCycle_SS
00005104                            		even
00005104                            
00005104                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
0000514C                            		even
0000514C                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000521E                            		even
0000521E                            
0000521E                            ; ---------------------------------------------------------------------------
0000521E                            ; Subroutine to	make the special stage background animated
0000521E                            ; ---------------------------------------------------------------------------
0000521E                            
0000521E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000521E                            
0000521E                            
0000521E                            SS_BGAnimate:				; XREF: SpecialStage
0000521E 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005222 6600                       		bne.s	loc_4BF6
00005224 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000522A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005230                            
00005230                            loc_4BF6:
00005230 0C40 0008                  		cmpi.w	#8,d0
00005234 6400                       		bcc.s	loc_4C4E
00005236 0C40 0006                  		cmpi.w	#6,d0
0000523A 6600                       		bne.s	loc_4C10
0000523C 5278 F718                  		addq.w	#1,($FFFFF718).w
00005240 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005244 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000524A                            
0000524A                            loc_4C10:
0000524A 7000                       		moveq	#0,d0
0000524C 3038 F708                  		move.w	($FFFFF708).w,d0
00005250 4440                       		neg.w	d0
00005252 4840                       		swap	d0
00005254 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000525A 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000525E 7609                       		moveq	#9,d3
00005260                            
00005260                            loc_4C26:
00005260 302B 0002                  		move.w	2(a3),d0
00005264 6100 DAC2                  		bsr.w	CalcSine
00005268 7400                       		moveq	#0,d2
0000526A 1419                       		move.b	(a1)+,d2
0000526C C1C2                       		muls.w	d2,d0
0000526E E080                       		asr.l	#8,d0
00005270 36C0                       		move.w	d0,(a3)+
00005272 1419                       		move.b	(a1)+,d2
00005274 4882                       		ext.w	d2
00005276 D55B                       		add.w	d2,(a3)+
00005278 51CB FFE6                  		dbf	d3,loc_4C26
0000527C 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005280 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005286 6000                       		bra.s	loc_4C7E
00005288                            ; ===========================================================================
00005288                            
00005288                            loc_4C4E:				; XREF: SS_BGAnimate
00005288 0C40 000C                  		cmpi.w	#$C,d0
0000528C 6600                       		bne.s	loc_4C74
0000528E 5378 F718                  		subq.w	#1,($FFFFF718).w
00005292 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005296 243C 0001 8000             		move.l	#$18000,d2
0000529C 7206                       		moveq	#6,d1
0000529E                            
0000529E                            loc_4C64:
0000529E 2013                       		move.l	(a3),d0
000052A0 9082                       		sub.l	d2,d0
000052A2 26C0                       		move.l	d0,(a3)+
000052A4 0482 0000 2000             		subi.l	#$2000,d2
000052AA 51C9 FFF2                  		dbf	d1,loc_4C64
000052AE                            
000052AE                            loc_4C74:
000052AE 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052B2 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000052B8                            
000052B8                            loc_4C7E:
000052B8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000052BC 3038 F718                  		move.w	($FFFFF718).w,d0
000052C0 4440                       		neg.w	d0
000052C2 4840                       		swap	d0
000052C4 7600                       		moveq	#0,d3
000052C6 161A                       		move.b	(a2)+,d3
000052C8 3438 F70C                  		move.w	($FFFFF70C).w,d2
000052CC 4442                       		neg.w	d2
000052CE 0242 00FF                  		andi.w	#$FF,d2
000052D2 E54A                       		lsl.w	#2,d2
000052D4                            
000052D4                            loc_4C9A:
000052D4 301B                       		move.w	(a3)+,d0
000052D6 544B                       		addq.w	#2,a3
000052D8 7200                       		moveq	#0,d1
000052DA 121A                       		move.b	(a2)+,d1
000052DC 5341                       		subq.w	#1,d1
000052DE                            
000052DE                            loc_4CA4:
000052DE 2380 2000                  		move.l	d0,(a1,d2.w)
000052E2 5842                       		addq.w	#4,d2
000052E4 0242 03FC                  		andi.w	#$3FC,d2
000052E8 51C9 FFF4                  		dbf	d1,loc_4CA4
000052EC 51CB FFE6                  		dbf	d3,loc_4C9A
000052F0 4E75                       		rts	
000052F2                            ; End of function SS_BGAnimate
000052F2                            
000052F2                            ; ===========================================================================
000052F2 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000052FE                            		even
000052FE 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005306                            		even
00005306 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000531A                            		even
0000531A                            					; XREF: SS_BGAnimate
0000531A                            ; ===========================================================================
0000531A                            
0000531A                            ; ---------------------------------------------------------------------------
0000531A                            ; Continue screen
0000531A                            ; ---------------------------------------------------------------------------
0000531A                            
0000531A                            ContinueScreen:				; XREF: GameModeArray
0000531A 6100 CCF4                  		bsr.w	Pal_FadeFrom
0000531E 46FC 2700                  		move	#$2700,sr
00005322 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005326 0200 00BF                  		andi.b	#$BF,d0
0000532A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005330 4DF9 00C0 0004             		lea	($C00004).l,a6
00005336 3CBC 8004                  		move.w	#$8004,(a6)
0000533A 3CBC 8700                  		move.w	#$8700,(a6)
0000533E 6100 C176                  		bsr.w	ClearScreen
00005342 43F8 D000                  		lea	($FFFFD000).w,a1
00005346 7000                       		moveq	#0,d0
00005348 323C 07FF                  		move.w	#$7FF,d1
0000534C                            
0000534C                            Cont_ClrObjRam:
0000534C 22C0                       		move.l	d0,(a1)+
0000534E 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005352                            
00005352 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000535C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005362 6100 C2CE                  		bsr.w	NemDec
00005366 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005370 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005376 6100 C2BA                  		bsr.w	NemDec
0000537A 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005384 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000538A 6100 C2A6                  		bsr.w	NemDec
0000538E 720A                       		moveq	#10,d1
00005390 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005396 7012                       		moveq	#$12,d0
00005398 6100 CF20                  		bsr.w	PalLoad1	; load continue	screen pallet
0000539C 103C 0090                  		move.b	#$90,d0
000053A0 6100 C1E6                  		bsr.w	PlaySound	; play continue	music
000053A4 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000053AA 42B8 F700                  		clr.l	($FFFFF700).w
000053AE 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000053B6 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000053BC 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000053C2 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000053C8 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000053CE 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000053D4 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000053DA 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000053E0 4EB9 0000 0000             		jsr	ObjectsLoad
000053E6 4EB9 0000 0000             		jsr	BuildSprites
000053EC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000053F0 0000 0040                  		ori.b	#$40,d0
000053F4 33C0 00C0 0004             		move.w	d0,($C00004).l
000053FA 6100 CB6A                  		bsr.w	Pal_FadeTo
000053FE                            
000053FE                            ; ---------------------------------------------------------------------------
000053FE                            ; Continue screen main loop
000053FE                            ; ---------------------------------------------------------------------------
000053FE                            
000053FE                            Cont_MainLoop:
000053FE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005404 6100 D8F0                  		bsr.w	DelayProgram
00005408 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000540E 6400                       		bcc.s	loc_4DF2
00005410 46FC 2700                  		move	#$2700,sr
00005414 3238 F614                  		move.w	($FFFFF614).w,d1
00005418 82FC 003C                  		divu.w	#$3C,d1
0000541C 0281 0000 000F             		andi.l	#$F,d1
00005422 4EB9 0000 0000             		jsr	ContScrCounter
00005428 46FC 2300                  		move	#$2300,sr
0000542C                            
0000542C                            loc_4DF2:
0000542C 4EB9 0000 0000             		jsr	ObjectsLoad
00005432 4EB9 0000 0000             		jsr	BuildSprites
00005438 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000543E 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005440 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005446 64B6                       		bcc.s	Cont_MainLoop
00005448 4A78 F614                  		tst.w	($FFFFF614).w
0000544C 6600 FFB0                  		bne.w	Cont_MainLoop
00005450 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005456 4E75                       		rts	
00005458                            ; ===========================================================================
00005458                            
00005458                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005458 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000545E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005464 7000                       		moveq	#0,d0
00005466 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000546A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000546E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005472 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005476 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000547A 4E75                       		rts	
0000547C                            ; ===========================================================================
0000547C                            
0000547C                            ; ---------------------------------------------------------------------------
0000547C                            ; Object 80 - Continue screen elements
0000547C                            ; ---------------------------------------------------------------------------
0000547C                            
0000547C                            Obj80:					; XREF: Obj_Index
0000547C 7000                       		moveq	#0,d0
0000547E 1028 0024                  		move.b	$24(a0),d0
00005482 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005486 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000548A                            ; ===========================================================================
0000548A 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000548C 0000                       		dc.w Obj80_Display-Obj80_Index
0000548E 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005490 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005492                            ; ===========================================================================
00005492                            
00005492                            Obj80_Main:				; XREF: Obj80_Index
00005492 5428 0024                  		addq.b	#2,$24(a0)
00005496 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000549E 317C 8500 0002             		move.w	#$8500,2(a0)
000054A4 117C 0000 0001             		move.b	#0,1(a0)
000054AA 117C 003C 0019             		move.b	#$3C,$19(a0)
000054B0 317C 0120 0008             		move.w	#$120,8(a0)
000054B6 317C 00C0 000A             		move.w	#$C0,$A(a0)
000054BC 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000054C2                            
000054C2                            Obj80_Display:				; XREF: Obj80_Index
000054C2 4EF9 0000 0000             		jmp	DisplaySprite
000054C8                            ; ===========================================================================
000054C8                            Obj80_MiniSonicPos:
000054C8 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000054DA 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000054E6                            ; ===========================================================================
000054E6                            
000054E6                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000054E6 2248                       		movea.l	a0,a1
000054E8 45F9 0000 54C8             		lea	(Obj80_MiniSonicPos).l,a2
000054EE 7200                       		moveq	#0,d1
000054F0 1238 FE18                  		move.b	($FFFFFE18).w,d1
000054F4 5501                       		subq.b	#2,d1
000054F6 6400                       		bcc.s	loc_4EC4
000054F8 4EF9 0000 0000             		jmp	DeleteObject
000054FE                            ; ===========================================================================
000054FE                            
000054FE                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000054FE 7601                       		moveq	#1,d3
00005500 0C01 000E                  		cmpi.b	#$E,d1
00005504 6500                       		bcs.s	loc_4ED0
00005506 7600                       		moveq	#0,d3
00005508 720E                       		moveq	#$E,d1
0000550A                            
0000550A                            loc_4ED0:
0000550A 1401                       		move.b	d1,d2
0000550C 0202 0001                  		andi.b	#1,d2
00005510                            
00005510                            Obj80_MiniSonLoop:
00005510 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005514 335A 0008                  		move.w	(a2)+,8(a1)
00005518 4A02                       		tst.b	d2
0000551A 6700                       		beq.s	loc_4EEA
0000551C 0469 000A 0008             		subi.w	#$A,8(a1)
00005522                            
00005522                            loc_4EEA:
00005522 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005528 137C 0006 001A             		move.b	#6,$1A(a1)
0000552E 137C 0006 0024             		move.b	#6,$24(a1)
00005534 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000553C 337C 8551 0002             		move.w	#$8551,2(a1)
00005542 137C 0000 0001             		move.b	#0,1(a1)
00005548 43E9 0040                  		lea	$40(a1),a1
0000554C 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005550 43E9 FFC0                  		lea	-$40(a1),a1
00005554 1343 0028                  		move.b	d3,$28(a1)
00005558                            
00005558                            Obj80_ChkType:				; XREF: Obj80_Index
00005558 4A28 0028                  		tst.b	$28(a0)
0000555C 6700                       		beq.s	loc_4F40
0000555E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005564 6500                       		bcs.s	loc_4F40
00005566 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000556A 0200 0001                  		andi.b	#1,d0
0000556E 6600                       		bne.s	loc_4F40
00005570 4A78 D010                  		tst.w	($FFFFD010).w
00005574 6600                       		bne.s	Obj80_Delete
00005576 4E75                       		rts	
00005578                            ; ===========================================================================
00005578                            
00005578                            loc_4F40:				; XREF: Obj80_ChkType
00005578 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000557C 0200 000F                  		andi.b	#$F,d0
00005580 6600                       		bne.s	Obj80_Display2
00005582 0868 0000 001A             		bchg	#0,$1A(a0)
00005588                            
00005588                            Obj80_Display2:
00005588 4EF9 0000 0000             		jmp	DisplaySprite
0000558E                            ; ===========================================================================
0000558E                            
0000558E                            Obj80_Delete:				; XREF: Obj80_ChkType
0000558E 4EF9 0000 0000             		jmp	DeleteObject
00005594                            ; ===========================================================================
00005594                            
00005594                            ; ---------------------------------------------------------------------------
00005594                            ; Object 81 - Sonic on the continue screen
00005594                            ; ---------------------------------------------------------------------------
00005594                            
00005594                            Obj81:					; XREF: Obj_Index
00005594 7000                       		moveq	#0,d0
00005596 1028 0024                  		move.b	$24(a0),d0
0000559A 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
0000559E 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000055A2 4EF9 0000 0000             		jmp	DisplaySprite
000055A8                            ; ===========================================================================
000055A8 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000055AA 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000055AC 0000                       		dc.w Obj81_Animate-Obj81_Index
000055AE 0000                       		dc.w Obj81_Run-Obj81_Index
000055B0                            ; ===========================================================================
000055B0                            
000055B0                            Obj81_Main:				; XREF: Obj81_Index
000055B0 5428 0024                  		addq.b	#2,$24(a0)
000055B4 317C 00A0 0008             		move.w	#$A0,8(a0)
000055BA 317C 00C0 000C             		move.w	#$C0,$C(a0)
000055C0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000055C8 317C 0780 0002             		move.w	#$780,2(a0)
000055CE 117C 0004 0001             		move.b	#4,1(a0)
000055D4 117C 0002 0018             		move.b	#2,$18(a0)
000055DA 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000055E0 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000055E6                            
000055E6                            Obj81_ChkLand:				; XREF: Obj81_Index
000055E6 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000055EC 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000055EE 5428 0024                  		addq.b	#2,$24(a0)
000055F2 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000055F6 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000055FE 317C 8500 0002             		move.w	#$8500,2(a0)
00005604 117C 0000 001C             		move.b	#0,$1C(a0)
0000560A 6000                       		bra.s	Obj81_Animate
0000560C                            ; ===========================================================================
0000560C                            
0000560C                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
0000560C 4EB9 0000 0000             		jsr	SpeedToPos
00005612 4EB9 0000 0000             		jsr	Sonic_Animate
00005618 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000561E                            ; ===========================================================================
0000561E                            
0000561E                            Obj81_Animate:				; XREF: Obj81_Index
0000561E 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005622 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005624 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000562A 4EF9 0000 0000             		jmp	AnimateSprite
00005630                            ; ===========================================================================
00005630                            
00005630                            Obj81_GetUp:				; XREF: Obj81_Animate
00005630 5428 0024                  		addq.b	#2,$24(a0)
00005634 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000563C 317C 0780 0002             		move.w	#$780,2(a0)
00005642 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005648 4268 0014                  		clr.w	$14(a0)
0000564C 5168 000C                  		subq.w	#8,$C(a0)
00005650 103C 00E0                  		move.b	#$E0,d0
00005654 6100 BF38                  		bsr.w	PlaySound_Special ; fade out music
00005658                            
00005658                            Obj81_Run:				; XREF: Obj81_Index
00005658 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000565E 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005660 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005666 6000                       		bra.s	Obj81_ShowRun
00005668                            ; ===========================================================================
00005668                            
00005668                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005668 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000566E                            
0000566E                            Obj81_ShowRun:				; XREF: Obj81_Run
0000566E 4EB9 0000 0000             		jsr	SpeedToPos
00005674 4EB9 0000 0000             		jsr	Sonic_Animate
0000567A 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005680                            ; ===========================================================================
00005680                            Ani_obj81:
00005680                            	include "_anim\obj81.asm"
00005680                            ; ---------------------------------------------------------------------------
00005680                            ; Animation script - Sonic on the continue screen
00005680                            ; ---------------------------------------------------------------------------
00005680 0000                       		dc.w byte_504A-Ani_obj81
00005682 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000568E 00                         		even
0000568E 00                         		even
0000568E                            
0000568E                            ; ---------------------------------------------------------------------------
0000568E                            ; Sprite mappings - Continue screen
0000568E                            ; ---------------------------------------------------------------------------
0000568E                            Map_obj80:
0000568E                            	include "_maps\obj80.asm"
0000568E                            ; ---------------------------------------------------------------------------
0000568E                            ; Sprite mappings - Continue screen
0000568E                            ; ---------------------------------------------------------------------------
0000568E 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005692 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005696 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
0000569A 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000569E 0B                         byte_5066:	dc.b $B
0000569F F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000056A4 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000056A9 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000056AE F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000056B3 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000056B8 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000056BD F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000056C2 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000056C7 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000056CC 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000056D1 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000056D6 03                         byte_509E:	dc.b 3
000056D7 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000056DC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056E1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000056E6 03                         byte_50AE:	dc.b 3
000056E7 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000056EC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056F1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000056F6 03                         byte_50BE:	dc.b 3
000056F7 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000056FC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005701 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005706 02                         byte_50CE:	dc.b 2
00005707 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
0000570C 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005711 01                         byte_50D9:	dc.b 1
00005712 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005717 01                         byte_50DF:	dc.b 1
00005718 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
0000571E 00                         		even
0000571E 00                         		even
0000571E                            
0000571E                            ; ===========================================================================
0000571E                            ; ---------------------------------------------------------------------------
0000571E                            ; Ending sequence in Green Hill	Zone
0000571E                            ; ---------------------------------------------------------------------------
0000571E                            
0000571E                            EndingSequence:				; XREF: GameModeArray
0000571E 103C 00E4                  		move.b	#$E4,d0
00005722 6100 BE6A                  		bsr.w	PlaySound_Special ; stop music
00005726 6100 C8E8                  		bsr.w	Pal_FadeFrom
0000572A 43F8 D000                  		lea	($FFFFD000).w,a1
0000572E 7000                       		moveq	#0,d0
00005730 323C 07FF                  		move.w	#$7FF,d1
00005734                            
00005734                            End_ClrObjRam:
00005734 22C0                       		move.l	d0,(a1)+
00005736 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000573A                            
0000573A 43F8 F628                  		lea	($FFFFF628).w,a1
0000573E 7000                       		moveq	#0,d0
00005740 323C 0015                  		move.w	#$15,d1
00005744                            
00005744                            End_ClrRam:
00005744 22C0                       		move.l	d0,(a1)+
00005746 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000574A                            
0000574A 43F8 F700                  		lea	($FFFFF700).w,a1
0000574E 7000                       		moveq	#0,d0
00005750 323C 003F                  		move.w	#$3F,d1
00005754                            
00005754                            End_ClrRam2:
00005754 22C0                       		move.l	d0,(a1)+
00005756 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000575A                            
0000575A 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000575E 7000                       		moveq	#0,d0
00005760 323C 0047                  		move.w	#$47,d1
00005764                            
00005764                            End_ClrRam3:
00005764 22C0                       		move.l	d0,(a1)+
00005766 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000576A                            
0000576A 46FC 2700                  		move	#$2700,sr
0000576E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005772 0200 00BF                  		andi.b	#$BF,d0
00005776 33C0 00C0 0004             		move.w	d0,($C00004).l
0000577C 6100 BD38                  		bsr.w	ClearScreen
00005780 4DF9 00C0 0004             		lea	($C00004).l,a6
00005786 3CBC 8B03                  		move.w	#$8B03,(a6)
0000578A 3CBC 8230                  		move.w	#$8230,(a6)
0000578E 3CBC 8407                  		move.w	#$8407,(a6)
00005792 3CBC 857C                  		move.w	#$857C,(a6)
00005796 3CBC 9001                  		move.w	#$9001,(a6)
0000579A 3CBC 8004                  		move.w	#$8004,(a6)
0000579E 3CBC 8720                  		move.w	#$8720,(a6)
000057A2 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000057A8 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000057AC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000057B2 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000057B8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000057BE 6700                       		beq.s	End_LoadData	; if yes, branch
000057C0 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000057C6                            
000057C6                            End_LoadData:
000057C6 701C                       		moveq	#$1C,d0
000057C8 6100 C114                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000057CC 4EB9 0000 0000             		jsr	Hud_Base
000057D2 6100 0000                  		bsr.w	LevelSizeLoad
000057D6 6100 0000                  		bsr.w	DeformBgLayer
000057DA 08F8 0002 F754             		bset	#2,($FFFFF754).w
000057E0 6100 0000                  		bsr.w	MainLoadBlockLoad
000057E4 6100 0000                  		bsr.w	LoadTilesFromStart
000057E8 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000057F0 46FC 2300                  		move	#$2300,sr
000057F4 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000057FA 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000057FE 6100 C28E                  		bsr.w	KosDec
00005802 7003                       		moveq	#3,d0
00005804 6100 CAB4                  		bsr.w	PalLoad1	; load Sonic's pallet
00005808 303C 008B                  		move.w	#$8B,d0
0000580C 6100 BD7A                  		bsr.w	PlaySound	; play ending sequence music
00005810 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005816 6700                       		beq.s	End_LoadSonic	; if not, branch
00005818 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000581E                            
0000581E                            End_LoadSonic:
0000581E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005824 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000582A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005830 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005836 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
0000583C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005842 4EB9 0000 0000             		jsr	ObjPosLoad
00005848 4EB9 0000 0000             		jsr	ObjectsLoad
0000584E 4EB9 0000 0000             		jsr	BuildSprites
00005854 7000                       		moveq	#0,d0
00005856 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000585A 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000585E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005862 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005866 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000586A 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000586E 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005872 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005876 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000587A 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000587E 6100 EEE0                  		bsr.w	OscillateNumInit
00005882 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005888 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000588E 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005894 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000589A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058A0 6100 D454                  		bsr.w	DelayProgram
000058A4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000058A8 0000 0040                  		ori.b	#$40,d0
000058AC 33C0 00C0 0004             		move.w	d0,($C00004).l
000058B2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000058B8 6100 C6AC                  		bsr.w	Pal_FadeTo
000058BC                            
000058BC                            ; ---------------------------------------------------------------------------
000058BC                            ; Main ending sequence loop
000058BC                            ; ---------------------------------------------------------------------------
000058BC                            
000058BC                            End_MainLoop:
000058BC 6100 BCDC                  		bsr.w	PauseGame
000058C0 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058C6 6100 D42E                  		bsr.w	DelayProgram
000058CA 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000058CE 6100 0000                  		bsr.w	End_MoveSonic
000058D2 4EB9 0000 0000             		jsr	ObjectsLoad
000058D8 6100 0000                  		bsr.w	DeformBgLayer
000058DC 4EB9 0000 0000             		jsr	BuildSprites
000058E2 4EB9 0000 0000             		jsr	ObjPosLoad
000058E8 6100 C244                  		bsr.w	PalCycle_Load
000058EC 6100 EEC8                  		bsr.w	OscillateNumDo
000058F0 6100 EF54                  		bsr.w	ChangeRingFrame
000058F4 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000058FA 6700                       		beq.s	loc_52DA	; if yes, branch
000058FC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005902 103C 0091                  		move.b	#$91,d0
00005906 6100 BC86                  		bsr.w	PlaySound_Special ; play credits music
0000590A 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005910 4E75                       		rts	
00005912                            ; ===========================================================================
00005912                            
00005912                            loc_52DA:
00005912 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005916 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000591A                            
0000591A 4278 FE02                  		clr.w	($FFFFFE02).w
0000591E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005924 4278 F794                  		clr.w	($FFFFF794).w
00005928                            
00005928                            End_AllEmlds:				; XREF: loc_5334
00005928 6100 BC70                  		bsr.w	PauseGame
0000592C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005932 6100 D3C2                  		bsr.w	DelayProgram
00005936 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000593A 6100 0000                  		bsr.w	End_MoveSonic
0000593E 4EB9 0000 0000             		jsr	ObjectsLoad
00005944 6100 0000                  		bsr.w	DeformBgLayer
00005948 4EB9 0000 0000             		jsr	BuildSprites
0000594E 4EB9 0000 0000             		jsr	ObjPosLoad
00005954 6100 EE60                  		bsr.w	OscillateNumDo
00005958 6100 EEEC                  		bsr.w	ChangeRingFrame
0000595C 5378 F794                  		subq.w	#1,($FFFFF794).w
00005960 6A00                       		bpl.s	loc_5334
00005962 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005968 6100 C7F0                  		bsr.w	Pal_ToWhite
0000596C                            
0000596C                            loc_5334:
0000596C 4A78 FE02                  		tst.w	($FFFFFE02).w
00005970 6700 FFB6                  		beq.w	End_AllEmlds
00005974 4278 FE02                  		clr.w	($FFFFFE02).w
00005978 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000597E 4BF9 00C0 0004             		lea	($C00004).l,a5
00005984 4DF9 00C0 0000             		lea	($C00000).l,a6
0000598A 47F8 F700                  		lea	($FFFFF700).w,a3
0000598E 49F8 A400                  		lea	($FFFFA400).w,a4
00005992 343C 4000                  		move.w	#$4000,d2
00005996 6100 0000                  		bsr.w	LoadTilesFromStart2
0000599A 7013                       		moveq	#$13,d0
0000599C 6100 C91C                  		bsr.w	PalLoad1	; load ending pallet
000059A0 6100 C6EC                  		bsr.w	Pal_MakeWhite
000059A4 6000 FF16                  		bra.w	End_MainLoop
000059A8                            
000059A8                            ; ---------------------------------------------------------------------------
000059A8                            ; Subroutine controlling Sonic on the ending sequence
000059A8                            ; ---------------------------------------------------------------------------
000059A8                            
000059A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059A8                            
000059A8                            
000059A8                            End_MoveSonic:				; XREF: End_MainLoop
000059A8 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000059AC 6600                       		bne.s	End_MoveSonic2
000059AE 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000059B4 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000059B6 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059BA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000059C0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000059C6 4E75                       		rts	
000059C8                            ; ===========================================================================
000059C8                            
000059C8                            End_MoveSonic2:				; XREF: End_MoveSonic
000059C8 5500                       		subq.b	#2,d0
000059CA 6600                       		bne.s	End_MoveSonic3
000059CC 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000059D2 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000059D4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059D8 7000                       		moveq	#0,d0
000059DA 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000059DE 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000059E2 31C0 D014                  		move.w	d0,($FFFFD014).w
000059E6 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000059EC 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000059F2 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000059F8 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000059FE 4E75                       		rts	
00005A00                            ; ===========================================================================
00005A00                            
00005A00                            End_MoveSonic3:				; XREF: End_MoveSonic
00005A00 5500                       		subq.b	#2,d0
00005A02 6600                       		bne.s	End_MoveSonExit
00005A04 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A08 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005A0E 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005A14 4278 D024                  		clr.w	($FFFFD024).w
00005A18                            
00005A18                            End_MoveSonExit:
00005A18 4E75                       		rts	
00005A1A                            ; End of function End_MoveSonic
00005A1A                            
00005A1A                            ; ===========================================================================
00005A1A                            ; ---------------------------------------------------------------------------
00005A1A                            ; Object 87 - Sonic on ending sequence
00005A1A                            ; ---------------------------------------------------------------------------
00005A1A                            
00005A1A                            Obj87:					; XREF: Obj_Index
00005A1A 7000                       		moveq	#0,d0
00005A1C 1028 0025                  		move.b	$25(a0),d0
00005A20 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005A24 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005A28 4EF9 0000 0000             		jmp	DisplaySprite
00005A2E                            ; ===========================================================================
00005A2E 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005A32 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005A36 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005A3A 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005A3E 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005A42                            ; ===========================================================================
00005A42                            
00005A42                            Obj87_Main:				; XREF: Obj87_Index
00005A42 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A48 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005A4A 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005A50 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005A56 4E75                       		rts	
00005A58                            ; ===========================================================================
00005A58                            
00005A58                            Obj87_Main2:				; XREF: Obj87_Main
00005A58 5428 0025                  		addq.b	#2,$25(a0)
00005A5C 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005A64 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A6A 117C 0004 0001             		move.b	#4,1(a0)
00005A70 4228 0022                  		clr.b	$22(a0)
00005A74 117C 0002 0018             		move.b	#2,$18(a0)
00005A7A 117C 0000 001A             		move.b	#0,$1A(a0)
00005A80 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005A86                            
00005A86                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005A86 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005A8A 6600                       		bne.s	Obj87_Wait
00005A8C 5428 0025                  		addq.b	#2,$25(a0)
00005A90 317C 0001 001C             		move.w	#1,$1C(a0)
00005A96 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005A9C                            
00005A9C                            Obj87_Wait:
00005A9C 4E75                       		rts	
00005A9E                            ; ===========================================================================
00005A9E                            
00005A9E                            Obj87_LookUp:				; XREF: Obj87_Index
00005A9E 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005AA6 6600                       		bne.s	locret_5480
00005AA8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005AAE 317C 005A 0030             		move.w	#$5A,$30(a0)
00005AB4 5428 0025                  		addq.b	#2,$25(a0)
00005AB8                            
00005AB8                            locret_5480:
00005AB8 4E75                       		rts	
00005ABA                            ; ===========================================================================
00005ABA                            
00005ABA                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005ABA 5368 0030                  		subq.w	#1,$30(a0)
00005ABE 6600                       		bne.s	Obj87_Wait2
00005AC0 43F8 D400                  		lea	($FFFFD400).w,a1
00005AC4 323C 00FF                  		move.w	#$FF,d1
00005AC8                            
00005AC8                            Obj87_ClrLoop:
00005AC8 4299                       		clr.l	(a1)+
00005ACA 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005ACE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005AD4 5428 0025                  		addq.b	#2,$25(a0)
00005AD8 117C 0001 001C             		move.b	#1,$1C(a0)
00005ADE 317C 003C 0030             		move.w	#$3C,$30(a0)
00005AE4                            
00005AE4                            Obj87_Wait2:
00005AE4 4E75                       		rts	
00005AE6                            ; ===========================================================================
00005AE6                            
00005AE6                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005AE6 5368 0030                  		subq.w	#1,$30(a0)
00005AEA 6600                       		bne.s	Obj87_Wait3
00005AEC 5428 0025                  		addq.b	#2,$25(a0)
00005AF0 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005AF6 117C 0002 001C             		move.b	#2,$1C(a0)
00005AFC 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B02                            
00005B02                            Obj87_Wait3:
00005B02 4E75                       		rts	
00005B04                            ; ===========================================================================
00005B04                            
00005B04                            Obj87_Animate:				; XREF: Obj87_Index
00005B04 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005B0A 4EF9 0000 0000             		jmp	AnimateSprite
00005B10                            ; ===========================================================================
00005B10                            
00005B10                            Obj87_Leap:				; XREF: Obj87_Index
00005B10 5368 0030                  		subq.w	#1,$30(a0)
00005B14 6600                       		bne.s	Obj87_Wait4
00005B16 5428 0025                  		addq.b	#2,$25(a0)
00005B1A 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005B22 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005B28 117C 0004 0001             		move.b	#4,1(a0)
00005B2E 4228 0022                  		clr.b	$22(a0)
00005B32 117C 0002 0018             		move.b	#2,$18(a0)
00005B38 117C 0005 001A             		move.b	#5,$1A(a0)
00005B3E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005B44 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B4A 60B8                       		bra.s	Obj87_Animate
00005B4C                            ; ===========================================================================
00005B4C                            
00005B4C                            Obj87_Wait4:				; XREF: Obj87_Leap
00005B4C 4E75                       		rts	
00005B4E                            ; ===========================================================================
00005B4E                            Ani_obj87:
00005B4E                            	include "_anim\obj87.asm"
00005B4E                            ; ---------------------------------------------------------------------------
00005B4E                            ; Animation script - Sonic on the ending sequence
00005B4E                            ; ---------------------------------------------------------------------------
00005B4E 0000                       		dc.w byte_551C-Ani_obj87
00005B50 0000                       		dc.w byte_552A-Ani_obj87
00005B52 0000                       		dc.w byte_5534-Ani_obj87
00005B54 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005B62 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005B6C 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005B74                            		even
00005B74                            		even
00005B74                            
00005B74                            ; ===========================================================================
00005B74                            ; ---------------------------------------------------------------------------
00005B74                            ; Object 88 - chaos emeralds on	the ending sequence
00005B74                            ; ---------------------------------------------------------------------------
00005B74                            
00005B74                            Obj88:					; XREF: Obj_Index
00005B74 7000                       		moveq	#0,d0
00005B76 1028 0024                  		move.b	$24(a0),d0
00005B7A 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005B7E 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005B82 4EF9 0000 0000             		jmp	DisplaySprite
00005B88                            ; ===========================================================================
00005B88 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005B8A 0000                       		dc.w Obj88_Move-Obj88_Index
00005B8C                            ; ===========================================================================
00005B8C                            
00005B8C                            Obj88_Main:				; XREF: Obj88_Index
00005B8C 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005B92 6700                       		beq.s	Obj88_Main2
00005B94 588F                       		addq.l	#4,sp
00005B96 4E75                       		rts	
00005B98                            ; ===========================================================================
00005B98                            
00005B98                            Obj88_Main2:				; XREF: Obj88_Main
00005B98 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005B9E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005BA4 2248                       		movea.l	a0,a1
00005BA6 7600                       		moveq	#0,d3
00005BA8 7401                       		moveq	#1,d2
00005BAA 7205                       		moveq	#5,d1
00005BAC                            
00005BAC                            Obj88_MainLoop:
00005BAC 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005BB0 5429 0024                  		addq.b	#2,$24(a1)
00005BB4 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005BBC 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005BC2 137C 0004 0001             		move.b	#4,1(a1)
00005BC8 137C 0001 0018             		move.b	#1,$18(a1)
00005BCE 3368 0008 0038             		move.w	8(a0),$38(a1)
00005BD4 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005BDA 1342 001C                  		move.b	d2,$1C(a1)
00005BDE 1342 001A                  		move.b	d2,$1A(a1)
00005BE2 5202                       		addq.b	#1,d2
00005BE4 1343 0026                  		move.b	d3,$26(a1)
00005BE8 0603 002A                  		addi.b	#$2A,d3
00005BEC 43E9 0040                  		lea	$40(a1),a1
00005BF0 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005BF4                            
00005BF4                            Obj88_Move:				; XREF: Obj88_Index
00005BF4 3028 003E                  		move.w	$3E(a0),d0
00005BF8 D168 0026                  		add.w	d0,$26(a0)
00005BFC 1028 0026                  		move.b	$26(a0),d0
00005C00 4EB9 0000 2D28             		jsr	(CalcSine).l
00005C06 7800                       		moveq	#0,d4
00005C08 1828 003C                  		move.b	$3C(a0),d4
00005C0C C3C4                       		muls.w	d4,d1
00005C0E E081                       		asr.l	#8,d1
00005C10 C1C4                       		muls.w	d4,d0
00005C12 E080                       		asr.l	#8,d0
00005C14 D268 0038                  		add.w	$38(a0),d1
00005C18 D068 003A                  		add.w	$3A(a0),d0
00005C1C 3141 0008                  		move.w	d1,8(a0)
00005C20 3140 000C                  		move.w	d0,$C(a0)
00005C24 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005C2A 6700                       		beq.s	loc_55FA
00005C2C 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005C32                            
00005C32                            loc_55FA:
00005C32 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005C38 6700                       		beq.s	loc_5608
00005C3A 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005C40                            
00005C40                            loc_5608:
00005C40 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005C46 6700                       		beq.s	locret_5614
00005C48 5368 003A                  		subq.w	#1,$3A(a0)
00005C4C                            
00005C4C                            locret_5614:
00005C4C 4E75                       		rts	
00005C4E                            ; ===========================================================================
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            
00005C4E                            Obj89:					; XREF: Obj_Index
00005C4E 7000                       		moveq	#0,d0
00005C50 1028 0024                  		move.b	$24(a0),d0
00005C54 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005C58 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005C5C                            ; ===========================================================================
00005C5C 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005C5E 0000                       		dc.w Obj89_Move-Obj89_Index
00005C60 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005C62                            ; ===========================================================================
00005C62                            
00005C62                            Obj89_Main:				; XREF: Obj89_Index
00005C62 5428 0024                  		addq.b	#2,$24(a0)
00005C66 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005C6C 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005C72 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005C7A 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005C80 117C 0000 0001             		move.b	#0,1(a0)
00005C86 117C 0000 0018             		move.b	#0,$18(a0)
00005C8C                            
00005C8C                            Obj89_Move:				; XREF: Obj89_Index
00005C8C 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005C92 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005C94 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005C9A 4EB9 0000 0000             		jsr	DisplaySprite
00005CA0                            ; ===========================================================================
00005CA0                            
00005CA0                            Obj89_Delay:				; XREF: Obj89_Move
00005CA0 5428 0024                  		addq.b	#2,$24(a0)
00005CA4 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005CAA                            
00005CAA                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005CAA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005CAE 6A00                       		bpl.s	Obj89_Display
00005CB0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005CB6                            
00005CB6                            Obj89_Display:
00005CB6 4EB9 0000 0000             		jsr	DisplaySprite
00005CBC                            ; ===========================================================================
00005CBC                            ; ---------------------------------------------------------------------------
00005CBC                            ; Sprite mappings - Sonic on the ending	sequence
00005CBC                            ; ---------------------------------------------------------------------------
00005CBC                            Map_obj87:
00005CBC                            	include "_maps\obj87.asm"
00005CBC                            ; ---------------------------------------------------------------------------
00005CBC                            ; Sprite mappings - Sonic on the ending	sequence
00005CBC                            ; ---------------------------------------------------------------------------
00005CBC 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005CC0 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005CC4 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005CC8 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005CCC 02                         byte_5690:	dc.b 2
00005CCD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005CD2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CD7 03                         byte_569B:	dc.b 3
00005CD8 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005CDD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005CE2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CE7 02                         byte_56AB:	dc.b 2
00005CE8 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005CED FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005CF2 02                         byte_56B6:	dc.b 2
00005CF3 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005CF8 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005CFD 02                         byte_56C1:	dc.b 2
00005CFE EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005D03 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005D08 03                         byte_56CC:	dc.b 3
00005D09 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005D0E EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005D13 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005D18 07                         byte_56DC:	dc.b 7
00005D19 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005D1E BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005D23 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005D28 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005D2D DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005D32 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005D37 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005D3C 18                         byte_5700:	dc.b $18
00005D3D 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005D42 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005D47 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005D4C 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005D51 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005D56 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005D5B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005D60 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005D65 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005D6A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005D6F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005D74 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005D79 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005D7E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005D83 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005D88 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005D8D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005D92 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005D97 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005D9C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005DA1 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005DA6 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005DAB F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005DB0 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005DB6 00                         		even
00005DB6 00                         		even
00005DB6                            
00005DB6                            ; ---------------------------------------------------------------------------
00005DB6                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DB6                            ; ---------------------------------------------------------------------------
00005DB6                            Map_obj88:
00005DB6                            	include "_maps\obj88.asm"
00005DB6                            ; ---------------------------------------------------------------------------
00005DB6                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DB6                            ; ---------------------------------------------------------------------------
00005DB6 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005DBA 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005DBE 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005DC2 0000                       		dc.w byte_57AC-Map_obj88
00005DC4 01                         byte_5788:	dc.b 1
00005DC5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005DCA 01                         byte_578E:	dc.b 1
00005DCB F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005DD0 01                         byte_5794:	dc.b 1
00005DD1 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005DD6 01                         byte_579A:	dc.b 1
00005DD7 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005DDC 01                         byte_57A0:	dc.b 1
00005DDD F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005DE2 01                         byte_57A6:	dc.b 1
00005DE3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005DE8 01                         byte_57AC:	dc.b 1
00005DE9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005DEE                            		even
00005DEE                            		even
00005DEE                            
00005DEE                            ; ---------------------------------------------------------------------------
00005DEE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005DEE                            ; ---------------------------------------------------------------------------
00005DEE                            Map_obj89:
00005DEE                            	include "_maps\obj89.asm"
00005DEE                            ; ---------------------------------------------------------------------------
00005DEE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005DEE                            ; ---------------------------------------------------------------------------
00005DEE 0000                       		dc.w byte_57B4-Map_obj89
00005DF0 03                         byte_57B4:	dc.b 3
00005DF1 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005DF6 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005DFB F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005E00                            		even
00005E00                            		even
00005E00                            
00005E00                            ; ===========================================================================
00005E00                            ; ---------------------------------------------------------------------------
00005E00                            ; Credits ending sequence
00005E00                            ; ---------------------------------------------------------------------------
00005E00                            
00005E00                            Credits:				; XREF: GameModeArray
00005E00 6100 B9CE                  		bsr.w	ClearPLC
00005E04 6100 C20A                  		bsr.w	Pal_FadeFrom
00005E08 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E0E 3CBC 8004                  		move.w	#$8004,(a6)
00005E12 3CBC 8230                  		move.w	#$8230,(a6)
00005E16 3CBC 8407                  		move.w	#$8407,(a6)
00005E1A 3CBC 9001                  		move.w	#$9001,(a6)
00005E1E 3CBC 9200                  		move.w	#$9200,(a6)
00005E22 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E26 3CBC 8720                  		move.w	#$8720,(a6)
00005E2A 4238 F64E                  		clr.b	($FFFFF64E).w
00005E2E 6100 B686                  		bsr.w	ClearScreen
00005E32 43F8 D000                  		lea	($FFFFD000).w,a1
00005E36 7000                       		moveq	#0,d0
00005E38 323C 07FF                  		move.w	#$7FF,d1
00005E3C                            
00005E3C                            Cred_ClrObjRam:
00005E3C 22C0                       		move.l	d0,(a1)+
00005E3E 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005E42                            
00005E42 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005E4C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005E52 6100 B7DE                  		bsr.w	NemDec
00005E56 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E5A 7000                       		moveq	#0,d0
00005E5C 323C 001F                  		move.w	#$1F,d1
00005E60                            
00005E60                            Cred_ClrPallet:
00005E60 22C0                       		move.l	d0,(a1)+
00005E62 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005E66                            
00005E66 7003                       		moveq	#3,d0
00005E68 6100 C450                  		bsr.w	PalLoad1	; load Sonic's pallet
00005E6C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005E72 4EB9 0000 0000             		jsr	ObjectsLoad
00005E78 4EB9 0000 0000             		jsr	BuildSprites
00005E7E 6100 0000                  		bsr.w	EndingDemoLoad
00005E82 7000                       		moveq	#0,d0
00005E84 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005E88 E948                       		lsl.w	#4,d0
00005E8A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005E90 45F2 0000                  		lea	(a2,d0.w),a2
00005E94 7000                       		moveq	#0,d0
00005E96 1012                       		move.b	(a2),d0
00005E98 6700                       		beq.s	loc_5862
00005E9A 6100 B8D6                  		bsr.w	LoadPLC		; load level patterns
00005E9E                            
00005E9E                            loc_5862:
00005E9E 7001                       		moveq	#1,d0
00005EA0 6100 B8D0                  		bsr.w	LoadPLC		; load standard	level patterns
00005EA4 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005EAA 6100 C0BA                  		bsr.w	Pal_FadeTo
00005EAE                            
00005EAE                            Cred_WaitLoop:
00005EAE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005EB4 6100 CE40                  		bsr.w	DelayProgram
00005EB8 6100 B924                  		bsr.w	RunPLC_RAM
00005EBC 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005EC0 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005EC2 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005EC6 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005EC8 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005ECE 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005ED2 4E75                       		rts	
00005ED4                            
00005ED4                            ; ---------------------------------------------------------------------------
00005ED4                            ; Ending sequence demo loading subroutine
00005ED4                            ; ---------------------------------------------------------------------------
00005ED4                            
00005ED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005ED4                            
00005ED4                            
00005ED4                            EndingDemoLoad:				; XREF: Credits
00005ED4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005ED8 0240 000F                  		andi.w	#$F,d0
00005EDC D040                       		add.w	d0,d0
00005EDE 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005EE2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005EE6 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005EEA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005EF0 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005EF2 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005EF8 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005EFE 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005F04 7000                       		moveq	#0,d0
00005F06 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005F0A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005F0E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005F12 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005F16 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005F1C 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005F1E 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005F24 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005F28 303C 0008                  		move.w	#8,d0
00005F2C                            
00005F2C                            EndDemo_LampLoad:
00005F2C 24D9                       		move.l	(a1)+,(a2)+
00005F2E 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005F32                            
00005F32                            EndDemo_Exit:
00005F32 4E75                       		rts	
00005F34                            ; End of function EndingDemoLoad
00005F34                            
00005F34                            ; ===========================================================================
00005F34                            ; ---------------------------------------------------------------------------
00005F34                            ; Levels used in the end sequence demos
00005F34                            ; ---------------------------------------------------------------------------
00005F34                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005F44                            
00005F44                            ; ---------------------------------------------------------------------------
00005F44                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005F44                            ; ---------------------------------------------------------------------------
00005F44                            EndDemo_LampVar:
00005F44 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005F46 0A00 062C 000D             		dc.w $A00, $62C, $D
00005F4C 0000 0000                  		dc.l 0
00005F50 0000                       		dc.b 0,	0
00005F52 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005F66 0101                       		dc.b 1,	1
00005F68                            ; ===========================================================================
00005F68                            ; ---------------------------------------------------------------------------
00005F68                            ; "TRY AGAIN" and "END"	screens
00005F68                            ; ---------------------------------------------------------------------------
00005F68                            
00005F68                            TryAgainEnd:				; XREF: Credits
00005F68 6100 B866                  		bsr.w	ClearPLC
00005F6C 6100 C0A2                  		bsr.w	Pal_FadeFrom
00005F70 4DF9 00C0 0004             		lea	($C00004).l,a6
00005F76 3CBC 8004                  		move.w	#$8004,(a6)
00005F7A 3CBC 8230                  		move.w	#$8230,(a6)
00005F7E 3CBC 8407                  		move.w	#$8407,(a6)
00005F82 3CBC 9001                  		move.w	#$9001,(a6)
00005F86 3CBC 9200                  		move.w	#$9200,(a6)
00005F8A 3CBC 8B03                  		move.w	#$8B03,(a6)
00005F8E 3CBC 8720                  		move.w	#$8720,(a6)
00005F92 4238 F64E                  		clr.b	($FFFFF64E).w
00005F96 6100 B51E                  		bsr.w	ClearScreen
00005F9A 43F8 D000                  		lea	($FFFFD000).w,a1
00005F9E 7000                       		moveq	#0,d0
00005FA0 323C 07FF                  		move.w	#$7FF,d1
00005FA4                            
00005FA4                            TryAg_ClrObjRam:
00005FA4 22C0                       		move.l	d0,(a1)+
00005FA6 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005FAA                            
00005FAA 701D                       		moveq	#$1D,d0
00005FAC 6100 B930                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005FB0 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005FB4 7000                       		moveq	#0,d0
00005FB6 323C 001F                  		move.w	#$1F,d1
00005FBA                            
00005FBA                            TryAg_ClrPallet:
00005FBA 22C0                       		move.l	d0,(a1)+
00005FBC 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005FC0                            
00005FC0 7013                       		moveq	#$13,d0
00005FC2 6100 C2F6                  		bsr.w	PalLoad1	; load ending pallet
00005FC6 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005FCA 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005FD0 4EB9 0000 0000             		jsr	ObjectsLoad
00005FD6 4EB9 0000 0000             		jsr	BuildSprites
00005FDC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005FE2 6100 BF82                  		bsr.w	Pal_FadeTo
00005FE6                            
00005FE6                            ; ---------------------------------------------------------------------------
00005FE6                            ; "TRY AGAIN" and "END"	screen main loop
00005FE6                            ; ---------------------------------------------------------------------------
00005FE6                            TryAg_MainLoop:
00005FE6 6100 B5B2                  		bsr.w	PauseGame
00005FEA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005FF0 6100 CD04                  		bsr.w	DelayProgram
00005FF4 4EB9 0000 0000             		jsr	ObjectsLoad
00005FFA 4EB9 0000 0000             		jsr	BuildSprites
00006000 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006006 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006008 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
0000600C 6700                       		beq.s	TryAg_Exit	; if yes, branch
0000600E 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006014 67D0                       		beq.s	TryAg_MainLoop
00006016                            
00006016                            TryAg_Exit:
00006016 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000601C 4E75                       		rts	
0000601E                            
0000601E                            ; ===========================================================================
0000601E                            ; ---------------------------------------------------------------------------
0000601E                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
0000601E                            ; ---------------------------------------------------------------------------
0000601E                            
0000601E                            Obj8B:					; XREF: Obj_Index
0000601E 7000                       		moveq	#0,d0
00006020 1028 0024                  		move.b	$24(a0),d0
00006024 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00006028 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
0000602C 4EF9 0000 0000             		jmp	DisplaySprite
00006032                            ; ===========================================================================
00006032 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006034 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006036 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00006038 0000                       		dc.w loc_5A8E-Obj8B_Index
0000603A                            ; ===========================================================================
0000603A                            
0000603A                            Obj8B_Main:				; XREF: Obj8B_Index
0000603A 5428 0024                  		addq.b	#2,$24(a0)
0000603E 317C 0120 0008             		move.w	#$120,8(a0)
00006044 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000604A 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00006052 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006058 117C 0000 0001             		move.b	#0,1(a0)
0000605E 117C 0002 0018             		move.b	#2,$18(a0)
00006064 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000606A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006070 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00006072 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00006078 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
0000607E 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00006084 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000608A                            
0000608A                            Obj8B_Animate:				; XREF: Obj8B_Index
0000608A 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00006090 4EF9 0000 0000             		jmp	AnimateSprite
00006096                            ; ===========================================================================
00006096                            
00006096                            Obj8B_Juggle:				; XREF: Obj8B_Index
00006096 5428 0024                  		addq.b	#2,$24(a0)
0000609A 7002                       		moveq	#2,d0
0000609C 0828 0000 001C             		btst	#0,$1C(a0)
000060A2 6700                       		beq.s	loc_5A6A
000060A4 4440                       		neg.w	d0
000060A6                            
000060A6                            loc_5A6A:
000060A6 43F8 D800                  		lea	($FFFFD800).w,a1
000060AA 7205                       		moveq	#5,d1
000060AC                            
000060AC                            loc_5A70:
000060AC 1340 003E                  		move.b	d0,$3E(a1)
000060B0 3400                       		move.w	d0,d2
000060B2 E742                       		asl.w	#3,d2
000060B4 D529 0026                  		add.b	d2,$26(a1)
000060B8 43E9 0040                  		lea	$40(a1),a1
000060BC 51C9 FFEE                  		dbf	d1,loc_5A70
000060C0 5228 001A                  		addq.b	#1,$1A(a0)
000060C4 317C 0070 0030             		move.w	#112,$30(a0)
000060CA                            
000060CA                            loc_5A8E:				; XREF: Obj8B_Index
000060CA 5368 0030                  		subq.w	#1,$30(a0)
000060CE 6A00                       		bpl.s	locret_5AA0
000060D0 0868 0000 001C             		bchg	#0,$1C(a0)
000060D6 117C 0002 0024             		move.b	#2,$24(a0)
000060DC                            
000060DC                            locret_5AA0:
000060DC 4E75                       		rts	
000060DE                            ; ===========================================================================
000060DE                            Ani_obj8B:
000060DE                            	include "_anim\obj8B.asm"
000060DE                            ; ---------------------------------------------------------------------------
000060DE                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000060DE                            ; ---------------------------------------------------------------------------
000060DE 0000                       		dc.w byte_5AA8-Ani_obj8B
000060E0 0000                       		dc.w byte_5AAC-Ani_obj8B
000060E2 0000                       		dc.w byte_5AB0-Ani_obj8B
000060E4 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000060E8 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000060EC 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
000060FE                            		even
000060FE                            		even
000060FE                            
000060FE                            ; ===========================================================================
000060FE                            ; ---------------------------------------------------------------------------
000060FE                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000060FE                            ; ---------------------------------------------------------------------------
000060FE                            
000060FE                            Obj8C:					; XREF: Obj_Index
000060FE 7000                       		moveq	#0,d0
00006100 1028 0024                  		move.b	$24(a0),d0
00006104 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006108 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
0000610C 4EF9 0000 0000             		jmp	DisplaySprite
00006112                            ; ===========================================================================
00006112 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006114 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006116                            ; ===========================================================================
00006116                            
00006116                            Obj8C_Main:				; XREF: Obj8C_Index
00006116 2248                       		movea.l	a0,a1
00006118 7400                       		moveq	#0,d2
0000611A 7600                       		moveq	#0,d3
0000611C 7205                       		moveq	#5,d1
0000611E 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006122                            
00006122                            Obj8C_MakeEms:				; XREF: loc_5B42
00006122 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006126 5429 0024                  		addq.b	#2,$24(a1)
0000612A 237C 0000 5DB6 0004        		move.l	#Map_obj88,4(a1)
00006132 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006138 137C 0000 0001             		move.b	#0,1(a1)
0000613E 137C 0001 0018             		move.b	#1,$18(a1)
00006144 337C 0104 0008             		move.w	#$104,8(a1)
0000614A 337C 0120 0038             		move.w	#$120,$38(a1)
00006150 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006156 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000615C 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006162 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006166                            
00006166                            Obj8C_ChkEms:
00006166 7000                       		moveq	#0,d0
00006168 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000616C 5340                       		subq.w	#1,d0
0000616E 6500                       		bcs.s	loc_5B42
00006170                            
00006170                            Obj8C_ChkEmLoop:
00006170 B433 0000                  		cmp.b	(a3,d0.w),d2
00006174 6600                       		bne.s	loc_5B3E
00006176 5202                       		addq.b	#1,d2
00006178 60EC                       		bra.s	Obj8C_ChkEms
0000617A                            ; ===========================================================================
0000617A                            
0000617A                            loc_5B3E:
0000617A 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000617E                            
0000617E                            loc_5B42:
0000617E 1342 001A                  		move.b	d2,$1A(a1)
00006182 5229 001A                  		addq.b	#1,$1A(a1)
00006186 5202                       		addq.b	#1,d2
00006188 137C 0080 0026             		move.b	#$80,$26(a1)
0000618E 1343 001E                  		move.b	d3,$1E(a1)
00006192 1343 001F                  		move.b	d3,$1F(a1)
00006196 0643 000A                  		addi.w	#$A,d3
0000619A 43E9 0040                  		lea	$40(a1),a1
0000619E 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000061A2                            
000061A2                            Obj8C_Move:				; XREF: Obj8C_Index
000061A2 4A68 003E                  		tst.w	$3E(a0)
000061A6 6700                       		beq.s	locret_5BBA
000061A8 4A28 001E                  		tst.b	$1E(a0)
000061AC 6700                       		beq.s	loc_5B78
000061AE 5328 001E                  		subq.b	#1,$1E(a0)
000061B2 6600                       		bne.s	loc_5B80
000061B4                            
000061B4                            loc_5B78:
000061B4 3028 003E                  		move.w	$3E(a0),d0
000061B8 D168 0026                  		add.w	d0,$26(a0)
000061BC                            
000061BC                            loc_5B80:
000061BC 1028 0026                  		move.b	$26(a0),d0
000061C0 6700                       		beq.s	loc_5B8C
000061C2 0C00 0080                  		cmpi.b	#$80,d0
000061C6 6600                       		bne.s	loc_5B96
000061C8                            
000061C8                            loc_5B8C:
000061C8 4268 003E                  		clr.w	$3E(a0)
000061CC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000061D2                            
000061D2                            loc_5B96:
000061D2 4EB9 0000 2D28             		jsr	(CalcSine).l
000061D8 7800                       		moveq	#0,d4
000061DA 1828 003C                  		move.b	$3C(a0),d4
000061DE C3C4                       		muls.w	d4,d1
000061E0 E081                       		asr.l	#8,d1
000061E2 C1C4                       		muls.w	d4,d0
000061E4 E080                       		asr.l	#8,d0
000061E6 D268 0038                  		add.w	$38(a0),d1
000061EA D068 003A                  		add.w	$3A(a0),d0
000061EE 3141 0008                  		move.w	d1,8(a0)
000061F2 3140 000A                  		move.w	d0,$A(a0)
000061F6                            
000061F6                            locret_5BBA:
000061F6 4E75                       		rts	
000061F8                            ; ===========================================================================
000061F8                            ; ---------------------------------------------------------------------------
000061F8                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000061F8                            ; ---------------------------------------------------------------------------
000061F8                            Map_obj8B:
000061F8                            	include "_maps\obj8B.asm"
000061F8                            ; ---------------------------------------------------------------------------
000061F8                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000061F8                            ; ---------------------------------------------------------------------------
000061F8 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000061FC 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006200 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006204 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006208 08                         byte_5BCC:	dc.b 8
00006209 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000620E F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006213 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006218 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
0000621D 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006222 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006227 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000622C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006231 08                         byte_5BF5:	dc.b 8
00006232 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006237 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000623C E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006241 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006246 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000624B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006250 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006255 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000625A 08                         byte_5C1E:	dc.b 8
0000625B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006260 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006265 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000626A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000626F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006274 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006279 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000627E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006283 08                         byte_5C47:	dc.b 8
00006284 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006289 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000628E E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006293 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006298 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000629D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000062A2 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062A7 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062AC 0C                         byte_5C70:	dc.b $C
000062AD ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000062B2 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000062B7 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000062BC 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000062C1 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000062C6 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000062CB 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000062D0 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000062D5 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000062DA 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000062DF 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000062E4 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000062E9 0A                         byte_5CAD:	dc.b $A
000062EA D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000062EF DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000062F4 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000062F9 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000062FE DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006303 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006308 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000630D 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006312 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006317 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
0000631C 0A                         byte_5CE0:	dc.b $A
0000631D C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006322 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006327 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000632C C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006331 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006336 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000633B 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006340 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006345 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000634A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000634F 0C                         byte_5D13:	dc.b $C
00006350 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006355 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000635A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000635F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006364 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006369 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000636E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006373 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006378 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000637D 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006382 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006387 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000638C                            		even
0000638C                            		even
0000638C                            
0000638C                            ; ---------------------------------------------------------------------------
0000638C                            ; Ending sequence demos
0000638C                            ; ---------------------------------------------------------------------------
0000638C                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000063BA                            		even
000063BA                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000063FA                            		even
000063FA                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000642A                            		even
0000642A                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000645A                            		even
0000645A                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000647A                            		even
0000647A                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000649A                            		even
0000649A                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000064CA                            		even
000064CA                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000064FA                            		even
000064FA                            
000064FA                            ; ---------------------------------------------------------------------------
000064FA                            ; Subroutine to	load level boundaries and start	locations
000064FA                            ; ---------------------------------------------------------------------------
000064FA                            
000064FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064FA                            
000064FA                            
000064FA                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000064FA 7000                       		moveq	#0,d0
000064FC 11C0 F740                  		move.b	d0,($FFFFF740).w
00006500 11C0 F741                  		move.b	d0,($FFFFF741).w
00006504 11C0 F746                  		move.b	d0,($FFFFF746).w
00006508 11C0 F748                  		move.b	d0,($FFFFF748).w
0000650C 11C0 F742                  		move.b	d0,($FFFFF742).w
00006510 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006514 ED08                       		lsl.b	#6,d0
00006516 E848                       		lsr.w	#4,d0
00006518 3200                       		move.w	d0,d1
0000651A D040                       		add.w	d0,d0
0000651C D041                       		add.w	d1,d0
0000651E 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006522 3018                       		move.w	(a0)+,d0
00006524 31C0 F730                  		move.w	d0,($FFFFF730).w
00006528 2018                       		move.l	(a0)+,d0
0000652A 21C0 F728                  		move.l	d0,($FFFFF728).w
0000652E 21C0 F720                  		move.l	d0,($FFFFF720).w
00006532 2018                       		move.l	(a0)+,d0
00006534 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006538 21C0 F724                  		move.l	d0,($FFFFF724).w
0000653C 3038 F728                  		move.w	($FFFFF728).w,d0
00006540 0640 0240                  		addi.w	#$240,d0
00006544 31C0 F732                  		move.w	d0,($FFFFF732).w
00006548 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000654E 3018                       		move.w	(a0)+,d0
00006550 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006554 6000 0000                  		bra.w	LevSz_ChkLamp
00006558                            ; ===========================================================================
00006558                            ; ---------------------------------------------------------------------------
00006558                            ; Level size array and ending start location array
00006558                            ; ---------------------------------------------------------------------------
00006558                            LevelSizeArray:        ; GHZ
00006558 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006564 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006570 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
0000657C 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006588                                    ; LZ
00006588 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00006594 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000065A0 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000065AC 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000065B8                                    ; MZ
000065B8 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000065C4 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000065D0 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000065DC 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
000065E8                                    ; SLZ
000065E8 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
000065F4 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006600 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
0000660C 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006618                                    ; SYZ
00006618 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006624 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006630 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
0000663C 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006648                                    ; SBZ
00006648 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006654 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006660 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
0000666C 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006678                                    ; Ending
00006678 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006684 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006690 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
0000669C 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000066A8                                    ; BHZ
000066A8 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000066B4 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000066C0 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000066CC 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000066D8                                    even
000066D8                            
000066D8                            ; ===========================================================================
000066D8                            
000066D8                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000066D8 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000066DC 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000066DE 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000066E4 3238 D008                  		move.w	($FFFFD008).w,d1
000066E8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000066EC 6000 0000                  		bra.w	loc_60D0
000066F0                            ; ===========================================================================
000066F0                            
000066F0                            
000066F0                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000066F0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000066F4 ED08                       		lsl.b	#6,d0
000066F6 E848                       		lsr.w	#4,d0
000066F8 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000066FC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006700 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006704 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006708 5340                       		subq.w	#1,d0
0000670A E548                       		lsl.w	#2,d0
0000670C 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006710 6000 0000                  		bra.w	LevSz_SonicPos
00006714                            
00006714                            EndingStLocArray:
00006714                            		incbin	misc\sloc_end.bin
00006734                            		even
00006734                            		
00006734                            ; ===========================================================================
00006734                            ; ---------------------------------------------------------------------------
00006734                            ; Sonic	start location array
00006734                            ; ---------------------------------------------------------------------------
00006734                            StartLocArray:	incbin	misc\sloc_lev.bin
000067B4                            		even
000067B4                            
000067B4                            LevSz_SonicPos:
000067B4 7200                       		moveq	#0,d1
000067B6 3219                       		move.w	(a1)+,d1
000067B8 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000067BC 7000                       		moveq	#0,d0
000067BE 3011                       		move.w	(a1),d0
000067C0 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000067C4                            
000067C4                            loc_60D0:				; XREF: LevSz_ChkLamp
000067C4 0441 00A0                  		subi.w	#$A0,d1
000067C8 6400                       		bcc.s	loc_60D8
000067CA 7200                       		moveq	#0,d1
000067CC                            
000067CC                            loc_60D8:
000067CC 3438 F72A                  		move.w	($FFFFF72A).w,d2
000067D0 B242                       		cmp.w	d2,d1
000067D2 6500                       		bcs.s	loc_60E2
000067D4 3202                       		move.w	d2,d1
000067D6                            
000067D6                            loc_60E2:
000067D6 31C1 F700                  		move.w	d1,($FFFFF700).w
000067DA 0440 0060                  		subi.w	#$60,d0
000067DE 6400                       		bcc.s	loc_60EE
000067E0 7000                       		moveq	#0,d0
000067E2                            
000067E2                            loc_60EE:
000067E2 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000067E6 6D00                       		blt.s	loc_60F8
000067E8 3038 F72E                  		move.w	($FFFFF72E).w,d0
000067EC                            
000067EC                            loc_60F8:
000067EC 31C0 F704                  		move.w	d0,($FFFFF704).w
000067F0 6100 0000                  		bsr.w	BgScrollSpeed
000067F4 7000                       		moveq	#0,d0
000067F6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000067FA E508                       		lsl.b	#2,d0
000067FC 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006802 6000 0000                  		bra.w	LevSz_Unk
00006806                            
00006806                            ; ---------------------------------------------------------------------------
00006806                            ; Which	256x256	tiles contain loops or roll-tunnels
00006806                            ; ---------------------------------------------------------------------------
00006806                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006806                            ; loop,	loop, tunnel, tunnel
00006806                            ; ---------------------------------------------------------------------------
00006806                            LoopTileNums:	incbin	misc\loopnums.bin
00006826                            		even
00006826                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006826                            ; ITS GONJE HELP
00006826                            ; ===========================================================================
00006826                            
00006826                            LevSz_Unk:				; XREF: LevelSizeLoad
00006826 7000                       		moveq	#0,d0
00006828 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000682C E748                       		lsl.w	#3,d0
0000682E 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006832 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006836 24D9                       		move.l	(a1)+,(a2)+
00006838 24D9                       		move.l	(a1)+,(a2)+
0000683A 4E75                       		rts	
0000683C                            ; End of function LevelSizeLoad
0000683C                            
0000683C                            ; ===========================================================================
0000683C 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006844 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000684C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006854 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000685C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006864 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000686C 0070 0100 0100 0100        		dc.l $700100, $1000100
00006874                            
00006874                            ; ---------------------------------------------------------------------------
00006874                            ; Subroutine to	set scroll speed of some backgrounds
00006874                            ; ---------------------------------------------------------------------------
00006874                            
00006874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006874                            
00006874                            
00006874                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006874 4A38 FE30                  		tst.b	($FFFFFE30).w
00006878 6600                       		bne.s	loc_6206
0000687A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000687E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006882 31C1 F708                  		move.w	d1,($FFFFF708).w
00006886 31C1 F710                  		move.w	d1,($FFFFF710).w
0000688A 31C1 F718                  		move.w	d1,($FFFFF718).w
0000688E                            
0000688E                            loc_6206:
0000688E 7400                       		moveq	#0,d2
00006890 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006894 D442                       		add.w	d2,d2
00006896 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000689A 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000689E                            ; End of function BgScrollSpeed
0000689E                            
0000689E                            ; ===========================================================================
0000689E 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000068A2 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000068A6 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000068AA 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_GHZ-BgScroll_Index
000068AE                            ; ===========================================================================
000068AE                            
000068AE                            BgScroll_GHZ:				; XREF: BgScroll_Index
000068AE 6000 0000                  		bra.w	Deform_GHZ
000068B2                            ; ===========================================================================
000068B2                            
000068B2                            BgScroll_LZ:				; XREF: BgScroll_Index
000068B2 E280                       		asr.l	#1,d0
000068B4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068B8 4E75                       		rts	
000068BA                            ; ===========================================================================
000068BA                            
000068BA                            BgScroll_MZ:				; XREF: BgScroll_Index
000068BA 4E75                       		rts	
000068BC                            ; ===========================================================================
000068BC                            
000068BC                            BgScroll_SLZ:				; XREF: BgScroll_Index
000068BC E280                       		asr.l	#1,d0
000068BE 0640 00C0                  		addi.w	#$C0,d0
000068C2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068C6 4E75                       		rts	
000068C8                            ; ===========================================================================
000068C8                            
000068C8                            BgScroll_SYZ:				; XREF: BgScroll_Index
000068C8 E980                       		asl.l	#4,d0
000068CA 2400                       		move.l	d0,d2
000068CC E380                       		asl.l	#1,d0
000068CE D082                       		add.l	d2,d0
000068D0 E080                       		asr.l	#8,d0
000068D2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068D6 31C0 F714                  		move.w	d0,($FFFFF714).w
000068DA 4E75                       		rts	
000068DC                            ; ===========================================================================
000068DC                            
000068DC                            BgScroll_SBZ:				; XREF: BgScroll_Index
000068DC E980                       		asl.l	#4,d0
000068DE E380                       		asl.l	#1,d0
000068E0 E080                       		asr.l	#8,d0
000068E2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068E6 4E75                       		rts	
000068E8                            ; ===========================================================================
000068E8                            
000068E8                            BgScroll_End:				; XREF: BgScroll_Index
000068E8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000068EE 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000068F4 4E75                       		rts	
000068F6                            ; ===========================================================================
000068F6 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000068FC 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006902 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006908 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000690E 4E75                       		rts
00006910                            
00006910                            ; ---------------------------------------------------------------------------
00006910                            ; Background layer deformation subroutines
00006910                            ; ---------------------------------------------------------------------------
00006910                            
00006910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006910                            
00006910                            
00006910                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006910 4A38 F744                  		tst.b	($FFFFF744).w
00006914 6700                       		beq.s	loc_628E
00006916 4E75                       		rts	
00006918                            ; ===========================================================================
00006918                            
00006918                            loc_628E:
00006918 4278 F754                  		clr.w	($FFFFF754).w
0000691C 4278 F756                  		clr.w	($FFFFF756).w
00006920 4278 F758                  		clr.w	($FFFFF758).w
00006924 4278 F75A                  		clr.w	($FFFFF75A).w
00006928 6100 0000                  		bsr.w	ScrollHoriz
0000692C 6100 0000                  		bsr.w	ScrollVertical
00006930 6100 0000                  		bsr.w	DynScrResizeLoad
00006934 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000693A 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006940 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006946 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000694C 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006952 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006958 7000                       		moveq	#0,d0
0000695A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000695E D040                       		add.w	d0,d0
00006960 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006964 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006968                            ; End of function DeformBgLayer
00006968                            
00006968                            ; ===========================================================================
00006968                            ; ---------------------------------------------------------------------------
00006968                            ; Offset index for background layer deformation	code
00006968                            ; ---------------------------------------------------------------------------
00006968 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000696C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006970 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006974 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_GHZ-Deform_Index
00006978                            ; ---------------------------------------------------------------------------
00006978                            ; Green	Hill Zone background layer deformation code
00006978                            ; ---------------------------------------------------------------------------
00006978                            
00006978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006978                            
00006978                            
00006978                            Deform_GHZ:				; XREF: Deform_Index
00006978 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000697C 48C4                       		ext.l	d4
0000697E EB84                       		asl.l	#5,d4
00006980 2204                       		move.l	d4,d1
00006982 E384                       		asl.l	#1,d4
00006984 D881                       		add.l	d1,d4
00006986 7A00                       		moveq	#0,d5
00006988 6100 0000                  		bsr.w	ScrollBlock1
0000698C 6100 0000                  		bsr.w	ScrollBlock4
00006990 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006994 3038 F704                  		move.w	($FFFFF704).w,d0
00006998 0240 07FF                  		andi.w	#$7FF,d0
0000699C EA48                       		lsr.w	#5,d0
0000699E 4440                       		neg.w	d0
000069A0 0640 0026                  		addi.w	#$26,d0
000069A4 31C0 F714                  		move.w	d0,($FFFFF714).w
000069A8 3800                       		move.w	d0,d4
000069AA 6100 0000                  		bsr.w	ScrollBlock3
000069AE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069B4 323C 006F                  		move.w	#$6F,d1
000069B8 9244                       		sub.w	d4,d1
000069BA 3038 F700                  		move.w	($FFFFF700).w,d0
000069BE 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000069C4 6600                       		bne.s	loc_633C
000069C6 7000                       		moveq	#0,d0
000069C8                            
000069C8                            loc_633C:
000069C8 4440                       		neg.w	d0
000069CA 4840                       		swap	d0
000069CC 3038 F708                  		move.w	($FFFFF708).w,d0
000069D0 4440                       		neg.w	d0
000069D2                            
000069D2                            loc_6346:
000069D2 22C0                       		move.l	d0,(a1)+
000069D4 51C9 FFFC                  		dbf	d1,loc_6346
000069D8 323C 0027                  		move.w	#$27,d1
000069DC 3038 F710                  		move.w	($FFFFF710).w,d0
000069E0 4440                       		neg.w	d0
000069E2                            
000069E2                            loc_6356:
000069E2 22C0                       		move.l	d0,(a1)+
000069E4 51C9 FFFC                  		dbf	d1,loc_6356
000069E8 3038 F710                  		move.w	($FFFFF710).w,d0
000069EC 0640 0000                  		addi.w	#0,d0
000069F0 3438 F700                  		move.w	($FFFFF700).w,d2
000069F4 0642 FE00                  		addi.w	#-$200,d2
000069F8 9440                       		sub.w	d0,d2
000069FA 48C2                       		ext.l	d2
000069FC E182                       		asl.l	#8,d2
000069FE 85FC 0068                  		divs.w	#$68,d2
00006A02 48C2                       		ext.l	d2
00006A04 E182                       		asl.l	#8,d2
00006A06 7600                       		moveq	#0,d3
00006A08 3600                       		move.w	d0,d3
00006A0A 323C 0047                  		move.w	#$47,d1
00006A0E D244                       		add.w	d4,d1
00006A10                            
00006A10                            loc_6384:
00006A10 3003                       		move.w	d3,d0
00006A12 4440                       		neg.w	d0
00006A14 22C0                       		move.l	d0,(a1)+
00006A16 4843                       		swap	d3
00006A18 D682                       		add.l	d2,d3
00006A1A 4843                       		swap	d3
00006A1C 51C9 FFF2                  		dbf	d1,loc_6384
00006A20 4E75                       		rts	
00006A22                            ; End of function Deform_GHZ
00006A22                            
00006A22                            ; ---------------------------------------------------------------------------
00006A22                            ; Labyrinth Zone background layer deformation code
00006A22                            ; ---------------------------------------------------------------------------
00006A22                            
00006A22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A22                            
00006A22                            
00006A22                            Deform_LZ:				; XREF: Deform_Index
00006A22 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A26 48C4                       		ext.l	d4
00006A28 EF84                       		asl.l	#7,d4
00006A2A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A2E 48C5                       		ext.l	d5
00006A30 EF85                       		asl.l	#7,d5
00006A32 6100 0000                  		bsr.w	ScrollBlock1
00006A36 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A3C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A40 323C 00DF                  		move.w	#$DF,d1
00006A44 3038 F700                  		move.w	($FFFFF700).w,d0
00006A48 4440                       		neg.w	d0
00006A4A 4840                       		swap	d0
00006A4C 3038 F708                  		move.w	($FFFFF708).w,d0
00006A50 4440                       		neg.w	d0
00006A52                            
00006A52                            loc_63C6:
00006A52 22C0                       		move.l	d0,(a1)+
00006A54 51C9 FFFC                  		dbf	d1,loc_63C6
00006A58 3038 F646                  		move.w	($FFFFF646).w,d0
00006A5C 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A60 4E75                       		rts	
00006A62                            ; End of function Deform_LZ
00006A62                            
00006A62                            ; ---------------------------------------------------------------------------
00006A62                            ; Marble Zone background layer deformation code
00006A62                            ; ---------------------------------------------------------------------------
00006A62                            
00006A62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A62                            
00006A62                            
00006A62                            Deform_MZ:				; XREF: Deform_Index
00006A62 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A66 48C4                       		ext.l	d4
00006A68 ED84                       		asl.l	#6,d4
00006A6A 2204                       		move.l	d4,d1
00006A6C E384                       		asl.l	#1,d4
00006A6E D881                       		add.l	d1,d4
00006A70 7A00                       		moveq	#0,d5
00006A72 6100 0000                  		bsr.w	ScrollBlock1
00006A76 303C 0200                  		move.w	#$200,d0
00006A7A 3238 F704                  		move.w	($FFFFF704).w,d1
00006A7E 0441 01C8                  		subi.w	#$1C8,d1
00006A82 6500                       		bcs.s	loc_6402
00006A84 3401                       		move.w	d1,d2
00006A86 D241                       		add.w	d1,d1
00006A88 D242                       		add.w	d2,d1
00006A8A E441                       		asr.w	#2,d1
00006A8C D041                       		add.w	d1,d0
00006A8E                            
00006A8E                            loc_6402:
00006A8E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006A92 6100 0000                  		bsr.w	ScrollBlock3
00006A96 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A9C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AA0 323C 00DF                  		move.w	#$DF,d1
00006AA4 3038 F700                  		move.w	($FFFFF700).w,d0
00006AA8 4440                       		neg.w	d0
00006AAA 4840                       		swap	d0
00006AAC 3038 F708                  		move.w	($FFFFF708).w,d0
00006AB0 4440                       		neg.w	d0
00006AB2                            
00006AB2                            loc_6426:
00006AB2 22C0                       		move.l	d0,(a1)+
00006AB4 51C9 FFFC                  		dbf	d1,loc_6426
00006AB8 4E75                       		rts	
00006ABA                            ; End of function Deform_MZ
00006ABA                            
00006ABA                            ; ---------------------------------------------------------------------------
00006ABA                            ; Star Light Zone background layer deformation code
00006ABA                            ; ---------------------------------------------------------------------------
00006ABA                            
00006ABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ABA                            
00006ABA                            
00006ABA                            Deform_SLZ:				; XREF: Deform_Index
00006ABA 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006ABE 48C4                       		ext.l	d4
00006AC0 EB84                       		asl.l	#5,d4
00006AC2 2204                       		move.l	d4,d1
00006AC4 E384                       		asl.l	#1,d4
00006AC6 D881                       		add.l	d1,d4
00006AC8 7A00                       		moveq	#0,d5
00006ACA 6100 0000                  		bsr.w	ScrollBlock1
00006ACE 6100 0000                  		bsr.w	ScrollBlock3
00006AD2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AD6                            	;	move.w	($FFFFF704).w,d0
00006AD6                            	;	andi.w	#$7FF,d0
00006AD6 EA48                       		lsr.w	#5,d0
00006AD8 4440                       		neg.w	d0
00006ADA 0640 0026                  		addi.w	#$26,d0
00006ADE 31C0 F714                  		move.w	d0,($FFFFF714).w
00006AE2 3800                       		move.w	d0,d4
00006AE4                            	;	bsr.w	ScrollBlock3
00006AE4 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006AEA 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006AEE                            
00006AEE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AF2 4440                       		neg.w	d0			; negate (positive to negative)
00006AF4 4840                       		swap	d0			; send to the left side of d0
00006AF6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AFA 45F8 A800                  		lea	($FFFFA800).w,a2
00006AFE 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B04 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B0A 3038 A800                  		move.w	($FFFFA800).w,d0
00006B0E 4440                       		neg.w	d0			; negate (positive to negative)
00006B10 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B12 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B16                            slz_DeformLoop_1:
00006B16 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B18 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006B1C                            
00006B1C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B20 4440                       		neg.w	d0			; negate (positive to negative)
00006B22 4840                       		swap	d0			; send to the left side of d0
00006B24 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B28 45F8 A800                  		lea	($FFFFA800).w,a2
00006B2C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B32 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B38 3038 A800                  		move.w	($FFFFA800).w,d0
00006B3C 4440                       		neg.w	d0			; negate (positive to negative)
00006B3E E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B40 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B44                            slz_DeformLoop_2:
00006B44 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B46 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006B4A                            
00006B4A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B4E 4440                       		neg.w	d0			; negate (positive to negative)
00006B50 4840                       		swap	d0			; send to the left side of d0
00006B52 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B56 45F8 A800                  		lea	($FFFFA800).w,a2
00006B5A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B60 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B66 3038 A800                  		move.w	($FFFFA800).w,d0
00006B6A 4440                       		neg.w	d0			; negate (positive to negative)
00006B6C E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006B6E 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B72                            slz_DeformLoop_3:
00006B72 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B74 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006B78                            
00006B78 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B7C 4440                       		neg.w	d0			; negate (positive to negative)
00006B7E 4840                       		swap	d0			; send to the left side of d0
00006B80 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B84 45F8 A800                  		lea	($FFFFA800).w,a2
00006B88 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B8E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B94 3038 A800                  		move.w	($FFFFA800).w,d0
00006B98 4440                       		neg.w	d0			; negate (positive to negative)
00006B9A E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006B9C 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BA0                            slz_DeformLoop_4:
00006BA0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BA2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006BA6                            
00006BA6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BAA 4440                       		neg.w	d0			; negate (positive to negative)
00006BAC 4840                       		swap	d0			; send to the left side of d0
00006BAE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BB2 45F8 A800                  		lea	($FFFFA800).w,a2
00006BB6 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BBC 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BC2 3038 A800                  		move.w	($FFFFA800).w,d0
00006BC6 4440                       		neg.w	d0			; negate (positive to negative)
00006BC8 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006BCA 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BCE                            slz_DeformLoop_5:
00006BCE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BD0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006BD4                            
00006BD4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BD8 4440                       		neg.w	d0			; negate (positive to negative)
00006BDA 4840                       		swap	d0			; send to the left side of d0
00006BDC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BE0 4440                       		neg.w	d0			; negate (positive to negative)
00006BE2 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006BE4 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BE8                            slz_DeformLoop_6:
00006BE8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BEA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006BEE                            
00006BEE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BF2 4440                       		neg.w	d0			; negate (positive to negative)
00006BF4 4840                       		swap	d0			; send to the left side of d0
00006BF6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BFA 4440                       		neg.w	d0			; negate (positive to negative)
00006BFC EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006BFE 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C02                            slz_DeformLoop_7:
00006C02 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C04 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006C08                            
00006C08 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C0C 4440                       		neg.w	d0			; negate (positive to negative)
00006C0E 4840                       		swap	d0			; send to the left side of d0
00006C10 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C14 4440                       		neg.w	d0			; negate (positive to negative)
00006C16 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006C18 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C1C                            slz_DeformLoop_8:
00006C1C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C1E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006C22                            
00006C22 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C26 4440                       		neg.w	d0			; negate (positive to negative)
00006C28 4840                       		swap	d0			; send to the left side of d0
00006C2A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C2E 4440                       		neg.w	d0			; negate (positive to negative)
00006C30 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C32 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C36                            slz_DeformLoop_9:
00006C36 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C38 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006C3C                            
00006C3C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C40 4440                       		neg.w	d0			; negate (positive to negative)
00006C42 4840                       		swap	d0			; send to the left side of d0
00006C44 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C48 4440                       		neg.w	d0			; negate (positive to negative)
00006C4A E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006C4C 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C50                            slz_DeformLoop_10:
00006C50 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C52 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006C56                            
00006C56 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C5A 4440                       		neg.w	d0			; negate (positive to negative)
00006C5C 4840                       		swap	d0			; send to the left side of d0
00006C5E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C62 4440                       		neg.w	d0			; negate (positive to negative)
00006C64 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006C66 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C6A                            slz_DeformLoop_11:
00006C6A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C6C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006C70                            
00006C70 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C74 4440                       		neg.w	d0			; negate (positive to negative)
00006C76 4840                       		swap	d0			; send to the left side of d0
00006C78 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C7C 4440                       		neg.w	d0			; negate (positive to negative)
00006C7E E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006C80 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C84                            slz_DeformLoop_12:
00006C84 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C86 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006C8A                            
00006C8A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C8E 4440                       		neg.w	d0			; negate (positive to negative)
00006C90 4840                       		swap	d0			; send to the left side of d0
00006C92 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C96 4440                       		neg.w	d0			; negate (positive to negative)
00006C98 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006C9A 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C9E                            slz_DeformLoop_13:
00006C9E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CA0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006CA4 4E75                       		rts	
00006CA6                            ; End of function Deform_SLZ
00006CA6 4E75                       		rts	
00006CA8                            ; End of function Deform_SLZ_2
00006CA8                            
00006CA8                            ; ---------------------------------------------------------------------------
00006CA8                            ; Spring Yard Zone background layer deformation	code
00006CA8                            ; ---------------------------------------------------------------------------
00006CA8                            
00006CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CA8                            
00006CA8                            
00006CA8                            Deform_SYZ:				; XREF: Deform_Index
00006CA8 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CAC 48C4                       		ext.l	d4
00006CAE ED84                       		asl.l	#6,d4
00006CB0 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CB4 48C5                       		ext.l	d5
00006CB6 E985                       		asl.l	#4,d5
00006CB8 2205                       		move.l	d5,d1
00006CBA E385                       		asl.l	#1,d5
00006CBC DA81                       		add.l	d1,d5
00006CBE 6100 0000                  		bsr.w	ScrollBlock1
00006CC2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006CC8 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006CCC 323C 00DF                  		move.w	#$DF,d1
00006CD0 3038 F700                  		move.w	($FFFFF700).w,d0
00006CD4 4440                       		neg.w	d0
00006CD6 4840                       		swap	d0
00006CD8 3038 F708                  		move.w	($FFFFF708).w,d0
00006CDC 4440                       		neg.w	d0
00006CDE                            
00006CDE                            loc_653C:
00006CDE 22C0                       		move.l	d0,(a1)+
00006CE0 51C9 FFFC                  		dbf	d1,loc_653C
00006CE4 4E75                       		rts	
00006CE6                            ; End of function Deform_SYZ
00006CE6                            
00006CE6                            ; ---------------------------------------------------------------------------
00006CE6                            ; Scrap	Brain Zone background layer deformation	code
00006CE6                            ; ---------------------------------------------------------------------------
00006CE6                            
00006CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE6                            
00006CE6                            
00006CE6                            Deform_SBZ:				; XREF: Deform_Index
00006CE6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CEA 48C4                       		ext.l	d4
00006CEC ED84                       		asl.l	#6,d4
00006CEE 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CF2 48C5                       		ext.l	d5
00006CF4 E985                       		asl.l	#4,d5
00006CF6 E385                       		asl.l	#1,d5
00006CF8 6100 0000                  		bsr.w	ScrollBlock1
00006CFC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D02 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D06 323C 00DF                  		move.w	#$DF,d1
00006D0A 3038 F700                  		move.w	($FFFFF700).w,d0
00006D0E 4440                       		neg.w	d0
00006D10 4840                       		swap	d0
00006D12 3038 F708                  		move.w	($FFFFF708).w,d0
00006D16 4440                       		neg.w	d0
00006D18                            
00006D18                            loc_6576:
00006D18 22C0                       		move.l	d0,(a1)+
00006D1A 51C9 FFFC                  		dbf	d1,loc_6576
00006D1E 4E75                       		rts	
00006D20                            ; End of function Deform_SBZ
00006D20                            
00006D20                            ; ---------------------------------------------------------------------------
00006D20                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006D20                            ; ---------------------------------------------------------------------------
00006D20                            
00006D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D20                            
00006D20                            
00006D20                            ScrollHoriz:				; XREF: DeformBgLayer
00006D20 3838 F700                  		move.w	($FFFFF700).w,d4
00006D24 6100                       		bsr.s	ScrollHoriz2
00006D26 3038 F700                  		move.w	($FFFFF700).w,d0
00006D2A 0240 0010                  		andi.w	#$10,d0
00006D2E 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006D32 B300                       		eor.b	d1,d0
00006D34 6600                       		bne.s	locret_65B0
00006D36 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006D3C 3038 F700                  		move.w	($FFFFF700).w,d0
00006D40 9044                       		sub.w	d4,d0
00006D42 6A00                       		bpl.s	loc_65AA
00006D44 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006D4A 4E75                       		rts	
00006D4C                            ; ===========================================================================
00006D4C                            
00006D4C                            loc_65AA:
00006D4C 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006D52                            
00006D52                            locret_65B0:
00006D52 4E75                       		rts	
00006D54                            ; End of function ScrollHoriz
00006D54                            
00006D54                            
00006D54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D54                            
00006D54                            
00006D54                            ScrollHoriz2:				; XREF: ScrollHoriz
00006D54 3038 D008                  		move.w	($FFFFD008).w,d0
00006D58 9078 F700                  		sub.w	($FFFFF700).w,d0
00006D5C 0440 0090                  		subi.w	#$90,d0
00006D60 6500                       		bcs.s	loc_65F6
00006D62 0440 0010                  		subi.w	#$10,d0
00006D66 6400                       		bcc.s	loc_65CC
00006D68 4278 F73A                  		clr.w	($FFFFF73A).w
00006D6C 4E75                       		rts	
00006D6E                            ; ===========================================================================
00006D6E                            
00006D6E                            loc_65CC:
00006D6E 0C40 0010                  		cmpi.w	#$10,d0
00006D72 6500                       		bcs.s	loc_65D6
00006D74 303C 0010                  		move.w	#$10,d0
00006D78                            
00006D78                            loc_65D6:
00006D78 D078 F700                  		add.w	($FFFFF700).w,d0
00006D7C B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006D80 6D00                       		blt.s	loc_65E4
00006D82 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006D86                            
00006D86                            loc_65E4:
00006D86 3200                       		move.w	d0,d1
00006D88 9278 F700                  		sub.w	($FFFFF700).w,d1
00006D8C E141                       		asl.w	#8,d1
00006D8E 31C0 F700                  		move.w	d0,($FFFFF700).w
00006D92 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006D96 4E75                       		rts	
00006D98                            ; ===========================================================================
00006D98                            
00006D98                            loc_65F6:				; XREF: ScrollHoriz2
00006D98 D078 F700                  		add.w	($FFFFF700).w,d0
00006D9C B078 F728                  		cmp.w	($FFFFF728).w,d0
00006DA0 6EE4                       		bgt.s	loc_65E4
00006DA2 3038 F728                  		move.w	($FFFFF728).w,d0
00006DA6 60DE                       		bra.s	loc_65E4
00006DA8                            ; End of function ScrollHoriz2
00006DA8                            
00006DA8                            ; ===========================================================================
00006DA8 4A40                       		tst.w	d0
00006DAA 6A00                       		bpl.s	loc_6610
00006DAC 303C FFFE                  		move.w	#-2,d0
00006DB0 60E6                       		bra.s	loc_65F6
00006DB2                            ; ===========================================================================
00006DB2                            
00006DB2                            loc_6610:
00006DB2 303C 0002                  		move.w	#2,d0
00006DB6 60B6                       		bra.s	loc_65CC
00006DB8                            
00006DB8                            ; ---------------------------------------------------------------------------
00006DB8                            ; Subroutine to	scroll the level vertically as Sonic moves
00006DB8                            ; ---------------------------------------------------------------------------
00006DB8                            
00006DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB8                            
00006DB8                            
00006DB8                            ScrollVertical:				; XREF: DeformBgLayer
00006DB8 7200                       		moveq	#0,d1
00006DBA 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006DBE 9078 F704                  		sub.w	($FFFFF704).w,d0
00006DC2 0838 0002 D022             		btst	#2,($FFFFD022).w
00006DC8 6700                       		beq.s	loc_662A
00006DCA 5B40                       		subq.w	#5,d0
00006DCC                            
00006DCC                            loc_662A:
00006DCC 0838 0001 D022             		btst	#1,($FFFFD022).w
00006DD2 6700                       		beq.s	loc_664A
00006DD4 0640 0020                  		addi.w	#$20,d0
00006DD8 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006DDC 6500                       		bcs.s	loc_6696
00006DDE 0440 0040                  		subi.w	#$40,d0
00006DE2 6400                       		bcc.s	loc_6696
00006DE4 4A38 F75C                  		tst.b	($FFFFF75C).w
00006DE8 6600                       		bne.s	loc_66A8
00006DEA 6000                       		bra.s	loc_6656
00006DEC                            ; ===========================================================================
00006DEC                            
00006DEC                            loc_664A:
00006DEC 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006DF0 6600                       		bne.s	loc_665C
00006DF2 4A38 F75C                  		tst.b	($FFFFF75C).w
00006DF6 6600                       		bne.s	loc_66A8
00006DF8                            
00006DF8                            loc_6656:
00006DF8 4278 F73C                  		clr.w	($FFFFF73C).w
00006DFC 4E75                       		rts	
00006DFE                            ; ===========================================================================
00006DFE                            
00006DFE                            loc_665C:
00006DFE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006E04 6600                       		bne.s	loc_6684
00006E06 3238 D014                  		move.w	($FFFFD014).w,d1
00006E0A 6A00                       		bpl.s	loc_666C
00006E0C 4441                       		neg.w	d1
00006E0E                            
00006E0E                            loc_666C:
00006E0E 0C41 0800                  		cmpi.w	#$800,d1
00006E12 6400                       		bcc.s	loc_6696
00006E14 323C 0600                  		move.w	#$600,d1
00006E18 0C40 0006                  		cmpi.w	#6,d0
00006E1C 6E00                       		bgt.s	loc_66F6
00006E1E 0C40 FFFA                  		cmpi.w	#-6,d0
00006E22 6D00                       		blt.s	loc_66C0
00006E24 6000                       		bra.s	loc_66AE
00006E26                            ; ===========================================================================
00006E26                            
00006E26                            loc_6684:
00006E26 323C 0200                  		move.w	#$200,d1
00006E2A 0C40 0002                  		cmpi.w	#2,d0
00006E2E 6E00                       		bgt.s	loc_66F6
00006E30 0C40 FFFE                  		cmpi.w	#-2,d0
00006E34 6D00                       		blt.s	loc_66C0
00006E36 6000                       		bra.s	loc_66AE
00006E38                            ; ===========================================================================
00006E38                            
00006E38                            loc_6696:
00006E38 323C 1000                  		move.w	#$1000,d1
00006E3C 0C40 0010                  		cmpi.w	#$10,d0
00006E40 6E00                       		bgt.s	loc_66F6
00006E42 0C40 FFF0                  		cmpi.w	#-$10,d0
00006E46 6D00                       		blt.s	loc_66C0
00006E48 6000                       		bra.s	loc_66AE
00006E4A                            ; ===========================================================================
00006E4A                            
00006E4A                            loc_66A8:
00006E4A 7000                       		moveq	#0,d0
00006E4C 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006E50                            
00006E50                            loc_66AE:
00006E50 7200                       		moveq	#0,d1
00006E52 3200                       		move.w	d0,d1
00006E54 D278 F704                  		add.w	($FFFFF704).w,d1
00006E58 4A40                       		tst.w	d0
00006E5A 6A00 0000                  		bpl.w	loc_6700
00006E5E 6000 0000                  		bra.w	loc_66CC
00006E62                            ; ===========================================================================
00006E62                            
00006E62                            loc_66C0:
00006E62 4441                       		neg.w	d1
00006E64 48C1                       		ext.l	d1
00006E66 E181                       		asl.l	#8,d1
00006E68 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006E6C 4841                       		swap	d1
00006E6E                            
00006E6E                            loc_66CC:
00006E6E B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006E72 6E00                       		bgt.s	loc_6724
00006E74 0C41 FF00                  		cmpi.w	#-$100,d1
00006E78 6E00                       		bgt.s	loc_66F0
00006E7A 0241 07FF                  		andi.w	#$7FF,d1
00006E7E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006E84 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006E8A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006E90 6000                       		bra.s	loc_6724
00006E92                            ; ===========================================================================
00006E92                            
00006E92                            loc_66F0:
00006E92 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006E96 6000                       		bra.s	loc_6724
00006E98                            ; ===========================================================================
00006E98                            
00006E98                            loc_66F6:
00006E98 48C1                       		ext.l	d1
00006E9A E181                       		asl.l	#8,d1
00006E9C D2B8 F704                  		add.l	($FFFFF704).w,d1
00006EA0 4841                       		swap	d1
00006EA2                            
00006EA2                            loc_6700:
00006EA2 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006EA6 6D00                       		blt.s	loc_6724
00006EA8 0441 0800                  		subi.w	#$800,d1
00006EAC 6500                       		bcs.s	loc_6720
00006EAE 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006EB4 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006EBA 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006EC0 6000                       		bra.s	loc_6724
00006EC2                            ; ===========================================================================
00006EC2                            
00006EC2                            loc_6720:
00006EC2 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006EC6                            
00006EC6                            loc_6724:
00006EC6 3838 F704                  		move.w	($FFFFF704).w,d4
00006ECA 4841                       		swap	d1
00006ECC 2601                       		move.l	d1,d3
00006ECE 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006ED2 E09B                       		ror.l	#8,d3
00006ED4 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006ED8 21C1 F704                  		move.l	d1,($FFFFF704).w
00006EDC 3038 F704                  		move.w	($FFFFF704).w,d0
00006EE0 0240 0010                  		andi.w	#$10,d0
00006EE4 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006EE8 B300                       		eor.b	d1,d0
00006EEA 6600                       		bne.s	locret_6766
00006EEC 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006EF2 3038 F704                  		move.w	($FFFFF704).w,d0
00006EF6 9044                       		sub.w	d4,d0
00006EF8 6A00                       		bpl.s	loc_6760
00006EFA 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006F00 4E75                       		rts	
00006F02                            ; ===========================================================================
00006F02                            
00006F02                            loc_6760:
00006F02 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006F08                            
00006F08                            locret_6766:
00006F08 4E75                       		rts	
00006F0A                            ; End of function ScrollVertical
00006F0A                            
00006F0A                            
00006F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F0A                            
00006F0A                            
00006F0A                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006F0A 2438 F708                  		move.l	($FFFFF708).w,d2
00006F0E 2002                       		move.l	d2,d0
00006F10 D084                       		add.l	d4,d0
00006F12 21C0 F708                  		move.l	d0,($FFFFF708).w
00006F16 2200                       		move.l	d0,d1
00006F18 4841                       		swap	d1
00006F1A 0241 0010                  		andi.w	#$10,d1
00006F1E 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006F22 B701                       		eor.b	d3,d1
00006F24 6600                       		bne.s	loc_679C
00006F26 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006F2C 9082                       		sub.l	d2,d0
00006F2E 6A00                       		bpl.s	loc_6796
00006F30 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006F36 6000                       		bra.s	loc_679C
00006F38                            ; ===========================================================================
00006F38                            
00006F38                            loc_6796:
00006F38 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006F3E                            
00006F3E                            loc_679C:
00006F3E 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006F42 2003                       		move.l	d3,d0
00006F44 D085                       		add.l	d5,d0
00006F46 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006F4A 2200                       		move.l	d0,d1
00006F4C 4841                       		swap	d1
00006F4E 0241 0010                  		andi.w	#$10,d1
00006F52 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006F56 B501                       		eor.b	d2,d1
00006F58 6600                       		bne.s	locret_67D0
00006F5A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006F60 9083                       		sub.l	d3,d0
00006F62 6A00                       		bpl.s	loc_67CA
00006F64 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006F6A 4E75                       		rts	
00006F6C                            ; ===========================================================================
00006F6C                            
00006F6C                            loc_67CA:
00006F6C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006F72                            
00006F72                            locret_67D0:
00006F72 4E75                       		rts	
00006F74                            ; End of function ScrollBlock1
00006F74                            
00006F74                            
00006F74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F74                            
00006F74                            
00006F74                            ScrollBlock2:				; XREF: Deform_SLZ
00006F74 2438 F708                  		move.l	($FFFFF708).w,d2
00006F78 2002                       		move.l	d2,d0
00006F7A D084                       		add.l	d4,d0
00006F7C 21C0 F708                  		move.l	d0,($FFFFF708).w
00006F80 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006F84 2003                       		move.l	d3,d0
00006F86 D085                       		add.l	d5,d0
00006F88 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006F8C 2200                       		move.l	d0,d1
00006F8E 4841                       		swap	d1
00006F90 0241 0010                  		andi.w	#$10,d1
00006F94 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006F98 B501                       		eor.b	d2,d1
00006F9A 6600                       		bne.s	locret_6812
00006F9C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FA2 9083                       		sub.l	d3,d0
00006FA4 6A00                       		bpl.s	loc_680C
00006FA6 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FAC 4E75                       		rts	
00006FAE                            ; ===========================================================================
00006FAE                            
00006FAE                            loc_680C:
00006FAE 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FB4                            
00006FB4                            locret_6812:
00006FB4 4E75                       		rts	
00006FB6                            ; End of function ScrollBlock2
00006FB6                            
00006FB6                            
00006FB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FB6                            
00006FB6                            
00006FB6                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006FB6 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006FBA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FBE 3200                       		move.w	d0,d1
00006FC0 0241 0010                  		andi.w	#$10,d1
00006FC4 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FC8 B501                       		eor.b	d2,d1
00006FCA 6600                       		bne.s	locret_6842
00006FCC 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FD2 9043                       		sub.w	d3,d0
00006FD4 6A00                       		bpl.s	loc_683C
00006FD6 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FDC 4E75                       		rts	
00006FDE                            ; ===========================================================================
00006FDE                            
00006FDE                            loc_683C:
00006FDE 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FE4                            
00006FE4                            locret_6842:
00006FE4 4E75                       		rts	
00006FE6                            ; End of function ScrollBlock3
00006FE6                            
00006FE6                            
00006FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FE6                            
00006FE6                            
00006FE6                            ScrollBlock4:				; XREF: Deform_GHZ
00006FE6 3438 F710                  		move.w	($FFFFF710).w,d2
00006FEA 3638 F714                  		move.w	($FFFFF714).w,d3
00006FEE 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006FF2 48C0                       		ext.l	d0
00006FF4 EF80                       		asl.l	#7,d0
00006FF6 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006FFA 3038 F710                  		move.w	($FFFFF710).w,d0
00006FFE 0240 0010                  		andi.w	#$10,d0
00007002 1238 F74E                  		move.b	($FFFFF74E).w,d1
00007006 B300                       		eor.b	d1,d0
00007008 6600                       		bne.s	locret_6884
0000700A 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007010 3038 F710                  		move.w	($FFFFF710).w,d0
00007014 9042                       		sub.w	d2,d0
00007016 6A00                       		bpl.s	loc_687E
00007018 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000701E 6000                       		bra.s	locret_6884
00007020                            ; ===========================================================================
00007020                            
00007020                            loc_687E:
00007020 08F8 0003 F758             		bset	#3,($FFFFF758).w
00007026                            
00007026                            locret_6884:
00007026 4E75                       		rts	
00007028                            ; End of function ScrollBlock4
00007028                            
00007028                            
00007028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007028                            
00007028                            
00007028                            sub_6886:				; XREF: loc_C44
00007028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000702E 4DF9 00C0 0000             		lea	($C00000).l,a6
00007034 45F8 F756                  		lea	($FFFFF756).w,a2
00007038 47F8 F708                  		lea	($FFFFF708).w,a3
0000703C 49F8 A440                  		lea	($FFFFA440).w,a4
00007040 343C 6000                  		move.w	#$6000,d2
00007044 6100 0000                  		bsr.w	sub_6954
00007048 45F8 F758                  		lea	($FFFFF758).w,a2
0000704C 47F8 F710                  		lea	($FFFFF710).w,a3
00007050 6000 0000                  		bra.w	sub_69F4
00007054                            ; End of function sub_6886
00007054                            
00007054                            ; ---------------------------------------------------------------------------
00007054                            ; Subroutine to	display	correct	tiles as you move
00007054                            ; ---------------------------------------------------------------------------
00007054                            
00007054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007054                            
00007054                            
00007054                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007054 4BF9 00C0 0004             		lea	($C00004).l,a5
0000705A 4DF9 00C0 0000             		lea	($C00000).l,a6
00007060 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007064 47F8 FF18                  		lea	($FFFFFF18).w,a3
00007068 49F8 A440                  		lea	($FFFFA440).w,a4
0000706C 343C 6000                  		move.w	#$6000,d2
00007070 6100 0000                  		bsr.w	sub_6954
00007074 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007078 47F8 FF20                  		lea	($FFFFFF20).w,a3
0000707C 6100 0000                  		bsr.w	sub_69F4
00007080 45F8 FF30                  		lea	($FFFFFF30).w,a2
00007084 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007088 49F8 A400                  		lea	($FFFFA400).w,a4
0000708C 343C 4000                  		move.w	#$4000,d2
00007090 4A12                       		tst.b	(a2)
00007092 6700                       		beq.s	locret_6952
00007094 0892 0000                  		bclr	#0,(a2)
00007098 6700                       		beq.s	loc_6908
0000709A 78F0                       		moveq	#-$10,d4
0000709C 7AF0                       		moveq	#-$10,d5
0000709E 6100 0000                  		bsr.w	sub_6C20
000070A2 78F0                       		moveq	#-$10,d4
000070A4 7AF0                       		moveq	#-$10,d5
000070A6 6100 0000                  		bsr.w	sub_6AD8
000070AA                            
000070AA                            loc_6908:
000070AA 0892 0001                  		bclr	#1,(a2)
000070AE 6700                       		beq.s	loc_6922
000070B0 383C 00E0                  		move.w	#$E0,d4
000070B4 7AF0                       		moveq	#-$10,d5
000070B6 6100 0000                  		bsr.w	sub_6C20
000070BA 383C 00E0                  		move.w	#$E0,d4
000070BE 7AF0                       		moveq	#-$10,d5
000070C0 6100 0000                  		bsr.w	sub_6AD8
000070C4                            
000070C4                            loc_6922:
000070C4 0892 0002                  		bclr	#2,(a2)
000070C8 6700                       		beq.s	loc_6938
000070CA 78F0                       		moveq	#-$10,d4
000070CC 7AF0                       		moveq	#-$10,d5
000070CE 6100 0000                  		bsr.w	sub_6C20
000070D2 78F0                       		moveq	#-$10,d4
000070D4 7AF0                       		moveq	#-$10,d5
000070D6 6100 0000                  		bsr.w	sub_6B04
000070DA                            
000070DA                            loc_6938:
000070DA 0892 0003                  		bclr	#3,(a2)
000070DE 6700                       		beq.s	locret_6952
000070E0 78F0                       		moveq	#-$10,d4
000070E2 3A3C 0140                  		move.w	#$140,d5
000070E6 6100 0000                  		bsr.w	sub_6C20
000070EA 78F0                       		moveq	#-$10,d4
000070EC 3A3C 0140                  		move.w	#$140,d5
000070F0 6100 0000                  		bsr.w	sub_6B04
000070F4                            
000070F4                            locret_6952:
000070F4 4E75                       		rts	
000070F6                            ; End of function LoadTilesAsYouMove
000070F6                            
000070F6                            
000070F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070F6                            
000070F6                            
000070F6                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
000070F6 4A12                       		tst.b	(a2)
000070F8 6700 0000                  		beq.w	locret_69F2
000070FC 0892 0000                  		bclr	#0,(a2)
00007100 6700                       		beq.s	loc_6972
00007102 78F0                       		moveq	#-$10,d4
00007104 7AF0                       		moveq	#-$10,d5
00007106 6100 0000                  		bsr.w	sub_6C20
0000710A 78F0                       		moveq	#-$10,d4
0000710C 7AF0                       		moveq	#-$10,d5
0000710E 7C1F                       		moveq	#$1F,d6
00007110 6100 0000                  		bsr.w	sub_6ADA
00007114                            
00007114                            loc_6972:
00007114 0892 0001                  		bclr	#1,(a2)
00007118 6700                       		beq.s	loc_698E
0000711A 383C 00E0                  		move.w	#$E0,d4
0000711E 7AF0                       		moveq	#-$10,d5
00007120 6100 0000                  		bsr.w	sub_6C20
00007124 383C 00E0                  		move.w	#$E0,d4
00007128 7AF0                       		moveq	#-$10,d5
0000712A 7C1F                       		moveq	#$1F,d6
0000712C 6100 0000                  		bsr.w	sub_6ADA
00007130                            
00007130                            loc_698E:
00007130 0892 0002                  		bclr	#2,(a2)
00007134 6700                       		beq.s	loc_69BE
00007136 78F0                       		moveq	#-$10,d4
00007138 7AF0                       		moveq	#-$10,d5
0000713A 6100 0000                  		bsr.w	sub_6C20
0000713E 78F0                       		moveq	#-$10,d4
00007140 7AF0                       		moveq	#-$10,d5
00007142 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007146 322B 0004                  		move.w	4(a3),d1
0000714A 0241 FFF0                  		andi.w	#-$10,d1
0000714E 9C41                       		sub.w	d1,d6
00007150 6D00                       		blt.s	loc_69BE
00007152 E84E                       		lsr.w	#4,d6
00007154 0C46 000F                  		cmpi.w	#$F,d6
00007158 6500                       		bcs.s	loc_69BA
0000715A 7C0F                       		moveq	#$F,d6
0000715C                            
0000715C                            loc_69BA:
0000715C 6100 0000                  		bsr.w	sub_6B06
00007160                            
00007160                            loc_69BE:
00007160 0892 0003                  		bclr	#3,(a2)
00007164 6700                       		beq.s	locret_69F2
00007166 78F0                       		moveq	#-$10,d4
00007168 3A3C 0140                  		move.w	#$140,d5
0000716C 6100 0000                  		bsr.w	sub_6C20
00007170 78F0                       		moveq	#-$10,d4
00007172 3A3C 0140                  		move.w	#$140,d5
00007176 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000717A 322B 0004                  		move.w	4(a3),d1
0000717E 0241 FFF0                  		andi.w	#-$10,d1
00007182 9C41                       		sub.w	d1,d6
00007184 6D00                       		blt.s	locret_69F2
00007186 E84E                       		lsr.w	#4,d6
00007188 0C46 000F                  		cmpi.w	#$F,d6
0000718C 6500                       		bcs.s	loc_69EE
0000718E 7C0F                       		moveq	#$F,d6
00007190                            
00007190                            loc_69EE:
00007190 6100 0000                  		bsr.w	sub_6B06
00007194                            
00007194                            locret_69F2:
00007194 4E75                       		rts	
00007196                            ; End of function sub_6954
00007196                            
00007196                            
00007196                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007196                            
00007196                            
00007196                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007196 4A12                       		tst.b	(a2)
00007198 6700 0000                  		beq.w	locret_6A80
0000719C 0892 0002                  		bclr	#2,(a2)
000071A0 6700                       		beq.s	loc_6A3E
000071A2 0C53 0010                  		cmpi.w	#$10,(a3)
000071A6 6500                       		bcs.s	loc_6A3E
000071A8 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000071AC 322B 0004                  		move.w	4(a3),d1
000071B0 0241 FFF0                  		andi.w	#-$10,d1
000071B4 9841                       		sub.w	d1,d4
000071B6 3F04                       		move.w	d4,-(sp)
000071B8 7AF0                       		moveq	#-$10,d5
000071BA 6100 0000                  		bsr.w	sub_6C20
000071BE 381F                       		move.w	(sp)+,d4
000071C0 7AF0                       		moveq	#-$10,d5
000071C2 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000071C6 322B 0004                  		move.w	4(a3),d1
000071CA 0241 FFF0                  		andi.w	#-$10,d1
000071CE 9C41                       		sub.w	d1,d6
000071D0 6D00                       		blt.s	loc_6A3E
000071D2 E84E                       		lsr.w	#4,d6
000071D4 0446 000E                  		subi.w	#$E,d6
000071D8 6400                       		bcc.s	loc_6A3E
000071DA 4446                       		neg.w	d6
000071DC 6100 0000                  		bsr.w	sub_6B06
000071E0                            
000071E0                            loc_6A3E:
000071E0 0892 0003                  		bclr	#3,(a2)
000071E4 6700                       		beq.s	locret_6A80
000071E6 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000071EA 322B 0004                  		move.w	4(a3),d1
000071EE 0241 FFF0                  		andi.w	#-$10,d1
000071F2 9841                       		sub.w	d1,d4
000071F4 3F04                       		move.w	d4,-(sp)
000071F6 3A3C 0140                  		move.w	#$140,d5
000071FA 6100 0000                  		bsr.w	sub_6C20
000071FE 381F                       		move.w	(sp)+,d4
00007200 3A3C 0140                  		move.w	#$140,d5
00007204 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007208 322B 0004                  		move.w	4(a3),d1
0000720C 0241 FFF0                  		andi.w	#-$10,d1
00007210 9C41                       		sub.w	d1,d6
00007212 6D00                       		blt.s	locret_6A80
00007214 E84E                       		lsr.w	#4,d6
00007216 0446 000E                  		subi.w	#$E,d6
0000721A 6400                       		bcc.s	locret_6A80
0000721C 4446                       		neg.w	d6
0000721E 6100 0000                  		bsr.w	sub_6B06
00007222                            
00007222                            locret_6A80:
00007222 4E75                       		rts	
00007224                            ; End of function sub_69F4
00007224                            
00007224                            ; ===========================================================================
00007224 4A12                       		tst.b	(a2)
00007226 6700                       		beq.s	locret_6AD6
00007228 0892 0002                  		bclr	#2,(a2)
0000722C 6700                       		beq.s	loc_6AAC
0000722E 383C 00D0                  		move.w	#$D0,d4
00007232 322B 0004                  		move.w	4(a3),d1
00007236 0241 FFF0                  		andi.w	#-$10,d1
0000723A 9841                       		sub.w	d1,d4
0000723C 3F04                       		move.w	d4,-(sp)
0000723E 7AF0                       		moveq	#-$10,d5
00007240 6100 0000                  		bsr.w	sub_6C3C
00007244 381F                       		move.w	(sp)+,d4
00007246 7AF0                       		moveq	#-$10,d5
00007248 7C02                       		moveq	#2,d6
0000724A 6100 0000                  		bsr.w	sub_6B06
0000724E                            
0000724E                            loc_6AAC:
0000724E 0892 0003                  		bclr	#3,(a2)
00007252 6700                       		beq.s	locret_6AD6
00007254 383C 00D0                  		move.w	#$D0,d4
00007258 322B 0004                  		move.w	4(a3),d1
0000725C 0241 FFF0                  		andi.w	#-$10,d1
00007260 9841                       		sub.w	d1,d4
00007262 3F04                       		move.w	d4,-(sp)
00007264 3A3C 0140                  		move.w	#$140,d5
00007268 6100 0000                  		bsr.w	sub_6C3C
0000726C 381F                       		move.w	(sp)+,d4
0000726E 3A3C 0140                  		move.w	#$140,d5
00007272 7C02                       		moveq	#2,d6
00007274 6100 0000                  		bsr.w	sub_6B06
00007278                            
00007278                            locret_6AD6:
00007278 4E75                       		rts	
0000727A                            
0000727A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000727A                            
0000727A                            
0000727A                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000727A 7C15                       		moveq	#$15,d6
0000727C                            ; End of function sub_6AD8
0000727C                            
0000727C                            
0000727C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000727C                            
0000727C                            
0000727C                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
0000727C 2E3C 0080 0000             		move.l	#$800000,d7
00007282 2200                       		move.l	d0,d1
00007284                            
00007284                            loc_6AE2:
00007284 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007288 6100 0000                  		bsr.w	sub_6BD6
0000728C 2001                       		move.l	d1,d0
0000728E 6100 0000                  		bsr.w	sub_6B32
00007292 5801                       		addq.b	#4,d1
00007294 0201 007F                  		andi.b	#$7F,d1
00007298 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000729C 0645 0010                  		addi.w	#$10,d5
000072A0 51CE FFE2                  		dbf	d6,loc_6AE2
000072A4 4E75                       		rts	
000072A6                            ; End of function sub_6ADA
000072A6                            
000072A6                            
000072A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072A6                            
000072A6                            
000072A6                            sub_6B04:				; XREF: LoadTilesAsYouMove
000072A6 7C0F                       		moveq	#$F,d6
000072A8                            ; End of function sub_6B04
000072A8                            
000072A8                            
000072A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072A8                            
000072A8                            
000072A8                            sub_6B06:				; XREF: sub_6954
000072A8 2E3C 0080 0000             		move.l	#$800000,d7
000072AE 2200                       		move.l	d0,d1
000072B0                            
000072B0                            loc_6B0E:
000072B0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000072B4 6100 0000                  		bsr.w	sub_6BD6
000072B8 2001                       		move.l	d1,d0
000072BA 6100 0000                  		bsr.w	sub_6B32
000072BE 0641 0100                  		addi.w	#$100,d1
000072C2 0241 0FFF                  		andi.w	#$FFF,d1
000072C6 4CDF 0030                  		movem.l	(sp)+,d4-d5
000072CA 0644 0010                  		addi.w	#$10,d4
000072CE 51CE FFE0                  		dbf	d6,loc_6B0E
000072D2 4E75                       		rts	
000072D4                            ; End of function sub_6B06
000072D4                            
000072D4                            
000072D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D4                            
000072D4                            
000072D4                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000072D4 8042                       		or.w	d2,d0
000072D6 4840                       		swap	d0
000072D8 0810 0004                  		btst	#4,(a0)
000072DC 6600                       		bne.s	loc_6B6E
000072DE 0810 0003                  		btst	#3,(a0)
000072E2 6600                       		bne.s	loc_6B4E
000072E4 2A80                       		move.l	d0,(a5)
000072E6 2C99                       		move.l	(a1)+,(a6)
000072E8 D087                       		add.l	d7,d0
000072EA 2A80                       		move.l	d0,(a5)
000072EC 2C99                       		move.l	(a1)+,(a6)
000072EE 4E75                       		rts	
000072F0                            ; ===========================================================================
000072F0                            
000072F0                            loc_6B4E:
000072F0 2A80                       		move.l	d0,(a5)
000072F2 2819                       		move.l	(a1)+,d4
000072F4 0A84 0800 0800             		eori.l	#$8000800,d4
000072FA 4844                       		swap	d4
000072FC 2C84                       		move.l	d4,(a6)
000072FE D087                       		add.l	d7,d0
00007300 2A80                       		move.l	d0,(a5)
00007302 2819                       		move.l	(a1)+,d4
00007304 0A84 0800 0800             		eori.l	#$8000800,d4
0000730A 4844                       		swap	d4
0000730C 2C84                       		move.l	d4,(a6)
0000730E 4E75                       		rts	
00007310                            ; ===========================================================================
00007310                            
00007310                            loc_6B6E:
00007310 0810 0003                  		btst	#3,(a0)
00007314 6600                       		bne.s	loc_6B90
00007316 2A80                       		move.l	d0,(a5)
00007318 2A19                       		move.l	(a1)+,d5
0000731A 2819                       		move.l	(a1)+,d4
0000731C 0A84 1000 1000             		eori.l	#$10001000,d4
00007322 2C84                       		move.l	d4,(a6)
00007324 D087                       		add.l	d7,d0
00007326 2A80                       		move.l	d0,(a5)
00007328 0A85 1000 1000             		eori.l	#$10001000,d5
0000732E 2C85                       		move.l	d5,(a6)
00007330 4E75                       		rts	
00007332                            ; ===========================================================================
00007332                            
00007332                            loc_6B90:
00007332 2A80                       		move.l	d0,(a5)
00007334 2A19                       		move.l	(a1)+,d5
00007336 2819                       		move.l	(a1)+,d4
00007338 0A84 1800 1800             		eori.l	#$18001800,d4
0000733E 4844                       		swap	d4
00007340 2C84                       		move.l	d4,(a6)
00007342 D087                       		add.l	d7,d0
00007344 2A80                       		move.l	d0,(a5)
00007346 0A85 1800 1800             		eori.l	#$18001800,d5
0000734C 4845                       		swap	d5
0000734E 2C85                       		move.l	d5,(a6)
00007350 4E75                       		rts	
00007352                            ; End of function sub_6B32
00007352                            
00007352                            ; ===========================================================================
00007352 4E75                       		rts	
00007354                            ; ===========================================================================
00007354 2A80                       		move.l	d0,(a5)
00007356 3A3C 2000                  		move.w	#$2000,d5
0000735A 3819                       		move.w	(a1)+,d4
0000735C D845                       		add.w	d5,d4
0000735E 3C84                       		move.w	d4,(a6)
00007360 3819                       		move.w	(a1)+,d4
00007362 D845                       		add.w	d5,d4
00007364 3C84                       		move.w	d4,(a6)
00007366 D087                       		add.l	d7,d0
00007368 2A80                       		move.l	d0,(a5)
0000736A 3819                       		move.w	(a1)+,d4
0000736C D845                       		add.w	d5,d4
0000736E 3C84                       		move.w	d4,(a6)
00007370 3819                       		move.w	(a1)+,d4
00007372 D845                       		add.w	d5,d4
00007374 3C84                       		move.w	d4,(a6)
00007376 4E75                       		rts	
00007378                            
00007378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007378                            
00007378                            
00007378                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007378 43F8 B000                  		lea	($FFFFB000).w,a1
0000737C D86B 0004                  		add.w	4(a3),d4
00007380 DA53                       		add.w	(a3),d5
00007382 3604                       		move.w	d4,d3
00007384 E24B                       		lsr.w	#1,d3
00007386 0243 0380                  		andi.w	#$380,d3
0000738A E64D                       		lsr.w	#3,d5
0000738C 3005                       		move.w	d5,d0
0000738E EA48                       		lsr.w	#5,d0
00007390 0240 007F                  		andi.w	#$7F,d0
00007394 D043                       		add.w	d3,d0
00007396 76FF                       		moveq	#-1,d3
00007398 1634 0000                  		move.b	(a4,d0.w),d3
0000739C 6700                       		beq.s	locret_6C1E
0000739E 5303                       		subq.b	#1,d3
000073A0 0243 007F                  		andi.w	#$7F,d3
000073A4 EE5B                       		ror.w	#7,d3
000073A6 D844                       		add.w	d4,d4
000073A8 0244 01E0                  		andi.w	#$1E0,d4
000073AC 0245 001E                  		andi.w	#$1E,d5
000073B0 D644                       		add.w	d4,d3
000073B2 D645                       		add.w	d5,d3
000073B4 2043                       		movea.l	d3,a0
000073B6 3610                       		move.w	(a0),d3
000073B8 0243 03FF                  		andi.w	#$3FF,d3
000073BC E74B                       		lsl.w	#3,d3
000073BE D2C3                       		adda.w	d3,a1
000073C0                            
000073C0                            locret_6C1E:
000073C0 4E75                       		rts	
000073C2                            ; End of function sub_6BD6
000073C2                            
000073C2                            
000073C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073C2                            
000073C2                            
000073C2                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000073C2 D86B 0004                  		add.w	4(a3),d4
000073C6 DA53                       		add.w	(a3),d5
000073C8 0244 00F0                  		andi.w	#$F0,d4
000073CC 0245 01F0                  		andi.w	#$1F0,d5
000073D0 E94C                       		lsl.w	#4,d4
000073D2 E44D                       		lsr.w	#2,d5
000073D4 D845                       		add.w	d5,d4
000073D6 7003                       		moveq	#3,d0
000073D8 4840                       		swap	d0
000073DA 3004                       		move.w	d4,d0
000073DC 4E75                       		rts	
000073DE                            ; End of function sub_6C20
000073DE                            
000073DE                            
000073DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073DE                            ; not used
000073DE                            
000073DE                            
000073DE                            sub_6C3C:
000073DE D86B 0004                  		add.w	4(a3),d4
000073E2 DA53                       		add.w	(a3),d5
000073E4 0244 00F0                  		andi.w	#$F0,d4
000073E8 0245 01F0                  		andi.w	#$1F0,d5
000073EC E94C                       		lsl.w	#4,d4
000073EE E44D                       		lsr.w	#2,d5
000073F0 D845                       		add.w	d5,d4
000073F2 7002                       		moveq	#2,d0
000073F4 4840                       		swap	d0
000073F6 3004                       		move.w	d4,d0
000073F8 4E75                       		rts	
000073FA                            ; End of function sub_6C3C
000073FA                            
000073FA                            ; ---------------------------------------------------------------------------
000073FA                            ; Subroutine to	load tiles as soon as the level	appears
000073FA                            ; ---------------------------------------------------------------------------
000073FA                            
000073FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073FA                            
000073FA                            
000073FA                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000073FA 4BF9 00C0 0004             		lea	($C00004).l,a5
00007400 4DF9 00C0 0000             		lea	($C00000).l,a6
00007406 47F8 F700                  		lea	($FFFFF700).w,a3
0000740A 49F8 A400                  		lea	($FFFFA400).w,a4
0000740E 343C 4000                  		move.w	#$4000,d2
00007412 6100                       		bsr.s	LoadTilesFromStart2
00007414 47F8 F708                  		lea	($FFFFF708).w,a3
00007418 49F8 A440                  		lea	($FFFFA440).w,a4
0000741C 343C 6000                  		move.w	#$6000,d2
00007420                            ; End of function LoadTilesFromStart
00007420                            
00007420                            
00007420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007420                            
00007420                            
00007420                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007420 78F0                       		moveq	#-$10,d4
00007422 7C0F                       		moveq	#$F,d6
00007424                            
00007424                            loc_6C82:
00007424 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007428 7A00                       		moveq	#0,d5
0000742A 3204                       		move.w	d4,d1
0000742C 6100 FF94                  		bsr.w	sub_6C20
00007430 3801                       		move.w	d1,d4
00007432 7A00                       		moveq	#0,d5
00007434 7C1F                       		moveq	#$1F,d6
00007436 6100 FE44                  		bsr.w	sub_6ADA
0000743A 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000743E 0644 0010                  		addi.w	#$10,d4
00007442 51CE FFE0                  		dbf	d6,loc_6C82
00007446 4E75                       		rts	
00007448                            ; End of function LoadTilesFromStart2
00007448                            
00007448                            ; ---------------------------------------------------------------------------
00007448                            ; Main Load Block loading subroutine
00007448                            ; ---------------------------------------------------------------------------
00007448                            
00007448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007448                            
00007448                            
00007448                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007448 7000                       		moveq	#0,d0
0000744A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000744E E948                       		lsl.w	#4,d0
00007450 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007456 45F2 0000                  		lea	(a2,d0.w),a2
0000745A 2F0A                       		move.l	a2,-(sp)
0000745C 588A                       		addq.l	#4,a2
0000745E 205A                       		movea.l	(a2)+,a0
00007460 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007464 303C 0000                  		move.w	#0,d0
00007468 6100 A4A6                  		bsr.w	EniDec
0000746C 205A                       		movea.l	(a2)+,a0
0000746E 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007474 6100 A618                  		bsr.w	KosDec
00007478 6100 0000                  		bsr.w	LevelLayoutLoad
0000747C 301A                       		move.w	(a2)+,d0
0000747E 3012                       		move.w	(a2),d0
00007480 0240 00FF                  		andi.w	#$FF,d0
00007484 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000748A 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000748C 700C                       		moveq	#$C,d0		; use SB3 pallet
0000748E                            
0000748E                            MLB_ChkSBZPal:
0000748E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007494 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007496 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000749C 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000749E                            
0000749E                            MLB_UsePal0E:
0000749E 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000074A0                            
000074A0                            MLB_NormalPal:
000074A0 6100 AE18                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000074A4 245F                       		movea.l	(sp)+,a2
000074A6 584A                       		addq.w	#4,a2
000074A8 7000                       		moveq	#0,d0
000074AA 1012                       		move.b	(a2),d0
000074AC 6700                       		beq.s	locret_6D10
000074AE 6100 A2C2                  		bsr.w	LoadPLC		; load pattern load cues
000074B2                            
000074B2                            locret_6D10:
000074B2 4E75                       		rts	
000074B4                            ; End of function MainLoadBlockLoad
000074B4                            
000074B4                            ; ---------------------------------------------------------------------------
000074B4                            ; Level	layout loading subroutine
000074B4                            ; ---------------------------------------------------------------------------
000074B4                            
000074B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074B4                            
000074B4                            
000074B4                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000074B4 47F8 A400                  		lea	($FFFFA400).w,a3
000074B8 323C 01FF                  		move.w	#$1FF,d1
000074BC 7000                       		moveq	#0,d0
000074BE                            
000074BE                            LevLoad_ClrRam:
000074BE 26C0                       		move.l	d0,(a3)+
000074C0 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000074C4                            
000074C4 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000074C8 7200                       		moveq	#0,d1
000074CA 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000074CE 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000074D2 7202                       		moveq	#2,d1
000074D4                            ; End of function LevelLayoutLoad
000074D4                            
000074D4                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000074D4                            
000074D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074D4                            
000074D4                            
000074D4                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000074D4 3038 FE10                  		move.w	($FFFFFE10).w,d0
000074D8 ED08                       		lsl.b	#6,d0
000074DA EA48                       		lsr.w	#5,d0
000074DC 3400                       		move.w	d0,d2
000074DE D040                       		add.w	d0,d0
000074E0 D042                       		add.w	d2,d0
000074E2 D041                       		add.w	d1,d0
000074E4 43F9 0000 0000             		lea	(Level_Index).l,a1
000074EA 3031 0000                  		move.w	(a1,d0.w),d0
000074EE 43F1 0000                  		lea	(a1,d0.w),a1
000074F2 7200                       		moveq	#0,d1
000074F4 3401                       		move.w	d1,d2
000074F6 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000074F8 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000074FA                            
000074FA                            LevLoad_NumRows:
000074FA 3001                       		move.w	d1,d0
000074FC 204B                       		movea.l	a3,a0
000074FE                            
000074FE                            LevLoad_Row:
000074FE 10D9                       		move.b	(a1)+,(a0)+
00007500 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007504 47EB 0080                  		lea	$80(a3),a3	; do next row
00007508 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000750C 4E75                       		rts	
0000750E                            ; End of function LevelLayoutLoad2
0000750E                            
0000750E                            ; ---------------------------------------------------------------------------
0000750E                            ; Dynamic screen resize	loading	subroutine
0000750E                            ; ---------------------------------------------------------------------------
0000750E                            
0000750E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000750E                            
0000750E                            
0000750E                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000750E 7000                       		moveq	#0,d0
00007510 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007514 D040                       		add.w	d0,d0
00007516 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000751A 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000751E 7202                       		moveq	#2,d1
00007520 3038 F726                  		move.w	($FFFFF726).w,d0
00007524 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007528 6700                       		beq.s	locret_6DAA
0000752A 6400                       		bcc.s	loc_6DAC
0000752C 4441                       		neg.w	d1
0000752E 3038 F704                  		move.w	($FFFFF704).w,d0
00007532 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007536 6300                       		bls.s	loc_6DA0
00007538 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000753C 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007542                            
00007542                            loc_6DA0:
00007542 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007546 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000754C                            
0000754C                            locret_6DAA:
0000754C 4E75                       		rts	
0000754E                            ; ===========================================================================
0000754E                            
0000754E                            loc_6DAC:				; XREF: DynScrResizeLoad
0000754E 3038 F704                  		move.w	($FFFFF704).w,d0
00007552 5040                       		addq.w	#8,d0
00007554 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007558 6500                       		bcs.s	loc_6DC4
0000755A 0838 0001 D022             		btst	#1,($FFFFD022).w
00007560 6700                       		beq.s	loc_6DC4
00007562 D241                       		add.w	d1,d1
00007564 D241                       		add.w	d1,d1
00007566                            
00007566                            loc_6DC4:
00007566 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000756A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007570 4E75                       		rts	
00007572                            ; End of function DynScrResizeLoad
00007572                            
00007572                            ; ===========================================================================
00007572                            ; ---------------------------------------------------------------------------
00007572                            ; Offset index for dynamic screen resizing
00007572                            ; ---------------------------------------------------------------------------
00007572 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007576 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000757A 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000757E 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
00007582                            ; ===========================================================================
00007582                            ; ---------------------------------------------------------------------------
00007582                            ; Green	Hill Zone dynamic screen resizing
00007582                            ; ---------------------------------------------------------------------------
00007582                            
00007582                            Resize_GHZ:				; XREF: Resize_Index
00007582 7000                       		moveq	#0,d0
00007584 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007588 D040                       		add.w	d0,d0
0000758A 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000758E 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007592                            ; ===========================================================================
00007592 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007594 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007596 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007598                            ; ===========================================================================
00007598                            
00007598                            Resize_GHZ1:
00007598 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000759E 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000075A4 6500                       		bcs.s	locret_6E08	; if not, branch
000075A6 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000075AC                            
000075AC                            locret_6E08:
000075AC 4E75                       		rts	
000075AE                            ; ===========================================================================
000075AE                            
000075AE                            Resize_GHZ2:
000075AE 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000075B4 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000075BA 6500                       		bcs.s	locret_6E3A
000075BC 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000075C2 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000075C8 6500                       		bcs.s	locret_6E3A
000075CA 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000075D0 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
000075D6 6500                       		bcs.s	locret_6E3A
000075D8 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
000075DE 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
000075E4 6500                       		bcs.s	locret_6E3A
000075E6 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
000075EC                            		
000075EC                            locret_6E3A:
000075EC 4E75                       		rts	
000075EE                            ; ===========================================================================
000075EE                            
000075EE                            Resize_GHZ3:
000075EE 7000                       		moveq	#0,d0
000075F0 1038 F742                  		move.b	($FFFFF742).w,d0
000075F4 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000075F8 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000075FC                            ; ===========================================================================
000075FC 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000075FE 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007600 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007602                            ; ===========================================================================
00007602                            
00007602                            Resize_GHZ3main:
00007602 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007608 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000760E 6500                       		bcs.s	locret_6E96
00007610 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007616 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000761C 6500                       		bcs.s	locret_6E96
0000761E 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007624 6500                       		bcs.s	loc_6E98
00007626 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000762C 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007632 6400                       		bcc.s	loc_6E8E
00007634 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000763A 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007640                            
00007640                            loc_6E8E:
00007640 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007646 6400                       		bcc.s	loc_6E98
00007648                            
00007648                            locret_6E96:
00007648 4E75                       		rts	
0000764A                            ; ===========================================================================
0000764A                            
0000764A                            loc_6E98:
0000764A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007650 5438 F742                  		addq.b	#2,($FFFFF742).w
00007654 4E75                       		rts	
00007656                            ; ===========================================================================
00007656                            
00007656                            Resize_GHZ3boss:
00007656 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000765C 6400                       		bcc.s	loc_6EB0
0000765E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007662                            
00007662                            loc_6EB0:
00007662 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007668 6500                       		bcs.s	locret_6EE8
0000766A 6100 0000                  		bsr.w	SingleObjLoad
0000766E 6600                       		bne.s	loc_6ED0
00007670 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007674 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000767A 337C 0280 000C             		move.w	#$280,$C(a1)
00007680                            
00007680                            loc_6ED0:
00007680 303C 008C                  		move.w	#$8C,d0
00007684 6100 9F02                  		bsr.w	PlaySound	; play boss music
00007688 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000768E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007692 7011                       		moveq	#$11,d0
00007694 6000 A0DC                  		bra.w	LoadPLC		; load boss patterns
00007698                            ; ===========================================================================
00007698                            
00007698                            locret_6EE8:
00007698 4E75                       		rts	
0000769A                            ; ===========================================================================
0000769A                            
0000769A                            Resize_GHZ3end:
0000769A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076A0 4E75                       		rts	
000076A2                            ; ===========================================================================
000076A2                            ; ---------------------------------------------------------------------------
000076A2                            ; Labyrinth Zone dynamic screen	resizing
000076A2                            ; ---------------------------------------------------------------------------
000076A2                            
000076A2                            Resize_LZ:				; XREF: Resize_Index
000076A2 7000                       		moveq	#0,d0
000076A4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076A8 D040                       		add.w	d0,d0
000076AA 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000076AE 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000076B2                            ; ===========================================================================
000076B2 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000076B4 0000                       		dc.w Resize_LZ12-Resize_LZx
000076B6 0000                       		dc.w Resize_LZ3-Resize_LZx
000076B8 0000                       		dc.w Resize_SBZ3-Resize_LZx
000076BA                            ; ===========================================================================
000076BA                            
000076BA                            Resize_LZ12:
000076BA 4E75                       		rts	
000076BC                            ; ===========================================================================
000076BC                            
000076BC                            Resize_LZ3:
000076BC 7000                       		moveq	#0,d0
000076BE 1038 F742                  		move.b	($FFFFF742).w,d0
000076C2 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
000076C6 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
000076CA                            ; ===========================================================================
000076CA                            off_6E4A2:	
000076CA 0000                       		dc.w Resize_LZ3boss-off_6E4A2
000076CC 0000                       		dc.w Resize_LZ3end-off_6E4A2
000076CE                            ; ===========================================================================
000076CE                            Resize_LZ3boss:
000076CE 4A38 F742                  		tst.b	($FFFFF742).w
000076D2 6600                       		bne.s	locret_6F62
000076D4 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000076DA 6500                       		bcs.s	locret_6F62
000076DC 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
000076E2 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000076E8                            
000076E8 6100 0000                  		bsr.w	SingleObjLoad
000076EC 6600                       		bne.s	loc_6F4A
000076EE 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000076F2 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
000076F8 337C 06E0 000C             		move.w	#$6E0,$C(a1)
000076FE                            loc_6F4A:
000076FE 303C 008C                  		move.w	#$8C,d0
00007702 6100 9E84                  		bsr.w	PlaySound	; play boss music
00007706 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000770C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007710 7022                       		moveq	#$22,d0
00007712 6000 A05E                  		bra.w	LoadPLC		; load boss patterns
00007716                            ; ===========================================================================
00007716                            
00007716                            locret_6F62:
00007716 4E75                       		rts	
00007718                            ; ===========================================================================
00007718                            
00007718                            Resize_LZ3end:
00007718 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000771E 4E75                       		rts	
00007720                            ; ===========================================================================
00007720                            
00007720                            Resize_SBZ3:
00007720 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007726 6500                       		bcs.s	locret_6F8C
00007728 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000772E 6400                       		bcc.s	locret_6F8C	; if not, branch
00007730 4238 FE30                  		clr.b	($FFFFFE30).w
00007734 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000773A 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007740 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007746                            
00007746                            locret_6F8C:
00007746 4E75                       		rts	
00007748                            ; ===========================================================================
00007748                            ; ---------------------------------------------------------------------------
00007748                            ; Marble Zone dynamic screen resizing
00007748                            ; ---------------------------------------------------------------------------
00007748                            
00007748                            Resize_MZ:				; XREF: Resize_Index
00007748 7000                       		moveq	#0,d0
0000774A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000774E D040                       		add.w	d0,d0
00007750 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007754 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007758                            ; ===========================================================================
00007758 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000775A 0000                       		dc.w Resize_MZ2-Resize_MZx
0000775C 0000                       		dc.w Resize_MZ3-Resize_MZx
0000775E                            ; ===========================================================================
0000775E                            
0000775E                            Resize_MZ1:
0000775E 7000                       		moveq	#0,d0
00007760 1038 F742                  		move.b	($FFFFF742).w,d0
00007764 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007768 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000776C                            ; ===========================================================================
0000776C 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000776E 0000                       		dc.w loc_6FEA-off_6FB2
00007770 0000                       		dc.w loc_702E-off_6FB2
00007772 0000                       		dc.w loc_7050-off_6FB2
00007774                            ; ===========================================================================
00007774                            
00007774                            loc_6FBA:
00007774 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000777A 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007780 6500                       		bcs.s	locret_6FE8
00007782 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007788 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000778E 6500                       		bcs.s	locret_6FE8
00007790 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007796 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000779C 6500                       		bcs.s	locret_6FE8
0000779E 5438 F742                  		addq.b	#2,($FFFFF742).w
000077A2                            
000077A2                            locret_6FE8:
000077A2 4E75                       		rts	
000077A4                            ; ===========================================================================
000077A4                            
000077A4                            loc_6FEA:
000077A4 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077AA 6400                       		bcc.s	loc_6FF8
000077AC 5538 F742                  		subq.b	#2,($FFFFF742).w
000077B0 4E75                       		rts	
000077B2                            ; ===========================================================================
000077B2                            
000077B2                            loc_6FF8:
000077B2 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000077B8 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000077BE 6400                       		bcc.s	locret_702C
000077C0 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000077C6 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000077CC 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000077D2 6400                       		bcc.s	locret_702C
000077D4 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000077DA 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000077E0 6500                       		bcs.s	locret_702C
000077E2 5438 F742                  		addq.b	#2,($FFFFF742).w
000077E6                            
000077E6                            locret_702C:
000077E6 4E75                       		rts	
000077E8                            ; ===========================================================================
000077E8                            
000077E8                            loc_702E:
000077E8 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000077EE 6400                       		bcc.s	loc_703C
000077F0 5538 F742                  		subq.b	#2,($FFFFF742).w
000077F4 4E75                       		rts	
000077F6                            ; ===========================================================================
000077F6                            
000077F6                            loc_703C:
000077F6 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
000077FC 6500                       		bcs.s	locret_704E
000077FE 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007804 5438 F742                  		addq.b	#2,($FFFFF742).w
00007808                            
00007808                            locret_704E:
00007808 4E75                       		rts	
0000780A                            ; ===========================================================================
0000780A                            
0000780A                            loc_7050:
0000780A 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007810 6500                       		bcs.s	locret_7072
00007812 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007818 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000781E 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007824 6500                       		bcs.s	locret_7072
00007826 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000782C                            
0000782C                            locret_7072:
0000782C 4E75                       		rts	
0000782E                            ; ===========================================================================
0000782E                            
0000782E                            Resize_MZ2:
0000782E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007834 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000783A 6500                       		bcs.s	locret_7088
0000783C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007842                            
00007842                            locret_7088:
00007842 4E75                       		rts	
00007844                            ; ===========================================================================
00007844                            
00007844                            Resize_MZ3:
00007844 7000                       		moveq	#0,d0
00007846 1038 F742                  		move.b	($FFFFF742).w,d0
0000784A 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000784E 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007852                            ; ===========================================================================
00007852 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007854 0000                       		dc.w Resize_MZ3end-off_7098
00007856                            ; ===========================================================================
00007856                            
00007856                            Resize_MZ3boss:
00007856 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000785C 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007862 6500                       		bcs.s	locret_70E8
00007864 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000786A 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007870 6500                       		bcs.s	locret_70E8
00007872 6100 0000                  		bsr.w	SingleObjLoad
00007876 6600                       		bne.s	loc_70D0
00007878 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000787C 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007882 337C 022C 000C             		move.w	#$22C,$C(a1)
00007888                            
00007888                            loc_70D0:
00007888 303C 008C                  		move.w	#$8C,d0
0000788C 6100 9CFA                  		bsr.w	PlaySound	; play boss music
00007890 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007896 5438 F742                  		addq.b	#2,($FFFFF742).w
0000789A 7011                       		moveq	#$11,d0
0000789C 6000 9ED4                  		bra.w	LoadPLC		; load boss patterns
000078A0                            ; ===========================================================================
000078A0                            
000078A0                            locret_70E8:
000078A0 4E75                       		rts	
000078A2                            ; ===========================================================================
000078A2                            
000078A2                            Resize_MZ3end:
000078A2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078A8 4E75                       		rts	
000078AA                            ; ===========================================================================
000078AA                            ; ---------------------------------------------------------------------------
000078AA                            ; Star Light Zone dynamic screen resizing
000078AA                            ; ---------------------------------------------------------------------------
000078AA                            
000078AA                            Resize_SLZ:				; XREF: Resize_Index
000078AA 7000                       		moveq	#0,d0
000078AC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000078B0 D040                       		add.w	d0,d0
000078B2 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000078B6 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000078BA                            ; ===========================================================================
000078BA 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
000078BC 0000                       		dc.w Resize_SLZ2-Resize_SLZx
000078BE 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000078C0                            ; ===========================================================================
000078C0                            
000078C0                            Resize_SLZ1:
000078C0 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000078C6 4E75                       		rts	
000078C8                            
000078C8                            Resize_SLZ2:
000078C8 4E75                       		rts	
000078CA                            ; ===========================================================================
000078CA                            
000078CA                            Resize_SLZ3:
000078CA 7000                       		moveq	#0,d0
000078CC 1038 F742                  		move.b	($FFFFF742).w,d0
000078D0 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000078D4 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000078D8                            ; ===========================================================================
000078D8 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000078DA 0000                       		dc.w Resize_SLZ3boss-off_7118
000078DC 0000                       		dc.w Resize_SLZ3end-off_7118
000078DE                            ; ===========================================================================
000078DE                            
000078DE                            Resize_SLZ3main:
000078DE 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000078E4 6500                       		bcs.s	locret_7130
000078E6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000078EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000078F0                            
000078F0                            locret_7130:
000078F0 4E75                       		rts	
000078F2                            ; ===========================================================================
000078F2                            
000078F2                            Resize_SLZ3boss:
000078F2 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000078F8 6500                       		bcs.s	locret_715C
000078FA 6100 0000                  		bsr.w	SingleObjLoad
000078FE 6600                       		bne.s	loc_7144
00007900 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007904                            
00007904                            loc_7144:
00007904 303C 008C                  		move.w	#$8C,d0
00007908 6100 9C7E                  		bsr.w	PlaySound	; play boss music
0000790C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007912 5438 F742                  		addq.b	#2,($FFFFF742).w
00007916 7011                       		moveq	#$11,d0
00007918 6000 9E58                  		bra.w	LoadPLC		; load boss patterns
0000791C                            ; ===========================================================================
0000791C                            
0000791C                            locret_715C:
0000791C 4E75                       		rts	
0000791E                            ; ===========================================================================
0000791E                            
0000791E                            Resize_SLZ3end:
0000791E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007924 4E75                       		rts
00007926 4E75                       		rts
00007928                            ; ===========================================================================
00007928                            ; ---------------------------------------------------------------------------
00007928                            ; Spring Yard Zone dynamic screen resizing
00007928                            ; ---------------------------------------------------------------------------
00007928                            
00007928                            Resize_SYZ:				; XREF: Resize_Index
00007928 7000                       		moveq	#0,d0
0000792A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000792E D040                       		add.w	d0,d0
00007930 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007934 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007938                            ; ===========================================================================
00007938 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000793A 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000793C 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000793E                            ; ===========================================================================
0000793E                            
0000793E                            Resize_SYZ1:
0000793E 4E75                       		rts	
00007940                            ; ===========================================================================
00007940                            
00007940                            Resize_SYZ2:
00007940 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007946 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000794C 6500                       		bcs.s	locret_71A2
0000794E 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007954 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000795A 6500                       		bcs.s	locret_71A2
0000795C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007962                            
00007962                            locret_71A2:
00007962 4E75                       		rts	
00007964                            ; ===========================================================================
00007964                            
00007964                            Resize_SYZ3:
00007964 7000                       		moveq	#0,d0
00007966 1038 F742                  		move.b	($FFFFF742).w,d0
0000796A 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000796E 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007972                            ; ===========================================================================
00007972 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007974 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007976 0000                       		dc.w Resize_SYZ3end-off_71B2
00007978                            ; ===========================================================================
00007978                            
00007978                            Resize_SYZ3main:
00007978 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
0000797E 6500                       		bcs.s	locret_71CE
00007980 6100 0000                  		bsr.w	SingleObjLoad
00007984 6600                       		bne.s	locret_71CE
00007986 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000798A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000798E                            
0000798E                            locret_71CE:
0000798E 4E75                       		rts	
00007990                            ; ===========================================================================
00007990                            
00007990                            Resize_SYZ3boss:
00007990 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007996 6500                       		bcs.s	locret_7200
00007998 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
0000799E 6100 0000                  		bsr.w	SingleObjLoad
000079A2 6600                       		bne.s	loc_71EC
000079A4 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000079A8 5438 F742                  		addq.b	#2,($FFFFF742).w
000079AC                            
000079AC                            loc_71EC:
000079AC 303C 008C                  		move.w	#$8C,d0
000079B0 6100 9BD6                  		bsr.w	PlaySound	; play boss music
000079B4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079BA 7011                       		moveq	#$11,d0
000079BC 6000 9DB4                  		bra.w	LoadPLC		; load boss patterns
000079C0                            ; ===========================================================================
000079C0                            
000079C0                            locret_7200:
000079C0 4E75                       		rts	
000079C2                            ; ===========================================================================
000079C2                            
000079C2                            Resize_SYZ3end:
000079C2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000079C8 4E75                       		rts	
000079CA                            ; ===========================================================================
000079CA                            ; ---------------------------------------------------------------------------
000079CA                            ; Scrap	Brain Zone dynamic screen resizing
000079CA                            ; ---------------------------------------------------------------------------
000079CA                            
000079CA                            Resize_SBZ:				; XREF: Resize_Index
000079CA 7000                       		moveq	#0,d0
000079CC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000079D0 D040                       		add.w	d0,d0
000079D2 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000079D6 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000079DA                            ; ===========================================================================
000079DA 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000079DC 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000079DE 0000                       		dc.w Resize_FZ-Resize_SBZx
000079E0                            ; ===========================================================================
000079E0                            
000079E0                            Resize_SBZ1:
000079E0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000079E6 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000079EC 6500                       		bcs.s	locret_7242
000079EE 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000079F4 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000079FA 6500                       		bcs.s	locret_7242
000079FC 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007A02                            
00007A02                            locret_7242:
00007A02 4E75                       		rts	
00007A04                            ; ===========================================================================
00007A04                            
00007A04                            Resize_SBZ2:
00007A04 7000                       		moveq	#0,d0
00007A06 1038 F742                  		move.b	($FFFFF742).w,d0
00007A0A 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007A0E 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007A12                            ; ===========================================================================
00007A12 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007A14 0000                       		dc.w Resize_SBZ2boss-off_7252
00007A16 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007A18 0000                       		dc.w Resize_SBZ2end-off_7252
00007A1A                            ; ===========================================================================
00007A1A                            
00007A1A                            Resize_SBZ2main:
00007A1A 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007A20 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007A26 6500                       		bcs.s	locret_727A
00007A28 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007A2E 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007A34 6500                       		bcs.s	locret_727A
00007A36 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A3A                            
00007A3A                            locret_727A:
00007A3A 4E75                       		rts	
00007A3C                            ; ===========================================================================
00007A3C                            
00007A3C                            Resize_SBZ2boss:
00007A3C 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007A42 6500                       		bcs.s	locret_7298
00007A44 6100 0000                  		bsr.w	SingleObjLoad
00007A48 6600                       		bne.s	locret_7298
00007A4A 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007A4E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A52 701E                       		moveq	#$1E,d0
00007A54 6000 9D1C                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007A58                            ; ===========================================================================
00007A58                            
00007A58                            locret_7298:
00007A58 4E75                       		rts	
00007A5A                            ; ===========================================================================
00007A5A                            
00007A5A                            Resize_SBZ2boss2:
00007A5A 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007A60 6500                       		bcs.s	loc_72B6
00007A62 6100 0000                  		bsr.w	SingleObjLoad
00007A66 6600                       		bne.s	loc_72B0
00007A68 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007A6C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A70                            
00007A70                            loc_72B0:
00007A70 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007A76                            
00007A76                            loc_72B6:
00007A76 6000                       		bra.s	loc_72C2
00007A78                            ; ===========================================================================
00007A78                            
00007A78                            Resize_SBZ2end:
00007A78 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007A7E 6500                       		bcs.s	loc_72C2
00007A80 4E75                       		rts	
00007A82                            ; ===========================================================================
00007A82                            
00007A82                            loc_72C2:
00007A82 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007A88 4E75                       		rts	
00007A8A                            ; ===========================================================================
00007A8A                            
00007A8A                            Resize_FZ:
00007A8A 7000                       		moveq	#0,d0
00007A8C 1038 F742                  		move.b	($FFFFF742).w,d0
00007A90 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007A94 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007A98                            ; ===========================================================================
00007A98 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007A9C 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007AA0 0000                       		dc.w Resize_FZend2-off_72D8
00007AA2                            ; ===========================================================================
00007AA2                            
00007AA2                            Resize_FZmain:
00007AA2 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007AA8 6500                       		bcs.s	loc_72F4
00007AAA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AAE 701F                       		moveq	#$1F,d0
00007AB0 6100 9CC0                  		bsr.w	LoadPLC		; load FZ boss patterns
00007AB4                            
00007AB4                            loc_72F4:
00007AB4 60CC                       		bra.s	loc_72C2
00007AB6                            ; ===========================================================================
00007AB6                            
00007AB6                            Resize_FZboss:
00007AB6 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007ABC 6500                       		bcs.s	loc_7312
00007ABE 6100 0000                  		bsr.w	SingleObjLoad
00007AC2 6600                       		bne.s	loc_7312
00007AC4 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007AC8 5438 F742                  		addq.b	#2,($FFFFF742).w
00007ACC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007AD2                            
00007AD2                            loc_7312:
00007AD2 60AE                       		bra.s	loc_72C2
00007AD4                            ; ===========================================================================
00007AD4                            
00007AD4                            Resize_FZend:
00007AD4 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007ADA 6500                       		bcs.s	loc_7320
00007ADC 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AE0                            
00007AE0                            loc_7320:
00007AE0 60A0                       		bra.s	loc_72C2
00007AE2                            ; ===========================================================================
00007AE2                            
00007AE2                            locret_7322:
00007AE2 4E75                       		rts	
00007AE4                            ; ===========================================================================
00007AE4                            
00007AE4                            Resize_FZend2:
00007AE4 609C                       		bra.s	loc_72C2
00007AE6                            ; ===========================================================================
00007AE6                            ; ---------------------------------------------------------------------------
00007AE6                            ; Ending sequence dynamic screen resizing (empty)
00007AE6                            ; ---------------------------------------------------------------------------
00007AE6                            
00007AE6                            Resize_Ending:				; XREF: Resize_Index
00007AE6 4E75                       		rts	
00007AE8                            ; ===========================================================================
00007AE8                            ; ---------------------------------------------------------------------------
00007AE8                            ; Object 11 - GHZ bridge
00007AE8                            ; ---------------------------------------------------------------------------
00007AE8                            
00007AE8                            Obj11:					; XREF: Obj_Index
00007AE8 7000                       		moveq	#0,d0
00007AEA 1028 0024                  		move.b	$24(a0),d0
00007AEE 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007AF2 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007AF6                            ; ===========================================================================
00007AF6 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007AFA 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007AFE 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007B02                            ; ===========================================================================
00007B02                            
00007B02                            Obj11_Main:				; XREF: Obj11_Index
00007B02 5428 0024                  		addq.b	#2,$24(a0)
00007B06 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007B0E 317C 438E 0002             		move.w	#$438E,2(a0)
00007B14 117C 0004 0001             		move.b	#4,1(a0)
00007B1A 117C 0003 0018             		move.b	#3,$18(a0)
00007B20 117C 0080 0019             		move.b	#$80,$19(a0)
00007B26 3428 000C                  		move.w	$C(a0),d2
00007B2A 3628 0008                  		move.w	8(a0),d3
00007B2E 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007B30 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007B34 7200                       		moveq	#0,d1
00007B36 1212                       		move.b	(a2),d1		; copy a2 to d1
00007B38 14FC 0000                  		move.b	#0,(a2)+
00007B3C 3001                       		move.w	d1,d0
00007B3E E248                       		lsr.w	#1,d0
00007B40 E948                       		lsl.w	#4,d0
00007B42 9640                       		sub.w	d0,d3
00007B44 5501                       		subq.b	#2,d1
00007B46 6500                       		bcs.s	Obj11_Action
00007B48                            
00007B48                            Obj11_MakeBdg:
00007B48 6100 0000                  		bsr.w	SingleObjLoad
00007B4C 6600                       		bne.s	Obj11_Action
00007B4E 5228 0028                  		addq.b	#1,$28(a0)
00007B52 B668 0008                  		cmp.w	8(a0),d3
00007B56 6600                       		bne.s	loc_73B8
00007B58 0643 0010                  		addi.w	#$10,d3
00007B5C 3142 000C                  		move.w	d2,$C(a0)
00007B60 3142 003C                  		move.w	d2,$3C(a0)
00007B64 3A08                       		move.w	a0,d5
00007B66 0445 D000                  		subi.w	#-$3000,d5
00007B6A EC4D                       		lsr.w	#6,d5
00007B6C 0245 007F                  		andi.w	#$7F,d5
00007B70 14C5                       		move.b	d5,(a2)+
00007B72 5228 0028                  		addq.b	#1,$28(a0)
00007B76                            
00007B76                            loc_73B8:				; XREF: ROM:00007398j
00007B76 3A09                       		move.w	a1,d5
00007B78 0445 D000                  		subi.w	#-$3000,d5
00007B7C EC4D                       		lsr.w	#6,d5
00007B7E 0245 007F                  		andi.w	#$7F,d5
00007B82 14C5                       		move.b	d5,(a2)+
00007B84 137C 000A 0024             		move.b	#$A,$24(a1)
00007B8A 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007B8C 3342 000C                  		move.w	d2,$C(a1)
00007B90 3342 003C                  		move.w	d2,$3C(a1)
00007B94 3343 0008                  		move.w	d3,8(a1)
00007B98 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007BA0 337C 438E 0002             		move.w	#$438E,2(a1)
00007BA6 137C 0004 0001             		move.b	#4,1(a1)
00007BAC 137C 0003 0018             		move.b	#3,$18(a1)
00007BB2 137C 0008 0019             		move.b	#8,$19(a1)
00007BB8 0643 0010                  		addi.w	#$10,d3
00007BBC 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007BC0                            
00007BC0                            Obj11_Action:				; XREF: Obj11_Index
00007BC0 6100                       		bsr.s	Obj11_Solid
00007BC2 4A28 003E                  		tst.b	$3E(a0)
00007BC6 6700                       		beq.s	Obj11_Display
00007BC8 5928 003E                  		subq.b	#4,$3E(a0)
00007BCC 6100 0000                  		bsr.w	Obj11_Bend
00007BD0                            
00007BD0                            Obj11_Display:
00007BD0 6100 0000                  		bsr.w	DisplaySprite
00007BD4 6000 0000                  		bra.w	Obj11_ChkDel
00007BD8                            
00007BD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BD8                            
00007BD8                            
00007BD8                            Obj11_Solid:				; XREF: Obj11_Action
00007BD8 7200                       		moveq	#0,d1
00007BDA 1228 0028                  		move.b	$28(a0),d1
00007BDE E749                       		lsl.w	#3,d1
00007BE0 3401                       		move.w	d1,d2
00007BE2 5041                       		addq.w	#8,d1
00007BE4 D442                       		add.w	d2,d2
00007BE6 43F8 D000                  		lea	($FFFFD000).w,a1
00007BEA 4A69 0012                  		tst.w	$12(a1)
00007BEE 6B00 0000                  		bmi.w	locret_751E
00007BF2 3029 0008                  		move.w	8(a1),d0
00007BF6 9068 0008                  		sub.w	8(a0),d0
00007BFA D041                       		add.w	d1,d0
00007BFC 6B00 0000                  		bmi.w	locret_751E
00007C00 B042                       		cmp.w	d2,d0
00007C02 6400 0000                  		bcc.w	locret_751E
00007C06 6000                       		bra.s	Platform2
00007C08                            ; End of function Obj11_Solid
00007C08                            
00007C08                            ; ---------------------------------------------------------------------------
00007C08                            ; Platform subroutine
00007C08                            ; ---------------------------------------------------------------------------
00007C08                            
00007C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C08                            
00007C08                            
00007C08                            PlatformObject:
00007C08 43F8 D000                  		lea	($FFFFD000).w,a1
00007C0C 4A69 0012                  		tst.w	$12(a1)
00007C10 6B00 0000                  		bmi.w	locret_751E
00007C14 3029 0008                  		move.w	8(a1),d0
00007C18 9068 0008                  		sub.w	8(a0),d0
00007C1C D041                       		add.w	d1,d0
00007C1E 6B00 0000                  		bmi.w	locret_751E
00007C22 D241                       		add.w	d1,d1
00007C24 B041                       		cmp.w	d1,d0
00007C26 6400 0000                  		bcc.w	locret_751E
00007C2A                            
00007C2A                            Platform2:
00007C2A 3028 000C                  		move.w	$C(a0),d0
00007C2E 5140                       		subq.w	#8,d0
00007C30                            
00007C30                            Platform3:
00007C30 3429 000C                  		move.w	$C(a1),d2
00007C34 1229 0016                  		move.b	$16(a1),d1
00007C38 4881                       		ext.w	d1
00007C3A D242                       		add.w	d2,d1
00007C3C 5841                       		addq.w	#4,d1
00007C3E 9041                       		sub.w	d1,d0
00007C40 6200 0000                  		bhi.w	locret_751E
00007C44 0C40 FFF0                  		cmpi.w	#-$10,d0
00007C48 6500 0000                  		bcs.w	locret_751E
00007C4C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C50 6B00 0000                  		bmi.w	locret_751E
00007C54 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007C5A 6400 0000                  		bcc.w	locret_751E
00007C5E D440                       		add.w	d0,d2
00007C60 5642                       		addq.w	#3,d2
00007C62 3342 000C                  		move.w	d2,$C(a1)
00007C66 5428 0024                  		addq.b	#2,$24(a0)
00007C6A                            
00007C6A                            loc_74AE:
00007C6A 0829 0003 0022             		btst	#3,$22(a1)
00007C70 6700                       		beq.s	loc_74DC
00007C72 7000                       		moveq	#0,d0
00007C74 1029 003D                  		move.b	$3D(a1),d0
00007C78 ED48                       		lsl.w	#6,d0
00007C7A 0680 00FF D000             		addi.l	#$FFD000,d0
00007C80 2440                       		movea.l	d0,a2
00007C82 08AA 0003 0022             		bclr	#3,$22(a2)
00007C88 422A 0025                  		clr.b	$25(a2)
00007C8C 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007C92 6600                       		bne.s	loc_74DC
00007C94 552A 0024                  		subq.b	#2,$24(a2)
00007C98                            
00007C98                            loc_74DC:
00007C98 3008                       		move.w	a0,d0
00007C9A 0440 D000                  		subi.w	#-$3000,d0
00007C9E EC48                       		lsr.w	#6,d0
00007CA0 0240 007F                  		andi.w	#$7F,d0
00007CA4 1340 003D                  		move.b	d0,$3D(a1)
00007CA8 137C 0000 0026             		move.b	#0,$26(a1)
00007CAE 337C 0000 0012             		move.w	#0,$12(a1)
00007CB4 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007CBA 0829 0001 0022             		btst	#1,$22(a1)
00007CC0 6700                       		beq.s	loc_7512
00007CC2 2F08                       		move.l	a0,-(sp)
00007CC4 2049                       		movea.l	a1,a0
00007CC6 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007CCC 205F                       		movea.l	(sp)+,a0
00007CCE                            
00007CCE                            loc_7512:
00007CCE 08E9 0003 0022             		bset	#3,$22(a1)
00007CD4 08E8 0003 0022             		bset	#3,$22(a0)
00007CDA                            
00007CDA                            locret_751E:
00007CDA 4E75                       		rts	
00007CDC                            ; End of function PlatformObject
00007CDC                            
00007CDC                            ; ---------------------------------------------------------------------------
00007CDC                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007CDC                            ; ---------------------------------------------------------------------------
00007CDC                            
00007CDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CDC                            
00007CDC                            
00007CDC                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007CDC 43F8 D000                  		lea	($FFFFD000).w,a1
00007CE0 4A69 0012                  		tst.w	$12(a1)
00007CE4 6B00 FFF4                  		bmi.w	locret_751E
00007CE8 3029 0008                  		move.w	8(a1),d0
00007CEC 9068 0008                  		sub.w	8(a0),d0
00007CF0 D041                       		add.w	d1,d0
00007CF2 6BE6                       		bmi.s	locret_751E
00007CF4 D241                       		add.w	d1,d1
00007CF6 B041                       		cmp.w	d1,d0
00007CF8 64E0                       		bcc.s	locret_751E
00007CFA 0828 0000 0001             		btst	#0,1(a0)
00007D00 6700                       		beq.s	loc_754A
00007D02 4640                       		not.w	d0
00007D04 D041                       		add.w	d1,d0
00007D06                            
00007D06                            loc_754A:
00007D06 E248                       		lsr.w	#1,d0
00007D08 7600                       		moveq	#0,d3
00007D0A 1632 0000                  		move.b	(a2,d0.w),d3
00007D0E 3028 000C                  		move.w	$C(a0),d0
00007D12 9043                       		sub.w	d3,d0
00007D14 6000 FF1A                  		bra.w	Platform3
00007D18                            ; End of function SlopeObject
00007D18                            
00007D18                            
00007D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D18                            
00007D18                            
00007D18                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007D18 43F8 D000                  		lea	($FFFFD000).w,a1
00007D1C 4A69 0012                  		tst.w	$12(a1)
00007D20 6B00 FFB8                  		bmi.w	locret_751E
00007D24 3029 0008                  		move.w	8(a1),d0
00007D28 9068 0008                  		sub.w	8(a0),d0
00007D2C D041                       		add.w	d1,d0
00007D2E 6B00 FFAA                  		bmi.w	locret_751E
00007D32 D241                       		add.w	d1,d1
00007D34 B041                       		cmp.w	d1,d0
00007D36 6400 FFA2                  		bcc.w	locret_751E
00007D3A 3028 000C                  		move.w	$C(a0),d0
00007D3E 9043                       		sub.w	d3,d0
00007D40 6000 FEEE                  		bra.w	Platform3
00007D44                            ; End of function Obj15_Solid
00007D44                            
00007D44                            ; ===========================================================================
00007D44                            
00007D44                            Obj11_Action2:				; XREF: Obj11_Index
00007D44 6100                       		bsr.s	Obj11_WalkOff
00007D46 6100 0000                  		bsr.w	DisplaySprite
00007D4A 6000 0000                  		bra.w	Obj11_ChkDel
00007D4E                            
00007D4E                            ; ---------------------------------------------------------------------------
00007D4E                            ; Subroutine allowing Sonic to walk off a bridge
00007D4E                            ; ---------------------------------------------------------------------------
00007D4E                            
00007D4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D4E                            
00007D4E                            
00007D4E                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007D4E 7200                       		moveq	#0,d1
00007D50 1228 0028                  		move.b	$28(a0),d1
00007D54 E749                       		lsl.w	#3,d1
00007D56 3401                       		move.w	d1,d2
00007D58 5041                       		addq.w	#8,d1
00007D5A 6100                       		bsr.s	ExitPlatform2
00007D5C 6400                       		bcc.s	locret_75BE
00007D5E E848                       		lsr.w	#4,d0
00007D60 1140 003F                  		move.b	d0,$3F(a0)
00007D64 1028 003E                  		move.b	$3E(a0),d0
00007D68 0C00 0040                  		cmpi.b	#$40,d0
00007D6C 6700                       		beq.s	loc_75B6
00007D6E 5828 003E                  		addq.b	#4,$3E(a0)
00007D72                            
00007D72                            loc_75B6:
00007D72 6100 0000                  		bsr.w	Obj11_Bend
00007D76 6100 0000                  		bsr.w	Obj11_MoveSonic
00007D7A                            
00007D7A                            locret_75BE:
00007D7A 4E75                       		rts	
00007D7C                            ; End of function Obj11_WalkOff
00007D7C                            
00007D7C                            ; ---------------------------------------------------------------------------
00007D7C                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007D7C                            ; ---------------------------------------------------------------------------
00007D7C                            
00007D7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D7C                            
00007D7C                            
00007D7C                            ExitPlatform:
00007D7C 3401                       		move.w	d1,d2
00007D7E                            
00007D7E                            ExitPlatform2:
00007D7E D442                       		add.w	d2,d2
00007D80 43F8 D000                  		lea	($FFFFD000).w,a1
00007D84 0829 0001 0022             		btst	#1,$22(a1)
00007D8A 6600                       		bne.s	loc_75E0
00007D8C 3029 0008                  		move.w	8(a1),d0
00007D90 9068 0008                  		sub.w	8(a0),d0
00007D94 D041                       		add.w	d1,d0
00007D96 6B00                       		bmi.s	loc_75E0
00007D98 B042                       		cmp.w	d2,d0
00007D9A 6500                       		bcs.s	locret_75F2
00007D9C                            
00007D9C                            loc_75E0:
00007D9C 08A9 0003 0022             		bclr	#3,$22(a1)
00007DA2 117C 0002 0024             		move.b	#2,$24(a0)
00007DA8 08A8 0003 0022             		bclr	#3,$22(a0)
00007DAE                            
00007DAE                            locret_75F2:
00007DAE 4E75                       		rts	
00007DB0                            ; End of function ExitPlatform
00007DB0                            
00007DB0                            
00007DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DB0                            
00007DB0                            
00007DB0                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007DB0 7000                       		moveq	#0,d0
00007DB2 1028 003F                  		move.b	$3F(a0),d0
00007DB6 1030 0029                  		move.b	$29(a0,d0.w),d0
00007DBA ED48                       		lsl.w	#6,d0
00007DBC 0680 00FF D000             		addi.l	#$FFD000,d0
00007DC2 2440                       		movea.l	d0,a2
00007DC4 43F8 D000                  		lea	($FFFFD000).w,a1
00007DC8 302A 000C                  		move.w	$C(a2),d0
00007DCC 5140                       		subq.w	#8,d0
00007DCE 7200                       		moveq	#0,d1
00007DD0 1229 0016                  		move.b	$16(a1),d1
00007DD4 9041                       		sub.w	d1,d0
00007DD6 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007DDA 4E75                       		rts	
00007DDC                            ; End of function Obj11_MoveSonic
00007DDC                            
00007DDC                            
00007DDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DDC                            
00007DDC                            
00007DDC                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007DDC 1028 003E                  		move.b	$3E(a0),d0
00007DE0 6100 AF46                  		bsr.w	CalcSine
00007DE4 3800                       		move.w	d0,d4
00007DE6 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007DEC 7000                       		moveq	#0,d0
00007DEE 1028 0028                  		move.b	$28(a0),d0
00007DF2 E948                       		lsl.w	#4,d0
00007DF4 7600                       		moveq	#0,d3
00007DF6 1628 003F                  		move.b	$3F(a0),d3
00007DFA 3403                       		move.w	d3,d2
00007DFC D640                       		add.w	d0,d3
00007DFE 7A00                       		moveq	#0,d5
00007E00 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007E06 1A35 3000                  		move.b	(a5,d3.w),d5
00007E0A 0243 000F                  		andi.w	#$F,d3
00007E0E E94B                       		lsl.w	#4,d3
00007E10 47F4 3000                  		lea	(a4,d3.w),a3
00007E14 45E8 0029                  		lea	$29(a0),a2
00007E18                            
00007E18                            loc_765C:
00007E18 7000                       		moveq	#0,d0
00007E1A 101A                       		move.b	(a2)+,d0
00007E1C ED48                       		lsl.w	#6,d0
00007E1E 0680 00FF D000             		addi.l	#$FFD000,d0
00007E24 2240                       		movea.l	d0,a1
00007E26 7000                       		moveq	#0,d0
00007E28 101B                       		move.b	(a3)+,d0
00007E2A 5240                       		addq.w	#1,d0
00007E2C C0C5                       		mulu.w	d5,d0
00007E2E C0C4                       		mulu.w	d4,d0
00007E30 4840                       		swap	d0
00007E32 D069 003C                  		add.w	$3C(a1),d0
00007E36 3340 000C                  		move.w	d0,$C(a1)
00007E3A 51CA FFDC                  		dbf	d2,loc_765C
00007E3E 7000                       		moveq	#0,d0
00007E40 1028 0028                  		move.b	$28(a0),d0
00007E44 7600                       		moveq	#0,d3
00007E46 1628 003F                  		move.b	$3F(a0),d3
00007E4A 5203                       		addq.b	#1,d3
00007E4C 9600                       		sub.b	d0,d3
00007E4E 4403                       		neg.b	d3
00007E50 6B00                       		bmi.s	locret_76CA
00007E52 3403                       		move.w	d3,d2
00007E54 E94B                       		lsl.w	#4,d3
00007E56 47F4 3000                  		lea	(a4,d3.w),a3
00007E5A D6C2                       		adda.w	d2,a3
00007E5C 5342                       		subq.w	#1,d2
00007E5E 6500                       		bcs.s	locret_76CA
00007E60                            
00007E60                            loc_76A4:
00007E60 7000                       		moveq	#0,d0
00007E62 101A                       		move.b	(a2)+,d0
00007E64 ED48                       		lsl.w	#6,d0
00007E66 0680 00FF D000             		addi.l	#$FFD000,d0
00007E6C 2240                       		movea.l	d0,a1
00007E6E 7000                       		moveq	#0,d0
00007E70 1023                       		move.b	-(a3),d0
00007E72 5240                       		addq.w	#1,d0
00007E74 C0C5                       		mulu.w	d5,d0
00007E76 C0C4                       		mulu.w	d4,d0
00007E78 4840                       		swap	d0
00007E7A D069 003C                  		add.w	$3C(a1),d0
00007E7E 3340 000C                  		move.w	d0,$C(a1)
00007E82 51CA FFDC                  		dbf	d2,loc_76A4
00007E86                            
00007E86                            locret_76CA:
00007E86 4E75                       		rts	
00007E88                            ; End of function Obj11_Bend
00007E88                            
00007E88                            ; ===========================================================================
00007E88                            ; ---------------------------------------------------------------------------
00007E88                            ; GHZ bridge-bending data
00007E88                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007E88                            ; ---------------------------------------------------------------------------
00007E88                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007F98                            		even
00007F98                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00008098                            		even
00008098                            
00008098                            ; ===========================================================================
00008098                            
00008098                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00008098 3028 0008                  		move.w	8(a0),d0
0000809C 0240 FF80                  		andi.w	#$FF80,d0
000080A0 3238 F700                  		move.w	($FFFFF700).w,d1
000080A4 0441 0080                  		subi.w	#$80,d1
000080A8 0241 FF80                  		andi.w	#$FF80,d1
000080AC 9041                       		sub.w	d1,d0
000080AE 0C40 0280                  		cmpi.w	#$280,d0
000080B2 6200 0000                  		bhi.w	Obj11_DelAll
000080B6 4E75                       		rts	
000080B8                            ; ===========================================================================
000080B8                            
000080B8                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000080B8 7400                       		moveq	#0,d2
000080BA 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000080BE 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000080C0 5302                       		subq.b	#1,d2		; subtract 1
000080C2 6500                       		bcs.s	Obj11_Delete
000080C4                            
000080C4                            Obj11_DelLoop:
000080C4 7000                       		moveq	#0,d0
000080C6 101A                       		move.b	(a2)+,d0
000080C8 ED48                       		lsl.w	#6,d0
000080CA 0680 00FF D000             		addi.l	#$FFD000,d0
000080D0 2240                       		movea.l	d0,a1
000080D2 B048                       		cmp.w	a0,d0
000080D4 6700                       		beq.s	loc_791E
000080D6 6100 0000                  		bsr.w	DeleteObject2
000080DA                            
000080DA                            loc_791E:
000080DA 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000080DE                            
000080DE                            Obj11_Delete:
000080DE 6100 0000                  		bsr.w	DeleteObject
000080E2 4E75                       		rts	
000080E4                            ; ===========================================================================
000080E4                            
000080E4                            Obj11_Delete2:				; XREF: Obj11_Index
000080E4 6100 0000                  		bsr.w	DeleteObject
000080E8 4E75                       		rts	
000080EA                            ; ===========================================================================
000080EA                            
000080EA                            Obj11_Display2:				; XREF: Obj11_Index
000080EA 6100 0000                  		bsr.w	DisplaySprite
000080EE 4E75                       		rts	
000080F0                            ; ===========================================================================
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            ; Sprite mappings - GHZ	bridge
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            Map_obj11:
000080F0                            	include "_maps\obj11.asm"
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            ; Sprite mappings - GHZ	bridge
000080F0                            ; ---------------------------------------------------------------------------
000080F0 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000080F4 0000                       		dc.w byte_794B-Map_obj11
000080F6 01                         byte_793A:	dc.b 1
000080F7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000080FC 02                         byte_7940:	dc.b 2
000080FD F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008102 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008107 01                         byte_794B:	dc.b 1
00008108 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000810E 00                         		even
0000810E 00                         		even
0000810E                            
0000810E                            ; ===========================================================================
0000810E                            ; ---------------------------------------------------------------------------
0000810E                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000810E                            ;	    - spiked ball on a chain (SBZ)
0000810E                            ; ---------------------------------------------------------------------------
0000810E                            
0000810E                            Obj15:					; XREF: Obj_Index
0000810E 7000                       		moveq	#0,d0
00008110 1028 0024                  		move.b	$24(a0),d0
00008114 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008118 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000811C                            ; ===========================================================================
0000811C 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008120 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008124 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008128 0000                       		dc.w Obj15_Action-Obj15_Index
0000812A                            ; ===========================================================================
0000812A                            
0000812A                            Obj15_Main:				; XREF: Obj15_Index
0000812A 5428 0024                  		addq.b	#2,$24(a0)
0000812E 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008136 317C 4380 0002             		move.w	#$4380,2(a0)
0000813C 117C 0004 0001             		move.b	#4,1(a0)
00008142 117C 0003 0018             		move.b	#3,$18(a0)
00008148 117C 0018 0019             		move.b	#$18,$19(a0)
0000814E 117C 0008 0016             		move.b	#8,$16(a0)
00008154 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000815A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008160 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008166 6600                       		bne.s	Obj15_NotSLZ
00008168 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008170 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008176 117C 0020 0019             		move.b	#$20,$19(a0)
0000817C 117C 0010 0016             		move.b	#$10,$16(a0)
00008182 117C 0099 0020             		move.b	#$99,$20(a0)
00008188                            
00008188                            Obj15_NotSLZ:
00008188 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000818E 6600                       		bne.s	Obj15_SetLength
00008190 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008198 317C 0391 0002             		move.w	#$391,2(a0)
0000819E 117C 0018 0019             		move.b	#$18,$19(a0)
000081A4 117C 0018 0016             		move.b	#$18,$16(a0)
000081AA 117C 0086 0020             		move.b	#$86,$20(a0)
000081B0 117C 000C 0024             		move.b	#$C,$24(a0)
000081B6                            
000081B6                            Obj15_SetLength:
000081B6 1810                       		move.b	0(a0),d4
000081B8 7200                       		moveq	#0,d1
000081BA 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000081BE 1212                       		move.b	(a2),d1		; move a2 to d1
000081C0 3F01                       		move.w	d1,-(sp)
000081C2 0241 000F                  		andi.w	#$F,d1
000081C6 14FC 0000                  		move.b	#0,(a2)+
000081CA 3601                       		move.w	d1,d3
000081CC E94B                       		lsl.w	#4,d3
000081CE 5003                       		addq.b	#8,d3
000081D0 1143 003C                  		move.b	d3,$3C(a0)
000081D4 5103                       		subq.b	#8,d3
000081D6 4A28 001A                  		tst.b	$1A(a0)
000081DA 6700                       		beq.s	Obj15_MakeChain
000081DC 5003                       		addq.b	#8,d3
000081DE 5341                       		subq.w	#1,d1
000081E0                            
000081E0                            Obj15_MakeChain:
000081E0 6100 0000                  		bsr.w	SingleObjLoad
000081E4 6600                       		bne.s	loc_7A92
000081E6 5228 0028                  		addq.b	#1,$28(a0)
000081EA 3A09                       		move.w	a1,d5
000081EC 0445 D000                  		subi.w	#-$3000,d5
000081F0 EC4D                       		lsr.w	#6,d5
000081F2 0245 007F                  		andi.w	#$7F,d5
000081F6 14C5                       		move.b	d5,(a2)+
000081F8 137C 000A 0024             		move.b	#$A,$24(a1)
000081FE 1284                       		move.b	d4,0(a1)	; load swinging	object
00008200 2368 0004 0004             		move.l	4(a0),4(a1)
00008206 3368 0002 0002             		move.w	2(a0),2(a1)
0000820C 08A9 0006 0002             		bclr	#6,2(a1)
00008212 137C 0004 0001             		move.b	#4,1(a1)
00008218 137C 0004 0018             		move.b	#4,$18(a1)
0000821E 137C 0008 0019             		move.b	#8,$19(a1)
00008224 137C 0001 001A             		move.b	#1,$1A(a1)
0000822A 1343 003C                  		move.b	d3,$3C(a1)
0000822E 0403 0010                  		subi.b	#$10,d3
00008232 6400                       		bcc.s	loc_7A8E
00008234 137C 0002 001A             		move.b	#2,$1A(a1)
0000823A 137C 0003 0018             		move.b	#3,$18(a1)
00008240 08E9 0006 0002             		bset	#6,2(a1)
00008246                            
00008246                            loc_7A8E:
00008246 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000824A                            
0000824A                            loc_7A92:
0000824A 3A08                       		move.w	a0,d5
0000824C 0445 D000                  		subi.w	#-$3000,d5
00008250 EC4D                       		lsr.w	#6,d5
00008252 0245 007F                  		andi.w	#$7F,d5
00008256 14C5                       		move.b	d5,(a2)+
00008258 317C 4080 0026             		move.w	#$4080,$26(a0)
0000825E 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008264 321F                       		move.w	(sp)+,d1
00008266 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000826A 6700                       		beq.s	loc_7AD4	; if not, branch
0000826C 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008274 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000827A 117C 0001 001A             		move.b	#1,$1A(a0)
00008280 117C 0002 0018             		move.b	#2,$18(a0)
00008286 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000828C                            
0000828C                            loc_7AD4:
0000828C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008292 6700                       		beq.s	Obj15_Action	; if yes, branch
00008294                            
00008294                            Obj15_SetSolid:				; XREF: Obj15_Index
00008294 7200                       		moveq	#0,d1
00008296 1228 0019                  		move.b	$19(a0),d1
0000829A 7600                       		moveq	#0,d3
0000829C 1628 0016                  		move.b	$16(a0),d3
000082A0 6100 FA76                  		bsr.w	Obj15_Solid
000082A4                            
000082A4                            Obj15_Action:				; XREF: Obj15_Index
000082A4 6100 0000                  		bsr.w	Obj15_Move
000082A8 6100 0000                  		bsr.w	DisplaySprite
000082AC 6000 0000                  		bra.w	Obj15_ChkDel
000082B0                            ; ===========================================================================
000082B0                            
000082B0                            Obj15_Action2:				; XREF: Obj15_Index
000082B0 7200                       		moveq	#0,d1
000082B2 1228 0019                  		move.b	$19(a0),d1
000082B6 6100 FAC4                  		bsr.w	ExitPlatform
000082BA 3F28 0008                  		move.w	8(a0),-(sp)
000082BE 6100 0000                  		bsr.w	Obj15_Move
000082C2 341F                       		move.w	(sp)+,d2
000082C4 7600                       		moveq	#0,d3
000082C6 1628 0016                  		move.b	$16(a0),d3
000082CA 5203                       		addq.b	#1,d3
000082CC 6100 0000                  		bsr.w	MvSonicOnPtfm
000082D0 6100 0000                  		bsr.w	DisplaySprite
000082D4 6000 0000                  		bra.w	Obj15_ChkDel
000082D8                            
000082D8 4E75                       		rts
000082DA                            
000082DA                            ; ---------------------------------------------------------------------------
000082DA                            ; Subroutine to	change Sonic's position with a platform
000082DA                            ; ---------------------------------------------------------------------------
000082DA                            
000082DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082DA                            
000082DA                            
000082DA                            MvSonicOnPtfm:
000082DA 43F8 D000                  		lea	($FFFFD000).w,a1
000082DE 3028 000C                  		move.w	$C(a0),d0
000082E2 9043                       		sub.w	d3,d0
000082E4 6000                       		bra.s	MvSonic2
000082E6                            ; End of function MvSonicOnPtfm
000082E6                            
000082E6                            ; ---------------------------------------------------------------------------
000082E6                            ; Subroutine to	change Sonic's position with a platform
000082E6                            ; ---------------------------------------------------------------------------
000082E6                            
000082E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082E6                            
000082E6                            
000082E6                            MvSonicOnPtfm2:
000082E6 43F8 D000                  		lea	($FFFFD000).w,a1
000082EA 3028 000C                  		move.w	$C(a0),d0
000082EE 0440 0009                  		subi.w	#9,d0
000082F2                            
000082F2                            MvSonic2:
000082F2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000082F6 6B00                       		bmi.s	locret_7B62
000082F8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000082FE 6400                       		bcc.s	locret_7B62
00008300 4A78 FE08                  		tst.w	($FFFFFE08).w
00008304 6600                       		bne.s	locret_7B62
00008306 7200                       		moveq	#0,d1
00008308 1229 0016                  		move.b	$16(a1),d1
0000830C 9041                       		sub.w	d1,d0
0000830E 3340 000C                  		move.w	d0,$C(a1)
00008312 9468 0008                  		sub.w	8(a0),d2
00008316 9569 0008                  		sub.w	d2,8(a1)
0000831A                            
0000831A                            locret_7B62:
0000831A 4E75                       		rts	
0000831C                            ; End of function MvSonicOnPtfm2
0000831C                            
0000831C                            
0000831C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000831C                            
0000831C                            
0000831C                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000831C 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008320 323C 0080                  		move.w	#$80,d1
00008324 0828 0000 0022             		btst	#0,$22(a0)
0000832A 6700                       		beq.s	loc_7B78
0000832C 4440                       		neg.w	d0
0000832E D041                       		add.w	d1,d0
00008330                            
00008330                            loc_7B78:
00008330 6000                       		bra.s	Obj15_Move2
00008332                            ; End of function Obj15_Move
00008332                            
00008332                            
00008332                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008332                            
00008332                            
00008332                            Obj48_Move:				; XREF: Obj48_Display2
00008332 4A28 003D                  		tst.b	$3D(a0)
00008336 6600                       		bne.s	loc_7B9C
00008338 3028 003E                  		move.w	$3E(a0),d0
0000833C 5040                       		addq.w	#8,d0
0000833E 3140 003E                  		move.w	d0,$3E(a0)
00008342 D168 0026                  		add.w	d0,$26(a0)
00008346 0C40 0200                  		cmpi.w	#$200,d0
0000834A 6600                       		bne.s	loc_7BB6
0000834C 117C 0001 003D             		move.b	#1,$3D(a0)
00008352 6000                       		bra.s	loc_7BB6
00008354                            ; ===========================================================================
00008354                            
00008354                            loc_7B9C:
00008354 3028 003E                  		move.w	$3E(a0),d0
00008358 5140                       		subq.w	#8,d0
0000835A 3140 003E                  		move.w	d0,$3E(a0)
0000835E D168 0026                  		add.w	d0,$26(a0)
00008362 0C40 FE00                  		cmpi.w	#-$200,d0
00008366 6600                       		bne.s	loc_7BB6
00008368 117C 0000 003D             		move.b	#0,$3D(a0)
0000836E                            
0000836E                            loc_7BB6:
0000836E 1028 0026                  		move.b	$26(a0),d0
00008372                            ; End of function Obj48_Move
00008372                            
00008372                            
00008372                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008372                            
00008372                            
00008372                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008372 6100 A9B4                  		bsr.w	CalcSine
00008376 3428 0038                  		move.w	$38(a0),d2
0000837A 3628 003A                  		move.w	$3A(a0),d3
0000837E 45E8 0028                  		lea	$28(a0),a2
00008382 7C00                       		moveq	#0,d6
00008384 1C1A                       		move.b	(a2)+,d6
00008386                            
00008386                            loc_7BCE:
00008386 7800                       		moveq	#0,d4
00008388 181A                       		move.b	(a2)+,d4
0000838A ED4C                       		lsl.w	#6,d4
0000838C 0684 00FF D000             		addi.l	#$FFD000,d4
00008392 2244                       		movea.l	d4,a1
00008394 7800                       		moveq	#0,d4
00008396 1829 003C                  		move.b	$3C(a1),d4
0000839A 2A04                       		move.l	d4,d5
0000839C C9C0                       		muls.w	d0,d4
0000839E E084                       		asr.l	#8,d4
000083A0 CBC1                       		muls.w	d1,d5
000083A2 E085                       		asr.l	#8,d5
000083A4 D842                       		add.w	d2,d4
000083A6 DA43                       		add.w	d3,d5
000083A8 3344 000C                  		move.w	d4,$C(a1)
000083AC 3345 0008                  		move.w	d5,8(a1)
000083B0 51CE FFD4                  		dbf	d6,loc_7BCE
000083B4 4E75                       		rts	
000083B6                            ; End of function Obj15_Move2
000083B6                            
000083B6                            ; ===========================================================================
000083B6                            
000083B6                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000083B6 3028 003A                  		move.w	$3A(a0),d0
000083BA 0240 FF80                  		andi.w	#$FF80,d0
000083BE 3238 F700                  		move.w	($FFFFF700).w,d1
000083C2 0441 0080                  		subi.w	#$80,d1
000083C6 0241 FF80                  		andi.w	#$FF80,d1
000083CA 9041                       		sub.w	d1,d0
000083CC 0C40 0280                  		cmpi.w	#$280,d0
000083D0 6200 0000                  		bhi.w	Obj15_DelAll
000083D4 4E75                       		rts	
000083D6                            ; ===========================================================================
000083D6                            
000083D6                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000083D6 7400                       		moveq	#0,d2
000083D8 45E8 0028                  		lea	$28(a0),a2
000083DC 141A                       		move.b	(a2)+,d2
000083DE                            
000083DE                            Obj15_DelLoop:
000083DE 7000                       		moveq	#0,d0
000083E0 101A                       		move.b	(a2)+,d0
000083E2 ED48                       		lsl.w	#6,d0
000083E4 0680 00FF D000             		addi.l	#$FFD000,d0
000083EA 2240                       		movea.l	d0,a1
000083EC 6100 0000                  		bsr.w	DeleteObject2
000083F0 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000083F4 4E75                       		rts	
000083F6                            ; ===========================================================================
000083F6                            
000083F6                            Obj15_Delete:				; XREF: Obj15_Index
000083F6 6100 0000                  		bsr.w	DeleteObject
000083FA 4E75                       		rts	
000083FC                            ; ===========================================================================
000083FC                            
000083FC                            Obj15_Display:				; XREF: Obj15_Index
000083FC 6000 0000                  		bra.w	DisplaySprite
00008400                            ; ===========================================================================
00008400                            ; ---------------------------------------------------------------------------
00008400                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008400                            ; ---------------------------------------------------------------------------
00008400                            Map_obj15:
00008400                            	include "_maps\obj15ghz.asm"
00008400                            ; ---------------------------------------------------------------------------
00008400                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008400                            ; ---------------------------------------------------------------------------
00008400 0000                       		dc.w byte_7C4E-Map_obj15
00008402 0000                       		dc.w byte_7C59-Map_obj15
00008404 0000                       		dc.w byte_7C5F-Map_obj15
00008406 02                         byte_7C4E:	dc.b 2
00008407 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000840C F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008411 01                         byte_7C59:	dc.b 1
00008412 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008417 01                         byte_7C5F:	dc.b 1
00008418 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000841E 00                         		even
0000841E 00                         		even
0000841E                            
0000841E                            ; ---------------------------------------------------------------------------
0000841E                            ; Sprite mappings - SLZ	swinging platforms
0000841E                            ; ---------------------------------------------------------------------------
0000841E                            Map_obj15a:
0000841E                            	include "_maps\obj15slz.asm"
0000841E                            ; ---------------------------------------------------------------------------
0000841E                            ; Sprite mappings - SLZ	swinging platforms
0000841E                            ; ---------------------------------------------------------------------------
0000841E 0000                       		dc.w byte_7C6C-Map_obj15a
00008420 0000                       		dc.w byte_7C95-Map_obj15a
00008422 0000                       		dc.w byte_7C9B-Map_obj15a
00008424 08                         byte_7C6C:	dc.b 8
00008425 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000842A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000842F F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008434 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008439 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000843E 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008443 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008448 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000844D 01                         byte_7C95:	dc.b 1
0000844E F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008453 01                         byte_7C9B:	dc.b 1
00008454 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000845A 00                         		even
0000845A 00                         		even
0000845A                            
0000845A                            ; ===========================================================================
0000845A                            ; ---------------------------------------------------------------------------
0000845A                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000845A                            ; ---------------------------------------------------------------------------
0000845A                            
0000845A                            Obj17:					; XREF: Obj_Index
0000845A 7000                       		moveq	#0,d0
0000845C 1028 0024                  		move.b	$24(a0),d0
00008460 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008464 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008468                            ; ===========================================================================
00008468 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000846A 0000                       		dc.w Obj17_Action-Obj17_Index
0000846C 0000                       		dc.w Obj17_Action-Obj17_Index
0000846E 0000                       		dc.w Obj17_Delete-Obj17_Index
00008470 0000                       		dc.w Obj17_Display-Obj17_Index
00008472                            ; ===========================================================================
00008472                            
00008472                            Obj17_Main:				; XREF: Obj17_Index
00008472 5428 0024                  		addq.b	#2,$24(a0)
00008476 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000847E 317C 4398 0002             		move.w	#$4398,2(a0)
00008484 117C 0007 0022             		move.b	#7,$22(a0)
0000848A 117C 0004 0001             		move.b	#4,1(a0)
00008490 117C 0003 0018             		move.b	#3,$18(a0)
00008496 117C 0008 0019             		move.b	#8,$19(a0)
0000849C 3428 000C                  		move.w	$C(a0),d2
000084A0 3628 0008                  		move.w	8(a0),d3
000084A4 1810                       		move.b	0(a0),d4
000084A6 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000084AA 7200                       		moveq	#0,d1
000084AC 1212                       		move.b	(a2),d1		; move a2 to d1
000084AE 14FC 0000                  		move.b	#0,(a2)+
000084B2 3001                       		move.w	d1,d0
000084B4 E248                       		lsr.w	#1,d0
000084B6 E948                       		lsl.w	#4,d0
000084B8 9640                       		sub.w	d0,d3
000084BA 5501                       		subq.b	#2,d1
000084BC 6500                       		bcs.s	Obj17_Action
000084BE 7C00                       		moveq	#0,d6
000084C0                            
000084C0                            Obj17_MakeHelix:
000084C0 6100 0000                  		bsr.w	SingleObjLoad
000084C4 6600                       		bne.s	Obj17_Action
000084C6 5228 0028                  		addq.b	#1,$28(a0)
000084CA 3A09                       		move.w	a1,d5
000084CC 0445 D000                  		subi.w	#$D000,d5
000084D0 EC4D                       		lsr.w	#6,d5
000084D2 0245 007F                  		andi.w	#$7F,d5
000084D6 14C5                       		move.b	d5,(a2)+
000084D8 137C 0008 0024             		move.b	#8,$24(a1)
000084DE 1284                       		move.b	d4,0(a1)
000084E0 3342 000C                  		move.w	d2,$C(a1)
000084E4 3343 0008                  		move.w	d3,8(a1)
000084E8 2368 0004 0004             		move.l	4(a0),4(a1)
000084EE 337C 4398 0002             		move.w	#$4398,2(a1)
000084F4 137C 0004 0001             		move.b	#4,1(a1)
000084FA 137C 0003 0018             		move.b	#3,$18(a1)
00008500 137C 0008 0019             		move.b	#8,$19(a1)
00008506 1346 003E                  		move.b	d6,$3E(a1)
0000850A 5206                       		addq.b	#1,d6
0000850C 0206 0007                  		andi.b	#7,d6
00008510 0643 0010                  		addi.w	#$10,d3
00008514 B668 0008                  		cmp.w	8(a0),d3
00008518 6600                       		bne.s	loc_7D78
0000851A 1146 003E                  		move.b	d6,$3E(a0)
0000851E 5206                       		addq.b	#1,d6
00008520 0206 0007                  		andi.b	#7,d6
00008524 0643 0010                  		addi.w	#$10,d3
00008528 5228 0028                  		addq.b	#1,$28(a0)
0000852C                            
0000852C                            loc_7D78:
0000852C 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008530                            
00008530                            Obj17_Action:				; XREF: Obj17_Index
00008530 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008534 6100 0000                  		bsr.w	DisplaySprite
00008538 6000 0000                  		bra.w	Obj17_ChkDel
0000853C                            
0000853C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000853C                            
0000853C                            
0000853C                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000853C 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008540 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008546 D028 003E                  		add.b	$3E(a0),d0
0000854A 0200 0007                  		andi.b	#7,d0
0000854E 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008552 6600                       		bne.s	locret_7DA6
00008554 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000855A                            
0000855A                            locret_7DA6:
0000855A 4E75                       		rts	
0000855C                            ; End of function Obj17_RotateSpikes
0000855C                            
0000855C                            ; ===========================================================================
0000855C                            
0000855C                            Obj17_ChkDel:				; XREF: Obj17_Action
0000855C 3028 0008                  		move.w	8(a0),d0
00008560 0240 FF80                  		andi.w	#$FF80,d0
00008564 3238 F700                  		move.w	($FFFFF700).w,d1
00008568 0441 0080                  		subi.w	#$80,d1
0000856C 0241 FF80                  		andi.w	#$FF80,d1
00008570 9041                       		sub.w	d1,d0
00008572 0C40 0280                  		cmpi.w	#$280,d0
00008576 6200 0000                  		bhi.w	Obj17_DelAll
0000857A 4E75                       		rts	
0000857C                            ; ===========================================================================
0000857C                            
0000857C                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000857C 7400                       		moveq	#0,d2
0000857E 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008582 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008584 5502                       		subq.b	#2,d2
00008586 6500                       		bcs.s	Obj17_Delete
00008588                            
00008588                            Obj17_DelLoop:
00008588 7000                       		moveq	#0,d0
0000858A 101A                       		move.b	(a2)+,d0
0000858C ED48                       		lsl.w	#6,d0
0000858E 0680 00FF D000             		addi.l	#$FFD000,d0
00008594 2240                       		movea.l	d0,a1
00008596 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000859A 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000859E                            
0000859E                            Obj17_Delete:				; XREF: Obj17_Index
0000859E 6100 0000                  		bsr.w	DeleteObject
000085A2 4E75                       		rts	
000085A4                            ; ===========================================================================
000085A4                            
000085A4                            Obj17_Display:				; XREF: Obj17_Index
000085A4 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000085A8 6000 0000                  		bra.w	DisplaySprite
000085AC                            ; ===========================================================================
000085AC                            ; ---------------------------------------------------------------------------
000085AC                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085AC                            ; ---------------------------------------------------------------------------
000085AC                            Map_obj17:
000085AC                            	include "_maps\obj17.asm"
000085AC                            ; ---------------------------------------------------------------------------
000085AC                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085AC                            ; ---------------------------------------------------------------------------
000085AC 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000085B0 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000085B4 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000085B8 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000085BC 01                         byte_7E08:	dc.b 1
000085BD F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000085C2 01                         byte_7E0E:	dc.b 1
000085C3 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000085C8 01                         byte_7E14:	dc.b 1
000085C9 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000085CE 01                         byte_7E1A:	dc.b 1
000085CF FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000085D4 01                         byte_7E20:	dc.b 1
000085D5 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000085DA 01                         byte_7E26:	dc.b 1
000085DB 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000085E0 01                         byte_7E2C:	dc.b 1
000085E1 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000085E6                            		even
000085E6                            		even
000085E6                            
000085E6                            ; ===========================================================================
000085E6                            ; ---------------------------------------------------------------------------
000085E6                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000085E6                            ; ---------------------------------------------------------------------------
000085E6                            
000085E6                            Obj18:					; XREF: Obj_Index
000085E6 7000                       		moveq	#0,d0
000085E8 1028 0024                  		move.b	$24(a0),d0
000085EC 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000085F0 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000085F4                            ; ===========================================================================
000085F4 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000085F6 0000                       		dc.w Obj18_Solid-Obj18_Index
000085F8 0000                       		dc.w Obj18_Action2-Obj18_Index
000085FA 0000                       		dc.w Obj18_Delete-Obj18_Index
000085FC 0000                       		dc.w Obj18_Action-Obj18_Index
000085FE                            ; ===========================================================================
000085FE                            
000085FE                            Obj18_Main:				; XREF: Obj18_Index
000085FE 5428 0024                  		addq.b	#2,$24(a0)
00008602 317C 4000 0002             		move.w	#$4000,2(a0)
00008608 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008610 117C 0020 0019             		move.b	#$20,$19(a0)
00008616 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000861C 6600                       		bne.s	Obj18_NotSYZ
0000861E 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008626 117C 0020 0019             		move.b	#$20,$19(a0)
0000862C                            
0000862C                            Obj18_NotSYZ:
0000862C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008632 6600                       		bne.s	Obj18_NotSLZ
00008634 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000863C 117C 0020 0019             		move.b	#$20,$19(a0)
00008642 317C 4000 0002             		move.w	#$4000,2(a0)
00008648 117C 0003 0028             		move.b	#3,$28(a0)
0000864E                            
0000864E                            Obj18_NotSLZ:
0000864E 117C 0004 0001             		move.b	#4,1(a0)
00008654 117C 0004 0018             		move.b	#4,$18(a0)
0000865A 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008660 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008666 3168 0008 0032             		move.w	8(a0),$32(a0)
0000866C 317C 0080 0026             		move.w	#$80,$26(a0)
00008672 7200                       		moveq	#0,d1
00008674 1028 0028                  		move.b	$28(a0),d0
00008678 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000867C 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000867E 5201                       		addq.b	#1,d1		; use frame #1
00008680 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008686                            
00008686                            Obj18_SetFrame:
00008686 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000868A                            
0000868A                            Obj18_Solid:				; XREF: Obj18_Index
0000868A 4A28 0038                  		tst.b	$38(a0)
0000868E 6700                       		beq.s	loc_7EE0
00008690 5928 0038                  		subq.b	#4,$38(a0)
00008694                            
00008694                            loc_7EE0:
00008694 7200                       		moveq	#0,d1
00008696 1228 0019                  		move.b	$19(a0),d1
0000869A 6100 F56C                  		bsr.w	PlatformObject
0000869E                            
0000869E                            Obj18_Action:				; XREF: Obj18_Index
0000869E 6100 0000                  		bsr.w	Obj18_Move
000086A2 6100 0000                  		bsr.w	Obj18_Nudge
000086A6 6100 0000                  		bsr.w	DisplaySprite
000086AA 6000 0000                  		bra.w	Obj18_ChkDel
000086AE                            ; ===========================================================================
000086AE                            
000086AE                            Obj18_Action2:				; XREF: Obj18_Index
000086AE 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000086B4 6700                       		beq.s	loc_7F06
000086B6 5828 0038                  		addq.b	#4,$38(a0)
000086BA                            
000086BA                            loc_7F06:
000086BA 7200                       		moveq	#0,d1
000086BC 1228 0019                  		move.b	$19(a0),d1
000086C0 6100 F6BA                  		bsr.w	ExitPlatform
000086C4 3F28 0008                  		move.w	8(a0),-(sp)
000086C8 6100 0000                  		bsr.w	Obj18_Move
000086CC 6100 0000                  		bsr.w	Obj18_Nudge
000086D0 341F                       		move.w	(sp)+,d2
000086D2 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000086D6 6100 0000                  		bsr.w	DisplaySprite
000086DA 6000 0000                  		bra.w	Obj18_ChkDel
000086DE                            
000086DE 4E75                       		rts
000086E0                            
000086E0                            ; ---------------------------------------------------------------------------
000086E0                            ; Subroutine to	move platform slightly when you	stand on it
000086E0                            ; ---------------------------------------------------------------------------
000086E0                            
000086E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086E0                            
000086E0                            
000086E0                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000086E0 1028 0038                  		move.b	$38(a0),d0
000086E4 6100 A642                  		bsr.w	CalcSine
000086E8 323C 0400                  		move.w	#$400,d1
000086EC C1C1                       		muls.w	d1,d0
000086EE 4840                       		swap	d0
000086F0 D068 002C                  		add.w	$2C(a0),d0
000086F4 3140 000C                  		move.w	d0,$C(a0)
000086F8 4E75                       		rts	
000086FA                            ; End of function Obj18_Nudge
000086FA                            
000086FA                            ; ---------------------------------------------------------------------------
000086FA                            ; Subroutine to	move platforms
000086FA                            ; ---------------------------------------------------------------------------
000086FA                            
000086FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086FA                            
000086FA                            
000086FA                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000086FA 7000                       		moveq	#0,d0
000086FC 1028 0028                  		move.b	$28(a0),d0
00008700 0240 000F                  		andi.w	#$F,d0
00008704 D040                       		add.w	d0,d0
00008706 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000870A 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000870E                            ; End of function Obj18_Move
0000870E                            
0000870E                            ; ===========================================================================
0000870E 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008712 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008716 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000871A 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000871E 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008722 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008726 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008728                            ; ===========================================================================
00008728                            
00008728                            Obj18_Type00:
00008728 4E75                       		rts			; platform 00 doesn't move
0000872A                            ; ===========================================================================
0000872A                            
0000872A                            Obj18_Type05:
0000872A 3028 0032                  		move.w	$32(a0),d0
0000872E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008732 4401                       		neg.b	d1		; reverse platform-motion
00008734 0601 0040                  		addi.b	#$40,d1
00008738 6000                       		bra.s	Obj18_01_Move
0000873A                            ; ===========================================================================
0000873A                            
0000873A                            Obj18_Type01:
0000873A 3028 0032                  		move.w	$32(a0),d0
0000873E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008742 0401 0040                  		subi.b	#$40,d1
00008746                            
00008746                            Obj18_01_Move:
00008746 4881                       		ext.w	d1
00008748 D041                       		add.w	d1,d0
0000874A 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000874E 6000 0000                  		bra.w	Obj18_ChgMotion
00008752                            ; ===========================================================================
00008752                            
00008752                            Obj18_Type0C:
00008752 3028 0034                  		move.w	$34(a0),d0
00008756 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000875A 4401                       		neg.b	d1		; reverse platform-motion
0000875C 0601 0030                  		addi.b	#$30,d1
00008760 6000                       		bra.s	Obj18_02_Move
00008762                            ; ===========================================================================
00008762                            
00008762                            Obj18_Type0B:
00008762 3028 0034                  		move.w	$34(a0),d0
00008766 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000876A 0401 0030                  		subi.b	#$30,d1
0000876E 6000                       		bra.s	Obj18_02_Move
00008770                            ; ===========================================================================
00008770                            
00008770                            Obj18_Type06:
00008770 3028 0034                  		move.w	$34(a0),d0
00008774 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008778 4401                       		neg.b	d1		; reverse platform-motion
0000877A 0601 0040                  		addi.b	#$40,d1
0000877E 6000                       		bra.s	Obj18_02_Move
00008780                            ; ===========================================================================
00008780                            
00008780                            Obj18_Type02:
00008780 3028 0034                  		move.w	$34(a0),d0
00008784 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008788 0401 0040                  		subi.b	#$40,d1
0000878C                            
0000878C                            Obj18_02_Move:
0000878C 4881                       		ext.w	d1
0000878E D041                       		add.w	d1,d0
00008790 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008794 6000 0000                  		bra.w	Obj18_ChgMotion
00008798                            ; ===========================================================================
00008798                            
00008798                            Obj18_Type03:
00008798 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000879C 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000879E 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000087A4 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000087A6 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000087AC                            
000087AC                            Obj18_03_NoMove:
000087AC 4E75                       		rts	
000087AE                            ; ===========================================================================
000087AE                            
000087AE                            Obj18_03_Wait:
000087AE 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000087B2 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000087B4 317C 0020 003A             		move.w	#32,$3A(a0)
000087BA 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000087BE 4E75                       		rts	
000087C0                            ; ===========================================================================
000087C0                            
000087C0                            Obj18_Type04:
000087C0 4A68 003A                  		tst.w	$3A(a0)
000087C4 6700                       		beq.s	loc_8048
000087C6 5368 003A                  		subq.w	#1,$3A(a0)
000087CA 6600                       		bne.s	loc_8048
000087CC 0828 0003 0022             		btst	#3,$22(a0)
000087D2 6700                       		beq.s	loc_8042
000087D4 08E9 0001 0022             		bset	#1,$22(a1)
000087DA 08A9 0003 0022             		bclr	#3,$22(a1)
000087E0 137C 0002 0024             		move.b	#2,$24(a1)
000087E6 08A8 0003 0022             		bclr	#3,$22(a0)
000087EC 4228 0025                  		clr.b	$25(a0)
000087F0 3368 0012 0012             		move.w	$12(a0),$12(a1)
000087F6                            
000087F6                            loc_8042:
000087F6 117C 0008 0024             		move.b	#8,$24(a0)
000087FC                            
000087FC                            loc_8048:
000087FC 2628 002C                  		move.l	$2C(a0),d3
00008800 3028 0012                  		move.w	$12(a0),d0
00008804 48C0                       		ext.l	d0
00008806 E180                       		asl.l	#8,d0
00008808 D680                       		add.l	d0,d3
0000880A 2143 002C                  		move.l	d3,$2C(a0)
0000880E 0668 0038 0012             		addi.w	#$38,$12(a0)
00008814 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008818 0640 00E0                  		addi.w	#$E0,d0
0000881C B068 002C                  		cmp.w	$2C(a0),d0
00008820 6400                       		bcc.s	locret_8074
00008822 117C 0006 0024             		move.b	#6,$24(a0)
00008828                            
00008828                            locret_8074:
00008828 4E75                       		rts	
0000882A                            ; ===========================================================================
0000882A                            
0000882A                            Obj18_Type07:
0000882A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000882E 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008830 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008834 7000                       		moveq	#0,d0
00008836 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000883A E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000883C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008840 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008842 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008848                            
00008848                            Obj18_07_NoMove:
00008848 4E75                       		rts	
0000884A                            ; ===========================================================================
0000884A                            
0000884A                            Obj18_07_Wait:
0000884A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000884E 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008850 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008854 4E75                       		rts	
00008856                            ; ===========================================================================
00008856                            
00008856                            Obj18_Type08:
00008856 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000885A 3028 0034                  		move.w	$34(a0),d0
0000885E 0440 0200                  		subi.w	#$200,d0
00008862 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008866 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008868 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000886C                            
0000886C                            Obj18_08_NoStop:
0000886C 4E75                       		rts	
0000886E                            ; ===========================================================================
0000886E                            
0000886E                            Obj18_Type0A:
0000886E 3028 0034                  		move.w	$34(a0),d0
00008872 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008876 0401 0040                  		subi.b	#$40,d1
0000887A 4881                       		ext.w	d1
0000887C E241                       		asr.w	#1,d1
0000887E D041                       		add.w	d1,d0
00008880 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008884                            
00008884                            Obj18_ChgMotion:
00008884 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000888A 4E75                       		rts	
0000888C                            ; ===========================================================================
0000888C                            
0000888C                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000888C 3028 0032                  		move.w	$32(a0),d0
00008890 0240 FF80                  		andi.w	#$FF80,d0
00008894 3238 F700                  		move.w	($FFFFF700).w,d1
00008898 0441 0080                  		subi.w	#$80,d1
0000889C 0241 FF80                  		andi.w	#$FF80,d1
000088A0 9041                       		sub.w	d1,d0
000088A2 0C40 0280                  		cmpi.w	#$280,d0
000088A6 6200                       		bhi.s	Obj18_Delete
000088A8 4E75                       		rts	
000088AA                            ; ===========================================================================
000088AA                            
000088AA                            Obj18_Delete:				; XREF: Obj18_Index
000088AA 6000 0000                  		bra.w	DeleteObject
000088AE                            ; ===========================================================================
000088AE                            ; ---------------------------------------------------------------------------
000088AE                            ; Sprite mappings - unused
000088AE                            ; ---------------------------------------------------------------------------
000088AE                            Map_obj18x:
000088AE                            	include "_maps\obj18x.asm"
000088AE                            ; ---------------------------------------------------------------------------
000088AE                            ; Sprite mappings - unused
000088AE                            ; ---------------------------------------------------------------------------
000088AE 0000                       		dc.w byte_80FE-Map_obj18x
000088B0 0000                       		dc.w byte_8109-Map_obj18x
000088B2 02                         byte_80FE:	dc.b 2
000088B3 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000088B8 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000088BD 0A                         byte_8109:	dc.b $A
000088BE F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000088C3 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000088C8 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000088CD 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000088D2 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000088D7 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000088DC 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000088E1 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000088E6 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000088EB 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000088F0                            		even
000088F0                            		even
000088F0                            
000088F0                            ; ---------------------------------------------------------------------------
000088F0                            ; Sprite mappings - GHZ	platforms
000088F0                            ; ---------------------------------------------------------------------------
000088F0                            Map_obj18:
000088F0                            	include "_maps\obj18ghz.asm"
000088F0                            ; ---------------------------------------------------------------------------
000088F0                            ; Sprite mappings - GHZ	platforms
000088F0                            ; ---------------------------------------------------------------------------
000088F0 0000                       		dc.w byte_8140-Map_obj18
000088F2 0000                       		dc.w byte_8155-Map_obj18
000088F4 04                         byte_8140:	dc.b 4
000088F5 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000088FA F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000088FF F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008904 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008909 0A                         byte_8155:	dc.b $A
0000890A F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000890F 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008914 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008919 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000891E 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008923 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008928 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000892D 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008932 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008937 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000893C                            		even
0000893C                            		even
0000893C                            
0000893C                            ; ---------------------------------------------------------------------------
0000893C                            ; Sprite mappings - SYZ	platforms
0000893C                            ; ---------------------------------------------------------------------------
0000893C                            Map_obj18a:
0000893C                            	include "_maps\obj18syz.asm"
0000893C                            ; ---------------------------------------------------------------------------
0000893C                            ; Sprite mappings - SYZ	platforms
0000893C                            ; ---------------------------------------------------------------------------
0000893C 0000                       		dc.w byte_818A-Map_obj18a
0000893E 03                         byte_818A:	dc.b 3
0000893F F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008944 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008949 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000894E                            		even
0000894E                            		even
0000894E                            
0000894E                            ; ---------------------------------------------------------------------------
0000894E                            ; Sprite mappings - SLZ	platforms
0000894E                            ; ---------------------------------------------------------------------------
0000894E                            Map_obj18b:
0000894E                            	include "_maps\obj18slz.asm"
0000894E                            ; ---------------------------------------------------------------------------
0000894E                            ; Sprite mappings - SLZ	platforms
0000894E                            ; ---------------------------------------------------------------------------
0000894E 0000                       		dc.w byte_819C-Map_obj18b
00008950 02                         byte_819C:	dc.b 2
00008951 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008956 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000895C 00                         		even
0000895C 00                         		even
0000895C                            
0000895C                            ; ===========================================================================
0000895C                            ; ---------------------------------------------------------------------------
0000895C                            ; Object 19 - Pearto bombs
0000895C                            ; ---------------------------------------------------------------------------
0000895C                            Obj19:					; XREF: Obj_Index
0000895C 7000                       		moveq	#0,d0
0000895E 1028 0024                  		move.b	$24(a0),d0
00008962 323B 0000                  		move.w	off_7070(pc,d0.w),d1
00008966 4EFB 1000                  		jmp	off_7070(pc,d1.w)
0000896A                            ; ---------------------------------------------------------------------------
0000896A                            
0000896A 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
00008970                            ; ---------------------------------------------------------------------------
00008970                            
00008970                            loc_7076:
00008970 5428 0024                  		addq.b	#2,$24(a0)
00008974 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
0000897C 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008982 117C 0004 0001             		move.b	#4,1(a0)
00008988 117C 0003 0019             		move.b	#3,$19(a0)
0000898E 117C 0087 0020             		move.b	#$87,$20(a0)
00008994 117C 0008 0018             		move.b	#8,$18(a0)
0000899A 317C 0018 0030             		move.w	#$18,$30(a0)
000089A0                            
000089A0                            loc_70A6:
000089A0 0828 0007 0022             		btst	#7,$22(a0)
000089A6 6600                       		bne.s	loc_70C2
000089A8 4A68 0030                  		tst.w	$30(a0)
000089AC 6600                       		bne.s	loc_70D2
000089AE 4EB9 0000 0000             		jsr	ObjHitFloor
000089B4 4A41                       		tst.w	d1
000089B6 6A00                       		bpl.s	loc_70D6
000089B8 D368 000C                  		add.w	d1,$C(a0)
000089BC                            
000089BC                            loc_70C2:
000089BC 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
000089C0 117C 0000 0024             		move.b	#0,$24(a0)
000089C6                            ; ---------------------------------------------------------------------------
000089C6                            
000089C6                            loc_70D2:
000089C6 5368 0030                  		subq.w	#1,$30(a0)
000089CA                            
000089CA                            loc_70D6:
000089CA 6100 0000                  		bsr.w	ObjectFall
000089CE 6100 0000                  		bsr.w	DisplaySprite
000089D2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000089D6 0640 00E0                  		addi.w	#$E0,d0
000089DA B068 000C                  		cmp.w	$C(a0),d0
000089DE 6500                       		bcs.s	loc_70EE
000089E0 4E75                       		rts
000089E2                            ; ---------------------------------------------------------------------------
000089E2                            
000089E2                            loc_70EE:
000089E2 6100 0000                  		bsr.w	DeleteObject
000089E6 4E75                       		rts
000089E8                            		
000089E8                            Map_obj19:
000089E8                            	include "_maps\obj19.asm"
000089E8                            Map_02b4:
000089E8 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
000089EA 01                         Map_02b4_2: 	dc.b $1
000089EB F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
000089F0                            	even
000089F0                            	even
000089F0                            ; ===========================================================================
000089F0                            ; ---------------------------------------------------------------------------
000089F0                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000089F0                            ; ---------------------------------------------------------------------------
000089F0                            Map_obj48:
000089F0                            	include "_maps\obj48.asm"
000089F0                            ; ---------------------------------------------------------------------------
000089F0                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000089F0                            ; ---------------------------------------------------------------------------
000089F0 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000089F4 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000089F8 06                         byte_81B2:	dc.b 6
000089F9 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000089FE F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008A03 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008A08 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008A0D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008A12 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008A17 04                         byte_81D1:	dc.b 4
00008A18 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008A1D E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008A22 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008A27 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008A2C 04                         byte_81E6:	dc.b 4
00008A2D E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008A32 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008A37 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008A3C 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008A41 04                         byte_81FB:	dc.b 4
00008A42 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008A47 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008A4C 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008A51 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008A56                            		even
00008A56                            		even
00008A56                            
00008A56                            ; ===========================================================================
00008A56                            ; ---------------------------------------------------------------------------
00008A56                            ; Object 1A - GHZ collapsing ledge
00008A56                            ; ---------------------------------------------------------------------------
00008A56                            
00008A56                            Obj1A:					; XREF: Obj_Index
00008A56 7000                       		moveq	#0,d0
00008A58 1028 0024                  		move.b	$24(a0),d0
00008A5C 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008A60 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008A64                            ; ===========================================================================
00008A64 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008A68 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008A6C 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008A70                            ; ===========================================================================
00008A70                            
00008A70                            Obj1A_Main:				; XREF: Obj1A_Index
00008A70 5428 0024                  		addq.b	#2,$24(a0)
00008A74 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008A7C 317C 4000 0002             		move.w	#$4000,2(a0)
00008A82 0028 0004 0001             		ori.b	#4,1(a0)
00008A88 117C 0004 0018             		move.b	#4,$18(a0)
00008A8E 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008A94 117C 0064 0019             		move.b	#$64,$19(a0)
00008A9A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008AA0 117C 0038 0016             		move.b	#$38,$16(a0)
00008AA6 08E8 0004 0001             		bset	#4,1(a0)
00008AAC                            
00008AAC                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008AAC 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008AB0 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008AB2 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008AB6 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008ABA 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008ABE                            
00008ABE                            Obj1A_Slope:
00008ABE 323C 0030                  		move.w	#$30,d1
00008AC2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008AC8 6100 F212                  		bsr.w	SlopeObject
00008ACC 6000 0000                  		bra.w	MarkObjGone
00008AD0                            ; ===========================================================================
00008AD0                            
00008AD0                            Obj1A_Touch:				; XREF: Obj1A_Index
00008AD0 4A28 0038                  		tst.b	$38(a0)
00008AD4 6700 0000                  		beq.w	loc_847A
00008AD8 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008ADE 5328 0038                  		subq.b	#1,$38(a0)
00008AE2                            
00008AE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AE2                            
00008AE2                            
00008AE2                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008AE2 323C 0030                  		move.w	#$30,d1
00008AE6 6100 F294                  		bsr.w	ExitPlatform
00008AEA 323C 0030                  		move.w	#$30,d1
00008AEE 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008AF4 3428 0008                  		move.w	8(a0),d2
00008AF8 6100 0000                  		bsr.w	SlopeObject2
00008AFC 6000 0000                  		bra.w	MarkObjGone
00008B00                            ; End of function Obj1A_WalkOff
00008B00                            
00008B00                            ; ===========================================================================
00008B00                            
00008B00                            Obj1A_Display:				; XREF: Obj1A_Index
00008B00 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008B04 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008B06 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008B0A 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008B0E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B12 6000 0000                  		bra.w	DisplaySprite
00008B16                            ; ===========================================================================
00008B16                            
00008B16                            loc_82D0:				; XREF: Obj1A_Display
00008B16 5328 0038                  		subq.b	#1,$38(a0)
00008B1A 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008B1E 43F8 D000                  		lea	($FFFFD000).w,a1
00008B22 0829 0003 0022             		btst	#3,$22(a1)
00008B28 6700                       		beq.s	loc_82FC
00008B2A 4A28 0038                  		tst.b	$38(a0)
00008B2E 6600                       		bne.s	locret_8308
00008B30 08A9 0003 0022             		bclr	#3,$22(a1)
00008B36 08A9 0005 0022             		bclr	#5,$22(a1)
00008B3C 137C 0001 001D             		move.b	#1,$1D(a1)
00008B42                            
00008B42                            loc_82FC:
00008B42 117C 0000 003A             		move.b	#0,$3A(a0)
00008B48 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008B4E                            
00008B4E                            locret_8308:
00008B4E 4E75                       		rts	
00008B50                            ; ===========================================================================
00008B50                            
00008B50                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008B50 6100 0000                  		bsr.w	ObjectFall
00008B54 6100 0000                  		bsr.w	DisplaySprite
00008B58 4A28 0001                  		tst.b	1(a0)
00008B5C 6A00                       		bpl.s	Obj1A_Delete
00008B5E 4E75                       		rts	
00008B60                            ; ===========================================================================
00008B60                            
00008B60                            Obj1A_Delete:				; XREF: Obj1A_Index
00008B60 6100 0000                  		bsr.w	DeleteObject
00008B64 4E75                       		rts	
00008B66                            ; ===========================================================================
00008B66                            ; ---------------------------------------------------------------------------
00008B66                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008B66                            ; ---------------------------------------------------------------------------
00008B66                            
00008B66                            Obj53:					; XREF: Obj_Index
00008B66 7000                       		moveq	#0,d0
00008B68 1028 0024                  		move.b	$24(a0),d0
00008B6C 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008B70 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008B74                            ; ===========================================================================
00008B74 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008B78 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008B7C 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008B80                            ; ===========================================================================
00008B80                            
00008B80                            Obj53_Main:				; XREF: Obj53_Index
00008B80 5428 0024                  		addq.b	#2,$24(a0)
00008B84 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008B8C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008B92 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008B98 6600                       		bne.s	Obj53_NotSLZ
00008B9A 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008BA0 5428 001A                  		addq.b	#2,$1A(a0)
00008BA4                            
00008BA4                            Obj53_NotSLZ:
00008BA4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008BAA 6600                       		bne.s	Obj53_NotSBZ
00008BAC 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008BB2                            
00008BB2                            Obj53_NotSBZ:
00008BB2 0028 0004 0001             		ori.b	#4,1(a0)
00008BB8 117C 0004 0018             		move.b	#4,$18(a0)
00008BBE 117C 0007 0038             		move.b	#7,$38(a0)
00008BC4 117C 0044 0019             		move.b	#$44,$19(a0)
00008BCA                            
00008BCA                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008BCA 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008BCE 6700                       		beq.s	Obj53_Solid	; if not, branch
00008BD0 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008BD4 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008BD8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008BDC                            
00008BDC                            Obj53_Solid:
00008BDC 323C 0020                  		move.w	#$20,d1
00008BE0 6100 F026                  		bsr.w	PlatformObject
00008BE4 4A28 0028                  		tst.b	$28(a0)
00008BE8 6A00                       		bpl.s	Obj53_MarkAsGone
00008BEA 0829 0003 0022             		btst	#3,$22(a1)
00008BF0 6700                       		beq.s	Obj53_MarkAsGone
00008BF2 08A8 0000 0001             		bclr	#0,1(a0)
00008BF8 3029 0008                  		move.w	8(a1),d0
00008BFC 9068 0008                  		sub.w	8(a0),d0
00008C00 6400                       		bcc.s	Obj53_MarkAsGone
00008C02 08E8 0000 0001             		bset	#0,1(a0)
00008C08                            
00008C08                            Obj53_MarkAsGone:
00008C08 6000 0000                  		bra.w	MarkObjGone
00008C0C                            ; ===========================================================================
00008C0C                            
00008C0C                            Obj53_Touch:				; XREF: Obj53_Index
00008C0C 4A28 0038                  		tst.b	$38(a0)
00008C10 6700 0000                  		beq.w	loc_8458
00008C14 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008C1A 5328 0038                  		subq.b	#1,$38(a0)
00008C1E                            
00008C1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C1E                            
00008C1E                            
00008C1E                            Obj53_WalkOff:				; XREF: Obj53_Index
00008C1E 323C 0020                  		move.w	#$20,d1
00008C22 6100 F158                  		bsr.w	ExitPlatform
00008C26 3428 0008                  		move.w	8(a0),d2
00008C2A 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008C2E 6000 0000                  		bra.w	MarkObjGone
00008C32                            ; End of function Obj53_WalkOff
00008C32                            
00008C32                            ; ===========================================================================
00008C32                            
00008C32                            Obj53_Display:				; XREF: Obj53_Index
00008C32 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C36 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008C38 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C3C 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008C40 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C44 6000 0000                  		bra.w	DisplaySprite
00008C48                            ; ===========================================================================
00008C48                            
00008C48                            loc_8402:
00008C48 5328 0038                  		subq.b	#1,$38(a0)
00008C4C 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008C50 43F8 D000                  		lea	($FFFFD000).w,a1
00008C54 0829 0003 0022             		btst	#3,$22(a1)
00008C5A 6700                       		beq.s	loc_842E
00008C5C 4A28 0038                  		tst.b	$38(a0)
00008C60 6600                       		bne.s	locret_843A
00008C62 08A9 0003 0022             		bclr	#3,$22(a1)
00008C68 08A9 0005 0022             		bclr	#5,$22(a1)
00008C6E 137C 0001 001D             		move.b	#1,$1D(a1)
00008C74                            
00008C74                            loc_842E:
00008C74 117C 0000 003A             		move.b	#0,$3A(a0)
00008C7A 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008C80                            
00008C80                            locret_843A:
00008C80 4E75                       		rts	
00008C82                            ; ===========================================================================
00008C82                            
00008C82                            Obj53_TimeZero:				; XREF: Obj53_Display
00008C82 6100 0000                  		bsr.w	ObjectFall
00008C86 6100 0000                  		bsr.w	DisplaySprite
00008C8A 4A28 0001                  		tst.b	1(a0)
00008C8E 6A00                       		bpl.s	Obj53_Delete
00008C90 4E75                       		rts	
00008C92                            ; ===========================================================================
00008C92                            
00008C92                            Obj53_Delete:				; XREF: Obj53_Index
00008C92 6100 0000                  		bsr.w	DeleteObject
00008C96 4E75                       		rts	
00008C98                            ; ===========================================================================
00008C98                            
00008C98                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008C98 117C 0000 003A             		move.b	#0,$3A(a0)
00008C9E                            
00008C9E                            loc_8458:				; XREF: Obj53_Touch
00008C9E 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008CA4 0828 0000 0028             		btst	#0,$28(a0)
00008CAA 6700                       		beq.s	loc_846C
00008CAC 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008CB2                            
00008CB2                            loc_846C:
00008CB2 7207                       		moveq	#7,d1
00008CB4 5228 001A                  		addq.b	#1,$1A(a0)
00008CB8 6000                       		bra.s	loc_8486
00008CBA                            ; ===========================================================================
00008CBA                            
00008CBA                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008CBA 117C 0000 003A             		move.b	#0,$3A(a0)
00008CC0                            
00008CC0                            loc_847A:				; XREF: Obj1A_Touch
00008CC0 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008CC6 7218                       		moveq	#$18,d1
00008CC8 5428 001A                  		addq.b	#2,$1A(a0)
00008CCC                            
00008CCC                            loc_8486:				; XREF: Obj53_Collapse
00008CCC 7000                       		moveq	#0,d0
00008CCE 1028 001A                  		move.b	$1A(a0),d0
00008CD2 D040                       		add.w	d0,d0
00008CD4 2668 0004                  		movea.l	4(a0),a3
00008CD8 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008CDC 524B                       		addq.w	#1,a3
00008CDE 08E8 0005 0001             		bset	#5,1(a0)
00008CE4 1810                       		move.b	0(a0),d4
00008CE6 1A28 0001                  		move.b	1(a0),d5
00008CEA 2248                       		movea.l	a0,a1
00008CEC 6000                       		bra.s	loc_84B2
00008CEE                            ; ===========================================================================
00008CEE                            
00008CEE                            loc_84AA:
00008CEE 6100 0000                  		bsr.w	SingleObjLoad
00008CF2 6600                       		bne.s	loc_84F2
00008CF4 5A4B                       		addq.w	#5,a3
00008CF6                            
00008CF6                            loc_84B2:
00008CF6 137C 0006 0024             		move.b	#6,$24(a1)
00008CFC 1284                       		move.b	d4,0(a1)
00008CFE 234B 0004                  		move.l	a3,4(a1)
00008D02 1345 0001                  		move.b	d5,1(a1)
00008D06 3368 0008 0008             		move.w	8(a0),8(a1)
00008D0C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D12 3368 0002 0002             		move.w	2(a0),2(a1)
00008D18 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008D1E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008D24 135C 0038                  		move.b	(a4)+,$38(a1)
00008D28 B3C8                       		cmpa.l	a0,a1
00008D2A 6400                       		bcc.s	loc_84EE
00008D2C 6100 0000                  		bsr.w	DisplaySprite2
00008D30                            
00008D30                            loc_84EE:
00008D30 51C9 FFBC                  		dbf	d1,loc_84AA
00008D34                            
00008D34                            loc_84F2:
00008D34 6100 0000                  		bsr.w	DisplaySprite
00008D38 303C 00B9                  		move.w	#$B9,d0
00008D3C 4EF9 0000 158E             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008D42                            ; ===========================================================================
00008D42                            ; ---------------------------------------------------------------------------
00008D42                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008D42                            ; ---------------------------------------------------------------------------
00008D42 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008D52 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008D5C 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008D64 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008D6C                            
00008D6C                            ; ---------------------------------------------------------------------------
00008D6C                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008D6C                            ; ---------------------------------------------------------------------------
00008D6C                            
00008D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D6C                            
00008D6C                            
00008D6C                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008D6C 43F8 D000                  		lea	($FFFFD000).w,a1
00008D70 0829 0003 0022             		btst	#3,$22(a1)
00008D76 6700                       		beq.s	locret_856E
00008D78 3029 0008                  		move.w	8(a1),d0
00008D7C 9068 0008                  		sub.w	8(a0),d0
00008D80 D041                       		add.w	d1,d0
00008D82 E248                       		lsr.w	#1,d0
00008D84 0828 0000 0001             		btst	#0,1(a0)
00008D8A 6700                       		beq.s	loc_854E
00008D8C 4640                       		not.w	d0
00008D8E D041                       		add.w	d1,d0
00008D90                            
00008D90                            loc_854E:
00008D90 7200                       		moveq	#0,d1
00008D92 1232 0000                  		move.b	(a2,d0.w),d1
00008D96 3028 000C                  		move.w	$C(a0),d0
00008D9A 9041                       		sub.w	d1,d0
00008D9C 7200                       		moveq	#0,d1
00008D9E 1229 0016                  		move.b	$16(a1),d1
00008DA2 9041                       		sub.w	d1,d0
00008DA4 3340 000C                  		move.w	d0,$C(a1)
00008DA8 9468 0008                  		sub.w	8(a0),d2
00008DAC 9569 0008                  		sub.w	d2,8(a1)
00008DB0                            
00008DB0                            locret_856E:
00008DB0 4E75                       		rts	
00008DB2                            ; End of function SlopeObject2
00008DB2                            
00008DB2                            ; ===========================================================================
00008DB2                            ; ---------------------------------------------------------------------------
00008DB2                            ; Collision data for GHZ collapsing ledge
00008DB2                            ; ---------------------------------------------------------------------------
00008DB2                            Obj1A_SlopeData:
00008DB2                            		incbin	misc\ghzledge.bin
00008DE2                            		even
00008DE2                            
00008DE2                            ; ---------------------------------------------------------------------------
00008DE2                            ; Sprite mappings - GHZ	collapsing ledge
00008DE2                            ; ---------------------------------------------------------------------------
00008DE2                            Map_obj1A:
00008DE2                            	include "_maps\obj1A.asm"
00008DE2                            ; ---------------------------------------------------------------------------
00008DE2                            ; Sprite mappings - GHZ	collapsing ledge
00008DE2                            ; ---------------------------------------------------------------------------
00008DE2 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008DE6 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008DEA 10                         byte_85A8:	dc.b $10
00008DEB C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008DF0 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008DF5 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008DFA E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008DFF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E04 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008E09 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E0E F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E13 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E18 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008E1D 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E22 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E27 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E2C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008E31 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E36 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E3B 10                         byte_85F9:	dc.b $10
00008E3C C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008E41 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E46 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E4B E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E50 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E55 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008E5A F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E5F F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E64 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E69 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008E6E 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E73 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E78 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E7D 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008E82 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E87 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E8C 19                         byte_864A:	dc.b $19
00008E8D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008E92 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008E97 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008E9C D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008EA1 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008EA6 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008EAB E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008EB0 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008EB5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008EBA D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008EBF F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008EC4 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008EC9 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008ECE F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008ED3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008ED8 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008EDD 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008EE2 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008EE7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008EEC 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008EF1 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008EF6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008EFB 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F00 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F05 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F0A 19                         byte_86C8:	dc.b $19
00008F0B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008F10 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008F15 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008F1A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008F1F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008F24 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008F29 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008F2E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008F33 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008F38 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008F3D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F42 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F47 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008F4C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008F51 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008F56 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008F5B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008F60 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008F65 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008F6A 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008F6F 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008F74 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008F79 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F7E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F83 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F88                            		even
00008F88                            		even
00008F88                            
00008F88                            ; ---------------------------------------------------------------------------
00008F88                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008F88                            ; ---------------------------------------------------------------------------
00008F88                            Map_obj53:
00008F88                            	include "_maps\obj53.asm"
00008F88                            ; ---------------------------------------------------------------------------
00008F88                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008F88                            ; ---------------------------------------------------------------------------
00008F88 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008F8C 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008F90 04                         byte_874E:	dc.b 4
00008F91 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008F96 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008F9B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FA0 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008FA5 08                         byte_8763:	dc.b 8
00008FA6 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FAB F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008FB0 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008FB5 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008FBA 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008FBF 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008FC4 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008FC9 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008FCE 04                         byte_878C:	dc.b 4
00008FCF F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008FD4 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008FD9 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FDE 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008FE3 08                         byte_87A1:	dc.b 8
00008FE4 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FE9 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008FEE F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008FF3 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008FF8 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008FFD 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009002 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009007 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000900C                            		even
0000900C                            		even
0000900C                            
0000900C                            ; ===========================================================================
0000900C                            ; ---------------------------------------------------------------------------
0000900C                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000900C                            ; ---------------------------------------------------------------------------
0000900C                            
0000900C                            Obj1C:					; XREF: Obj_Index
0000900C 7000                       		moveq	#0,d0
0000900E 1028 0024                  		move.b	$24(a0),d0
00009012 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009016 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000901A                            ; ===========================================================================
0000901A 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000901C 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000901E                            ; ===========================================================================
0000901E                            
0000901E                            Obj1C_Main:				; XREF: Obj1C_Index
0000901E 5428 0024                  		addq.b	#2,$24(a0)
00009022 7000                       		moveq	#0,d0
00009024 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009028 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000902C 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009030 2159 0004                  		move.l	(a1)+,4(a0)
00009034 3159 0002                  		move.w	(a1)+,2(a0)
00009038 0028 0004 0001             		ori.b	#4,1(a0)
0000903E 1159 001A                  		move.b	(a1)+,$1A(a0)
00009042 1159 0019                  		move.b	(a1)+,$19(a0)
00009046 1159 0018                  		move.b	(a1)+,$18(a0)
0000904A 1159 0020                  		move.b	(a1)+,$20(a0)
0000904E                            
0000904E                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000904E 3028 0008                  		move.w	8(a0),d0
00009052 0240 FF80                  		andi.w	#$FF80,d0
00009056 3238 F700                  		move.w	($FFFFF700).w,d1
0000905A 0441 0080                  		subi.w	#$80,d1
0000905E 0241 FF80                  		andi.w	#$FF80,d1
00009062 9041                       		sub.w	d1,d0
00009064 0C40 0280                  		cmpi.w	#$280,d0
00009068 6200 0000                  		bhi.w	DeleteObject
0000906C 6000 0000                  		bra.w	DisplaySprite
00009070                            ; ===========================================================================
00009070                            ; ---------------------------------------------------------------------------
00009070                            ; Variables for	object $1C are stored in an array
00009070                            ; ---------------------------------------------------------------------------
00009070 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00009074 44D8                       		dc.w $44D8		; VRAM setting
00009076 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000907A 0000 0000                  		dc.l Map_obj1C
0000907E 44D8                       		dc.w $44D8
00009080 0008 0200                  		dc.b 0,	8, 2, 0
00009084 0000 0000                  		dc.l Map_obj1C
00009088 44D8                       		dc.w $44D8
0000908A 0008 0200                  		dc.b 0,	8, 2, 0
0000908E 0000 80F0                  		dc.l Map_obj11
00009092 438E                       		dc.w $438E
00009094 0110 0100                  		dc.b 1,	$10, 1,	0
00009098                            ; ---------------------------------------------------------------------------
00009098                            ; Sprite mappings - SLZ	lava thrower
00009098                            ; ---------------------------------------------------------------------------
00009098                            Map_obj1C:
00009098                            	include "_maps\obj1C.asm"
00009098                            ; ---------------------------------------------------------------------------
00009098                            ; Sprite mappings - SLZ	lava thrower
00009098                            ; ---------------------------------------------------------------------------
00009098 0000                       		dc.w byte_8858-Map_obj1C
0000909A 01                         byte_8858:	dc.b 1
0000909B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000090A0                            		even
000090A0                            		even
000090A0                            
000090A0                            ; ===========================================================================
000090A0                            ; ---------------------------------------------------------------------------
000090A0                            ; Object 1D - switch that activates when Sonic touches it
000090A0                            ; (this	is not used anywhere in	the game)
000090A0                            ; ---------------------------------------------------------------------------
000090A0                            
000090A0                            Obj1D:					; XREF: Obj_Index
000090A0 7000                       		moveq	#0,d0
000090A2 1028 0024                  		move.b	$24(a0),d0
000090A6 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000090AA 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000090AE                            ; ===========================================================================
000090AE 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000090B0 0000                       		dc.w Obj1D_Action-Obj1D_Index
000090B2 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000090B4                            ; ===========================================================================
000090B4                            
000090B4                            Obj1D_Main:				; XREF: Obj1D_Index
000090B4 5428 0024                  		addq.b	#2,$24(a0)
000090B8 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
000090C0 317C 4000 0002             		move.w	#$4000,2(a0)
000090C6 117C 0004 0001             		move.b	#4,1(a0)
000090CC 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
000090D2 117C 0010 0019             		move.b	#$10,$19(a0)
000090D8 117C 0005 0018             		move.b	#5,$18(a0)
000090DE                            
000090DE                            Obj1D_Action:				; XREF: Obj1D_Index
000090DE 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
000090E4 323C 0010                  		move.w	#$10,d1
000090E8 6100 0000                  		bsr.w	Obj1D_ChkTouch
000090EC 6700                       		beq.s	Obj1D_ChkDel
000090EE 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000090F2 7001                       		moveq	#1,d0
000090F4 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000090F8                            
000090F8                            Obj1D_ChkDel:
000090F8 6100 0000                  		bsr.w	DisplaySprite
000090FC 3028 0008                  		move.w	8(a0),d0
00009100 0240 FF80                  		andi.w	#$FF80,d0
00009104 3238 F700                  		move.w	($FFFFF700).w,d1
00009108 0441 0080                  		subi.w	#$80,d1
0000910C 0241 FF80                  		andi.w	#$FF80,d1
00009110 9041                       		sub.w	d1,d0
00009112 0C40 0280                  		cmpi.w	#$280,d0
00009116 6200 0000                  		bhi.w	Obj1D_Delete
0000911A 4E75                       		rts	
0000911C                            ; ===========================================================================
0000911C                            
0000911C                            Obj1D_Delete:				; XREF: Obj1D_Index
0000911C 6100 0000                  		bsr.w	DeleteObject
00009120 4E75                       		rts	
00009122                            ; ---------------------------------------------------------------------------
00009122                            ; Subroutine to	check if Sonic touches the object
00009122                            ; ---------------------------------------------------------------------------
00009122                            
00009122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009122                            
00009122                            
00009122                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009122 43F8 D000                  		lea	($FFFFD000).w,a1
00009126 3029 0008                  		move.w	8(a1),d0
0000912A 9068 0008                  		sub.w	8(a0),d0
0000912E D041                       		add.w	d1,d0
00009130 6B00                       		bmi.s	loc_8918
00009132 D241                       		add.w	d1,d1
00009134 B041                       		cmp.w	d1,d0
00009136 6400                       		bcc.s	loc_8918
00009138 3429 000C                  		move.w	$C(a1),d2
0000913C 1229 0016                  		move.b	$16(a1),d1
00009140 4881                       		ext.w	d1
00009142 D242                       		add.w	d2,d1
00009144 3028 000C                  		move.w	$C(a0),d0
00009148 0440 0010                  		subi.w	#$10,d0
0000914C 9041                       		sub.w	d1,d0
0000914E 6200                       		bhi.s	loc_8918
00009150 0C40 FFF0                  		cmpi.w	#-$10,d0
00009154 6500                       		bcs.s	loc_8918
00009156 70FF                       		moveq	#-1,d0
00009158 4E75                       		rts	
0000915A                            ; ===========================================================================
0000915A                            
0000915A                            loc_8918:
0000915A 7000                       		moveq	#0,d0
0000915C 4E75                       		rts	
0000915E                            ; End of function Obj1D_ChkTouch
0000915E                            
0000915E                            ; ===========================================================================
0000915E                            ; ---------------------------------------------------------------------------
0000915E                            ; Sprite mappings - object 1D
0000915E                            ; ---------------------------------------------------------------------------
0000915E                            Map_obj1D:
0000915E                            	include "_maps\obj1D.asm"
0000915E                            ; ---------------------------------------------------------------------------
0000915E                            ; Sprite mappings - object 1D
0000915E                            ; ---------------------------------------------------------------------------
0000915E 0000                       		dc.w byte_891E-Map_obj1D
00009160 04                         byte_891E:	dc.b 4
00009161 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009166 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000916B E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009170 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009176 00                         		even
00009176 00                         		even
00009176                            
00009176                            ; ===========================================================================
00009176                            ; ---------------------------------------------------------------------------
00009176                            ; Object 2A - doors (SBZ)
00009176                            ; ---------------------------------------------------------------------------
00009176                            
00009176                            Obj2A:					; XREF: Obj_Index
00009176 7000                       		moveq	#0,d0
00009178 1028 0024                  		move.b	$24(a0),d0
0000917C 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009180 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009184                            ; ===========================================================================
00009184 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009186 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009188                            ; ===========================================================================
00009188                            
00009188                            Obj2A_Main:				; XREF: Obj2A_Index
00009188 5428 0024                  		addq.b	#2,$24(a0)
0000918C 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009194 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000919A 0028 0004 0001             		ori.b	#4,1(a0)
000091A0 117C 0008 0019             		move.b	#8,$19(a0)
000091A6 117C 0004 0018             		move.b	#4,$18(a0)
000091AC                            
000091AC                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000091AC 323C 0040                  		move.w	#$40,d1
000091B0 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000091B4 3038 D008                  		move.w	($FFFFD008).w,d0
000091B8 D041                       		add.w	d1,d0
000091BA B068 0008                  		cmp.w	8(a0),d0
000091BE 6500                       		bcs.s	Obj2A_Animate
000091C0 9041                       		sub.w	d1,d0
000091C2 9041                       		sub.w	d1,d0
000091C4 B068 0008                  		cmp.w	8(a0),d0
000091C8 6400                       		bcc.s	Obj2A_Animate
000091CA D041                       		add.w	d1,d0
000091CC B068 0008                  		cmp.w	8(a0),d0
000091D0 6400                       		bcc.s	loc_899A
000091D2 0828 0000 0022             		btst	#0,$22(a0)
000091D8 6600                       		bne.s	Obj2A_Animate
000091DA 6000                       		bra.s	Obj2A_Open
000091DC                            ; ===========================================================================
000091DC                            
000091DC                            loc_899A:				; XREF: Obj2A_OpenShut
000091DC 0828 0000 0022             		btst	#0,$22(a0)
000091E2 6700                       		beq.s	Obj2A_Animate
000091E4                            
000091E4                            Obj2A_Open:				; XREF: Obj2A_OpenShut
000091E4 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
000091EA                            
000091EA                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
000091EA 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
000091F0 6100 0000                  		bsr.w	AnimateSprite
000091F4 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000091F8 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000091FA 323C 0011                  		move.w	#$11,d1
000091FE 343C 0020                  		move.w	#$20,d2
00009202 3602                       		move.w	d2,d3
00009204 5243                       		addq.w	#1,d3
00009206 3828 0008                  		move.w	8(a0),d4
0000920A 6100 0000                  		bsr.w	SolidObject
0000920E                            
0000920E                            Obj2A_MarkAsUsed:
0000920E 6000 0000                  		bra.w	MarkObjGone
00009212                            ; ===========================================================================
00009212                            Ani_obj2A:
00009212                            	include "_anim\obj2A.asm"
00009212                            ; ---------------------------------------------------------------------------
00009212                            ; Animation script - doors (SBZ)
00009212                            ; ---------------------------------------------------------------------------
00009212 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009214 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009216 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009222 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000922E                            		even
0000922E                            		even
0000922E                            
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            ; Sprite mappings - doors (SBZ)
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            Map_obj2A:
0000922E                            	include "_maps\obj2A.asm"
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            ; Sprite mappings - doors (SBZ)
0000922E                            ; ---------------------------------------------------------------------------
0000922E 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009232 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009236 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000923A 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000923E 0000                       		dc.w byte_8A56-Map_obj2A
00009240 02                         byte_89FE:	dc.b 2
00009241 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009246 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000924B 02                         byte_8A09:	dc.b 2
0000924C DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009251 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009256 02                         byte_8A14:	dc.b 2
00009257 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000925C 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009261 02                         byte_8A1F:	dc.b 2
00009262 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009267 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
0000926C 02                         byte_8A2A:	dc.b 2
0000926D D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009272 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009277 02                         byte_8A35:	dc.b 2
00009278 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000927D 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009282 02                         byte_8A40:	dc.b 2
00009283 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009288 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000928D 02                         byte_8A4B:	dc.b 2
0000928E C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009293 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009298 02                         byte_8A56:	dc.b 2
00009299 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000929E 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000092A4 00                         		even
000092A4 00                         		even
000092A4                            
000092A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092A4                            
000092A4                            
000092A4                            Obj44_SolidWall:			; XREF: Obj44_Solid
000092A4 6100 0000                  		bsr.w	Obj44_SolidWall2
000092A8 6700                       		beq.s	loc_8AA8
000092AA 6B00 0000                  		bmi.w	loc_8AC4
000092AE 4A40                       		tst.w	d0
000092B0 6700 0000                  		beq.w	loc_8A92
000092B4 6B00                       		bmi.s	loc_8A7C
000092B6 4A69 0010                  		tst.w	$10(a1)
000092BA 6B00                       		bmi.s	loc_8A92
000092BC 6000                       		bra.s	loc_8A82
000092BE                            ; ===========================================================================
000092BE                            
000092BE                            loc_8A7C:
000092BE 4A69 0010                  		tst.w	$10(a1)
000092C2 6A00                       		bpl.s	loc_8A92
000092C4                            
000092C4                            loc_8A82:
000092C4 9169 0008                  		sub.w	d0,8(a1)
000092C8 337C 0000 0014             		move.w	#0,$14(a1)
000092CE 337C 0000 0010             		move.w	#0,$10(a1)
000092D4                            
000092D4                            loc_8A92:
000092D4 0829 0001 0022             		btst	#1,$22(a1)
000092DA 6600                       		bne.s	loc_8AB6
000092DC 08E9 0005 0022             		bset	#5,$22(a1)
000092E2 08E8 0005 0022             		bset	#5,$22(a0)
000092E8 4E75                       		rts	
000092EA                            ; ===========================================================================
000092EA                            
000092EA                            loc_8AA8:
000092EA 0828 0005 0022             		btst	#5,$22(a0)
000092F0 6700                       		beq.s	locret_8AC2
000092F2 337C 0001 001C             		move.w	#1,$1C(a1)
000092F8                            
000092F8                            loc_8AB6:
000092F8 08A8 0005 0022             		bclr	#5,$22(a0)
000092FE 08A9 0005 0022             		bclr	#5,$22(a1)
00009304                            
00009304                            locret_8AC2:
00009304 4E75                       		rts	
00009306                            ; ===========================================================================
00009306                            
00009306                            loc_8AC4:
00009306 4A69 0012                  		tst.w	$12(a1)
0000930A 6A00                       		bpl.s	locret_8AD8
0000930C 4A43                       		tst.w	d3
0000930E 6A00                       		bpl.s	locret_8AD8
00009310 9769 000C                  		sub.w	d3,$C(a1)
00009314 337C 0000 0012             		move.w	#0,$12(a1)
0000931A                            
0000931A                            locret_8AD8:
0000931A 4E75                       		rts	
0000931C                            ; End of function Obj44_SolidWall
0000931C                            
0000931C                            
0000931C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000931C                            
0000931C                            
0000931C                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000931C 43F8 D000                  		lea	($FFFFD000).w,a1
00009320 3029 0008                  		move.w	8(a1),d0
00009324 9068 0008                  		sub.w	8(a0),d0
00009328 D041                       		add.w	d1,d0
0000932A 6B00                       		bmi.s	loc_8B48
0000932C 3601                       		move.w	d1,d3
0000932E D643                       		add.w	d3,d3
00009330 B043                       		cmp.w	d3,d0
00009332 6200                       		bhi.s	loc_8B48
00009334 1629 0016                  		move.b	$16(a1),d3
00009338 4883                       		ext.w	d3
0000933A D443                       		add.w	d3,d2
0000933C 3629 000C                  		move.w	$C(a1),d3
00009340 9668 000C                  		sub.w	$C(a0),d3
00009344 D642                       		add.w	d2,d3
00009346 6B00                       		bmi.s	loc_8B48
00009348 3802                       		move.w	d2,d4
0000934A D844                       		add.w	d4,d4
0000934C B644                       		cmp.w	d4,d3
0000934E 6400                       		bcc.s	loc_8B48
00009350 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009354 6B00                       		bmi.s	loc_8B48
00009356 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000935C 6400                       		bcc.s	loc_8B48
0000935E 4A78 FE08                  		tst.w	($FFFFFE08).w
00009362 6600                       		bne.s	loc_8B48
00009364 3A00                       		move.w	d0,d5
00009366 B240                       		cmp.w	d0,d1
00009368 6400                       		bcc.s	loc_8B30
0000936A D241                       		add.w	d1,d1
0000936C 9041                       		sub.w	d1,d0
0000936E 3A00                       		move.w	d0,d5
00009370 4445                       		neg.w	d5
00009372                            
00009372                            loc_8B30:
00009372 3203                       		move.w	d3,d1
00009374 B443                       		cmp.w	d3,d2
00009376 6400                       		bcc.s	loc_8B3C
00009378 9644                       		sub.w	d4,d3
0000937A 3203                       		move.w	d3,d1
0000937C 4441                       		neg.w	d1
0000937E                            
0000937E                            loc_8B3C:
0000937E BA41                       		cmp.w	d1,d5
00009380 6200                       		bhi.s	loc_8B44
00009382 7801                       		moveq	#1,d4
00009384 4E75                       		rts	
00009386                            ; ===========================================================================
00009386                            
00009386                            loc_8B44:
00009386 78FF                       		moveq	#-1,d4
00009388 4E75                       		rts	
0000938A                            ; ===========================================================================
0000938A                            
0000938A                            loc_8B48:
0000938A 7800                       		moveq	#0,d4
0000938C 4E75                       		rts	
0000938E                            ; End of function Obj44_SolidWall2
0000938E                            
0000938E                            ; ===========================================================================
0000938E                            ; ---------------------------------------------------------------------------
0000938E                            ; Object 1E - Ball Hog enemy (SBZ)
0000938E                            ; ---------------------------------------------------------------------------
0000938E                            
0000938E                            Obj1E:					; XREF: Obj_Index
0000938E 7000                       		moveq	#0,d0
00009390 1028 0024                  		move.b	$24(a0),d0
00009394 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009398 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000939C                            ; ===========================================================================
0000939C 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000939E 0000                       		dc.w Obj1E_Action-Obj1E_Index
000093A0                            ; ===========================================================================
000093A0                            
000093A0                            Obj1E_Main:				; XREF: Obj1E_Index
000093A0 117C 0013 0016             		move.b	#$13,$16(a0)
000093A6 117C 0008 0017             		move.b	#8,$17(a0)
000093AC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000093B4 317C 2302 0002             		move.w	#$2302,2(a0)
000093BA 117C 0004 0001             		move.b	#4,1(a0)
000093C0 117C 0004 0018             		move.b	#4,$18(a0)
000093C6 117C 0005 0020             		move.b	#5,$20(a0)
000093CC 117C 000C 0019             		move.b	#$C,$19(a0)
000093D2 6100 0000                  		bsr.w	ObjectFall
000093D6 4EB9 0000 0000             		jsr	ObjHitFloor
000093DC 4A41                       		tst.w	d1
000093DE 6A00                       		bpl.s	locret_8BAC
000093E0 D368 000C                  		add.w	d1,$C(a0)
000093E4 317C 0000 0012             		move.w	#0,$12(a0)
000093EA 5428 0024                  		addq.b	#2,$24(a0)
000093EE                            
000093EE                            locret_8BAC:
000093EE 4E75                       		rts	
000093F0                            ; ===========================================================================
000093F0                            
000093F0                            Obj1E_Action:				; XREF: Obj1E_Index
000093F0 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000093F6 6100 0000                  		bsr.w	AnimateSprite
000093FA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009400 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009402 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009406 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009408 6000                       		bra.s	Obj1E_MarkAsGone
0000940A                            ; ===========================================================================
0000940A                            
0000940A                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000940A 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000940E                            
0000940E                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000940E 6000 0000                  		bra.w	MarkObjGone
00009412                            ; ===========================================================================
00009412                            
00009412                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009412 117C 0001 0032             		move.b	#1,$32(a0)
00009418 6100 0000                  		bsr.w	SingleObjLoad
0000941C 6600                       		bne.s	loc_8C1A
0000941E 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009422 3368 0008 0008             		move.w	8(a0),8(a1)
00009428 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000942E 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009434 337C 0000 0012             		move.w	#0,$12(a1)
0000943A 70FC                       		moveq	#-4,d0
0000943C 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009442 6700                       		beq.s	loc_8C0A	; if not, branch
00009444 4440                       		neg.w	d0
00009446 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000944A                            
0000944A                            loc_8C0A:
0000944A D169 0008                  		add.w	d0,8(a1)
0000944E 0669 000C 000C             		addi.w	#$C,$C(a1)
00009454 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000945A                            
0000945A                            loc_8C1A:
0000945A 60B2                       		bra.s	Obj1E_MarkAsGone
0000945C                            ; ===========================================================================
0000945C                            ; ---------------------------------------------------------------------------
0000945C                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000945C                            ; ---------------------------------------------------------------------------
0000945C                            
0000945C                            Obj20:					; XREF: Obj_Index
0000945C 7000                       		moveq	#0,d0
0000945E 1028 0024                  		move.b	$24(a0),d0
00009462 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009466 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000946A                            ; ===========================================================================
0000946A 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000946C 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000946E                            ; ===========================================================================
0000946E                            
0000946E                            Obj20_Main:				; XREF: Obj20_Index
0000946E 5428 0024                  		addq.b	#2,$24(a0)
00009472 117C 0007 0016             		move.b	#7,$16(a0)
00009478 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009480 317C 2302 0002             		move.w	#$2302,2(a0)
00009486 117C 0004 0001             		move.b	#4,1(a0)
0000948C 117C 0003 0018             		move.b	#3,$18(a0)
00009492 117C 0087 0020             		move.b	#$87,$20(a0)
00009498 117C 0008 0019             		move.b	#8,$19(a0)
0000949E 7000                       		moveq	#0,d0
000094A0 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094A4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000094A8 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000094AC 117C 0004 001A             		move.b	#4,$1A(a0)
000094B2                            
000094B2                            Obj20_Bounce:				; XREF: Obj20_Index
000094B2 4EB9 0000 0000             		jsr	ObjectFall
000094B8 4A68 0012                  		tst.w	$12(a0)
000094BC 6B00                       		bmi.s	Obj20_ChkExplode
000094BE 4EB9 0000 0000             		jsr	ObjHitFloor
000094C4 4A41                       		tst.w	d1
000094C6 6A00                       		bpl.s	Obj20_ChkExplode
000094C8 D368 000C                  		add.w	d1,$C(a0)
000094CC 317C FD00 0012             		move.w	#-$300,$12(a0)
000094D2 4A03                       		tst.b	d3
000094D4 6700                       		beq.s	Obj20_ChkExplode
000094D6 6B00                       		bmi.s	loc_8CA4
000094D8 4A68 0010                  		tst.w	$10(a0)
000094DC 6A00                       		bpl.s	Obj20_ChkExplode
000094DE 4468 0010                  		neg.w	$10(a0)
000094E2 6000                       		bra.s	Obj20_ChkExplode
000094E4                            ; ===========================================================================
000094E4                            
000094E4                            loc_8CA4:				; XREF: Obj20_Bounce
000094E4 4A68 0010                  		tst.w	$10(a0)
000094E8 6B00                       		bmi.s	Obj20_ChkExplode
000094EA 4468 0010                  		neg.w	$10(a0)
000094EE                            
000094EE                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000094EE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000094F2 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000094F4 10BC 0024                  		move.b	#$24,0(a0)
000094F8 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000094FC 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009502 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009506                            ; ===========================================================================
00009506                            
00009506                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009506 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000950A 6A00                       		bpl.s	Obj20_Display
0000950C 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009512 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009518                            
00009518                            Obj20_Display:
00009518 6100 0000                  		bsr.w	DisplaySprite
0000951C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009520 0640 00E0                  		addi.w	#$E0,d0
00009524 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009528 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000952C 4E75                       		rts	
0000952E                            ; ===========================================================================
0000952E                            ; ---------------------------------------------------------------------------
0000952E                            ; Object 24 - explosion	from a destroyed monitor
0000952E                            ; ---------------------------------------------------------------------------
0000952E                            
0000952E                            Obj24:					; XREF: Obj_Index
0000952E 7000                       		moveq	#0,d0
00009530 1028 0024                  		move.b	$24(a0),d0
00009534 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009538 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000953C                            ; ===========================================================================
0000953C 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000953E 0000                       		dc.w Obj24_Animate-Obj24_Index
00009540                            ; ===========================================================================
00009540                            
00009540                            Obj24_Main:				; XREF: Obj24_Index
00009540 5428 0024                  		addq.b	#2,$24(a0)
00009544 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000954C 317C 041C 0002             		move.w	#$41C,2(a0)
00009552 117C 0004 0001             		move.b	#4,1(a0)
00009558 117C 0001 0018             		move.b	#1,$18(a0)
0000955E 117C 0000 0020             		move.b	#0,$20(a0)
00009564 117C 000C 0019             		move.b	#$C,$19(a0)
0000956A 117C 0009 001E             		move.b	#9,$1E(a0)
00009570 117C 0000 001A             		move.b	#0,$1A(a0)
00009576 303C 00A5                  		move.w	#$A5,d0
0000957A 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play explosion sound
00009580                            
00009580                            Obj24_Animate:				; XREF: Obj24_Index
00009580 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009584 6A00                       		bpl.s	Obj24_Display
00009586 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000958C 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009590 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009596 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000959A                            
0000959A                            Obj24_Display:
0000959A 6000 0000                  		bra.w	DisplaySprite
0000959E                            ; ===========================================================================
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            ; Object 27 - explosion	from a destroyed enemy
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            
0000959E                            Obj27:					; XREF: Obj_Index
0000959E 7000                       		moveq	#0,d0
000095A0 1028 0024                  		move.b	$24(a0),d0
000095A4 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000095A8 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000095AC                            ; ===========================================================================
000095AC 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000095AE 0000                       		dc.w Obj27_Main-Obj27_Index
000095B0 0000                       		dc.w Obj27_Animate-Obj27_Index
000095B2                            ; ===========================================================================
000095B2                            
000095B2                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000095B2 5428 0024                  		addq.b	#2,$24(a0)
000095B6 6100 0000                  		bsr.w	SingleObjLoad
000095BA 6600                       		bne.s	Obj27_Main
000095BC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000095C0 3368 0008 0008             		move.w	8(a0),8(a1)
000095C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000095CC 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000095D2                            
000095D2                            Obj27_Main:				; XREF: Obj27_Index
000095D2 5428 0024                  		addq.b	#2,$24(a0)
000095D6 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000095DE 317C 05A0 0002             		move.w	#$5A0,2(a0)
000095E4 117C 0004 0001             		move.b	#4,1(a0)
000095EA 117C 0001 0018             		move.b	#1,$18(a0)
000095F0 117C 0000 0020             		move.b	#0,$20(a0)
000095F6 117C 000C 0019             		move.b	#$C,$19(a0)
000095FC                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000095FC 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009602 117C 0000 001A             		move.b	#0,$1A(a0)
00009608 303C 00C1                  		move.w	#$C1,d0
0000960C 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009612                            
00009612 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009618 1028 0028                  		move.b	$28(a0),d0
0000961C 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009622 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009628                            
00009628                            Obj27_Animate:				; XREF: Obj27_Index
00009628 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000962C 6A00                       		bpl.s	Obj27_Display
0000962E                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000962E 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009634 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009638 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000963E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009642                            
00009642                            Obj27_Display:
00009642 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009648 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
0000964E 6000 0000                  		bra.w	DisplaySprite
00009652                            ; ===========================================================================
00009652                            ; ---------------------------------------------------------------------------
00009652                            Obj27_ExplosionXYSpd:
00009652                            		; dc.w	-$350, -$300	; Left
00009652                            		; dc.w	-$200, -$450	; Near middle (left)
00009652                            		; dc.w	0, -$500	; Middle
00009652                            		; dc.w	$200, -$450	; Near middle (right)
00009652                            		; dc.w	$350, -$300	; Right
00009652                            
00009652 FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009656 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000965A 0000 FA00                  		dc.w	0, -$600	; Middle
0000965E 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009662 0150 FC00                  		dc.w	$150, -$400	; Right
00009666                            
00009666 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009680                            ; ---------------------------------------------------------------------------
00009680                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009680                            ; ---------------------------------------------------------------------------
00009680                            
00009680                            Obj3F:					; XREF: Obj_Index
00009680 7000                       		moveq	#0,d0
00009682 1028 0024                  		move.b	$24(a0),d0
00009686 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000968A 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000968E                            ; ===========================================================================
0000968E 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009690 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009692                            ; ===========================================================================
00009692                            
00009692                            Obj3F_Main:				; XREF: Obj3F_Index
00009692 5428 0024                  		addq.b	#2,$24(a0)
00009696 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000969E 317C 05A0 0002             		move.w	#$5A0,2(a0)
000096A4 117C 0004 0001             		move.b	#4,1(a0)
000096AA 117C 0001 0018             		move.b	#1,$18(a0)
000096B0 117C 0000 0020             		move.b	#0,$20(a0)
000096B6 117C 000C 0019             		move.b	#$C,$19(a0)
000096BC 117C 0007 001E             		move.b	#7,$1E(a0)
000096C2 117C 0000 001A             		move.b	#0,$1A(a0)
000096C8 303C 00C4                  		move.w	#$C4,d0
000096CC 4EF9 0000 158E             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000096D2                            ; ===========================================================================
000096D2                            Ani_obj1E:
000096D2                            	include "_anim\obj1E.asm"
000096D2                            ; ---------------------------------------------------------------------------
000096D2                            ; Animation script - doors (SBZ)
000096D2                            ; ---------------------------------------------------------------------------
000096D2 0000                       		dc.w byte_8E4A-Ani_obj1E
000096D4 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000096EC 00                         		even
000096EC 00                         		even
000096EC                            
000096EC                            ; ---------------------------------------------------------------------------
000096EC                            ; Sprite mappings - Ball Hog enemy (SBZ)
000096EC                            ; ---------------------------------------------------------------------------
000096EC                            Map_obj1E:
000096EC                            	include "_maps\obj1E.asm"
000096EC                            Map_a7ad:
000096EC 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
000096EE 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
000096F0 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
000096F2 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
000096F4 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
000096F6 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
000096F8 02                         Map_a7ad_C: 	dc.b $2
000096F9 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
000096FE FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009703 02                         Map_a7ad_17: 	dc.b $2
00009704 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009709 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
0000970E 02                         Map_a7ad_22: 	dc.b $2
0000970F F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009714 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009719 02                         Map_a7ad_2D: 	dc.b $2
0000971A E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
0000971F F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
00009724 02                         Map_a7ad_38: 	dc.b $2
00009725 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
0000972A E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
0000972F 02                         Map_a7ad_43: 	dc.b $2
00009730 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
00009735 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
0000973A                            	even
0000973A                            	even
0000973A                            
0000973A                            ; ---------------------------------------------------------------------------
0000973A                            ; Sprite mappings - explosion
0000973A                            ; ---------------------------------------------------------------------------
0000973A                            Map_obj24:
0000973A                            	include "_maps\obj24.asm"
0000973A                            ; ---------------------------------------------------------------------------
0000973A                            ; Sprite mappings - explosion
0000973A                            ; ---------------------------------------------------------------------------
0000973A 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000973E 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009742 01                         byte_8EAE:	dc.b 1
00009743 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009748 01                         byte_8EB4:	dc.b 1
00009749 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000974E 01                         byte_8EBA:	dc.b 1
0000974F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009754 01                         byte_8EC0:	dc.b 1
00009755 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000975A                            		even
0000975A                            		even
0000975A                            
0000975A                            ; ---------------------------------------------------------------------------
0000975A                            ; Sprite mappings - explosion
0000975A                            ; ---------------------------------------------------------------------------
0000975A 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000975E 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009762 0000                       		dc.w byte_8EF7-Map_obj27
00009764 01                         byte_8ED0:	dc.b 1
00009765 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000976A 01                         byte_8ED6:	dc.b 1
0000976B F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009770 01                         byte_8EDC:	dc.b 1
00009771 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009776 04                         byte_8EE2:	dc.b 4
00009777 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000977C EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009781 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009786 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000978B 04                         byte_8EF7:	dc.b 4
0000978C EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009791 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009796 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000979B FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000097A0                            		even
000097A0                            ; ---------------------------------------------------------------------------
000097A0                            ; Sprite mappings - explosion from when	a boss is destroyed
000097A0                            ; ---------------------------------------------------------------------------
000097A0 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000097A2 0000                       		dc.w byte_8F16-Map_obj3F
000097A4 0000                       		dc.w byte_8F1C-Map_obj3F
000097A6 FFD6                       		dc.w byte_8EE2-Map_obj3F
000097A8 FFEB                       		dc.w byte_8EF7-Map_obj3F
000097AA 01                         byte_8F16:	dc.b 1
000097AB F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000097B0 01                         byte_8F1C:	dc.b 1
000097B1 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000097B6                            		even
000097B6                            ; ===========================================================================
000097B6                            ; ---------------------------------------------------------------------------
000097B6                            ; Object 28 - animals
000097B6                            ; ---------------------------------------------------------------------------
000097B6                            
000097B6                            Obj28:					; XREF: Obj_Index
000097B6 7000                       		moveq	#0,d0
000097B8 1028 0024                  		move.b	$24(a0),d0
000097BC 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000097C0 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000097C4                            ; ===========================================================================
000097C4 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000097C8 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000097CC 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000097D0 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000097D4 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000097D8 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000097DC 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000097E0 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000097E4 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000097E8 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000097EC 0000                       		dc.w loc_92D6-Obj28_Index
000097EE                            
000097EE 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
000097FE                            
000097FE FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009802 0000 0000                  		dc.l Map_obj28
00009806 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000980A 0000 0000                  		dc.l Map_obj28a		; mappings address
0000980E FE80 FD00                  		dc.w $FE80, $FD00
00009812 0000 0000                  		dc.l Map_obj28
00009816 FEC0 FE80                  		dc.w $FEC0, $FE80
0000981A 0000 0000                  		dc.l Map_obj28a
0000981E FE40 FD00                  		dc.w $FE40, $FD00
00009822 0000 0000                  		dc.l Map_obj28b
00009826 FD00 FC00                  		dc.w $FD00, $FC00
0000982A 0000 0000                  		dc.l Map_obj28a
0000982E FD80 FC80                  		dc.w $FD80, $FC80
00009832 0000 0000                  		dc.l Map_obj28b
00009836                            
00009836 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009846 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009856 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009862                            
00009862 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009876 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000988A 0000 0000                  		dc.l Map_obj28b
0000988E                            
0000988E 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000098A0 0565 05B3                  		dc.w $565, $5B3
000098A4                            ; ===========================================================================
000098A4                            
000098A4                            Obj28_Ending:				; XREF: Obj28_Index
000098A4 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000098A8 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000098AC 7000                       		moveq	#0,d0
000098AE 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000098B2 D040                       		add.w	d0,d0		; multiply d0 by 2
000098B4 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000098B8 0440 0014                  		subi.w	#$14,d0
000098BC 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000098C2 D040                       		add.w	d0,d0
000098C4 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000098CA 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000098CE 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000098D4 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000098DA 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000098E0 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000098E6 117C 000C 0016             		move.b	#$C,$16(a0)
000098EC 117C 0004 0001             		move.b	#4,1(a0)
000098F2 08E8 0000 0001             		bset	#0,1(a0)
000098F8 117C 0006 0018             		move.b	#6,$18(a0)
000098FE 117C 0008 0019             		move.b	#8,$19(a0)
00009904 117C 0007 001E             		move.b	#7,$1E(a0)
0000990A 6000 0000                  		bra.w	DisplaySprite
0000990E                            ; ===========================================================================
0000990E                            
0000990E                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000990E 5428 0024                  		addq.b	#2,$24(a0)
00009912 6100 93EE                  		bsr.w	RandomNumber
00009916 0240 0001                  		andi.w	#1,d0
0000991A 7200                       		moveq	#0,d1
0000991C 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009920 D241                       		add.w	d1,d1
00009922 D240                       		add.w	d0,d1
00009924 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
00009928 1031 1000                  		move.b	(a1,d1.w),d0
0000992C 1140 0030                  		move.b	d0,$30(a0)
00009930 E748                       		lsl.w	#3,d0
00009932 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009936 D2C0                       		adda.w	d0,a1
00009938 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000993C 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009940 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009944 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000994A 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009950 6700                       		beq.s	loc_90C0	; if yes, branch
00009952 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009958                            
00009958                            loc_90C0:
00009958 117C 000C 0016             		move.b	#$C,$16(a0)
0000995E 117C 0004 0001             		move.b	#4,1(a0)
00009964 08E8 0000 0001             		bset	#0,1(a0)
0000996A 117C 0006 0018             		move.b	#6,$18(a0)
00009970 117C 0008 0019             		move.b	#8,$19(a0)
00009976 117C 0007 001E             		move.b	#7,$1E(a0)
0000997C 117C 0002 001A             		move.b	#2,$1A(a0)
00009982 317C FC00 0012             		move.w	#-$400,$12(a0)
00009988 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000998C 6600                       		bne.s	loc_911C
0000998E 6100 0000                  		bsr.w	SingleObjLoad
00009992 6600                       		bne.s	Obj28_Display
00009994 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009998 3368 0008 0008             		move.w	8(a0),8(a1)
0000999E 3368 000C 000C             		move.w	$C(a0),$C(a1)
000099A4 3028 003E                  		move.w	$3E(a0),d0
000099A8 E248                       		lsr.w	#1,d0
000099AA 1340 001A                  		move.b	d0,$1A(a1)
000099AE                            
000099AE                            Obj28_Display:
000099AE 6000 0000                  		bra.w	DisplaySprite
000099B2                            ; ===========================================================================
000099B2                            
000099B2                            loc_911C:
000099B2 117C 0012 0024             		move.b	#$12,$24(a0)
000099B8 4268 0010                  		clr.w	$10(a0)
000099BC 6000 0000                  		bra.w	DisplaySprite
000099C0                            ; ===========================================================================
000099C0                            
000099C0                            loc_912A:				; XREF: Obj28_Index
000099C0 4A28 0001                  		tst.b	1(a0)
000099C4 6A00 0000                  		bpl.w	DeleteObject
000099C8 6100 0000                  		bsr.w	ObjectFall
000099CC 4A68 0012                  		tst.w	$12(a0)
000099D0 6B00                       		bmi.s	loc_9180
000099D2 4EB9 0000 0000             		jsr	ObjHitFloor
000099D8 4A41                       		tst.w	d1
000099DA 6A00                       		bpl.s	loc_9180
000099DC D368 000C                  		add.w	d1,$C(a0)
000099E0 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099E6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099EC 117C 0001 001A             		move.b	#1,$1A(a0)
000099F2 1028 0030                  		move.b	$30(a0),d0
000099F6 D000                       		add.b	d0,d0
000099F8 5800                       		addq.b	#4,d0
000099FA 1140 0024                  		move.b	d0,$24(a0)
000099FE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009A02 6700                       		beq.s	loc_9180
00009A04 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009A0A 6700                       		beq.s	loc_9180
00009A0C 4468 0010                  		neg.w	$10(a0)
00009A10 0868 0000 0001             		bchg	#0,1(a0)
00009A16                            
00009A16                            loc_9180:
00009A16 6000 0000                  		bra.w	DisplaySprite
00009A1A                            ; ===========================================================================
00009A1A                            
00009A1A                            loc_9184:				; XREF: Obj28_Index
00009A1A 6100 0000                  		bsr.w	ObjectFall
00009A1E 117C 0001 001A             		move.b	#1,$1A(a0)
00009A24 4A68 0012                  		tst.w	$12(a0)
00009A28 6B00                       		bmi.s	loc_91AE
00009A2A 117C 0000 001A             		move.b	#0,$1A(a0)
00009A30 4EB9 0000 0000             		jsr	ObjHitFloor
00009A36 4A41                       		tst.w	d1
00009A38 6A00                       		bpl.s	loc_91AE
00009A3A D368 000C                  		add.w	d1,$C(a0)
00009A3E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A44                            
00009A44                            loc_91AE:
00009A44 4A28 0028                  		tst.b	$28(a0)
00009A48 6600                       		bne.s	loc_9224
00009A4A 4A28 0001                  		tst.b	1(a0)
00009A4E 6A00 0000                  		bpl.w	DeleteObject
00009A52 6000 0000                  		bra.w	DisplaySprite
00009A56                            ; ===========================================================================
00009A56                            
00009A56                            loc_91C0:				; XREF: Obj28_Index
00009A56 6100 0000                  		bsr.w	SpeedToPos
00009A5A 0668 0018 0012             		addi.w	#$18,$12(a0)
00009A60 4A68 0012                  		tst.w	$12(a0)
00009A64 6B00                       		bmi.s	loc_91FC
00009A66 4EB9 0000 0000             		jsr	ObjHitFloor
00009A6C 4A41                       		tst.w	d1
00009A6E 6A00                       		bpl.s	loc_91FC
00009A70 D368 000C                  		add.w	d1,$C(a0)
00009A74 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A7A 4A28 0028                  		tst.b	$28(a0)
00009A7E 6700                       		beq.s	loc_91FC
00009A80 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009A86 6700                       		beq.s	loc_91FC
00009A88 4468 0010                  		neg.w	$10(a0)
00009A8C 0868 0000 0001             		bchg	#0,1(a0)
00009A92                            
00009A92                            loc_91FC:
00009A92 5328 001E                  		subq.b	#1,$1E(a0)
00009A96 6A00                       		bpl.s	loc_9212
00009A98 117C 0001 001E             		move.b	#1,$1E(a0)
00009A9E 5228 001A                  		addq.b	#1,$1A(a0)
00009AA2 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AA8                            
00009AA8                            loc_9212:
00009AA8 4A28 0028                  		tst.b	$28(a0)
00009AAC 6600                       		bne.s	loc_9224
00009AAE 4A28 0001                  		tst.b	1(a0)
00009AB2 6A00 0000                  		bpl.w	DeleteObject
00009AB6 6000 0000                  		bra.w	DisplaySprite
00009ABA                            ; ===========================================================================
00009ABA                            
00009ABA                            loc_9224:				; XREF: Obj28_Index
00009ABA 3028 0008                  		move.w	8(a0),d0
00009ABE 9078 D008                  		sub.w	($FFFFD008).w,d0
00009AC2 6500                       		bcs.s	loc_923C
00009AC4 0440 0180                  		subi.w	#$180,d0
00009AC8 6A00                       		bpl.s	loc_923C
00009ACA 4A28 0001                  		tst.b	1(a0)
00009ACE 6A00 0000                  		bpl.w	DeleteObject
00009AD2                            
00009AD2                            loc_923C:
00009AD2 6000 0000                  		bra.w	DisplaySprite
00009AD6                            ; ===========================================================================
00009AD6                            
00009AD6                            loc_9240:				; XREF: Obj28_Index
00009AD6 4A28 0001                  		tst.b	1(a0)
00009ADA 6A00 0000                  		bpl.w	DeleteObject
00009ADE 5368 0036                  		subq.w	#1,$36(a0)
00009AE2 6600 0000                  		bne.w	loc_925C
00009AE6 117C 0002 0024             		move.b	#2,$24(a0)
00009AEC 117C 0003 0018             		move.b	#3,$18(a0)
00009AF2                            
00009AF2                            loc_925C:
00009AF2 6000 0000                  		bra.w	DisplaySprite
00009AF6                            ; ===========================================================================
00009AF6                            
00009AF6                            loc_9260:				; XREF: Obj28_Index
00009AF6 6100 0000                  		bsr.w	sub_9404
00009AFA 6400                       		bcc.s	loc_927C
00009AFC 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009B02 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B08 117C 000E 0024             		move.b	#$E,$24(a0)
00009B0E 6000 FF46                  		bra.w	loc_91C0
00009B12                            ; ===========================================================================
00009B12                            
00009B12                            loc_927C:
00009B12 6000 FFA6                  		bra.w	loc_9224
00009B16                            ; ===========================================================================
00009B16                            
00009B16                            loc_9280:				; XREF: Obj28_Index
00009B16 6100 0000                  		bsr.w	sub_9404
00009B1A 6A00                       		bpl.s	loc_92B6
00009B1C 4268 0010                  		clr.w	$10(a0)
00009B20 4268 0032                  		clr.w	$32(a0)
00009B24 6100 0000                  		bsr.w	SpeedToPos
00009B28 0668 0018 0012             		addi.w	#$18,$12(a0)
00009B2E 6100 0000                  		bsr.w	loc_93C4
00009B32 6100 0000                  		bsr.w	loc_93EC
00009B36 5328 001E                  		subq.b	#1,$1E(a0)
00009B3A 6A00                       		bpl.s	loc_92B6
00009B3C 117C 0001 001E             		move.b	#1,$1E(a0)
00009B42 5228 001A                  		addq.b	#1,$1A(a0)
00009B46 0228 0001 001A             		andi.b	#1,$1A(a0)
00009B4C                            
00009B4C                            loc_92B6:
00009B4C 6000 FF6C                  		bra.w	loc_9224
00009B50                            ; ===========================================================================
00009B50                            
00009B50                            loc_92BA:				; XREF: Obj28_Index
00009B50 6100 0000                  		bsr.w	sub_9404
00009B54 6A00                       		bpl.s	loc_9310
00009B56 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009B5C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B62 117C 0004 0024             		move.b	#4,$24(a0)
00009B68 6000 FEB0                  		bra.w	loc_9184
00009B6C                            ; ===========================================================================
00009B6C                            
00009B6C                            loc_92D6:				; XREF: Obj28_Index
00009B6C 6100 0000                  		bsr.w	ObjectFall
00009B70 117C 0001 001A             		move.b	#1,$1A(a0)
00009B76 4A68 0012                  		tst.w	$12(a0)
00009B7A 6B00                       		bmi.s	loc_9310
00009B7C 117C 0000 001A             		move.b	#0,$1A(a0)
00009B82 4EB9 0000 0000             		jsr	ObjHitFloor
00009B88 4A41                       		tst.w	d1
00009B8A 6A00                       		bpl.s	loc_9310
00009B8C 4628 0029                  		not.b	$29(a0)
00009B90 6600                       		bne.s	loc_9306
00009B92 4468 0010                  		neg.w	$10(a0)
00009B96 0868 0000 0001             		bchg	#0,1(a0)
00009B9C                            
00009B9C                            loc_9306:
00009B9C D368 000C                  		add.w	d1,$C(a0)
00009BA0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BA6                            
00009BA6                            loc_9310:
00009BA6 6000 FF12                  		bra.w	loc_9224
00009BAA                            ; ===========================================================================
00009BAA                            
00009BAA                            loc_9314:				; XREF: Obj28_Index
00009BAA 6100 0000                  		bsr.w	sub_9404
00009BAE 6A00                       		bpl.s	loc_932E
00009BB0 4268 0010                  		clr.w	$10(a0)
00009BB4 4268 0032                  		clr.w	$32(a0)
00009BB8 6100 0000                  		bsr.w	ObjectFall
00009BBC 6100 0000                  		bsr.w	loc_93C4
00009BC0 6100 0000                  		bsr.w	loc_93EC
00009BC4                            
00009BC4                            loc_932E:
00009BC4 6000 FEF4                  		bra.w	loc_9224
00009BC8                            ; ===========================================================================
00009BC8                            
00009BC8                            loc_9332:				; XREF: Obj28_Index
00009BC8 6100 0000                  		bsr.w	sub_9404
00009BCC 6A00                       		bpl.s	loc_936C
00009BCE 6100 0000                  		bsr.w	ObjectFall
00009BD2 117C 0001 001A             		move.b	#1,$1A(a0)
00009BD8 4A68 0012                  		tst.w	$12(a0)
00009BDC 6B00                       		bmi.s	loc_936C
00009BDE 117C 0000 001A             		move.b	#0,$1A(a0)
00009BE4 4EB9 0000 0000             		jsr	ObjHitFloor
00009BEA 4A41                       		tst.w	d1
00009BEC 6A00                       		bpl.s	loc_936C
00009BEE 4468 0010                  		neg.w	$10(a0)
00009BF2 0868 0000 0001             		bchg	#0,1(a0)
00009BF8 D368 000C                  		add.w	d1,$C(a0)
00009BFC 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C02                            
00009C02                            loc_936C:
00009C02 6000 FEB6                  		bra.w	loc_9224
00009C06                            ; ===========================================================================
00009C06                            
00009C06                            loc_9370:				; XREF: Obj28_Index
00009C06 6100 0000                  		bsr.w	sub_9404
00009C0A 6A00                       		bpl.s	loc_93C0
00009C0C 6100 0000                  		bsr.w	SpeedToPos
00009C10 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C16 4A68 0012                  		tst.w	$12(a0)
00009C1A 6B00                       		bmi.s	loc_93AA
00009C1C 4EB9 0000 0000             		jsr	ObjHitFloor
00009C22 4A41                       		tst.w	d1
00009C24 6A00                       		bpl.s	loc_93AA
00009C26 4628 0029                  		not.b	$29(a0)
00009C2A 6600                       		bne.s	loc_93A0
00009C2C 4468 0010                  		neg.w	$10(a0)
00009C30 0868 0000 0001             		bchg	#0,1(a0)
00009C36                            
00009C36                            loc_93A0:
00009C36 D368 000C                  		add.w	d1,$C(a0)
00009C3A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C40                            
00009C40                            loc_93AA:
00009C40 5328 001E                  		subq.b	#1,$1E(a0)
00009C44 6A00                       		bpl.s	loc_93C0
00009C46 117C 0001 001E             		move.b	#1,$1E(a0)
00009C4C 5228 001A                  		addq.b	#1,$1A(a0)
00009C50 0228 0001 001A             		andi.b	#1,$1A(a0)
00009C56                            
00009C56                            loc_93C0:
00009C56 6000 FE62                  		bra.w	loc_9224
00009C5A                            ; ===========================================================================
00009C5A                            
00009C5A                            loc_93C4:
00009C5A 117C 0001 001A             		move.b	#1,$1A(a0)
00009C60 4A68 0012                  		tst.w	$12(a0)
00009C64 6B00                       		bmi.s	locret_93EA
00009C66 117C 0000 001A             		move.b	#0,$1A(a0)
00009C6C 4EB9 0000 0000             		jsr	ObjHitFloor
00009C72 4A41                       		tst.w	d1
00009C74 6A00                       		bpl.s	locret_93EA
00009C76 D368 000C                  		add.w	d1,$C(a0)
00009C7A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C80                            
00009C80                            locret_93EA:
00009C80 4E75                       		rts	
00009C82                            ; ===========================================================================
00009C82                            
00009C82                            loc_93EC:
00009C82 08E8 0000 0001             		bset	#0,1(a0)
00009C88 3028 0008                  		move.w	8(a0),d0
00009C8C 9078 D008                  		sub.w	($FFFFD008).w,d0
00009C90 6400                       		bcc.s	locret_9402
00009C92 08A8 0000 0001             		bclr	#0,1(a0)
00009C98                            
00009C98                            locret_9402:
00009C98 4E75                       		rts	
00009C9A                            
00009C9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C9A                            
00009C9A                            
00009C9A                            sub_9404:
00009C9A 3038 D008                  		move.w	($FFFFD008).w,d0
00009C9E 9068 0008                  		sub.w	8(a0),d0
00009CA2 0440 00B8                  		subi.w	#$B8,d0
00009CA6 4E75                       		rts	
00009CA8                            ; End of function sub_9404
00009CA8                            
00009CA8                            ; ===========================================================================
00009CA8                            ; ---------------------------------------------------------------------------
00009CA8                            ; Object 29 - points that appear when you destroy something
00009CA8                            ; ---------------------------------------------------------------------------
00009CA8                            
00009CA8                            Obj29:					; XREF: Obj_Index
00009CA8 7000                       		moveq	#0,d0
00009CAA 1028 0024                  		move.b	$24(a0),d0
00009CAE 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009CB2 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009CB6 6000 0000                  		bra.w	DisplaySprite
00009CBA                            ; ===========================================================================
00009CBA 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009CBC 0000                       		dc.w Obj29_Slower-Obj29_Index
00009CBE                            ; ===========================================================================
00009CBE                            
00009CBE                            Obj29_Main:				; XREF: Obj29_Index
00009CBE 5428 0024                  		addq.b	#2,$24(a0)
00009CC2 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009CCA 317C 2797 0002             		move.w	#$2797,2(a0)
00009CD0 117C 0004 0001             		move.b	#4,1(a0)
00009CD6 117C 0001 0018             		move.b	#1,$18(a0)
00009CDC 117C 0008 0019             		move.b	#8,$19(a0)
00009CE2 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009CE8                            
00009CE8                            Obj29_Slower:				; XREF: Obj29_Index
00009CE8 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009CEC 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009CF0 6100 0000                  		bsr.w	SpeedToPos
00009CF4 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009CFA 4E75                       		rts	
00009CFC                            ; ===========================================================================
00009CFC                            ; ---------------------------------------------------------------------------
00009CFC                            ; Sprite mappings - animals
00009CFC                            ; ---------------------------------------------------------------------------
00009CFC                            Map_obj28:
00009CFC                            	include "_maps\obj28.asm"
00009CFC                            ; ---------------------------------------------------------------------------
00009CFC                            ; Sprite mappings - animals
00009CFC                            ; ---------------------------------------------------------------------------
00009CFC 0000                       		dc.w byte_9472-Map_obj28
00009CFE 0000                       		dc.w byte_9478-Map_obj28
00009D00 0000                       		dc.w byte_946C-Map_obj28
00009D02 01                         byte_946C:	dc.b 1
00009D03 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D08 01                         byte_9472:	dc.b 1
00009D09 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009D0E 01                         byte_9478:	dc.b 1
00009D0F F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009D14                            		even
00009D14                            		even
00009D14                            
00009D14                            Map_obj28a:
00009D14                            	include "_maps\obj28a.asm"
00009D14                            ; ---------------------------------------------------------------------------
00009D14                            ; Sprite mappings - animals
00009D14                            ; ---------------------------------------------------------------------------
00009D14 0000                       		dc.w byte_948A-Map_obj28a
00009D16 0000                       		dc.w byte_9490-Map_obj28a
00009D18 0000                       		dc.w byte_9484-Map_obj28a
00009D1A 01                         byte_9484:	dc.b 1
00009D1B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D20 01                         byte_948A:	dc.b 1
00009D21 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009D26 01                         byte_9490:	dc.b 1
00009D27 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009D2C                            		even
00009D2C                            		even
00009D2C                            
00009D2C                            Map_obj28b:
00009D2C                            	include "_maps\obj28b.asm"
00009D2C                            ; ---------------------------------------------------------------------------
00009D2C                            ; Sprite mappings - animals
00009D2C                            ; ---------------------------------------------------------------------------
00009D2C 0000                       		dc.w byte_94A2-Map_obj28b
00009D2E 0000                       		dc.w byte_94A8-Map_obj28b
00009D30 0000                       		dc.w byte_949C-Map_obj28b
00009D32 01                         byte_949C:	dc.b 1
00009D33 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D38 01                         byte_94A2:	dc.b 1
00009D39 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009D3E 01                         byte_94A8:	dc.b 1
00009D3F FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009D44                            		even
00009D44                            		even
00009D44                            
00009D44                            ; ---------------------------------------------------------------------------
00009D44                            ; Sprite mappings - points that	appear when you	destroy	something
00009D44                            ; ---------------------------------------------------------------------------
00009D44                            Map_obj29:
00009D44                            	include "_maps\obj29.asm"
00009D44                            ; ---------------------------------------------------------------------------
00009D44                            ; Sprite mappings - points that	appear when you	destroy	something
00009D44                            ; ---------------------------------------------------------------------------
00009D44 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009D48 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009D4C 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009D50 0000                       		dc.w byte_94E5-Map_obj29
00009D52 01                         byte_94BC:	dc.b 1
00009D53 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009D58 01                         byte_94C2:	dc.b 1
00009D59 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009D5E 01                         byte_94C8:	dc.b 1
00009D5F FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009D64 01                         byte_94CE:	dc.b 1
00009D65 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009D6A 01                         byte_94D4:	dc.b 1
00009D6B FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009D70 02                         byte_94DA:	dc.b 2
00009D71 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009D76 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009D7B 02                         byte_94E5:	dc.b 2
00009D7C FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009D81 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009D86                            		even
00009D86                            		even
00009D86                            
00009D86                            ; ===========================================================================
00009D86                            ; ---------------------------------------------------------------------------
00009D86                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009D86                            ; ---------------------------------------------------------------------------
00009D86                            
00009D86                            Obj1F:					; XREF: Obj_Index
00009D86 7000                       		moveq	#0,d0
00009D88 1028 0024                  		move.b	$24(a0),d0
00009D8C 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009D90 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009D94                            ; ===========================================================================
00009D94 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009D96 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009D98 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009D9A 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009D9C 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009D9E                            ; ===========================================================================
00009D9E                            
00009D9E                            Obj1F_Main:				; XREF: Obj1F_Index
00009D9E 117C 0010 0016             		move.b	#$10,$16(a0)
00009DA4 117C 0008 0017             		move.b	#8,$17(a0)
00009DAA 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009DB2 317C 0400 0002             		move.w	#$400,2(a0)
00009DB8 117C 0004 0001             		move.b	#4,1(a0)
00009DBE 117C 0003 0018             		move.b	#3,$18(a0)
00009DC4 117C 0006 0020             		move.b	#6,$20(a0)
00009DCA 117C 0015 0019             		move.b	#$15,$19(a0)
00009DD0 6100 0000                  		bsr.w	ObjectFall
00009DD4 4EB9 0000 0000             		jsr	ObjHitFloor
00009DDA 4A41                       		tst.w	d1
00009DDC 6A00                       		bpl.s	locret_955A
00009DDE D368 000C                  		add.w	d1,$C(a0)
00009DE2 1143 0026                  		move.b	d3,$26(a0)
00009DE6 317C 0000 0012             		move.w	#0,$12(a0)
00009DEC 5428 0024                  		addq.b	#2,$24(a0)
00009DF0                            
00009DF0                            locret_955A:
00009DF0 4E75                       		rts	
00009DF2                            ; ===========================================================================
00009DF2                            
00009DF2                            Obj1F_Action:				; XREF: Obj1F_Index
00009DF2 7000                       		moveq	#0,d0
00009DF4 1028 0025                  		move.b	$25(a0),d0
00009DF8 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009DFC 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009E00 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E06 6100 0000                  		bsr.w	AnimateSprite
00009E0A 6000 0000                  		bra.w	MarkObjGone
00009E0E                            ; ===========================================================================
00009E0E 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009E10 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009E12                            ; ===========================================================================
00009E12                            
00009E12                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009E12 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009E16 6A00                       		bpl.s	locret_95B6
00009E18 4A28 0001                  		tst.b	1(a0)
00009E1C 6A00                       		bpl.s	Obj1F_Move
00009E1E 0868 0001 0032             		bchg	#1,$32(a0)
00009E24 6600                       		bne.s	Obj1F_MakeFire
00009E26                            
00009E26                            Obj1F_Move:
00009E26 5428 0025                  		addq.b	#2,$25(a0)
00009E2A 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009E30 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009E36 6100 0000                  		bsr.w	Obj1F_SetAni
00009E3A 5600                       		addq.b	#3,d0
00009E3C 1140 001C                  		move.b	d0,$1C(a0)
00009E40 0868 0000 0022             		bchg	#0,$22(a0)
00009E46 6600                       		bne.s	locret_95B6
00009E48 4468 0010                  		neg.w	$10(a0)		; change direction
00009E4C                            
00009E4C                            locret_95B6:
00009E4C 4E75                       		rts	
00009E4E                            ; ===========================================================================
00009E4E                            
00009E4E                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009E4E 317C 003B 0030             		move.w	#$3B,$30(a0)
00009E54 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009E5A 6100 0000                  		bsr.w	SingleObjLoad
00009E5E 6600                       		bne.s	Obj1F_MakeFire2
00009E60 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009E64 137C 0006 0024             		move.b	#6,$24(a1)
00009E6A 3368 0008 0008             		move.w	8(a0),8(a1)
00009E70 0469 0010 0008             		subi.w	#$10,8(a1)
00009E76 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009E7C 337C FF00 0010             		move.w	#-$100,$10(a1)
00009E82                            
00009E82                            Obj1F_MakeFire2:
00009E82 6100 0000                  		bsr.w	SingleObjLoad
00009E86 6600                       		bne.s	locret_9618
00009E88 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009E8C 137C 0006 0024             		move.b	#6,$24(a1)
00009E92 3368 0008 0008             		move.w	8(a0),8(a1)
00009E98 0669 0010 0008             		addi.w	#$10,8(a1)
00009E9E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EA4 337C 0100 0010             		move.w	#$100,$10(a1)
00009EAA                            
00009EAA                            locret_9618:
00009EAA 4E75                       		rts	
00009EAC                            ; ===========================================================================
00009EAC                            
00009EAC                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009EAC 5368 0030                  		subq.w	#1,$30(a0)
00009EB0 6B00                       		bmi.s	loc_966E
00009EB2 6100 0000                  		bsr.w	SpeedToPos
00009EB6 0868 0000 0032             		bchg	#0,$32(a0)
00009EBC 6600                       		bne.s	loc_9654
00009EBE 3628 0008                  		move.w	8(a0),d3
00009EC2 0643 0010                  		addi.w	#$10,d3
00009EC6 0828 0000 0022             		btst	#0,$22(a0)
00009ECC 6700                       		beq.s	loc_9640
00009ECE 0443 0020                  		subi.w	#$20,d3
00009ED2                            
00009ED2                            loc_9640:
00009ED2 4EB9 0000 0000             		jsr	ObjHitFloor2
00009ED8 0C41 FFF8                  		cmpi.w	#-8,d1
00009EDC 6D00                       		blt.s	loc_966E
00009EDE 0C41 000C                  		cmpi.w	#$C,d1
00009EE2 6C00                       		bge.s	loc_966E
00009EE4 4E75                       		rts	
00009EE6                            ; ===========================================================================
00009EE6                            
00009EE6                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009EE6 4EB9 0000 0000             		jsr	ObjHitFloor
00009EEC D368 000C                  		add.w	d1,$C(a0)
00009EF0 1143 0026                  		move.b	d3,$26(a0)
00009EF4 6100 0000                  		bsr.w	Obj1F_SetAni
00009EF8 5600                       		addq.b	#3,d0
00009EFA 1140 001C                  		move.b	d0,$1C(a0)
00009EFE 4E75                       		rts	
00009F00                            ; ===========================================================================
00009F00                            
00009F00                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009F00 5528 0025                  		subq.b	#2,$25(a0)
00009F04 317C 003B 0030             		move.w	#59,$30(a0)
00009F0A 317C 0000 0010             		move.w	#0,$10(a0)
00009F10 6100 0000                  		bsr.w	Obj1F_SetAni
00009F14 1140 001C                  		move.b	d0,$1C(a0)
00009F18 4E75                       		rts	
00009F1A                            ; ---------------------------------------------------------------------------
00009F1A                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009F1A                            ; ---------------------------------------------------------------------------
00009F1A                            
00009F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F1A                            
00009F1A                            
00009F1A                            Obj1F_SetAni:				; XREF: loc_966E
00009F1A 7000                       		moveq	#0,d0
00009F1C 1628 0026                  		move.b	$26(a0),d3
00009F20 6B00                       		bmi.s	loc_96A4
00009F22 0C03 0006                  		cmpi.b	#6,d3
00009F26 6500                       		bcs.s	locret_96A2
00009F28 7001                       		moveq	#1,d0
00009F2A 0828 0000 0022             		btst	#0,$22(a0)
00009F30 6600                       		bne.s	locret_96A2
00009F32 7002                       		moveq	#2,d0
00009F34                            
00009F34                            locret_96A2:
00009F34 4E75                       		rts	
00009F36                            ; ===========================================================================
00009F36                            
00009F36                            loc_96A4:				; XREF: Obj1F_SetAni
00009F36 0C03 00FA                  		cmpi.b	#-6,d3
00009F3A 6200                       		bhi.s	locret_96B6
00009F3C 7002                       		moveq	#2,d0
00009F3E 0828 0000 0022             		btst	#0,$22(a0)
00009F44 6600                       		bne.s	locret_96B6
00009F46 7001                       		moveq	#1,d0
00009F48                            
00009F48                            locret_96B6:
00009F48 4E75                       		rts	
00009F4A                            ; End of function Obj1F_SetAni
00009F4A                            
00009F4A                            ; ===========================================================================
00009F4A                            
00009F4A                            Obj1F_Delete:				; XREF: Obj1F_Index
00009F4A 6100 0000                  		bsr.w	DeleteObject
00009F4E 4E75                       		rts	
00009F50                            ; ===========================================================================
00009F50                            ; ---------------------------------------------------------------------------
00009F50                            ; Sub-object - missile that the	Crabmeat throws
00009F50                            ; ---------------------------------------------------------------------------
00009F50                            
00009F50                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009F50 5428 0024                  		addq.b	#2,$24(a0)
00009F54 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009F5C 317C 0400 0002             		move.w	#$400,2(a0)
00009F62 117C 0004 0001             		move.b	#4,1(a0)
00009F68 117C 0003 0018             		move.b	#3,$18(a0)
00009F6E 117C 0087 0020             		move.b	#$87,$20(a0)
00009F74 117C 0008 0019             		move.b	#8,$19(a0)
00009F7A 317C FC00 0012             		move.w	#-$400,$12(a0)
00009F80 117C 0007 001C             		move.b	#7,$1C(a0)
00009F86                            
00009F86                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009F86 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009F8C 6100 0000                  		bsr.w	AnimateSprite
00009F90 6100 0000                  		bsr.w	ObjectFall
00009F94 6100 0000                  		bsr.w	DisplaySprite
00009F98 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009F9C 0640 00E0                  		addi.w	#$E0,d0
00009FA0 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009FA4 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009FA6 4E75                       		rts	
00009FA8                            ; ===========================================================================
00009FA8                            
00009FA8                            Obj1F_Delete2:
00009FA8 6000 0000                  		bra.w	DeleteObject
00009FAC                            ; ===========================================================================
00009FAC                            Ani_obj1F:
00009FAC                            	include "_anim\obj1F.asm"
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            ; Animation script - Crabmeat enemy
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009FB2 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009FB8 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009FBC 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009FC0 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009FC4 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009FC8 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009FCE 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009FD4 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009FDA 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009FDE 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009FE2                            		even
00009FE2                            		even
00009FE2                            
00009FE2                            ; ---------------------------------------------------------------------------
00009FE2                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009FE2                            ; ---------------------------------------------------------------------------
00009FE2                            Map_obj1F:
00009FE2                            	include "_maps\obj1F.asm"
00009FE2                            Map_1514:
00009FE2 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009FE4 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009FE6 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009FE8 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009FEA 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009FEC 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009FEE 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009FF0 03                         Map_1514_E: 	dc.b $3
00009FF1 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009FF6 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009FFB F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A000 03                         Map_1514_1E: 	dc.b $3
0000A001 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A006 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A00B F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A010 03                         Map_1514_2E: 	dc.b $3
0000A011 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A016 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A01B F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A020 03                         Map_1514_3E: 	dc.b $3
0000A021 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A026 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A02B F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A030 03                         Map_1514_4E: 	dc.b $3
0000A031 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A036 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A03B F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A040 01                         Map_1514_5E: 	dc.b $1
0000A041 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A046 01                         Map_1514_64: 	dc.b $1
0000A047 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A04C                            	even
0000A04C                            	even
0000A04C                            
0000A04C                            ; ===========================================================================
0000A04C                            ; ---------------------------------------------------------------------------
0000A04C                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A04C                            ; ---------------------------------------------------------------------------
0000A04C                            
0000A04C                            Obj22:					; XREF: Obj_Index
0000A04C 7000                       		moveq	#0,d0
0000A04E 1028 0024                  		move.b	$24(a0),d0
0000A052 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A056 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A05A                            ; ===========================================================================
0000A05A 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A05C 0000                       		dc.w Obj22_Action-Obj22_Index
0000A05E 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A060                            ; ===========================================================================
0000A060                            
0000A060                            Obj22_Main:				; XREF: Obj22_Index
0000A060 5428 0024                  		addq.b	#2,$24(a0)
0000A064 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A06C 317C 0444 0002             		move.w	#$444,2(a0)
0000A072 117C 0004 0001             		move.b	#4,1(a0)
0000A078 117C 0003 0018             		move.b	#3,$18(a0)
0000A07E 117C 0008 0020             		move.b	#8,$20(a0)
0000A084 117C 0018 0019             		move.b	#$18,$19(a0)
0000A08A                            
0000A08A                            Obj22_Action:				; XREF: Obj22_Index
0000A08A 7000                       		moveq	#0,d0
0000A08C 1028 0025                  		move.b	$25(a0),d0
0000A090 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A094 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A098 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A09E 6100 0000                  		bsr.w	AnimateSprite
0000A0A2 6000 0000                  		bra.w	MarkObjGone
0000A0A6                            ; ===========================================================================
0000A0A6 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A0A8 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A0AA                            ; ===========================================================================
0000A0AA                            
0000A0AA                            Obj22_Move:				; XREF: Obj22_Index2
0000A0AA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A0AE 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A0B0 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A0B6 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A0B8 5428 0025                  		addq.b	#2,$25(a0)
0000A0BC 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A0C2 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A0C8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A0CE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A0D4 6600                       		bne.s	locret_986C	; if not, branch
0000A0D6 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A0DA                            
0000A0DA                            locret_986C:
0000A0DA 4E75                       		rts	
0000A0DC                            ; ===========================================================================
0000A0DC                            
0000A0DC                            Obj22_Fire:				; XREF: Obj22_Move
0000A0DC 6100 0000                  		bsr.w	SingleObjLoad
0000A0E0 6600                       		bne.s	locret_98D0
0000A0E2 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A0E6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A0EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0F2 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A0F8 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A0FE 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A104 303C 0018                  		move.w	#$18,d0
0000A108 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A10E 6600                       		bne.s	loc_98AA	; if not, branch
0000A110 4440                       		neg.w	d0
0000A112 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A116                            
0000A116                            loc_98AA:
0000A116 D169 0008                  		add.w	d0,8(a1)
0000A11A 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A120 337C 000E 0032             		move.w	#$E,$32(a1)
0000A126 2348 003C                  		move.l	a0,$3C(a1)
0000A12A 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A130 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A136 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A13C                            
0000A13C                            locret_98D0:
0000A13C 4E75                       		rts	
0000A13E                            ; ===========================================================================
0000A13E                            
0000A13E                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A13E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A142 6B00                       		bmi.s	Obj22_ChgDir
0000A144 6100 0000                  		bsr.w	SpeedToPos
0000A148 4A28 0034                  		tst.b	$34(a0)
0000A14C 6600                       		bne.s	locret_992A
0000A14E 3038 D008                  		move.w	($FFFFD008).w,d0
0000A152 9068 0008                  		sub.w	8(a0),d0
0000A156 6A00                       		bpl.s	Obj22_SetNrSonic
0000A158 4440                       		neg.w	d0
0000A15A                            
0000A15A                            Obj22_SetNrSonic:
0000A15A 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A15E 6400                       		bcc.s	locret_992A	; if not, branch
0000A160 4A28 0001                  		tst.b	1(a0)
0000A164 6A00                       		bpl.s	locret_992A
0000A166 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A16C 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A172 6000                       		bra.s	Obj22_Stop
0000A174                            ; ===========================================================================
0000A174                            
0000A174                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A174 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A17A 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A180 317C 003B 0032             		move.w	#59,$32(a0)
0000A186                            
0000A186                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A186 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A18A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A190 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A196                            
0000A196                            locret_992A:
0000A196 4E75                       		rts	
0000A198                            ; ===========================================================================
0000A198                            
0000A198                            Obj22_Delete:				; XREF: Obj22_Index
0000A198 6100 0000                  		bsr.w	DeleteObject
0000A19C 4E75                       		rts	
0000A19E                            ; ===========================================================================
0000A19E                            ; ---------------------------------------------------------------------------
0000A19E                            ; Object 23 - missile that Buzz	Bomber throws
0000A19E                            ; ---------------------------------------------------------------------------
0000A19E                            
0000A19E                            Obj23:					; XREF: Obj_Index
0000A19E 7000                       		moveq	#0,d0
0000A1A0 1028 0024                  		move.b	$24(a0),d0
0000A1A4 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A1A8 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A1AC                            ; ===========================================================================
0000A1AC 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A1AE 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A1B0 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A1B2 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A1B4 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A1B6                            ; ===========================================================================
0000A1B6                            
0000A1B6                            Obj23_Main:				; XREF: Obj23_Index
0000A1B6 5368 0032                  		subq.w	#1,$32(a0)
0000A1BA 6A00                       		bpl.s	Obj23_ChkCancel
0000A1BC 5428 0024                  		addq.b	#2,$24(a0)
0000A1C0 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A1C8 317C 2444 0002             		move.w	#$2444,2(a0)
0000A1CE 117C 0004 0001             		move.b	#4,1(a0)
0000A1D4 117C 0003 0018             		move.b	#3,$18(a0)
0000A1DA 117C 0008 0019             		move.b	#8,$19(a0)
0000A1E0 0228 0003 0022             		andi.b	#3,$22(a0)
0000A1E6 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A1EA 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A1EC 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A1F2 117C 0087 0020             		move.b	#$87,$20(a0)
0000A1F8 117C 0001 001C             		move.b	#1,$1C(a0)
0000A1FE 6000                       		bra.s	Obj23_Animate2
0000A200                            ; ===========================================================================
0000A200                            
0000A200                            Obj23_Animate:				; XREF: Obj23_Index
0000A200 6100                       		bsr.s	Obj23_ChkCancel
0000A202 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A208 6100 0000                  		bsr.w	AnimateSprite
0000A20C 6000 0000                  		bra.w	DisplaySprite
0000A210                            ; ---------------------------------------------------------------------------
0000A210                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A210                            ; destroyed, and if it has, then cancel	the missile
0000A210                            ; ---------------------------------------------------------------------------
0000A210                            
0000A210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A210                            
0000A210                            
0000A210                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A210 2268 003C                  		movea.l	$3C(a0),a1
0000A214 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A218 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A21A 4E75                       		rts	
0000A21C                            ; End of function Obj23_ChkCancel
0000A21C                            
0000A21C                            ; ===========================================================================
0000A21C                            
0000A21C                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A21C 0828 0007 0022             		btst	#7,$22(a0)
0000A222 6600                       		bne.s	Obj23_Explode
0000A224 117C 0087 0020             		move.b	#$87,$20(a0)
0000A22A 117C 0001 001C             		move.b	#1,$1C(a0)
0000A230 6100 0000                  		bsr.w	SpeedToPos
0000A234 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A23A 6100 0000                  		bsr.w	AnimateSprite
0000A23E 6100 0000                  		bsr.w	DisplaySprite
0000A242 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A246 0640 00E0                  		addi.w	#$E0,d0
0000A24A B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A24E 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A250 4E75                       		rts	
0000A252                            ; ===========================================================================
0000A252                            
0000A252                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A252 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A256 117C 0000 0024             		move.b	#0,$24(a0)
0000A25C 6000 F2D0                  		bra.w	Obj24
0000A260                            ; ===========================================================================
0000A260                            
0000A260                            Obj23_Delete:				; XREF: Obj23_Index
0000A260 6100 0000                  		bsr.w	DeleteObject
0000A264 4E75                       		rts	
0000A266                            ; ===========================================================================
0000A266                            
0000A266                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A266 4A28 0001                  		tst.b	1(a0)
0000A26A 6AF4                       		bpl.s	Obj23_Delete
0000A26C 6100 0000                  		bsr.w	SpeedToPos
0000A270                            
0000A270                            Obj23_Animate2:				; XREF: Obj23_Main
0000A270 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A276 6100 0000                  		bsr.w	AnimateSprite
0000A27A 6100 0000                  		bsr.w	DisplaySprite
0000A27E 4E75                       		rts	
0000A280                            ; ===========================================================================
0000A280                            Ani_obj22:
0000A280                            	include "_anim\obj22.asm"
0000A280                            ; ---------------------------------------------------------------------------
0000A280                            ; Animation script - Buzz Bomber enemy
0000A280                            ; ---------------------------------------------------------------------------
0000A280 0000                       		dc.w byte_9A1E-Ani_obj22
0000A282 0000                       		dc.w byte_9A22-Ani_obj22
0000A284 0000                       		dc.w byte_9A26-Ani_obj22
0000A286 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A28A 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A28E 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A292                            		even
0000A292                            		even
0000A292                            
0000A292                            Ani_obj23:
0000A292                            	include "_anim\obj23.asm"
0000A292                            ; ---------------------------------------------------------------------------
0000A292                            ; Animation script - missile that Buzz Bomber throws
0000A292                            ; ---------------------------------------------------------------------------
0000A292 0000                       		dc.w byte_9A2E-Ani_obj23
0000A294 0000                       		dc.w byte_9A32-Ani_obj23
0000A296 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A29A 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A29E                            		even
0000A29E                            		even
0000A29E                            
0000A29E                            ; ---------------------------------------------------------------------------
0000A29E                            ; Sprite mappings - Buzz Bomber	enemy
0000A29E                            ; ---------------------------------------------------------------------------
0000A29E                            Map_obj22:
0000A29E                            	include "_maps\obj22.asm"
0000A29E                            Map_e97a:
0000A29E 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A2A0 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A2A2 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A2A4 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A2A6 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A2A8 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A2AA 06                         Map_e97a_C: 	dc.b $6
0000A2AB F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2B0 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A2B5 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A2BA 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A2BF F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A2C4 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A2C9 06                         Map_e97a_2B: 	dc.b $6
0000A2CA F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2CF F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A2D4 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A2D9 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A2DE F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A2E3 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A2E8 07                         Map_e97a_4A: 	dc.b $7
0000A2E9 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A2EE F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2F3 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A2F8 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A2FD 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A302 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A307 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A30C 07                         Map_e97a_6E: 	dc.b $7
0000A30D 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A312 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A317 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A31C 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A321 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A326 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A32B F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A330 06                         Map_e97a_92: 	dc.b $6
0000A331 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A336 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A33B 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A340 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A345 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A34A F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A34F 04                         Map_e97a_B1: 	dc.b $4
0000A350 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A355 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A35A 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A35F 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A364                            	even
0000A364                            	even
0000A364                            
0000A364                            ; ---------------------------------------------------------------------------
0000A364                            ; Sprite mappings - missile that Buzz Bomber throws
0000A364                            ; ---------------------------------------------------------------------------
0000A364                            Map_obj23:
0000A364                            	include "_maps\obj23.asm"
0000A364                            ; ---------------------------------------------------------------------------
0000A364                            ; Sprite mappings - missile that Buzz Bomber throws
0000A364                            ; ---------------------------------------------------------------------------
0000A364 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A368 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A36C 01                         byte_9B0E:	dc.b 1
0000A36D F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A372 01                         byte_9B14:	dc.b 1
0000A373 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A378 01                         byte_9B1A:	dc.b 1
0000A379 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A37E 01                         byte_9B20:	dc.b 1
0000A37F F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A384                            		even
0000A384                            		even
0000A384                            
0000A384                            ; ===========================================================================
0000A384                            ; ---------------------------------------------------------------------------
0000A384                            ; Object 25 - rings
0000A384                            ; ---------------------------------------------------------------------------
0000A384                            
0000A384                            Obj25:					; XREF: Obj_Index
0000A384 7000                       		moveq	#0,d0
0000A386 1028 0024                  		move.b	$24(a0),d0
0000A38A 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A38E 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A392                            ; ===========================================================================
0000A392 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A394 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A396 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A398 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A39A 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A39C                            ; ---------------------------------------------------------------------------
0000A39C                            ; Distances between rings (format: horizontal, vertical)
0000A39C                            ; ---------------------------------------------------------------------------
0000A39C 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A39E 1800                       		dc.b $18, 0		; horizontal normal
0000A3A0 2000                       		dc.b $20, 0		; horizontal wide
0000A3A2 0010                       		dc.b 0,	$10		; vertical tight
0000A3A4 0018                       		dc.b 0,	$18		; vertical normal
0000A3A6 0020                       		dc.b 0,	$20		; vertical wide
0000A3A8 1010                       		dc.b $10, $10		; diagonal
0000A3AA 1818                       		dc.b $18, $18
0000A3AC 2020                       		dc.b $20, $20
0000A3AE F010                       		dc.b $F0, $10
0000A3B0 E818                       		dc.b $E8, $18
0000A3B2 E020                       		dc.b $E0, $20
0000A3B4 1008                       		dc.b $10, 8
0000A3B6 1810                       		dc.b $18, $10
0000A3B8 F008                       		dc.b $F0, 8
0000A3BA E810                       		dc.b $E8, $10
0000A3BC                            ; ===========================================================================
0000A3BC                            
0000A3BC                            Obj25_Main:				; XREF: Obj25_Index
0000A3BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A3C0 7000                       		moveq	#0,d0
0000A3C2 1028 0023                  		move.b	$23(a0),d0
0000A3C6 45F2 0002                  		lea	2(a2,d0.w),a2
0000A3CA 1812                       		move.b	(a2),d4
0000A3CC 1228 0028                  		move.b	$28(a0),d1
0000A3D0 1001                       		move.b	d1,d0
0000A3D2 0241 0007                  		andi.w	#7,d1
0000A3D6 0C41 0007                  		cmpi.w	#7,d1
0000A3DA 6600                       		bne.s	loc_9B80
0000A3DC 7206                       		moveq	#6,d1
0000A3DE                            
0000A3DE                            loc_9B80:
0000A3DE 4841                       		swap	d1
0000A3E0 323C 0000                  		move.w	#0,d1
0000A3E4 E808                       		lsr.b	#4,d0
0000A3E6 D040                       		add.w	d0,d0
0000A3E8 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A3EC 4885                       		ext.w	d5
0000A3EE 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A3F2 4886                       		ext.w	d6
0000A3F4 2248                       		movea.l	a0,a1
0000A3F6 3428 0008                  		move.w	8(a0),d2
0000A3FA 3628 000C                  		move.w	$C(a0),d3
0000A3FE E20C                       		lsr.b	#1,d4
0000A400 6500                       		bcs.s	loc_9C02
0000A402 0892 0007                  		bclr	#7,(a2)
0000A406 6000                       		bra.s	loc_9BBA
0000A408                            ; ===========================================================================
0000A408                            
0000A408                            Obj25_MakeRings:
0000A408 4841                       		swap	d1
0000A40A E20C                       		lsr.b	#1,d4
0000A40C 6500                       		bcs.s	loc_9C02
0000A40E 0892 0007                  		bclr	#7,(a2)
0000A412 6100 0000                  		bsr.w	SingleObjLoad
0000A416 6600                       		bne.s	loc_9C0E
0000A418                            
0000A418                            loc_9BBA:				; XREF: Obj25_Main
0000A418 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A41C 5429 0024                  		addq.b	#2,$24(a1)
0000A420 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A424 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A42A 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A42E 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A436 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A43C 137C 0004 0001             		move.b	#4,1(a1)
0000A442 137C 0002 0018             		move.b	#2,$18(a1)
0000A448 137C 0047 0020             		move.b	#$47,$20(a1)
0000A44E 137C 0008 0019             		move.b	#8,$19(a1)
0000A454 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A45A 1341 0034                  		move.b	d1,$34(a1)
0000A45E                            
0000A45E                            loc_9C02:
0000A45E 5241                       		addq.w	#1,d1
0000A460 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A462 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A464 4841                       		swap	d1
0000A466 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A46A                            
0000A46A                            loc_9C0E:
0000A46A 0812 0000                  		btst	#0,(a2)
0000A46E 6600 0000                  		bne.w	DeleteObject
0000A472                            
0000A472                            Obj25_Animate:				; XREF: Obj25_Index
0000A472 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A478 6100 0000                  		bsr.w	DisplaySprite
0000A47C 3028 0032                  		move.w	$32(a0),d0
0000A480 0240 FF80                  		andi.w	#$FF80,d0
0000A484 3238 F700                  		move.w	($FFFFF700).w,d1
0000A488 0441 0080                  		subi.w	#$80,d1
0000A48C 0241 FF80                  		andi.w	#$FF80,d1
0000A490 9041                       		sub.w	d1,d0
0000A492 0C40 0280                  		cmpi.w	#$280,d0
0000A496 6200                       		bhi.s	Obj25_Delete
0000A498 4E75                       		rts	
0000A49A                            ; ===========================================================================
0000A49A                            
0000A49A                            Obj25_Collect:				; XREF: Obj25_Index
0000A49A 5428 0024                  		addq.b	#2,$24(a0)
0000A49E 117C 0000 0020             		move.b	#0,$20(a0)
0000A4A4 117C 0001 0018             		move.b	#1,$18(a0)
0000A4AA 6100 0000                  		bsr.w	CollectRing
0000A4AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A4B2 7000                       		moveq	#0,d0
0000A4B4 1028 0023                  		move.b	$23(a0),d0
0000A4B8 1228 0034                  		move.b	$34(a0),d1
0000A4BC 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A4C0                            
0000A4C0                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A4C0 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A4C6 6100 0000                  		bsr.w	AnimateSprite
0000A4CA 6000 0000                  		bra.w	DisplaySprite
0000A4CE                            ; ===========================================================================
0000A4CE                            
0000A4CE                            Obj25_Delete:				; XREF: Obj25_Index
0000A4CE 6000 0000                  		bra.w	DeleteObject
0000A4D2                            
0000A4D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4D2                            
0000A4D2                            
0000A4D2                            CollectRing:				; XREF: Obj25_Collect
0000A4D2 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A4D6 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A4DC 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A4E0 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A4E6 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A4E8 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A4EE 6700                       		beq.s	loc_9CA4
0000A4F0 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A4F6 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A4F8 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A4FE 6600                       		bne.s	Obj25_PlaySnd
0000A500                            
0000A500                            loc_9CA4:
0000A500 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A504 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A508 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A50C                            
0000A50C                            Obj25_PlaySnd:
0000A50C 4EF9 0000 158E             		jmp	(PlaySound_Special).l
0000A512                            ; End of function CollectRing
0000A512                            
0000A512                            ; ===========================================================================
0000A512                            ; ---------------------------------------------------------------------------
0000A512                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A512                            ; ---------------------------------------------------------------------------
0000A512                            
0000A512                            Obj37:					; XREF: Obj_Index
0000A512 7000                       		moveq	#0,d0
0000A514 1028 0024                  		move.b	$24(a0),d0
0000A518 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A51C 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A520                            ; ===========================================================================
0000A520 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A522 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A524 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A526 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A528 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A52A                            ; ===========================================================================
0000A52A                            
0000A52A                            Obj37_CountRings:			; XREF: Obj37_Index
0000A52A 2248                       		movea.l	a0,a1
0000A52C 7A00                       		moveq	#0,d5
0000A52E 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A532 7020                       		moveq	#32,d0
0000A534 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A536 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A538 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A53A                            
0000A53A                            loc_9CDE:
0000A53A 5345                       		subq.w	#1,d5
0000A53C 383C 0288                  		move.w	#$288,d4
0000A540 6000                       		bra.s	Obj37_MakeRings
0000A542                            ; ===========================================================================
0000A542                            
0000A542                            Obj37_Loop:
0000A542 6100 0000                  		bsr.w	SingleObjLoad
0000A546 6600 0000                  		bne.w	Obj37_ResetCounter
0000A54A                            
0000A54A                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A54A 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A54E 5429 0024                  		addq.b	#2,$24(a1)
0000A552 137C 0008 0016             		move.b	#8,$16(a1)
0000A558 137C 0008 0017             		move.b	#8,$17(a1)
0000A55E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A564 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A56A 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A572 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A578 137C 0004 0001             		move.b	#4,1(a1)
0000A57E 137C 0003 0018             		move.b	#3,$18(a1)
0000A584 137C 0047 0020             		move.b	#$47,$20(a1)
0000A58A 137C 0008 0019             		move.b	#8,$19(a1)
0000A590 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A596 4A44                       		tst.w	d4
0000A598 6B00                       		bmi.s	loc_9D62
0000A59A 3004                       		move.w	d4,d0
0000A59C 6100 878A                  		bsr.w	CalcSine
0000A5A0 3404                       		move.w	d4,d2
0000A5A2 E04A                       		lsr.w	#8,d2
0000A5A4 E560                       		asl.w	d2,d0
0000A5A6 E561                       		asl.w	d2,d1
0000A5A8 3400                       		move.w	d0,d2
0000A5AA 3601                       		move.w	d1,d3
0000A5AC 0604 0010                  		addi.b	#$10,d4
0000A5B0 6400                       		bcc.s	loc_9D62
0000A5B2 0444 0080                  		subi.w	#$80,d4
0000A5B6 6400                       		bcc.s	loc_9D62
0000A5B8 383C 0288                  		move.w	#$288,d4
0000A5BC                            
0000A5BC                            loc_9D62:
0000A5BC 3342 0010                  		move.w	d2,$10(a1)
0000A5C0 3343 0012                  		move.w	d3,$12(a1)
0000A5C4 4442                       		neg.w	d2
0000A5C6 4444                       		neg.w	d4
0000A5C8 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A5CC                            
0000A5CC                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A5CC 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A5D2 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A5D8 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A5DE 303C 00C6                  		move.w	#$C6,d0
0000A5E2 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A5E8                            
0000A5E8                            Obj37_Bounce:				; XREF: Obj37_Index
0000A5E8 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A5EE 6100 0000                  		bsr.w	SpeedToPos
0000A5F2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A5F8 6B00                       		bmi.s	Obj37_ChkDel
0000A5FA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A5FE D007                       		add.b	d7,d0
0000A600 0200 0003                  		andi.b	#3,d0
0000A604 6600                       		bne.s	Obj37_ChkDel
0000A606 4EB9 0000 0000             		jsr	ObjHitFloor
0000A60C 4A41                       		tst.w	d1
0000A60E 6A00                       		bpl.s	Obj37_ChkDel
0000A610 D368 000C                  		add.w	d1,$C(a0)
0000A614 3028 0012                  		move.w	$12(a0),d0
0000A618 E440                       		asr.w	#2,d0
0000A61A 9168 0012                  		sub.w	d0,$12(a0)
0000A61E 4468 0012                  		neg.w	$12(a0)
0000A622                            
0000A622                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A622 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A626 6700                       		beq.s	Obj37_Delete
0000A628 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A62C 0640 00E0                  		addi.w	#$E0,d0
0000A630 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A634 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A636 6000 0000                  		bra.w	DisplaySprite
0000A63A                            ; ===========================================================================
0000A63A                            
0000A63A                            Obj37_Collect:				; XREF: Obj37_Index
0000A63A 5428 0024                  		addq.b	#2,$24(a0)
0000A63E 117C 0000 0020             		move.b	#0,$20(a0)
0000A644 117C 0001 0018             		move.b	#1,$18(a0)
0000A64A 6100 FE86                  		bsr.w	CollectRing
0000A64E                            
0000A64E                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A64E 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A654 6100 0000                  		bsr.w	AnimateSprite
0000A658 6000 0000                  		bra.w	DisplaySprite
0000A65C                            ; ===========================================================================
0000A65C                            
0000A65C                            Obj37_Delete:				; XREF: Obj37_Index
0000A65C 6000 0000                  		bra.w	DeleteObject
0000A660                            ; ===========================================================================
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            ; Object 4B - giant ring for entry to special stage
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            
0000A660                            Obj4B:					; XREF: Obj_Index
0000A660 7000                       		moveq	#0,d0
0000A662 1028 0024                  		move.b	$24(a0),d0
0000A666 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A66A 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A66E                            ; ===========================================================================
0000A66E 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A670 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A672 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A674 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A676                            ; ===========================================================================
0000A676                            
0000A676                            Obj4B_Main:				; XREF: Obj4B_Index
0000A676 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A67E 317C 2400 0002             		move.w	#$2400,2(a0)
0000A684 0028 0004 0001             		ori.b	#4,1(a0)
0000A68A 117C 0040 0019             		move.b	#$40,$19(a0)
0000A690 4A28 0001                  		tst.b	1(a0)
0000A694 6A00                       		bpl.s	Obj4B_Animate
0000A696 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A69C 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A6A0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A6A6 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A6A8 4E75                       		rts	
0000A6AA                            ; ===========================================================================
0000A6AA                            
0000A6AA                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A6AA 5428 0024                  		addq.b	#2,$24(a0)
0000A6AE 117C 0002 0018             		move.b	#2,$18(a0)
0000A6B4 117C 0052 0020             		move.b	#$52,$20(a0)
0000A6BA 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A6C0                            
0000A6C0                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A6C0 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A6C6 3028 0008                  		move.w	8(a0),d0
0000A6CA 0240 FF80                  		andi.w	#$FF80,d0
0000A6CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6D2 0441 0080                  		subi.w	#$80,d1
0000A6D6 0241 FF80                  		andi.w	#$FF80,d1
0000A6DA 9041                       		sub.w	d1,d0
0000A6DC 0C40 0280                  		cmpi.w	#$280,d0
0000A6E0 6200 0000                  		bhi.w	DeleteObject
0000A6E4 6000 0000                  		bra.w	DisplaySprite
0000A6E8                            ; ===========================================================================
0000A6E8                            
0000A6E8                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A6E8 5528 0024                  		subq.b	#2,$24(a0)
0000A6EC 117C 0000 0020             		move.b	#0,$20(a0)
0000A6F2 6100 0000                  		bsr.w	SingleObjLoad
0000A6F6 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A6FA 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A6FE 3368 0008 0008             		move.w	8(a0),8(a1)
0000A704 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A70A 2348 003C                  		move.l	a0,$3C(a1)
0000A70E 3038 D008                  		move.w	($FFFFD008).w,d0
0000A712 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A716 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A718 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A71E                            
0000A71E                            Obj4B_PlaySnd:
0000A71E 303C 00C3                  		move.w	#$C3,d0
0000A722 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A728 6096                       		bra.s	Obj4B_Animate
0000A72A                            ; ===========================================================================
0000A72A                            
0000A72A                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A72A 6000 0000                  		bra.w	DeleteObject
0000A72E                            ; ===========================================================================
0000A72E                            ; ---------------------------------------------------------------------------
0000A72E                            ; Object 7C - flash effect when	you collect the	giant ring
0000A72E                            ; ---------------------------------------------------------------------------
0000A72E                            
0000A72E                            Obj7C:					; XREF: Obj_Index
0000A72E 7000                       		moveq	#0,d0
0000A730 1028 0024                  		move.b	$24(a0),d0
0000A734 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A738 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A73C                            ; ===========================================================================
0000A73C 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A73E 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A740 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A742                            ; ===========================================================================
0000A742                            
0000A742                            Obj7C_Main:				; XREF: Obj7C_Index
0000A742 5428 0024                  		addq.b	#2,$24(a0)
0000A746 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A74E 317C 2462 0002             		move.w	#$2462,2(a0)
0000A754 0028 0004 0001             		ori.b	#4,1(a0)
0000A75A 117C 0000 0018             		move.b	#0,$18(a0)
0000A760 117C 0020 0019             		move.b	#$20,$19(a0)
0000A766 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A76C                            
0000A76C                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A76C 6100                       		bsr.s	Obj7C_Collect
0000A76E 3028 0008                  		move.w	8(a0),d0
0000A772 0240 FF80                  		andi.w	#$FF80,d0
0000A776 3238 F700                  		move.w	($FFFFF700).w,d1
0000A77A 0441 0080                  		subi.w	#$80,d1
0000A77E 0241 FF80                  		andi.w	#$FF80,d1
0000A782 9041                       		sub.w	d1,d0
0000A784 0C40 0280                  		cmpi.w	#$280,d0
0000A788 6200 0000                  		bhi.w	DeleteObject
0000A78C 6000 0000                  		bra.w	DisplaySprite
0000A790                            
0000A790                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A790                            
0000A790                            
0000A790                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A790 5328 001E                  		subq.b	#1,$1E(a0)
0000A794 6A00                       		bpl.s	locret_9F76
0000A796 117C 0001 001E             		move.b	#1,$1E(a0)
0000A79C 5228 001A                  		addq.b	#1,$1A(a0)
0000A7A0 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A7A6 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A7A8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A7AE 6600                       		bne.s	locret_9F76	; if not, branch
0000A7B0 2268 003C                  		movea.l	$3C(a0),a1
0000A7B4 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A7BA 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A7C0 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A7C6 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A7CA 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A7CE                            
0000A7CE                            locret_9F76:
0000A7CE 4E75                       		rts	
0000A7D0                            ; ===========================================================================
0000A7D0                            
0000A7D0                            Obj7C_End:				; XREF: Obj7C_Collect
0000A7D0 5428 0024                  		addq.b	#2,$24(a0)
0000A7D4 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A7DA 588F                       		addq.l	#4,sp
0000A7DC 4E75                       		rts	
0000A7DE                            ; End of function Obj7C_Collect
0000A7DE                            
0000A7DE                            ; ===========================================================================
0000A7DE                            
0000A7DE                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A7DE 6000 0000                  		bra.w	DeleteObject
0000A7E2                            ; ===========================================================================
0000A7E2                            Ani_obj25:
0000A7E2                            	include "_anim\obj25.asm"
0000A7E2                            ; ---------------------------------------------------------------------------
0000A7E2                            ; Animation script - ring
0000A7E2                            ; ---------------------------------------------------------------------------
0000A7E2 0000                       		dc.w byte_9F8C-Ani_obj25
0000A7E4 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A7EA                            		even
0000A7EA                            		even
0000A7EA                            
0000A7EA                            ; ---------------------------------------------------------------------------
0000A7EA                            ; Sprite mappings - rings
0000A7EA                            ; ---------------------------------------------------------------------------
0000A7EA                            Map_obj25:
0000A7EA                            	include "_maps\obj25.asm"
0000A7EA                            ; ---------------------------------------------------------------------------
0000A7EA                            ; Sprite mappings - rings
0000A7EA                            ; ---------------------------------------------------------------------------
0000A7EA 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A7EE 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A7F2 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A7F6 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A7FA 01                         byte_9FA2:	dc.b 1
0000A7FB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A800 01                         byte_9FA8:	dc.b 1
0000A801 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A806 01                         byte_9FAE:	dc.b 1
0000A807 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A80C 01                         byte_9FB4:	dc.b 1
0000A80D F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A812 01                         byte_9FBA:	dc.b 1
0000A813 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A818 01                         byte_9FC0:	dc.b 1
0000A819 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A81E 01                         byte_9FC6:	dc.b 1
0000A81F F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A824 01                         byte_9FCC:	dc.b 1
0000A825 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A82A                            		even
0000A82A                            		even
0000A82A                            
0000A82A                            ; ---------------------------------------------------------------------------
0000A82A                            ; Sprite mappings - giant ring
0000A82A                            ; ---------------------------------------------------------------------------
0000A82A                            Map_obj4B:
0000A82A                            	include "_maps\obj4B.asm"
0000A82A                            ; ---------------------------------------------------------------------------
0000A82A                            ; Sprite mappings - giant ring
0000A82A                            ; ---------------------------------------------------------------------------
0000A82A 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A82E 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A832 0A                         byte_9FDA:	dc.b $A
0000A833 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A838 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A83D E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A842 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A847 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A84C F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A851 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A856 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A85B 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A860 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A865 08                         byte_A00D:	dc.b 8
0000A866 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A86B E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A870 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A875 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A87A F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A87F 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A884 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A889 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A88E 04                         byte_A036:	dc.b 4
0000A88F E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A894 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A899 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A89E 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A8A3 08                         byte_A04B:	dc.b 8
0000A8A4 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A8A9 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A8AE E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A8B3 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A8B8 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A8BD 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A8C2 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A8C7 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A8CC                            		even
0000A8CC                            		even
0000A8CC                            
0000A8CC                            ; ---------------------------------------------------------------------------
0000A8CC                            ; Sprite mappings - flash effect when you collect the giant ring
0000A8CC                            ; ---------------------------------------------------------------------------
0000A8CC                            Map_obj7C:
0000A8CC                            	include "_maps\obj7C.asm"
0000A8CC                            ; ---------------------------------------------------------------------------
0000A8CC                            ; Sprite mappings - flash effect when you collect the giant ring
0000A8CC                            ; ---------------------------------------------------------------------------
0000A8CC 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A8D0 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A8D4 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A8D8 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A8DC 02                         byte_A084:	dc.b 2
0000A8DD E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A8E2 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A8E7 04                         byte_A08F:	dc.b 4
0000A8E8 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A8ED E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A8F2 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A8F7 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A8FC 04                         byte_A0A4:	dc.b 4
0000A8FD E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A902 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A907 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A90C 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A911 04                         byte_A0B9:	dc.b 4
0000A912 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A917 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A91C 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A921 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A926 04                         byte_A0CE:	dc.b 4
0000A927 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A92C E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A931 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A936 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A93B 04                         byte_A0E3:	dc.b 4
0000A93C E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A941 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A946 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A94B 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A950 02                         byte_A0F8:	dc.b 2
0000A951 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A956 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A95B 04                         byte_A103:	dc.b 4
0000A95C E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A961 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A966 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A96B 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A970                            		even
0000A970                            		even
0000A970                            
0000A970                            ; ===========================================================================
0000A970                            ; ---------------------------------------------------------------------------
0000A970                            ; Object 26 - monitors
0000A970                            ; ---------------------------------------------------------------------------
0000A970                            
0000A970                            Obj26:					; XREF: Obj_Index
0000A970 7000                       		moveq	#0,d0
0000A972 1028 0024                  		move.b	$24(a0),d0
0000A976 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A97A 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A97E                            ; ===========================================================================
0000A97E 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A980 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A982 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A984 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A986 0000                       		dc.w Obj26_Display-Obj26_Index
0000A988                            ; ===========================================================================
0000A988                            
0000A988                            Obj26_Main:				; XREF: Obj26_Index
0000A988 5428 0024                  		addq.b	#2,$24(a0)
0000A98C 117C 000E 0016             		move.b	#$E,$16(a0)
0000A992 117C 000E 0017             		move.b	#$E,$17(a0)
0000A998 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A9A0 317C 0680 0002             		move.w	#$680,2(a0)
0000A9A6 117C 0004 0001             		move.b	#4,1(a0)
0000A9AC 117C 0003 0018             		move.b	#3,$18(a0)
0000A9B2 117C 000F 0019             		move.b	#$F,$19(a0)
0000A9B8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A9BC 7000                       		moveq	#0,d0
0000A9BE 1028 0023                  		move.b	$23(a0),d0
0000A9C2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A9C8 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A9CE 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A9D0 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A9D6 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A9DC 4E75                       		rts	
0000A9DE                            ; ===========================================================================
0000A9DE                            
0000A9DE                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A9DE 117C 0046 0020             		move.b	#$46,$20(a0)
0000A9E4 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A9EA                            
0000A9EA                            Obj26_Solid:				; XREF: Obj26_Index
0000A9EA 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A9EE 6700                       		beq.s	loc_A1EC	; if not, branch
0000A9F0 5500                       		subq.b	#2,d0
0000A9F2 6600                       		bne.s	Obj26_Fall
0000A9F4 7200                       		moveq	#0,d1
0000A9F6 1228 0019                  		move.b	$19(a0),d1
0000A9FA 0641 000B                  		addi.w	#$B,d1
0000A9FE 6100 D37C                  		bsr.w	ExitPlatform
0000AA02 0829 0003 0022             		btst	#3,$22(a1)
0000AA08 6600 0000                  		bne.w	loc_A1BC
0000AA0C 4228 0025                  		clr.b	$25(a0)
0000AA10 6000 0000                  		bra.w	Obj26_Animate
0000AA14                            ; ===========================================================================
0000AA14                            
0000AA14                            loc_A1BC:				; XREF: Obj26_Solid
0000AA14 363C 0010                  		move.w	#$10,d3
0000AA18 3428 0008                  		move.w	8(a0),d2
0000AA1C 6100 D8BC                  		bsr.w	MvSonicOnPtfm
0000AA20 6000 0000                  		bra.w	Obj26_Animate
0000AA24                            ; ===========================================================================
0000AA24                            
0000AA24                            Obj26_Fall:				; XREF: Obj26_Solid
0000AA24 6100 0000                  		bsr.w	ObjectFall
0000AA28 4EB9 0000 0000             		jsr	ObjHitFloor
0000AA2E 4A41                       		tst.w	d1
0000AA30 6A00 0000                  		bpl.w	Obj26_Animate
0000AA34 D368 000C                  		add.w	d1,$C(a0)
0000AA38 4268 0012                  		clr.w	$12(a0)
0000AA3C 4228 0025                  		clr.b	$25(a0)
0000AA40 6000 0000                  		bra.w	Obj26_Animate
0000AA44                            ; ===========================================================================
0000AA44                            
0000AA44                            loc_A1EC:				; XREF: Obj26_Solid
0000AA44 323C 001A                  		move.w	#$1A,d1
0000AA48 343C 000F                  		move.w	#$F,d2
0000AA4C 6100 0000                  		bsr.w	Obj26_SolidSides
0000AA50 6700 0000                  		beq.w	loc_A25C
0000AA54 4A69 0012                  		tst.w	$12(a1)
0000AA58 6B00                       		bmi.s	loc_A20A
0000AA5A 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000AA60 6700                       		beq.s	loc_A25C	; if yes, branch
0000AA62                            
0000AA62                            loc_A20A:
0000AA62 4A41                       		tst.w	d1
0000AA64 6A00                       		bpl.s	loc_A220
0000AA66 9769 000C                  		sub.w	d3,$C(a1)
0000AA6A 6100 D1FE                  		bsr.w	loc_74AE
0000AA6E 117C 0002 0025             		move.b	#2,$25(a0)
0000AA74 6000 0000                  		bra.w	Obj26_Animate
0000AA78                            ; ===========================================================================
0000AA78                            
0000AA78                            loc_A220:
0000AA78 4A40                       		tst.w	d0
0000AA7A 6700 0000                  		beq.w	loc_A246
0000AA7E 6B00                       		bmi.s	loc_A230
0000AA80 4A69 0010                  		tst.w	$10(a1)
0000AA84 6B00                       		bmi.s	loc_A246
0000AA86 6000                       		bra.s	loc_A236
0000AA88                            ; ===========================================================================
0000AA88                            
0000AA88                            loc_A230:
0000AA88 4A69 0010                  		tst.w	$10(a1)
0000AA8C 6A00                       		bpl.s	loc_A246
0000AA8E                            
0000AA8E                            loc_A236:
0000AA8E 9169 0008                  		sub.w	d0,8(a1)
0000AA92 337C 0000 0014             		move.w	#0,$14(a1)
0000AA98 337C 0000 0010             		move.w	#0,$10(a1)
0000AA9E                            
0000AA9E                            loc_A246:
0000AA9E 0829 0001 0022             		btst	#1,$22(a1)
0000AAA4 6600                       		bne.s	loc_A26A
0000AAA6 08E9 0005 0022             		bset	#5,$22(a1)
0000AAAC 08E8 0005 0022             		bset	#5,$22(a0)
0000AAB2 6000                       		bra.s	Obj26_Animate
0000AAB4                            ; ===========================================================================
0000AAB4                            
0000AAB4                            loc_A25C:
0000AAB4 0828 0005 0022             		btst	#5,$22(a0)
0000AABA 6700                       		beq.s	Obj26_Animate
0000AABC 337C 0001 001C             		move.w	#1,$1C(a1)
0000AAC2                            
0000AAC2                            loc_A26A:
0000AAC2 08A8 0005 0022             		bclr	#5,$22(a0)
0000AAC8 08A9 0005 0022             		bclr	#5,$22(a1)
0000AACE                            
0000AACE                            Obj26_Animate:				; XREF: Obj26_Index
0000AACE 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AAD4 6100 0000                  		bsr.w	AnimateSprite
0000AAD8                            
0000AAD8                            Obj26_Display:				; XREF: Obj26_Index
0000AAD8 6100 0000                  		bsr.w	DisplaySprite
0000AADC 3028 0008                  		move.w	8(a0),d0
0000AAE0 0240 FF80                  		andi.w	#$FF80,d0
0000AAE4 3238 F700                  		move.w	($FFFFF700).w,d1
0000AAE8 0441 0080                  		subi.w	#$80,d1
0000AAEC 0241 FF80                  		andi.w	#$FF80,d1
0000AAF0 9041                       		sub.w	d1,d0
0000AAF2 0C40 0280                  		cmpi.w	#$280,d0
0000AAF6 6200 0000                  		bhi.w	DeleteObject
0000AAFA 4E75                       		rts	
0000AAFC                            ; ===========================================================================
0000AAFC                            
0000AAFC                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AAFC 5428 0024                  		addq.b	#2,$24(a0)
0000AB00 117C 0000 0020             		move.b	#0,$20(a0)
0000AB06 6100 0000                  		bsr.w	SingleObjLoad
0000AB0A 6600                       		bne.s	Obj26_Explode
0000AB0C 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AB10 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB16 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB1C 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AB22 7400                       		moveq	#0,d2	; GMZ
0000AB24 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000AB26                            
0000AB26                            Obj26_Explode:
0000AB26 6100 0000                  		bsr.w	SingleObjLoad
0000AB2A 6600                       		bne.s	Obj26_SetBroken
0000AB2C 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000AB30 5429 0024                  		addq.b	#2,$24(a1)
0000AB34 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000AB38 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB3E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB44                            
0000AB44                            Obj26_NextExplosion:
0000AB44 5802                       		addq.b	#4,d2
0000AB46 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000AB4A                            
0000AB4A                            Obj26_SetBroken:
0000AB4A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AB4E 7000                       		moveq	#0,d0
0000AB50 1028 0023                  		move.b	$23(a0),d0
0000AB54 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000AB5A 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000AB60 6000 0000                  		bra.w	DisplaySprite
0000AB64                            ; ===========================================================================
0000AB64                            ; ---------------------------------------------------------------------------
0000AB64                            ; Object 2E - contents of monitors
0000AB64                            ; ---------------------------------------------------------------------------
0000AB64                            
0000AB64                            Obj2E:					; XREF: Obj_Index
0000AB64 7000                       		moveq	#0,d0
0000AB66 1028 0024                  		move.b	$24(a0),d0
0000AB6A 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000AB6E 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000AB72 6000 0000                  		bra.w	DisplaySprite
0000AB76                            ; ===========================================================================
0000AB76 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000AB78 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AB7A 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AB7C                            ; ===========================================================================
0000AB7C                            
0000AB7C                            Obj2E_Main:				; XREF: Obj2E_Index
0000AB7C 5428 0024                  		addq.b	#2,$24(a0)
0000AB80 317C 0680 0002             		move.w	#$680,2(a0)
0000AB86 117C 0024 0001             		move.b	#$24,1(a0)
0000AB8C 117C 0003 0018             		move.b	#3,$18(a0)
0000AB92 117C 0008 0019             		move.b	#8,$19(a0)
0000AB98 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AB9E 7000                       		moveq	#0,d0
0000ABA0 1028 001C                  		move.b	$1C(a0),d0
0000ABA4 5400                       		addq.b	#2,d0
0000ABA6 1140 001A                  		move.b	d0,$1A(a0)
0000ABAA 227C 0000 0000             		movea.l	#Map_obj26,a1
0000ABB0 D000                       		add.b	d0,d0
0000ABB2 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000ABB6 5249                       		addq.w	#1,a1
0000ABB8 2149 0004                  		move.l	a1,4(a0)
0000ABBC                            
0000ABBC                            Obj2E_Move:				; XREF: Obj2E_Index
0000ABBC 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000ABC0 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000ABC4 6100 0000                  		bsr.w	SpeedToPos
0000ABC8 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000ABCE 4E75                       		rts	
0000ABD0                            ; ===========================================================================
0000ABD0                            
0000ABD0                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000ABD0 5428 0024                  		addq.b	#2,$24(a0)
0000ABD4 317C 001D 001E             		move.w	#29,$1E(a0)
0000ABDA 1028 001C                  		move.b	$1C(a0),d0
0000ABDE 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000ABE2 6600                       		bne.s	Obj2E_ChkSonic
0000ABE4 4E75                       		rts			; Eggman monitor does nothing
0000ABE6                            ; ===========================================================================
0000ABE6                            
0000ABE6                            Obj2E_ChkSonic:
0000ABE6 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000ABEA 6600                       		bne.s	Obj2E_ChkShoes
0000ABEC                            
0000ABEC                            ExtraLife:
0000ABEC 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000ABF0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000ABF4 303C 0088                  		move.w	#$88,d0
0000ABF8 4EF9 0000 1588             		jmp	(PlaySound).l	; play extra life music
0000ABFE                            ; ===========================================================================
0000ABFE                            
0000ABFE                            Obj2E_ChkShoes:
0000ABFE 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AC02 6600                       		bne.s	Obj2E_ChkShield
0000AC04 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AC0A 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AC10 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AC16 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AC1C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AC22 303C 00E2                  		move.w	#$E2,d0
0000AC26 4EF9 0000 1588             		jmp	(PlaySound).l	; Speed	up the music
0000AC2C                            ; ===========================================================================
0000AC2C                            
0000AC2C                            Obj2E_ChkShield:
0000AC2C 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AC30 6600                       		bne.s	Obj2E_ChkInvinc
0000AC32 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AC38 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AC3E 303C 00AF                  		move.w	#$AF,d0
0000AC42 4EF9 0000 1588             		jmp	(PlaySound).l	; play shield sound
0000AC48                            ; ===========================================================================
0000AC48                            
0000AC48                            Obj2E_ChkInvinc:
0000AC48 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AC4C 6600                       		bne.s	Obj2E_ChkRings
0000AC4E 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AC54 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AC5A 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AC60 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AC66 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AC6C 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AC72 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AC78 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AC7E 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AC84 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AC8A 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AC8E 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AC90 303C 0087                  		move.w	#$87,d0
0000AC94 4EF9 0000 1588             		jmp	(PlaySound).l	; play invincibility music
0000AC9A                            ; ===========================================================================
0000AC9A                            
0000AC9A                            Obj2E_NoMusic:
0000AC9A 4E75                       		rts	
0000AC9C                            ; ===========================================================================
0000AC9C                            
0000AC9C                            Obj2E_ChkRings:
0000AC9C 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000ACA0 6600                       		bne.s	Obj2E_ChkS
0000ACA2 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000ACA8 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000ACAE 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000ACB4 6500                       		bcs.s	Obj2E_RingSound
0000ACB6 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000ACBC 6700 FF2E                  		beq.w	ExtraLife
0000ACC0 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000ACC6 6500                       		bcs.s	Obj2E_RingSound
0000ACC8 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000ACCE 6700 FF1C                  		beq.w	ExtraLife
0000ACD2                            
0000ACD2                            Obj2E_RingSound:
0000ACD2 303C 00B5                  		move.w	#$B5,d0
0000ACD6 4EF9 0000 1588             		jmp	(PlaySound).l	; play ring sound
0000ACDC                            ; ===========================================================================
0000ACDC                            
0000ACDC                            Obj2E_ChkS:
0000ACDC 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000ACE0 6600                       		bne.s	Obj2E_ChkEnd
0000ACE2                            		; nop	
0000ACE2 7201                       		moveq	#1,d1
0000ACE4 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000ACE8                            
0000ACE8                            Obj2E_ChkEnd:
0000ACE8 4E75                       		rts			; 'S' and goggles monitors do nothing
0000ACEA                            ; ===========================================================================
0000ACEA                            
0000ACEA                            Obj2E_Delete:				; XREF: Obj2E_Index
0000ACEA 5368 001E                  		subq.w	#1,$1E(a0)
0000ACEE 6B00 0000                  		bmi.w	DeleteObject
0000ACF2 4E75                       		rts	
0000ACF4                            ; ---------------------------------------------------------------------------
0000ACF4                            ; Subroutine to	make the sides of a monitor solid
0000ACF4                            ; ---------------------------------------------------------------------------
0000ACF4                            
0000ACF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACF4                            
0000ACF4                            
0000ACF4                            Obj26_SolidSides:			; XREF: loc_A1EC
0000ACF4 43F8 D000                  		lea	($FFFFD000).w,a1
0000ACF8 3029 0008                  		move.w	8(a1),d0
0000ACFC 9068 0008                  		sub.w	8(a0),d0
0000AD00 D041                       		add.w	d1,d0
0000AD02 6B00                       		bmi.s	loc_A4E6
0000AD04 3601                       		move.w	d1,d3
0000AD06 D643                       		add.w	d3,d3
0000AD08 B043                       		cmp.w	d3,d0
0000AD0A 6200                       		bhi.s	loc_A4E6
0000AD0C 1629 0016                  		move.b	$16(a1),d3
0000AD10 4883                       		ext.w	d3
0000AD12 D443                       		add.w	d3,d2
0000AD14 3629 000C                  		move.w	$C(a1),d3
0000AD18 9668 000C                  		sub.w	$C(a0),d3
0000AD1C D642                       		add.w	d2,d3
0000AD1E 6B00                       		bmi.s	loc_A4E6
0000AD20 D442                       		add.w	d2,d2
0000AD22 B642                       		cmp.w	d2,d3
0000AD24 6400                       		bcc.s	loc_A4E6
0000AD26 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AD2A 6B00                       		bmi.s	loc_A4E6
0000AD2C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AD32 6400                       		bcc.s	loc_A4E6
0000AD34 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AD38 6600                       		bne.s	loc_A4E6
0000AD3A B240                       		cmp.w	d0,d1
0000AD3C 6400                       		bcc.s	loc_A4DC
0000AD3E D241                       		add.w	d1,d1
0000AD40 9041                       		sub.w	d1,d0
0000AD42                            
0000AD42                            loc_A4DC:
0000AD42 0C43 0010                  		cmpi.w	#$10,d3
0000AD46 6500                       		bcs.s	loc_A4EA
0000AD48                            
0000AD48                            loc_A4E2:
0000AD48 7201                       		moveq	#1,d1
0000AD4A 4E75                       		rts	
0000AD4C                            ; ===========================================================================
0000AD4C                            
0000AD4C                            loc_A4E6:
0000AD4C 7200                       		moveq	#0,d1
0000AD4E 4E75                       		rts	
0000AD50                            ; ===========================================================================
0000AD50                            
0000AD50                            loc_A4EA:
0000AD50 7200                       		moveq	#0,d1
0000AD52 1228 0019                  		move.b	$19(a0),d1
0000AD56 5841                       		addq.w	#4,d1
0000AD58 3401                       		move.w	d1,d2
0000AD5A D442                       		add.w	d2,d2
0000AD5C D269 0008                  		add.w	8(a1),d1
0000AD60 9268 0008                  		sub.w	8(a0),d1
0000AD64 6BE2                       		bmi.s	loc_A4E2
0000AD66 B242                       		cmp.w	d2,d1
0000AD68 64DE                       		bcc.s	loc_A4E2
0000AD6A 72FF                       		moveq	#-1,d1
0000AD6C 4E75                       		rts	
0000AD6E                            ; End of function Obj26_SolidSides
0000AD6E                            
0000AD6E                            ; ===========================================================================
0000AD6E                            Ani_obj26:
0000AD6E                            	include "_anim\obj26.asm"
0000AD6E                            ; ---------------------------------------------------------------------------
0000AD6E                            ; Animation script - monitors
0000AD6E                            ; ---------------------------------------------------------------------------
0000AD6E 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AD74 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AD7A 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AD80 0000                       		dc.w byte_A582-Ani_obj26
0000AD82 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AD88 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AD94 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000ADA0 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000ADAC 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000ADB8 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000ADC4 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000ADD0 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000ADDC 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000ADE8 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000ADF0                            		even
0000ADF0                            		even
0000ADF0                            
0000ADF0                            ; ---------------------------------------------------------------------------
0000ADF0                            ; Sprite mappings - monitors
0000ADF0                            ; ---------------------------------------------------------------------------
0000ADF0                            Map_obj26:
0000ADF0                            	include "_maps\obj26.asm"
0000ADF0                            ; ================================================================================
0000ADF0                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000ADF0                            ; ================================================================================
0000ADF0                            
0000ADF0                            DATAY1U343IF3L:
0000ADF0 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000ADF4 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000ADF8 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000ADFC 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AE00 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AE04 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AE08 05                         DATAY1U343IF3L_0: dc.b $5
0000AE09 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE0E 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE13 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE18 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE1D 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE22 06                         DATAY1U343IF3L_1: dc.b $6
0000AE23 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AE28 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE2D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE32 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE37 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE3C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE41 05                         DATAY1U343IF3L_2: dc.b $5
0000AE42 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE47 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE4C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE51 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE56 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE5B 05                         DATAY1U343IF3L_3: dc.b $5
0000AE5C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE61 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE66 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE6B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE70 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE75 06                         DATAY1U343IF3L_4: dc.b $6
0000AE76 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AE7B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE80 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE85 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE8A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE8F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE94 06                         DATAY1U343IF3L_5: dc.b $6
0000AE95 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AE9A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE9F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEA4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEA9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEAE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEB3 06                         DATAY1U343IF3L_6: dc.b $6
0000AEB4 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AEB9 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEBE 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEC3 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEC8 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AECD 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AED2 06                         DATAY1U343IF3L_7: dc.b $6
0000AED3 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AED8 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEDD 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEE2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEE7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEEC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEF1 06                         DATAY1U343IF3L_8: dc.b $6
0000AEF2 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AEF7 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEFC 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF01 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF06 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF0B 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF10 06                         DATAY1U343IF3L_9: dc.b $6
0000AF11 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AF16 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF1B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF20 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF25 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF2A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF2F 05                         DATAY1U343IF3L_A: dc.b $5
0000AF30 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF35 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF3A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF3F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF44 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF49 01                         DATAY1U343IF3L_B: dc.b $1
0000AF4A FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AF50 00                         	even
0000AF50 00                         	even
0000AF50                            
0000AF50                            ; ===========================================================================
0000AF50                            ; ---------------------------------------------------------------------------
0000AF50                            ; Object 0E - Sonic on the title screen
0000AF50                            ; ---------------------------------------------------------------------------
0000AF50                            
0000AF50                            Obj0E:					; XREF: Obj_Index
0000AF50 7000                       		moveq	#0,d0
0000AF52 1028 0024                  		move.b	$24(a0),d0
0000AF56 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AF5A 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AF5E                            ; ===========================================================================
0000AF5E 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AF60 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AF62 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AF64 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AF66                            ; ===========================================================================
0000AF66                            
0000AF66                            Obj0E_Main:				; XREF: Obj0E_Index
0000AF66 5428 0024                  		addq.b	#2,$24(a0)
0000AF6A 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AF70 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AF76 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AF7E 317C 2300 0002             		move.w	#$2300,2(a0)
0000AF84 117C 0001 0018             		move.b	#1,$18(a0)
0000AF8A 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AF90 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AF96 6100 0000                  		bsr.w	AnimateSprite
0000AF9A                            
0000AF9A                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AF9A 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AF9E 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AFA0 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AFA4 6000 0000                  		bra.w	DisplaySprite
0000AFA8                            ; ===========================================================================
0000AFA8                            
0000AFA8                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AFA8 4E75                       		rts	
0000AFAA                            ; ===========================================================================
0000AFAA                            
0000AFAA                            Obj0E_Move:				; XREF: Obj0E_Index
0000AFAA 5168 000A                  		subq.w	#8,$A(a0)
0000AFAE 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AFB4 6600                       		bne.s	Obj0E_Display
0000AFB6 5428 0024                  		addq.b	#2,$24(a0)
0000AFBA                            
0000AFBA                            Obj0E_Display:
0000AFBA 6000 0000                  		bra.w	DisplaySprite
0000AFBE                            ; ===========================================================================
0000AFBE 4E75                       		rts	
0000AFC0                            ; ===========================================================================
0000AFC0                            
0000AFC0                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AFC0 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AFC6 6100 0000                  		bsr.w	AnimateSprite
0000AFCA 6000 0000                  		bra.w	DisplaySprite
0000AFCE                            ; ===========================================================================
0000AFCE 4E75                       		rts	
0000AFD0                            ; ===========================================================================
0000AFD0                            ; ---------------------------------------------------------------------------
0000AFD0                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AFD0                            ; ---------------------------------------------------------------------------
0000AFD0                            
0000AFD0                            Obj0F:					; XREF: Obj_Index
0000AFD0 7000                       		moveq	#0,d0
0000AFD2 1028 0024                  		move.b	$24(a0),d0
0000AFD6 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AFDA 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AFDE 6000 0000                  		bra.w	DisplaySprite
0000AFE2                            ; ===========================================================================
0000AFE2 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AFE4 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AFE6 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AFE8                            ; ===========================================================================
0000AFE8                            
0000AFE8                            Obj0F_Main:				; XREF: Obj0F_Index
0000AFE8 5428 0024                  		addq.b	#2,$24(a0)
0000AFEC 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AFF2 317C 0130 000A             		move.w	#$130,$A(a0)
0000AFF8 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B000 317C 0200 0002             		move.w	#$200,2(a0)
0000B006 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B00C 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B00E 5428 0024                  		addq.b	#2,$24(a0)
0000B012 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B018 6600                       		bne.s	locret_A6F8	; if not, branch
0000B01A 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B020 317C 0170 0008             		move.w	#$170,8(a0)
0000B026 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B02C                            
0000B02C                            locret_A6F8:				; XREF: Obj0F_Index
0000B02C 4E75                       		rts	
0000B02E                            ; ===========================================================================
0000B02E                            
0000B02E                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B02E 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B034 6000 0000                  		bra.w	AnimateSprite
0000B038                            ; ===========================================================================
0000B038                            Ani_obj0E:
0000B038                            	include "_anim\obj0E.asm"
0000B038                            ; ---------------------------------------------------------------------------
0000B038                            ; Animation script - Sonic on the title screen
0000B038                            ; ---------------------------------------------------------------------------
0000B038 0000                       		dc.w byte_A706-Ani_obj0E
0000B03A 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B046                            		even
0000B046                            		even
0000B046                            
0000B046                            Ani_obj0F:
0000B046                            	include "_anim\obj0F.asm"
0000B046                            ; ---------------------------------------------------------------------------
0000B046                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B046                            ; ---------------------------------------------------------------------------
0000B046 0000                       		dc.w byte_A714-Ani_obj0F
0000B048 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B04C                            		even
0000B04C                            		even
0000B04C                            
0000B04C                            ; ---------------------------------------------------------------------------
0000B04C                            ; Subroutine to	animate	a sprite using an animation script
0000B04C                            ; ---------------------------------------------------------------------------
0000B04C                            
0000B04C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B04C                            
0000B04C                            
0000B04C                            AnimateSprite:
0000B04C 7000                       		moveq	#0,d0
0000B04E 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B052 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B056 6700                       		beq.s	Anim_Run	; if not, branch
0000B058 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B05C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B062 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B068                            
0000B068                            Anim_Run:
0000B068 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B06C 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B06E D040                       		add.w	d0,d0
0000B070 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B074 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B078 7200                       		moveq	#0,d1
0000B07A 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B07E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B082 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B084                            
0000B084                            Anim_Next:
0000B084 1200                       		move.b	d0,d1
0000B086 0200 001F                  		andi.b	#$1F,d0
0000B08A 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B08E 1028 0022                  		move.b	$22(a0),d0
0000B092 E719                       		rol.b	#3,d1
0000B094 B101                       		eor.b	d0,d1
0000B096 0201 0003                  		andi.b	#3,d1
0000B09A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B0A0 8328 0001                  		or.b	d1,1(a0)
0000B0A4 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B0A8                            
0000B0A8                            Anim_Wait:
0000B0A8 4E75                       		rts	
0000B0AA                            ; ===========================================================================
0000B0AA                            
0000B0AA                            Anim_End_FF:
0000B0AA 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B0AC 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B0AE 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B0B4 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B0B8 60CA                       		bra.s	Anim_Next
0000B0BA                            ; ===========================================================================
0000B0BA                            
0000B0BA                            Anim_End_FE:
0000B0BA 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B0BC 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B0BE 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B0C2 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B0C6 9200                       		sub.b	d0,d1
0000B0C8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B0CC 60B6                       		bra.s	Anim_Next
0000B0CE                            ; ===========================================================================
0000B0CE                            
0000B0CE                            Anim_End_FD:
0000B0CE 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B0D0 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B0D2 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B0D8                            
0000B0D8                            Anim_End_FC:
0000B0D8 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B0DA 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B0DC 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B0E0                            
0000B0E0                            Anim_End_FB:
0000B0E0 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B0E2 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B0E4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B0EA 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B0EE                            
0000B0EE                            Anim_End_FA:
0000B0EE 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B0F0 6600                       		bne.s	Anim_End	; if not, branch
0000B0F2 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B0F6                            
0000B0F6                            Anim_End:
0000B0F6 4E75                       		rts	
0000B0F8                            ; End of function AnimateSprite
0000B0F8                            
0000B0F8                            ; ===========================================================================
0000B0F8                            ; ---------------------------------------------------------------------------
0000B0F8                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B0F8                            ; ---------------------------------------------------------------------------
0000B0F8                            Map_obj0F:
0000B0F8                            	include "_maps\obj0F.asm"
0000B0F8                            ; ---------------------------------------------------------------------------
0000B0F8                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B0F8                            ; ---------------------------------------------------------------------------
0000B0F8 0000                       		dc.w byte_A7CD-Map_obj0F
0000B0FA 0000                       		dc.w byte_A7CC-Map_obj0F
0000B0FC 0000                       		dc.w byte_A7EB-Map_obj0F
0000B0FE 0000                       		dc.w byte_A882-Map_obj0F
0000B100 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B101 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B106 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B10B 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B110 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B115 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B11A 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B11F 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B120 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B125 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B12A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B12F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B134 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B139 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B13E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B143 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B148 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B14D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B152 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B157 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B15C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B161 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B166 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B16B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B170 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B175 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B17A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B17F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B184 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B189 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B18E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B193 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B198 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B19D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1A2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1A7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1AC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1B1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1B6 01                         byte_A882:	dc.b 1			; "TM"
0000B1B7 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B1BC                            		even
0000B1BC                            		even
0000B1BC                            
0000B1BC                            ; ---------------------------------------------------------------------------
0000B1BC                            ; Sprite mappings - Sonic on the title screen
0000B1BC                            ; ---------------------------------------------------------------------------
0000B1BC                            Map_obj0E:
0000B1BC                            	include "_maps\obj0E.asm"
0000B1BC                            ; ================================================================================
0000B1BC                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B1BC                            ; ================================================================================
0000B1BC                            
0000B1BC                            DATAGKI0HYDQBXP:
0000B1BC 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B1C0 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B1C4 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B1C8 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B1CC 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B1CD 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B1D2 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B1D7 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B1DC 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B1E1 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B1E6 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B1EB 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B1F0 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B1F5 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B1F6 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B1FB 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B200 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B205 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B20A 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B20F 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B214 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B219 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B21E 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B223 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B228 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B22D 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B22E F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B233 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B238 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B23D 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B242 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B247 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B24C 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B251 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B256 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B25B 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B260 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B265 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B266 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B26B F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B270 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B275 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B27A 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B27F 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B284 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B289 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B28E 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B293 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B298 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B299 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B29E F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B2A3 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B2A8 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B2AD 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B2B2 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B2B7 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B2BC 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B2C1 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B2C6 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B2CB 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B2D0 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B2D5 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B2DA 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B2DF 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B2E4 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B2E9 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B2EA 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B2EF EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B2F4 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B2F9 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B2FE EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B303 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B308 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B30D EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B312 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B317 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B31C 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B321 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B322 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B327 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B32C 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B331 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B336 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B33B 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B340 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B345 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B34A 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B34F EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B354 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B359 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B35E EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B363 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B368 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B36D 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B36E EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B373 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B378 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B37D EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B382 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B387 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B38C EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B391 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B396 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B39B EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B3A0 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B3A5 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B3AA EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B3AF 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B3B4 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B3BA 00                         	even
0000B3BA 00                         	even
0000B3BA                            
0000B3BA                            ; ===========================================================================
0000B3BA                            ; ---------------------------------------------------------------------------
0000B3BA                            ; Object 2B - Chopper enemy (GHZ)
0000B3BA                            ; ---------------------------------------------------------------------------
0000B3BA                            
0000B3BA                            Obj2B:					; XREF: Obj_Index
0000B3BA 7000                       		moveq	#0,d0
0000B3BC 1028 0024                  		move.b	$24(a0),d0
0000B3C0 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B3C4 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B3C8 6000 0000                  		bra.w	MarkObjGone
0000B3CC                            ; ===========================================================================
0000B3CC 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B3CE 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B3D0                            ; ===========================================================================
0000B3D0                            
0000B3D0                            Obj2B_Main:				; XREF: Obj2B_Index
0000B3D0 5428 0024                  		addq.b	#2,$24(a0)
0000B3D4 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B3DC 317C 047B 0002             		move.w	#$47B,2(a0)
0000B3E2 117C 0004 0001             		move.b	#4,1(a0)
0000B3E8 117C 0004 0018             		move.b	#4,$18(a0)
0000B3EE 117C 0009 0020             		move.b	#9,$20(a0)
0000B3F4 117C 0010 0019             		move.b	#$10,$19(a0)
0000B3FA 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B400 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B406                            
0000B406                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B406 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B40C 6100 FC3E                  		bsr.w	AnimateSprite
0000B410 6100 0000                  		bsr.w	SpeedToPos
0000B414 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B41A 3028 0030                  		move.w	$30(a0),d0
0000B41E B068 000C                  		cmp.w	$C(a0),d0
0000B422 6400                       		bcc.s	Obj2B_ChgAni
0000B424 3140 000C                  		move.w	d0,$C(a0)
0000B428 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B42E                            
0000B42E                            Obj2B_ChgAni:
0000B42E 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B434 0440 00C0                  		subi.w	#$C0,d0
0000B438 B068 000C                  		cmp.w	$C(a0),d0
0000B43C 6400                       		bcc.s	locret_ABB6
0000B43E 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B444 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B448 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B44A 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B450                            
0000B450                            locret_ABB6:
0000B450 4E75                       		rts	
0000B452                            ; ===========================================================================
0000B452                            Ani_obj2B:
0000B452                            	include "_anim\obj2B.asm"
0000B452                            ; ---------------------------------------------------------------------------
0000B452                            ; Animation script - Chopper enemy
0000B452                            ; ---------------------------------------------------------------------------
0000B452 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B454 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B456 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B458 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B45C 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B460 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B464 00                         		even
0000B464 00                         		even
0000B464                            
0000B464                            ; ---------------------------------------------------------------------------
0000B464                            ; Sprite mappings - Chopper enemy (GHZ)
0000B464                            ; ---------------------------------------------------------------------------
0000B464                            Map_obj2B:
0000B464                            	include "_maps\obj2B.asm"
0000B464                            Map_1ff1:
0000B464 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B466 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B468 02                         Map_1ff1_4: 	dc.b $2
0000B469 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B46E 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B473 02                         Map_1ff1_F: 	dc.b $2
0000B474 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B479 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B47E                            	even
0000B47E                            	even
0000B47E                            
0000B47E                            ; ===========================================================================
0000B47E                            ; ---------------------------------------------------------------------------
0000B47E                            ; Object 2C - Jaws enemy (LZ)
0000B47E                            ; ---------------------------------------------------------------------------
0000B47E                            
0000B47E                            Obj2C:					; XREF: Obj_Index
0000B47E 7000                       		moveq	#0,d0
0000B480 1028 0024                  		move.b	$24(a0),d0
0000B484 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B488 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B48C                            ; ===========================================================================
0000B48C 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B48E 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B490                            ; ===========================================================================
0000B490                            
0000B490                            Obj2C_Main:				; XREF: Obj2C_Index
0000B490 5428 0024                  		addq.b	#2,$24(a0)
0000B494 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B49C 317C 2486 0002             		move.w	#$2486,2(a0)
0000B4A2 0028 0004 0001             		ori.b	#4,1(a0)
0000B4A8 117C 000A 0020             		move.b	#$A,$20(a0)
0000B4AE 117C 0004 0018             		move.b	#4,$18(a0)
0000B4B4 117C 0010 0019             		move.b	#$10,$19(a0)
0000B4BA 7000                       		moveq	#0,d0
0000B4BC 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B4C0 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B4C2 5340                       		subq.w	#1,d0
0000B4C4 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B4C8 3140 0032                  		move.w	d0,$32(a0)
0000B4CC 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B4D2 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B4D8 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B4DA 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B4DE                            
0000B4DE                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B4DE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B4E2 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B4E4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B4EA 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B4EE 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B4F4 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B4FA                            
0000B4FA                            Obj2C_Animate:
0000B4FA 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B500 6100 FB4A                  		bsr.w	AnimateSprite
0000B504 6100 0000                  		bsr.w	SpeedToPos
0000B508 6000 0000                  		bra.w	MarkObjGone
0000B50C                            ; ===========================================================================
0000B50C                            Ani_obj2C:
0000B50C                            	include "_anim\obj2C.asm"
0000B50C                            ; ---------------------------------------------------------------------------
0000B50C                            ; Animation script - Jaws enemy
0000B50C                            ; ---------------------------------------------------------------------------
0000B50C 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B50E 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B514                            		even
0000B514                            		even
0000B514                            
0000B514                            ; ---------------------------------------------------------------------------
0000B514                            ; Sprite mappings - Jaws enemy (LZ)
0000B514                            ; ---------------------------------------------------------------------------
0000B514                            Map_obj2C:
0000B514                            	include "_maps\obj2C.asm"
0000B514                            ; ---------------------------------------------------------------------------
0000B514                            ; Sprite mappings - Jaws enemy (LZ)
0000B514                            ; ---------------------------------------------------------------------------
0000B514 0000                       		dc.w byte_AC78-Map_obj2C
0000B516 0000                       		dc.w byte_AC83-Map_obj2C
0000B518 0000                       		dc.w byte_AC8E-Map_obj2C
0000B51A 0000                       		dc.w byte_AC99-Map_obj2C
0000B51C 02                         byte_AC78:	dc.b 2
0000B51D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B522 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B527 02                         byte_AC83:	dc.b 2
0000B528 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B52D F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B532 02                         byte_AC8E:	dc.b 2
0000B533 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B538 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B53D 02                         byte_AC99:	dc.b 2
0000B53E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B543 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B548                            		even
0000B548                            		even
0000B548                            
0000B548                            ; ===========================================================================
0000B548                            ; ---------------------------------------------------------------------------
0000B548                            ; Object 2D - Burrobot enemy (LZ)
0000B548                            ; ---------------------------------------------------------------------------
0000B548                            
0000B548                            Obj2D:					; XREF: Obj_Index
0000B548 7000                       		moveq	#0,d0
0000B54A 1028 0024                  		move.b	$24(a0),d0
0000B54E 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B552 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B556                            ; ===========================================================================
0000B556 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B558 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B55A                            ; ===========================================================================
0000B55A                            
0000B55A                            Obj2D_Main:				; XREF: Obj2D_Index
0000B55A 5428 0024                  		addq.b	#2,$24(a0)
0000B55E 117C 0013 0016             		move.b	#$13,$16(a0)
0000B564 117C 0008 0017             		move.b	#8,$17(a0)
0000B56A 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B572 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B578 0028 0004 0001             		ori.b	#4,1(a0)
0000B57E 117C 0004 0018             		move.b	#4,$18(a0)
0000B584 117C 0005 0020             		move.b	#5,$20(a0)
0000B58A 117C 000C 0019             		move.b	#$C,$19(a0)
0000B590 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B594 117C 0002 001C             		move.b	#2,$1C(a0)
0000B59A                            
0000B59A                            Obj2D_Action:				; XREF: Obj2D_Index
0000B59A 7000                       		moveq	#0,d0
0000B59C 1028 0025                  		move.b	$25(a0),d0
0000B5A0 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B5A4 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B5A8 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B5AE 6100 FA9C                  		bsr.w	AnimateSprite
0000B5B2 6000 0000                  		bra.w	MarkObjGone
0000B5B6                            ; ===========================================================================
0000B5B6 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B5B8 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B5BA 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B5BC 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B5BE                            ; ===========================================================================
0000B5BE                            
0000B5BE                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B5BE 5368 0030                  		subq.w	#1,$30(a0)
0000B5C2 6A00                       		bpl.s	locret_AD42
0000B5C4 5428 0025                  		addq.b	#2,$25(a0)
0000B5C8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B5CE 317C 0080 0010             		move.w	#$80,$10(a0)
0000B5D4 117C 0001 001C             		move.b	#1,$1C(a0)
0000B5DA 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B5E0 6700                       		beq.s	locret_AD42
0000B5E2 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B5E6                            
0000B5E6                            locret_AD42:
0000B5E6 4E75                       		rts	
0000B5E8                            ; ===========================================================================
0000B5E8                            
0000B5E8                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B5E8 5368 0030                  		subq.w	#1,$30(a0)
0000B5EC 6B00                       		bmi.s	loc_AD84
0000B5EE 6100 0000                  		bsr.w	SpeedToPos
0000B5F2 0868 0000 0032             		bchg	#0,$32(a0)
0000B5F8 6600                       		bne.s	loc_AD78
0000B5FA 3628 0008                  		move.w	8(a0),d3
0000B5FE 0643 000C                  		addi.w	#$C,d3
0000B602 0828 0000 0022             		btst	#0,$22(a0)
0000B608 6600                       		bne.s	loc_AD6A
0000B60A 0443 0018                  		subi.w	#$18,d3
0000B60E                            
0000B60E                            loc_AD6A:
0000B60E 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B614 0C41 000C                  		cmpi.w	#$C,d1
0000B618 6C00                       		bge.s	loc_AD84
0000B61A 4E75                       		rts	
0000B61C                            ; ===========================================================================
0000B61C                            
0000B61C                            loc_AD78:				; XREF: Obj2D_Move
0000B61C 4EB9 0000 0000             		jsr	ObjHitFloor
0000B622 D368 000C                  		add.w	d1,$C(a0)
0000B626 4E75                       		rts	
0000B628                            ; ===========================================================================
0000B628                            
0000B628                            loc_AD84:				; XREF: Obj2D_Move
0000B628 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B62E 6700                       		beq.s	loc_ADA4
0000B630 5528 0025                  		subq.b	#2,$25(a0)
0000B634 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B63A 317C 0000 0010             		move.w	#0,$10(a0)
0000B640 117C 0000 001C             		move.b	#0,$1C(a0)
0000B646 4E75                       		rts	
0000B648                            ; ===========================================================================
0000B648                            
0000B648                            loc_ADA4:
0000B648 5428 0025                  		addq.b	#2,$25(a0)
0000B64C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B652 117C 0002 001C             		move.b	#2,$1C(a0)
0000B658 4E75                       		rts	
0000B65A                            ; ===========================================================================
0000B65A                            
0000B65A                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B65A 6100 0000                  		bsr.w	SpeedToPos
0000B65E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B664 6B00                       		bmi.s	locret_ADF0
0000B666 117C 0003 001C             		move.b	#3,$1C(a0)
0000B66C 4EB9 0000 0000             		jsr	ObjHitFloor
0000B672 4A41                       		tst.w	d1
0000B674 6A00                       		bpl.s	locret_ADF0
0000B676 D368 000C                  		add.w	d1,$C(a0)
0000B67A 317C 0000 0012             		move.w	#0,$12(a0)
0000B680 117C 0001 001C             		move.b	#1,$1C(a0)
0000B686 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B68C 5528 0025                  		subq.b	#2,$25(a0)
0000B690 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B694                            
0000B694                            locret_ADF0:
0000B694 4E75                       		rts	
0000B696                            ; ===========================================================================
0000B696                            
0000B696                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B696 343C 0060                  		move.w	#$60,d2
0000B69A 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B69E 6400                       		bcc.s	locret_AE20
0000B6A0 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B6A4 9068 000C                  		sub.w	$C(a0),d0
0000B6A8 6400                       		bcc.s	locret_AE20
0000B6AA 0C40 FF80                  		cmpi.w	#-$80,d0
0000B6AE 6500                       		bcs.s	locret_AE20
0000B6B0 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B6B4 6600                       		bne.s	locret_AE20
0000B6B6 5528 0025                  		subq.b	#2,$25(a0)
0000B6BA 3141 0010                  		move.w	d1,$10(a0)
0000B6BE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B6C4                            
0000B6C4                            locret_AE20:
0000B6C4 4E75                       		rts	
0000B6C6                            
0000B6C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6C6                            
0000B6C6                            
0000B6C6                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B6C6 323C 0080                  		move.w	#$80,d1
0000B6CA 08E8 0000 0022             		bset	#0,$22(a0)
0000B6D0 3038 D008                  		move.w	($FFFFD008).w,d0
0000B6D4 9068 0008                  		sub.w	8(a0),d0
0000B6D8 6400                       		bcc.s	loc_AE40
0000B6DA 4440                       		neg.w	d0
0000B6DC 4441                       		neg.w	d1
0000B6DE 08A8 0000 0022             		bclr	#0,$22(a0)
0000B6E4                            
0000B6E4                            loc_AE40:
0000B6E4 B042                       		cmp.w	d2,d0
0000B6E6 4E75                       		rts	
0000B6E8                            ; End of function Obj2D_ChkSonic2
0000B6E8                            
0000B6E8                            ; ===========================================================================
0000B6E8                            Ani_obj2D:
0000B6E8                            	include "_anim\obj2D.asm"
0000B6E8                            ; ---------------------------------------------------------------------------
0000B6E8                            ; Animation script - Burrobot enemy but craig
0000B6E8                            ; ---------------------------------------------------------------------------
0000B6E8 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B6EA 0000                       		dc.w byte_AE50-Ani_obj2D
0000B6EC 0000                       		dc.w byte_AE54-Ani_obj2D
0000B6EE 0000                       		dc.w byte_AE58-Ani_obj2D
0000B6F0 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B6F3 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B6F7 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B705 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B708                            		even
0000B708                            		even
0000B708                            
0000B708                            ; ---------------------------------------------------------------------------
0000B708                            ; Sprite mappings - Burrobot enemy (LZ)
0000B708                            ; ---------------------------------------------------------------------------
0000B708                            Map_obj2D:
0000B708                            	include "_maps\obj2D.asm"
0000B708                            Map_e3a3:
0000B708 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B70A 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B70C 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B70E 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B710 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B712 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B714 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B716 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B718 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B71A 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B71C 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B71E 02                         Map_e3a3_16: 	dc.b $2
0000B71F EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B724 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B729 02                         Map_e3a3_21: 	dc.b $2
0000B72A EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B72F 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B734 02                         Map_e3a3_2C: 	dc.b $2
0000B735 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B73A 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B73F 02                         Map_e3a3_37: 	dc.b $2
0000B740 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B745 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B74A 02                         Map_e3a3_42: 	dc.b $2
0000B74B EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B750 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B755 02                         Map_e3a3_4D: 	dc.b $2
0000B756 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B75B FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B760 02                         Map_e3a3_58: 	dc.b $2
0000B761 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B766 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B76B 02                         Map_e3a3_63: 	dc.b $2
0000B76C EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B771 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B776 02                         Map_e3a3_6E: 	dc.b $2
0000B777 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B77C FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B781 02                         Map_e3a3_79: 	dc.b $2
0000B782 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B787 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B78C 02                         Map_e3a3_84: 	dc.b $2
0000B78D EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B792 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B798 00                         	even
0000B798 00                         	even
0000B798                            
0000B798                            ; ===========================================================================
0000B798                            ; ---------------------------------------------------------------------------
0000B798                            ; Object 2F - large moving platforms (MZ)
0000B798                            ; ---------------------------------------------------------------------------
0000B798                            
0000B798                            Obj2F:					; XREF: Obj_Index
0000B798 7000                       		moveq	#0,d0
0000B79A 1028 0024                  		move.b	$24(a0),d0
0000B79E 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B7A2 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B7A6                            ; ===========================================================================
0000B7A6 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B7A8 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B7AA                            
0000B7AA 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B7AC 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B7AE 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B7B0 0140                       		dc.b 1,	$40
0000B7B2 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B7B4 0220                       		dc.b 2,	$20
0000B7B6                            ; ===========================================================================
0000B7B6                            
0000B7B6                            Obj2F_Main:				; XREF: Obj2F_Index
0000B7B6 5428 0024                  		addq.b	#2,$24(a0)
0000B7BA 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B7C2 317C C000 0002             		move.w	#$C000,2(a0)
0000B7C8 117C 0004 0001             		move.b	#4,1(a0)
0000B7CE 117C 0005 0018             		move.b	#5,$18(a0)
0000B7D4 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B7DA 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B7E0 7000                       		moveq	#0,d0
0000B7E2 1028 0028                  		move.b	$28(a0),d0
0000B7E6 E448                       		lsr.w	#2,d0
0000B7E8 0240 001C                  		andi.w	#$1C,d0
0000B7EC 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B7F0 3019                       		move.w	(a1)+,d0
0000B7F2 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B7F6 214A 0030                  		move.l	a2,$30(a0)
0000B7FA 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B7FE 1151 0019                  		move.b	(a1),$19(a0)
0000B802 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B808 117C 0040 0016             		move.b	#$40,$16(a0)
0000B80E 08E8 0004 0001             		bset	#4,1(a0)
0000B814                            
0000B814                            Obj2F_Action:				; XREF: Obj2F_Index
0000B814 6100 0000                  		bsr.w	Obj2F_Types
0000B818 4A28 0025                  		tst.b	$25(a0)
0000B81C 6700                       		beq.s	Obj2F_Solid
0000B81E 7200                       		moveq	#0,d1
0000B820 1228 0019                  		move.b	$19(a0),d1
0000B824 0641 000B                  		addi.w	#$B,d1
0000B828 6100 C552                  		bsr.w	ExitPlatform
0000B82C 0829 0003 0022             		btst	#3,$22(a1)
0000B832 6600 0000                  		bne.w	Obj2F_Slope
0000B836 4228 0025                  		clr.b	$25(a0)
0000B83A 6000                       		bra.s	Obj2F_Display
0000B83C                            ; ===========================================================================
0000B83C                            
0000B83C                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B83C 7200                       		moveq	#0,d1
0000B83E 1228 0019                  		move.b	$19(a0),d1
0000B842 0641 000B                  		addi.w	#$B,d1
0000B846 2468 0030                  		movea.l	$30(a0),a2
0000B84A 3428 0008                  		move.w	8(a0),d2
0000B84E 6100 D51C                  		bsr.w	SlopeObject2
0000B852 6000                       		bra.s	Obj2F_Display
0000B854                            ; ===========================================================================
0000B854                            
0000B854                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B854 7200                       		moveq	#0,d1
0000B856 1228 0019                  		move.b	$19(a0),d1
0000B85A 0641 000B                  		addi.w	#$B,d1
0000B85E 343C 0020                  		move.w	#$20,d2
0000B862 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B868 6600                       		bne.s	loc_AF8E
0000B86A 343C 0030                  		move.w	#$30,d2
0000B86E                            
0000B86E                            loc_AF8E:
0000B86E 2468 0030                  		movea.l	$30(a0),a2
0000B872 6100 0000                  		bsr.w	SolidObject2F
0000B876                            
0000B876                            Obj2F_Display:				; XREF: Obj2F_Action
0000B876 6100 0000                  		bsr.w	DisplaySprite
0000B87A 6000 0000                  		bra.w	Obj2F_ChkDel
0000B87E                            
0000B87E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B87E                            
0000B87E                            
0000B87E                            Obj2F_Types:				; XREF: Obj2F_Action
0000B87E 7000                       		moveq	#0,d0
0000B880 1028 0028                  		move.b	$28(a0),d0
0000B884 0240 0007                  		andi.w	#7,d0
0000B888 D040                       		add.w	d0,d0
0000B88A 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B88E 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B892                            ; End of function Obj2F_Types
0000B892                            
0000B892                            ; ===========================================================================
0000B892 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B894 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B896 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B898 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B89A 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B89C 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B89E                            ; ===========================================================================
0000B89E                            
0000B89E                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B89E 4E75                       		rts			; type 00 platform doesn't move
0000B8A0                            ; ===========================================================================
0000B8A0                            
0000B8A0                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B8A0 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B8A4 323C 0020                  		move.w	#$20,d1
0000B8A8 6000                       		bra.s	Obj2F_Move
0000B8AA                            ; ===========================================================================
0000B8AA                            
0000B8AA                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B8AA 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B8AE 323C 0030                  		move.w	#$30,d1
0000B8B2 6000                       		bra.s	Obj2F_Move
0000B8B4                            ; ===========================================================================
0000B8B4                            
0000B8B4                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B8B4 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B8B8 323C 0040                  		move.w	#$40,d1
0000B8BC 6000                       		bra.s	Obj2F_Move
0000B8BE                            ; ===========================================================================
0000B8BE                            
0000B8BE                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B8BE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B8C2 323C 0060                  		move.w	#$60,d1
0000B8C6                            
0000B8C6                            Obj2F_Move:
0000B8C6 0828 0003 0028             		btst	#3,$28(a0)
0000B8CC 6700                       		beq.s	loc_AFF2
0000B8CE 4440                       		neg.w	d0
0000B8D0 D041                       		add.w	d1,d0
0000B8D2                            
0000B8D2                            loc_AFF2:
0000B8D2 3228 002C                  		move.w	$2C(a0),d1
0000B8D6 9240                       		sub.w	d0,d1
0000B8D8 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B8DC 4E75                       		rts	
0000B8DE                            ; ===========================================================================
0000B8DE                            
0000B8DE                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B8DE 1028 0034                  		move.b	$34(a0),d0
0000B8E2 4A28 0025                  		tst.b	$25(a0)
0000B8E6 6600                       		bne.s	loc_B010
0000B8E8 5500                       		subq.b	#2,d0
0000B8EA 6400                       		bcc.s	loc_B01C
0000B8EC 7000                       		moveq	#0,d0
0000B8EE 6000                       		bra.s	loc_B01C
0000B8F0                            ; ===========================================================================
0000B8F0                            
0000B8F0                            loc_B010:
0000B8F0 5800                       		addq.b	#4,d0
0000B8F2 0C00 0040                  		cmpi.b	#$40,d0
0000B8F6 6500                       		bcs.s	loc_B01C
0000B8F8 103C 0040                  		move.b	#$40,d0
0000B8FC                            
0000B8FC                            loc_B01C:
0000B8FC 1140 0034                  		move.b	d0,$34(a0)
0000B900 4EB9 0000 2D28             		jsr	(CalcSine).l
0000B906 E848                       		lsr.w	#4,d0
0000B908 3200                       		move.w	d0,d1
0000B90A D068 002C                  		add.w	$2C(a0),d0
0000B90E 3140 000C                  		move.w	d0,$C(a0)
0000B912 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B918 6600                       		bne.s	loc_B07A
0000B91A 4A28 0035                  		tst.b	$35(a0)
0000B91E 6600                       		bne.s	loc_B07A
0000B920 117C 0001 0035             		move.b	#1,$35(a0)
0000B926 6100 0000                  		bsr.w	SingleObjLoad2
0000B92A 6600                       		bne.s	loc_B07A
0000B92C 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B930 3368 0008 0008             		move.w	8(a0),8(a1)
0000B936 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B93C 5069 002C                  		addq.w	#8,$2C(a1)
0000B940 5769 002C                  		subq.w	#3,$2C(a1)
0000B944 0469 0040 0008             		subi.w	#$40,8(a1)
0000B94A 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B950 2348 0038                  		move.l	a0,$38(a1)
0000B954 2448                       		movea.l	a0,a2
0000B956 6100                       		bsr.s	sub_B09C
0000B958                            
0000B958                            loc_B07A:
0000B958 7400                       		moveq	#0,d2
0000B95A 45E8 0036                  		lea	$36(a0),a2
0000B95E 141A                       		move.b	(a2)+,d2
0000B960 5302                       		subq.b	#1,d2
0000B962 6500                       		bcs.s	locret_B09A
0000B964                            
0000B964                            loc_B086:
0000B964 7000                       		moveq	#0,d0
0000B966 101A                       		move.b	(a2)+,d0
0000B968 ED48                       		lsl.w	#6,d0
0000B96A 0640 D000                  		addi.w	#-$3000,d0
0000B96E 3240                       		movea.w	d0,a1
0000B970 3341 003C                  		move.w	d1,$3C(a1)
0000B974 51CA FFEE                  		dbf	d2,loc_B086
0000B978                            
0000B978                            locret_B09A:
0000B978 4E75                       		rts	
0000B97A                            
0000B97A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B97A                            
0000B97A                            
0000B97A                            sub_B09C:
0000B97A 45EA 0036                  		lea	$36(a2),a2
0000B97E 7000                       		moveq	#0,d0
0000B980 1012                       		move.b	(a2),d0
0000B982 5212                       		addq.b	#1,(a2)
0000B984 45F2 0001                  		lea	1(a2,d0.w),a2
0000B988 3009                       		move.w	a1,d0
0000B98A 0440 D000                  		subi.w	#-$3000,d0
0000B98E EC48                       		lsr.w	#6,d0
0000B990 0240 007F                  		andi.w	#$7F,d0
0000B994 1480                       		move.b	d0,(a2)
0000B996 4E75                       		rts	
0000B998                            ; End of function sub_B09C
0000B998                            
0000B998                            ; ===========================================================================
0000B998                            
0000B998                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B998 4A28 0035                  		tst.b	$35(a0)
0000B99C 6700                       		beq.s	loc_B0C6
0000B99E 4A28 0001                  		tst.b	1(a0)
0000B9A2 6A00                       		bpl.s	Obj2F_DelFlames
0000B9A4                            
0000B9A4                            loc_B0C6:
0000B9A4 3028 002A                  		move.w	$2A(a0),d0
0000B9A8 0240 FF80                  		andi.w	#$FF80,d0
0000B9AC 3238 F700                  		move.w	($FFFFF700).w,d1
0000B9B0 0441 0080                  		subi.w	#$80,d1
0000B9B4 0241 FF80                  		andi.w	#$FF80,d1
0000B9B8 9041                       		sub.w	d1,d0
0000B9BA 0C40 0280                  		cmpi.w	#$280,d0
0000B9BE 6200 0000                  		bhi.w	DeleteObject
0000B9C2 4E75                       		rts	
0000B9C4                            ; ===========================================================================
0000B9C4                            
0000B9C4                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B9C4 7400                       		moveq	#0,d2
0000B9C6                            
0000B9C6                            loc_B0E8:
0000B9C6 45E8 0036                  		lea	$36(a0),a2
0000B9CA 1412                       		move.b	(a2),d2
0000B9CC 421A                       		clr.b	(a2)+
0000B9CE 5302                       		subq.b	#1,d2
0000B9D0 6500                       		bcs.s	locret_B116
0000B9D2                            
0000B9D2                            loc_B0F4:
0000B9D2 7000                       		moveq	#0,d0
0000B9D4 1012                       		move.b	(a2),d0
0000B9D6 421A                       		clr.b	(a2)+
0000B9D8 ED48                       		lsl.w	#6,d0
0000B9DA 0640 D000                  		addi.w	#-$3000,d0
0000B9DE 3240                       		movea.w	d0,a1
0000B9E0 6100 0000                  		bsr.w	DeleteObject2
0000B9E4 51CA FFEC                  		dbf	d2,loc_B0F4
0000B9E8 117C 0000 0035             		move.b	#0,$35(a0)
0000B9EE 117C 0000 0034             		move.b	#0,$34(a0)
0000B9F4                            
0000B9F4                            locret_B116:
0000B9F4 4E75                       		rts	
0000B9F6                            ; ===========================================================================
0000B9F6                            ; ---------------------------------------------------------------------------
0000B9F6                            ; Collision data for large moving platforms (MZ)
0000B9F6                            ; ---------------------------------------------------------------------------
0000B9F6                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BA42                            		even
0000BA42                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BA6E                            		even
0000BA6E                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BABA                            		even
0000BABA                            ; ===========================================================================
0000BABA                            ; ---------------------------------------------------------------------------
0000BABA                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BABA                            ; (appears when	you walk on sinking platforms)
0000BABA                            ; ---------------------------------------------------------------------------
0000BABA                            
0000BABA                            Obj35:					; XREF: Obj_Index
0000BABA 7000                       		moveq	#0,d0
0000BABC 1028 0024                  		move.b	$24(a0),d0
0000BAC0 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BAC4 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BAC8                            ; ===========================================================================
0000BAC8 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BACA 0000                       		dc.w loc_B238-Obj35_Index
0000BACC 0000                       		dc.w Obj35_Move-Obj35_Index
0000BACE                            ; ===========================================================================
0000BACE                            
0000BACE                            Obj35_Main:				; XREF: Obj35_Index
0000BACE 5428 0024                  		addq.b	#2,$24(a0)
0000BAD2 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BADA 317C 0345 0002             		move.w	#$345,2(a0)
0000BAE0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BAE6 117C 0004 0001             		move.b	#4,1(a0)
0000BAEC 117C 0001 0018             		move.b	#1,$18(a0)
0000BAF2 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BAF8 117C 0008 0019             		move.b	#8,$19(a0)
0000BAFE 303C 00C8                  		move.w	#$C8,d0
0000BB02 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play flame sound
0000BB08 4A28 0028                  		tst.b	$28(a0)
0000BB0C 6700                       		beq.s	loc_B238
0000BB0E 5428 0024                  		addq.b	#2,$24(a0)
0000BB12 6000 0000                  		bra.w	Obj35_Move
0000BB16                            ; ===========================================================================
0000BB16                            
0000BB16                            loc_B238:				; XREF: Obj35_Index
0000BB16 2268 0030                  		movea.l	$30(a0),a1
0000BB1A 3228 0008                  		move.w	8(a0),d1
0000BB1E 9268 002A                  		sub.w	$2A(a0),d1
0000BB22 0641 000C                  		addi.w	#$C,d1
0000BB26 3001                       		move.w	d1,d0
0000BB28 E248                       		lsr.w	#1,d0
0000BB2A 1031 0000                  		move.b	(a1,d0.w),d0
0000BB2E 4440                       		neg.w	d0
0000BB30 D068 002C                  		add.w	$2C(a0),d0
0000BB34 3400                       		move.w	d0,d2
0000BB36 D068 003C                  		add.w	$3C(a0),d0
0000BB3A 3140 000C                  		move.w	d0,$C(a0)
0000BB3E 0C41 0084                  		cmpi.w	#$84,d1
0000BB42 6400                       		bcc.s	loc_B2B0
0000BB44 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BB4C 0C41 0080                  		cmpi.w	#$80,d1
0000BB50 6400                       		bcc.s	loc_B2B0
0000BB52 2028 0008                  		move.l	8(a0),d0
0000BB56 0680 0008 0000             		addi.l	#$80000,d0
0000BB5C 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BB62 6600                       		bne.s	loc_B2B0
0000BB64 6100 0000                  		bsr.w	SingleObjLoad2
0000BB68 6600                       		bne.s	loc_B2B0
0000BB6A 12BC 0035                  		move.b	#$35,0(a1)
0000BB6E 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB74 3342 002C                  		move.w	d2,$2C(a1)
0000BB78 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BB7E 137C 0001 0028             		move.b	#1,$28(a1)
0000BB84 2468 0038                  		movea.l	$38(a0),a2
0000BB88 6100 FDF0                  		bsr.w	sub_B09C
0000BB8C                            
0000BB8C                            loc_B2B0:
0000BB8C 6000                       		bra.s	Obj35_Animate
0000BB8E                            ; ===========================================================================
0000BB8E                            
0000BB8E                            Obj35_Move:				; XREF: Obj35_Index
0000BB8E 3028 002C                  		move.w	$2C(a0),d0
0000BB92 D068 003C                  		add.w	$3C(a0),d0
0000BB96 3140 000C                  		move.w	d0,$C(a0)
0000BB9A                            
0000BB9A                            Obj35_Animate:				; XREF: loc_B238
0000BB9A 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BBA0 6100 F4AA                  		bsr.w	AnimateSprite
0000BBA4 6000 0000                  		bra.w	DisplaySprite
0000BBA8                            ; ===========================================================================
0000BBA8                            Ani_obj35:
0000BBA8                            	include "_anim\obj35.asm"
0000BBA8                            ; ---------------------------------------------------------------------------
0000BBA8                            ; Animation script - fireball that sits on the	floor (MZ)
0000BBA8                            ; ---------------------------------------------------------------------------
0000BBA8 0000                       		dc.w byte_B2CE-Ani_obj35
0000BBAA 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BBB0                            		even
0000BBB0                            		even
0000BBB0                            
0000BBB0                            ; ---------------------------------------------------------------------------
0000BBB0                            ; Sprite mappings - large moving platforms (MZ)
0000BBB0                            ; ---------------------------------------------------------------------------
0000BBB0                            Map_obj2F:
0000BBB0                            	include "_maps\obj2F.asm"
0000BBB0                            ; ---------------------------------------------------------------------------
0000BBB0                            ; Sprite mappings - large moving platforms (MZ)
0000BBB0                            ; ---------------------------------------------------------------------------
0000BBB0 0000                       		dc.w byte_B2DA-Map_obj2F
0000BBB2 0000                       		dc.w byte_B31C-Map_obj2F
0000BBB4 0000                       		dc.w byte_B34F-Map_obj2F
0000BBB6 0D                         byte_B2DA:	dc.b $D
0000BBB7 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BBBC F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BBC1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BBC6 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BBCB F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BBD0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BBD5 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BBDA D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BBDF F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BBE4 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BBE9 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BBEE D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BBF3 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BBF8 0A                         byte_B31C:	dc.b $A
0000BBF9 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BBFE F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BC03 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BC08 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BC0D E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BC12 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC17 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BC1C E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BC21 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BC26 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BC2B 06                         byte_B34F:	dc.b 6
0000BC2C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BC31 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC36 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BC3B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BC40 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC45 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BC4A                            		even
0000BC4A                            		even
0000BC4A                            
0000BC4A                            ; ---------------------------------------------------------------------------
0000BC4A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BC4A                            ; ---------------------------------------------------------------------------
0000BC4A                            Map_obj14:
0000BC4A                            	include "_maps\obj14.asm"
0000BC4A                            ; --------------------------------------------------------------------------------
0000BC4A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BC4A                            ; --------------------------------------------------------------------------------
0000BC4A                            
0000BC4A                            SME_C6wT7:	
0000BC4A 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BC4E 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BC52 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BC56 01                         SME_C6wT7_C:	dc.b 1	
0000BC57 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BC5C 01                         SME_C6wT7_12:	dc.b 1	
0000BC5D E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BC62 02                         SME_C6wT7_18:	dc.b 2	
0000BC63 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BC68 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BC6D 01                         SME_C6wT7_23:	dc.b 1	
0000BC6E F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BC73 01                         SME_C6wT7_29:	dc.b 1	
0000BC74 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BC79 01                         SME_C6wT7_2F:	dc.b 1	
0000BC7A F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BC80 00                         		even
0000BC80 00                         		even
0000BC80                            
0000BC80                            ; ===========================================================================
0000BC80                            ; ---------------------------------------------------------------------------
0000BC80                            ; Object 30 - large green glassy blocks	(MZ)
0000BC80                            ; ---------------------------------------------------------------------------
0000BC80                            
0000BC80                            Obj30:					; XREF: Obj_Index
0000BC80 7000                       		moveq	#0,d0
0000BC82 1028 0024                  		move.b	$24(a0),d0
0000BC86 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BC8A 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BC8E 3028 0008                  		move.w	8(a0),d0
0000BC92 0240 FF80                  		andi.w	#$FF80,d0
0000BC96 3238 F700                  		move.w	($FFFFF700).w,d1
0000BC9A 0441 0080                  		subi.w	#$80,d1
0000BC9E 0241 FF80                  		andi.w	#$FF80,d1
0000BCA2 9041                       		sub.w	d1,d0
0000BCA4 0C40 0280                  		cmpi.w	#$280,d0
0000BCA8 6200 0000                  		bhi.w	Obj30_Delete
0000BCAC 6000 0000                  		bra.w	DisplaySprite
0000BCB0                            ; ===========================================================================
0000BCB0                            
0000BCB0                            Obj30_Delete:
0000BCB0 6000 0000                  		bra.w	DeleteObject
0000BCB4                            ; ===========================================================================
0000BCB4 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BCB6 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BCB8 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BCBA 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BCBC 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BCBE                            
0000BCBE 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BCC1 0400 01                    		dc.b 4,	0, 1
0000BCC4 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BCC7 0800 01                    		dc.b 8,	0, 1
0000BCCA                            ; ===========================================================================
0000BCCA                            
0000BCCA                            Obj30_Main:				; XREF: Obj30_Index
0000BCCA 45F9 0000 BCBE             		lea	(Obj30_Vars1).l,a2
0000BCD0 7201                       		moveq	#1,d1
0000BCD2 117C 0048 0016             		move.b	#$48,$16(a0)
0000BCD8 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BCDE 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BCE0 45F9 0000 BCC4             		lea	(Obj30_Vars2).l,a2
0000BCE6 7201                       		moveq	#1,d1
0000BCE8 117C 0038 0016             		move.b	#$38,$16(a0)
0000BCEE                            
0000BCEE                            loc_B40C:
0000BCEE 2248                       		movea.l	a0,a1
0000BCF0 6000                       		bra.s	Obj30_Load	; load main object
0000BCF2                            ; ===========================================================================
0000BCF2                            
0000BCF2                            Obj30_Loop:
0000BCF2 6100 0000                  		bsr.w	SingleObjLoad2
0000BCF6 6600                       		bne.s	loc_B480
0000BCF8                            
0000BCF8                            Obj30_Load:				; XREF: Obj30_Main
0000BCF8 135A 0024                  		move.b	(a2)+,$24(a1)
0000BCFC 12BC 0030                  		move.b	#$30,0(a1)
0000BD00 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD06 101A                       		move.b	(a2)+,d0
0000BD08 4880                       		ext.w	d0
0000BD0A D068 000C                  		add.w	$C(a0),d0
0000BD0E 3340 000C                  		move.w	d0,$C(a1)
0000BD12 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BD1A 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BD20 137C 0004 0001             		move.b	#4,1(a1)
0000BD26 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BD2C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BD32 137C 0020 0019             		move.b	#$20,$19(a1)
0000BD38 137C 0004 0018             		move.b	#4,$18(a1)
0000BD3E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BD42 2348 003C                  		move.l	a0,$3C(a1)
0000BD46 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BD4A                            
0000BD4A 137C 0010 0019             		move.b	#$10,$19(a1)
0000BD50 137C 0003 0018             		move.b	#3,$18(a1)
0000BD56 5029 0028                  		addq.b	#8,$28(a1)
0000BD5A 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BD60                            
0000BD60                            loc_B480:
0000BD60 317C 0090 0032             		move.w	#$90,$32(a0)
0000BD66 08E8 0004 0001             		bset	#4,1(a0)
0000BD6C                            
0000BD6C                            Obj30_Block012:				; XREF: Obj30_Index
0000BD6C 6100 0000                  		bsr.w	Obj30_Types
0000BD70 323C 002B                  		move.w	#$2B,d1
0000BD74 343C 0048                  		move.w	#$48,d2
0000BD78 363C 0049                  		move.w	#$49,d3
0000BD7C 3828 0008                  		move.w	8(a0),d4
0000BD80 6000 0000                  		bra.w	SolidObject
0000BD84                            ; ===========================================================================
0000BD84                            
0000BD84                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BD84 2268 003C                  		movea.l	$3C(a0),a1
0000BD88 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BD8E 6000 0000                  		bra.w	Obj30_Types
0000BD92                            ; ===========================================================================
0000BD92                            
0000BD92                            Obj30_Block34:				; XREF: Obj30_Index
0000BD92 6100 0000                  		bsr.w	Obj30_Types
0000BD96 323C 002B                  		move.w	#$2B,d1
0000BD9A 343C 0038                  		move.w	#$38,d2
0000BD9E 363C 0039                  		move.w	#$39,d3
0000BDA2 3828 0008                  		move.w	8(a0),d4
0000BDA6 6000 0000                  		bra.w	SolidObject
0000BDAA                            ; ===========================================================================
0000BDAA                            
0000BDAA                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BDAA 2268 003C                  		movea.l	$3C(a0),a1
0000BDAE 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BDB4 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BDBA 6000 0002                  		bra.w	*+4
0000BDBE                            
0000BDBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BDBE                            
0000BDBE                            
0000BDBE                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BDBE 7000                       		moveq	#0,d0
0000BDC0 1028 0028                  		move.b	$28(a0),d0
0000BDC4 0240 0007                  		andi.w	#7,d0
0000BDC8 D040                       		add.w	d0,d0
0000BDCA 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BDCE 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BDD2                            ; End of function Obj30_Types
0000BDD2                            
0000BDD2                            ; ===========================================================================
0000BDD2 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BDD4 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BDD6 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BDD8 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BDDA 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BDDC                            ; ===========================================================================
0000BDDC                            
0000BDDC                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BDDC 4E75                       		rts	
0000BDDE                            ; ===========================================================================
0000BDDE                            
0000BDDE                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BDDE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BDE2 323C 0040                  		move.w	#$40,d1
0000BDE6 6000                       		bra.s	loc_B514
0000BDE8                            ; ===========================================================================
0000BDE8                            
0000BDE8                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BDE8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BDEC 323C 0040                  		move.w	#$40,d1
0000BDF0 4440                       		neg.w	d0
0000BDF2 D041                       		add.w	d1,d0
0000BDF4                            
0000BDF4                            loc_B514:				; XREF: Obj30_Type01
0000BDF4 0828 0003 0028             		btst	#3,$28(a0)
0000BDFA 6700                       		beq.s	loc_B526
0000BDFC 4440                       		neg.w	d0
0000BDFE D041                       		add.w	d1,d0
0000BE00 E208                       		lsr.b	#1,d0
0000BE02 0640 0020                  		addi.w	#$20,d0
0000BE06                            
0000BE06                            loc_B526:
0000BE06 6000 0000                  		bra.w	loc_B5EE
0000BE0A                            ; ===========================================================================
0000BE0A                            
0000BE0A                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BE0A 0828 0003 0028             		btst	#3,$28(a0)
0000BE10 6700                       		beq.s	loc_B53E
0000BE12 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE16 0440 0010                  		subi.w	#$10,d0
0000BE1A 6000 0000                  		bra.w	loc_B5EE
0000BE1E                            ; ===========================================================================
0000BE1E                            
0000BE1E                            loc_B53E:
0000BE1E 0828 0003 0022             		btst	#3,$22(a0)
0000BE24 6600                       		bne.s	loc_B54E
0000BE26 08A8 0000 0034             		bclr	#0,$34(a0)
0000BE2C 6000                       		bra.s	loc_B582
0000BE2E                            ; ===========================================================================
0000BE2E                            
0000BE2E                            loc_B54E:
0000BE2E 4A28 0034                  		tst.b	$34(a0)
0000BE32 6600                       		bne.s	loc_B582
0000BE34 117C 0001 0034             		move.b	#1,$34(a0)
0000BE3A 08E8 0000 0035             		bset	#0,$35(a0)
0000BE40 6700                       		beq.s	loc_B582
0000BE42 08E8 0007 0034             		bset	#7,$34(a0)
0000BE48 317C 0010 0036             		move.w	#$10,$36(a0)
0000BE4E 117C 000A 0038             		move.b	#$A,$38(a0)
0000BE54 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BE5A 6600                       		bne.s	loc_B582
0000BE5C 317C 0040 0036             		move.w	#$40,$36(a0)
0000BE62                            
0000BE62                            loc_B582:
0000BE62 4A28 0034                  		tst.b	$34(a0)
0000BE66 6A00                       		bpl.s	loc_B5AA
0000BE68 4A28 0038                  		tst.b	$38(a0)
0000BE6C 6700                       		beq.s	loc_B594
0000BE6E 5328 0038                  		subq.b	#1,$38(a0)
0000BE72 6600                       		bne.s	loc_B5AA
0000BE74                            
0000BE74                            loc_B594:
0000BE74 4A68 0032                  		tst.w	$32(a0)
0000BE78 6700                       		beq.s	loc_B5A4
0000BE7A 5368 0032                  		subq.w	#1,$32(a0)
0000BE7E 5368 0036                  		subq.w	#1,$36(a0)
0000BE82 6600                       		bne.s	loc_B5AA
0000BE84                            
0000BE84                            loc_B5A4:
0000BE84 08A8 0007 0034             		bclr	#7,$34(a0)
0000BE8A                            
0000BE8A                            loc_B5AA:
0000BE8A 3028 0032                  		move.w	$32(a0),d0
0000BE8E 6000                       		bra.s	loc_B5EE
0000BE90                            ; ===========================================================================
0000BE90                            
0000BE90                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BE90 0828 0003 0028             		btst	#3,$28(a0)
0000BE96 6700                       		beq.s	Obj30_ChkSwitch
0000BE98 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE9C 0440 0010                  		subi.w	#$10,d0
0000BEA0 6000                       		bra.s	loc_B5EE
0000BEA2                            ; ===========================================================================
0000BEA2                            
0000BEA2                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BEA2 4A28 0034                  		tst.b	$34(a0)
0000BEA6 6600                       		bne.s	loc_B5E0
0000BEA8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BEAC 7000                       		moveq	#0,d0
0000BEAE 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BEB2 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BEB4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BEB8 6700                       		beq.s	loc_B5EA	; if not, branch
0000BEBA 117C 0001 0034             		move.b	#1,$34(a0)
0000BEC0                            
0000BEC0                            loc_B5E0:
0000BEC0 4A68 0032                  		tst.w	$32(a0)
0000BEC4 6700                       		beq.s	loc_B5EA
0000BEC6 5568 0032                  		subq.w	#2,$32(a0)
0000BECA                            
0000BECA                            loc_B5EA:
0000BECA 3028 0032                  		move.w	$32(a0),d0
0000BECE                            
0000BECE                            loc_B5EE:
0000BECE 3228 0030                  		move.w	$30(a0),d1
0000BED2 9240                       		sub.w	d0,d1
0000BED4 3141 000C                  		move.w	d1,$C(a0)
0000BED8 4E75                       		rts	
0000BEDA                            ; ===========================================================================
0000BEDA                            ; ---------------------------------------------------------------------------
0000BEDA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BEDA                            ; ---------------------------------------------------------------------------
0000BEDA                            Map_obj30:
0000BEDA                            	include "_maps\obj30.asm"
0000BEDA                            ; ---------------------------------------------------------------------------
0000BEDA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BEDA                            ; ---------------------------------------------------------------------------
0000BEDA 0000                       		dc.w byte_B600-Map_obj30
0000BEDC 0000                       		dc.w byte_B63D-Map_obj30
0000BEDE 0000                       		dc.w byte_B648-Map_obj30
0000BEE0 0C                         byte_B600:	dc.b $C
0000BEE1 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BEE6 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BEEB C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BEF0 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BEF5 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BEFA E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BEFF 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BF04 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BF09 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BF0E 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BF13 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BF18 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BF1D 02                         byte_B63D:	dc.b 2
0000BF1E 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BF23 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BF28 0A                         byte_B648:	dc.b $A
0000BF29 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BF2E C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BF33 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BF38 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BF3D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BF42 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BF47 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BF4C 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BF51 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BF56 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BF5C 00                         		even
0000BF5C 00                         		even
0000BF5C                            
0000BF5C                            ; ===========================================================================
0000BF5C                            ; ---------------------------------------------------------------------------
0000BF5C                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BF5C                            ; ---------------------------------------------------------------------------
0000BF5C                            
0000BF5C                            Obj31:					; XREF: Obj_Index
0000BF5C 7000                       		moveq	#0,d0
0000BF5E 1028 0024                  		move.b	$24(a0),d0
0000BF62 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BF66 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BF6A                            ; ===========================================================================
0000BF6A 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BF6C 0000                       		dc.w loc_B798-Obj31_Index
0000BF6E 0000                       		dc.w loc_B7FE-Obj31_Index
0000BF70 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BF72 0000                       		dc.w loc_B7E2-Obj31_Index
0000BF74                            
0000BF74 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BF76 0100                       		dc.b 1,	0
0000BF78                            
0000BF78 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BF7B 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BF7E 08CC 03                    		dc.b 8,	$CC, 3
0000BF81 06F0 02                    		dc.b 6,	$F0, 2
0000BF84                            
0000BF84 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BF88 5000 7800                  		dc.w $5000, $7800
0000BF8C 3800 5800                  		dc.w $3800, $5800
0000BF90 B800                       		dc.w $B800
0000BF92                            ; ===========================================================================
0000BF92                            
0000BF92                            Obj31_Main:				; XREF: Obj31_Index
0000BF92 7000                       		moveq	#0,d0
0000BF94 1028 0028                  		move.b	$28(a0),d0
0000BF98 6A00                       		bpl.s	loc_B6CE
0000BF9A 0240 007F                  		andi.w	#$7F,d0
0000BF9E D040                       		add.w	d0,d0
0000BFA0 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BFA4 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BFA8 101A                       		move.b	(a2)+,d0
0000BFAA 1140 0028                  		move.b	d0,$28(a0)
0000BFAE                            
0000BFAE                            loc_B6CE:
0000BFAE 0200 000F                  		andi.b	#$F,d0
0000BFB2 D040                       		add.w	d0,d0
0000BFB4 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BFB8 4A40                       		tst.w	d0
0000BFBA 6600                       		bne.s	loc_B6E0
0000BFBC 3142 0032                  		move.w	d2,$32(a0)
0000BFC0                            
0000BFC0                            loc_B6E0:
0000BFC0 45F9 0000 BF78             		lea	(Obj31_Var).l,a2
0000BFC6 2248                       		movea.l	a0,a1
0000BFC8 7203                       		moveq	#3,d1
0000BFCA 6000                       		bra.s	Obj31_MakeStomper
0000BFCC                            ; ===========================================================================
0000BFCC                            
0000BFCC                            Obj31_Loop:
0000BFCC 6100 0000                  		bsr.w	SingleObjLoad2
0000BFD0 6600 0000                  		bne.w	Obj31_SetSize
0000BFD4                            
0000BFD4                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BFD4 135A 0024                  		move.b	(a2)+,$24(a1)
0000BFD8 12BC 0031                  		move.b	#$31,0(a1)
0000BFDC 3368 0008 0008             		move.w	8(a0),8(a1)
0000BFE2 101A                       		move.b	(a2)+,d0
0000BFE4 4880                       		ext.w	d0
0000BFE6 D068 000C                  		add.w	$C(a0),d0
0000BFEA 3340 000C                  		move.w	d0,$C(a1)
0000BFEE 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BFF6 337C 0300 0002             		move.w	#$300,2(a1)
0000BFFC 137C 0004 0001             		move.b	#4,1(a1)
0000C002 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C008 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C00E 137C 0010 0019             		move.b	#$10,$19(a1)
0000C014 3342 0034                  		move.w	d2,$34(a1)
0000C018 137C 0004 0018             		move.b	#4,$18(a1)
0000C01E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C022 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C028 6600                       		bne.s	loc_B76A
0000C02A 5341                       		subq.w	#1,d1
0000C02C 1028 0028                  		move.b	$28(a0),d0
0000C030 0240 00F0                  		andi.w	#$F0,d0
0000C034 0C40 0020                  		cmpi.w	#$20,d0
0000C038 679A                       		beq.s	Obj31_MakeStomper
0000C03A 137C 0038 0019             		move.b	#$38,$19(a1)
0000C040 137C 0090 0020             		move.b	#$90,$20(a1)
0000C046 5241                       		addq.w	#1,d1
0000C048                            
0000C048                            loc_B76A:
0000C048 2348 003C                  		move.l	a0,$3C(a1)
0000C04C 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C050                            
0000C050 137C 0003 0018             		move.b	#3,$18(a1)
0000C056                            
0000C056                            Obj31_SetSize:
0000C056 7000                       		moveq	#0,d0
0000C058 1028 0028                  		move.b	$28(a0),d0
0000C05C E648                       		lsr.w	#3,d0
0000C05E 0200 000E                  		andi.b	#$E,d0
0000C062 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C066 115A 0019                  		move.b	(a2)+,$19(a0)
0000C06A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C06E 6000                       		bra.s	loc_B798
0000C070                            ; ===========================================================================
0000C070 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C072 3009                       		dc.b $30, 9
0000C074 100A                       		dc.b $10, $A
0000C076                            ; ===========================================================================
0000C076                            
0000C076                            loc_B798:				; XREF: Obj31_Index
0000C076 6100 0000                  		bsr.w	Obj31_Types
0000C07A 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C080 7200                       		moveq	#0,d1
0000C082 1228 0019                  		move.b	$19(a0),d1
0000C086 0641 000B                  		addi.w	#$B,d1
0000C08A 343C 000C                  		move.w	#$C,d2
0000C08E 363C 000D                  		move.w	#$D,d3
0000C092 3828 0008                  		move.w	8(a0),d4
0000C096 6100 0000                  		bsr.w	SolidObject
0000C09A 0828 0003 0022             		btst	#3,$22(a0)
0000C0A0 6700                       		beq.s	Obj31_Display
0000C0A2 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C0A8 6400                       		bcc.s	Obj31_Display
0000C0AA 2448                       		movea.l	a0,a2
0000C0AC 41F8 D000                  		lea	($FFFFD000).w,a0
0000C0B0 4EB9 0000 0000             		jsr	KillSonic
0000C0B6 204A                       		movea.l	a2,a0
0000C0B8                            
0000C0B8                            Obj31_Display:
0000C0B8 6100 0000                  		bsr.w	DisplaySprite
0000C0BC 6000 0000                  		bra.w	Obj31_ChkDel
0000C0C0                            ; ===========================================================================
0000C0C0                            
0000C0C0                            loc_B7E2:				; XREF: Obj31_Index
0000C0C0 117C 0080 0016             		move.b	#$80,$16(a0)
0000C0C6 08E8 0004 0001             		bset	#4,1(a0)
0000C0CC 2268 003C                  		movea.l	$3C(a0),a1
0000C0D0 1029 0032                  		move.b	$32(a1),d0
0000C0D4 EA08                       		lsr.b	#5,d0
0000C0D6 5600                       		addq.b	#3,d0
0000C0D8 1140 001A                  		move.b	d0,$1A(a0)
0000C0DC                            
0000C0DC                            loc_B7FE:				; XREF: Obj31_Index
0000C0DC 2268 003C                  		movea.l	$3C(a0),a1
0000C0E0 7000                       		moveq	#0,d0
0000C0E2 1029 0032                  		move.b	$32(a1),d0
0000C0E6 D068 0030                  		add.w	$30(a0),d0
0000C0EA 3140 000C                  		move.w	d0,$C(a0)
0000C0EE                            
0000C0EE                            Obj31_Display2:				; XREF: Obj31_Index
0000C0EE 6100 0000                  		bsr.w	DisplaySprite
0000C0F2                            
0000C0F2                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C0F2 3028 0008                  		move.w	8(a0),d0
0000C0F6 0240 FF80                  		andi.w	#$FF80,d0
0000C0FA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C0FE 0441 0080                  		subi.w	#$80,d1
0000C102 0241 FF80                  		andi.w	#$FF80,d1
0000C106 9041                       		sub.w	d1,d0
0000C108 0C40 0280                  		cmpi.w	#$280,d0
0000C10C 6200 0000                  		bhi.w	DeleteObject
0000C110 4E75                       		rts	
0000C112                            ; ===========================================================================
0000C112                            
0000C112                            Obj31_Types:				; XREF: loc_B798
0000C112 1028 0028                  		move.b	$28(a0),d0
0000C116 0240 000F                  		andi.w	#$F,d0
0000C11A D040                       		add.w	d0,d0
0000C11C 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C120 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C124                            ; ===========================================================================
0000C124 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C126 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C128 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C12A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C12C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C12E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C130 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C132                            ; ===========================================================================
0000C132                            
0000C132                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C132 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C136 7000                       		moveq	#0,d0
0000C138 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C13C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C140 6700                       		beq.s	loc_B8A8	; if not, branch
0000C142 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C146 6A00                       		bpl.s	loc_B872
0000C148 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C14E 6700                       		beq.s	loc_B8A0
0000C150                            
0000C150                            loc_B872:
0000C150 4A68 0032                  		tst.w	$32(a0)
0000C154 6700                       		beq.s	loc_B8A0
0000C156 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C15A 0200 000F                  		andi.b	#$F,d0
0000C15E 6600                       		bne.s	loc_B892
0000C160 4A28 0001                  		tst.b	1(a0)
0000C164 6A00                       		bpl.s	loc_B892
0000C166 303C 00C7                  		move.w	#$C7,d0
0000C16A 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C170                            
0000C170                            loc_B892:
0000C170 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C176 6400                       		bcc.s	Obj31_Restart
0000C178 317C 0000 0032             		move.w	#0,$32(a0)
0000C17E                            
0000C17E                            loc_B8A0:
0000C17E 317C 0000 0012             		move.w	#0,$12(a0)
0000C184 6000                       		bra.s	Obj31_Restart
0000C186                            ; ===========================================================================
0000C186                            
0000C186                            loc_B8A8:				; XREF: Obj31_Type00
0000C186 3228 0034                  		move.w	$34(a0),d1
0000C18A B268 0032                  		cmp.w	$32(a0),d1
0000C18E 6700                       		beq.s	Obj31_Restart
0000C190 3028 0012                  		move.w	$12(a0),d0
0000C194 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C19A D168 0032                  		add.w	d0,$32(a0)
0000C19E B268 0032                  		cmp.w	$32(a0),d1
0000C1A2 6200                       		bhi.s	Obj31_Restart
0000C1A4 3141 0032                  		move.w	d1,$32(a0)
0000C1A8 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C1AE 4A28 0001                  		tst.b	1(a0)
0000C1B2 6A00                       		bpl.s	Obj31_Restart
0000C1B4 303C 00BD                  		move.w	#$BD,d0
0000C1B8 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C1BE                            
0000C1BE                            Obj31_Restart:
0000C1BE 7000                       		moveq	#0,d0
0000C1C0 1028 0032                  		move.b	$32(a0),d0
0000C1C4 D068 0030                  		add.w	$30(a0),d0
0000C1C8 3140 000C                  		move.w	d0,$C(a0)
0000C1CC 4E75                       		rts	
0000C1CE                            ; ===========================================================================
0000C1CE                            
0000C1CE                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C1CE 4A68 0036                  		tst.w	$36(a0)
0000C1D2 6700                       		beq.s	loc_B938
0000C1D4 4A68 0038                  		tst.w	$38(a0)
0000C1D8 6700                       		beq.s	loc_B902
0000C1DA 5368 0038                  		subq.w	#1,$38(a0)
0000C1DE 6000                       		bra.s	loc_B97C
0000C1E0                            ; ===========================================================================
0000C1E0                            
0000C1E0                            loc_B902:
0000C1E0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C1E4 0200 000F                  		andi.b	#$F,d0
0000C1E8 6600                       		bne.s	loc_B91C
0000C1EA 4A28 0001                  		tst.b	1(a0)
0000C1EE 6A00                       		bpl.s	loc_B91C
0000C1F0 303C 00C7                  		move.w	#$C7,d0
0000C1F4 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C1FA                            
0000C1FA                            loc_B91C:
0000C1FA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C200 6400                       		bcc.s	loc_B97C
0000C202 317C 0000 0032             		move.w	#0,$32(a0)
0000C208 317C 0000 0012             		move.w	#0,$12(a0)
0000C20E 317C 0000 0036             		move.w	#0,$36(a0)
0000C214 6000                       		bra.s	loc_B97C
0000C216                            ; ===========================================================================
0000C216                            
0000C216                            loc_B938:				; XREF: Obj31_Type01
0000C216 3228 0034                  		move.w	$34(a0),d1
0000C21A B268 0032                  		cmp.w	$32(a0),d1
0000C21E 6700                       		beq.s	loc_B97C
0000C220 3028 0012                  		move.w	$12(a0),d0
0000C224 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C22A D168 0032                  		add.w	d0,$32(a0)
0000C22E B268 0032                  		cmp.w	$32(a0),d1
0000C232 6200                       		bhi.s	loc_B97C
0000C234 3141 0032                  		move.w	d1,$32(a0)
0000C238 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C23E 317C 0001 0036             		move.w	#1,$36(a0)
0000C244 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C24A 4A28 0001                  		tst.b	1(a0)
0000C24E 6A00                       		bpl.s	loc_B97C
0000C250 303C 00BD                  		move.w	#$BD,d0
0000C254 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C25A                            
0000C25A                            loc_B97C:
0000C25A 6000 FF62                  		bra.w	Obj31_Restart
0000C25E                            ; ===========================================================================
0000C25E                            
0000C25E                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C25E 3038 D008                  		move.w	($FFFFD008).w,d0
0000C262 9068 0008                  		sub.w	8(a0),d0
0000C266 6400                       		bcc.s	loc_B98C
0000C268 4440                       		neg.w	d0
0000C26A                            
0000C26A                            loc_B98C:
0000C26A 0C40 0090                  		cmpi.w	#$90,d0
0000C26E 6400                       		bcc.s	loc_B996
0000C270 5228 0028                  		addq.b	#1,$28(a0)
0000C274                            
0000C274                            loc_B996:
0000C274 6000 FF48                  		bra.w	Obj31_Restart
0000C278                            ; ===========================================================================
0000C278                            ; ---------------------------------------------------------------------------
0000C278                            ; Object 45 - spiked metal block from beta version (MZ)
0000C278                            ; ---------------------------------------------------------------------------
0000C278                            
0000C278                            Obj45:					; XREF: Obj_Index
0000C278 7000                       		moveq	#0,d0
0000C27A 1028 0024                  		move.b	$24(a0),d0
0000C27E 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C282 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C286                            ; ===========================================================================
0000C286 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C288 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C28A 0000                       		dc.w loc_BA8E-Obj45_Index
0000C28C 0000                       		dc.w Obj45_Display-Obj45_Index
0000C28E 0000                       		dc.w loc_BA7A-Obj45_Index
0000C290                            
0000C290 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C293 04E4 01                    		dc.b	4, $E4,	  1
0000C296 0834 03                    		dc.b	8, $34,	  3
0000C299 0628 02                    		dc.b	6, $28,	  2
0000C29C                            
0000C29C 3800                       word_B9BE:	dc.w $3800
0000C29E A000                       		dc.w -$6000
0000C2A0 5000                       		dc.w $5000
0000C2A2                            ; ===========================================================================
0000C2A2                            
0000C2A2                            Obj45_Main:				; XREF: Obj45_Index
0000C2A2 7000                       		moveq	#0,d0
0000C2A4 1028 0028                  		move.b	$28(a0),d0
0000C2A8 D040                       		add.w	d0,d0
0000C2AA 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C2AE 45F9 0000 C290             		lea	(Obj45_Var).l,a2
0000C2B4 2248                       		movea.l	a0,a1
0000C2B6 7203                       		moveq	#3,d1
0000C2B8 6000                       		bra.s	Obj45_Load
0000C2BA                            ; ===========================================================================
0000C2BA                            
0000C2BA                            Obj45_Loop:
0000C2BA 6100 0000                  		bsr.w	SingleObjLoad2
0000C2BE 6600                       		bne.s	loc_BA52
0000C2C0                            
0000C2C0                            Obj45_Load:				; XREF: Obj45_Main
0000C2C0 135A 0024                  		move.b	(a2)+,$24(a1)
0000C2C4 12BC 0045                  		move.b	#$45,0(a1)
0000C2C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C2CE 101A                       		move.b	(a2)+,d0
0000C2D0 4880                       		ext.w	d0
0000C2D2 D068 0008                  		add.w	8(a0),d0
0000C2D6 3340 0008                  		move.w	d0,8(a1)
0000C2DA 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C2E2 337C 0300 0002             		move.w	#$300,2(a1)
0000C2E8 137C 0004 0001             		move.b	#4,1(a1)
0000C2EE 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C2F4 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C2FA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C300 137C 0020 0019             		move.b	#$20,$19(a1)
0000C306 3342 0034                  		move.w	d2,$34(a1)
0000C30A 137C 0004 0018             		move.b	#4,$18(a1)
0000C310 0C12 0001                  		cmpi.b	#1,(a2)
0000C314 6600                       		bne.s	loc_BA40
0000C316 137C 0091 0020             		move.b	#$91,$20(a1)
0000C31C                            
0000C31C                            loc_BA40:
0000C31C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C320 2348 003C                  		move.l	a0,$3C(a1)
0000C324 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C328                            
0000C328 137C 0003 0018             		move.b	#3,$18(a1)
0000C32E                            
0000C32E                            loc_BA52:
0000C32E 117C 0010 0019             		move.b	#$10,$19(a0)
0000C334                            
0000C334                            Obj45_Solid:				; XREF: Obj45_Index
0000C334 3F28 0008                  		move.w	8(a0),-(sp)
0000C338 6100 0000                  		bsr.w	Obj45_Move
0000C33C 323C 0017                  		move.w	#$17,d1
0000C340 343C 0020                  		move.w	#$20,d2
0000C344 363C 0020                  		move.w	#$20,d3
0000C348 381F                       		move.w	(sp)+,d4
0000C34A 6100 0000                  		bsr.w	SolidObject
0000C34E 6100 0000                  		bsr.w	DisplaySprite
0000C352 6000 0000                  		bra.w	Obj45_ChkDel
0000C356                            ; ===========================================================================
0000C356                            
0000C356                            loc_BA7A:				; XREF: Obj45_Index
0000C356 2268 003C                  		movea.l	$3C(a0),a1
0000C35A 1029 0032                  		move.b	$32(a1),d0
0000C35E 0600 0010                  		addi.b	#$10,d0
0000C362 EA08                       		lsr.b	#5,d0
0000C364 5600                       		addq.b	#3,d0
0000C366 1140 001A                  		move.b	d0,$1A(a0)
0000C36A                            
0000C36A                            loc_BA8E:				; XREF: Obj45_Index
0000C36A 2268 003C                  		movea.l	$3C(a0),a1
0000C36E 7000                       		moveq	#0,d0
0000C370 1029 0032                  		move.b	$32(a1),d0
0000C374 4440                       		neg.w	d0
0000C376 D068 0030                  		add.w	$30(a0),d0
0000C37A 3140 0008                  		move.w	d0,8(a0)
0000C37E                            
0000C37E                            Obj45_Display:				; XREF: Obj45_Index
0000C37E 6100 0000                  		bsr.w	DisplaySprite
0000C382                            
0000C382                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C382 3028 003A                  		move.w	$3A(a0),d0
0000C386 0240 FF80                  		andi.w	#$FF80,d0
0000C38A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C38E 0441 0080                  		subi.w	#$80,d1
0000C392 0241 FF80                  		andi.w	#$FF80,d1
0000C396 9041                       		sub.w	d1,d0
0000C398 0C40 0280                  		cmpi.w	#$280,d0
0000C39C 6200 0000                  		bhi.w	DeleteObject
0000C3A0 4E75                       		rts	
0000C3A2                            
0000C3A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C3A2                            
0000C3A2                            
0000C3A2                            Obj45_Move:				; XREF: Obj45_Solid
0000C3A2 7000                       		moveq	#0,d0
0000C3A4 1028 0028                  		move.b	$28(a0),d0
0000C3A8 D040                       		add.w	d0,d0
0000C3AA 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C3AE 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C3B2                            ; End of function Obj45_Move
0000C3B2                            
0000C3B2                            ; ===========================================================================
0000C3B2 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C3B4 0000                       		dc.w loc_BADA-off_BAD6
0000C3B6                            ; ===========================================================================
0000C3B6                            
0000C3B6                            loc_BADA:				; XREF: off_BAD6
0000C3B6 4A68 0036                  		tst.w	$36(a0)
0000C3BA 6700                       		beq.s	loc_BB08
0000C3BC 4A68 0038                  		tst.w	$38(a0)
0000C3C0 6700                       		beq.s	loc_BAEC
0000C3C2 5368 0038                  		subq.w	#1,$38(a0)
0000C3C6 6000                       		bra.s	loc_BB3C
0000C3C8                            ; ===========================================================================
0000C3C8                            
0000C3C8                            loc_BAEC:
0000C3C8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C3CE 6400                       		bcc.s	loc_BB3C
0000C3D0 317C 0000 0032             		move.w	#0,$32(a0)
0000C3D6 317C 0000 0010             		move.w	#0,$10(a0)
0000C3DC 317C 0000 0036             		move.w	#0,$36(a0)
0000C3E2 6000                       		bra.s	loc_BB3C
0000C3E4                            ; ===========================================================================
0000C3E4                            
0000C3E4                            loc_BB08:				; XREF: loc_BADA
0000C3E4 3228 0034                  		move.w	$34(a0),d1
0000C3E8 B268 0032                  		cmp.w	$32(a0),d1
0000C3EC 6700                       		beq.s	loc_BB3C
0000C3EE 3028 0010                  		move.w	$10(a0),d0
0000C3F2 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C3F8 D168 0032                  		add.w	d0,$32(a0)
0000C3FC B268 0032                  		cmp.w	$32(a0),d1
0000C400 6200                       		bhi.s	loc_BB3C
0000C402 3141 0032                  		move.w	d1,$32(a0)
0000C406 317C 0000 0010             		move.w	#0,$10(a0)
0000C40C 317C 0001 0036             		move.w	#1,$36(a0)
0000C412 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C418                            
0000C418                            loc_BB3C:
0000C418 7000                       		moveq	#0,d0
0000C41A 1028 0032                  		move.b	$32(a0),d0
0000C41E 4440                       		neg.w	d0
0000C420 D068 0030                  		add.w	$30(a0),d0
0000C424 3140 0008                  		move.w	d0,8(a0)
0000C428 4E75                       		rts	
0000C42A                            ; ===========================================================================
0000C42A                            ; ---------------------------------------------------------------------------
0000C42A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C42A                            ; ---------------------------------------------------------------------------
0000C42A                            Map_obj31:
0000C42A                            	include "_maps\obj31.asm"
0000C42A                            ; ---------------------------------------------------------------------------
0000C42A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C42A                            ; ---------------------------------------------------------------------------
0000C42A 0000                       		dc.w byte_BB64-Map_obj31
0000C42C 0000                       		dc.w byte_BB7E-Map_obj31
0000C42E 0000                       		dc.w byte_BB98-Map_obj31
0000C430 0000                       		dc.w byte_BB9E-Map_obj31
0000C432 0000                       		dc.w byte_BBA9-Map_obj31
0000C434 0000                       		dc.w byte_BBBE-Map_obj31
0000C436 0000                       		dc.w byte_BBDD-Map_obj31
0000C438 0000                       		dc.w byte_BC06-Map_obj31
0000C43A 0000                       		dc.w byte_BC06-Map_obj31
0000C43C 0000                       		dc.w byte_BC39-Map_obj31
0000C43E 0000                       		dc.w byte_BC53-Map_obj31
0000C440 05                         byte_BB64:	dc.b 5
0000C441 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C446 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C44B EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C450 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C455 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C45A 05                         byte_BB7E:	dc.b 5
0000C45B F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C460 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C465 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C46A F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C46F F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C474 01                         byte_BB98:	dc.b 1
0000C475 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C47A 02                         byte_BB9E:	dc.b 2
0000C47B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C480 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C485 04                         byte_BBA9:	dc.b 4
0000C486 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C48B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C490 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C495 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C49A 06                         byte_BBBE:	dc.b 6
0000C49B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4A0 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4A5 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4AA F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4AF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4B4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4B9 08                         byte_BBDD:	dc.b 8
0000C4BA A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C4BF B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C4C4 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4C9 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4CE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4D3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4D8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4DD 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4E2 0A                         byte_BC06:	dc.b $A
0000C4E3 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C4E8 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C4ED A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C4F2 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C4F7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4FC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C501 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C506 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C50B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C510 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C515 05                         byte_BC39:	dc.b 5
0000C516 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C51B F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C520 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C525 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C52A EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C52F 01                         byte_BC53:	dc.b 1
0000C530 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C536 00                         		even
0000C536 00                         		even
0000C536                            
0000C536                            ; ---------------------------------------------------------------------------
0000C536                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C536                            ; ---------------------------------------------------------------------------
0000C536                            Map_obj45:
0000C536                            	include "_maps\obj45.asm"
0000C536                            ; ---------------------------------------------------------------------------
0000C536                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C536                            ; ---------------------------------------------------------------------------
0000C536 0000                       		dc.w byte_BC6C-Map_obj45
0000C538 0000                       		dc.w byte_BC7C-Map_obj45
0000C53A 0000                       		dc.w byte_BC8C-Map_obj45
0000C53C 0000                       		dc.w byte_BC92-Map_obj45
0000C53E 0000                       		dc.w byte_BC9D-Map_obj45
0000C540 0000                       		dc.w byte_BCB2-Map_obj45
0000C542 0000                       		dc.w byte_BCD1-Map_obj45
0000C544 0000                       		dc.w byte_BCFA-Map_obj45
0000C546 0000                       		dc.w byte_BCFA-Map_obj45
0000C548 03                         byte_BC6C:	dc.b 3
0000C549 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C54E 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C553 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C558 03                         byte_BC7C:	dc.b 3
0000C559 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C55E FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C563 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C568 01                         byte_BC8C:	dc.b 1
0000C569 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C56E 02                         byte_BC92:	dc.b 2
0000C56F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C574 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C579 04                         byte_BC9D:	dc.b 4
0000C57A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C57F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C584 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C589 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C58E 06                         byte_BCB2:	dc.b 6
0000C58F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C594 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C599 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C59E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5A3 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5A8 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5AD 08                         byte_BCD1:	dc.b 8
0000C5AE F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5B3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5B8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5BD F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5C2 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5C7 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5CC F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C5D1 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C5D6 08                         byte_BCFA:	dc.b 8
0000C5D7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5DC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5E1 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5E6 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5EB F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5F0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5F5 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C5FA F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C5FF F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C604 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C60A 00                         		even
0000C60A 00                         		even
0000C60A                            
0000C60A                            ; ===========================================================================
0000C60A                            ; ---------------------------------------------------------------------------
0000C60A                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C60A                            ; ---------------------------------------------------------------------------
0000C60A                            
0000C60A                            Obj32:					; XREF: Obj_Index
0000C60A 7000                       		moveq	#0,d0
0000C60C 1028 0024                  		move.b	$24(a0),d0
0000C610 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C614 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C618                            ; ===========================================================================
0000C618 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C61A 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C61C                            ; ===========================================================================
0000C61C                            
0000C61C                            Obj32_Main:				; XREF: Obj32_Index
0000C61C 5428 0024                  		addq.b	#2,$24(a0)
0000C620 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C628 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C62E 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C634 6700                       		beq.s	loc_BD60
0000C636 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C63C                            
0000C63C                            loc_BD60:
0000C63C 117C 0004 0001             		move.b	#4,1(a0)
0000C642 117C 0010 0019             		move.b	#$10,$19(a0)
0000C648 117C 0004 0018             		move.b	#4,$18(a0)
0000C64E 5668 000C                  		addq.w	#3,$C(a0)
0000C652                            
0000C652                            Obj32_Pressed:				; XREF: Obj32_Index
0000C652 4A28 0001                  		tst.b	1(a0)
0000C656 6A00                       		bpl.s	Obj32_Display
0000C658 323C 001B                  		move.w	#$1B,d1
0000C65C 343C 0005                  		move.w	#5,d2
0000C660 363C 0005                  		move.w	#5,d3
0000C664 3828 0008                  		move.w	8(a0),d4
0000C668 6100 0000                  		bsr.w	SolidObject
0000C66C 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C672 1028 0028                  		move.b	$28(a0),d0
0000C676 0240 000F                  		andi.w	#$F,d0
0000C67A 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C67E 47F3 0000                  		lea	(a3,d0.w),a3
0000C682 7600                       		moveq	#0,d3
0000C684 0828 0006 0028             		btst	#6,$28(a0)
0000C68A 6700                       		beq.s	loc_BDB2
0000C68C 7607                       		moveq	#7,d3
0000C68E                            
0000C68E                            loc_BDB2:
0000C68E 4A28 0028                  		tst.b	$28(a0)
0000C692 6A00                       		bpl.s	loc_BDBE
0000C694 6100 0000                  		bsr.w	Obj32_MZBlock
0000C698 6600                       		bne.s	loc_BDC8
0000C69A                            
0000C69A                            loc_BDBE:
0000C69A 4A28 0025                  		tst.b	$25(a0)
0000C69E 6600                       		bne.s	loc_BDC8
0000C6A0 0793                       		bclr	d3,(a3)
0000C6A2 6000                       		bra.s	loc_BDDE
0000C6A4                            ; ===========================================================================
0000C6A4                            
0000C6A4                            loc_BDC8:
0000C6A4 4A13                       		tst.b	(a3)
0000C6A6 6600                       		bne.s	loc_BDD6
0000C6A8 303C 00CD                  		move.w	#$CD,d0
0000C6AC 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play switch sound
0000C6B2                            
0000C6B2                            loc_BDD6:
0000C6B2 07D3                       		bset	d3,(a3)
0000C6B4 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C6BA                            
0000C6BA                            loc_BDDE:
0000C6BA 0828 0005 0028             		btst	#5,$28(a0)
0000C6C0 6700                       		beq.s	Obj32_Display
0000C6C2 5328 001E                  		subq.b	#1,$1E(a0)
0000C6C6 6A00                       		bpl.s	Obj32_Display
0000C6C8 117C 0007 001E             		move.b	#7,$1E(a0)
0000C6CE 0868 0001 001A             		bchg	#1,$1A(a0)
0000C6D4                            
0000C6D4                            Obj32_Display:
0000C6D4 6100 0000                  		bsr.w	DisplaySprite
0000C6D8 3028 0008                  		move.w	8(a0),d0
0000C6DC 0240 FF80                  		andi.w	#$FF80,d0
0000C6E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C6E4 0441 0080                  		subi.w	#$80,d1
0000C6E8 0241 FF80                  		andi.w	#$FF80,d1
0000C6EC 9041                       		sub.w	d1,d0
0000C6EE 0C40 0280                  		cmpi.w	#$280,d0
0000C6F2 6200 0000                  		bhi.w	Obj32_Delete
0000C6F6 4E75                       		rts	
0000C6F8                            ; ===========================================================================
0000C6F8                            
0000C6F8                            Obj32_Delete:
0000C6F8 6100 0000                  		bsr.w	DeleteObject
0000C6FC 4E75                       		rts	
0000C6FE                            
0000C6FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C6FE                            
0000C6FE                            
0000C6FE                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C6FE 3F03                       		move.w	d3,-(sp)
0000C700 3428 0008                  		move.w	8(a0),d2
0000C704 3628 000C                  		move.w	$C(a0),d3
0000C708 0442 0010                  		subi.w	#$10,d2
0000C70C 5143                       		subq.w	#8,d3
0000C70E 383C 0020                  		move.w	#$20,d4
0000C712 3A3C 0010                  		move.w	#$10,d5
0000C716 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C71A 3C3C 005F                  		move.w	#$5F,d6
0000C71E                            
0000C71E                            Obj32_MZLoop:
0000C71E 4A29 0001                  		tst.b	1(a1)
0000C722 6A00                       		bpl.s	loc_BE4E
0000C724 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C728 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C72A                            
0000C72A                            loc_BE4E:
0000C72A 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C72E 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C732                            
0000C732 361F                       		move.w	(sp)+,d3
0000C734 7000                       		moveq	#0,d0
0000C736                            
0000C736                            locret_BE5A:
0000C736 4E75                       		rts	
0000C738                            ; ===========================================================================
0000C738 1010                       Obj32_MZData:	dc.b $10, $10
0000C73A                            ; ===========================================================================
0000C73A                            
0000C73A                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C73A 7001                       		moveq	#1,d0
0000C73C 0240 003F                  		andi.w	#$3F,d0
0000C740 D040                       		add.w	d0,d0
0000C742 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C746 121A                       		move.b	(a2)+,d1
0000C748 4881                       		ext.w	d1
0000C74A 3029 0008                  		move.w	8(a1),d0
0000C74E 9041                       		sub.w	d1,d0
0000C750 9042                       		sub.w	d2,d0
0000C752 6400                       		bcc.s	loc_BE80
0000C754 D241                       		add.w	d1,d1
0000C756 D041                       		add.w	d1,d0
0000C758 6500                       		bcs.s	loc_BE84
0000C75A 60CE                       		bra.s	loc_BE4E
0000C75C                            ; ===========================================================================
0000C75C                            
0000C75C                            loc_BE80:
0000C75C B044                       		cmp.w	d4,d0
0000C75E 62CA                       		bhi.s	loc_BE4E
0000C760                            
0000C760                            loc_BE84:
0000C760 121A                       		move.b	(a2)+,d1
0000C762 4881                       		ext.w	d1
0000C764 3029 000C                  		move.w	$C(a1),d0
0000C768 9041                       		sub.w	d1,d0
0000C76A 9043                       		sub.w	d3,d0
0000C76C 6400                       		bcc.s	loc_BE9A
0000C76E D241                       		add.w	d1,d1
0000C770 D041                       		add.w	d1,d0
0000C772 6500                       		bcs.s	loc_BE9E
0000C774 60B4                       		bra.s	loc_BE4E
0000C776                            ; ===========================================================================
0000C776                            
0000C776                            loc_BE9A:
0000C776 B045                       		cmp.w	d5,d0
0000C778 62B0                       		bhi.s	loc_BE4E
0000C77A                            
0000C77A                            loc_BE9E:
0000C77A 361F                       		move.w	(sp)+,d3
0000C77C 7001                       		moveq	#1,d0
0000C77E 4E75                       		rts	
0000C780                            ; End of function Obj32_MZBlock
0000C780                            
0000C780                            ; ===========================================================================
0000C780                            ; ---------------------------------------------------------------------------
0000C780                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C780                            ; ---------------------------------------------------------------------------
0000C780                            Map_obj32:
0000C780                            	include "_maps\obj32.asm"
0000C780                            ; ---------------------------------------------------------------------------
0000C780                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C780                            ; ---------------------------------------------------------------------------
0000C780 0000                       		dc.w byte_BEAC-Map_obj32
0000C782 0000                       		dc.w byte_BEB7-Map_obj32
0000C784 0000                       		dc.w byte_BEC2-Map_obj32
0000C786 0000                       		dc.w byte_BEB7-Map_obj32
0000C788 02                         byte_BEAC:	dc.b 2
0000C789 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C78E F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C793 02                         byte_BEB7:	dc.b 2
0000C794 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C799 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C79E 02                         byte_BEC2:	dc.b 2
0000C79F F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C7A4 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C7A9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C7AE                            		even
0000C7AE                            		even
0000C7AE                            
0000C7AE                            ; ===========================================================================
0000C7AE                            ; ---------------------------------------------------------------------------
0000C7AE                            ; Object 33 - pushable blocks (MZ, LZ)
0000C7AE                            ; ---------------------------------------------------------------------------
0000C7AE                            
0000C7AE                            Obj33:					; XREF: Obj_Index
0000C7AE 7000                       		moveq	#0,d0
0000C7B0 1028 0024                  		move.b	$24(a0),d0
0000C7B4 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C7B8 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C7BC                            ; ===========================================================================
0000C7BC 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C7BE 0000                       		dc.w loc_BF6E-Obj33_Index
0000C7C0 0000                       		dc.w loc_C02C-Obj33_Index
0000C7C2                            
0000C7C2 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C7C4 4001                       		dc.b $40, 1
0000C7C6                            ; ===========================================================================
0000C7C6                            
0000C7C6                            Obj33_Main:				; XREF: Obj33_Index
0000C7C6 5428 0024                  		addq.b	#2,$24(a0)
0000C7CA 117C 000F 0016             		move.b	#$F,$16(a0)
0000C7D0 117C 000F 0017             		move.b	#$F,$17(a0)
0000C7D6 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C7DE 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C7E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C7EA 6600                       		bne.s	loc_BF16
0000C7EC 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C7F2                            
0000C7F2                            loc_BF16:
0000C7F2 117C 0004 0001             		move.b	#4,1(a0)
0000C7F8 117C 0003 0018             		move.b	#3,$18(a0)
0000C7FE 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C804 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C80A 7000                       		moveq	#0,d0
0000C80C 1028 0028                  		move.b	$28(a0),d0
0000C810 D040                       		add.w	d0,d0
0000C812 0240 000E                  		andi.w	#$E,d0
0000C816 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C81A 115A 0019                  		move.b	(a2)+,$19(a0)
0000C81E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C822 4A28 0028                  		tst.b	$28(a0)
0000C826 6700                       		beq.s	Obj33_ChkGone
0000C828 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C82E                            
0000C82E                            Obj33_ChkGone:
0000C82E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C832 7000                       		moveq	#0,d0
0000C834 1028 0023                  		move.b	$23(a0),d0
0000C838 6700                       		beq.s	loc_BF6E
0000C83A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C840 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C846 6600 0000                  		bne.w	DeleteObject
0000C84A                            
0000C84A                            loc_BF6E:				; XREF: Obj33_Index
0000C84A 4A28 0032                  		tst.b	$32(a0)
0000C84E 6600 0000                  		bne.w	loc_C046
0000C852 7200                       		moveq	#0,d1
0000C854 1228 0019                  		move.b	$19(a0),d1
0000C858 0641 000B                  		addi.w	#$B,d1
0000C85C 343C 0010                  		move.w	#$10,d2
0000C860 363C 0011                  		move.w	#$11,d3
0000C864 3828 0008                  		move.w	8(a0),d4
0000C868 6100 0000                  		bsr.w	loc_C186
0000C86C 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C872 6600                       		bne.s	loc_BFC6	; if not, branch
0000C874 08A8 0007 0028             		bclr	#7,$28(a0)
0000C87A 3028 0008                  		move.w	8(a0),d0
0000C87E 0C40 0A20                  		cmpi.w	#$A20,d0
0000C882 6500                       		bcs.s	loc_BFC6
0000C884 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C888 6400                       		bcc.s	loc_BFC6
0000C88A 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C88E 0440 001C                  		subi.w	#$1C,d0
0000C892 3140 000C                  		move.w	d0,$C(a0)
0000C896 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C89C 08E8 0007 0028             		bset	#7,$28(a0)
0000C8A2                            
0000C8A2                            loc_BFC6:
0000C8A2 3028 0008                  		move.w	8(a0),d0
0000C8A6 0240 FF80                  		andi.w	#$FF80,d0
0000C8AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8AE 0441 0080                  		subi.w	#$80,d1
0000C8B2 0241 FF80                  		andi.w	#$FF80,d1
0000C8B6 9041                       		sub.w	d1,d0
0000C8B8 0C40 0280                  		cmpi.w	#$280,d0
0000C8BC 6200                       		bhi.s	loc_BFE6
0000C8BE 6000 0000                  		bra.w	DisplaySprite
0000C8C2                            ; ===========================================================================
0000C8C2                            
0000C8C2                            loc_BFE6:
0000C8C2 3028 0034                  		move.w	$34(a0),d0
0000C8C6 0240 FF80                  		andi.w	#$FF80,d0
0000C8CA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8CE 0441 0080                  		subi.w	#$80,d1
0000C8D2 0241 FF80                  		andi.w	#$FF80,d1
0000C8D6 9041                       		sub.w	d1,d0
0000C8D8 0C40 0280                  		cmpi.w	#$280,d0
0000C8DC 6200                       		bhi.s	loc_C016
0000C8DE 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C8E4 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C8EA 117C 0004 0024             		move.b	#4,$24(a0)
0000C8F0 6000                       		bra.s	loc_C02C
0000C8F2                            ; ===========================================================================
0000C8F2                            
0000C8F2                            loc_C016:
0000C8F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C8F6 7000                       		moveq	#0,d0
0000C8F8 1028 0023                  		move.b	$23(a0),d0
0000C8FC 6700                       		beq.s	loc_C028
0000C8FE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C904                            
0000C904                            loc_C028:
0000C904 6000 0000                  		bra.w	DeleteObject
0000C908                            ; ===========================================================================
0000C908                            
0000C908                            loc_C02C:				; XREF: Obj33_Index
0000C908 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C90C 6700                       		beq.s	locret_C044
0000C90E 117C 0002 0024             		move.b	#2,$24(a0)
0000C914 4228 0032                  		clr.b	$32(a0)
0000C918 4268 0010                  		clr.w	$10(a0)
0000C91C 4268 0012                  		clr.w	$12(a0)
0000C920                            
0000C920                            locret_C044:
0000C920 4E75                       		rts	
0000C922                            ; ===========================================================================
0000C922                            
0000C922                            loc_C046:				; XREF: loc_BF6E
0000C922 3F28 0008                  		move.w	8(a0),-(sp)
0000C926 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C92C 6400                       		bcc.s	loc_C056
0000C92E 6100 0000                  		bsr.w	SpeedToPos
0000C932                            
0000C932                            loc_C056:
0000C932 0828 0001 0022             		btst	#1,$22(a0)
0000C938 6700                       		beq.s	loc_C0A0
0000C93A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C940 4EB9 0000 0000             		jsr	ObjHitFloor
0000C946 4A41                       		tst.w	d1
0000C948 6A00 0000                  		bpl.w	loc_C09E
0000C94C D368 000C                  		add.w	d1,$C(a0)
0000C950 4268 0012                  		clr.w	$12(a0)
0000C954 08A8 0001 0022             		bclr	#1,$22(a0)
0000C95A 3011                       		move.w	(a1),d0
0000C95C 0240 03FF                  		andi.w	#$3FF,d0
0000C960 0C40 016A                  		cmpi.w	#$16A,d0
0000C964 6500                       		bcs.s	loc_C09E
0000C966 3028 0030                  		move.w	$30(a0),d0
0000C96A E640                       		asr.w	#3,d0
0000C96C 3140 0010                  		move.w	d0,$10(a0)
0000C970 117C 0001 0032             		move.b	#1,$32(a0)
0000C976 4268 000E                  		clr.w	$E(a0)
0000C97A                            
0000C97A                            loc_C09E:
0000C97A 6000                       		bra.s	loc_C0E6
0000C97C                            ; ===========================================================================
0000C97C                            
0000C97C                            loc_C0A0:
0000C97C 4A68 0010                  		tst.w	$10(a0)
0000C980 6700 0000                  		beq.w	loc_C0D6
0000C984 6B00                       		bmi.s	loc_C0BC
0000C986 7600                       		moveq	#0,d3
0000C988 1628 0019                  		move.b	$19(a0),d3
0000C98C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C992 4A41                       		tst.w	d1		; has block touched a wall?
0000C994 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C996 6000                       		bra.s	loc_C0E6
0000C998                            ; ===========================================================================
0000C998                            
0000C998                            loc_C0BC:
0000C998 7600                       		moveq	#0,d3
0000C99A 1628 0019                  		move.b	$19(a0),d3
0000C99E 4643                       		not.w	d3
0000C9A0 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9A6 4A41                       		tst.w	d1		; has block touched a wall?
0000C9A8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9AA 6000                       		bra.s	loc_C0E6
0000C9AC                            ; ===========================================================================
0000C9AC                            
0000C9AC                            Obj33_StopPush:
0000C9AC 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C9B0 6000                       		bra.s	loc_C0E6
0000C9B2                            ; ===========================================================================
0000C9B2                            
0000C9B2                            loc_C0D6:
0000C9B2 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C9BA 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C9C0 6400                       		bcc.s	loc_C104
0000C9C2                            
0000C9C2                            loc_C0E6:
0000C9C2 7200                       		moveq	#0,d1
0000C9C4 1228 0019                  		move.b	$19(a0),d1
0000C9C8 0641 000B                  		addi.w	#$B,d1
0000C9CC 343C 0010                  		move.w	#$10,d2
0000C9D0 363C 0011                  		move.w	#$11,d3
0000C9D4 381F                       		move.w	(sp)+,d4
0000C9D6 6100 0000                  		bsr.w	loc_C186
0000C9DA 6100                       		bsr.s	Obj33_ChkLava
0000C9DC 6000 FEC4                  		bra.w	loc_BFC6
0000C9E0                            ; ===========================================================================
0000C9E0                            
0000C9E0                            loc_C104:
0000C9E0 381F                       		move.w	(sp)+,d4
0000C9E2 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9E6 08A9 0003 0022             		bclr	#3,$22(a1)
0000C9EC 08A8 0003 0022             		bclr	#3,$22(a0)
0000C9F2 6000 FECE                  		bra.w	loc_BFE6
0000C9F6                            ; ===========================================================================
0000C9F6                            
0000C9F6                            Obj33_ChkLava:
0000C9F6 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C9FC 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C9FE 343C FFE0                  		move.w	#-$20,d2
0000CA02 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CA08 6700                       		beq.s	Obj33_LoadLava
0000CA0A 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CA10 6700                       		beq.s	Obj33_LoadLava
0000CA12 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CA18 6700                       		beq.s	Obj33_LoadLava
0000CA1A 4E75                       		rts	
0000CA1C                            ; ===========================================================================
0000CA1C                            
0000CA1C                            Obj33_ChkLava2:
0000CA1C 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CA22 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CA24 343C 0020                  		move.w	#$20,d2
0000CA28 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CA2E 6700                       		beq.s	Obj33_LoadLava
0000CA30 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CA36 6700                       		beq.s	Obj33_LoadLava
0000CA38                            
0000CA38                            Obj33_NoLava:
0000CA38 4E75                       		rts	
0000CA3A                            ; ===========================================================================
0000CA3A                            
0000CA3A                            Obj33_LoadLava:
0000CA3A 6100 0000                  		bsr.w	SingleObjLoad
0000CA3E 6600                       		bne.s	locret_C184
0000CA40 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CA44 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA4A D569 0008                  		add.w	d2,8(a1)
0000CA4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CA54 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CA5A 2348 003C                  		move.l	a0,$3C(a1)
0000CA5E                            
0000CA5E                            locret_C184:
0000CA5E 4E75                       		rts	
0000CA60                            ; ===========================================================================
0000CA60                            
0000CA60                            loc_C186:				; XREF: loc_BF6E
0000CA60 1028 0025                  		move.b	$25(a0),d0
0000CA64 6700 0000                  		beq.w	loc_C218
0000CA68 5500                       		subq.b	#2,d0
0000CA6A 6600                       		bne.s	loc_C1AA
0000CA6C 6100 B30E                  		bsr.w	ExitPlatform
0000CA70 0829 0003 0022             		btst	#3,$22(a1)
0000CA76 6600                       		bne.s	loc_C1A4
0000CA78 4228 0025                  		clr.b	$25(a0)
0000CA7C 4E75                       		rts	
0000CA7E                            ; ===========================================================================
0000CA7E                            
0000CA7E                            loc_C1A4:
0000CA7E 3404                       		move.w	d4,d2
0000CA80 6000 B858                  		bra.w	MvSonicOnPtfm
0000CA84                            ; ===========================================================================
0000CA84                            
0000CA84                            loc_C1AA:
0000CA84 5500                       		subq.b	#2,d0
0000CA86 6600                       		bne.s	loc_C1F2
0000CA88 6100 0000                  		bsr.w	SpeedToPos
0000CA8C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CA92 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA98 4A41                       		tst.w	d1
0000CA9A 6A00 0000                  		bpl.w	locret_C1F0
0000CA9E D368 000C                  		add.w	d1,$C(a0)
0000CAA2 4268 0012                  		clr.w	$12(a0)
0000CAA6 4228 0025                  		clr.b	$25(a0)
0000CAAA 3011                       		move.w	(a1),d0
0000CAAC 0240 03FF                  		andi.w	#$3FF,d0
0000CAB0 0C40 016A                  		cmpi.w	#$16A,d0
0000CAB4 6500                       		bcs.s	locret_C1F0
0000CAB6 3028 0030                  		move.w	$30(a0),d0
0000CABA E640                       		asr.w	#3,d0
0000CABC 3140 0010                  		move.w	d0,$10(a0)
0000CAC0 117C 0001 0032             		move.b	#1,$32(a0)
0000CAC6 4268 000E                  		clr.w	$E(a0)
0000CACA                            
0000CACA                            locret_C1F0:
0000CACA 4E75                       		rts	
0000CACC                            ; ===========================================================================
0000CACC                            
0000CACC                            loc_C1F2:
0000CACC 6100 0000                  		bsr.w	SpeedToPos
0000CAD0 3028 0008                  		move.w	8(a0),d0
0000CAD4 0240 000C                  		andi.w	#$C,d0
0000CAD8 6600 0000                  		bne.w	locret_C2E4
0000CADC 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CAE2 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CAE8 4268 0010                  		clr.w	$10(a0)
0000CAEC 5528 0025                  		subq.b	#2,$25(a0)
0000CAF0 4E75                       		rts	
0000CAF2                            ; ===========================================================================
0000CAF2                            
0000CAF2                            loc_C218:
0000CAF2 6100 0000                  		bsr.w	loc_FAC8
0000CAF6 4A44                       		tst.w	d4
0000CAF8 6700 0000                  		beq.w	locret_C2E4
0000CAFC 6B00 0000                  		bmi.w	locret_C2E4
0000CB00 4A28 0032                  		tst.b	$32(a0)
0000CB04 6700                       		beq.s	loc_C230
0000CB06 6000 0000                  		bra.w	locret_C2E4
0000CB0A                            ; ===========================================================================
0000CB0A                            
0000CB0A                            loc_C230:
0000CB0A 4A40                       		tst.w	d0
0000CB0C 6700 0000                  		beq.w	locret_C2E4
0000CB10 6B00                       		bmi.s	loc_C268
0000CB12 0829 0000 0022             		btst	#0,$22(a1)
0000CB18 6600 0000                  		bne.w	locret_C2E4
0000CB1C 3F00                       		move.w	d0,-(sp)
0000CB1E 7600                       		moveq	#0,d3
0000CB20 1628 0019                  		move.b	$19(a0),d3
0000CB24 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CB2A 301F                       		move.w	(sp)+,d0
0000CB2C 4A41                       		tst.w	d1
0000CB2E 6B00 0000                  		bmi.w	locret_C2E4
0000CB32 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CB3A 7001                       		moveq	#1,d0
0000CB3C 323C 0040                  		move.w	#$40,d1
0000CB40 6000                       		bra.s	loc_C294
0000CB42                            ; ===========================================================================
0000CB42                            
0000CB42                            loc_C268:
0000CB42 0829 0000 0022             		btst	#0,$22(a1)
0000CB48 6700                       		beq.s	locret_C2E4
0000CB4A 3F00                       		move.w	d0,-(sp)
0000CB4C 7600                       		moveq	#0,d3
0000CB4E 1628 0019                  		move.b	$19(a0),d3
0000CB52 4643                       		not.w	d3
0000CB54 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CB5A 301F                       		move.w	(sp)+,d0
0000CB5C 4A41                       		tst.w	d1
0000CB5E 6B00                       		bmi.s	locret_C2E4
0000CB60 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CB68 70FF                       		moveq	#-1,d0
0000CB6A 323C FFC0                  		move.w	#-$40,d1
0000CB6E                            
0000CB6E                            loc_C294:
0000CB6E 43F8 D000                  		lea	($FFFFD000).w,a1
0000CB72 D169 0008                  		add.w	d0,8(a1)
0000CB76 3341 0014                  		move.w	d1,$14(a1)
0000CB7A 337C 0000 0010             		move.w	#0,$10(a1)
0000CB80 3F00                       		move.w	d0,-(sp)
0000CB82 303C 00A7                  		move.w	#$A7,d0
0000CB86 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CB8C 301F                       		move.w	(sp)+,d0
0000CB8E 4A28 0028                  		tst.b	$28(a0)
0000CB92 6B00                       		bmi.s	locret_C2E4
0000CB94 3F00                       		move.w	d0,-(sp)
0000CB96 4EB9 0000 0000             		jsr	ObjHitFloor
0000CB9C 301F                       		move.w	(sp)+,d0
0000CB9E 0C41 0004                  		cmpi.w	#4,d1
0000CBA2 6F00                       		ble.s	loc_C2E0
0000CBA4 317C 0400 0010             		move.w	#$400,$10(a0)
0000CBAA 4A40                       		tst.w	d0
0000CBAC 6A00                       		bpl.s	loc_C2D8
0000CBAE 4468 0010                  		neg.w	$10(a0)
0000CBB2                            
0000CBB2                            loc_C2D8:
0000CBB2 117C 0006 0025             		move.b	#6,$25(a0)
0000CBB8 6000                       		bra.s	locret_C2E4
0000CBBA                            ; ===========================================================================
0000CBBA                            
0000CBBA                            loc_C2E0:
0000CBBA D368 000C                  		add.w	d1,$C(a0)
0000CBBE                            
0000CBBE                            locret_C2E4:
0000CBBE 4E75                       		rts	
0000CBC0                            ; ===========================================================================
0000CBC0                            ; ---------------------------------------------------------------------------
0000CBC0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CBC0                            ; ---------------------------------------------------------------------------
0000CBC0                            Map_obj33:
0000CBC0                            	include "_maps\obj33.asm"
0000CBC0                            ; ---------------------------------------------------------------------------
0000CBC0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CBC0                            ; ---------------------------------------------------------------------------
0000CBC0 0000                       		dc.w byte_C2EA-Map_obj33
0000CBC2 0000                       		dc.w byte_C2F0-Map_obj33
0000CBC4 01                         byte_C2EA:	dc.b 1
0000CBC5 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CBCA 04                         byte_C2F0:	dc.b 4
0000CBCB F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CBD0 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CBD5 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CBDA F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CBE0 00                         		even
0000CBE0 00                         		even
0000CBE0                            
0000CBE0                            ; ===========================================================================
0000CBE0                            ; ---------------------------------------------------------------------------
0000CBE0                            ; Object 34 - zone title cards
0000CBE0                            ; ---------------------------------------------------------------------------
0000CBE0                            Obj34:					; XREF: Obj_Index
0000CBE0 7000                       		moveq	#0,d0
0000CBE2 1028 0024                  		move.b	$24(a0),d0
0000CBE6 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CBEA 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CBEE                            ; ===========================================================================
0000CBEE 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CBF0 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CBF2 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CBF4 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CBF6                            ; ===========================================================================
0000CBF6                            
0000CBF6                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CBF6 2248                       		movea.l	a0,a1
0000CBF8 7000                       		moveq	#0,d0
0000CBFA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CBFE 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CC04 6600                       		bne.s	Obj34_CheckFZ
0000CC06 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CC08                            
0000CC08                            Obj34_CheckFZ:
0000CC08 3400                       		move.w	d0,d2
0000CC0A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CC10 6600                       		bne.s	Obj34_LoadConfig
0000CC12 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CC14 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CC16                            
0000CC16                            Obj34_LoadConfig:
0000CC16 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CC1C E948                       		lsl.w	#4,d0
0000CC1E D6C0                       		adda.w	d0,a3
0000CC20 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CC26 7203                       		moveq	#3,d1
0000CC28                            
0000CC28                            Obj34_Loop:
0000CC28 12BC 0034                  		move.b	#$34,0(a1)
0000CC2C 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CC30 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CC34 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CC38 335A 000A                  		move.w	(a2)+,$A(a1)
0000CC3C 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC40 101A                       		move.b	(a2)+,d0
0000CC42 6600                       		bne.s	Obj34_ActNumber
0000CC44 1002                       		move.b	d2,d0
0000CC46                            
0000CC46                            Obj34_ActNumber:
0000CC46 0C00 0007                  		cmpi.b	#7,d0
0000CC4A 6600                       		bne.s	Obj34_MakeSprite
0000CC4C D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CC50 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CC56 6600                       		bne.s	Obj34_MakeSprite
0000CC58 5300                       		subq.b	#1,d0
0000CC5A                            
0000CC5A                            Obj34_MakeSprite:
0000CC5A 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CC5E 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CC66 337C 8580 0002             		move.w	#$8580,2(a1)
0000CC6C 137C 0078 0019             		move.b	#$78,$19(a1)
0000CC72 137C 0000 0001             		move.b	#0,1(a1)
0000CC78 137C 0000 0018             		move.b	#0,$18(a1)
0000CC7E 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CC84 43E9 0040                  		lea	$40(a1),a1	; next object
0000CC88 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CC8C                            
0000CC8C                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CC8C 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC8E 3028 0030                  		move.w	$30(a0),d0
0000CC92 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CC96 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CC98 6C00                       		bge.s	Obj34_Move
0000CC9A 4441                       		neg.w	d1
0000CC9C                            
0000CC9C                            Obj34_Move:
0000CC9C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCA0                            
0000CCA0                            loc_C3C8:
0000CCA0 3028 0008                  		move.w	8(a0),d0
0000CCA4 6B00                       		bmi.s	locret_C3D8
0000CCA6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCAA 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CCAC 6000 0000                  		bra.w	DisplaySprite
0000CCB0                            ; ===========================================================================
0000CCB0                            
0000CCB0                            locret_C3D8:
0000CCB0 4E75                       		rts	
0000CCB2                            ; ===========================================================================
0000CCB2                            
0000CCB2                            Obj34_Wait:				; XREF: Obj34_Index
0000CCB2 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CCB6 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CCB8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CCBC 6000 0000                  		bra.w	DisplaySprite
0000CCC0                            ; ===========================================================================
0000CCC0                            
0000CCC0                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CCC0 4A28 0001                  		tst.b	1(a0)
0000CCC4 6A00                       		bpl.s	Obj34_ChangeArt
0000CCC6 7220                       		moveq	#$20,d1
0000CCC8 3028 0032                  		move.w	$32(a0),d0
0000CCCC B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CCD0 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CCD2 6C00                       		bge.s	Obj34_Move2
0000CCD4 4441                       		neg.w	d1
0000CCD6                            
0000CCD6                            Obj34_Move2:
0000CCD6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCDA 3028 0008                  		move.w	8(a0),d0
0000CCDE 6B00                       		bmi.s	locret_C412
0000CCE0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCE4 6400                       		bcc.s	locret_C412	; if yes, branch
0000CCE6 6000 0000                  		bra.w	DisplaySprite
0000CCEA                            ; ===========================================================================
0000CCEA                            
0000CCEA                            locret_C412:
0000CCEA 4E75                       		rts	
0000CCEC                            ; ===========================================================================
0000CCEC                            
0000CCEC                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CCEC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CCF2 6600                       		bne.s	Obj34_Delete
0000CCF4 7002                       		moveq	#2,d0
0000CCF6 4EB9 0000 1772             		jsr	(LoadPLC).l	; load explosion patterns
0000CCFC 7000                       		moveq	#0,d0
0000CCFE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD02 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000CD06 4EB9 0000 1772             		jsr	(LoadPLC).l	; load animal patterns
0000CD0C                            
0000CD0C                            Obj34_Delete:
0000CD0C 6000 0000                  		bra.w	DeleteObject
0000CD10                            
0000CD10                            ; ===========================================================================
0000CD10                            Obj34_AnimalPLC:
0000CD10 15                         		dc.b $15	; "GHZ"
0000CD11 16                         		dc.b $16
0000CD12 17                         		dc.b $17
0000CD13 18                         		dc.b $18
0000CD14 19                         		dc.b $19
0000CD15 1A                         		dc.b $1A	; "SBZ"
0000CD16 15                         		dc.b $15	; Ending (placeholder?
0000CD17 1A                         		dc.b $1A	; MAKOTO
0000CD18                            	even
0000CD18 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CD1A 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CD1C 00E4                       		dc.w $E4
0000CD1E 0206                       		dc.b 2,	6
0000CD20 00EA                       		dc.w $EA
0000CD22 0207                       		dc.b 2,	7
0000CD24 00E0                       		dc.w $E0
0000CD26 020A                       		dc.b 2,	$A
0000CD28                            ; ---------------------------------------------------------------------------
0000CD28                            ; Title	card configuration data
0000CD28                            ; Format:
0000CD28                            ; 4 bytes per item (YYYY XXXX)
0000CD28                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CD28                            ; ---------------------------------------------------------------------------
0000CD28 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CD38 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CD48 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CD58 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CD68 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CD78 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CD88 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CD98 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDA8 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDB8                            ; ===========================================================================
0000CDB8                            ; ---------------------------------------------------------------------------
0000CDB8                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CDB8                            ; ---------------------------------------------------------------------------
0000CDB8                            
0000CDB8                            Obj39:					; XREF: Obj_Index
0000CDB8 7000                       		moveq	#0,d0
0000CDBA 1028 0024                  		move.b	$24(a0),d0
0000CDBE 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CDC2 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CDC6                            ; ===========================================================================
0000CDC6 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CDC8 0000                       		dc.w loc_C50C-Obj39_Index
0000CDCA 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CDCC                            ; ===========================================================================
0000CDCC                            
0000CDCC                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CDCC 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CDD0 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CDD2 4E75                       		rts	
0000CDD4                            ; ===========================================================================
0000CDD4                            
0000CDD4                            Obj39_Main:
0000CDD4 5428 0024                  		addq.b	#2,$24(a0)
0000CDD8 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CDDE 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CDE4 6700                       		beq.s	loc_C4EC	; if not, branch
0000CDE6 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CDEC                            
0000CDEC                            loc_C4EC:
0000CDEC 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CDF2 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CDFA 317C 855E 0002             		move.w	#$855E,2(a0)
0000CE00 117C 0000 0001             		move.b	#0,1(a0)
0000CE06 117C 0000 0018             		move.b	#0,$18(a0)
0000CE0C                            
0000CE0C                            loc_C50C:				; XREF: Obj39_Index
0000CE0C 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE0E 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CE14 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CE16 6500                       		bcs.s	Obj39_Move
0000CE18 4441                       		neg.w	d1
0000CE1A                            
0000CE1A                            Obj39_Move:
0000CE1A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE1E 6000 0000                  		bra.w	DisplaySprite
0000CE22                            ; ===========================================================================
0000CE22                            
0000CE22                            Obj39_SetWait:				; XREF: Obj39_Main
0000CE22 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CE28 5428 0024                  		addq.b	#2,$24(a0)
0000CE2C 4E75                       		rts	
0000CE2E                            ; ===========================================================================
0000CE2E                            
0000CE2E                            Obj39_Wait:				; XREF: Obj39_Index
0000CE2E 1038 F605                  		move.b	($FFFFF605).w,d0
0000CE32 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CE36 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CE38 0828 0000 001A             		btst	#0,$1A(a0)
0000CE3E 6600                       		bne.s	Obj39_Display
0000CE40 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CE44 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CE46 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CE4A 6000 0000                  		bra.w	DisplaySprite
0000CE4E                            ; ===========================================================================
0000CE4E                            
0000CE4E                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CE4E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CE52 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CE54 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CE5A 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CE5E 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CE60 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CE66 6000                       		bra.s	Obj39_Display
0000CE68                            ; ===========================================================================
0000CE68                            
0000CE68                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CE68 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE6E                            
0000CE6E                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CE6E 6000 0000                  		bra.w	DisplaySprite
0000CE72                            ; ===========================================================================
0000CE72                            ; ---------------------------------------------------------------------------
0000CE72                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CE72                            ; ---------------------------------------------------------------------------
0000CE72                            
0000CE72                            Obj3A:					; XREF: Obj_Index
0000CE72 7000                       		moveq	#0,d0
0000CE74 1028 0024                  		move.b	$24(a0),d0
0000CE78 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CE7C 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CE80                            ; ===========================================================================
0000CE80 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CE82 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CE84 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE86 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CE88 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE8A 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CE8C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE8E 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CE90 0000                       		dc.w loc_C766-Obj3A_Index
0000CE92                            ; ===========================================================================
0000CE92                            
0000CE92                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CE92 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CE96 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CE98 4E75                       		rts	
0000CE9A                            ; ===========================================================================
0000CE9A                            
0000CE9A                            Obj3A_Main:
0000CE9A 2248                       		movea.l	a0,a1
0000CE9C 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CEA2 7206                       		moveq	#6,d1
0000CEA4                            
0000CEA4                            Obj3A_Loop:
0000CEA4 12BC 003A                  		move.b	#$3A,0(a1)
0000CEA8 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CEAC 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CEB0 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CEB4 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CEB8 135A 0024                  		move.b	(a2)+,$24(a1)
0000CEBC 101A                       		move.b	(a2)+,d0
0000CEBE 0C00 0006                  		cmpi.b	#6,d0
0000CEC2 6600                       		bne.s	loc_C5CA
0000CEC4 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CEC8                            
0000CEC8                            loc_C5CA:
0000CEC8 1340 001A                  		move.b	d0,$1A(a1)
0000CECC 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CED4 337C 8580 0002             		move.w	#$8580,2(a1)
0000CEDA 137C 0000 0001             		move.b	#0,1(a1)
0000CEE0 43E9 0040                  		lea	$40(a1),a1
0000CEE4 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CEE8                            
0000CEE8                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CEE8 7210                       		moveq	#$10,d1		; set horizontal speed
0000CEEA 3028 0030                  		move.w	$30(a0),d0
0000CEEE B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CEF2 6700                       		beq.s	loc_C61A	; if yes, branch
0000CEF4 6C00                       		bge.s	Obj3A_Move
0000CEF6 4441                       		neg.w	d1
0000CEF8                            
0000CEF8                            Obj3A_Move:
0000CEF8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CEFC                            
0000CEFC                            loc_C5FE:				; XREF: loc_C61A
0000CEFC 3028 0008                  		move.w	8(a0),d0
0000CF00 6B00                       		bmi.s	locret_C60E
0000CF02 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF06 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CF08 6000 0000                  		bra.w	DisplaySprite
0000CF0C                            ; ===========================================================================
0000CF0C                            
0000CF0C                            locret_C60E:
0000CF0C 4E75                       		rts	
0000CF0E                            ; ===========================================================================
0000CF0E                            
0000CF0E                            loc_C610:				; XREF: loc_C61A
0000CF0E 117C 000E 0024             		move.b	#$E,$24(a0)
0000CF14 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CF18                            ; ===========================================================================
0000CF18                            
0000CF18                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CF18 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CF1E 67EE                       		beq.s	loc_C610
0000CF20 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CF26 66D4                       		bne.s	loc_C5FE
0000CF28 5428 0024                  		addq.b	#2,$24(a0)
0000CF2C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF32                            
0000CF32                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CF32 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF36 6600                       		bne.s	Obj3A_Display
0000CF38 5428 0024                  		addq.b	#2,$24(a0)
0000CF3C                            
0000CF3C                            Obj3A_Display:
0000CF3C 6000 0000                  		bra.w	DisplaySprite
0000CF40                            ; ===========================================================================
0000CF40                            
0000CF40                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CF40 6100 0000                  		bsr.w	DisplaySprite
0000CF44 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CF4A 7000                       		moveq	#0,d0
0000CF4C 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CF50 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CF52 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CF56 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CF5C                            
0000CF5C                            Obj3A_RingBonus:
0000CF5C 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CF60 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CF62 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CF66 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CF6C                            
0000CF6C                            Obj3A_ChkBonus:
0000CF6C 4A40                       		tst.w	d0		; is there any bonus?
0000CF6E 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CF70 303C 00C5                  		move.w	#$C5,d0
0000CF74 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CF7A 5428 0024                  		addq.b	#2,$24(a0)
0000CF7E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CF84 6600                       		bne.s	Obj3A_SetDelay
0000CF86 5828 0024                  		addq.b	#4,$24(a0)
0000CF8A                            
0000CF8A                            Obj3A_SetDelay:
0000CF8A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF90                            
0000CF90                            locret_C692:
0000CF90 4E75                       		rts	
0000CF92                            ; ===========================================================================
0000CF92                            
0000CF92                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CF92 4EB9 0000 0000             		jsr	AddPoints
0000CF98 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CF9C 0200 0003                  		andi.b	#3,d0
0000CFA0 66EE                       		bne.s	locret_C692
0000CFA2 303C 00CD                  		move.w	#$CD,d0
0000CFA6 4EF9 0000 158E             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CFAC                            ; ===========================================================================
0000CFAC                            
0000CFAC                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CFAC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CFB0 0240 0007                  		andi.w	#7,d0
0000CFB4 E748                       		lsl.w	#3,d0
0000CFB6 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CFBA 0241 0003                  		andi.w	#3,d1
0000CFBE D241                       		add.w	d1,d1
0000CFC0 D041                       		add.w	d1,d0
0000CFC2 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CFC6 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CFCA 4A40                       		tst.w	d0
0000CFCC 6600                       		bne.s	Obj3A_ChkSS
0000CFCE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CFD4 6000                       		bra.s	Obj3A_Display2
0000CFD6                            ; ===========================================================================
0000CFD6                            
0000CFD6                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CFD6 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CFDA 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CFDE 6700                       		beq.s	loc_C6EA	; if not, branch
0000CFE0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CFE6 6000                       		bra.s	Obj3A_Display2
0000CFE8                            ; ===========================================================================
0000CFE8                            
0000CFE8                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CFE8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CFEE                            
0000CFEE                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CFEE 6000 0000                  		bra.w	DisplaySprite
0000CFF2                            ; ===========================================================================
0000CFF2                            ; ---------------------------------------------------------------------------
0000CFF2                            ; Level	order array
0000CFF2                            ; ---------------------------------------------------------------------------
0000CFF2                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D02A                            		even
0000D02A                            ; ===========================================================================
0000D02A                            
0000D02A                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D02A 7220                       		moveq	#$20,d1		; set horizontal speed
0000D02C 3028 0032                  		move.w	$32(a0),d0
0000D030 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D034 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D036 6C00                       		bge.s	Obj3A_Move2
0000D038 4441                       		neg.w	d1
0000D03A                            
0000D03A                            Obj3A_Move2:
0000D03A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D03E 3028 0008                  		move.w	8(a0),d0
0000D042 6B00                       		bmi.s	locret_C748
0000D044 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D048 6400                       		bcc.s	locret_C748	; if yes, branch
0000D04A 6000 0000                  		bra.w	DisplaySprite
0000D04E                            ; ===========================================================================
0000D04E                            
0000D04E                            locret_C748:
0000D04E 4E75                       		rts	
0000D050                            ; ===========================================================================
0000D050                            
0000D050                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D050 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D056 6600 0000                  		bne.w	DeleteObject
0000D05A 5428 0024                  		addq.b	#2,$24(a0)
0000D05E 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D062 303C 008D                  		move.w	#$8D,d0
0000D066 4EF9 0000 1588             		jmp	(PlaySound).l	; play FZ music
0000D06C                            ; ===========================================================================
0000D06C                            
0000D06C                            loc_C766:				; XREF: Obj3A_Index
0000D06C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D070 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D076 6700 0000                  		beq.w	DeleteObject
0000D07A 4E75                       		rts	
0000D07C                            ; ===========================================================================
0000D07C 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D082 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D084 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D08A 0201                       		dc.b 2,	1
0000D08C 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D092 0206                       		dc.b 2,	6
0000D094 0520 0120 00EC             		dc.w $520, $120, $EC
0000D09A 0202                       		dc.b 2,	2
0000D09C 0540 0120 00FC             		dc.w $540, $120, $FC
0000D0A2 0203                       		dc.b 2,	3
0000D0A4 0560 0120 010C             		dc.w $560, $120, $10C
0000D0AA 0204                       		dc.b 2,	4
0000D0AC 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D0B2 0205                       		dc.b 2,	5
0000D0B4                            ; ===========================================================================
0000D0B4                            ; ---------------------------------------------------------------------------
0000D0B4                            ; Object 7E - special stage results screen
0000D0B4                            ; ---------------------------------------------------------------------------
0000D0B4                            
0000D0B4                            Obj7E:					; XREF: Obj_Index
0000D0B4 7000                       		moveq	#0,d0
0000D0B6 1028 0024                  		move.b	$24(a0),d0
0000D0BA 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D0BE 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D0C2                            ; ===========================================================================
0000D0C2 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D0C4 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D0C6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0C8 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D0CA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0CC 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D0CE 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0D0 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D0D2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0D4 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D0D6 0000                       		dc.w loc_C91A-Obj7E_Index
0000D0D8                            ; ===========================================================================
0000D0D8                            
0000D0D8                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D0D8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D0DC 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D0DE 4E75                       		rts	
0000D0E0                            ; ===========================================================================
0000D0E0                            
0000D0E0                            Obj7E_Main:
0000D0E0 2248                       		movea.l	a0,a1
0000D0E2 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D0E8 7203                       		moveq	#3,d1
0000D0EA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D0F0 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D0F2 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D0F4                            
0000D0F4                            Obj7E_Loop:
0000D0F4 12BC 007E                  		move.b	#$7E,0(a1)
0000D0F8 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D0FC 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D100 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D104 135A 0024                  		move.b	(a2)+,$24(a1)
0000D108 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D10C 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D114 337C 8580 0002             		move.w	#$8580,2(a1)
0000D11A 137C 0000 0001             		move.b	#0,1(a1)
0000D120 43E9 0040                  		lea	$40(a1),a1
0000D124 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D128                            
0000D128 7007                       		moveq	#7,d0
0000D12A 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D12E 6700                       		beq.s	loc_C842
0000D130 7000                       		moveq	#0,d0
0000D132 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D136 6600                       		bne.s	loc_C842	; if not, branch
0000D138 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D13A 317C 0018 0008             		move.w	#$18,8(a0)
0000D140 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D146                            
0000D146                            loc_C842:
0000D146 1140 001A                  		move.b	d0,$1A(a0)
0000D14A                            
0000D14A                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D14A 7210                       		moveq	#$10,d1		; set horizontal speed
0000D14C 3028 0030                  		move.w	$30(a0),d0
0000D150 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D154 6700                       		beq.s	loc_C86C	; if yes, branch
0000D156 6C00                       		bge.s	Obj7E_Move
0000D158 4441                       		neg.w	d1
0000D15A                            
0000D15A                            Obj7E_Move:
0000D15A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D15E                            
0000D15E                            loc_C85A:				; XREF: loc_C86C
0000D15E 3028 0008                  		move.w	8(a0),d0
0000D162 6B00                       		bmi.s	locret_C86A
0000D164 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D168 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D16A 6000 0000                  		bra.w	DisplaySprite
0000D16E                            ; ===========================================================================
0000D16E                            
0000D16E                            locret_C86A:
0000D16E 4E75                       		rts	
0000D170                            ; ===========================================================================
0000D170                            
0000D170                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D170 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D176 66E6                       		bne.s	loc_C85A
0000D178 5428 0024                  		addq.b	#2,$24(a0)
0000D17C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D182 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D188                            
0000D188                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D188 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D18C 6600                       		bne.s	Obj7E_Display
0000D18E 5428 0024                  		addq.b	#2,$24(a0)
0000D192                            
0000D192                            Obj7E_Display:
0000D192 6000 0000                  		bra.w	DisplaySprite
0000D196                            ; ===========================================================================
0000D196                            
0000D196                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D196 6100 0000                  		bsr.w	DisplaySprite
0000D19A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D1A0 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D1A4 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D1A6 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D1AC 700A                       		moveq	#10,d0		; add 10 to score
0000D1AE 4EB9 0000 0000             		jsr	AddPoints
0000D1B4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D1B8 0200 0003                  		andi.b	#3,d0
0000D1BC 6600                       		bne.s	locret_C8EA
0000D1BE 303C 00CD                  		move.w	#$CD,d0
0000D1C2 4EF9 0000 158E             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D1C8                            ; ===========================================================================
0000D1C8                            
0000D1C8                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D1C8 303C 00C5                  		move.w	#$C5,d0
0000D1CC 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D1D2 5428 0024                  		addq.b	#2,$24(a0)
0000D1D6 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D1DC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D1E2 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D1E4 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D1EA 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D1EE                            
0000D1EE                            locret_C8EA:
0000D1EE 4E75                       		rts	
0000D1F0                            ; ===========================================================================
0000D1F0                            
0000D1F0                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D1F0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D1F6 6000 0000                  		bra.w	DisplaySprite
0000D1FA                            ; ===========================================================================
0000D1FA                            
0000D1FA                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D1FA 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D200 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D206 303C 00BF                  		move.w	#$BF,d0
0000D20A 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play continues music
0000D210 5428 0024                  		addq.b	#2,$24(a0)
0000D214 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D21A 6000 0000                  		bra.w	DisplaySprite
0000D21E                            ; ===========================================================================
0000D21E                            
0000D21E                            loc_C91A:				; XREF: Obj7E_Index
0000D21E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D222 0200 000F                  		andi.b	#$F,d0
0000D226 6600                       		bne.s	Obj7E_Display2
0000D228 0868 0000 001A             		bchg	#0,$1A(a0)
0000D22E                            
0000D22E                            Obj7E_Display2:
0000D22E 6000 0000                  		bra.w	DisplaySprite
0000D232                            ; ===========================================================================
0000D232 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D238 0200                       		dc.b 2,	0		; rountine number, frame number
0000D23A 0320 0120 0118             		dc.w $320, $120, $118
0000D240 0201                       		dc.b 2,	1
0000D242 0360 0120 0128             		dc.w $360, $120, $128
0000D248 0202                       		dc.b 2,	2
0000D24A 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D250 0203                       		dc.b 2,	3
0000D252 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D258 0206                       		dc.b 2,	6
0000D25A                            ; ===========================================================================
0000D25A                            ; ---------------------------------------------------------------------------
0000D25A                            ; Object 7F - chaos emeralds from the special stage results screen
0000D25A                            ; ---------------------------------------------------------------------------
0000D25A                            
0000D25A                            Obj7F:					; XREF: Obj_Index
0000D25A 7000                       		moveq	#0,d0
0000D25C 1028 0024                  		move.b	$24(a0),d0
0000D260 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D264 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D268                            ; ===========================================================================
0000D268 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D26A 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D26C                            
0000D26C                            ; ---------------------------------------------------------------------------
0000D26C                            ; X-axis positions for chaos emeralds
0000D26C                            ; ---------------------------------------------------------------------------
0000D26C 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D278                            ; ===========================================================================
0000D278                            
0000D278                            Obj7F_Main:				; XREF: Obj7F_Index
0000D278 2248                       		movea.l	a0,a1
0000D27A 45F9 0000 D26C             		lea	(Obj7F_PosData).l,a2
0000D280 7400                       		moveq	#0,d2
0000D282 7200                       		moveq	#0,d1
0000D284 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D288 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D28A 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D28E                            
0000D28E                            Obj7F_Loop:
0000D28E 12BC 007F                  		move.b	#$7F,0(a1)
0000D292 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D296 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D29C 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D2A0 1633 2000                  		move.b	(a3,d2.w),d3
0000D2A4 1343 001A                  		move.b	d3,$1A(a1)
0000D2A8 1343 001C                  		move.b	d3,$1C(a1)
0000D2AC 5202                       		addq.b	#1,d2
0000D2AE 5429 0024                  		addq.b	#2,$24(a1)
0000D2B2 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D2BA 337C 8541 0002             		move.w	#$8541,2(a1)
0000D2C0 137C 0000 0001             		move.b	#0,1(a1)
0000D2C6 43E9 0040                  		lea	$40(a1),a1	; next object
0000D2CA 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D2CE                            
0000D2CE                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D2CE 1028 001A                  		move.b	$1A(a0),d0
0000D2D2 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D2D8 0C00 0006                  		cmpi.b	#6,d0
0000D2DC 6600                       		bne.s	Obj7F_Display
0000D2DE 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D2E4                            
0000D2E4                            Obj7F_Display:
0000D2E4 6000 0000                  		bra.w	DisplaySprite
0000D2E8                            ; ===========================================================================
0000D2E8                            ; ---------------------------------------------------------------------------
0000D2E8                            ; Sprite mappings - zone title cards
0000D2E8                            ; ---------------------------------------------------------------------------
0000D2E8                            Map_obj34:
0000D2E8                                    include "_maps\obj34.asm"
0000D2E8                            Map_c5df:
0000D2E8 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D2EA 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D2EC 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D2EE 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D2F0 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D2F2 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D2F4 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D2F6 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D2F8 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D2FA 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D2FC 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D2FE 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D300 0C                         Map_c5df_18: 	dc.b $C
0000D301 F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D306 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D30B F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D310 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D315 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D31A F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D31F F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D324 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D329 F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D32E F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D333 F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D338 F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D33D 16                         Map_c5df_55: 	dc.b $16
0000D33E F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D343 F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D348 F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D34D F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D352 F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D357 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D35C F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D361 F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D366 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D36B F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D370 F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D375 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D37A F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D37F F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D384 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D389 F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D38E F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D393 F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D398 F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D39D F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D3A2 F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D3A7 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D3AC 05                         Map_c5df_C4: 	dc.b $5
0000D3AD F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D3B2 F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D3B7 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D3BC F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D3C1 F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D3C6 11                         Map_c5df_DE: 	dc.b $11
0000D3C7 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D3CC F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D3D1 F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D3D6 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D3DB F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D3E0 F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D3E5 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D3EA F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D3EF F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D3F4 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D3F9 F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D3FE F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D403 F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D408 F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D40D F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D412 F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D417 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D41C 15                         Map_c5df_134: 	dc.b $15
0000D41D F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D422 F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D427 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D42C F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D431 F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D436 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D43B F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D440 F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D445 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D44A F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D44F F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D454 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D459 F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D45E F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D463 F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D468 F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D46D F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D472 F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D477 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D47C F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D481 F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D486 07                         Map_c5df_19E: 	dc.b $7
0000D487 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D48C F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D491 F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D496 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D49B F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D4A0 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D4A5 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D4AA 04                         Map_c5df_1C2: 	dc.b $4
0000D4AB F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D4B0 F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D4B5 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D4BA F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D4BF 02                         Map_c5df_1D7: 	dc.b $2
0000D4C0 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D4C5 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D4CA 02                         Map_c5df_1E2: 	dc.b $2
0000D4CB 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D4D0 F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D4D5 02                         Map_c5df_1ED: 	dc.b $2
0000D4D6 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D4DB F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D4E0 0D                         Map_c5df_1F8: 	dc.b $D
0000D4E1 E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D4E6 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D4EB EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D4F0 F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D4F5 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D4FA 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D4FF 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D504 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D509 EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D50E F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D513 FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D518 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D51D 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D522 05                         Map_c5df_23A: 	dc.b $5
0000D523 F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D528 F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D52D F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D532 F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D537 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D53C                            	even
0000D53C                            	even
0000D53C                            ; ---------------------------------------------------------------------------
0000D53C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D53C                            ; ---------------------------------------------------------------------------
0000D53C                            Map_obj39:
0000D53C                            	include "_maps\obj39.asm"
0000D53C                            ; ---------------------------------------------------------------------------
0000D53C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D53C                            ; ---------------------------------------------------------------------------
0000D53C 0000                       		dc.w byte_CBAC-Map_obj39
0000D53E 0000                       		dc.w byte_CBB7-Map_obj39
0000D540 0000                       		dc.w byte_CBC2-Map_obj39
0000D542 0000                       		dc.w byte_CBCD-Map_obj39
0000D544 02                         byte_CBAC:	dc.b 2
0000D545 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D54A F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D54F 02                         byte_CBB7:	dc.b 2
0000D550 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D555 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D55A 02                         byte_CBC2:	dc.b 2
0000D55B F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D560 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D565 02                         byte_CBCD:	dc.b 2
0000D566 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D56B F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D570                            		even
0000D570                            		even
0000D570                            
0000D570                            ; ---------------------------------------------------------------------------
0000D570                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D570                            ; ---------------------------------------------------------------------------
0000D570 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D572 0000                       		dc.w byte_CC13-Map_obj3A
0000D574 0000                       		dc.w byte_CC32-Map_obj3A
0000D576 0000                       		dc.w byte_CC51-Map_obj3A
0000D578 0000                       		dc.w byte_CC75-Map_obj3A
0000D57A                            		;dc.w byte_CB47-Map_obj3A
0000D57A                            		;dc.w byte_CB26-Map_obj3A
0000D57A                            		;dc.w byte_CB31-Map_obj3A
0000D57A                            		;dc.w byte_CB3C-Map_obj3A
0000D57A 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D57B F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D580 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D585 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D58A F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D58F F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D594 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D599 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D59E F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D5A3 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D5A8 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D5AD F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D5B2 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D5B7 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D5BC F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D5C1 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D5C6 06                         byte_CC13:	dc.b 6			; PASSED
0000D5C7 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D5CC F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D5D1 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D5D6 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D5DB F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D5E0 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D5E5 06                         byte_CC32:	dc.b 6			; SCORE
0000D5E6 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D5EB F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D5F0 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D5F5 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D5FA F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D5FF FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D604 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D605 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D60A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D60F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D614 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D619 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D61E F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D623 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D628 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D629 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D62E F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D633 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D638 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D63D FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D642 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D647 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D64C                            		even
0000D64C                            ; ---------------------------------------------------------------------------
0000D64C                            ; Sprite mappings - special stage results screen
0000D64C                            ; ---------------------------------------------------------------------------
0000D64C 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D64E 0000                       		dc.w byte_CCEE-Map_obj7E
0000D650 0000                       		dc.w byte_CD0D-Map_obj7E
0000D652                            		;dc.w byte_CB47-Map_obj7E
0000D652 0000                       		dc.w byte_CD31-Map_obj7E
0000D654 0000                       		dc.w byte_CD46-Map_obj7E
0000D656 0000                       		dc.w byte_CD5B-Map_obj7E
0000D658 0000                       		dc.w byte_CD6B-Map_obj7E
0000D65A 0000                       		dc.w byte_CDA8-Map_obj7E
0000D65C 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D65D F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D662 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D667 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D66C F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D671 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D676 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D67B F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D680 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D685 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D68A F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D68F F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D694 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D699 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D69E 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D69F F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D6A4 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D6A9 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D6AE F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D6B3 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D6B8 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D6BD 07                         byte_CD0D:	dc.b 7
0000D6BE F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D6C3 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D6C8 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D6CD F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D6D2 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D6D7 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D6DC F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D6E1 04                         byte_CD31:	dc.b 4
0000D6E2 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D6E7 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D6EC F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D6F1 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D6F6 04                         byte_CD46:	dc.b 4
0000D6F7 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D6FC F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D701 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D706 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D70B 03                         byte_CD5B:	dc.b 3
0000D70C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D711 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D716 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D71B 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D71C F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D721 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D726 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D72B F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D730 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D735 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D73A F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D73F F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D744 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D749 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D74E F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D753 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D758 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D759 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D75E F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D763 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D768 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D76D F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D772 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D777 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D77C F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D781 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D786 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D78B F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D790 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D795 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D79A F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D79F F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D7A4                            		even
0000D7A4                            ; ---------------------------------------------------------------------------
0000D7A4                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D7A4                            ; ---------------------------------------------------------------------------
0000D7A4                            Map_obj7F:
0000D7A4                            	include "_maps\obj7F.asm"
0000D7A4                            ; ---------------------------------------------------------------------------
0000D7A4                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D7A4                            ; ---------------------------------------------------------------------------
0000D7A4 0000                       		dc.w byte_CE02-Map_obj7F
0000D7A6 0000                       		dc.w byte_CE08-Map_obj7F
0000D7A8 0000                       		dc.w byte_CE0E-Map_obj7F
0000D7AA 0000                       		dc.w byte_CE14-Map_obj7F
0000D7AC 0000                       		dc.w byte_CE1A-Map_obj7F
0000D7AE 0000                       		dc.w byte_CE20-Map_obj7F
0000D7B0 0000                       		dc.w byte_CE26-Map_obj7F
0000D7B2 01                         byte_CE02:	dc.b 1
0000D7B3 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D7B8 01                         byte_CE08:	dc.b 1
0000D7B9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D7BE 01                         byte_CE0E:	dc.b 1
0000D7BF F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D7C4 01                         byte_CE14:	dc.b 1
0000D7C5 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D7CA 01                         byte_CE1A:	dc.b 1
0000D7CB F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D7D0 01                         byte_CE20:	dc.b 1
0000D7D1 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D7D6 00                         byte_CE26:	dc.b 0			; Blank frame
0000D7D8 00                         		even
0000D7D8 00                         		even
0000D7D8                            
0000D7D8                            ; ===========================================================================
0000D7D8                            ; ---------------------------------------------------------------------------
0000D7D8                            ; Object 36 - spikes
0000D7D8                            ; ---------------------------------------------------------------------------
0000D7D8                            
0000D7D8                            Obj36:					; XREF: Obj_Index
0000D7D8 7000                       		moveq	#0,d0
0000D7DA 1028 0024                  		move.b	$24(a0),d0
0000D7DE 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D7E2 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D7E6                            ; ===========================================================================
0000D7E6 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D7E8 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D7EA                            
0000D7EA 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D7EC 0110                       		dc.b 1,	$10
0000D7EE 0204                       		dc.b 2,	4
0000D7F0 031C                       		dc.b 3,	$1C
0000D7F2 0440                       		dc.b 4,	$40
0000D7F4 0510                       		dc.b 5,	$10
0000D7F6                            ; ===========================================================================
0000D7F6                            
0000D7F6                            Obj36_Main:				; XREF: Obj36_Index
0000D7F6 5428 0024                  		addq.b	#2,$24(a0)
0000D7FA 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D802 317C 051B 0002             		move.w	#$51B,2(a0)
0000D808 0028 0004 0001             		ori.b	#4,1(a0)
0000D80E 117C 0004 0018             		move.b	#4,$18(a0)
0000D814 1028 0028                  		move.b	$28(a0),d0
0000D818 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D81E 0240 00F0                  		andi.w	#$F0,d0
0000D822 43F9 0000 D7EA             		lea	(Obj36_Var).l,a1
0000D828 E648                       		lsr.w	#3,d0
0000D82A D2C0                       		adda.w	d0,a1
0000D82C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D830 1159 0019                  		move.b	(a1)+,$19(a0)
0000D834 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D83A 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D840                            
0000D840                            Obj36_Solid:				; XREF: Obj36_Index
0000D840 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D844 343C 0004                  		move.w	#4,d2
0000D848 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D84E 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D850 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D856 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D858 343C 0014                  		move.w	#$14,d2
0000D85C                            
0000D85C                            ; Spikes types $1x and $5x face	sideways
0000D85C                            
0000D85C                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D85C 323C 001B                  		move.w	#$1B,d1
0000D860 3602                       		move.w	d2,d3
0000D862 5243                       		addq.w	#1,d3
0000D864 3828 0008                  		move.w	8(a0),d4
0000D868 6100 0000                  		bsr.w	SolidObject
0000D86C 0828 0003 0022             		btst	#3,$22(a0)
0000D872 6600                       		bne.s	Obj36_Display
0000D874 0C44 0001                  		cmpi.w	#1,d4
0000D878 6700                       		beq.s	Obj36_Hurt
0000D87A 6000                       		bra.s	Obj36_Display
0000D87C                            ; ===========================================================================
0000D87C                            
0000D87C                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D87C                            
0000D87C                            Obj36_Upright:				; XREF: Obj36_Solid
0000D87C 7200                       		moveq	#0,d1
0000D87E 1228 0019                  		move.b	$19(a0),d1
0000D882 0641 000B                  		addi.w	#$B,d1
0000D886 343C 0010                  		move.w	#$10,d2
0000D88A 363C 0011                  		move.w	#$11,d3
0000D88E 3828 0008                  		move.w	8(a0),d4
0000D892 6100 0000                  		bsr.w	SolidObject
0000D896 0828 0003 0022             		btst	#3,$22(a0)
0000D89C 6600                       		bne.s	Obj36_Hurt
0000D89E 4A44                       		tst.w	d4
0000D8A0 6A00                       		bpl.s	Obj36_Display
0000D8A2                            
0000D8A2                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D8A2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D8A6 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D8A8 2F08                       		move.l	a0,-(sp)
0000D8AA 2448                       		movea.l	a0,a2
0000D8AC 41F8 D000                  		lea	($FFFFD000).w,a0
0000D8B0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D8B6 6400                       		bcc.s	loc_CF20
0000D8B8 2628 000C                  		move.l	$C(a0),d3
0000D8BC 3028 0012                  		move.w	$12(a0),d0
0000D8C0 48C0                       		ext.l	d0
0000D8C2 E180                       		asl.l	#8,d0
0000D8C4 9680                       		sub.l	d0,d3
0000D8C6 2143 000C                  		move.l	d3,$C(a0)
0000D8CA 4EB9 0000 0000             		jsr	HurtSonic
0000D8D0                            
0000D8D0                            loc_CF20:
0000D8D0 205F                       		movea.l	(sp)+,a0
0000D8D2                            
0000D8D2                            Obj36_Display:
0000D8D2 6100 0000                  		bsr.w	DisplaySprite
0000D8D6 3028 0030                  		move.w	$30(a0),d0
0000D8DA 0240 FF80                  		andi.w	#$FF80,d0
0000D8DE 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8E2 0441 0080                  		subi.w	#$80,d1
0000D8E6 0241 FF80                  		andi.w	#$FF80,d1
0000D8EA 9041                       		sub.w	d1,d0
0000D8EC 0C40 0280                  		cmpi.w	#$280,d0
0000D8F0 6200 0000                  		bhi.w	DeleteObject
0000D8F4 4E75                       		rts	
0000D8F6                            ; ===========================================================================
0000D8F6                            
0000D8F6                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D8F6 7000                       		moveq	#0,d0
0000D8F8 1028 0028                  		move.b	$28(a0),d0
0000D8FC D040                       		add.w	d0,d0
0000D8FE 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D902 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D906                            ; ===========================================================================
0000D906 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D908 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D90A 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D90C                            ; ===========================================================================
0000D90C                            
0000D90C                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D90C 4E75                       		rts			; don't move the object
0000D90E                            ; ===========================================================================
0000D90E                            
0000D90E                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D90E 6100 0000                  		bsr.w	Obj36_Wait
0000D912 7000                       		moveq	#0,d0
0000D914 1028 0034                  		move.b	$34(a0),d0
0000D918 D068 0032                  		add.w	$32(a0),d0
0000D91C 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D920 4E75                       		rts	
0000D922                            ; ===========================================================================
0000D922                            
0000D922                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D922 6100 0000                  		bsr.w	Obj36_Wait
0000D926 7000                       		moveq	#0,d0
0000D928 1028 0034                  		move.b	$34(a0),d0
0000D92C D068 0030                  		add.w	$30(a0),d0
0000D930 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D934 4E75                       		rts	
0000D936                            ; ===========================================================================
0000D936                            
0000D936                            Obj36_Wait:
0000D936 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D93A 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D93C 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D940 6600                       		bne.s	locret_CFE6
0000D942 4A28 0001                  		tst.b	1(a0)
0000D946 6A00                       		bpl.s	locret_CFE6
0000D948 303C 00B6                  		move.w	#$B6,d0
0000D94C 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D952 6000                       		bra.s	locret_CFE6
0000D954                            ; ===========================================================================
0000D954                            
0000D954                            loc_CFA4:
0000D954 4A68 0036                  		tst.w	$36(a0)
0000D958 6700                       		beq.s	loc_CFC6
0000D95A 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D960 6400                       		bcc.s	locret_CFE6
0000D962 317C 0000 0034             		move.w	#0,$34(a0)
0000D968 317C 0000 0036             		move.w	#0,$36(a0)
0000D96E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D974 6000                       		bra.s	locret_CFE6
0000D976                            ; ===========================================================================
0000D976                            
0000D976                            loc_CFC6:
0000D976 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D97C 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D982 6500                       		bcs.s	locret_CFE6
0000D984 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D98A 317C 0001 0036             		move.w	#1,$36(a0)
0000D990 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D996                            
0000D996                            locret_CFE6:
0000D996 4E75                       		rts	
0000D998                            ; ===========================================================================
0000D998                            ; ---------------------------------------------------------------------------
0000D998                            ; Sprite mappings - spikes
0000D998                            ; ---------------------------------------------------------------------------
0000D998                            Map_obj36:
0000D998                            	include "_maps\obj36.asm"
0000D998                            Map_obj36_inner:
0000D998 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D99A 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D99C 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D99E 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D9A0 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D9A2 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D9A4 03                         Map_obj36_inner_C: 	dc.b $3
0000D9A5 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D9AA F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9AF F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D9B4 03                         Map_obj36_inner_1C: 	dc.b $3
0000D9B5 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D9BA FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D9BF 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000D9C4 01                         Map_obj36_inner_2C: 	dc.b $1
0000D9C5 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9CA 03                         Map_obj36_inner_32: 	dc.b $3
0000D9CB F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000D9D0 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9D5 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000D9DA 06                         Map_obj36_inner_42: 	dc.b $6
0000D9DB F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000D9E0 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000D9E5 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000D9EA F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000D9EF F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000D9F4 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000D9F9 01                         Map_obj36_inner_61: 	dc.b $1
0000D9FA FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DA00 00                         	even
0000DA00 00                         	even
0000DA00                            
0000DA00                            ; ===========================================================================
0000DA00                            ; ---------------------------------------------------------------------------
0000DA00                            ; Object 3B - purple rock (GHZ)
0000DA00                            ; ---------------------------------------------------------------------------
0000DA00                            
0000DA00                            Obj3B:					; XREF: Obj_Index
0000DA00 7000                       		moveq	#0,d0
0000DA02 1028 0024                  		move.b	$24(a0),d0
0000DA06 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DA0A 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DA0E                            ; ===========================================================================
0000DA0E 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DA10 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DA12                            ; ===========================================================================
0000DA12                            
0000DA12                            Obj3B_Main:				; XREF: Obj3B_Index
0000DA12 5428 0024                  		addq.b	#2,$24(a0)
0000DA16 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DA1E 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DA24 117C 0004 0001             		move.b	#4,1(a0)
0000DA2A 117C 0013 0019             		move.b	#$13,$19(a0)
0000DA30 117C 0004 0018             		move.b	#4,$18(a0)
0000DA36                            
0000DA36                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DA36 323C 001B                  		move.w	#$1B,d1
0000DA3A 343C 0010                  		move.w	#$10,d2
0000DA3E 363C 0010                  		move.w	#$10,d3
0000DA42 3828 0008                  		move.w	8(a0),d4
0000DA46 6100 0000                  		bsr.w	SolidObject
0000DA4A 6100 0000                  		bsr.w	DisplaySprite
0000DA4E 3028 0008                  		move.w	8(a0),d0
0000DA52 0240 FF80                  		andi.w	#$FF80,d0
0000DA56 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA5A 0441 0080                  		subi.w	#$80,d1
0000DA5E 0241 FF80                  		andi.w	#$FF80,d1
0000DA62 9041                       		sub.w	d1,d0
0000DA64 0C40 0280                  		cmpi.w	#$280,d0
0000DA68 6200 0000                  		bhi.w	DeleteObject
0000DA6C 4E75                       		rts	
0000DA6E                            ; ===========================================================================
0000DA6E                            ; ---------------------------------------------------------------------------
0000DA6E                            ; Object 49 - waterfall	sound effect (GHZ)
0000DA6E                            ; ---------------------------------------------------------------------------
0000DA6E                            
0000DA6E                            Obj49:					; XREF: Obj_Index
0000DA6E 7000                       		moveq	#0,d0
0000DA70 1028 0024                  		move.b	$24(a0),d0
0000DA74 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DA78 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DA7C                            ; ===========================================================================
0000DA7C 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DA7E 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DA80                            ; ===========================================================================
0000DA80                            
0000DA80                            Obj49_Main:				; XREF: Obj49_Index
0000DA80 5428 0024                  		addq.b	#2,$24(a0)
0000DA84 117C 0004 0001             		move.b	#4,1(a0)
0000DA8A                            
0000DA8A                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DA8A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DA8E 0200 003F                  		andi.b	#$3F,d0
0000DA92 6600                       		bne.s	Obj49_ChkDel
0000DA94 303C 00D0                  		move.w	#$D0,d0
0000DA98 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DA9E                            
0000DA9E                            Obj49_ChkDel:
0000DA9E 3028 0008                  		move.w	8(a0),d0
0000DAA2 0240 FF80                  		andi.w	#$FF80,d0
0000DAA6 3238 F700                  		move.w	($FFFFF700).w,d1
0000DAAA 0441 0080                  		subi.w	#$80,d1
0000DAAE 0241 FF80                  		andi.w	#$FF80,d1
0000DAB2 9041                       		sub.w	d1,d0
0000DAB4 0C40 0280                  		cmpi.w	#$280,d0
0000DAB8 6200 0000                  		bhi.w	DeleteObject
0000DABC 4E75                       		rts	
0000DABE                            ; ===========================================================================
0000DABE                            ; ---------------------------------------------------------------------------
0000DABE                            ; Sprite mappings - purple rock	(GHZ)
0000DABE                            ; ---------------------------------------------------------------------------
0000DABE                            Map_obj3B:
0000DABE                            	include "_maps\obj3B.asm"
0000DABE                            ; ---------------------------------------------------------------------------
0000DABE                            ; Sprite mappings - purple rock	(GHZ)
0000DABE                            ; ---------------------------------------------------------------------------
0000DABE 0000                       		dc.w byte_D110-Map_obj3B
0000DAC0 02                         byte_D110:	dc.b 2
0000DAC1 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DAC6 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DACC 00                         		even
0000DACC 00                         		even
0000DACC                            
0000DACC                            ; ===========================================================================
0000DACC                            ; ---------------------------------------------------------------------------
0000DACC                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DACC                            ; ---------------------------------------------------------------------------
0000DACC                            
0000DACC                            Obj3C:					; XREF: Obj_Index
0000DACC 7000                       		moveq	#0,d0
0000DACE 1028 0024                  		move.b	$24(a0),d0
0000DAD2 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DAD6 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DADA 6000 0000                  		bra.w	MarkObjGone
0000DADE                            ; ===========================================================================
0000DADE 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DAE0 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DAE2 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DAE4                            ; ===========================================================================
0000DAE4                            
0000DAE4                            Obj3C_Main:				; XREF: Obj3C_Index
0000DAE4 5428 0024                  		addq.b	#2,$24(a0)
0000DAE8 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DAF0 317C 450F 0002             		move.w	#$450F,2(a0)
0000DAF6 117C 0004 0001             		move.b	#4,1(a0)
0000DAFC 117C 0010 0019             		move.b	#$10,$19(a0)
0000DB02 117C 0004 0018             		move.b	#4,$18(a0)
0000DB08 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DB0E                            
0000DB0E                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DB0E 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DB14 323C 001B                  		move.w	#$1B,d1
0000DB18 343C 0020                  		move.w	#$20,d2
0000DB1C 363C 0020                  		move.w	#$20,d3
0000DB20 3828 0008                  		move.w	8(a0),d4
0000DB24 6100 0000                  		bsr.w	SolidObject
0000DB28 0828 0005 0022             		btst	#5,$22(a0)
0000DB2E 6600                       		bne.s	Obj3C_ChkRoll
0000DB30                            
0000DB30                            locret_D180:
0000DB30 4E75                       		rts	
0000DB32                            ; ===========================================================================
0000DB32                            
0000DB32                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DB32 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DB38 66F6                       		bne.s	locret_D180	; if not, branch
0000DB3A 3028 0030                  		move.w	$30(a0),d0
0000DB3E 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DB40 4440                       		neg.w	d0
0000DB42                            
0000DB42                            Obj3C_ChkSpeed:
0000DB42 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DB46 65E8                       		bcs.s	locret_D180	; if not, branch
0000DB48 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DB4E 5869 0008                  		addq.w	#4,8(a1)
0000DB52 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DB58 3028 0008                  		move.w	8(a0),d0
0000DB5C B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DB60 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DB62 5169 0008                  		subq.w	#8,8(a1)
0000DB66 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DB6C                            
0000DB6C                            Obj3C_Smash:
0000DB6C 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DB72 08A8 0005 0022             		bclr	#5,$22(a0)
0000DB78 08A9 0005 0022             		bclr	#5,$22(a1)
0000DB7E 7207                       		moveq	#7,d1		; load 8 fragments
0000DB80 343C 0070                  		move.w	#$70,d2
0000DB84 6100                       		bsr.s	SmashObject
0000DB86                            
0000DB86                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DB86 6100 0000                  		bsr.w	SpeedToPos
0000DB8A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DB90 6100 0000                  		bsr.w	DisplaySprite
0000DB94 4A28 0001                  		tst.b	1(a0)
0000DB98 6A00 0000                  		bpl.w	DeleteObject
0000DB9C 4E75                       		rts	
0000DB9E                            
0000DB9E                            ; ---------------------------------------------------------------------------
0000DB9E                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DB9E                            ; ---------------------------------------------------------------------------
0000DB9E                            
0000DB9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB9E                            
0000DB9E                            
0000DB9E                            SmashObject:				; XREF: Obj3C_Smash
0000DB9E 7000                       		moveq	#0,d0
0000DBA0 1028 001A                  		move.b	$1A(a0),d0
0000DBA4 D040                       		add.w	d0,d0
0000DBA6 2668 0004                  		movea.l	4(a0),a3
0000DBAA D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DBAE 524B                       		addq.w	#1,a3
0000DBB0 08E8 0005 0001             		bset	#5,1(a0)
0000DBB6 1810                       		move.b	0(a0),d4
0000DBB8 1A28 0001                  		move.b	1(a0),d5
0000DBBC 2248                       		movea.l	a0,a1
0000DBBE 6000                       		bra.s	Smash_LoadFrag
0000DBC0                            ; ===========================================================================
0000DBC0                            
0000DBC0                            Smash_Loop:
0000DBC0 6100 0000                  		bsr.w	SingleObjLoad
0000DBC4 6600                       		bne.s	Smash_PlaySnd
0000DBC6 5A4B                       		addq.w	#5,a3
0000DBC8                            
0000DBC8                            Smash_LoadFrag:				; XREF: SmashObject
0000DBC8 137C 0004 0024             		move.b	#4,$24(a1)
0000DBCE 1284                       		move.b	d4,0(a1)
0000DBD0 234B 0004                  		move.l	a3,4(a1)
0000DBD4 1345 0001                  		move.b	d5,1(a1)
0000DBD8 3368 0008 0008             		move.w	8(a0),8(a1)
0000DBDE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DBE4 3368 0002 0002             		move.w	2(a0),2(a1)
0000DBEA 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DBF0 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DBF6 335C 0010                  		move.w	(a4)+,$10(a1)
0000DBFA 335C 0012                  		move.w	(a4)+,$12(a1)
0000DBFE B3C8                       		cmpa.l	a0,a1
0000DC00 6400                       		bcc.s	loc_D268
0000DC02 2F08                       		move.l	a0,-(sp)
0000DC04 2049                       		movea.l	a1,a0
0000DC06 6100 0000                  		bsr.w	SpeedToPos
0000DC0A D568 0012                  		add.w	d2,$12(a0)
0000DC0E 205F                       		movea.l	(sp)+,a0
0000DC10 6100 0000                  		bsr.w	DisplaySprite2
0000DC14                            
0000DC14                            loc_D268:
0000DC14 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DC18                            
0000DC18                            Smash_PlaySnd:
0000DC18 303C 00CB                  		move.w	#$CB,d0
0000DC1C 4EF9 0000 158E             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DC22                            ; End of function SmashObject
0000DC22                            
0000DC22                            ; ===========================================================================
0000DC22                            ; Smashed block	fragment speeds
0000DC22                            ;
0000DC22 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DC26 0600 FF00                  		dc.w $600, $FF00
0000DC2A 0600 0100                  		dc.w $600, $100
0000DC2E 0400 0500                  		dc.w $400, $500
0000DC32 0600 FA00                  		dc.w $600, $FA00
0000DC36 0800 FE00                  		dc.w $800, $FE00
0000DC3A 0800 0200                  		dc.w $800, $200
0000DC3E 0600 0600                  		dc.w $600, $600
0000DC42                            
0000DC42 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DC46 F800 FE00                  		dc.w $F800, $FE00
0000DC4A F800 0200                  		dc.w $F800, $200
0000DC4E FA00 0600                  		dc.w $FA00, $600
0000DC52 FC00 FB00                  		dc.w $FC00, $FB00
0000DC56 FA00 FF00                  		dc.w $FA00, $FF00
0000DC5A FA00 0100                  		dc.w $FA00, $100
0000DC5E FC00 0500                  		dc.w $FC00, $500
0000DC62                            ; ---------------------------------------------------------------------------
0000DC62                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DC62                            ; ---------------------------------------------------------------------------
0000DC62                            Map_obj3C:
0000DC62                            	include "_maps\obj3C.asm"
0000DC62                            ; ---------------------------------------------------------------------------
0000DC62                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DC62                            ; ---------------------------------------------------------------------------
0000DC62 0000                       		dc.w byte_D2BC-Map_obj3C
0000DC64 0000                       		dc.w byte_D2E5-Map_obj3C
0000DC66 0000                       		dc.w byte_D30E-Map_obj3C
0000DC68 08                         byte_D2BC:	dc.b 8
0000DC69 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DC6E F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DC73 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DC78 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DC7D E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DC82 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DC87 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DC8C 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DC91 08                         byte_D2E5:	dc.b 8
0000DC92 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DC97 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DC9C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DCA1 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DCA6 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DCAB F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DCB0 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DCB5 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DCBA 08                         byte_D30E:	dc.b 8
0000DCBB E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DCC0 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DCC5 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DCCA 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DCCF E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DCD4 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DCD9 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DCDE 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DCE4 00                         		even
0000DCE4 00                         		even
0000DCE4                            
0000DCE4                            ; ---------------------------------------------------------------------------
0000DCE4                            ; Object code loading subroutine
0000DCE4                            ; ---------------------------------------------------------------------------
0000DCE4                            
0000DCE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCE4                            
0000DCE4                            
0000DCE4                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DCE4 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DCE8 7E7F                       		moveq	#$7F,d7
0000DCEA 7000                       		moveq	#0,d0
0000DCEC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DCF2 6400                       		bcc.s	loc_D362
0000DCF4                            
0000DCF4                            loc_D348:
0000DCF4 1010                       		move.b	(a0),d0		; load object number from RAM
0000DCF6 6700                       		beq.s	loc_D358
0000DCF8 D040                       		add.w	d0,d0
0000DCFA D040                       		add.w	d0,d0
0000DCFC 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DD00 4E91                       		jsr	(a1)		; run the object's code
0000DD02 7000                       		moveq	#0,d0
0000DD04                            
0000DD04                            loc_D358:
0000DD04 41E8 0040                  		lea	$40(a0),a0	; next object
0000DD08 51CF FFEA                  		dbf	d7,loc_D348
0000DD0C 4E75                       		rts	
0000DD0E                            ; ===========================================================================
0000DD0E                            
0000DD0E                            loc_D362:
0000DD0E 7E1F                       		moveq	#$1F,d7
0000DD10 61E2                       		bsr.s	loc_D348
0000DD12 7E5F                       		moveq	#$5F,d7
0000DD14                            
0000DD14                            loc_D368:
0000DD14 7000                       		moveq	#0,d0
0000DD16 1010                       		move.b	(a0),d0
0000DD18 6700                       		beq.s	loc_D378
0000DD1A 4A28 0001                  		tst.b	1(a0)
0000DD1E 6A00                       		bpl.s	loc_D378
0000DD20 6100 0000                  		bsr.w	DisplaySprite
0000DD24                            
0000DD24                            loc_D378:
0000DD24 41E8 0040                  		lea	$40(a0),a0
0000DD28                            
0000DD28                            loc_D37C:
0000DD28 51CF FFEA                  		dbf	d7,loc_D368
0000DD2C 4E75                       		rts	
0000DD2E                            ; End of function ObjectsLoad
0000DD2E                            
0000DD2E                            ; ===========================================================================
0000DD2E                            ; ---------------------------------------------------------------------------
0000DD2E                            ; Object pointers
0000DD2E                            ; ---------------------------------------------------------------------------
0000DD2E                            Obj_Index:
0000DD2E                            	include "_inc\Object pointers.asm"
0000DD2E                            ; ---------------------------------------------------------------------------
0000DD2E                            ; Object pointers
0000DD2E                            ; ---------------------------------------------------------------------------
0000DD2E 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DD3E 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DD4E 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DD5E 0000 0000 0000 AF50 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DD6E 0000 7AE8 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DD7E 0000 810E 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DD8E 0000 895C 0000 8A56 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DD9E 0000 90A0 0000 938E 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DDAE 0000 0000 0000 A04C 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DDBE 0000 A384 0000 A970 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DDCE 0000 9CA8 0000 9176 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DDDE 0000 B548 0000 AB64 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DDEE 0000 BF5C 0000 C60A 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DDFE 0000 BABA 0000 D7D8 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DE0E 0000 CDB8 0000 CE72 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DE1E 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DE2E 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DE3E 0000 C278 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DE4E 0000 DA6E 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DE5E 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DE6E 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DE7E 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DE8E 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DE9E 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DEAE 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DEBE 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DECE 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DEDE 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DEEE 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DEFE 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DF0E 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DF1E 0000 0000 0000 D0B4 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DF2E 0000 5594 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DF3E 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DF4E 0000 5C4E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DF4E 0000 5C4E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DF5E                            
0000DF5E                            ; ---------------------------------------------------------------------------
0000DF5E                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DF5E                            ; ---------------------------------------------------------------------------
0000DF5E                            
0000DF5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF5E                            
0000DF5E                            
0000DF5E                            ObjectFall:
0000DF5E 2428 0008                  		move.l	8(a0),d2
0000DF62 2628 000C                  		move.l	$C(a0),d3
0000DF66 3028 0010                  		move.w	$10(a0),d0
0000DF6A 48C0                       		ext.l	d0
0000DF6C E180                       		asl.l	#8,d0
0000DF6E D480                       		add.l	d0,d2
0000DF70 3028 0012                  		move.w	$12(a0),d0
0000DF74 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DF7A 48C0                       		ext.l	d0
0000DF7C E180                       		asl.l	#8,d0
0000DF7E D680                       		add.l	d0,d3
0000DF80 2142 0008                  		move.l	d2,8(a0)
0000DF84 2143 000C                  		move.l	d3,$C(a0)
0000DF88 4E75                       		rts	
0000DF8A                            ; End of function ObjectFall
0000DF8A                            
0000DF8A                            ; ---------------------------------------------------------------------------
0000DF8A                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DF8A                            ; ---------------------------------------------------------------------------
0000DF8A                            
0000DF8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF8A                            
0000DF8A                            
0000DF8A                            ObjectFallNoJump:
0000DF8A 2428 0008                  		move.l	8(a0),d2
0000DF8E 2628 000C                  		move.l	$C(a0),d3
0000DF92 3028 0010                  		move.w	$10(a0),d0
0000DF96 48C0                       		ext.l	d0
0000DF98 E180                       		asl.l	#8,d0
0000DF9A D480                       		add.l	d0,d2
0000DF9C                            ;		cmpi.b	#1,obID(a0)
0000DF9C                            ;		beq.s	ObjectFallSonic
0000DF9C 3028 000C                  		move.w	$C(a0),d0
0000DFA0 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000DFA4                            ;		ext.l	d0
0000DFA4                            ;		asl.l	#8,d0
0000DFA4                            ;		add.l	d0,d3
0000DFA4 2142 0008                  		move.l	d2,$8(a0)
0000DFA8                            ;		move.l	d3,obY(a0)
0000DFA8 4E75                       		rts	
0000DFAA                            
0000DFAA                            ; End of function ObjectFall
0000DFAA                            
0000DFAA                            JumpFallSonic:
0000DFAA 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000DFB0                                    
0000DFB0 E180                               asl.l    #8,d0                ; Apply X speed
0000DFB2 D1A8 0008                          add.l    d0,$8(a0)
0000DFB6                                    
0000DFB6 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000DFBA 4A41                               tst.w    d1                ; Are we falling?
0000DFBC 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000DFBE 4440                               neg.w    d0                ; Make Y movement go up
0000DFC0                                    
0000DFC0                            .SetYSpeed:
0000DFC0 48C0                               ext.l    d0                ; Apply Y speed
0000DFC2 E180                               asl.l    #8,d0
0000DFC4 D1A8 000C                          add.l    d0,$C(a0)
0000DFC8 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000DFCE 4E75                               rts
0000DFD0                            
0000DFD0                            ; ---------------------------------------------------------------------------
0000DFD0                            ; Subroutine translating object	speed to update	object position
0000DFD0                            ; ---------------------------------------------------------------------------
0000DFD0                            
0000DFD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFD0                            
0000DFD0                            
0000DFD0                            SpeedToPos:
0000DFD0 2428 0008                  		move.l	8(a0),d2
0000DFD4 2628 000C                  		move.l	$C(a0),d3
0000DFD8 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DFDC 48C0                       		ext.l	d0
0000DFDE E180                       		asl.l	#8,d0		; multiply speed by $100
0000DFE0 D480                       		add.l	d0,d2		; add to x-axis	position
0000DFE2 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DFE6 48C0                       		ext.l	d0
0000DFE8 E180                       		asl.l	#8,d0		; multiply by $100
0000DFEA D680                       		add.l	d0,d3		; add to y-axis	position
0000DFEC 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DFF0 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DFF4 4E75                       		rts	
0000DFF6                            ; End of function SpeedToPos
0000DFF6                            
0000DFF6                            ; ---------------------------------------------------------------------------
0000DFF6                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DFF6                            ; ---------------------------------------------------------------------------
0000DFF6                            
0000DFF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFF6                            
0000DFF6                            
0000DFF6                            DisplaySprite:
0000DFF6 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DFFA 3028 0018                  		move.w	$18(a0),d0
0000DFFE E248                       		lsr.w	#1,d0
0000E000 0240 0380                  		andi.w	#$380,d0
0000E004 D2C0                       		adda.w	d0,a1
0000E006 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E00A 6400                       		bcc.s	locret_D620
0000E00C 5451                       		addq.w	#2,(a1)
0000E00E D2D1                       		adda.w	(a1),a1
0000E010 3288                       		move.w	a0,(a1)
0000E012                            
0000E012                            locret_D620:
0000E012 4E75                       		rts	
0000E014                            ; End of function DisplaySprite
0000E014                            
0000E014                            ; ---------------------------------------------------------------------------
0000E014                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E014                            ; ---------------------------------------------------------------------------
0000E014                            
0000E014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E014                            
0000E014                            
0000E014                            DisplaySprite2:
0000E014 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E018 3029 0018                  		move.w	$18(a1),d0
0000E01C E248                       		lsr.w	#1,d0
0000E01E 0240 0380                  		andi.w	#$380,d0
0000E022 D4C0                       		adda.w	d0,a2
0000E024 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E028 6400                       		bcc.s	locret_D63E
0000E02A 5452                       		addq.w	#2,(a2)
0000E02C D4D2                       		adda.w	(a2),a2
0000E02E 3489                       		move.w	a1,(a2)
0000E030                            
0000E030                            locret_D63E:
0000E030 4E75                       		rts	
0000E032                            ; End of function DisplaySprite2
0000E032                            
0000E032                            ; ---------------------------------------------------------------------------
0000E032                            ; Subroutine to	delete an object
0000E032                            ; ---------------------------------------------------------------------------
0000E032                            
0000E032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E032                            
0000E032                            
0000E032                            DeleteObject:
0000E032 2248                       		movea.l	a0,a1
0000E034                            
0000E034                            DeleteObject2:
0000E034 7200                       		moveq	#0,d1
0000E036 700F                       		moveq	#$F,d0
0000E038                            
0000E038                            loc_D646:
0000E038 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E03A 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E03E 4E75                       		rts	
0000E040                            ; End of function DeleteObject
0000E040                            
0000E040                            ; ===========================================================================
0000E040 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E044 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E048 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E04C 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E050                            ; ---------------------------------------------------------------------------
0000E050                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E050                            ; ---------------------------------------------------------------------------
0000E050                            
0000E050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E050                            
0000E050                            
0000E050                            BuildSprites:				; XREF: TitleScreen; et al
0000E050 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E054 7A00                       		moveq	#0,d5
0000E056 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E05A 7E07                       		moveq	#7,d7
0000E05C                            
0000E05C                            loc_D66A:
0000E05C 4A54                       		tst.w	(a4)
0000E05E 6700 0000                  		beq.w	loc_D72E
0000E062 7C02                       		moveq	#2,d6
0000E064                            
0000E064                            loc_D672:
0000E064 3074 6000                  		movea.w	(a4,d6.w),a0
0000E068 4A10                       		tst.b	(a0)
0000E06A 6700 0000                  		beq.w	loc_D726
0000E06E 08A8 0007 0001             		bclr	#7,1(a0)
0000E074 1028 0001                  		move.b	1(a0),d0
0000E078 1800                       		move.b	d0,d4
0000E07A 0240 000C                  		andi.w	#$C,d0
0000E07E 6700                       		beq.s	loc_D6DE
0000E080 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E084 7000                       		moveq	#0,d0
0000E086 1028 0019                  		move.b	$19(a0),d0
0000E08A 3628 0008                  		move.w	8(a0),d3
0000E08E 9651                       		sub.w	(a1),d3
0000E090 3203                       		move.w	d3,d1
0000E092 D240                       		add.w	d0,d1
0000E094 6B00 0000                  		bmi.w	loc_D726
0000E098 3203                       		move.w	d3,d1
0000E09A 9240                       		sub.w	d0,d1
0000E09C 0C41 0140                  		cmpi.w	#$140,d1
0000E0A0 6C00                       		bge.s	loc_D726
0000E0A2 0643 0080                  		addi.w	#$80,d3
0000E0A6 0804 0004                  		btst	#4,d4
0000E0AA 6700                       		beq.s	loc_D6E8
0000E0AC 7000                       		moveq	#0,d0
0000E0AE 1028 0016                  		move.b	$16(a0),d0
0000E0B2 3428 000C                  		move.w	$C(a0),d2
0000E0B6 9469 0004                  		sub.w	4(a1),d2
0000E0BA 3202                       		move.w	d2,d1
0000E0BC D240                       		add.w	d0,d1
0000E0BE 6B00                       		bmi.s	loc_D726
0000E0C0 3202                       		move.w	d2,d1
0000E0C2 9240                       		sub.w	d0,d1
0000E0C4 0C41 00E0                  		cmpi.w	#$E0,d1
0000E0C8 6C00                       		bge.s	loc_D726
0000E0CA 0642 0080                  		addi.w	#$80,d2
0000E0CE 6000                       		bra.s	loc_D700
0000E0D0                            ; ===========================================================================
0000E0D0                            
0000E0D0                            loc_D6DE:
0000E0D0 3428 000A                  		move.w	$A(a0),d2
0000E0D4 3628 0008                  		move.w	8(a0),d3
0000E0D8 6000                       		bra.s	loc_D700
0000E0DA                            ; ===========================================================================
0000E0DA                            
0000E0DA                            loc_D6E8:
0000E0DA 3428 000C                  		move.w	$C(a0),d2
0000E0DE 9469 0004                  		sub.w	4(a1),d2
0000E0E2 0642 0080                  		addi.w	#$80,d2
0000E0E6 0C42 0060                  		cmpi.w	#$60,d2
0000E0EA 6500                       		bcs.s	loc_D726
0000E0EC 0C42 0180                  		cmpi.w	#$180,d2
0000E0F0 6400                       		bcc.s	loc_D726
0000E0F2                            
0000E0F2                            loc_D700:
0000E0F2 2268 0004                  		movea.l	4(a0),a1
0000E0F6 7200                       		moveq	#0,d1
0000E0F8 0804 0005                  		btst	#5,d4
0000E0FC 6600                       		bne.s	loc_D71C
0000E0FE 1228 001A                  		move.b	$1A(a0),d1
0000E102 D201                       		add.b	d1,d1
0000E104 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E108 1219                       		move.b	(a1)+,d1
0000E10A 5301                       		subq.b	#1,d1
0000E10C 6B00                       		bmi.s	loc_D720
0000E10E                            
0000E10E                            loc_D71C:
0000E10E 6100 0000                  		bsr.w	sub_D750
0000E112                            
0000E112                            loc_D720:
0000E112 08E8 0007 0001             		bset	#7,1(a0)
0000E118                            
0000E118                            loc_D726:
0000E118 5446                       		addq.w	#2,d6
0000E11A 5554                       		subq.w	#2,(a4)
0000E11C 6600 FF46                  		bne.w	loc_D672
0000E120                            
0000E120                            loc_D72E:
0000E120 49EC 0080                  		lea	$80(a4),a4
0000E124 51CF FF36                  		dbf	d7,loc_D66A
0000E128 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E12C 0C05 0050                  		cmpi.b	#$50,d5
0000E130 6700                       		beq.s	loc_D748
0000E132 24BC 0000 0000             		move.l	#0,(a2)
0000E138 4E75                       		rts	
0000E13A                            ; ===========================================================================
0000E13A                            
0000E13A                            loc_D748:
0000E13A 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E140 4E75                       		rts	
0000E142                            ; End of function BuildSprites
0000E142                            
0000E142                            
0000E142                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E142                            
0000E142                            
0000E142                            sub_D750:				; XREF: BuildSprites
0000E142 3668 0002                  		movea.w	2(a0),a3
0000E146 0804 0000                  		btst	#0,d4
0000E14A 6600                       		bne.s	loc_D796
0000E14C 0804 0001                  		btst	#1,d4
0000E150 6600 0000                  		bne.w	loc_D7E4
0000E154                            ; End of function sub_D750
0000E154                            
0000E154                            
0000E154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E154                            
0000E154                            
0000E154                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E154 0C05 0050                  		cmpi.b	#$50,d5
0000E158 6700                       		beq.s	locret_D794
0000E15A 1019                       		move.b	(a1)+,d0
0000E15C 4880                       		ext.w	d0
0000E15E D042                       		add.w	d2,d0
0000E160 34C0                       		move.w	d0,(a2)+
0000E162 14D9                       		move.b	(a1)+,(a2)+
0000E164 5205                       		addq.b	#1,d5
0000E166 14C5                       		move.b	d5,(a2)+
0000E168 1019                       		move.b	(a1)+,d0
0000E16A E148                       		lsl.w	#8,d0
0000E16C 1019                       		move.b	(a1)+,d0
0000E16E D04B                       		add.w	a3,d0
0000E170 34C0                       		move.w	d0,(a2)+
0000E172 1019                       		move.b	(a1)+,d0
0000E174 4880                       		ext.w	d0
0000E176 D043                       		add.w	d3,d0
0000E178 0240 01FF                  		andi.w	#$1FF,d0
0000E17C 6600                       		bne.s	loc_D78E
0000E17E 5240                       		addq.w	#1,d0
0000E180                            
0000E180                            loc_D78E:
0000E180 34C0                       		move.w	d0,(a2)+
0000E182 51C9 FFD0                  		dbf	d1,sub_D762
0000E186                            
0000E186                            locret_D794:
0000E186 4E75                       		rts	
0000E188                            ; End of function sub_D762
0000E188                            
0000E188                            ; ===========================================================================
0000E188                            
0000E188                            loc_D796:
0000E188 0804 0001                  		btst	#1,d4
0000E18C 6600 0000                  		bne.w	loc_D82A
0000E190                            
0000E190                            loc_D79E:
0000E190 0C05 0050                  		cmpi.b	#$50,d5
0000E194 6700                       		beq.s	locret_D7E2
0000E196 1019                       		move.b	(a1)+,d0
0000E198 4880                       		ext.w	d0
0000E19A D042                       		add.w	d2,d0
0000E19C 34C0                       		move.w	d0,(a2)+
0000E19E 1819                       		move.b	(a1)+,d4
0000E1A0 14C4                       		move.b	d4,(a2)+
0000E1A2 5205                       		addq.b	#1,d5
0000E1A4 14C5                       		move.b	d5,(a2)+
0000E1A6 1019                       		move.b	(a1)+,d0
0000E1A8 E148                       		lsl.w	#8,d0
0000E1AA 1019                       		move.b	(a1)+,d0
0000E1AC D04B                       		add.w	a3,d0
0000E1AE 0A40 0800                  		eori.w	#$800,d0
0000E1B2 34C0                       		move.w	d0,(a2)+
0000E1B4 1019                       		move.b	(a1)+,d0
0000E1B6 4880                       		ext.w	d0
0000E1B8 4440                       		neg.w	d0
0000E1BA D804                       		add.b	d4,d4
0000E1BC 0244 0018                  		andi.w	#$18,d4
0000E1C0 5044                       		addq.w	#8,d4
0000E1C2 9044                       		sub.w	d4,d0
0000E1C4 D043                       		add.w	d3,d0
0000E1C6 0240 01FF                  		andi.w	#$1FF,d0
0000E1CA 6600                       		bne.s	loc_D7DC
0000E1CC 5240                       		addq.w	#1,d0
0000E1CE                            
0000E1CE                            loc_D7DC:
0000E1CE 34C0                       		move.w	d0,(a2)+
0000E1D0 51C9 FFBE                  		dbf	d1,loc_D79E
0000E1D4                            
0000E1D4                            locret_D7E2:
0000E1D4 4E75                       		rts	
0000E1D6                            ; ===========================================================================
0000E1D6                            
0000E1D6                            loc_D7E4:				; XREF: sub_D750
0000E1D6 0C05 0050                  		cmpi.b	#$50,d5
0000E1DA 6700                       		beq.s	locret_D828
0000E1DC 1019                       		move.b	(a1)+,d0
0000E1DE 1811                       		move.b	(a1),d4
0000E1E0 4880                       		ext.w	d0
0000E1E2 4440                       		neg.w	d0
0000E1E4 E70C                       		lsl.b	#3,d4
0000E1E6 0244 0018                  		andi.w	#$18,d4
0000E1EA 5044                       		addq.w	#8,d4
0000E1EC 9044                       		sub.w	d4,d0
0000E1EE D042                       		add.w	d2,d0
0000E1F0 34C0                       		move.w	d0,(a2)+
0000E1F2 14D9                       		move.b	(a1)+,(a2)+
0000E1F4 5205                       		addq.b	#1,d5
0000E1F6 14C5                       		move.b	d5,(a2)+
0000E1F8 1019                       		move.b	(a1)+,d0
0000E1FA E148                       		lsl.w	#8,d0
0000E1FC 1019                       		move.b	(a1)+,d0
0000E1FE D04B                       		add.w	a3,d0
0000E200 0A40 1000                  		eori.w	#$1000,d0
0000E204 34C0                       		move.w	d0,(a2)+
0000E206 1019                       		move.b	(a1)+,d0
0000E208 4880                       		ext.w	d0
0000E20A D043                       		add.w	d3,d0
0000E20C 0240 01FF                  		andi.w	#$1FF,d0
0000E210 6600                       		bne.s	loc_D822
0000E212 5240                       		addq.w	#1,d0
0000E214                            
0000E214                            loc_D822:
0000E214 34C0                       		move.w	d0,(a2)+
0000E216 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E21A                            
0000E21A                            locret_D828:
0000E21A 4E75                       		rts	
0000E21C                            ; ===========================================================================
0000E21C                            
0000E21C                            loc_D82A:
0000E21C 0C05 0050                  		cmpi.b	#$50,d5
0000E220 6700                       		beq.s	locret_D87C
0000E222 1019                       		move.b	(a1)+,d0
0000E224 1811                       		move.b	(a1),d4
0000E226 4880                       		ext.w	d0
0000E228 4440                       		neg.w	d0
0000E22A E70C                       		lsl.b	#3,d4
0000E22C 0244 0018                  		andi.w	#$18,d4
0000E230 5044                       		addq.w	#8,d4
0000E232 9044                       		sub.w	d4,d0
0000E234 D042                       		add.w	d2,d0
0000E236 34C0                       		move.w	d0,(a2)+
0000E238 1819                       		move.b	(a1)+,d4
0000E23A 14C4                       		move.b	d4,(a2)+
0000E23C 5205                       		addq.b	#1,d5
0000E23E 14C5                       		move.b	d5,(a2)+
0000E240 1019                       		move.b	(a1)+,d0
0000E242 E148                       		lsl.w	#8,d0
0000E244 1019                       		move.b	(a1)+,d0
0000E246 D04B                       		add.w	a3,d0
0000E248 0A40 1800                  		eori.w	#$1800,d0
0000E24C 34C0                       		move.w	d0,(a2)+
0000E24E 1019                       		move.b	(a1)+,d0
0000E250 4880                       		ext.w	d0
0000E252 4440                       		neg.w	d0
0000E254 D804                       		add.b	d4,d4
0000E256 0244 0018                  		andi.w	#$18,d4
0000E25A 5044                       		addq.w	#8,d4
0000E25C 9044                       		sub.w	d4,d0
0000E25E D043                       		add.w	d3,d0
0000E260 0240 01FF                  		andi.w	#$1FF,d0
0000E264 6600                       		bne.s	loc_D876
0000E266 5240                       		addq.w	#1,d0
0000E268                            
0000E268                            loc_D876:
0000E268 34C0                       		move.w	d0,(a2)+
0000E26A 51C9 FFB0                  		dbf	d1,loc_D82A
0000E26E                            
0000E26E                            locret_D87C:
0000E26E 4E75                       		rts	
0000E270                            ; ---------------------------------------------------------------------------
0000E270                            ; Subroutine to	check if an object is on the screen
0000E270                            ; ---------------------------------------------------------------------------
0000E270                            
0000E270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E270                            
0000E270                            
0000E270                            ChkObjOnScreen:
0000E270 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E274 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E278 6B00                       		bmi.s	NotOnScreen
0000E27A 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E27E 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E280                            
0000E280 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E284 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E288 6B00                       		bmi.s	NotOnScreen
0000E28A 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E28E 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E290                            
0000E290 7000                       		moveq	#0,d0		; set flag to 0
0000E292 4E75                       		rts	
0000E294                            ; ===========================================================================
0000E294                            
0000E294                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E294 7001                       		moveq	#1,d0		; set flag to 1
0000E296 4E75                       		rts	
0000E298                            ; End of function ChkObjOnScreen
0000E298                            
0000E298                            
0000E298                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E298                            
0000E298                            
0000E298                            ChkObjOnScreen2:
0000E298 7200                       		moveq	#0,d1
0000E29A 1228 0019                  		move.b	$19(a0),d1
0000E29E 3028 0008                  		move.w	8(a0),d0
0000E2A2 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E2A6 D041                       		add.w	d1,d0
0000E2A8 6B00                       		bmi.s	NotOnScreen2
0000E2AA D241                       		add.w	d1,d1
0000E2AC 9041                       		sub.w	d1,d0
0000E2AE 0C40 0140                  		cmpi.w	#320,d0
0000E2B2 6C00                       		bge.s	NotOnScreen2
0000E2B4                            
0000E2B4 3228 000C                  		move.w	$C(a0),d1
0000E2B8 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E2BC 6B00                       		bmi.s	NotOnScreen2
0000E2BE 0C41 00E0                  		cmpi.w	#224,d1
0000E2C2 6C00                       		bge.s	NotOnScreen2
0000E2C4                            
0000E2C4 7000                       		moveq	#0,d0
0000E2C6 4E75                       		rts	
0000E2C8                            ; ===========================================================================
0000E2C8                            
0000E2C8                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E2C8 7001                       		moveq	#1,d0
0000E2CA 4E75                       		rts	
0000E2CC                            ; End of function ChkObjOnScreen2
0000E2CC                            
0000E2CC                            ; ---------------------------------------------------------------------------
0000E2CC                            ; Subroutine to	load a level's objects
0000E2CC                            ; ---------------------------------------------------------------------------
0000E2CC                            
0000E2CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2CC                            
0000E2CC                            
0000E2CC                            ObjPosLoad:				; XREF: Level; et al
0000E2CC 7000                       		moveq	#0,d0
0000E2CE 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E2D2 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E2D6 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E2DA                            ; End of function ObjPosLoad
0000E2DA                            
0000E2DA                            ; ===========================================================================
0000E2DA 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E2DC 0000                       		dc.w OPL_Next-OPL_Index
0000E2DE                            ; ===========================================================================
0000E2DE                            
0000E2DE                            OPL_Main:				; XREF: OPL_Index
0000E2DE 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E2E2 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E2E6 ED08                       		lsl.b	#6,d0
0000E2E8 E848                       		lsr.w	#4,d0
0000E2EA 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E2F0 2248                       		movea.l	a0,a1
0000E2F2 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E2F6 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E2FA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E2FE D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E302 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E306 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E30A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E30E 34FC 0101                  		move.w	#$101,(a2)+
0000E312 303C 005E                  		move.w	#$5E,d0
0000E316                            
0000E316                            OPL_ClrList:
0000E316 429A                       		clr.l	(a2)+
0000E318 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E31C                            
0000E31C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E320 7400                       		moveq	#0,d2
0000E322 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E326 0446 0080                  		subi.w	#$80,d6
0000E32A 6400                       		bcc.s	loc_D93C
0000E32C 7C00                       		moveq	#0,d6
0000E32E                            
0000E32E                            loc_D93C:
0000E32E 0246 FF80                  		andi.w	#$FF80,d6
0000E332 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E336                            
0000E336                            loc_D944:
0000E336 BC50                       		cmp.w	(a0),d6
0000E338 6300                       		bls.s	loc_D956
0000E33A 4A28 0004                  		tst.b	4(a0)
0000E33E 6A00                       		bpl.s	loc_D952
0000E340 1412                       		move.b	(a2),d2
0000E342 5212                       		addq.b	#1,(a2)
0000E344                            
0000E344                            loc_D952:
0000E344 5C48                       		addq.w	#6,a0
0000E346 60EE                       		bra.s	loc_D944
0000E348                            ; ===========================================================================
0000E348                            
0000E348                            loc_D956:
0000E348 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E34C 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E350 0446 0080                  		subi.w	#$80,d6
0000E354 6500                       		bcs.s	loc_D976
0000E356                            
0000E356                            loc_D964:
0000E356 BC50                       		cmp.w	(a0),d6
0000E358 6300                       		bls.s	loc_D976
0000E35A 4A28 0004                  		tst.b	4(a0)
0000E35E 6A00                       		bpl.s	loc_D972
0000E360 522A 0001                  		addq.b	#1,1(a2)
0000E364                            
0000E364                            loc_D972:
0000E364 5C48                       		addq.w	#6,a0
0000E366 60EE                       		bra.s	loc_D964
0000E368                            ; ===========================================================================
0000E368                            
0000E368                            loc_D976:
0000E368 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E36C 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E372                            
0000E372                            OPL_Next:				; XREF: OPL_Index
0000E372 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E376 7400                       		moveq	#0,d2
0000E378 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E37C 0246 FF80                  		andi.w	#$FF80,d6
0000E380 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E384 6700 0000                  		beq.w	locret_DA3A
0000E388 6C00                       		bge.s	loc_D9F6
0000E38A 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E38E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E392 0446 0080                  		subi.w	#$80,d6
0000E396 6500                       		bcs.s	loc_D9D2
0000E398                            
0000E398                            loc_D9A6:
0000E398 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E39C 6C00                       		bge.s	loc_D9D2
0000E39E 5D48                       		subq.w	#6,a0
0000E3A0 4A28 0004                  		tst.b	4(a0)
0000E3A4 6A00                       		bpl.s	loc_D9BC
0000E3A6 532A 0001                  		subq.b	#1,1(a2)
0000E3AA 142A 0001                  		move.b	1(a2),d2
0000E3AE                            
0000E3AE                            loc_D9BC:
0000E3AE 6100 0000                  		bsr.w	loc_DA3C
0000E3B2 6600                       		bne.s	loc_D9C6
0000E3B4 5D48                       		subq.w	#6,a0
0000E3B6 60E0                       		bra.s	loc_D9A6
0000E3B8                            ; ===========================================================================
0000E3B8                            
0000E3B8                            loc_D9C6:
0000E3B8 4A28 0004                  		tst.b	4(a0)
0000E3BC 6A00                       		bpl.s	loc_D9D0
0000E3BE 522A 0001                  		addq.b	#1,1(a2)
0000E3C2                            
0000E3C2                            loc_D9D0:
0000E3C2 5C48                       		addq.w	#6,a0
0000E3C4                            
0000E3C4                            loc_D9D2:
0000E3C4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E3C8 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E3CC 0646 0300                  		addi.w	#$300,d6
0000E3D0                            
0000E3D0                            loc_D9DE:
0000E3D0 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E3D4 6E00                       		bgt.s	loc_D9F0
0000E3D6 4A28 FFFE                  		tst.b	-2(a0)
0000E3DA 6A00                       		bpl.s	loc_D9EC
0000E3DC 5312                       		subq.b	#1,(a2)
0000E3DE                            
0000E3DE                            loc_D9EC:
0000E3DE 5D48                       		subq.w	#6,a0
0000E3E0 60EE                       		bra.s	loc_D9DE
0000E3E2                            ; ===========================================================================
0000E3E2                            
0000E3E2                            loc_D9F0:
0000E3E2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E3E6 4E75                       		rts	
0000E3E8                            ; ===========================================================================
0000E3E8                            
0000E3E8                            loc_D9F6:
0000E3E8 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E3EC 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E3F0 0646 0280                  		addi.w	#$280,d6
0000E3F4                            
0000E3F4                            loc_DA02:
0000E3F4 BC50                       		cmp.w	(a0),d6
0000E3F6 6300                       		bls.s	loc_DA16
0000E3F8 4A28 0004                  		tst.b	4(a0)
0000E3FC 6A00                       		bpl.s	loc_DA10
0000E3FE 1412                       		move.b	(a2),d2
0000E400 5212                       		addq.b	#1,(a2)
0000E402                            
0000E402                            loc_DA10:
0000E402 6100 0000                  		bsr.w	loc_DA3C
0000E406 67EC                       		beq.s	loc_DA02
0000E408                            
0000E408                            loc_DA16:
0000E408 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E40C 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E410 0446 0300                  		subi.w	#$300,d6
0000E414 6500                       		bcs.s	loc_DA36
0000E416                            
0000E416                            loc_DA24:
0000E416 BC50                       		cmp.w	(a0),d6
0000E418 6300                       		bls.s	loc_DA36
0000E41A 4A28 0004                  		tst.b	4(a0)
0000E41E 6A00                       		bpl.s	loc_DA32
0000E420 522A 0001                  		addq.b	#1,1(a2)
0000E424                            
0000E424                            loc_DA32:
0000E424 5C48                       		addq.w	#6,a0
0000E426 60EE                       		bra.s	loc_DA24
0000E428                            ; ===========================================================================
0000E428                            
0000E428                            loc_DA36:
0000E428 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E42C                            
0000E42C                            locret_DA3A:
0000E42C 4E75                       		rts	
0000E42E                            ; ===========================================================================
0000E42E                            
0000E42E                            loc_DA3C:
0000E42E 4A28 0004                  		tst.b	4(a0)
0000E432 6A00                       		bpl.s	OPL_MakeItem
0000E434 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E43A 6700                       		beq.s	OPL_MakeItem
0000E43C 5C48                       		addq.w	#6,a0
0000E43E 7000                       		moveq	#0,d0
0000E440 4E75                       		rts	
0000E442                            ; ===========================================================================
0000E442                            
0000E442                            OPL_MakeItem:
0000E442 6100 0000                  		bsr.w	SingleObjLoad
0000E446 6600                       		bne.s	locret_DA8A
0000E448 3358 0008                  		move.w	(a0)+,8(a1)
0000E44C 3018                       		move.w	(a0)+,d0
0000E44E 3200                       		move.w	d0,d1
0000E450 0240 0FFF                  		andi.w	#$FFF,d0
0000E454 3340 000C                  		move.w	d0,$C(a1)
0000E458 E559                       		rol.w	#2,d1
0000E45A 0201 0003                  		andi.b	#3,d1
0000E45E 1341 0001                  		move.b	d1,1(a1)
0000E462 1341 0022                  		move.b	d1,$22(a1)
0000E466 1018                       		move.b	(a0)+,d0
0000E468 6A00                       		bpl.s	loc_DA80
0000E46A 0200 007F                  		andi.b	#$7F,d0
0000E46E 1342 0023                  		move.b	d2,$23(a1)
0000E472                            
0000E472                            loc_DA80:
0000E472 1280                       		move.b	d0,0(a1)
0000E474 1358 0028                  		move.b	(a0)+,$28(a1)
0000E478 7000                       		moveq	#0,d0
0000E47A                            
0000E47A                            locret_DA8A:
0000E47A 4E75                       		rts	
0000E47C                            ; ---------------------------------------------------------------------------
0000E47C                            ; Single object	loading	subroutine
0000E47C                            ; ---------------------------------------------------------------------------
0000E47C                            
0000E47C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E47C                            
0000E47C                            
0000E47C                            SingleObjLoad:
0000E47C 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E480 303C 005F                  		move.w	#$5F,d0
0000E484                            
0000E484                            loc_DA94:
0000E484 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E486 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E488 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E48C 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E490                            
0000E490                            locret_DAA0:
0000E490 4E75                       		rts	
0000E492                            ; End of function SingleObjLoad
0000E492                            
0000E492                            
0000E492                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E492                            
0000E492                            
0000E492                            SingleObjLoad2:
0000E492 2248                       		movea.l	a0,a1
0000E494 303C F000                  		move.w	#-$1000,d0
0000E498 9048                       		sub.w	a0,d0
0000E49A EC48                       		lsr.w	#6,d0
0000E49C 5340                       		subq.w	#1,d0
0000E49E 6500                       		bcs.s	locret_DABC
0000E4A0                            
0000E4A0                            loc_DAB0:
0000E4A0 4A11                       		tst.b	(a1)
0000E4A2 6700                       		beq.s	locret_DABC
0000E4A4 43E9 0040                  		lea	$40(a1),a1
0000E4A8 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E4AC                            
0000E4AC                            locret_DABC:
0000E4AC 4E75                       		rts	
0000E4AE                            ; End of function SingleObjLoad2
0000E4AE                            
0000E4AE                            ; ===========================================================================
0000E4AE                            ; ---------------------------------------------------------------------------
0000E4AE                            ; Object 41 - springs
0000E4AE                            ; ---------------------------------------------------------------------------
0000E4AE                            
0000E4AE                            Obj41:					; XREF: Obj_Index
0000E4AE 7000                       		moveq	#0,d0
0000E4B0 1028 0024                  		move.b	$24(a0),d0
0000E4B4 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E4B8 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E4BC 6100 FB38                  		bsr.w	DisplaySprite
0000E4C0 3028 0008                  		move.w	8(a0),d0
0000E4C4 0240 FF80                  		andi.w	#$FF80,d0
0000E4C8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E4CC 0441 0080                  		subi.w	#$80,d1
0000E4D0 0241 FF80                  		andi.w	#$FF80,d1
0000E4D4 9041                       		sub.w	d1,d0
0000E4D6 0C40 0280                  		cmpi.w	#$280,d0
0000E4DA 6200 FB56                  		bhi.w	DeleteObject
0000E4DE 4E75                       		rts	
0000E4E0                            ; ===========================================================================
0000E4E0 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E4E2 0000                       		dc.w Obj41_Up-Obj41_Index
0000E4E4 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E4E6 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E4E8 0000                       		dc.w Obj41_LR-Obj41_Index
0000E4EA 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E4EC 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E4EE 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E4F0 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E4F2 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E4F4                            
0000E4F4 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E4F6 F600                       		dc.w -$A00		; power	of yellow spring
0000E4F8                            ; ===========================================================================
0000E4F8                            
0000E4F8                            Obj41_Main:				; XREF: Obj41_Index
0000E4F8 5428 0024                  		addq.b	#2,$24(a0)
0000E4FC 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E504 317C 0523 0002             		move.w	#$523,2(a0)
0000E50A 0028 0004 0001             		ori.b	#4,1(a0)
0000E510 117C 0010 0019             		move.b	#$10,$19(a0)
0000E516 117C 0004 0018             		move.b	#4,$18(a0)
0000E51C 1028 0028                  		move.b	$28(a0),d0
0000E520 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E524 6700                       		beq.s	loc_DB54	; if not, branch
0000E526 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E52C 117C 0001 001C             		move.b	#1,$1C(a0)
0000E532 117C 0003 001A             		move.b	#3,$1A(a0)
0000E538 317C 0533 0002             		move.w	#$533,2(a0)
0000E53E 117C 0008 0019             		move.b	#8,$19(a0)
0000E544                            
0000E544                            loc_DB54:
0000E544 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E548 6700                       		beq.s	loc_DB66	; if not, branch
0000E54A 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E550 08E8 0001 0022             		bset	#1,$22(a0)
0000E556                            
0000E556                            loc_DB66:
0000E556 0800 0001                  		btst	#1,d0
0000E55A 6700                       		beq.s	loc_DB72
0000E55C 08E8 0005 0002             		bset	#5,2(a0)
0000E562                            
0000E562                            loc_DB72:
0000E562 0240 000F                  		andi.w	#$F,d0
0000E566 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E56C 4E75                       		rts	
0000E56E                            ; ===========================================================================
0000E56E                            
0000E56E                            Obj41_Up:				; XREF: Obj41_Index
0000E56E 323C 001B                  		move.w	#$1B,d1
0000E572 343C 0008                  		move.w	#8,d2
0000E576 363C 0010                  		move.w	#$10,d3
0000E57A 3828 0008                  		move.w	8(a0),d4
0000E57E 6100 0000                  		bsr.w	SolidObject
0000E582 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E586 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E588 4E75                       		rts	
0000E58A                            ; ===========================================================================
0000E58A                            
0000E58A                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E58A 5428 0024                  		addq.b	#2,$24(a0)
0000E58E 5069 000C                  		addq.w	#8,$C(a1)
0000E592 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E598 08E9 0001 0022             		bset	#1,$22(a1)
0000E59E 08A9 0003 0022             		bclr	#3,$22(a1)
0000E5A4 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E5AA 137C 0002 0024             		move.b	#2,$24(a1)
0000E5B0 08A8 0003 0022             		bclr	#3,$22(a0)
0000E5B6 4228 0025                  		clr.b	$25(a0)
0000E5BA 303C 00CC                  		move.w	#$CC,d0
0000E5BE 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play spring sound
0000E5C4                            
0000E5C4                            Obj41_AniUp:				; XREF: Obj41_Index
0000E5C4 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E5CA 6000 CA80                  		bra.w	AnimateSprite
0000E5CE                            ; ===========================================================================
0000E5CE                            
0000E5CE                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E5CE 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E5D4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E5D8 4E75                       		rts	
0000E5DA                            ; ===========================================================================
0000E5DA                            
0000E5DA                            Obj41_LR:				; XREF: Obj41_Index
0000E5DA 323C 0013                  		move.w	#$13,d1
0000E5DE 343C 000E                  		move.w	#$E,d2
0000E5E2 363C 000F                  		move.w	#$F,d3
0000E5E6 3828 0008                  		move.w	8(a0),d4
0000E5EA 6100 0000                  		bsr.w	SolidObject
0000E5EE 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E5F4 6600                       		bne.s	loc_DC0C
0000E5F6 117C 0008 0024             		move.b	#8,$24(a0)
0000E5FC                            
0000E5FC                            loc_DC0C:
0000E5FC 0828 0005 0022             		btst	#5,$22(a0)
0000E602 6600                       		bne.s	Obj41_BounceLR
0000E604 4E75                       		rts	
0000E606                            ; ===========================================================================
0000E606                            
0000E606                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E606 5428 0024                  		addq.b	#2,$24(a0)
0000E60A 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E610 5069 0008                  		addq.w	#8,8(a1)
0000E614 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E61A 6600                       		bne.s	loc_DC36	; if yes, branch
0000E61C 0469 0010 0008             		subi.w	#$10,8(a1)
0000E622 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E626                            
0000E626                            loc_DC36:
0000E626 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E62C 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E632 0869 0000 0022             		bchg	#0,$22(a1)
0000E638 0829 0002 0022             		btst	#2,$22(a1)
0000E63E 6600                       		bne.s	loc_DC56
0000E640 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E646                            
0000E646                            loc_DC56:
0000E646 08A8 0005 0022             		bclr	#5,$22(a0)
0000E64C 08A9 0005 0022             		bclr	#5,$22(a1)
0000E652 303C 00CC                  		move.w	#$CC,d0
0000E656 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play spring sound
0000E65C                            
0000E65C                            Obj41_AniLR:				; XREF: Obj41_Index
0000E65C 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E662 6000 C9E8                  		bra.w	AnimateSprite
0000E666                            ; ===========================================================================
0000E666                            
0000E666                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E666 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E66C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E670 4E75                       		rts	
0000E672                            ; ===========================================================================
0000E672                            
0000E672                            Obj41_Dwn:				; XREF: Obj41_Index
0000E672 323C 001B                  		move.w	#$1B,d1
0000E676 343C 0008                  		move.w	#8,d2
0000E67A 363C 0010                  		move.w	#$10,d3
0000E67E 3828 0008                  		move.w	8(a0),d4
0000E682 6100 0000                  		bsr.w	SolidObject
0000E686 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E68C 6600                       		bne.s	loc_DCA4
0000E68E 117C 000E 0024             		move.b	#$E,$24(a0)
0000E694                            
0000E694                            loc_DCA4:
0000E694 4A28 0025                  		tst.b	$25(a0)
0000E698 6600                       		bne.s	locret_DCAE
0000E69A 4A44                       		tst.w	d4
0000E69C 6B00                       		bmi.s	Obj41_BounceDwn
0000E69E                            
0000E69E                            locret_DCAE:
0000E69E 4E75                       		rts	
0000E6A0                            ; ===========================================================================
0000E6A0                            
0000E6A0                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E6A0 5428 0024                  		addq.b	#2,$24(a0)
0000E6A4 5169 000C                  		subq.w	#8,$C(a1)
0000E6A8 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E6AE 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E6B2 08E9 0001 0022             		bset	#1,$22(a1)
0000E6B8 08A9 0003 0022             		bclr	#3,$22(a1)
0000E6BE 137C 0002 0024             		move.b	#2,$24(a1)
0000E6C4 08A8 0003 0022             		bclr	#3,$22(a0)
0000E6CA 4228 0025                  		clr.b	$25(a0)
0000E6CE 303C 00CC                  		move.w	#$CC,d0
0000E6D2 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6D8                            
0000E6D8                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E6D8 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6DE 6000 C96C                  		bra.w	AnimateSprite
0000E6E2                            ; ===========================================================================
0000E6E2                            
0000E6E2                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E6E2 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E6E8 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E6EC 4E75                       		rts	
0000E6EE                            ; ===========================================================================
0000E6EE                            Ani_obj41:
0000E6EE                            	include "_anim\obj41.asm"
0000E6EE                            ; ---------------------------------------------------------------------------
0000E6EE                            ; Animation script - springs
0000E6EE                            ; ---------------------------------------------------------------------------
0000E6EE 0000                       		dc.w byte_DD02-Ani_obj41
0000E6F0 0000                       		dc.w byte_DD0E-Ani_obj41
0000E6F2 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E6FE 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E70A                            		even
0000E70A                            		even
0000E70A                            
0000E70A                            ; ---------------------------------------------------------------------------
0000E70A                            ; Sprite mappings - springs
0000E70A                            ; ---------------------------------------------------------------------------
0000E70A                            Map_obj41:
0000E70A                            	include "_maps\obj41.asm"
0000E70A                            ; ---------------------------------------------------------------------------
0000E70A                            ; Sprite mappings - springs
0000E70A                            ; ---------------------------------------------------------------------------
0000E70A 0000                       		dc.w byte_DD26-Map_obj41
0000E70C 0000                       		dc.w byte_DD31-Map_obj41
0000E70E 0000                       		dc.w byte_DD37-Map_obj41
0000E710 0000                       		dc.w byte_DD47-Map_obj41
0000E712 0000                       		dc.w byte_DD4D-Map_obj41
0000E714 0000                       		dc.w byte_DD53-Map_obj41
0000E716 02                         byte_DD26:	dc.b 2
0000E717 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E71C 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E721 01                         byte_DD31:	dc.b 1
0000E722 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E727 03                         byte_DD37:	dc.b 3
0000E728 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E72D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E732 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E737 01                         byte_DD47:	dc.b 1
0000E738 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E73D 01                         byte_DD4D:	dc.b 1
0000E73E F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E743 04                         byte_DD53:	dc.b 4
0000E744 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E749 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E74E F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E753 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E758                            		even
0000E758                            		even
0000E758                            
0000E758                            ; ===========================================================================
0000E758                            ; ---------------------------------------------------------------------------
0000E758                            ; Object 42 - Newtron enemy (GHZ)
0000E758                            ; ---------------------------------------------------------------------------
0000E758                            
0000E758                            Obj42:					; XREF: Obj_Index
0000E758 7000                       		moveq	#0,d0
0000E75A 1028 0024                  		move.b	$24(a0),d0
0000E75E 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E762 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E766                            ; ===========================================================================
0000E766 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E768 0000                       		dc.w Obj42_Action-Obj42_Index
0000E76A 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E76C                            ; ===========================================================================
0000E76C                            
0000E76C                            Obj42_Main:				; XREF: Obj42_Index
0000E76C 5428 0024                  		addq.b	#2,$24(a0)
0000E770 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E778 317C 049B 0002             		move.w	#$49B,2(a0)
0000E77E 117C 0004 0001             		move.b	#4,1(a0)
0000E784 117C 0004 0018             		move.b	#4,$18(a0)
0000E78A 117C 0014 0019             		move.b	#$14,$19(a0)
0000E790 117C 0010 0016             		move.b	#$10,$16(a0)
0000E796 117C 0008 0017             		move.b	#8,$17(a0)
0000E79C                            
0000E79C                            Obj42_Action:				; XREF: Obj42_Index
0000E79C 7000                       		moveq	#0,d0
0000E79E 1028 0025                  		move.b	$25(a0),d0
0000E7A2 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E7A6 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E7AA 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E7B0 6100 C89A                  		bsr.w	AnimateSprite
0000E7B4 6000 0000                  		bra.w	MarkObjGone
0000E7B8                            ; ===========================================================================
0000E7B8 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E7BA 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E7BC 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E7BE 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E7C0 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E7C2                            ; ===========================================================================
0000E7C2                            
0000E7C2                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E7C2 08E8 0000 0022             		bset	#0,$22(a0)
0000E7C8 3038 D008                  		move.w	($FFFFD008).w,d0
0000E7CC 9068 0008                  		sub.w	8(a0),d0
0000E7D0 6400                       		bcc.s	loc_DDEA
0000E7D2 4440                       		neg.w	d0
0000E7D4 08A8 0000 0022             		bclr	#0,$22(a0)
0000E7DA                            
0000E7DA                            loc_DDEA:
0000E7DA 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E7DE 6400                       		bcc.s	locret_DE12	; if not, branch
0000E7E0 5428 0025                  		addq.b	#2,$25(a0)
0000E7E4 117C 0001 001C             		move.b	#1,$1C(a0)
0000E7EA 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E7EE 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E7F0 317C 249B 0002             		move.w	#$249B,2(a0)
0000E7F6 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E7FC 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E802                            
0000E802                            locret_DE12:
0000E802 4E75                       		rts	
0000E804                            ; ===========================================================================
0000E804                            
0000E804                            Obj42_Type00:				; XREF: Obj42_Index2
0000E804 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E80A 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E80C 08E8 0000 0022             		bset	#0,$22(a0)
0000E812 3038 D008                  		move.w	($FFFFD008).w,d0
0000E816 9068 0008                  		sub.w	8(a0),d0
0000E81A 6400                       		bcc.s	locret_DE32
0000E81C 08A8 0000 0022             		bclr	#0,$22(a0)
0000E822                            
0000E822                            locret_DE32:
0000E822 4E75                       		rts	
0000E824                            ; ===========================================================================
0000E824                            
0000E824                            Obj42_Fall:				; XREF: Obj42_Type00
0000E824 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E82A 6600                       		bne.s	loc_DE42
0000E82C 117C 000C 0020             		move.b	#$C,$20(a0)
0000E832                            
0000E832                            loc_DE42:
0000E832 6100 F72A                  		bsr.w	ObjectFall
0000E836 6100 0000                  		bsr.w	ObjHitFloor
0000E83A 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E83C 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E83E D368 000C                  		add.w	d1,$C(a0)
0000E842 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E848 5428 0025                  		addq.b	#2,$25(a0)
0000E84C 117C 0002 001C             		move.b	#2,$1C(a0)
0000E852 0828 0005 0002             		btst	#5,2(a0)
0000E858 6700                       		beq.s	Obj42_Move
0000E85A 5228 001C                  		addq.b	#1,$1C(a0)
0000E85E                            
0000E85E                            Obj42_Move:
0000E85E 117C 000D 0020             		move.b	#$D,$20(a0)
0000E864 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E86A 0828 0000 0022             		btst	#0,$22(a0)
0000E870 6600                       		bne.s	locret_DE86
0000E872 4468 0010                  		neg.w	$10(a0)
0000E876                            
0000E876                            locret_DE86:
0000E876 4E75                       		rts	
0000E878                            ; ===========================================================================
0000E878                            
0000E878                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E878 6100 F756                  		bsr.w	SpeedToPos
0000E87C 6100 0000                  		bsr.w	ObjHitFloor
0000E880 0C41 FFF8                  		cmpi.w	#-8,d1
0000E884 6D00                       		blt.s	loc_DEA2
0000E886 0C41 000C                  		cmpi.w	#$C,d1
0000E88A 6C00                       		bge.s	loc_DEA2
0000E88C D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E890 4E75                       		rts	
0000E892                            ; ===========================================================================
0000E892                            
0000E892                            loc_DEA2:
0000E892 5428 0025                  		addq.b	#2,$25(a0)
0000E896 4E75                       		rts	
0000E898                            ; ===========================================================================
0000E898                            
0000E898                            Obj42_Speed:				; XREF: Obj42_Index2
0000E898 6100 F736                  		bsr.w	SpeedToPos
0000E89C 4E75                       		rts	
0000E89E                            ; ===========================================================================
0000E89E                            
0000E89E                            Obj42_Type01:				; XREF: Obj42_Index2
0000E89E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E8A4 6600                       		bne.s	Obj42_FireMissile
0000E8A6 117C 000C 0020             		move.b	#$C,$20(a0)
0000E8AC                            
0000E8AC                            Obj42_FireMissile:
0000E8AC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E8B2 6600                       		bne.s	locret_DF14
0000E8B4 4A28 0032                  		tst.b	$32(a0)
0000E8B8 6600                       		bne.s	locret_DF14
0000E8BA 117C 0001 0032             		move.b	#1,$32(a0)
0000E8C0 6100 FBBA                  		bsr.w	SingleObjLoad
0000E8C4 6600                       		bne.s	locret_DF14
0000E8C6 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E8CA 3368 0008 0008             		move.w	8(a0),8(a1)
0000E8D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E8D6 5169 000C                  		subq.w	#8,$C(a1)
0000E8DA 337C 0200 0010             		move.w	#$200,$10(a1)
0000E8E0 303C 0014                  		move.w	#$14,d0
0000E8E4 0828 0000 0022             		btst	#0,$22(a0)
0000E8EA 6600                       		bne.s	loc_DF04
0000E8EC 4440                       		neg.w	d0
0000E8EE 4469 0010                  		neg.w	$10(a1)
0000E8F2                            
0000E8F2                            loc_DF04:
0000E8F2 D169 0008                  		add.w	d0,8(a1)
0000E8F6 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E8FC 137C 0001 0028             		move.b	#1,$28(a1)
0000E902                            
0000E902                            locret_DF14:
0000E902 4E75                       		rts	
0000E904                            ; ===========================================================================
0000E904                            
0000E904                            Obj42_Delete:				; XREF: Obj42_Index
0000E904 6000 F72C                  		bra.w	DeleteObject
0000E908                            ; ===========================================================================
0000E908                            Ani_obj42:
0000E908                            	include "_anim\obj42.asm"
0000E908                            ; ---------------------------------------------------------------------------
0000E908                            ; Animation script - Newtron enemy
0000E908                            ; ---------------------------------------------------------------------------
0000E908 0000                       		dc.w byte_DF24-Ani_obj42
0000E90A 0000                       		dc.w byte_DF28-Ani_obj42
0000E90C 0000                       		dc.w byte_DF30-Ani_obj42
0000E90E 0000                       		dc.w byte_DF34-Ani_obj42
0000E910 0000                       		dc.w byte_DF38-Ani_obj42
0000E912 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E916 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E91E 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E922 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E926 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E930                            		even
0000E930                            		even
0000E930                            
0000E930                            ; ---------------------------------------------------------------------------
0000E930                            ; Sprite mappings - Newtron enemy (GHZ)
0000E930                            ; ---------------------------------------------------------------------------
0000E930                            Map_obj42:
0000E930                            	include "_maps\obj42.asm"
0000E930                            ; ---------------------------------------------------------------------------
0000E930                            ; Sprite mappings - Newtron enemy (GHZ)
0000E930                            ; ---------------------------------------------------------------------------
0000E930 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E934 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E938 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E93C 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E940 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E944 0000                       		dc.w byte_DFF8-Map_obj42
0000E946 03                         byte_DF58:	dc.b 3
0000E947 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E94C F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E951 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E956 03                         byte_DF68:	dc.b 3
0000E957 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E95C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E961 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E966 03                         byte_DF78:	dc.b 3
0000E967 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E96C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E971 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E976 04                         byte_DF88:	dc.b 4
0000E977 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E97C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E981 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E986 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E98B 03                         byte_DF9D:	dc.b 3
0000E98C F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E991 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E996 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E99B 02                         byte_DFAD:	dc.b 2
0000E99C F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9A1 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9A6 03                         byte_DFB8:	dc.b 3
0000E9A7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9AC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9B1 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E9B6 03                         byte_DFC8:	dc.b 3
0000E9B7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9BC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9C1 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E9C6 03                         byte_DFD8:	dc.b 3
0000E9C7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9CC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9D1 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E9D6 03                         byte_DFE8:	dc.b 3
0000E9D7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9DC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9E1 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E9E6 00                         byte_DFF8:	dc.b 0
0000E9E8 00                         		even
0000E9E8 00                         		even
0000E9E8                            
0000E9E8                            ; ===========================================================================
0000E9E8                            ; ---------------------------------------------------------------------------
0000E9E8                            ; Object 43 - Roller enemy (SYZ)
0000E9E8                            ; ---------------------------------------------------------------------------
0000E9E8                            
0000E9E8                            Obj43:					; XREF: Obj_Index
0000E9E8 7000                       		moveq	#0,d0
0000E9EA 1028 0024                  		move.b	$24(a0),d0
0000E9EE 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E9F2 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E9F6                            ; ===========================================================================
0000E9F6 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E9F8 0000                       		dc.w Obj43_Action-Obj43_Index
0000E9FA                            ; ===========================================================================
0000E9FA                            
0000E9FA                            Obj43_Main:				; XREF: Obj43_Index
0000E9FA 117C 000E 0016             		move.b	#$E,$16(a0)
0000EA00 117C 0008 0017             		move.b	#8,$17(a0)
0000EA06 6100 F556                  		bsr.w	ObjectFall
0000EA0A 6100 0000                  		bsr.w	ObjHitFloor
0000EA0E 4A41                       		tst.w	d1
0000EA10 6A00                       		bpl.s	locret_E052
0000EA12 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EA16 317C 0000 0012             		move.w	#0,$12(a0)
0000EA1C 5428 0024                  		addq.b	#2,$24(a0)
0000EA20 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EA28 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EA2E 117C 0004 0001             		move.b	#4,1(a0)
0000EA34 117C 0004 0018             		move.b	#4,$18(a0)
0000EA3A 117C 0010 0019             		move.b	#$10,$19(a0)
0000EA40                            
0000EA40                            locret_E052:
0000EA40 4E75                       		rts	
0000EA42                            ; ===========================================================================
0000EA42                            
0000EA42                            Obj43_Action:				; XREF: Obj43_Index
0000EA42 7000                       		moveq	#0,d0
0000EA44 1028 0025                  		move.b	$25(a0),d0
0000EA48 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EA4C 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EA50 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EA56 6100 C5F4                  		bsr.w	AnimateSprite
0000EA5A 3028 0008                  		move.w	8(a0),d0
0000EA5E 0240 FF80                  		andi.w	#$FF80,d0
0000EA62 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA66 0441 0080                  		subi.w	#$80,d1
0000EA6A 0241 FF80                  		andi.w	#$FF80,d1
0000EA6E 9041                       		sub.w	d1,d0
0000EA70 0C40 0280                  		cmpi.w	#$280,d0
0000EA74 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EA78 6000 F57C                  		bra.w	DisplaySprite
0000EA7C                            ; ===========================================================================
0000EA7C                            
0000EA7C                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EA7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA80 7000                       		moveq	#0,d0
0000EA82 1028 0023                  		move.b	$23(a0),d0
0000EA86 6700                       		beq.s	Obj43_Delete
0000EA88 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EA8E                            
0000EA8E                            Obj43_Delete:
0000EA8E 6000 F5A2                  		bra.w	DeleteObject
0000EA92                            ; ===========================================================================
0000EA92 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EA94 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EA96 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EA98 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EA9A                            ; ===========================================================================
0000EA9A                            
0000EA9A                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EA9A 3038 D008                  		move.w	($FFFFD008).w,d0
0000EA9E 0440 0100                  		subi.w	#$100,d0
0000EAA2 6500                       		bcs.s	loc_E0D2
0000EAA4 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EAA8 6500                       		bcs.s	loc_E0D2
0000EAAA 5828 0025                  		addq.b	#4,$25(a0)
0000EAAE 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAB4 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EABA 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EAC0                            
0000EAC0                            loc_E0D2:
0000EAC0 588F                       		addq.l	#4,sp
0000EAC2 4E75                       		rts	
0000EAC4                            ; ===========================================================================
0000EAC4                            
0000EAC4                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EAC4 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EACA 6700                       		beq.s	loc_E0F8
0000EACC 5368 0030                  		subq.w	#1,$30(a0)
0000EAD0 6A00                       		bpl.s	locret_E0F6
0000EAD2 117C 0001 001C             		move.b	#1,$1C(a0)
0000EAD8 317C 0700 0010             		move.w	#$700,$10(a0)
0000EADE 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EAE4                            
0000EAE4                            locret_E0F6:
0000EAE4 4E75                       		rts	
0000EAE6                            ; ===========================================================================
0000EAE6                            
0000EAE6                            loc_E0F8:
0000EAE6 5428 0025                  		addq.b	#2,$25(a0)
0000EAEA 4E75                       		rts	
0000EAEC                            ; ===========================================================================
0000EAEC                            
0000EAEC                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EAEC 6100 0000                  		bsr.w	Obj43_Stop
0000EAF0 6100 F4DE                  		bsr.w	SpeedToPos
0000EAF4 6100 0000                  		bsr.w	ObjHitFloor
0000EAF8 0C41 FFF8                  		cmpi.w	#-8,d1
0000EAFC 6D00                       		blt.s	Obj43_Jump
0000EAFE 0C41 000C                  		cmpi.w	#$C,d1
0000EB02 6C00                       		bge.s	Obj43_Jump
0000EB04 D368 000C                  		add.w	d1,$C(a0)
0000EB08 4E75                       		rts	
0000EB0A                            ; ===========================================================================
0000EB0A                            
0000EB0A                            Obj43_Jump:
0000EB0A 5428 0025                  		addq.b	#2,$25(a0)
0000EB0E 08E8 0000 0032             		bset	#0,$32(a0)
0000EB14 6700                       		beq.s	locret_E12E
0000EB16 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EB1C                            
0000EB1C                            locret_E12E:
0000EB1C 4E75                       		rts	
0000EB1E                            ; ===========================================================================
0000EB1E                            
0000EB1E                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EB1E 6100 F43E                  		bsr.w	ObjectFall
0000EB22 4A68 0012                  		tst.w	$12(a0)
0000EB26 6B00                       		bmi.s	locret_E150
0000EB28 6100 0000                  		bsr.w	ObjHitFloor
0000EB2C 4A41                       		tst.w	d1
0000EB2E 6A00                       		bpl.s	locret_E150
0000EB30 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EB34 5528 0025                  		subq.b	#2,$25(a0)
0000EB38 317C 0000 0012             		move.w	#0,$12(a0)
0000EB3E                            
0000EB3E                            locret_E150:
0000EB3E 4E75                       		rts	
0000EB40                            
0000EB40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB40                            
0000EB40                            
0000EB40                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EB40 4A28 0032                  		tst.b	$32(a0)
0000EB44 6B00                       		bmi.s	locret_E188
0000EB46 3038 D008                  		move.w	($FFFFD008).w,d0
0000EB4A 0440 0030                  		subi.w	#$30,d0
0000EB4E 9068 0008                  		sub.w	8(a0),d0
0000EB52 6400                       		bcc.s	locret_E188
0000EB54 117C 0000 001C             		move.b	#0,$1C(a0)
0000EB5A 117C 000E 0020             		move.b	#$E,$20(a0)
0000EB60 4268 0010                  		clr.w	$10(a0)
0000EB64 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EB6A 117C 0002 0025             		move.b	#2,$25(a0)
0000EB70 08E8 0007 0032             		bset	#7,$32(a0)
0000EB76                            
0000EB76                            locret_E188:
0000EB76 4E75                       		rts	
0000EB78                            ; End of function Obj43_Stop
0000EB78                            
0000EB78                            ; ===========================================================================
0000EB78                            Ani_obj43:
0000EB78                            	include "_anim\obj43.asm"
0000EB78                            ; ---------------------------------------------------------------------------
0000EB78                            ; Animation script - Roller enemy
0000EB78                            ; ---------------------------------------------------------------------------
0000EB78 0000                       		dc.w byte_E190-Ani_obj43
0000EB7A 0000                       		dc.w byte_E196-Ani_obj43
0000EB7C 0000                       		dc.w byte_E19C-Ani_obj43
0000EB7E 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EB84 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EB8A 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EB90 00                         		even
0000EB90 00                         		even
0000EB90                            
0000EB90                            ; ---------------------------------------------------------------------------
0000EB90                            ; Sprite mappings - Roller enemy (SYZ)
0000EB90                            ; ---------------------------------------------------------------------------
0000EB90                            Map_obj43:
0000EB90                            	include "_maps\obj43.asm"
0000EB90                            Map_61da:
0000EB90 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EB92 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EB94 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EB96 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EB98 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EB9A 02                         Map_61da_A: 	dc.b $2
0000EB9B DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EBA0 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EBA5 02                         Map_61da_15: 	dc.b $2
0000EBA6 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EBAB FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EBB0 01                         Map_61da_20: 	dc.b $1
0000EBB1 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EBB6 01                         Map_61da_26: 	dc.b $1
0000EBB7 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EBBC 01                         Map_61da_2C: 	dc.b $1
0000EBBD F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EBC2                            	even
0000EBC2                            	even
0000EBC2                            
0000EBC2                            ; ===========================================================================
0000EBC2                            ; ---------------------------------------------------------------------------
0000EBC2                            ; Object 44 - walls (GHZ)
0000EBC2                            ; ---------------------------------------------------------------------------
0000EBC2                            
0000EBC2                            Obj44:					; XREF: Obj_Index
0000EBC2 7000                       		moveq	#0,d0
0000EBC4 1028 0024                  		move.b	$24(a0),d0
0000EBC8 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EBCC 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EBD0                            ; ===========================================================================
0000EBD0 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EBD2 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EBD4 0000                       		dc.w Obj44_Display-Obj44_Index
0000EBD6                            ; ===========================================================================
0000EBD6                            
0000EBD6                            Obj44_Main:				; XREF: Obj44_Index
0000EBD6 5428 0024                  		addq.b	#2,$24(a0)
0000EBDA 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EBE2 317C 434C 0002             		move.w	#$434C,2(a0)
0000EBE8 0028 0004 0001             		ori.b	#4,1(a0)
0000EBEE 117C 0008 0019             		move.b	#8,$19(a0)
0000EBF4 117C 0006 0018             		move.b	#6,$18(a0)
0000EBFA 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EC00 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EC06 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EC08 5428 0024                  		addq.b	#2,$24(a0)
0000EC0C 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EC0E                            ; ===========================================================================
0000EC0E                            
0000EC0E                            Obj44_Solid:				; XREF: Obj44_Index
0000EC0E 323C 0013                  		move.w	#$13,d1
0000EC12 343C 0028                  		move.w	#$28,d2
0000EC16 6100 A68C                  		bsr.w	Obj44_SolidWall
0000EC1A                            
0000EC1A                            Obj44_Display:				; XREF: Obj44_Index
0000EC1A 6100 F3DA                  		bsr.w	DisplaySprite
0000EC1E 3028 0008                  		move.w	8(a0),d0
0000EC22 0240 FF80                  		andi.w	#$FF80,d0
0000EC26 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC2A 0441 0080                  		subi.w	#$80,d1
0000EC2E 0241 FF80                  		andi.w	#$FF80,d1
0000EC32 9041                       		sub.w	d1,d0
0000EC34 0C40 0280                  		cmpi.w	#$280,d0
0000EC38 6200 F3F8                  		bhi.w	DeleteObject
0000EC3C 4E75                       		rts	
0000EC3E                            ; ===========================================================================
0000EC3E                            ; ---------------------------------------------------------------------------
0000EC3E                            ; Sprite mappings - walls (GHZ)
0000EC3E                            ; ---------------------------------------------------------------------------
0000EC3E                            Map_obj44:
0000EC3E                            	include "_maps\obj44.asm"
0000EC3E                            ; ---------------------------------------------------------------------------
0000EC3E                            ; Sprite mappings - walls (GHZ)
0000EC3E                            ; ---------------------------------------------------------------------------
0000EC3E 0000                       		dc.w byte_E256-Map_obj44
0000EC40 0000                       		dc.w byte_E26B-Map_obj44
0000EC42 0000                       		dc.w byte_E280-Map_obj44
0000EC44 04                         byte_E256:	dc.b 4
0000EC45 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EC4A F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EC4F 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EC54 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EC59 04                         byte_E26B:	dc.b 4
0000EC5A E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EC5F F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EC64 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EC69 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EC6E 04                         byte_E280:	dc.b 4
0000EC6F E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EC74 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EC79 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EC7E 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EC84 00                         		even
0000EC84 00                         		even
0000EC84                            
0000EC84                            ; ===========================================================================
0000EC84                            ; ---------------------------------------------------------------------------
0000EC84                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EC84                            ; ---------------------------------------------------------------------------
0000EC84                            
0000EC84                            Obj13:					; XREF: Obj_Index
0000EC84 7000                       		moveq	#0,d0
0000EC86 1028 0024                  		move.b	$24(a0),d0
0000EC8A 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EC8E 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EC92 6000 0000                  		bra.w	Obj14_ChkDel
0000EC96                            ; ===========================================================================
0000EC96 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EC98 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EC9A                            ; ---------------------------------------------------------------------------
0000EC9A                            ;
0000EC9A                            ; Lava ball production rates
0000EC9A                            ;
0000EC9A 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000ECA0                            ; ===========================================================================
0000ECA0                            
0000ECA0                            Obj13_Main:				; XREF: Obj13_Index
0000ECA0 5428 0024                  		addq.b	#2,$24(a0)
0000ECA4 1028 0028                  		move.b	$28(a0),d0
0000ECA8 E848                       		lsr.w	#4,d0
0000ECAA 0240 000F                  		andi.w	#$F,d0
0000ECAE 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000ECB4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000ECBA 0228 000F 0028             		andi.b	#$F,$28(a0)
0000ECC0                            
0000ECC0                            Obj13_MakeLava:				; XREF: Obj13_Index
0000ECC0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000ECC4 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000ECC6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000ECCC 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000ECD0 6600                       		bne.s	locret_E302
0000ECD2 6100 F7A8                  		bsr.w	SingleObjLoad
0000ECD6 6600                       		bne.s	locret_E302
0000ECD8 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000ECDC 3368 0008 0008             		move.w	8(a0),8(a1)
0000ECE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ECE8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000ECEE                            
0000ECEE                            locret_E302:
0000ECEE 4E75                       		rts	
0000ECF0                            ; ===========================================================================
0000ECF0                            ; ---------------------------------------------------------------------------
0000ECF0                            ; Object 14 - lava balls (MZ, SLZ)
0000ECF0                            ; ---------------------------------------------------------------------------
0000ECF0                            
0000ECF0                            Obj14:					; XREF: Obj_Index
0000ECF0 7000                       		moveq	#0,d0
0000ECF2 1028 0024                  		move.b	$24(a0),d0
0000ECF6 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000ECFA 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000ECFE 6000 F2F6                  		bra.w	DisplaySprite
0000ED02                            ; ===========================================================================
0000ED02 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000ED04 0000                       		dc.w Obj14_Action-Obj14_Index
0000ED06 0000                       		dc.w Obj14_Delete-Obj14_Index
0000ED08                            
0000ED08 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000ED12 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000ED1A                            ; ===========================================================================
0000ED1A                            
0000ED1A                            Obj14_Main:				; XREF: Obj14_Index
0000ED1A 5428 0024                  		addq.b	#2,$24(a0)
0000ED1E 117C 0008 0016             		move.b	#8,$16(a0)
0000ED24 117C 0008 0017             		move.b	#8,$17(a0)
0000ED2A 217C 0000 BC4A 0004        		move.l	#Map_obj14,4(a0)
0000ED32 317C 0345 0002             		move.w	#$345,2(a0)
0000ED38 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000ED3E 6600                       		bne.s	loc_E35A
0000ED40 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000ED46                            
0000ED46                            loc_E35A:
0000ED46 117C 0004 0001             		move.b	#4,1(a0)
0000ED4C 117C 0003 0018             		move.b	#3,$18(a0)
0000ED52 117C 008B 0020             		move.b	#$8B,$20(a0)
0000ED58 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED5E 4A28 0029                  		tst.b	$29(a0)
0000ED62 6700                       		beq.s	Obj14_SetSpeed
0000ED64 5428 0018                  		addq.b	#2,$18(a0)
0000ED68                            
0000ED68                            Obj14_SetSpeed:
0000ED68 7000                       		moveq	#0,d0
0000ED6A 1028 0028                  		move.b	$28(a0),d0
0000ED6E D040                       		add.w	d0,d0
0000ED70 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000ED76 117C 0008 0019             		move.b	#8,$19(a0)
0000ED7C 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000ED82 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000ED84 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED8A 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000ED90 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000ED96 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000ED9C                            
0000ED9C                            Obj14_PlaySnd:
0000ED9C 303C 00AE                  		move.w	#$AE,d0
0000EDA0 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EDA6                            
0000EDA6                            Obj14_Action:				; XREF: Obj14_Index
0000EDA6 7000                       		moveq	#0,d0
0000EDA8 1028 0028                  		move.b	$28(a0),d0
0000EDAC D040                       		add.w	d0,d0
0000EDAE 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EDB2 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EDB6 6100 F218                  		bsr.w	SpeedToPos
0000EDBA 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EDC0 6100 C28A                  		bsr.w	AnimateSprite
0000EDC4                            
0000EDC4                            Obj14_ChkDel:				; XREF: Obj13
0000EDC4 3028 0008                  		move.w	8(a0),d0
0000EDC8 0240 FF80                  		andi.w	#$FF80,d0
0000EDCC 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDD0 0441 0080                  		subi.w	#$80,d1
0000EDD4 0241 FF80                  		andi.w	#$FF80,d1
0000EDD8 9041                       		sub.w	d1,d0
0000EDDA 0C40 0280                  		cmpi.w	#$280,d0
0000EDDE 6200 F252                  		bhi.w	DeleteObject
0000EDE2 4E75                       		rts	
0000EDE4                            ; ===========================================================================
0000EDE4 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EDE8 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EDEC 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EDF0 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EDF4 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EDF6                            ; ===========================================================================
0000EDF6                            ; lavaball types 00-03 fly up and fall back down
0000EDF6                            
0000EDF6                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EDF6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EDFC 3028 0030                  		move.w	$30(a0),d0
0000EE00 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EE04 6400                       		bcc.s	loc_E41E	; if not, branch
0000EE06 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EE0A                            
0000EE0A                            loc_E41E:
0000EE0A 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE10 4A68 0012                  		tst.w	$12(a0)
0000EE14 6A00                       		bpl.s	locret_E430
0000EE16 08E8 0001 0022             		bset	#1,$22(a0)
0000EE1C                            
0000EE1C                            locret_E430:
0000EE1C 4E75                       		rts	
0000EE1E                            ; ===========================================================================
0000EE1E                            ; lavaball type	04 flies up until it hits the ceiling
0000EE1E                            
0000EE1E                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EE1E 08E8 0001 0022             		bset	#1,$22(a0)
0000EE24 6100 0000                  		bsr.w	ObjHitCeiling
0000EE28 4A41                       		tst.w	d1
0000EE2A 6A00                       		bpl.s	locret_E452
0000EE2C 117C 0008 0028             		move.b	#8,$28(a0)
0000EE32 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE38 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EE3E                            
0000EE3E                            locret_E452:
0000EE3E 4E75                       		rts	
0000EE40                            ; ===========================================================================
0000EE40                            ; lavaball type	05 falls down until it hits the	floor
0000EE40                            
0000EE40                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EE40 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE46 6100 0000                  		bsr.w	ObjHitFloor
0000EE4A 4A41                       		tst.w	d1
0000EE4C 6A00                       		bpl.s	locret_E474
0000EE4E 117C 0008 0028             		move.b	#8,$28(a0)
0000EE54 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE5A 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EE60                            
0000EE60                            locret_E474:
0000EE60 4E75                       		rts	
0000EE62                            ; ===========================================================================
0000EE62                            ; lavaball types 06-07 move sideways
0000EE62                            
0000EE62                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EE62 08E8 0000 0022             		bset	#0,$22(a0)
0000EE68 76F8                       		moveq	#-8,d3
0000EE6A 6100 0000                  		bsr.w	ObjHitWallLeft
0000EE6E 4A41                       		tst.w	d1
0000EE70 6A00                       		bpl.s	locret_E498
0000EE72 117C 0008 0028             		move.b	#8,$28(a0)
0000EE78 117C 0003 001C             		move.b	#3,$1C(a0)
0000EE7E 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EE84                            
0000EE84                            locret_E498:
0000EE84 4E75                       		rts	
0000EE86                            ; ===========================================================================
0000EE86                            
0000EE86                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EE86 08A8 0000 0022             		bclr	#0,$22(a0)
0000EE8C 7608                       		moveq	#8,d3
0000EE8E 6100 0000                  		bsr.w	ObjHitWallRight
0000EE92 4A41                       		tst.w	d1
0000EE94 6A00                       		bpl.s	locret_E4BC
0000EE96 117C 0008 0028             		move.b	#8,$28(a0)
0000EE9C 117C 0003 001C             		move.b	#3,$1C(a0)
0000EEA2 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EEA8                            
0000EEA8                            locret_E4BC:
0000EEA8 4E75                       		rts	
0000EEAA                            ; ===========================================================================
0000EEAA                            
0000EEAA                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EEAA 4E75                       		rts	
0000EEAC                            ; ===========================================================================
0000EEAC                            
0000EEAC                            Obj14_Delete:				; XREF: Obj14_Index
0000EEAC 6000 F184                  		bra.w	DeleteObject
0000EEB0                            ; ===========================================================================
0000EEB0                            Ani_obj14:
0000EEB0                            	include "_anim\obj14.asm"
0000EEB0                            ; ---------------------------------------------------------------------------
0000EEB0                            ; Animation script - lava balls
0000EEB0                            ; ---------------------------------------------------------------------------
0000EEB0 0000                       		dc.w byte_E4CC-Ani_obj14
0000EEB2 0000                       		dc.w byte_E4D2-Ani_obj14
0000EEB4 0000                       		dc.w byte_E4D6-Ani_obj14
0000EEB6 0000                       		dc.w byte_E4DC-Ani_obj14
0000EEB8 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EEBE 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EEC2 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EEC8 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EECC                            		even
0000EECC                            		even
0000EECC                            
0000EECC                            ; ===========================================================================
0000EECC                            ; ---------------------------------------------------------------------------
0000EECC                            ; Object 6D - flame thrower (SBZ)
0000EECC                            ; ---------------------------------------------------------------------------
0000EECC                            
0000EECC                            Obj6D:					; XREF: Obj_Index
0000EECC 7000                       		moveq	#0,d0
0000EECE 1028 0024                  		move.b	$24(a0),d0
0000EED2 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EED6 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EEDA                            ; ===========================================================================
0000EEDA 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EEDC 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EEDE                            ; ===========================================================================
0000EEDE                            
0000EEDE                            Obj6D_Main:				; XREF: Obj6D_Index
0000EEDE 5428 0024                  		addq.b	#2,$24(a0)
0000EEE2 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EEEA 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EEF0 0028 0004 0001             		ori.b	#4,1(a0)
0000EEF6 117C 0001 0018             		move.b	#1,$18(a0)
0000EEFC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF02 117C 000C 0019             		move.b	#$C,$19(a0)
0000EF08 1028 0028                  		move.b	$28(a0),d0
0000EF0C 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EF10 D040                       		add.w	d0,d0		; multiply by 2
0000EF12 3140 0030                  		move.w	d0,$30(a0)
0000EF16 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EF1A 1028 0028                  		move.b	$28(a0),d0
0000EF1E 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EF22 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EF24 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EF28 117C 000A 0036             		move.b	#$A,$36(a0)
0000EF2E 0828 0001 0022             		btst	#1,$22(a0)
0000EF34 6700                       		beq.s	Obj6D_Action
0000EF36 117C 0002 001C             		move.b	#2,$1C(a0)
0000EF3C 117C 0015 0036             		move.b	#$15,$36(a0)
0000EF42                            
0000EF42                            Obj6D_Action:				; XREF: Obj6D_Index
0000EF42 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EF46 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EF48 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EF4E 0868 0000 001C             		bchg	#0,$1C(a0)
0000EF54 6700                       		beq.s	loc_E57A
0000EF56 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EF5C 303C 00B3                  		move.w	#$B3,d0
0000EF60 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play flame sound
0000EF66                            
0000EF66                            loc_E57A:
0000EF66 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EF6C 6100 C0DE                  		bsr.w	AnimateSprite
0000EF70 117C 0000 0020             		move.b	#0,$20(a0)
0000EF76 1028 0036                  		move.b	$36(a0),d0
0000EF7A B028 001A                  		cmp.b	$1A(a0),d0
0000EF7E 6600                       		bne.s	Obj6D_ChkDel
0000EF80 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EF86                            
0000EF86                            Obj6D_ChkDel:
0000EF86 3028 0008                  		move.w	8(a0),d0
0000EF8A 0240 FF80                  		andi.w	#$FF80,d0
0000EF8E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF92 0441 0080                  		subi.w	#$80,d1
0000EF96 0241 FF80                  		andi.w	#$FF80,d1
0000EF9A 9041                       		sub.w	d1,d0
0000EF9C 0C40 0280                  		cmpi.w	#$280,d0
0000EFA0 6200 F090                  		bhi.w	DeleteObject
0000EFA4 6000 F050                  		bra.w	DisplaySprite
0000EFA8                            ; ===========================================================================
0000EFA8                            Ani_obj6D:
0000EFA8                            	include "_anim\obj6D.asm"
0000EFA8                            ; ---------------------------------------------------------------------------
0000EFA8                            ; Animation script - flamethrower (SBZ)
0000EFA8                            ; ---------------------------------------------------------------------------
0000EFA8 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EFAA 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EFAC 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EFAE 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EFB0 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EFBE 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EFC8 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EFD6 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EFE0                            		even
0000EFE0                            		even
0000EFE0                            
0000EFE0                            ; ---------------------------------------------------------------------------
0000EFE0                            ; Sprite mappings - flame thrower (SBZ)
0000EFE0                            ; ---------------------------------------------------------------------------
0000EFE0                            Map_obj6D:
0000EFE0                            	include "_maps\obj6D.asm"
0000EFE0                            ; ---------------------------------------------------------------------------
0000EFE0                            ; Sprite mappings - flame thrower (SBZ)
0000EFE0                            ; ---------------------------------------------------------------------------
0000EFE0 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EFE4 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EFE8 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EFEC 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EFF0 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EFF4 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EFF8 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EFFC 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F000 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F004 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F008 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F00C 01                         byte_E620:	dc.b 1
0000F00D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F012 02                         byte_E626:	dc.b 2
0000F013 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F018 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F01D 02                         byte_E631:	dc.b 2
0000F01E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F023 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F028 03                         byte_E63C:	dc.b 3
0000F029 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F02E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F033 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F038 03                         byte_E64C:	dc.b 3
0000F039 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F03E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F043 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F048 04                         byte_E65C:	dc.b 4
0000F049 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F04E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F053 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F058 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F05D 04                         byte_E671:	dc.b 4
0000F05E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F063 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F068 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F06D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F072 05                         byte_E686:	dc.b 5
0000F073 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F078 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F07D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F082 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F087 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F08C 05                         byte_E6A0:	dc.b 5
0000F08D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F092 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F097 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F09C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0A1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0A6 06                         byte_E6BA:	dc.b 6
0000F0A7 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F0AC F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F0B1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F0B6 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F0BB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0C0 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0C5 06                         byte_E6D9:	dc.b 6
0000F0C6 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F0CB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F0D0 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F0D5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0DA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0DF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0E4 01                         byte_E6F8:	dc.b 1
0000F0E5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F0EA 02                         byte_E6FE:	dc.b 2
0000F0EB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F0F0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0F5 02                         byte_E709:	dc.b 2
0000F0F6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F0FB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F100 03                         byte_E714:	dc.b 3
0000F101 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F106 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F10B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F110 03                         byte_E724:	dc.b 3
0000F111 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F116 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F11B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F120 04                         byte_E734:	dc.b 4
0000F121 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F126 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F12B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F130 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F135 04                         byte_E749:	dc.b 4
0000F136 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F13B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F140 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F145 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F14A 05                         byte_E75E:	dc.b 5
0000F14B F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F150 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F155 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F15A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F15F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F164 05                         byte_E778:	dc.b 5
0000F165 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F16A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F16F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F174 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F179 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F17E 06                         byte_E792:	dc.b 6
0000F17F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F184 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F189 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F18E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F193 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F198 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F19D 06                         byte_E7B1:	dc.b 6
0000F19E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1A3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1A8 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F1AD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1B2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1B7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1BC                            		even
0000F1BC                            		even
0000F1BC                            
0000F1BC                            ; ===========================================================================
0000F1BC                            ; ---------------------------------------------------------------------------
0000F1BC                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F1BC                            ; ---------------------------------------------------------------------------
0000F1BC                            
0000F1BC                            Obj46:					; XREF: Obj_Index
0000F1BC 7000                       		moveq	#0,d0
0000F1BE 1028 0024                  		move.b	$24(a0),d0
0000F1C2 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F1C6 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F1CA                            ; ===========================================================================
0000F1CA 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F1CC 0000                       		dc.w Obj46_Action-Obj46_Index
0000F1CE                            ; ===========================================================================
0000F1CE                            
0000F1CE                            Obj46_Main:				; XREF: Obj46_Index
0000F1CE 5428 0024                  		addq.b	#2,$24(a0)
0000F1D2 117C 000F 0016             		move.b	#$F,$16(a0)
0000F1D8 117C 000F 0017             		move.b	#$F,$17(a0)
0000F1DE 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F1E6 317C 4000 0002             		move.w	#$4000,2(a0)
0000F1EC 117C 0004 0001             		move.b	#4,1(a0)
0000F1F2 117C 0003 0018             		move.b	#3,$18(a0)
0000F1F8 117C 0010 0019             		move.b	#$10,$19(a0)
0000F1FE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F204 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F20A                            
0000F20A                            Obj46_Action:				; XREF: Obj46_Index
0000F20A 4A28 0001                  		tst.b	1(a0)
0000F20E 6A00                       		bpl.s	Obj46_ChkDel
0000F210 7000                       		moveq	#0,d0
0000F212 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F216 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F21A D040                       		add.w	d0,d0
0000F21C 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F220 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F224 323C 001B                  		move.w	#$1B,d1
0000F228 343C 0010                  		move.w	#$10,d2
0000F22C 363C 0011                  		move.w	#$11,d3
0000F230 3828 0008                  		move.w	8(a0),d4
0000F234 6100 0000                  		bsr.w	SolidObject
0000F238                            
0000F238                            Obj46_ChkDel:
0000F238 6100 EDBC                  		bsr.w	DisplaySprite
0000F23C 3028 0008                  		move.w	8(a0),d0
0000F240 0240 FF80                  		andi.w	#$FF80,d0
0000F244 3238 F700                  		move.w	($FFFFF700).w,d1
0000F248 0441 0080                  		subi.w	#$80,d1
0000F24C 0241 FF80                  		andi.w	#$FF80,d1
0000F250 9041                       		sub.w	d1,d0
0000F252 0C40 0280                  		cmpi.w	#$280,d0
0000F256 6200 EDDA                  		bhi.w	DeleteObject
0000F25A 4E75                       		rts	
0000F25C                            ; ===========================================================================
0000F25C 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F25E 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F260 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F262 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F264 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F266                            ; ===========================================================================
0000F266                            
0000F266                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F266 4E75                       		rts	
0000F268                            ; ===========================================================================
0000F268                            
0000F268                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F268 3038 D008                  		move.w	($FFFFD008).w,d0
0000F26C 9068 0008                  		sub.w	8(a0),d0
0000F270 6400                       		bcc.s	loc_E888
0000F272 4440                       		neg.w	d0
0000F274                            
0000F274                            loc_E888:
0000F274 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F278 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F27A 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F280                            
0000F280                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F280 7000                       		moveq	#0,d0
0000F282 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F286 0828 0003 0028             		btst	#3,$28(a0)
0000F28C 6700                       		beq.s	loc_E8A8
0000F28E 4440                       		neg.w	d0
0000F290 0640 0010                  		addi.w	#$10,d0
0000F294                            
0000F294                            loc_E8A8:
0000F294 3228 0030                  		move.w	$30(a0),d1
0000F298 9240                       		sub.w	d0,d1
0000F29A 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F29E 4E75                       		rts	
0000F2A0                            ; ===========================================================================
0000F2A0                            
0000F2A0                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F2A0 6100 ED2E                  		bsr.w	SpeedToPos
0000F2A4 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F2AA 6100 0000                  		bsr.w	ObjHitFloor
0000F2AE 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F2B0 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F2B4 D368 000C                  		add.w	d1,$C(a0)
0000F2B8 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F2BC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F2C2 117C 0004 0028             		move.b	#4,$28(a0)
0000F2C8 3011                       		move.w	(a1),d0
0000F2CA 0240 03FF                  		andi.w	#$3FF,d0
0000F2CE 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F2D2 6400                       		bcc.s	locret_E8EE
0000F2D4 117C 0000 0028             		move.b	#0,$28(a0)
0000F2DA                            
0000F2DA                            locret_E8EE:
0000F2DA 4E75                       		rts	
0000F2DC                            ; ===========================================================================
0000F2DC                            
0000F2DC                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F2DC 7000                       		moveq	#0,d0
0000F2DE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F2E2 E648                       		lsr.w	#3,d0
0000F2E4 3228 0030                  		move.w	$30(a0),d1
0000F2E8 9240                       		sub.w	d0,d1
0000F2EA 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F2EE 4E75                       		rts	
0000F2F0                            ; ===========================================================================
0000F2F0                            ; ---------------------------------------------------------------------------
0000F2F0                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F2F0                            ; ---------------------------------------------------------------------------
0000F2F0                            Map_obj46:
0000F2F0                            	include "_maps\obj46.asm"
0000F2F0                            ; ---------------------------------------------------------------------------
0000F2F0                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F2F0                            ; ---------------------------------------------------------------------------
0000F2F0 0000                       		dc.w byte_E906-Map_obj46
0000F2F2 01                         byte_E906:	dc.b 1
0000F2F3 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F2F8                            		even
0000F2F8                            		even
0000F2F8                            
0000F2F8                            ; ===========================================================================
0000F2F8                            ; ---------------------------------------------------------------------------
0000F2F8                            ; Object 12 - lamp (SYZ)
0000F2F8                            ; ---------------------------------------------------------------------------
0000F2F8                            
0000F2F8                            Obj12:					; XREF: Obj_Index
0000F2F8 7000                       		moveq	#0,d0
0000F2FA 1028 0024                  		move.b	$24(a0),d0
0000F2FE 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F302 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F306                            ; ===========================================================================
0000F306 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F308 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F30A                            ; ===========================================================================
0000F30A                            
0000F30A                            Obj12_Main:				; XREF: Obj12_Index
0000F30A 5428 0024                  		addq.b	#2,$24(a0)
0000F30E 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F316 317C 0000 0002             		move.w	#0,2(a0)
0000F31C 117C 0004 0001             		move.b	#4,1(a0)
0000F322 117C 0010 0019             		move.b	#$10,$19(a0)
0000F328 117C 0006 0018             		move.b	#6,$18(a0)
0000F32E                            
0000F32E                            Obj12_Animate:				; XREF: Obj12_Index
0000F32E 5328 001E                  		subq.b	#1,$1E(a0)
0000F332 6A00                       		bpl.s	Obj12_ChkDel
0000F334 117C 0007 001E             		move.b	#7,$1E(a0)
0000F33A 5228 001A                  		addq.b	#1,$1A(a0)
0000F33E 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F344 6500                       		bcs.s	Obj12_ChkDel
0000F346 117C 0000 001A             		move.b	#0,$1A(a0)
0000F34C                            
0000F34C                            Obj12_ChkDel:
0000F34C 3028 0008                  		move.w	8(a0),d0
0000F350 0240 FF80                  		andi.w	#$FF80,d0
0000F354 3238 F700                  		move.w	($FFFFF700).w,d1
0000F358 0441 0080                  		subi.w	#$80,d1
0000F35C 0241 FF80                  		andi.w	#$FF80,d1
0000F360 9041                       		sub.w	d1,d0
0000F362 0C40 0280                  		cmpi.w	#$280,d0
0000F366 6200 ECCA                  		bhi.w	DeleteObject
0000F36A 6000 EC8A                  		bra.w	DisplaySprite
0000F36E                            ; ===========================================================================
0000F36E                            ; ---------------------------------------------------------------------------
0000F36E                            ; Sprite mappings - lamp (SYZ)
0000F36E                            ; ---------------------------------------------------------------------------
0000F36E                            Map_obj12:
0000F36E                            	include "_maps\obj12.asm"
0000F36E                            ; ---------------------------------------------------------------------------
0000F36E                            ; Sprite mappings - lamp (SYZ)
0000F36E                            ; ---------------------------------------------------------------------------
0000F36E 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F372 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F376 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F37A 02                         byte_E98E:	dc.b 2
0000F37B F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F380 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F385 02                         byte_E999:	dc.b 2
0000F386 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F38B 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F390 02                         byte_E9A4:	dc.b 2
0000F391 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F396 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F39B 02                         byte_E9AF:	dc.b 2
0000F39C F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F3A1 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F3A6 02                         byte_E9BA:	dc.b 2
0000F3A7 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F3AC 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F3B1 02                         byte_E9C5:	dc.b 2
0000F3B2 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F3B7 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F3BC                            		even
0000F3BC                            		even
0000F3BC                            
0000F3BC                            ; ===========================================================================
0000F3BC                            ; ---------------------------------------------------------------------------
0000F3BC                            ; Object 47 - pinball bumper (SYZ)
0000F3BC                            ; ---------------------------------------------------------------------------
0000F3BC                            
0000F3BC                            Obj47:					; XREF: Obj_Index
0000F3BC 7000                       		moveq	#0,d0
0000F3BE 1028 0024                  		move.b	$24(a0),d0
0000F3C2 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F3C6 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F3CA                            ; ===========================================================================
0000F3CA 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F3CC 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F3CE                            ; ===========================================================================
0000F3CE                            
0000F3CE                            Obj47_Main:				; XREF: Obj47_Index
0000F3CE 5428 0024                  		addq.b	#2,$24(a0)
0000F3D2 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F3DA 317C 0380 0002             		move.w	#$380,2(a0)
0000F3E0 117C 0004 0001             		move.b	#4,1(a0)
0000F3E6 117C 0010 0019             		move.b	#$10,$19(a0)
0000F3EC 117C 0001 0018             		move.b	#1,$18(a0)
0000F3F2 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F3F8                            
0000F3F8                            Obj47_Hit:				; XREF: Obj47_Index
0000F3F8 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F3FC 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F400 4228 0021                  		clr.b	$21(a0)
0000F404 43F8 D000                  		lea	($FFFFD000).w,a1
0000F408 3228 0008                  		move.w	8(a0),d1
0000F40C 3428 000C                  		move.w	$C(a0),d2
0000F410 9269 0008                  		sub.w	8(a1),d1
0000F414 9469 000C                  		sub.w	$C(a1),d2
0000F418 4EB9 0000 2FF6             		jsr	(CalcAngle).l
0000F41E 4EB9 0000 2D28             		jsr	(CalcSine).l
0000F424 C3FC F900                  		muls.w	#-$700,d1
0000F428 E081                       		asr.l	#8,d1
0000F42A 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F42E C1FC F900                  		muls.w	#-$700,d0
0000F432 E080                       		asr.l	#8,d0
0000F434 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F438 08E9 0001 0022             		bset	#1,$22(a1)
0000F43E 08A9 0004 0022             		bclr	#4,$22(a1)
0000F444 08A9 0005 0022             		bclr	#5,$22(a1)
0000F44A 4229 003C                  		clr.b	$3C(a1)
0000F44E 117C 0001 001C             		move.b	#1,$1C(a0)
0000F454 303C 00B4                  		move.w	#$B4,d0
0000F458 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F45E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F462 7000                       		moveq	#0,d0
0000F464 1028 0023                  		move.b	$23(a0),d0
0000F468 6700                       		beq.s	Obj47_Score
0000F46A 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F470 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F472 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F476                            
0000F476                            Obj47_Score:
0000F476 7001                       		moveq	#1,d0
0000F478 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F47E 6100 EFFC                  		bsr.w	SingleObjLoad
0000F482 6600                       		bne.s	Obj47_Display
0000F484 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F488 3368 0008 0008             		move.w	8(a0),8(a1)
0000F48E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F494 137C 0004 001A             		move.b	#4,$1A(a1)
0000F49A                            
0000F49A                            Obj47_Display:
0000F49A 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F4A0 6100 BBAA                  		bsr.w	AnimateSprite
0000F4A4 3028 0008                  		move.w	8(a0),d0
0000F4A8 0240 FF80                  		andi.w	#$FF80,d0
0000F4AC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F4B0 0441 0080                  		subi.w	#$80,d1
0000F4B4 0241 FF80                  		andi.w	#$FF80,d1
0000F4B8 9041                       		sub.w	d1,d0
0000F4BA 0C40 0280                  		cmpi.w	#$280,d0
0000F4BE 6200                       		bhi.s	Obj47_ChkHit
0000F4C0 6000 EB34                  		bra.w	DisplaySprite
0000F4C4                            ; ===========================================================================
0000F4C4                            
0000F4C4                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F4C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F4C8 7000                       		moveq	#0,d0
0000F4CA 1028 0023                  		move.b	$23(a0),d0
0000F4CE 6700                       		beq.s	Obj47_Delete
0000F4D0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F4D6                            
0000F4D6                            Obj47_Delete:
0000F4D6 6000 EB5A                  		bra.w	DeleteObject
0000F4DA                            ; ===========================================================================
0000F4DA                            Ani_obj47:
0000F4DA                            	include "_anim\obj47.asm"
0000F4DA                            ; ---------------------------------------------------------------------------
0000F4DA                            ; Animation script - flamethrower (SBZ)
0000F4DA                            ; ---------------------------------------------------------------------------
0000F4DA 0000                       		dc.w byte_EAF4-Ani_obj47
0000F4DC 0000                       		dc.w byte_EAF8-Ani_obj47
0000F4DE 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F4E2 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F4EA                            		even
0000F4EA                            		even
0000F4EA                            
0000F4EA                            ; ---------------------------------------------------------------------------
0000F4EA                            ; Sprite mappings - pinball bumper (SYZ)
0000F4EA                            ; ---------------------------------------------------------------------------
0000F4EA                            Map_obj47:
0000F4EA                            	include "_maps\obj47.asm"
0000F4EA                            ; ---------------------------------------------------------------------------
0000F4EA                            ; Sprite mappings - pinball bumper (SYZ)
0000F4EA                            ; ---------------------------------------------------------------------------
0000F4EA 0000                       		dc.w byte_EB06-Map_obj47
0000F4EC 0000                       		dc.w byte_EB11-Map_obj47
0000F4EE 0000                       		dc.w byte_EB1C-Map_obj47
0000F4F0 02                         byte_EB06:	dc.b 2
0000F4F1 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F4F6 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F4FB 02                         byte_EB11:	dc.b 2
0000F4FC F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F501 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F506 02                         byte_EB1C:	dc.b 2
0000F507 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F50C F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F512 00                         		even
0000F512 00                         		even
0000F512                            
0000F512                            ; ===========================================================================
0000F512                            ; ---------------------------------------------------------------------------
0000F512                            ; Object 0D - signpost at the end of a level
0000F512                            ; ---------------------------------------------------------------------------
0000F512                            
0000F512                            Obj0D:					; XREF: Obj_Index
0000F512 7000                       		moveq	#0,d0
0000F514 1028 0024                  		move.b	$24(a0),d0
0000F518 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F51C 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F520 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F526 6100 BB24                  		bsr.w	AnimateSprite
0000F52A 6100 EACA                  		bsr.w	DisplaySprite
0000F52E 3028 0008                  		move.w	8(a0),d0
0000F532 0240 FF80                  		andi.w	#$FF80,d0
0000F536 3238 F700                  		move.w	($FFFFF700).w,d1
0000F53A 0441 0080                  		subi.w	#$80,d1
0000F53E 0241 FF80                  		andi.w	#$FF80,d1
0000F542 9041                       		sub.w	d1,d0
0000F544 0C40 0280                  		cmpi.w	#$280,d0
0000F548 6200 EAE8                  		bhi.w	DeleteObject
0000F54C 4E75                       		rts	
0000F54E                            ; ===========================================================================
0000F54E 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F550 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F552 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F554 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F556 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F558                            ; ===========================================================================
0000F558                            
0000F558                            Obj0D_Main:				; XREF: Obj0D_Index
0000F558 5428 0024                  		addq.b	#2,$24(a0)
0000F55C 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F564 317C 0680 0002             		move.w	#$680,2(a0)
0000F56A 117C 0004 0001             		move.b	#4,1(a0)
0000F570 117C 0018 0019             		move.b	#$18,$19(a0)
0000F576 117C 0004 0018             		move.b	#4,$18(a0)
0000F57C                            
0000F57C                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F57C 3038 D008                  		move.w	($FFFFD008).w,d0
0000F580 9068 0008                  		sub.w	8(a0),d0
0000F584 6500                       		bcs.s	locret_EBBA
0000F586 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F58A 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F58C 303C 00CF                  		move.w	#$CF,d0
0000F590 4EB9 0000 1588             		jsr	(PlaySound).l	; play signpost	sound
0000F596 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F59A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F5A0 5428 0024                  		addq.b	#2,$24(a0)
0000F5A4                            
0000F5A4                            locret_EBBA:
0000F5A4 4E75                       		rts	
0000F5A6                            ; ===========================================================================
0000F5A6                            
0000F5A6                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F5A6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F5AA 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F5AC 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F5B2 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F5B6 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F5BC 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F5BE 5428 0024                  		addq.b	#2,$24(a0)
0000F5C2                            
0000F5C2                            Obj0D_Sparkle:
0000F5C2 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F5C6 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F5C8 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F5CE 7000                       		moveq	#0,d0
0000F5D0 1028 0034                  		move.b	$34(a0),d0
0000F5D4 5428 0034                  		addq.b	#2,$34(a0)
0000F5D8 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F5DE 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F5E2 6100 EE98                  		bsr.w	SingleObjLoad
0000F5E6 6600                       		bne.s	locret_EC42
0000F5E8 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F5EC 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F5F2 101A                       		move.b	(a2)+,d0
0000F5F4 4880                       		ext.w	d0
0000F5F6 D068 0008                  		add.w	8(a0),d0
0000F5FA 3340 0008                  		move.w	d0,8(a1)
0000F5FE 101A                       		move.b	(a2)+,d0
0000F600 4880                       		ext.w	d0
0000F602 D068 000C                  		add.w	$C(a0),d0
0000F606 3340 000C                  		move.w	d0,$C(a1)
0000F60A 237C 0000 A7EA 0004        		move.l	#Map_obj25,4(a1)
0000F612 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F618 137C 0004 0001             		move.b	#4,1(a1)
0000F61E 137C 0002 0018             		move.b	#2,$18(a1)
0000F624 137C 0008 0019             		move.b	#8,$19(a1)
0000F62A                            
0000F62A                            locret_EC42:
0000F62A 4E75                       		rts	
0000F62C                            ; ===========================================================================
0000F62C E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F62E 0808                       		dc.b	8,   8
0000F630 F000                       		dc.b -$10,   0
0000F632 18F8                       		dc.b  $18,  -8
0000F634 00F8                       		dc.b	0,  -8
0000F636 1000                       		dc.b  $10,   0
0000F638 E808                       		dc.b -$18,   8
0000F63A 1810                       		dc.b  $18, $10
0000F63C                            ; ===========================================================================
0000F63C                            
0000F63C                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F63C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F640 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F644 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F64A 6600                       		bne.s	loc_EC70
0000F64C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F652 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F658 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F65A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F660 6000                       		bra.s	loc_EC70
0000F662                            
0000F662                            Obj0D_MoveLeft:
0000F662 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F668                            
0000F668                            loc_EC70:
0000F668 4A38 D000                  		tst.b	($FFFFD000).w
0000F66C 6700                       		beq.s	loc_EC86
0000F66E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F672 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F676 0641 0128                  		addi.w	#$128,d1
0000F67A B041                       		cmp.w	d1,d0
0000F67C 6500                       		bcs.s	locret_ECEE
0000F67E                            
0000F67E                            loc_EC86:
0000F67E 5428 0024                  		addq.b	#2,$24(a0)
0000F682                            
0000F682                            ; ---------------------------------------------------------------------------
0000F682                            ; Subroutine to	set up bonuses at the end of an	act
0000F682                            ; ---------------------------------------------------------------------------
0000F682                            
0000F682                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F682                            
0000F682                            
0000F682                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F682 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F686 6600                       		bne.s	locret_ECEE
0000F688 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F68E 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F692 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F696 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F69C 7010                       		moveq	#$10,d0
0000F69E 4EB9 0000 17A4             		jsr	(LoadPLC2).l	; load title card patterns
0000F6A4 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F6AA 7000                       		moveq	#0,d0
0000F6AC 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F6B0 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F6B4 7200                       		moveq	#0,d1
0000F6B6 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F6BA D041                       		add.w	d1,d0		; add up your time
0000F6BC 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F6C0 7214                       		moveq	#$14,d1
0000F6C2 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F6C4 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F6C6 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F6C8                            
0000F6C8                            loc_ECD0:
0000F6C8 D040                       		add.w	d0,d0
0000F6CA 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F6D0 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F6D4 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F6D8 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F6DC 303C 008E                  		move.w	#$8E,d0
0000F6E0 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F6E6                            
0000F6E6                            locret_ECEE:
0000F6E6 4E75                       		rts	
0000F6E8                            ; End of function GotThroughAct
0000F6E8                            
0000F6E8                            ; ===========================================================================
0000F6E8 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F6FC 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F712                            ; ===========================================================================
0000F712                            
0000F712                            locret_ED1A:				; XREF: Obj0D_Index
0000F712 4E75                       		rts	
0000F714                            ; ===========================================================================
0000F714                            Ani_obj0D:
0000F714                            	include "_anim\obj0D.asm"
0000F714                            ; ---------------------------------------------------------------------------
0000F714                            ; Animation script - signpost
0000F714                            ; ---------------------------------------------------------------------------
0000F714 0000                       		dc.w byte_ED24-Ani_obj0D
0000F716 0000                       		dc.w byte_ED28-Ani_obj0D
0000F718 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F71A 0000                       		dc.w byte_ED34-Ani_obj0D
0000F71C 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F720 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F726 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F72C 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F730 00                         		even
0000F730 00                         		even
0000F730                            
0000F730                            ; ---------------------------------------------------------------------------
0000F730                            ; Sprite mappings - signpost
0000F730                            ; ---------------------------------------------------------------------------
0000F730                            Map_obj0D:
0000F730                            	include "_maps\obj0D.asm"
0000F730                            ; ---------------------------------------------------------------------------
0000F730                            ; Sprite mappings - signpost
0000F730                            ; ---------------------------------------------------------------------------
0000F730 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F734 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F738 0000                       		dc.w byte_ED73-Map_obj0D
0000F73A 03                         byte_ED42:	dc.b 3
0000F73B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F740 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F745 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F74A 02                         byte_ED52:	dc.b 2
0000F74B F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F750 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F755 02                         byte_ED5D:	dc.b 2
0000F756 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F75B 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F760 02                         byte_ED68:	dc.b 2
0000F761 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F766 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F76B 03                         byte_ED73:	dc.b 3
0000F76C F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F771 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F776 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F77C 00                         		even
0000F77C 00                         		even
0000F77C                            
0000F77C                            ; ===========================================================================
0000F77C                            ; ---------------------------------------------------------------------------
0000F77C                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F77C                            ; ---------------------------------------------------------------------------
0000F77C                            
0000F77C                            Obj4C:					; XREF: Obj_Index
0000F77C 7000                       		moveq	#0,d0
0000F77E 1028 0024                  		move.b	$24(a0),d0
0000F782 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F786 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F78A 6000 0000                  		bra.w	Obj4D_ChkDel
0000F78E                            ; ===========================================================================
0000F78E 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F790 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F792 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F794 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F796 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F798 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F79A                            ; ===========================================================================
0000F79A                            
0000F79A                            Obj4C_Main:				; XREF: Obj4C_Index
0000F79A 5428 0024                  		addq.b	#2,$24(a0)
0000F79E 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F7A6 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F7AC 117C 0004 0001             		move.b	#4,1(a0)
0000F7B2 117C 0001 0018             		move.b	#1,$18(a0)
0000F7B8 117C 0038 0019             		move.b	#$38,$19(a0)
0000F7BE 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F7C4                            
0000F7C4                            loc_EDCC:				; XREF: Obj4C_Index
0000F7C4 5368 0032                  		subq.w	#1,$32(a0)
0000F7C8 6A00                       		bpl.s	locret_EDF0
0000F7CA 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F7D0 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F7D4 3228 000C                  		move.w	$C(a0),d1
0000F7D8 B041                       		cmp.w	d1,d0
0000F7DA 6400                       		bcc.s	locret_EDF0
0000F7DC 0441 0170                  		subi.w	#$170,d1
0000F7E0 B041                       		cmp.w	d1,d0
0000F7E2 6500                       		bcs.s	locret_EDF0
0000F7E4 5428 0024                  		addq.b	#2,$24(a0)
0000F7E8                            
0000F7E8                            locret_EDF0:
0000F7E8 4E75                       		rts	
0000F7EA                            ; ===========================================================================
0000F7EA                            
0000F7EA                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F7EA 5428 0024                  		addq.b	#2,$24(a0)
0000F7EE 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F7F2 6600                       		bne.s	loc_EE18
0000F7F4 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F7F8 3368 0008 0008             		move.w	8(a0),8(a1)
0000F7FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F804 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F80A 2348 003C                  		move.l	a0,$3C(a1)
0000F80E                            
0000F80E                            loc_EE18:
0000F80E 117C 0001 001C             		move.b	#1,$1C(a0)
0000F814 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F818 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F81A 117C 0004 001C             		move.b	#4,$1C(a0)
0000F820 6000                       		bra.s	Obj4C_Display
0000F822                            ; ===========================================================================
0000F822                            
0000F822                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F822 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F826 08E9 0001 0022             		bset	#1,$22(a1)
0000F82C 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F832 6000                       		bra.s	Obj4C_Display
0000F834                            ; ===========================================================================
0000F834                            
0000F834                            loc_EE3E:				; XREF: Obj4C_Index
0000F834 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F838 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F83A 5428 0024                  		addq.b	#2,$24(a0)
0000F83E 4E75                       		rts	
0000F840                            ; ===========================================================================
0000F840                            
0000F840                            Obj4C_Display:				; XREF: Obj4C_Index
0000F840 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F846 6100 B804                  		bsr.w	AnimateSprite
0000F84A 6100 E7AA                  		bsr.w	DisplaySprite
0000F84E 4E75                       		rts	
0000F850                            ; ===========================================================================
0000F850                            
0000F850                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F850 117C 0000 001C             		move.b	#0,$1C(a0)
0000F856 117C 0002 0024             		move.b	#2,$24(a0)
0000F85C 4A28 0028                  		tst.b	$28(a0)
0000F860 6700 E7D0                  		beq.w	DeleteObject
0000F864 4E75                       		rts	
0000F866                            ; ===========================================================================
0000F866                            ; ---------------------------------------------------------------------------
0000F866                            ; Object 4D - lava geyser / lavafall (MZ)
0000F866                            ; ---------------------------------------------------------------------------
0000F866                            
0000F866                            Obj4D:					; XREF: Obj_Index
0000F866 7000                       		moveq	#0,d0
0000F868 1028 0024                  		move.b	$24(a0),d0
0000F86C 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F870 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F874 6000 E780                  		bra.w	DisplaySprite
0000F878                            ; ===========================================================================
0000F878 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F87A 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F87C 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F87E 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F880                            
0000F880 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F884                            ; ===========================================================================
0000F884                            
0000F884                            Obj4D_Main:				; XREF: Obj4D_Index
0000F884 5428 0024                  		addq.b	#2,$24(a0)
0000F888 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F88E 4A28 0028                  		tst.b	$28(a0)
0000F892 6700                       		beq.s	loc_EEA4
0000F894 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F89A                            
0000F89A                            loc_EEA4:
0000F89A 7000                       		moveq	#0,d0
0000F89C 1028 0028                  		move.b	$28(a0),d0
0000F8A0 D040                       		add.w	d0,d0
0000F8A2 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F8A8 2248                       		movea.l	a0,a1
0000F8AA 7201                       		moveq	#1,d1
0000F8AC 6100                       		bsr.s	Obj4D_MakeLava
0000F8AE 6000                       		bra.s	loc_EF10
0000F8B0                            ; ===========================================================================
0000F8B0                            
0000F8B0                            Obj4D_Loop:
0000F8B0 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F8B4 6600                       		bne.s	loc_EF0A
0000F8B6                            
0000F8B6                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F8B6 12BC 004D                  		move.b	#$4D,0(a1)
0000F8BA 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F8C2 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F8C8 137C 0004 0001             		move.b	#4,1(a1)
0000F8CE 137C 0020 0019             		move.b	#$20,$19(a1)
0000F8D4 3368 0008 0008             		move.w	8(a0),8(a1)
0000F8DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F8E0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F8E6 137C 0001 0018             		move.b	#1,$18(a1)
0000F8EC 137C 0005 001C             		move.b	#5,$1C(a1)
0000F8F2 4A28 0028                  		tst.b	$28(a0)
0000F8F6 6700                       		beq.s	loc_EF0A
0000F8F8 137C 0002 001C             		move.b	#2,$1C(a1)
0000F8FE                            
0000F8FE                            loc_EF0A:
0000F8FE 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F902 4E75                       		rts	
0000F904                            ; ===========================================================================
0000F904                            
0000F904                            loc_EF10:				; XREF: Obj4D_Main
0000F904 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F90A 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F910 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F916 137C 0093 0020             		move.b	#$93,$20(a1)
0000F91C 137C 0080 0016             		move.b	#$80,$16(a1)
0000F922 08E9 0004 0001             		bset	#4,1(a1)
0000F928 5829 0024                  		addq.b	#4,$24(a1)
0000F92C 2348 003C                  		move.l	a0,$3C(a1)
0000F930 4A28 0028                  		tst.b	$28(a0)
0000F934 6700                       		beq.s	Obj4D_PlaySnd
0000F936 7200                       		moveq	#0,d1
0000F938 6100 FF76                  		bsr.w	Obj4D_Loop
0000F93C 5429 0024                  		addq.b	#2,$24(a1)
0000F940 08E9 0004 0002             		bset	#4,2(a1)
0000F946 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F94C 137C 0000 0018             		move.b	#0,$18(a1)
0000F952 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F958 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F95E 117C 0000 0028             		move.b	#0,$28(a0)
0000F964                            
0000F964                            Obj4D_PlaySnd:
0000F964 303C 00C8                  		move.w	#$C8,d0
0000F968 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play flame sound
0000F96E                            
0000F96E                            Obj4D_Action:				; XREF: Obj4D_Index
0000F96E 7000                       		moveq	#0,d0
0000F970 1028 0028                  		move.b	$28(a0),d0
0000F974 D040                       		add.w	d0,d0
0000F976 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F97A 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F97E 6100 E650                  		bsr.w	SpeedToPos
0000F982 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F988 6100 B6C2                  		bsr.w	AnimateSprite
0000F98C                            
0000F98C                            Obj4D_ChkDel:				; XREF: Obj4C
0000F98C 3028 0008                  		move.w	8(a0),d0
0000F990 0240 FF80                  		andi.w	#$FF80,d0
0000F994 3238 F700                  		move.w	($FFFFF700).w,d1
0000F998 0441 0080                  		subi.w	#$80,d1
0000F99C 0241 FF80                  		andi.w	#$FF80,d1
0000F9A0 9041                       		sub.w	d1,d0
0000F9A2 0C40 0280                  		cmpi.w	#$280,d0
0000F9A6 6200 E68A                  		bhi.w	DeleteObject
0000F9AA 4E75                       		rts	
0000F9AC                            ; ===========================================================================
0000F9AC 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F9AE 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F9B0                            ; ===========================================================================
0000F9B0                            
0000F9B0                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F9B0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F9B6 3028 0030                  		move.w	$30(a0),d0
0000F9BA B068 000C                  		cmp.w	$C(a0),d0
0000F9BE 6400                       		bcc.s	locret_EFDA
0000F9C0 5828 0024                  		addq.b	#4,$24(a0)
0000F9C4 2268 003C                  		movea.l	$3C(a0),a1
0000F9C8 137C 0003 001C             		move.b	#3,$1C(a1)
0000F9CE                            
0000F9CE                            locret_EFDA:
0000F9CE 4E75                       		rts	
0000F9D0                            ; ===========================================================================
0000F9D0                            
0000F9D0                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F9D0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F9D6 3028 0030                  		move.w	$30(a0),d0
0000F9DA B068 000C                  		cmp.w	$C(a0),d0
0000F9DE 6400                       		bcc.s	locret_EFFA
0000F9E0 5828 0024                  		addq.b	#4,$24(a0)
0000F9E4 2268 003C                  		movea.l	$3C(a0),a1
0000F9E8 137C 0001 001C             		move.b	#1,$1C(a1)
0000F9EE                            
0000F9EE                            locret_EFFA:
0000F9EE 4E75                       		rts	
0000F9F0                            ; ===========================================================================
0000F9F0                            
0000F9F0                            loc_EFFC:				; XREF: Obj4D_Index
0000F9F0 2268 003C                  		movea.l	$3C(a0),a1
0000F9F4 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F9FA 6700 0000                  		beq.w	Obj4D_Delete
0000F9FE 3029 000C                  		move.w	$C(a1),d0
0000FA02 0640 0060                  		addi.w	#$60,d0
0000FA06 3140 000C                  		move.w	d0,$C(a0)
0000FA0A 9068 0030                  		sub.w	$30(a0),d0
0000FA0E 4440                       		neg.w	d0
0000FA10 7208                       		moveq	#8,d1
0000FA12 0C40 0040                  		cmpi.w	#$40,d0
0000FA16 6C00                       		bge.s	loc_F026
0000FA18 720B                       		moveq	#$B,d1
0000FA1A                            
0000FA1A                            loc_F026:
0000FA1A 0C40 0080                  		cmpi.w	#$80,d0
0000FA1E 6F00                       		ble.s	loc_F02E
0000FA20 720E                       		moveq	#$E,d1
0000FA22                            
0000FA22                            loc_F02E:
0000FA22 5328 001E                  		subq.b	#1,$1E(a0)
0000FA26 6A00                       		bpl.s	loc_F04C
0000FA28 117C 0007 001E             		move.b	#7,$1E(a0)
0000FA2E 5228 001B                  		addq.b	#1,$1B(a0)
0000FA32 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FA38 6500                       		bcs.s	loc_F04C
0000FA3A 117C 0000 001B             		move.b	#0,$1B(a0)
0000FA40                            
0000FA40                            loc_F04C:
0000FA40 1028 001B                  		move.b	$1B(a0),d0
0000FA44 D001                       		add.b	d1,d0
0000FA46 1140 001A                  		move.b	d0,$1A(a0)
0000FA4A 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FA4E                            ; ===========================================================================
0000FA4E                            
0000FA4E                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FA4E 6000 E5E2                  		bra.w	DeleteObject
0000FA52                            ; ===========================================================================
0000FA52                            ; ---------------------------------------------------------------------------
0000FA52                            ; Object 4E - advancing	wall of	lava (MZ)
0000FA52                            ; ---------------------------------------------------------------------------
0000FA52                            
0000FA52                            Obj4E:					; XREF: Obj_Index
0000FA52 7000                       		moveq	#0,d0
0000FA54 1028 0024                  		move.b	$24(a0),d0
0000FA58 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FA5C 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FA60                            ; ===========================================================================
0000FA60 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FA62 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FA64 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FA66 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FA68 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FA6A                            ; ===========================================================================
0000FA6A                            
0000FA6A                            Obj4E_Main:				; XREF: Obj4E_Index
0000FA6A 5828 0024                  		addq.b	#4,$24(a0)
0000FA6E 2248                       		movea.l	a0,a1
0000FA70 7201                       		moveq	#1,d1
0000FA72 6000                       		bra.s	Obj4E_Main2
0000FA74                            ; ===========================================================================
0000FA74                            
0000FA74                            Obj4E_Loop:
0000FA74 6100 EA1C                  		bsr.w	SingleObjLoad2
0000FA78 6600                       		bne.s	loc_F0C8
0000FA7A                            
0000FA7A                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FA7A 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FA7E 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FA86 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FA8C 137C 0004 0001             		move.b	#4,1(a1)
0000FA92 137C 0050 0019             		move.b	#$50,$19(a1)
0000FA98 3368 0008 0008             		move.w	8(a0),8(a1)
0000FA9E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FAA4 137C 0001 0018             		move.b	#1,$18(a1)
0000FAAA 137C 0000 001C             		move.b	#0,$1C(a1)
0000FAB0 137C 0094 0020             		move.b	#$94,$20(a1)
0000FAB6 2348 003C                  		move.l	a0,$3C(a1)
0000FABA                            
0000FABA                            loc_F0C8:
0000FABA 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FABE                            
0000FABE 5C29 0024                  		addq.b	#6,$24(a1)
0000FAC2 137C 0004 001A             		move.b	#4,$1A(a1)
0000FAC8                            
0000FAC8                            Obj4E_Action:				; XREF: Obj4E_Index
0000FAC8 3038 D008                  		move.w	($FFFFD008).w,d0
0000FACC 9068 0008                  		sub.w	8(a0),d0
0000FAD0 6400                       		bcc.s	Obj4E_ChkSonic
0000FAD2 4440                       		neg.w	d0
0000FAD4                            
0000FAD4                            Obj4E_ChkSonic:
0000FAD4 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FAD8 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FADA 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FADE 9068 000C                  		sub.w	$C(a0),d0
0000FAE2 6400                       		bcc.s	loc_F0F4
0000FAE4 4440                       		neg.w	d0
0000FAE6                            
0000FAE6                            loc_F0F4:
0000FAE6 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FAEA 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FAEC 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FAF2 6000                       		bra.s	Obj4E_Solid
0000FAF4                            ; ===========================================================================
0000FAF4                            
0000FAF4                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FAF4 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FAF8 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FAFA 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FB00 5528 0024                  		subq.b	#2,$24(a0)
0000FB04                            
0000FB04                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FB04 323C 002B                  		move.w	#$2B,d1
0000FB08 343C 0018                  		move.w	#$18,d2
0000FB0C 3602                       		move.w	d2,d3
0000FB0E 5243                       		addq.w	#1,d3
0000FB10 3828 0008                  		move.w	8(a0),d4
0000FB14 1028 0024                  		move.b	$24(a0),d0
0000FB18 3F00                       		move.w	d0,-(sp)
0000FB1A 6100 0000                  		bsr.w	SolidObject
0000FB1E 301F                       		move.w	(sp)+,d0
0000FB20 1140 0024                  		move.b	d0,$24(a0)
0000FB24 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FB2A 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FB2C 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FB30 4228 0036                  		clr.b	$36(a0)
0000FB34                            
0000FB34                            Obj4E_Animate:
0000FB34 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FB3A 6100 B510                  		bsr.w	AnimateSprite
0000FB3E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FB44 6400                       		bcc.s	Obj4E_ChkDel
0000FB46 6100 E488                  		bsr.w	SpeedToPos
0000FB4A                            
0000FB4A                            Obj4E_ChkDel:
0000FB4A 6100 E4AA                  		bsr.w	DisplaySprite
0000FB4E 4A28 0036                  		tst.b	$36(a0)
0000FB52 6600                       		bne.s	locret_F17E
0000FB54 3028 0008                  		move.w	8(a0),d0
0000FB58 0240 FF80                  		andi.w	#$FF80,d0
0000FB5C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FB60 0441 0080                  		subi.w	#$80,d1
0000FB64 0241 FF80                  		andi.w	#$FF80,d1
0000FB68 9041                       		sub.w	d1,d0
0000FB6A 0C40 0280                  		cmpi.w	#$280,d0
0000FB6E 6200                       		bhi.s	Obj4E_ChkGone
0000FB70                            
0000FB70                            locret_F17E:
0000FB70 4E75                       		rts	
0000FB72                            ; ===========================================================================
0000FB72                            
0000FB72                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FB72 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FB76 7000                       		moveq	#0,d0
0000FB78 1028 0023                  		move.b	$23(a0),d0
0000FB7C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FB82 117C 0008 0024             		move.b	#8,$24(a0)
0000FB88 4E75                       		rts	
0000FB8A                            ; ===========================================================================
0000FB8A                            
0000FB8A                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FB8A 2268 003C                  		movea.l	$3C(a0),a1
0000FB8E 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FB94 6700                       		beq.s	Obj4E_Delete
0000FB96 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FB9C 0468 0080 0008             		subi.w	#$80,8(a0)
0000FBA2 6000 E452                  		bra.w	DisplaySprite
0000FBA6                            ; ===========================================================================
0000FBA6                            
0000FBA6                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FBA6 6000 E48A                  		bra.w	DeleteObject
0000FBAA                            ; ===========================================================================
0000FBAA                            ; ---------------------------------------------------------------------------
0000FBAA                            ; Object 54 - invisible	lava tag (MZ)
0000FBAA                            ; ---------------------------------------------------------------------------
0000FBAA                            
0000FBAA                            Obj54:					; XREF: Obj_Index
0000FBAA 7000                       		moveq	#0,d0
0000FBAC 1028 0024                  		move.b	$24(a0),d0
0000FBB0 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FBB4 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FBB8                            ; ===========================================================================
0000FBB8 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FBBA 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FBBC                            
0000FBBC 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FBC0                            ; ===========================================================================
0000FBC0                            
0000FBC0                            Obj54_Main:				; XREF: Obj54_Index
0000FBC0 5428 0024                  		addq.b	#2,$24(a0)
0000FBC4 7000                       		moveq	#0,d0
0000FBC6 1028 0028                  		move.b	$28(a0),d0
0000FBCA 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FBD0 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FBD8 117C 0084 0001             		move.b	#$84,1(a0)
0000FBDE                            
0000FBDE                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FBDE 3028 0008                  		move.w	8(a0),d0
0000FBE2 0240 FF80                  		andi.w	#$FF80,d0
0000FBE6 3238 F700                  		move.w	($FFFFF700).w,d1
0000FBEA 0441 0080                  		subi.w	#$80,d1
0000FBEE 0241 FF80                  		andi.w	#$FF80,d1
0000FBF2 9041                       		sub.w	d1,d0
0000FBF4 6B00 E43C                  		bmi.w	DeleteObject
0000FBF8 0C40 0280                  		cmpi.w	#$280,d0
0000FBFC 6200 E434                  		bhi.w	DeleteObject
0000FC00 4E75                       		rts	
0000FC02                            ; ===========================================================================
0000FC02                            ; ---------------------------------------------------------------------------
0000FC02                            ; Sprite mappings - invisible lava tag (MZ)
0000FC02                            ; ---------------------------------------------------------------------------
0000FC02                            Map_obj54:
0000FC02                            	include "_maps\obj54.asm"
0000FC02                            ; ---------------------------------------------------------------------------
0000FC02                            ; Sprite mappings - invisible lava tag (MZ)
0000FC02                            ; ---------------------------------------------------------------------------
0000FC02 0000                       		dc.w byte_F212-Map_obj54
0000FC04 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FC06 00                         		even
0000FC06 00                         		even
0000FC06                            
0000FC06                            Ani_obj4C:
0000FC06                            	include "_anim\obj4C.asm"
0000FC06                            ; ---------------------------------------------------------------------------
0000FC06                            ; Animation script - geyser of lava (MZ)
0000FC06                            ; ---------------------------------------------------------------------------
0000FC06 0000                       		dc.w byte_F220-Ani_obj4C
0000FC08 0000                       		dc.w byte_F22A-Ani_obj4C
0000FC0A 0000                       		dc.w byte_F22E-Ani_obj4C
0000FC0C 0000                       		dc.w byte_F232-Ani_obj4C
0000FC0E 0000                       		dc.w byte_F23A-Ani_obj4C
0000FC10 0000                       		dc.w byte_F23E-Ani_obj4C
0000FC12 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FC1C 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FC20 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FC24 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FC2C 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FC30 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FC34                            		even
0000FC34                            		even
0000FC34                            
0000FC34                            Ani_obj4E:
0000FC34                            	include "_anim\obj4E.asm"
0000FC34                            ; ---------------------------------------------------------------------------
0000FC34                            ; Animation script - advancing wall of lava (MZ)
0000FC34                            ; ---------------------------------------------------------------------------
0000FC34 0000                       		dc.w byte_F244-Ani_obj4E
0000FC36 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FC3C                            		even
0000FC3C                            		even
0000FC3C                            
0000FC3C                            ; ---------------------------------------------------------------------------
0000FC3C                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC3C                            ; ---------------------------------------------------------------------------
0000FC3C                            Map_obj4C:
0000FC3C                            	include "_maps\obj4C.asm"
0000FC3C                            ; ---------------------------------------------------------------------------
0000FC3C                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC3C                            ; ---------------------------------------------------------------------------
0000FC3C 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FC40 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FC44 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FC48 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FC4C 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FC50 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FC54 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FC58 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FC5C 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FC60 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FC64 02                         byte_F272:	dc.b 2
0000FC65 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FC6A EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FC6F 02                         byte_F27D:	dc.b 2
0000FC70 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FC75 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FC7A 04                         byte_F288:	dc.b 4
0000FC7B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FC80 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FC85 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FC8A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FC8F 04                         byte_F29D:	dc.b 4
0000FC90 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FC95 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FC9A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FC9F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FCA4 06                         byte_F2B2:	dc.b 6
0000FCA5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FCAA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FCAF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FCB4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FCB9 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FCBE E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FCC3 06                         byte_F2D1:	dc.b 6
0000FCC4 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FCC9 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FCCE F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FCD3 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FCD8 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FCDD E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FCE2 02                         byte_F2F0:	dc.b 2
0000FCE3 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FCE8 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FCED 02                         byte_F2FB:	dc.b 2
0000FCEE E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FCF3 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FCF8 0A                         byte_F306:	dc.b $A
0000FCF9 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FCFE 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FD03 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FD08 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FD0D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FD12 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FD17 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FD1C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FD21 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FD26 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FD2B 0A                         byte_F339:	dc.b $A
0000FD2C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FD31 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FD36 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FD3B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FD40 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FD45 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FD4A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FD4F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FD54 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FD59 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FD5E 0A                         byte_F36C:	dc.b $A
0000FD5F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FD64 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FD69 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FD6E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FD73 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FD78 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FD7D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FD82 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FD87 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FD8C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FD91 06                         byte_F39F:	dc.b 6
0000FD92 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FD97 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FD9C B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FDA1 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FDA6 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FDAB D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FDB0 06                         byte_F3BE:	dc.b 6
0000FDB1 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FDB6 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FDBB B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FDC0 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FDC5 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FDCA D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FDCF 06                         byte_F3DD:	dc.b 6
0000FDD0 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FDD5 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FDDA B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FDDF B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FDE4 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FDE9 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FDEE 10                         byte_F3FC:	dc.b $10
0000FDEF 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FDF4 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FDF9 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FDFE B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE03 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE08 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE0D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE12 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE17 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE1C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE21 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FE26 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FE2B 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FE30 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FE35 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FE3A 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FE3F 10                         byte_F44D:	dc.b $10
0000FE40 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE45 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE4A B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE4F B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE54 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE59 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE5E F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FE63 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FE68 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FE6D 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FE72 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FE77 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FE7C 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FE81 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FE86 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FE8B 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FE90 10                         byte_F49E:	dc.b $10
0000FE91 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE96 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE9B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FEA0 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FEA5 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FEAA D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FEAF F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FEB4 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FEB9 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FEBE 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FEC3 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FEC8 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FECD 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FED2 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FED7 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FEDC 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FEE1 06                         byte_F4EF:	dc.b 6
0000FEE2 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FEE7 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FEEC E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FEF1 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FEF6 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FEFB D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FF00 06                         byte_F50E:	dc.b 6
0000FF01 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FF06 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FF0B E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FF10 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FF15 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FF1A D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FF1F 00                         byte_F52D:	dc.b 0
0000FF20                            		even
0000FF20                            		even
0000FF20                            
0000FF20                            ; ---------------------------------------------------------------------------
0000FF20                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF20                            ; ---------------------------------------------------------------------------
0000FF20                            Map_obj4E:
0000FF20                            	include "_maps\obj4E.asm"
0000FF20                            ; ---------------------------------------------------------------------------
0000FF20                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF20                            ; ---------------------------------------------------------------------------
0000FF20 0000                       		dc.w byte_F538-Map_obj4E
0000FF22 0000                       		dc.w byte_F566-Map_obj4E
0000FF24 0000                       		dc.w byte_F594-Map_obj4E
0000FF26 0000                       		dc.w byte_F5C2-Map_obj4E
0000FF28 0000                       		dc.w byte_F5F0-Map_obj4E
0000FF2A 09                         byte_F538:	dc.b 9
0000FF2B E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FF30 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FF35 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF3A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF3F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FF44 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FF49 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FF4E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FF53 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FF58 09                         byte_F566:	dc.b 9
0000FF59 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FF5E 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FF63 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF68 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF6D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FF72 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FF77 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FF7C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FF81 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FF86 09                         byte_F594:	dc.b 9
0000FF87 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FF8C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FF91 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF96 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF9B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFA0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFA5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFAA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFAF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFB4 09                         byte_F5C2:	dc.b 9
0000FFB5 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FFBA 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FFBF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFC4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFC9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFCE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFD3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFD8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFDD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFE2 08                         byte_F5F0:	dc.b 8
0000FFE3 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FFE8 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFED E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFF2 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFF7 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFFC 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010001 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010006 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001000C 00                         		even
0001000C 00                         		even
0001000C                            
0001000C                            ; ===========================================================================
0001000C                            ; ---------------------------------------------------------------------------
0001000C                            ; Object 40 - Moto Bug enemy (GHZ)
0001000C                            ; ---------------------------------------------------------------------------
0001000C                            
0001000C                            Obj40:					; XREF: Obj_Index
0001000C 7000                       		moveq	#0,d0
0001000E 1028 0024                  		move.b	$24(a0),d0
00010012 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010016 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0001001A                            ; ===========================================================================
0001001A 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0001001C 0000                       		dc.w Obj40_Action-Obj40_Index
0001001E 0000                       		dc.w Obj40_Animate-Obj40_Index
00010020 0000                       		dc.w Obj40_Delete-Obj40_Index
00010022                            ; ===========================================================================
00010022                            
00010022                            Obj40_Main:				; XREF: Obj40_Index
00010022 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0001002A 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010030 117C 0004 0001             		move.b	#4,1(a0)
00010036 117C 0004 0018             		move.b	#4,$18(a0)
0001003C 117C 0014 0019             		move.b	#$14,$19(a0)
00010042 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010046 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010048 117C 000E 0016             		move.b	#$E,$16(a0)
0001004E 117C 0008 0017             		move.b	#8,$17(a0)
00010054 117C 000C 0020             		move.b	#$C,$20(a0)
0001005A 6100 DF02                  		bsr.w	ObjectFall
0001005E 4EB9 0000 0000             		jsr	ObjHitFloor
00010064 4A41                       		tst.w	d1
00010066 6A00                       		bpl.s	locret_F68A
00010068 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001006C 317C 0000 0012             		move.w	#0,$12(a0)
00010072 5428 0024                  		addq.b	#2,$24(a0)
00010076 0868 0000 0022             		bchg	#0,$22(a0)
0001007C                            
0001007C                            locret_F68A:
0001007C 4E75                       		rts	
0001007E                            ; ===========================================================================
0001007E                            
0001007E                            Obj40_SetSmoke:				; XREF: Obj40_Main
0001007E 5828 0024                  		addq.b	#4,$24(a0)
00010082 6000 0000                  		bra.w	Obj40_Animate
00010086                            ; ===========================================================================
00010086                            
00010086                            Obj40_Action:				; XREF: Obj40_Index
00010086 7000                       		moveq	#0,d0
00010088 1028 0025                  		move.b	$25(a0),d0
0001008C 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010090 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00010094 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001009A 6100 AFB0                  		bsr.w	AnimateSprite
0001009E                            
0001009E                            ; ---------------------------------------------------------------------------
0001009E                            ; Routine to mark an enemy/monitor/ring	as destroyed
0001009E                            ; ---------------------------------------------------------------------------
0001009E                            
0001009E                            MarkObjGone:
0001009E 3028 0008                  		move.w	8(a0),d0
000100A2 0240 FF80                  		andi.w	#$FF80,d0
000100A6 3238 F700                  		move.w	($FFFFF700).w,d1
000100AA 0441 0080                  		subi.w	#$80,d1
000100AE 0241 FF80                  		andi.w	#$FF80,d1
000100B2 9041                       		sub.w	d1,d0
000100B4 0C40 0280                  		cmpi.w	#$280,d0
000100B8 6200 0000                  		bhi.w	Mark_ChkGone
000100BC 6000 DF38                  		bra.w	DisplaySprite
000100C0                            ; ===========================================================================
000100C0                            
000100C0                            Mark_ChkGone:
000100C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000100C4 7000                       		moveq	#0,d0
000100C6 1028 0023                  		move.b	$23(a0),d0
000100CA 6700                       		beq.s	Mark_Delete
000100CC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000100D2                            
000100D2                            Mark_Delete:
000100D2 6000 DF5E                  		bra.w	DeleteObject
000100D6                            
000100D6                            ; ===========================================================================
000100D6 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000100D8 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000100DA                            ; ===========================================================================
000100DA                            
000100DA                            Obj40_Move:				; XREF: Obj40_Index2
000100DA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000100DE 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000100E0 5428 0025                  		addq.b	#2,$25(a0)
000100E4 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000100EA 117C 0001 001C             		move.b	#1,$1C(a0)
000100F0 0868 0000 0022             		bchg	#0,$22(a0)
000100F6 6600                       		bne.s	locret_F70A
000100F8 4468 0010                  		neg.w	$10(a0)		; change direction
000100FC                            
000100FC                            locret_F70A:
000100FC 4E75                       		rts	
000100FE                            ; ===========================================================================
000100FE                            
000100FE                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000100FE 6100 DED0                  		bsr.w	SpeedToPos
00010102 4EB9 0000 0000             		jsr	ObjHitFloor
00010108 0C41 FFF8                  		cmpi.w	#-8,d1
0001010C 6D00                       		blt.s	Obj40_Pause
0001010E 0C41 000C                  		cmpi.w	#$C,d1
00010112 6C00                       		bge.s	Obj40_Pause
00010114 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010118 5328 0033                  		subq.b	#1,$33(a0)
0001011C 6A00                       		bpl.s	locret_F756
0001011E 117C 000F 0033             		move.b	#$F,$33(a0)
00010124 6100 E356                  		bsr.w	SingleObjLoad
00010128 6600                       		bne.s	locret_F756
0001012A 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0001012E 3368 0008 0008             		move.w	8(a0),8(a1)
00010134 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001013A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00010140 137C 0002 001C             		move.b	#2,$1C(a1)
00010146                            
00010146                            locret_F756:
00010146 4E75                       		rts	
00010148                            ; ===========================================================================
00010148                            
00010148                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010148 5528 0025                  		subq.b	#2,$25(a0)
0001014C 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010152 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00010158 117C 0000 001C             		move.b	#0,$1C(a0)
0001015E 4E75                       		rts	
00010160                            ; ===========================================================================
00010160                            
00010160                            Obj40_Animate:				; XREF: Obj40_Index
00010160 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010166 6100 AEE4                  		bsr.w	AnimateSprite
0001016A 6000 DE8A                  		bra.w	DisplaySprite
0001016E                            ; ===========================================================================
0001016E                            
0001016E                            Obj40_Delete:				; XREF: Obj40_Index
0001016E 6000 DEC2                  		bra.w	DeleteObject
00010172                            ; ===========================================================================
00010172                            Ani_obj40:
00010172                            	include "_anim\obj40.asm"
00010172                            ; ---------------------------------------------------------------------------
00010172                            ; Animation script - Motobug enemy
00010172                            ; ---------------------------------------------------------------------------
00010172 0000                       		dc.w byte_F788-Ani_obj40
00010174 0000                       		dc.w byte_F78C-Ani_obj40
00010176 0000                       		dc.w byte_F792-Ani_obj40
00010178 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0001017C 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00010182 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00010190                            		even
00010190                            		even
00010190                            
00010190                            ; ---------------------------------------------------------------------------
00010190                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010190                            ; ---------------------------------------------------------------------------
00010190                            Map_obj40:
00010190                            	include "_maps\obj40.asm"
00010190                            Map_cedc:
00010190 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
00010192 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
00010194 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
00010196 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
00010198 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0001019A 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0001019C 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0001019E 04                         Map_cedc_E: 	dc.b $4
0001019F F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000101A4 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
000101A9 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000101AE 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
000101B3 04                         Map_cedc_23: 	dc.b $4
000101B4 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
000101B9 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
000101BE F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
000101C3 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
000101C8 05                         Map_cedc_38: 	dc.b $5
000101C9 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000101CE 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
000101D3 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000101D8 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
000101DD 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
000101E2 01                         Map_cedc_52: 	dc.b $1
000101E3 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
000101E8 01                         Map_cedc_58: 	dc.b $1
000101E9 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
000101EE 01                         Map_cedc_5E: 	dc.b $1
000101EF FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
000101F4 00                         Map_cedc_64: 	dc.b $0
000101F6 00                         	even
000101F6 00                         	even
000101F6                            
000101F6                            ; ===========================================================================
000101F6                            ; ---------------------------------------------------------------------------
000101F6                            ; Object 4F - blank
000101F6                            ; ---------------------------------------------------------------------------
000101F6                            
000101F6                            Obj4F:					; XREF: Obj_Index
000101F6 4E75                       		rts	
000101F8                            
000101F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000101F8                            
000101F8                            
000101F8                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000101F8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000101FC D047                       		add.w	d7,d0
000101FE 0240 0003                  		andi.w	#3,d0
00010202 6600                       		bne.s	loc_F836
00010204 7600                       		moveq	#0,d3
00010206 1628 0019                  		move.b	$19(a0),d3
0001020A 4A68 0010                  		tst.w	$10(a0)
0001020E 6B00                       		bmi.s	loc_F82C
00010210 6100 0000                  		bsr.w	ObjHitWallRight
00010214 4A41                       		tst.w	d1
00010216 6A00                       		bpl.s	loc_F836
00010218                            
00010218                            loc_F828:
00010218 7001                       		moveq	#1,d0
0001021A 4E75                       		rts	
0001021C                            ; ===========================================================================
0001021C                            
0001021C                            loc_F82C:
0001021C 4643                       		not.w	d3
0001021E 6100 0000                  		bsr.w	ObjHitWallLeft
00010222 4A41                       		tst.w	d1
00010224 6BF2                       		bmi.s	loc_F828
00010226                            
00010226                            loc_F836:
00010226 7000                       		moveq	#0,d0
00010228 4E75                       		rts	
0001022A                            ; End of function Obj50_ChkWall
0001022A                            
0001022A                            ; ===========================================================================
0001022A                            ; ---------------------------------------------------------------------------
0001022A                            ; Object 50 - Yadrin enemy (SYZ)
0001022A                            ; ---------------------------------------------------------------------------
0001022A                            
0001022A                            Obj50:					; XREF: Obj_Index
0001022A 7000                       		moveq	#0,d0
0001022C 1028 0024                  		move.b	$24(a0),d0
00010230 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010234 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010238                            ; ===========================================================================
00010238 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0001023A 0000                       		dc.w Obj50_Action-Obj50_Index
0001023C                            ; ===========================================================================
0001023C                            
0001023C                            Obj50_Main:				; XREF: Obj50_Index
0001023C 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010244 317C 247B 0002             		move.w	#$247B,2(a0)
0001024A 117C 0004 0001             		move.b	#4,1(a0)
00010250 117C 0004 0018             		move.b	#4,$18(a0)
00010256 117C 0014 0019             		move.b	#$14,$19(a0)
0001025C 117C 0011 0016             		move.b	#$11,$16(a0)
00010262 117C 0008 0017             		move.b	#8,$17(a0)
00010268 117C 00CC 0020             		move.b	#$CC,$20(a0)
0001026E 6100 DCEE                  		bsr.w	ObjectFall
00010272 6100 0000                  		bsr.w	ObjHitFloor
00010276 4A41                       		tst.w	d1
00010278 6A00                       		bpl.s	locret_F89E
0001027A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001027E 317C 0000 0012             		move.w	#0,$12(a0)
00010284 5428 0024                  		addq.b	#2,$24(a0)
00010288 0868 0000 0022             		bchg	#0,$22(a0)
0001028E                            
0001028E                            locret_F89E:
0001028E 4E75                       		rts	
00010290                            ; ===========================================================================
00010290                            
00010290                            Obj50_Action:				; XREF: Obj50_Index
00010290 7000                       		moveq	#0,d0
00010292 1028 0025                  		move.b	$25(a0),d0
00010296 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0001029A 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0001029E 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000102A4 6100 ADA6                  		bsr.w	AnimateSprite
000102A8 6000 FDF4                  		bra.w	MarkObjGone
000102AC                            ; ===========================================================================
000102AC 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000102AE 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000102B0                            ; ===========================================================================
000102B0                            
000102B0                            Obj50_Move:				; XREF: Obj50_Index2
000102B0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000102B4 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000102B6 5428 0025                  		addq.b	#2,$25(a0)
000102BA 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000102C0 117C 0001 001C             		move.b	#1,$1C(a0)
000102C6 0868 0000 0022             		bchg	#0,$22(a0)
000102CC 6600                       		bne.s	locret_F8E2
000102CE 4468 0010                  		neg.w	$10(a0)		; change direction
000102D2                            
000102D2                            locret_F8E2:
000102D2 4E75                       		rts	
000102D4                            ; ===========================================================================
000102D4                            
000102D4                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000102D4 6100 DCFA                  		bsr.w	SpeedToPos
000102D8 6100 0000                  		bsr.w	ObjHitFloor
000102DC 0C41 FFF8                  		cmpi.w	#-8,d1
000102E0 6D00                       		blt.s	Obj50_Pause
000102E2 0C41 000C                  		cmpi.w	#$C,d1
000102E6 6C00                       		bge.s	Obj50_Pause
000102E8 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000102EC 6100 FF0A                  		bsr.w	Obj50_ChkWall
000102F0 6600                       		bne.s	Obj50_Pause
000102F2 4E75                       		rts	
000102F4                            ; ===========================================================================
000102F4                            
000102F4                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000102F4 5528 0025                  		subq.b	#2,$25(a0)
000102F8 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000102FE 317C 0000 0010             		move.w	#0,$10(a0)
00010304 117C 0000 001C             		move.b	#0,$1C(a0)
0001030A 4E75                       		rts	
0001030C                            ; ===========================================================================
0001030C                            Ani_obj50:
0001030C                            	include "_anim\obj50.asm"
0001030C                            ; ---------------------------------------------------------------------------
0001030C                            ; Animation script - Yadrin enemy
0001030C                            ; ---------------------------------------------------------------------------
0001030C 0000                       		dc.w byte_F920-Ani_obj50
0001030E 0000                       		dc.w byte_F924-Ani_obj50
00010310 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010314 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0001031E                            		even
0001031E                            		even
0001031E                            
0001031E                            ; ---------------------------------------------------------------------------
0001031E                            ; Sprite mappings - Yadrin enemy (SYZ)
0001031E                            ; ---------------------------------------------------------------------------
0001031E                            Map_obj50:
0001031E                            	include "_maps\obj50.asm"
0001031E                            Map_ff24:
0001031E 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010320 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
00010322 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010324 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010326 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010328 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
0001032A 05                         Map_ff24_C: 	dc.b $5
0001032B F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010330 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010335 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001033A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001033F 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010344 05                         Map_ff24_26: 	dc.b $5
00010345 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0001034A FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001034F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010354 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010359 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001035E 05                         Map_ff24_40: 	dc.b $5
0001035F F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010364 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010369 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001036E F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010373 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010378 05                         Map_ff24_5A: 	dc.b $5
00010379 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001037E FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010383 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010388 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001038D 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010392 05                         Map_ff24_74: 	dc.b $5
00010393 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010398 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001039D EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103A2 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103A7 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103AC 05                         Map_ff24_8E: 	dc.b $5
000103AD F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000103B2 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000103B7 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103BC F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103C1 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103C6                            	even
000103C6                            	even
000103C6                            
000103C6                            ; ---------------------------------------------------------------------------
000103C6                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000103C6                            ;
000103C6                            ; variables:
000103C6                            ; d1 = width
000103C6                            ; d2 = height /	2 (when	jumping)
000103C6                            ; d3 = height /	2 (when	walking)
000103C6                            ; d4 = x-axis position
000103C6                            ; ---------------------------------------------------------------------------
000103C6                            
000103C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000103C6                            
000103C6                            
000103C6                            SolidObject:
000103C6 4A28 0025                  		tst.b	$25(a0)
000103CA 6700 0000                  		beq.w	loc_FAC8
000103CE 3401                       		move.w	d1,d2
000103D0 D442                       		add.w	d2,d2
000103D2 43F8 D000                  		lea	($FFFFD000).w,a1
000103D6 0829 0001 0022             		btst	#1,$22(a1)
000103DC 6600                       		bne.s	loc_F9FE
000103DE 3029 0008                  		move.w	8(a1),d0
000103E2 9068 0008                  		sub.w	8(a0),d0
000103E6 D041                       		add.w	d1,d0
000103E8 6B00                       		bmi.s	loc_F9FE
000103EA B042                       		cmp.w	d2,d0
000103EC 6500                       		bcs.s	loc_FA12
000103EE                            
000103EE                            loc_F9FE:
000103EE 08A9 0003 0022             		bclr	#3,$22(a1)
000103F4 08A8 0003 0022             		bclr	#3,$22(a0)
000103FA 4228 0025                  		clr.b	$25(a0)
000103FE 7800                       		moveq	#0,d4
00010400 4E75                       		rts	
00010402                            ; ===========================================================================
00010402                            
00010402                            loc_FA12:
00010402 3404                       		move.w	d4,d2
00010404 4EB9 0000 82DA             		jsr	MvSonicOnPtfm 
0001040A 7800                       		moveq	#0,d4
0001040C 4E75                       		rts	
0001040E                            ; ===========================================================================
0001040E                            
0001040E                            SolidObject71:				; XREF: Obj71_Solid
0001040E 4A28 0025                  		tst.b	$25(a0)
00010412 6700 0000                  		beq.w	loc_FAD0
00010416 3401                       		move.w	d1,d2
00010418 D442                       		add.w	d2,d2
0001041A 43F8 D000                  		lea	($FFFFD000).w,a1
0001041E 0829 0001 0022             		btst	#1,$22(a1)
00010424 6600                       		bne.s	loc_FA44
00010426 3029 0008                  		move.w	8(a1),d0
0001042A 9068 0008                  		sub.w	8(a0),d0
0001042E D041                       		add.w	d1,d0
00010430 6B00                       		bmi.s	loc_FA44
00010432 B042                       		cmp.w	d2,d0
00010434 6500                       		bcs.s	loc_FA58
00010436                            
00010436                            loc_FA44:
00010436 08A9 0003 0022             		bclr	#3,$22(a1)
0001043C 08A8 0003 0022             		bclr	#3,$22(a0)
00010442 4228 0025                  		clr.b	$25(a0)
00010446 7800                       		moveq	#0,d4
00010448 4E75                       		rts	
0001044A                            ; ===========================================================================
0001044A                            
0001044A                            loc_FA58:
0001044A 3404                       		move.w	d4,d2
0001044C                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0001044C 7800                       		moveq	#0,d4
0001044E 4E75                       		rts	
00010450                            ; ===========================================================================
00010450                            
00010450                            SolidObject2F:				; XREF: Obj2F_Solid
00010450 43F8 D000                  		lea	($FFFFD000).w,a1
00010454 4A28 0001                  		tst.b	1(a0)
00010458 6A00 0000                  		bpl.w	loc_FB92
0001045C 3029 0008                  		move.w	8(a1),d0
00010460 9068 0008                  		sub.w	8(a0),d0
00010464 D041                       		add.w	d1,d0
00010466 6B00 0000                  		bmi.w	loc_FB92
0001046A 3601                       		move.w	d1,d3
0001046C D643                       		add.w	d3,d3
0001046E B043                       		cmp.w	d3,d0
00010470 6200 0000                  		bhi.w	loc_FB92
00010474 3A00                       		move.w	d0,d5
00010476 0828 0000 0001             		btst	#0,1(a0)
0001047C 6700                       		beq.s	loc_FA94
0001047E 4645                       		not.w	d5
00010480 DA43                       		add.w	d3,d5
00010482                            
00010482                            loc_FA94:
00010482 E24D                       		lsr.w	#1,d5
00010484 7600                       		moveq	#0,d3
00010486 1632 5000                  		move.b	(a2,d5.w),d3
0001048A 9612                       		sub.b	(a2),d3
0001048C 3A28 000C                  		move.w	$C(a0),d5
00010490 9A43                       		sub.w	d3,d5
00010492 1629 0016                  		move.b	$16(a1),d3
00010496 4883                       		ext.w	d3
00010498 D443                       		add.w	d3,d2
0001049A 3629 000C                  		move.w	$C(a1),d3
0001049E 9645                       		sub.w	d5,d3
000104A0 5843                       		addq.w	#4,d3
000104A2 D642                       		add.w	d2,d3
000104A4 6B00 0000                  		bmi.w	loc_FB92
000104A8 3802                       		move.w	d2,d4
000104AA D844                       		add.w	d4,d4
000104AC B644                       		cmp.w	d4,d3
000104AE 6400 0000                  		bcc.w	loc_FB92
000104B2 6000 0000                  		bra.w	loc_FB0E
000104B6                            ; ===========================================================================
000104B6                            
000104B6                            loc_FAC8:
000104B6 4A28 0001                  		tst.b	1(a0)
000104BA 6A00 0000                  		bpl.w	loc_FB92
000104BE                            
000104BE                            loc_FAD0:
000104BE 43F8 D000                  		lea	($FFFFD000).w,a1
000104C2 3029 0008                  		move.w	8(a1),d0
000104C6 9068 0008                  		sub.w	8(a0),d0
000104CA D041                       		add.w	d1,d0
000104CC 6B00 0000                  		bmi.w	loc_FB92
000104D0 3601                       		move.w	d1,d3
000104D2 D643                       		add.w	d3,d3
000104D4 B043                       		cmp.w	d3,d0
000104D6 6200 0000                  		bhi.w	loc_FB92
000104DA 1629 0016                  		move.b	$16(a1),d3
000104DE 4883                       		ext.w	d3
000104E0 D443                       		add.w	d3,d2
000104E2 3629 000C                  		move.w	$C(a1),d3
000104E6 9668 000C                  		sub.w	$C(a0),d3
000104EA 5843                       		addq.w	#4,d3
000104EC D642                       		add.w	d2,d3
000104EE 6B00 0000                  		bmi.w	loc_FB92
000104F2 3802                       		move.w	d2,d4
000104F4 D844                       		add.w	d4,d4
000104F6 B644                       		cmp.w	d4,d3
000104F8 6400 0000                  		bcc.w	loc_FB92
000104FC                            
000104FC                            loc_FB0E:
000104FC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010500 6B00 0000                  		bmi.w	loc_FB92
00010504 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001050A 6400 0000                  		bcc.w	loc_FB92
0001050E 4A78 FE08                  		tst.w	($FFFFFE08).w
00010512 6600 0000                  		bne.w	loc_FBAC
00010516 3A00                       		move.w	d0,d5
00010518 B240                       		cmp.w	d0,d1
0001051A 6400                       		bcc.s	loc_FB36
0001051C D241                       		add.w	d1,d1
0001051E 9041                       		sub.w	d1,d0
00010520 3A00                       		move.w	d0,d5
00010522 4445                       		neg.w	d5
00010524                            
00010524                            loc_FB36:
00010524 3203                       		move.w	d3,d1
00010526 B443                       		cmp.w	d3,d2
00010528 6400                       		bcc.s	loc_FB44
0001052A 5943                       		subq.w	#4,d3
0001052C 9644                       		sub.w	d4,d3
0001052E 3203                       		move.w	d3,d1
00010530 4441                       		neg.w	d1
00010532                            
00010532                            loc_FB44:
00010532 BA41                       		cmp.w	d1,d5
00010534 6200 0000                  		bhi.w	loc_FBB0
00010538 0C41 0004                  		cmpi.w	#4,d1
0001053C 6300                       		bls.s	loc_FB8C
0001053E 4A40                       		tst.w	d0
00010540 6700                       		beq.s	loc_FB70
00010542 6B00                       		bmi.s	loc_FB5E
00010544 4A69 0010                  		tst.w	$10(a1)
00010548 6B00                       		bmi.s	loc_FB70
0001054A 6000                       		bra.s	loc_FB64
0001054C                            ; ===========================================================================
0001054C                            
0001054C                            loc_FB5E:
0001054C 4A69 0010                  		tst.w	$10(a1)
00010550 6A00                       		bpl.s	loc_FB70
00010552                            
00010552                            loc_FB64:
00010552 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010558 337C 0000 0010             		move.w	#0,$10(a1)
0001055E                            
0001055E                            loc_FB70:
0001055E 9169 0008                  		sub.w	d0,8(a1)
00010562 0829 0001 0022             		btst	#1,$22(a1)
00010568 6600                       		bne.s	loc_FB8C
0001056A 08E9 0005 0022             		bset	#5,$22(a1)
00010570 08E8 0005 0022             		bset	#5,$22(a0)
00010576 7801                       		moveq	#1,d4
00010578 4E75                       		rts	
0001057A                            ; ===========================================================================
0001057A                            
0001057A                            loc_FB8C:
0001057A 6100                       		bsr.s	loc_FBA0
0001057C 7801                       		moveq	#1,d4
0001057E 4E75                       		rts	
00010580                            ; ===========================================================================
00010580                            
00010580                            loc_FB92:
00010580 0828 0005 0022             		btst	#5,$22(a0)
00010586 6700                       		beq.s	loc_FBAC
00010588 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001058E                            
0001058E                            loc_FBA0:
0001058E 08A8 0005 0022             		bclr	#5,$22(a0)
00010594 08A9 0005 0022             		bclr	#5,$22(a1)
0001059A                            
0001059A                            loc_FBAC:
0001059A 7800                       		moveq	#0,d4
0001059C 4E75                       		rts	
0001059E                            ; ===========================================================================
0001059E                            
0001059E                            loc_FBB0:
0001059E 4A43                       		tst.w	d3
000105A0 6B00                       		bmi.s	loc_FBBC
000105A2 0C43 0010                  		cmpi.w	#$10,d3
000105A6 6500                       		bcs.s	loc_FBEE
000105A8 60D6                       		bra.s	loc_FB92
000105AA                            ; ===========================================================================
000105AA                            
000105AA                            loc_FBBC:
000105AA 4A69 0012                  		tst.w	$12(a1)
000105AE 6700                       		beq.s	loc_FBD6
000105B0 6A00                       		bpl.s	loc_FBD2
000105B2 4A43                       		tst.w	d3
000105B4 6A00                       		bpl.s	loc_FBD2
000105B6 9769 000C                  		sub.w	d3,$C(a1)
000105BA 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000105C0                            
000105C0                            loc_FBD2:
000105C0 78FF                       		moveq	#-1,d4
000105C2 4E75                       		rts	
000105C4                            ; ===========================================================================
000105C4                            
000105C4                            loc_FBD6:
000105C4 0829 0001 0022             		btst	#1,$22(a1)
000105CA 66F4                       		bne.s	loc_FBD2
000105CC 2F08                       		move.l	a0,-(sp)
000105CE 2049                       		movea.l	a1,a0
000105D0 4EB9 0000 0000             		jsr	KillSonic
000105D6 205F                       		movea.l	(sp)+,a0
000105D8 78FF                       		moveq	#-1,d4
000105DA 4E75                       		rts	
000105DC                            ; ===========================================================================
000105DC                            
000105DC                            loc_FBEE:
000105DC 5943                       		subq.w	#4,d3
000105DE 7200                       		moveq	#0,d1
000105E0 1228 0019                  		move.b	$19(a0),d1
000105E4 3401                       		move.w	d1,d2
000105E6 D442                       		add.w	d2,d2
000105E8 D269 0008                  		add.w	8(a1),d1
000105EC 9268 0008                  		sub.w	8(a0),d1
000105F0 6B00                       		bmi.s	loc_FC28
000105F2 B242                       		cmp.w	d2,d1
000105F4 6400                       		bcc.s	loc_FC28
000105F6 4A69 0012                  		tst.w	$12(a1)
000105FA 6B00                       		bmi.s	loc_FC28
000105FC 9769 000C                  		sub.w	d3,$C(a1)
00010600 5369 000C                  		subq.w	#1,$C(a1)
00010604 6100                       		bsr.s	sub_FC2C
00010606 117C 0002 0025             		move.b	#2,$25(a0)
0001060C 08E8 0003 0022             		bset	#3,$22(a0)
00010612 78FF                       		moveq	#-1,d4
00010614 4E75                       		rts	
00010616                            ; ===========================================================================
00010616                            
00010616                            loc_FC28:
00010616 7800                       		moveq	#0,d4
00010618 4E75                       		rts	
0001061A                            ; End of function SolidObject
0001061A                            
0001061A                            
0001061A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001061A                            
0001061A                            
0001061A                            sub_FC2C:				; XREF: SolidObject
0001061A 0829 0003 0022             		btst	#3,$22(a1)
00010620 6700                       		beq.s	loc_FC4E
00010622 7000                       		moveq	#0,d0
00010624 1029 003D                  		move.b	$3D(a1),d0
00010628 ED48                       		lsl.w	#6,d0
0001062A 0680 00FF D000             		addi.l	#$FFD000,d0
00010630 2440                       		movea.l	d0,a2
00010632 08AA 0003 0022             		bclr	#3,$22(a2)
00010638 422A 0025                  		clr.b	$25(a2)
0001063C                            
0001063C                            loc_FC4E:
0001063C 3008                       		move.w	a0,d0
0001063E 0440 D000                  		subi.w	#-$3000,d0
00010642 EC48                       		lsr.w	#6,d0
00010644 0240 007F                  		andi.w	#$7F,d0
00010648 1340 003D                  		move.b	d0,$3D(a1)
0001064C 137C 0000 0026             		move.b	#0,$26(a1)
00010652 337C 0000 0012             		move.w	#0,$12(a1)
00010658 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001065E 0829 0001 0022             		btst	#1,$22(a1)
00010664 6700                       		beq.s	loc_FC84
00010666 2F08                       		move.l	a0,-(sp)
00010668 2049                       		movea.l	a1,a0
0001066A 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010670 205F                       		movea.l	(sp)+,a0
00010672                            
00010672                            loc_FC84:
00010672 08E9 0003 0022             		bset	#3,$22(a1)
00010678 08E8 0003 0022             		bset	#3,$22(a0)
0001067E 4E75                       		rts	
00010680                            ; End of function sub_FC2C
00010680                            
00010680                            ; ===========================================================================
00010680                            ; ---------------------------------------------------------------------------
00010680                            ; Object 51 - smashable	green block (MZ)
00010680                            ; ---------------------------------------------------------------------------
00010680                            
00010680                            Obj51:					; XREF: Obj_Index
00010680 7000                       		moveq	#0,d0
00010682 1028 0024                  		move.b	$24(a0),d0
00010686 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001068A 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001068E 6000 FA0E                  		bra.w	MarkObjGone
00010692                            ; ===========================================================================
00010692 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010694 0000                       		dc.w Obj51_Solid-Obj51_Index
00010696 0000                       		dc.w Obj51_Display-Obj51_Index
00010698                            ; ===========================================================================
00010698                            
00010698                            Obj51_Main:				; XREF: Obj51_Index
00010698 5428 0024                  		addq.b	#2,$24(a0)
0001069C 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000106A4 317C 42B8 0002             		move.w	#$42B8,2(a0)
000106AA 117C 0004 0001             		move.b	#4,1(a0)
000106B0 117C 0010 0019             		move.b	#$10,$19(a0)
000106B6 117C 0004 0018             		move.b	#4,$18(a0)
000106BC 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000106C2                            
000106C2                            Obj51_Solid:				; XREF: Obj51_Index
000106C2 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000106C8 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000106CE 323C 001B                  		move.w	#$1B,d1
000106D2 343C 0010                  		move.w	#$10,d2
000106D6 363C 0011                  		move.w	#$11,d3
000106DA 3828 0008                  		move.w	8(a0),d4
000106DE 6100 FCE6                  		bsr.w	SolidObject
000106E2 0828 0003 0022             		btst	#3,$22(a0)
000106E8 6600                       		bne.s	Obj51_Smash
000106EA                            
000106EA                            locret_FCFC:
000106EA 4E75                       		rts	
000106EC                            ; ===========================================================================
000106EC                            
000106EC                            Obj51_Smash:				; XREF: Obj51_Solid
000106EC 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000106F2 66F6                       		bne.s	locret_FCFC	; if not, branch
000106F4 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000106FA 08E9 0002 0022             		bset	#2,$22(a1)
00010700 137C 000E 0016             		move.b	#$E,$16(a1)
00010706 137C 0007 0017             		move.b	#7,$17(a1)
0001070C 137C 0002 001C             		move.b	#2,$1C(a1)
00010712 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010718 08E9 0001 0022             		bset	#1,$22(a1)
0001071E 08A9 0003 0022             		bclr	#3,$22(a1)
00010724 137C 0002 0024             		move.b	#2,$24(a1)
0001072A 08A8 0003 0022             		bclr	#3,$22(a0)
00010730 4228 0025                  		clr.b	$25(a0)
00010734 117C 0001 001A             		move.b	#1,$1A(a0)
0001073A 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010740 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010742 343C 0038                  		move.w	#$38,d2
00010746 6100 D456                  		bsr.w	SmashObject
0001074A 6100 DD30                  		bsr.w	SingleObjLoad
0001074E 6600                       		bne.s	Obj51_Display
00010750 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010754 3368 0008 0008             		move.w	8(a0),8(a1)
0001075A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010760 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010764 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010768 0C42 0006                  		cmpi.w	#6,d2
0001076C 6500                       		bcs.s	Obj51_Bonus
0001076E 7406                       		moveq	#6,d2
00010770                            
00010770                            Obj51_Bonus:
00010770 7000                       		moveq	#0,d0
00010772 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010776 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001077C 6500                       		bcs.s	loc_FD98	; if not, branch
0001077E 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010782 740A                       		moveq	#10,d2
00010784                            
00010784                            loc_FD98:
00010784 4EB9 0000 0000             		jsr	AddPoints
0001078A E24A                       		lsr.w	#1,d2
0001078C 1342 001A                  		move.b	d2,$1A(a1)
00010790                            
00010790                            Obj51_Display:				; XREF: Obj51_Index
00010790 6100 D83E                  		bsr.w	SpeedToPos
00010794 0668 0038 0012             		addi.w	#$38,$12(a0)
0001079A 6100 D85A                  		bsr.w	DisplaySprite
0001079E 4A28 0001                  		tst.b	1(a0)
000107A2 6A00 D88E                  		bpl.w	DeleteObject
000107A6 4E75                       		rts	
000107A8                            ; ===========================================================================
000107A8 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000107AC FF00 FF00                  		dc.w $FF00, $FF00
000107B0 0200 FE00                  		dc.w $200, $FE00
000107B4 0100 FF00                  		dc.w $100, $FF00
000107B8                            
000107B8 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000107C0                            ; ---------------------------------------------------------------------------
000107C0                            ; Sprite mappings - smashable green block (MZ)
000107C0                            ; ---------------------------------------------------------------------------
000107C0                            Map_obj51:
000107C0                            	include "_maps\obj51.asm"
000107C0                            ; ---------------------------------------------------------------------------
000107C0                            ; Sprite mappings - smashable green block (MZ)
000107C0                            ; ---------------------------------------------------------------------------
000107C0 0000                       		dc.w byte_FDD8-Map_obj51
000107C2 0000                       		dc.w byte_FDE3-Map_obj51
000107C4 02                         byte_FDD8:	dc.b 2
000107C5 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000107CA 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000107CF 04                         byte_FDE3:	dc.b 4
000107D0 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000107D5 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000107DA F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000107DF 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000107E4                            		even
000107E4                            		even
000107E4                            
000107E4                            ; ===========================================================================
000107E4                            ; ---------------------------------------------------------------------------
000107E4                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000107E4                            ; ---------------------------------------------------------------------------
000107E4                            
000107E4                            Obj52:					; XREF: Obj_Index
000107E4 7000                       		moveq	#0,d0
000107E6 1028 0024                  		move.b	$24(a0),d0
000107EA 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000107EE 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000107F2                            ; ===========================================================================
000107F2 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000107F4 0000                       		dc.w Obj52_Platform-Obj52_Index
000107F6 0000                       		dc.w Obj52_StandOn-Obj52_Index
000107F8                            
000107F8 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000107FA 2001                       		dc.b $20, 1
000107FC 2002                       		dc.b $20, 2
000107FE 4003                       		dc.b $40, 3
00010800 3004                       		dc.b $30, 4
00010802                            ; ===========================================================================
00010802                            
00010802                            Obj52_Main:				; XREF: Obj52_Index
00010802 5428 0024                  		addq.b	#2,$24(a0)
00010806 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001080E 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010814 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001081A 6600                       		bne.s	loc_FE44
0001081C 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010824 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001082A 117C 0007 0016             		move.b	#7,$16(a0)
00010830                            
00010830                            loc_FE44:
00010830 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010836 6600                       		bne.s	loc_FE60
00010838 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001083E 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010844 6700                       		beq.s	loc_FE60	; if yes, branch
00010846 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001084C                            
0001084C                            loc_FE60:
0001084C 117C 0004 0001             		move.b	#4,1(a0)
00010852 7000                       		moveq	#0,d0
00010854 1028 0028                  		move.b	$28(a0),d0
00010858 E648                       		lsr.w	#3,d0
0001085A 0240 001E                  		andi.w	#$1E,d0
0001085E 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010862 115A 0019                  		move.b	(a2)+,$19(a0)
00010866 115A 001A                  		move.b	(a2)+,$1A(a0)
0001086A 117C 0004 0018             		move.b	#4,$18(a0)
00010870 3168 0008 0030             		move.w	8(a0),$30(a0)
00010876 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001087C 0228 000F 0028             		andi.b	#$F,$28(a0)
00010882                            
00010882                            Obj52_Platform:				; XREF: Obj52_Index
00010882 6100 0000                  		bsr.w	Obj52_Move
00010886 7200                       		moveq	#0,d1
00010888 1228 0019                  		move.b	$19(a0),d1
0001088C 4EB9 0000 7C08             		jsr	(PlatformObject).l
00010892 6000                       		bra.s	Obj52_ChkDel
00010894                            ; ===========================================================================
00010894                            
00010894                            Obj52_StandOn:				; XREF: Obj52_Index
00010894 7200                       		moveq	#0,d1
00010896 1228 0019                  		move.b	$19(a0),d1
0001089A 4EB9 0000 7D7C             		jsr	(ExitPlatform).l
000108A0 3F28 0008                  		move.w	8(a0),-(sp)
000108A4 6100 0000                  		bsr.w	Obj52_Move
000108A8 341F                       		move.w	(sp)+,d2
000108AA 4EB9 0000 82E6             		jsr	(MvSonicOnPtfm2).l
000108B0                            
000108B0                            Obj52_ChkDel:				; XREF: Obj52_Platform
000108B0 3028 0030                  		move.w	$30(a0),d0
000108B4 0240 FF80                  		andi.w	#$FF80,d0
000108B8 3238 F700                  		move.w	($FFFFF700).w,d1
000108BC 0441 0080                  		subi.w	#$80,d1
000108C0 0241 FF80                  		andi.w	#$FF80,d1
000108C4 9041                       		sub.w	d1,d0
000108C6 0C40 0280                  		cmpi.w	#$280,d0
000108CA 6200 D766                  		bhi.w	DeleteObject
000108CE 6000 D726                  		bra.w	DisplaySprite
000108D2                            ; ===========================================================================
000108D2                            
000108D2                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000108D2 7000                       		moveq	#0,d0
000108D4 1028 0028                  		move.b	$28(a0),d0
000108D8 0240 000F                  		andi.w	#$F,d0
000108DC D040                       		add.w	d0,d0
000108DE 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000108E2 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000108E6                            ; ===========================================================================
000108E6 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000108EA 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000108EE 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000108F2 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000108F6 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000108FA 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000108FC                            ; ===========================================================================
000108FC                            
000108FC                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000108FC 4E75                       		rts	
000108FE                            ; ===========================================================================
000108FE                            
000108FE                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000108FE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010902 323C 0060                  		move.w	#$60,d1
00010906 0828 0000 0022             		btst	#0,$22(a0)
0001090C 6700                       		beq.s	loc_FF26
0001090E 4440                       		neg.w	d0
00010910 D041                       		add.w	d1,d0
00010912                            
00010912                            loc_FF26:
00010912 3228 0030                  		move.w	$30(a0),d1
00010916 9240                       		sub.w	d0,d1
00010918 3141 0008                  		move.w	d1,8(a0)
0001091C 4E75                       		rts	
0001091E                            ; ===========================================================================
0001091E                            
0001091E                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001091E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010924 6600                       		bne.s	Obj52_02_Wait
00010926 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001092A                            
0001092A                            Obj52_02_Wait:
0001092A 4E75                       		rts	
0001092C                            ; ===========================================================================
0001092C                            
0001092C                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001092C 7600                       		moveq	#0,d3
0001092E 1628 0019                  		move.b	$19(a0),d3
00010932 6100 0000                  		bsr.w	ObjHitWallRight
00010936 4A41                       		tst.w	d1		; has the platform hit a wall?
00010938 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001093A 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001093E 3168 0008 0030             		move.w	8(a0),$30(a0)
00010944 4E75                       		rts	
00010946                            ; ===========================================================================
00010946                            
00010946                            Obj52_03_End:
00010946 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0001094A 4E75                       		rts	
0001094C                            ; ===========================================================================
0001094C                            
0001094C                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001094C 7600                       		moveq	#0,d3
0001094E 1628 0019                  		move.b	$19(a0),d3
00010952 6100 0000                  		bsr.w	ObjHitWallRight
00010956 4A41                       		tst.w	d1		; has the platform hit a wall?
00010958 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001095A 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001095E 3168 0008 0030             		move.w	8(a0),$30(a0)
00010964 4E75                       		rts	
00010966                            ; ===========================================================================
00010966                            
00010966                            Obj52_05_End:
00010966 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0001096A 4E75                       		rts	
0001096C                            ; ===========================================================================
0001096C                            
0001096C                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001096C 6100 D662                  		bsr.w	SpeedToPos
00010970 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010976 6100 0000                  		bsr.w	ObjHitFloor
0001097A 4A41                       		tst.w	d1		; has platform hit the floor?
0001097C 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010980 D368 000C                  		add.w	d1,$C(a0)
00010984 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010988 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001098C                            
0001098C                            locret_FFA0:
0001098C 4E75                       		rts	
0001098E                            ; ===========================================================================
0001098E                            
0001098E                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001098E 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010992 6700                       		beq.s	Obj52_07_ChkDel
00010994 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010998                            
00010998                            Obj52_07_ChkDel:
00010998 588F                       		addq.l	#4,sp
0001099A 3028 0030                  		move.w	$30(a0),d0
0001099E 0240 FF80                  		andi.w	#$FF80,d0
000109A2 3238 F700                  		move.w	($FFFFF700).w,d1
000109A6 0441 0080                  		subi.w	#$80,d1
000109AA 0241 FF80                  		andi.w	#$FF80,d1
000109AE 9041                       		sub.w	d1,d0
000109B0 0C40 0280                  		cmpi.w	#$280,d0
000109B4 6200 D67C                  		bhi.w	DeleteObject
000109B8 4E75                       		rts	
000109BA                            ; ===========================================================================
000109BA                            
000109BA                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000109BA 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109BE 323C 0080                  		move.w	#$80,d1
000109C2 0828 0000 0022             		btst	#0,$22(a0)
000109C8 6700                       		beq.s	loc_FFE2
000109CA 4440                       		neg.w	d0
000109CC D041                       		add.w	d1,d0
000109CE                            
000109CE                            loc_FFE2:
000109CE 3228 0032                  		move.w	$32(a0),d1
000109D2 9240                       		sub.w	d0,d1
000109D4 3141 000C                  		move.w	d1,$C(a0)
000109D8 4E75                       		rts	
000109DA                            ; ===========================================================================
000109DA                            
000109DA                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000109DA 7600                       		moveq	#0,d3
000109DC 1628 0019                  		move.b	$19(a0),d3
000109E0 D643                       		add.w	d3,d3
000109E2 7208                       		moveq	#8,d1
000109E4 0828 0000 0022             		btst	#0,$22(a0)
000109EA 6700                       		beq.s	loc_10004
000109EC 4441                       		neg.w	d1
000109EE 4443                       		neg.w	d3
000109F0                            
000109F0                            loc_10004:
000109F0 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000109F4 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000109F6 3028 0008                  		move.w	8(a0),d0
000109FA 9068 0030                  		sub.w	$30(a0),d0
000109FE B043                       		cmp.w	d3,d0
00010A00 6700                       		beq.s	Obj52_0A_Wait
00010A02 D368 0008                  		add.w	d1,8(a0)	; move platform
00010A06 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010A0C 4E75                       		rts	
00010A0E                            ; ===========================================================================
00010A0E                            
00010A0E                            Obj52_0A_Wait:
00010A0E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010A12 6600                       		bne.s	locret_1002E	; if time remains, branch
00010A14 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010A1A                            
00010A1A                            locret_1002E:
00010A1A 4E75                       		rts	
00010A1C                            ; ===========================================================================
00010A1C                            
00010A1C                            Obj52_0A_Back:
00010A1C 3028 0008                  		move.w	8(a0),d0
00010A20 9068 0030                  		sub.w	$30(a0),d0
00010A24 6700                       		beq.s	Obj52_0A_Reset
00010A26 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010A2A 4E75                       		rts	
00010A2C                            ; ===========================================================================
00010A2C                            
00010A2C                            Obj52_0A_Reset:
00010A2C 4268 0036                  		clr.w	$36(a0)
00010A30 5328 0028                  		subq.b	#1,$28(a0)
00010A34 4E75                       		rts	
00010A36                            ; ===========================================================================
00010A36                            ; ---------------------------------------------------------------------------
00010A36                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A36                            ; ---------------------------------------------------------------------------
00010A36                            Map_obj52:
00010A36                            	include "_maps\obj52mz.asm"
00010A36                            ; ---------------------------------------------------------------------------
00010A36                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A36                            ; ---------------------------------------------------------------------------
00010A36 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010A3A 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010A3E 0000                       		dc.w byte_1008F-Map_obj52
00010A40 01                         byte_10054:	dc.b 1
00010A41 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010A46 02                         byte_1005A:	dc.b 2
00010A47 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010A4C F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010A51 04                         byte_10065:	dc.b 4
00010A52 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010A57 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010A5C F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010A61 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010A66 04                         byte_1007A:	dc.b 4
00010A67 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010A6C F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010A71 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010A76 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010A7B 03                         byte_1008F:	dc.b 3
00010A7C F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010A81 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010A86 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010A8C 00                         		even
00010A8C 00                         		even
00010A8C                            
00010A8C                            ; ---------------------------------------------------------------------------
00010A8C                            ; Sprite mappings - moving block (LZ)
00010A8C                            ; ---------------------------------------------------------------------------
00010A8C                            Map_obj52a:
00010A8C                            	include "_maps\obj52lz.asm"
00010A8C                            ; ---------------------------------------------------------------------------
00010A8C                            ; Sprite mappings - moving block (LZ)
00010A8C                            ; ---------------------------------------------------------------------------
00010A8C 0000                       		dc.w byte_100A2-Map_obj52a
00010A8E 01                         byte_100A2:	dc.b 1
00010A8F F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010A94                            		even
00010A94                            		even
00010A94                            
00010A94                            ; ===========================================================================
00010A94                            ; ---------------------------------------------------------------------------
00010A94                            ; Object 55 - Basaran enemy (MZ)
00010A94                            ; ---------------------------------------------------------------------------
00010A94                            
00010A94                            Obj55:					; XREF: Obj_Index
00010A94 7000                       		moveq	#0,d0
00010A96 1028 0024                  		move.b	$24(a0),d0
00010A9A 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010A9E 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010AA2                            ; ===========================================================================
00010AA2 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010AA4 0000                       		dc.w Obj55_Action-Obj55_Index
00010AA6                            ; ===========================================================================
00010AA6                            
00010AA6                            Obj55_Main:				; XREF: Obj55_Index
00010AA6 5428 0024                  		addq.b	#2,$24(a0)
00010AAA 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010AB2 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010AB8 117C 0004 0001             		move.b	#4,1(a0)
00010ABE 117C 000C 0016             		move.b	#$C,$16(a0)
00010AC4 117C 0002 0018             		move.b	#2,$18(a0)
00010ACA 117C 000B 0020             		move.b	#$B,$20(a0)
00010AD0 117C 0010 0019             		move.b	#$10,$19(a0)
00010AD6                            
00010AD6                            Obj55_Action:				; XREF: Obj55_Index
00010AD6 7000                       		moveq	#0,d0
00010AD8 1028 0025                  		move.b	$25(a0),d0
00010ADC 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010AE0 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010AE4 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010AEA 6100 A560                  		bsr.w	AnimateSprite
00010AEE 6000 F5AE                  		bra.w	MarkObjGone
00010AF2                            ; ===========================================================================
00010AF2 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010AF4 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010AF6 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010AF8 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010AFA                            ; ===========================================================================
00010AFA                            
00010AFA                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010AFA 343C 0080                  		move.w	#$80,d2
00010AFE 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B02 6400                       		bcc.s	Obj55_NoDrop
00010B04 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010B08 3140 0036                  		move.w	d0,$36(a0)
00010B0C 9068 000C                  		sub.w	$C(a0),d0
00010B10 6500                       		bcs.s	Obj55_NoDrop
00010B12 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010B16 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010B18 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010B1C 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010B1E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B22 D007                       		add.b	d7,d0
00010B24 0200 0007                  		andi.b	#7,d0
00010B28 6600                       		bne.s	Obj55_NoDrop
00010B2A 117C 0001 001C             		move.b	#1,$1C(a0)
00010B30 5428 0025                  		addq.b	#2,$25(a0)
00010B34                            
00010B34                            Obj55_NoDrop:
00010B34 4E75                       		rts	
00010B36                            ; ===========================================================================
00010B36                            
00010B36                            Obj55_DropFly:				; XREF: Obj55_Index2
00010B36 6100 D498                  		bsr.w	SpeedToPos
00010B3A 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010B40 343C 0080                  		move.w	#$80,d2
00010B44 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B48 3028 0036                  		move.w	$36(a0),d0
00010B4C 9068 000C                  		sub.w	$C(a0),d0
00010B50 6500                       		bcs.s	Obj55_ChkDel
00010B52 0C40 0010                  		cmpi.w	#$10,d0
00010B56 6400                       		bcc.s	locret_10180
00010B58 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010B5C 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010B62 117C 0002 001C             		move.b	#2,$1C(a0)
00010B68 5428 0025                  		addq.b	#2,$25(a0)
00010B6C                            
00010B6C                            locret_10180:
00010B6C 4E75                       		rts	
00010B6E                            ; ===========================================================================
00010B6E                            
00010B6E                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010B6E 4A28 0001                  		tst.b	1(a0)
00010B72 6A00 D4BE                  		bpl.w	DeleteObject
00010B76 4E75                       		rts	
00010B78                            ; ===========================================================================
00010B78                            
00010B78                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010B78 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B7C 0200 000F                  		andi.b	#$F,d0
00010B80 6600                       		bne.s	loc_101A0
00010B82 303C 00C0                  		move.w	#$C0,d0
00010B86 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play flapping sound
00010B8C                            
00010B8C                            loc_101A0:
00010B8C 6100 D442                  		bsr.w	SpeedToPos
00010B90 3038 D008                  		move.w	($FFFFD008).w,d0
00010B94 9068 0008                  		sub.w	8(a0),d0
00010B98 6400                       		bcc.s	loc_101B0
00010B9A 4440                       		neg.w	d0
00010B9C                            
00010B9C                            loc_101B0:
00010B9C 0C40 0080                  		cmpi.w	#$80,d0
00010BA0 6500                       		bcs.s	locret_101C6
00010BA2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010BA6 D007                       		add.b	d7,d0
00010BA8 0200 0007                  		andi.b	#7,d0
00010BAC 6600                       		bne.s	locret_101C6
00010BAE 5428 0025                  		addq.b	#2,$25(a0)
00010BB2                            
00010BB2                            locret_101C6:
00010BB2 4E75                       		rts	
00010BB4                            ; ===========================================================================
00010BB4                            
00010BB4                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010BB4 6100 D41A                  		bsr.w	SpeedToPos
00010BB8 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010BBE 6100 0000                  		bsr.w	ObjHitCeiling
00010BC2 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010BC4 6A00                       		bpl.s	locret_101F4	; if not, branch
00010BC6 9368 000C                  		sub.w	d1,$C(a0)
00010BCA 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010BD0 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010BD4 4268 0012                  		clr.w	$12(a0)
00010BD8 4228 001C                  		clr.b	$1C(a0)
00010BDC 4228 0025                  		clr.b	$25(a0)
00010BE0                            
00010BE0                            locret_101F4:
00010BE0 4E75                       		rts	
00010BE2                            ; ===========================================================================
00010BE2                            
00010BE2                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010BE2 323C 0100                  		move.w	#$100,d1
00010BE6 08E8 0000 0022             		bset	#0,$22(a0)
00010BEC 3038 D008                  		move.w	($FFFFD008).w,d0
00010BF0 9068 0008                  		sub.w	8(a0),d0
00010BF4 6400                       		bcc.s	loc_10214
00010BF6 4440                       		neg.w	d0
00010BF8 4441                       		neg.w	d1
00010BFA 08A8 0000 0022             		bclr	#0,$22(a0)
00010C00                            
00010C00                            loc_10214:
00010C00 B042                       		cmp.w	d2,d0
00010C02 4E75                       		rts	
00010C04                            ; ===========================================================================
00010C04 6100 D3CA                  		bsr.w	SpeedToPos
00010C08 6100 D3EC                  		bsr.w	DisplaySprite
00010C0C 4A28 0001                  		tst.b	1(a0)
00010C10 6A00 D420                  		bpl.w	DeleteObject
00010C14 4E75                       		rts	
00010C16                            ; ===========================================================================
00010C16                            Ani_obj55:
00010C16                            	include "_anim\obj55.asm"
00010C16                            ; ---------------------------------------------------------------------------
00010C16                            ; Animation script - Basaran enemy
00010C16                            ; ---------------------------------------------------------------------------
00010C16 0000                       		dc.w byte_10230-Ani_obj55
00010C18 0000                       		dc.w byte_10234-Ani_obj55
00010C1A 0000                       		dc.w byte_10238-Ani_obj55
00010C1C 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010C20 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010C24 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010C2A                            		even
00010C2A                            		even
00010C2A                            
00010C2A                            ; ---------------------------------------------------------------------------
00010C2A                            ; Sprite mappings - Basaran enemy (MZ)
00010C2A                            ; ---------------------------------------------------------------------------
00010C2A                            Map_obj55:
00010C2A                            	include "_maps\obj55.asm"
00010C2A                            ; ---------------------------------------------------------------------------
00010C2A                            ; Sprite mappings - Basaran enemy (MZ)
00010C2A                            ; ---------------------------------------------------------------------------
00010C2A 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010C2E 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010C32 01                         byte_10246:	dc.b 1
00010C33 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010C38 03                         byte_1024C:	dc.b 3
00010C39 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010C3E 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010C43 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010C48 04                         byte_1025C:	dc.b 4
00010C49 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010C4E 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010C53 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010C58 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010C5D 04                         byte_10271:	dc.b 4
00010C5E F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010C63 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010C68 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010C6D FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010C72                            		even
00010C72                            		even
00010C72                            
00010C72                            ; ===========================================================================
00010C72                            ; ---------------------------------------------------------------------------
00010C72                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010C72                            ; ---------------------------------------------------------------------------
00010C72                            
00010C72                            Obj56:					; XREF: Obj_Index
00010C72 7000                       		moveq	#0,d0
00010C74 1028 0024                  		move.b	$24(a0),d0
00010C78 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010C7C 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010C80                            ; ===========================================================================
00010C80 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010C82 0000                       		dc.w Obj56_Action-Obj56_Index
00010C84                            
00010C84 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010C86 2020                       		dc.b  $20, $20
00010C88 1020                       		dc.b  $10, $20
00010C8A 201A                       		dc.b  $20, $1A
00010C8C 1027                       		dc.b  $10, $27
00010C8E 1010                       		dc.b  $10, $10
00010C90 0820                       		dc.b	8, $20
00010C92 4010                       		dc.b  $40, $10
00010C94                            ; ===========================================================================
00010C94                            
00010C94                            Obj56_Main:				; XREF: Obj56_Index
00010C94 5428 0024                  		addq.b	#2,$24(a0)
00010C98 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010CA0 317C 4000 0002             		move.w	#$4000,2(a0)
00010CA6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010CAC 6600                       		bne.s	loc_102C8
00010CAE 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010CB4                            
00010CB4                            loc_102C8:
00010CB4 117C 0004 0001             		move.b	#4,1(a0)
00010CBA 117C 0003 0018             		move.b	#3,$18(a0)
00010CC0 7000                       		moveq	#0,d0
00010CC2 1028 0028                  		move.b	$28(a0),d0
00010CC6 E648                       		lsr.w	#3,d0
00010CC8 0240 000E                  		andi.w	#$E,d0
00010CCC 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010CD0 115A 0019                  		move.b	(a2)+,$19(a0)
00010CD4 1152 0016                  		move.b	(a2),$16(a0)
00010CD8 E248                       		lsr.w	#1,d0
00010CDA 1140 001A                  		move.b	d0,$1A(a0)
00010CDE 3168 0008 0034             		move.w	8(a0),$34(a0)
00010CE4 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010CEA 7000                       		moveq	#0,d0
00010CEC 1012                       		move.b	(a2),d0
00010CEE D040                       		add.w	d0,d0
00010CF0 3140 003A                  		move.w	d0,$3A(a0)
00010CF4 7000                       		moveq	#0,d0
00010CF6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010CFC 6700                       		beq.s	loc_10332
00010CFE 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010D02 0240 000F                  		andi.w	#$F,d0
00010D06 5140                       		subq.w	#8,d0
00010D08 6500                       		bcs.s	loc_10332
00010D0A E548                       		lsl.w	#2,d0
00010D0C 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010D10 45F2 0000                  		lea	(a2,d0.w),a2
00010D14 4A52                       		tst.w	(a2)
00010D16 6A00                       		bpl.s	loc_10332
00010D18 0868 0000 0022             		bchg	#0,$22(a0)
00010D1E                            
00010D1E                            loc_10332:
00010D1E 1028 0028                  		move.b	$28(a0),d0
00010D22 6A00                       		bpl.s	Obj56_Action
00010D24 0200 000F                  		andi.b	#$F,d0
00010D28 1140 003C                  		move.b	d0,$3C(a0)
00010D2C 117C 0005 0028             		move.b	#5,$28(a0)
00010D32 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010D38 6600                       		bne.s	Obj56_ChkGone
00010D3A 117C 000C 0028             		move.b	#$C,$28(a0)
00010D40 317C 0080 003A             		move.w	#$80,$3A(a0)
00010D46                            
00010D46                            Obj56_ChkGone:
00010D46 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D4A 7000                       		moveq	#0,d0
00010D4C 1028 0023                  		move.b	$23(a0),d0
00010D50 6700                       		beq.s	Obj56_Action
00010D52 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010D58 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010D5E 6700                       		beq.s	Obj56_Action
00010D60 5228 0028                  		addq.b	#1,$28(a0)
00010D64 4268 003A                  		clr.w	$3A(a0)
00010D68                            
00010D68                            Obj56_Action:				; XREF: Obj56_Index
00010D68 3F28 0008                  		move.w	8(a0),-(sp)
00010D6C 7000                       		moveq	#0,d0
00010D6E 1028 0028                  		move.b	$28(a0),d0	; get object type
00010D72 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010D76 D040                       		add.w	d0,d0
00010D78 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010D7C 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010D80 381F                       		move.w	(sp)+,d4
00010D82 4A28 0001                  		tst.b	1(a0)
00010D86 6A00                       		bpl.s	Obj56_ChkDel
00010D88 7200                       		moveq	#0,d1
00010D8A 1228 0019                  		move.b	$19(a0),d1
00010D8E 0641 000B                  		addi.w	#$B,d1
00010D92 7400                       		moveq	#0,d2
00010D94 1428 0016                  		move.b	$16(a0),d2
00010D98 3602                       		move.w	d2,d3
00010D9A 5243                       		addq.w	#1,d3
00010D9C 6100 F628                  		bsr.w	SolidObject
00010DA0                            
00010DA0                            Obj56_ChkDel:
00010DA0 3028 0034                  		move.w	$34(a0),d0
00010DA4 0240 FF80                  		andi.w	#$FF80,d0
00010DA8 3238 F700                  		move.w	($FFFFF700).w,d1
00010DAC 0441 0080                  		subi.w	#$80,d1
00010DB0 0241 FF80                  		andi.w	#$FF80,d1
00010DB4 9041                       		sub.w	d1,d0
00010DB6 0C40 0280                  		cmpi.w	#$280,d0
00010DBA 6200 D276                  		bhi.w	DeleteObject
00010DBE 6000 D236                  		bra.w	DisplaySprite
00010DC2                            ; ===========================================================================
00010DC2 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010DC6 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010DCA 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010DCE 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010DD2 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010DD6 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010DDA 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010DDE                            ; ===========================================================================
00010DDE                            
00010DDE                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010DDE 4E75                       		rts	
00010DE0                            ; ===========================================================================
00010DE0                            
00010DE0                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010DE0 323C 0040                  		move.w	#$40,d1
00010DE4 7000                       		moveq	#0,d0
00010DE6 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010DEA 6000                       		bra.s	Obj56_Move_LR
00010DEC                            ; ===========================================================================
00010DEC                            
00010DEC                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010DEC 323C 0080                  		move.w	#$80,d1
00010DF0 7000                       		moveq	#0,d0
00010DF2 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010DF6                            
00010DF6                            Obj56_Move_LR:
00010DF6 0828 0000 0022             		btst	#0,$22(a0)
00010DFC 6700                       		beq.s	loc_10416
00010DFE 4440                       		neg.w	d0
00010E00 D041                       		add.w	d1,d0
00010E02                            
00010E02                            loc_10416:
00010E02 3228 0034                  		move.w	$34(a0),d1
00010E06 9240                       		sub.w	d0,d1
00010E08 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010E0C 4E75                       		rts	
00010E0E                            ; ===========================================================================
00010E0E                            
00010E0E                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010E0E 323C 0040                  		move.w	#$40,d1
00010E12 7000                       		moveq	#0,d0
00010E14 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010E18 6000                       		bra.s	Obj56_Move_UD
00010E1A                            ; ===========================================================================
00010E1A                            
00010E1A                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010E1A 323C 0080                  		move.w	#$80,d1
00010E1E 7000                       		moveq	#0,d0
00010E20 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E24                            
00010E24                            Obj56_Move_UD:
00010E24 0828 0000 0022             		btst	#0,$22(a0)
00010E2A 6700                       		beq.s	loc_10444
00010E2C 4440                       		neg.w	d0
00010E2E D041                       		add.w	d1,d0
00010E30                            
00010E30                            loc_10444:
00010E30 3228 0030                  		move.w	$30(a0),d1
00010E34 9240                       		sub.w	d0,d1
00010E36 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010E3A 4E75                       		rts	
00010E3C                            ; ===========================================================================
00010E3C                            
00010E3C                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010E3C 4A28 0038                  		tst.b	$38(a0)
00010E40 6600                       		bne.s	loc_104A4
00010E42 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010E48 6600                       		bne.s	loc_1047A	; if not, branch
00010E4A 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010E50 6600                       		bne.s	loc_1047A
00010E52 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010E56 3038 D008                  		move.w	($FFFFD008).w,d0
00010E5A B068 0008                  		cmp.w	8(a0),d0
00010E5E 6400                       		bcc.s	loc_1047A
00010E60 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010E66                            
00010E66                            loc_1047A:
00010E66 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010E6A 7000                       		moveq	#0,d0
00010E6C 1028 003C                  		move.b	$3C(a0),d0
00010E70 0832 0000 0000             		btst	#0,(a2,d0.w)
00010E76 6700                       		beq.s	loc_104AE
00010E78 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010E7E 6600                       		bne.s	loc_1049E	; if not, branch
00010E80 0C00 0003                  		cmpi.b	#3,d0
00010E84 6600                       		bne.s	loc_1049E
00010E86 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010E8A                            
00010E8A                            loc_1049E:
00010E8A 117C 0001 0038             		move.b	#1,$38(a0)
00010E90                            
00010E90                            loc_104A4:
00010E90 4A68 003A                  		tst.w	$3A(a0)
00010E94 6700                       		beq.s	loc_104C8
00010E96 5568 003A                  		subq.w	#2,$3A(a0)
00010E9A                            
00010E9A                            loc_104AE:
00010E9A 3028 003A                  		move.w	$3A(a0),d0
00010E9E 0828 0000 0022             		btst	#0,$22(a0)
00010EA4 6700                       		beq.s	loc_104BC
00010EA6 4440                       		neg.w	d0
00010EA8                            
00010EA8                            loc_104BC:
00010EA8 3228 0030                  		move.w	$30(a0),d1
00010EAC D240                       		add.w	d0,d1
00010EAE 3141 000C                  		move.w	d1,$C(a0)
00010EB2 4E75                       		rts	
00010EB4                            ; ===========================================================================
00010EB4                            
00010EB4                            loc_104C8:
00010EB4 5228 0028                  		addq.b	#1,$28(a0)
00010EB8 4228 0038                  		clr.b	$38(a0)
00010EBC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010EC0 7000                       		moveq	#0,d0
00010EC2 1028 0023                  		move.b	$23(a0),d0
00010EC6 67D2                       		beq.s	loc_104AE
00010EC8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010ECE 60CA                       		bra.s	loc_104AE
00010ED0                            ; ===========================================================================
00010ED0                            
00010ED0                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010ED0 4A28 0038                  		tst.b	$38(a0)
00010ED4 6600                       		bne.s	loc_10500
00010ED6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010EDA 7000                       		moveq	#0,d0
00010EDC 1028 003C                  		move.b	$3C(a0),d0
00010EE0 4A32 0000                  		tst.b	(a2,d0.w)
00010EE4 6A00                       		bpl.s	loc_10512
00010EE6 117C 0001 0038             		move.b	#1,$38(a0)
00010EEC                            
00010EEC                            loc_10500:
00010EEC 7000                       		moveq	#0,d0
00010EEE 1028 0016                  		move.b	$16(a0),d0
00010EF2 D040                       		add.w	d0,d0
00010EF4 B068 003A                  		cmp.w	$3A(a0),d0
00010EF8 6700                       		beq.s	loc_1052C
00010EFA 5468 003A                  		addq.w	#2,$3A(a0)
00010EFE                            
00010EFE                            loc_10512:
00010EFE 3028 003A                  		move.w	$3A(a0),d0
00010F02 0828 0000 0022             		btst	#0,$22(a0)
00010F08 6700                       		beq.s	loc_10520
00010F0A 4440                       		neg.w	d0
00010F0C                            
00010F0C                            loc_10520:
00010F0C 3228 0030                  		move.w	$30(a0),d1
00010F10 D240                       		add.w	d0,d1
00010F12 3141 000C                  		move.w	d1,$C(a0)
00010F16 4E75                       		rts	
00010F18                            ; ===========================================================================
00010F18                            
00010F18                            loc_1052C:
00010F18 5328 0028                  		subq.b	#1,$28(a0)
00010F1C 4228 0038                  		clr.b	$38(a0)
00010F20 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F24 7000                       		moveq	#0,d0
00010F26 1028 0023                  		move.b	$23(a0),d0
00010F2A 67D2                       		beq.s	loc_10512
00010F2C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010F32 60CA                       		bra.s	loc_10512
00010F34                            ; ===========================================================================
00010F34                            
00010F34                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010F34 4A28 0038                  		tst.b	$38(a0)
00010F38 6600                       		bne.s	loc_1055E
00010F3A 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010F3E 6700                       		beq.s	locret_10578
00010F40 117C 0001 0038             		move.b	#1,$38(a0)
00010F46 4268 003A                  		clr.w	$3A(a0)
00010F4A                            
00010F4A                            loc_1055E:
00010F4A 5268 0008                  		addq.w	#1,8(a0)
00010F4E 3168 0008 0034             		move.w	8(a0),$34(a0)
00010F54 5268 003A                  		addq.w	#1,$3A(a0)
00010F58 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010F5E 6600                       		bne.s	locret_10578
00010F60 4228 0028                  		clr.b	$28(a0)
00010F64                            
00010F64                            locret_10578:
00010F64 4E75                       		rts	
00010F66                            ; ===========================================================================
00010F66                            
00010F66                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010F66 4A28 0038                  		tst.b	$38(a0)
00010F6A 6600                       		bne.s	loc_10598
00010F6C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010F70 7000                       		moveq	#0,d0
00010F72 1028 003C                  		move.b	$3C(a0),d0
00010F76 0832 0000 0000             		btst	#0,(a2,d0.w)
00010F7C 6700                       		beq.s	loc_105A2
00010F7E 117C 0001 0038             		move.b	#1,$38(a0)
00010F84                            
00010F84                            loc_10598:
00010F84 4A68 003A                  		tst.w	$3A(a0)
00010F88 6700                       		beq.s	loc_105C0
00010F8A 5568 003A                  		subq.w	#2,$3A(a0)
00010F8E                            
00010F8E                            loc_105A2:
00010F8E 3028 003A                  		move.w	$3A(a0),d0
00010F92 0828 0000 0022             		btst	#0,$22(a0)
00010F98 6700                       		beq.s	loc_105B4
00010F9A 4440                       		neg.w	d0
00010F9C 0640 0080                  		addi.w	#$80,d0
00010FA0                            
00010FA0                            loc_105B4:
00010FA0 3228 0034                  		move.w	$34(a0),d1
00010FA4 D240                       		add.w	d0,d1
00010FA6 3141 0008                  		move.w	d1,8(a0)
00010FAA 4E75                       		rts	
00010FAC                            ; ===========================================================================
00010FAC                            
00010FAC                            loc_105C0:
00010FAC 5228 0028                  		addq.b	#1,$28(a0)
00010FB0 4228 0038                  		clr.b	$38(a0)
00010FB4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010FB8 7000                       		moveq	#0,d0
00010FBA 1028 0023                  		move.b	$23(a0),d0
00010FBE 67CE                       		beq.s	loc_105A2
00010FC0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010FC6 60C6                       		bra.s	loc_105A2
00010FC8                            ; ===========================================================================
00010FC8                            
00010FC8                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010FC8 4A28 0038                  		tst.b	$38(a0)
00010FCC 6600                       		bne.s	loc_105F8
00010FCE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FD2 7000                       		moveq	#0,d0
00010FD4 1028 003C                  		move.b	$3C(a0),d0
00010FD8 4A32 0000                  		tst.b	(a2,d0.w)
00010FDC 6A00                       		bpl.s	loc_10606
00010FDE 117C 0001 0038             		move.b	#1,$38(a0)
00010FE4                            
00010FE4                            loc_105F8:
00010FE4 303C 0080                  		move.w	#$80,d0
00010FE8 B068 003A                  		cmp.w	$3A(a0),d0
00010FEC 6700                       		beq.s	loc_10624
00010FEE 5468 003A                  		addq.w	#2,$3A(a0)
00010FF2                            
00010FF2                            loc_10606:
00010FF2 3028 003A                  		move.w	$3A(a0),d0
00010FF6 0828 0000 0022             		btst	#0,$22(a0)
00010FFC 6700                       		beq.s	loc_10618
00010FFE 4440                       		neg.w	d0
00011000 0640 0080                  		addi.w	#$80,d0
00011004                            
00011004                            loc_10618:
00011004 3228 0034                  		move.w	$34(a0),d1
00011008 D240                       		add.w	d0,d1
0001100A 3141 0008                  		move.w	d1,8(a0)
0001100E 4E75                       		rts	
00011010                            ; ===========================================================================
00011010                            
00011010                            loc_10624:
00011010 5328 0028                  		subq.b	#1,$28(a0)
00011014 4228 0038                  		clr.b	$38(a0)
00011018 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001101C 7000                       		moveq	#0,d0
0001101E 1028 0023                  		move.b	$23(a0),d0
00011022 67CE                       		beq.s	loc_10606
00011024 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001102A 60C6                       		bra.s	loc_10606
0001102C                            ; ===========================================================================
0001102C                            
0001102C                            Obj56_Type08:				; XREF: Obj56_TypeIndex
0001102C 323C 0010                  		move.w	#$10,d1
00011030 7000                       		moveq	#0,d0
00011032 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011036 E248                       		lsr.w	#1,d0
00011038 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
0001103C 6000                       		bra.s	Obj56_Move_Sqr
0001103E                            ; ===========================================================================
0001103E                            
0001103E                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001103E 323C 0030                  		move.w	#$30,d1
00011042 7000                       		moveq	#0,d0
00011044 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011048 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
0001104C 6000                       		bra.s	Obj56_Move_Sqr
0001104E                            ; ===========================================================================
0001104E                            
0001104E                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001104E 323C 0050                  		move.w	#$50,d1
00011052 7000                       		moveq	#0,d0
00011054 1038 FE90                  		move.b	($FFFFFE90).w,d0
00011058 3638 FE92                  		move.w	($FFFFFE92).w,d3
0001105C 6000                       		bra.s	Obj56_Move_Sqr
0001105E                            ; ===========================================================================
0001105E                            
0001105E                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0001105E 323C 0070                  		move.w	#$70,d1
00011062 7000                       		moveq	#0,d0
00011064 1038 FE94                  		move.b	($FFFFFE94).w,d0
00011068 3638 FE96                  		move.w	($FFFFFE96).w,d3
0001106C                            
0001106C                            Obj56_Move_Sqr:
0001106C 4A43                       		tst.w	d3
0001106E 6600                       		bne.s	loc_1068E
00011070 5228 0022                  		addq.b	#1,$22(a0)
00011074 0228 0003 0022             		andi.b	#3,$22(a0)
0001107A                            
0001107A                            loc_1068E:
0001107A 1428 0022                  		move.b	$22(a0),d2
0001107E 0202 0003                  		andi.b	#3,d2
00011082 6600                       		bne.s	loc_106AE
00011084 9041                       		sub.w	d1,d0
00011086 D068 0034                  		add.w	$34(a0),d0
0001108A 3140 0008                  		move.w	d0,8(a0)
0001108E 4441                       		neg.w	d1
00011090 D268 0030                  		add.w	$30(a0),d1
00011094 3141 000C                  		move.w	d1,$C(a0)
00011098 4E75                       		rts	
0001109A                            ; ===========================================================================
0001109A                            
0001109A                            loc_106AE:
0001109A 5302                       		subq.b	#1,d2
0001109C 6600                       		bne.s	loc_106CC
0001109E 5341                       		subq.w	#1,d1
000110A0 9041                       		sub.w	d1,d0
000110A2 4440                       		neg.w	d0
000110A4 D068 0030                  		add.w	$30(a0),d0
000110A8 3140 000C                  		move.w	d0,$C(a0)
000110AC 5241                       		addq.w	#1,d1
000110AE D268 0034                  		add.w	$34(a0),d1
000110B2 3141 0008                  		move.w	d1,8(a0)
000110B6 4E75                       		rts	
000110B8                            ; ===========================================================================
000110B8                            
000110B8                            loc_106CC:
000110B8 5302                       		subq.b	#1,d2
000110BA 6600                       		bne.s	loc_106EA
000110BC 5341                       		subq.w	#1,d1
000110BE 9041                       		sub.w	d1,d0
000110C0 4440                       		neg.w	d0
000110C2 D068 0034                  		add.w	$34(a0),d0
000110C6 3140 0008                  		move.w	d0,8(a0)
000110CA 5241                       		addq.w	#1,d1
000110CC D268 0030                  		add.w	$30(a0),d1
000110D0 3141 000C                  		move.w	d1,$C(a0)
000110D4 4E75                       		rts	
000110D6                            ; ===========================================================================
000110D6                            
000110D6                            loc_106EA:
000110D6 9041                       		sub.w	d1,d0
000110D8 D068 0030                  		add.w	$30(a0),d0
000110DC 3140 000C                  		move.w	d0,$C(a0)
000110E0 4441                       		neg.w	d1
000110E2 D268 0034                  		add.w	$34(a0),d1
000110E6 3141 0008                  		move.w	d1,8(a0)
000110EA 4E75                       		rts	
000110EC                            ; ===========================================================================
000110EC                            ; ---------------------------------------------------------------------------
000110EC                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000110EC                            ; ---------------------------------------------------------------------------
000110EC                            Map_obj56:
000110EC                            	include "_maps\obj56.asm"
000110EC                            ; ---------------------------------------------------------------------------
000110EC                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000110EC                            ; ---------------------------------------------------------------------------
000110EC 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000110F0 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000110F4 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000110F8 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000110FC 01                         byte_10710:	dc.b 1
000110FD F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011102 04                         byte_10716:	dc.b 4
00011103 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011108 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001110D 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011112 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011117 02                         byte_1072B:	dc.b 2
00011118 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001111D 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011122 04                         byte_10736:	dc.b 4
00011123 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011128 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001112D 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00011132 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011137 03                         byte_1074B:	dc.b 3
00011138 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001113D F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00011142 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00011147 01                         byte_1075B:	dc.b 1
00011148 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001114D 02                         byte_10761:	dc.b 2
0001114E E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011153 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011158 04                         byte_1076C:	dc.b 4
00011159 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001115E F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00011163 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00011168 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001116E 00                         		even
0001116E 00                         		even
0001116E                            
0001116E                            ; ===========================================================================
0001116E                            ; ---------------------------------------------------------------------------
0001116E                            ; Object 57 - spiked balls (SYZ, LZ)
0001116E                            ; ---------------------------------------------------------------------------
0001116E                            
0001116E                            Obj57:					; XREF: Obj_Index
0001116E 7000                       		moveq	#0,d0
00011170 1028 0024                  		move.b	$24(a0),d0
00011174 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00011178 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0001117C                            ; ===========================================================================
0001117C 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001117E 0000                       		dc.w Obj57_Move-Obj57_Index
00011180 0000                       		dc.w Obj57_Display-Obj57_Index
00011182                            ; ===========================================================================
00011182                            
00011182                            Obj57_Main:				; XREF: Obj57_Index
00011182 5428 0024                  		addq.b	#2,$24(a0)
00011186 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001118E 317C 03BA 0002             		move.w	#$3BA,2(a0)
00011194 117C 0004 0001             		move.b	#4,1(a0)
0001119A 117C 0004 0018             		move.b	#4,$18(a0)
000111A0 117C 0008 0019             		move.b	#8,$19(a0)
000111A6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000111AC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000111B2 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000111B8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000111BE 6600                       		bne.s	loc_107E8
000111C0 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000111C6 317C 0310 0002             		move.w	#$310,2(a0)
000111CC 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000111D4                            
000111D4                            loc_107E8:
000111D4 1228 0028                  		move.b	$28(a0),d1	; get object type
000111D8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000111DC 4881                       		ext.w	d1
000111DE E741                       		asl.w	#3,d1		; multiply by 8
000111E0 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000111E4 1028 0022                  		move.b	$22(a0),d0
000111E8 E418                       		ror.b	#2,d0
000111EA 0200 00C0                  		andi.b	#-$40,d0
000111EE 1140 0026                  		move.b	d0,$26(a0)
000111F2 45E8 0029                  		lea	$29(a0),a2
000111F6 1228 0028                  		move.b	$28(a0),d1	; get object type
000111FA 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000111FE 14FC 0000                  		move.b	#0,(a2)+
00011202 3601                       		move.w	d1,d3
00011204 E94B                       		lsl.w	#4,d3
00011206 1143 003C                  		move.b	d3,$3C(a0)
0001120A 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001120C 6500                       		bcs.s	loc_10894
0001120E 0828 0003 0028             		btst	#3,$28(a0)
00011214 6700                       		beq.s	Obj57_MakeChain
00011216 5341                       		subq.w	#1,d1
00011218 6500                       		bcs.s	loc_10894
0001121A                            
0001121A                            Obj57_MakeChain:
0001121A 6100 D260                  		bsr.w	SingleObjLoad
0001121E 6600                       		bne.s	loc_10894
00011220 5228 0029                  		addq.b	#1,$29(a0)
00011224 3A09                       		move.w	a1,d5
00011226 0445 D000                  		subi.w	#-$3000,d5
0001122A EC4D                       		lsr.w	#6,d5
0001122C 0245 007F                  		andi.w	#$7F,d5
00011230 14C5                       		move.b	d5,(a2)+
00011232 137C 0004 0024             		move.b	#4,$24(a1)
00011238 1290                       		move.b	0(a0),0(a1)
0001123A 2368 0004 0004             		move.l	4(a0),4(a1)
00011240 3368 0002 0002             		move.w	2(a0),2(a1)
00011246 1368 0001 0001             		move.b	1(a0),1(a1)
0001124C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00011252 1368 0019 0019             		move.b	$19(a0),$19(a1)
00011258 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001125E 0403 0010                  		subi.b	#$10,d3
00011262 1343 003C                  		move.b	d3,$3C(a1)
00011266 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001126C 6600                       		bne.s	loc_10890
0001126E 4A03                       		tst.b	d3
00011270 6600                       		bne.s	loc_10890
00011272 137C 0002 001A             		move.b	#2,$1A(a1)
00011278                            
00011278                            loc_10890:
00011278 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0001127C                            
0001127C                            loc_10894:
0001127C 3A08                       		move.w	a0,d5
0001127E 0445 D000                  		subi.w	#-$3000,d5
00011282 EC4D                       		lsr.w	#6,d5
00011284 0245 007F                  		andi.w	#$7F,d5
00011288 14C5                       		move.b	d5,(a2)+
0001128A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011290 6600                       		bne.s	Obj57_Move
00011292 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00011298 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001129E                            
0001129E                            Obj57_Move:				; XREF: Obj57_Index
0001129E 6100 0000                  		bsr.w	Obj57_MoveSub
000112A2 6000 0000                  		bra.w	Obj57_ChkDel
000112A6                            ; ===========================================================================
000112A6                            
000112A6                            Obj57_MoveSub:				; XREF: Obj57_Move
000112A6 3028 003E                  		move.w	$3E(a0),d0
000112AA D168 0026                  		add.w	d0,$26(a0)
000112AE 1028 0026                  		move.b	$26(a0),d0
000112B2 4EB9 0000 2D28             		jsr	(CalcSine).l
000112B8 3428 0038                  		move.w	$38(a0),d2
000112BC 3628 003A                  		move.w	$3A(a0),d3
000112C0 45E8 0029                  		lea	$29(a0),a2
000112C4 7C00                       		moveq	#0,d6
000112C6 1C1A                       		move.b	(a2)+,d6
000112C8                            
000112C8                            Obj57_MoveLoop:
000112C8 7800                       		moveq	#0,d4
000112CA 181A                       		move.b	(a2)+,d4
000112CC ED4C                       		lsl.w	#6,d4
000112CE 0684 00FF D000             		addi.l	#$FFD000,d4
000112D4 2244                       		movea.l	d4,a1
000112D6 7800                       		moveq	#0,d4
000112D8 1829 003C                  		move.b	$3C(a1),d4
000112DC 2A04                       		move.l	d4,d5
000112DE C9C0                       		muls.w	d0,d4
000112E0 E084                       		asr.l	#8,d4
000112E2 CBC1                       		muls.w	d1,d5
000112E4 E085                       		asr.l	#8,d5
000112E6 D842                       		add.w	d2,d4
000112E8 DA43                       		add.w	d3,d5
000112EA 3344 000C                  		move.w	d4,$C(a1)
000112EE 3345 0008                  		move.w	d5,8(a1)
000112F2 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000112F6 4E75                       		rts	
000112F8                            ; ===========================================================================
000112F8                            
000112F8                            Obj57_ChkDel:				; XREF: Obj57_Move
000112F8 3028 003A                  		move.w	$3A(a0),d0
000112FC 0240 FF80                  		andi.w	#$FF80,d0
00011300 3238 F700                  		move.w	($FFFFF700).w,d1
00011304 0441 0080                  		subi.w	#$80,d1
00011308 0241 FF80                  		andi.w	#$FF80,d1
0001130C 9041                       		sub.w	d1,d0
0001130E 0C40 0280                  		cmpi.w	#$280,d0
00011312 6200 0000                  		bhi.w	Obj57_Delete
00011316 6000 CCDE                  		bra.w	DisplaySprite
0001131A                            ; ===========================================================================
0001131A                            
0001131A                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001131A 7400                       		moveq	#0,d2
0001131C 45E8 0029                  		lea	$29(a0),a2
00011320 141A                       		move.b	(a2)+,d2
00011322                            
00011322                            Obj57_DelLoop:
00011322 7000                       		moveq	#0,d0
00011324 101A                       		move.b	(a2)+,d0
00011326 ED48                       		lsl.w	#6,d0
00011328 0680 00FF D000             		addi.l	#$FFD000,d0
0001132E 2240                       		movea.l	d0,a1
00011330 6100 CD02                  		bsr.w	DeleteObject2
00011334 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011338                            
00011338 4E75                       		rts	
0001133A                            ; ===========================================================================
0001133A                            
0001133A                            Obj57_Display:				; XREF: Obj57_Index
0001133A 6000 CCBA                  		bra.w	DisplaySprite
0001133E                            ; ===========================================================================
0001133E                            ; ---------------------------------------------------------------------------
0001133E                            ; Sprite mappings - chain of spiked balls (SYZ)
0001133E                            ; ---------------------------------------------------------------------------
0001133E                            Map_obj57:
0001133E                            	include "_maps\obj57syz.asm"
0001133E                            ; ---------------------------------------------------------------------------
0001133E                            ; Sprite mappings - chain of spiked balls (SYZ)
0001133E                            ; ---------------------------------------------------------------------------
0001133E 0000                       		dc.w byte_10958-Map_obj57
00011340 01                         byte_10958:	dc.b 1
00011341 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011346                            		even
00011346                            		even
00011346                            
00011346                            ; ---------------------------------------------------------------------------
00011346                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011346                            ; ---------------------------------------------------------------------------
00011346                            Map_obj57a:
00011346                            	include "_maps\obj57lz.asm"
00011346                            ; ---------------------------------------------------------------------------
00011346                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011346                            ; ---------------------------------------------------------------------------
00011346 0000                       		dc.w byte_10964-Map_obj57a
00011348 0000                       		dc.w byte_1096A-Map_obj57a
0001134A 0000                       		dc.w byte_10970-Map_obj57a
0001134C 01                         byte_10964:	dc.b 1
0001134D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011352 01                         byte_1096A:	dc.b 1
00011353 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011358 01                         byte_10970:	dc.b 1
00011359 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001135E                            		even
0001135E                            		even
0001135E                            
0001135E                            ; ===========================================================================
0001135E                            ; ---------------------------------------------------------------------------
0001135E                            ; Object 58 - giant spiked balls (SYZ)
0001135E                            ; ---------------------------------------------------------------------------
0001135E                            
0001135E                            Obj58:					; XREF: Obj_Index
0001135E 7000                       		moveq	#0,d0
00011360 1028 0024                  		move.b	$24(a0),d0
00011364 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011368 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0001136C                            ; ===========================================================================
0001136C 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001136E 0000                       		dc.w Obj58_Move-Obj58_Index
00011370                            ; ===========================================================================
00011370                            
00011370                            Obj58_Main:				; XREF: Obj58_Index
00011370 5428 0024                  		addq.b	#2,$24(a0)
00011374 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0001137C 317C 0396 0002             		move.w	#$396,2(a0)
00011382 117C 0004 0001             		move.b	#4,1(a0)
00011388 117C 0004 0018             		move.b	#4,$18(a0)
0001138E 117C 0018 0019             		move.b	#$18,$19(a0)
00011394 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001139A 3168 000C 0038             		move.w	$C(a0),$38(a0)
000113A0 117C 0086 0020             		move.b	#$86,$20(a0)
000113A6 1228 0028                  		move.b	$28(a0),d1	; get object type
000113AA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000113AE 4881                       		ext.w	d1
000113B0 E741                       		asl.w	#3,d1		; multiply by 8
000113B2 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000113B6 1028 0022                  		move.b	$22(a0),d0
000113BA E418                       		ror.b	#2,d0
000113BC 0200 00C0                  		andi.b	#$C0,d0
000113C0 1140 0026                  		move.b	d0,$26(a0)
000113C4 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000113CA                            
000113CA                            Obj58_Move:				; XREF: Obj58_Index
000113CA 7000                       		moveq	#0,d0
000113CC 1028 0028                  		move.b	$28(a0),d0	; get object type
000113D0 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000113D4 D040                       		add.w	d0,d0
000113D6 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000113DA 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000113DE 3028 003A                  		move.w	$3A(a0),d0
000113E2 0240 FF80                  		andi.w	#$FF80,d0
000113E6 3238 F700                  		move.w	($FFFFF700).w,d1
000113EA 0441 0080                  		subi.w	#$80,d1
000113EE 0241 FF80                  		andi.w	#$FF80,d1
000113F2 9041                       		sub.w	d1,d0
000113F4 0C40 0280                  		cmpi.w	#$280,d0
000113F8 6200 CC38                  		bhi.w	DeleteObject
000113FC 6000 CBF8                  		bra.w	DisplaySprite
00011400                            ; ===========================================================================
00011400 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011402 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011404 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011406 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011408                            ; ===========================================================================
00011408                            
00011408                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011408 4E75                       		rts	
0001140A                            ; ===========================================================================
0001140A                            
0001140A                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001140A 323C 0060                  		move.w	#$60,d1
0001140E 7000                       		moveq	#0,d0
00011410 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011414 0828 0000 0022             		btst	#0,$22(a0)
0001141A 6700                       		beq.s	loc_10A38
0001141C 4440                       		neg.w	d0
0001141E D041                       		add.w	d1,d0
00011420                            
00011420                            loc_10A38:
00011420 3228 003A                  		move.w	$3A(a0),d1
00011424 9240                       		sub.w	d0,d1
00011426 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001142A 4E75                       		rts	
0001142C                            ; ===========================================================================
0001142C                            
0001142C                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001142C 323C 0060                  		move.w	#$60,d1
00011430 7000                       		moveq	#0,d0
00011432 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011436 0828 0000 0022             		btst	#0,$22(a0)
0001143C 6700                       		beq.s	loc_10A5C
0001143E 4440                       		neg.w	d0
00011440 0640 0080                  		addi.w	#$80,d0
00011444                            
00011444                            loc_10A5C:
00011444 3228 0038                  		move.w	$38(a0),d1
00011448 9240                       		sub.w	d0,d1
0001144A 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001144E 4E75                       		rts	
00011450                            ; ===========================================================================
00011450                            
00011450                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011450 3028 003E                  		move.w	$3E(a0),d0
00011454 D168 0026                  		add.w	d0,$26(a0)
00011458 1028 0026                  		move.b	$26(a0),d0
0001145C 4EB9 0000 2D28             		jsr	(CalcSine).l
00011462 3428 0038                  		move.w	$38(a0),d2
00011466 3628 003A                  		move.w	$3A(a0),d3
0001146A 7800                       		moveq	#0,d4
0001146C 1828 003C                  		move.b	$3C(a0),d4
00011470 2A04                       		move.l	d4,d5
00011472 C9C0                       		muls.w	d0,d4
00011474 E084                       		asr.l	#8,d4
00011476 CBC1                       		muls.w	d1,d5
00011478 E085                       		asr.l	#8,d5
0001147A D842                       		add.w	d2,d4
0001147C DA43                       		add.w	d3,d5
0001147E 3144 000C                  		move.w	d4,$C(a0)
00011482 3145 0008                  		move.w	d5,8(a0)
00011486 4E75                       		rts	
00011488                            ; ===========================================================================
00011488                            ; ---------------------------------------------------------------------------
00011488                            ; Sprite mappings - SBZ	spiked ball on a chain
00011488                            ; ---------------------------------------------------------------------------
00011488                            Map_obj15b:
00011488                            	include "_maps\obj15sbz.asm"
00011488                            ; ---------------------------------------------------------------------------
00011488                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011488                            ; ---------------------------------------------------------------------------
00011488 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001148C 0000                       		dc.w byte_10AC6-Map_obj15b
0001148E 05                         byte_10AA6:	dc.b 5
0001148F E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011494 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011499 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001149E F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000114A3 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000114A8 01                         byte_10AC0:	dc.b 1
000114A9 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000114AE 02                         byte_10AC6:	dc.b 2
000114AF F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000114B4 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000114BA 00                         		even
000114BA 00                         		even
000114BA                            
000114BA                            ; ===========================================================================
000114BA                            ; ---------------------------------------------------------------------------
000114BA                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000114BA                            ; ---------------------------------------------------------------------------
000114BA                            
000114BA                            Obj59:					; XREF: Obj_Index
000114BA 7000                       		moveq	#0,d0
000114BC 1028 0024                  		move.b	$24(a0),d0
000114C0 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000114C4 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000114C8 3028 0032                  		move.w	$32(a0),d0
000114CC 0240 FF80                  		andi.w	#$FF80,d0
000114D0 3238 F700                  		move.w	($FFFFF700).w,d1
000114D4 0441 0080                  		subi.w	#$80,d1
000114D8 0241 FF80                  		andi.w	#$FF80,d1
000114DC 9041                       		sub.w	d1,d0
000114DE 0C40 0280                  		cmpi.w	#$280,d0
000114E2 6200 CB4E                  		bhi.w	DeleteObject
000114E6 6000 CB0E                  		bra.w	DisplaySprite
000114EA                            ; ===========================================================================
000114EA 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000114EC 0000                       		dc.w Obj59_Platform-Obj59_Index
000114EE 0000                       		dc.w Obj59_Action-Obj59_Index
000114F0 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000114F2                            
000114F2 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000114F4                            
000114F4 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000114F6 2001                       		dc.b $20, 1
000114F8 3401                       		dc.b $34, 1
000114FA 1003                       		dc.b $10, 3
000114FC 2003                       		dc.b $20, 3
000114FE 3403                       		dc.b $34, 3
00011500 1401                       		dc.b $14, 1
00011502 2401                       		dc.b $24, 1
00011504 2C01                       		dc.b $2C, 1
00011506 1403                       		dc.b $14, 3
00011508 2403                       		dc.b $24, 3
0001150A 2C03                       		dc.b $2C, 3
0001150C 2005                       		dc.b $20, 5
0001150E 2007                       		dc.b $20, 7
00011510 3009                       		dc.b $30, 9
00011512                            ; ===========================================================================
00011512                            
00011512                            Obj59_Main:				; XREF: Obj59_Index
00011512 5428 0024                  		addq.b	#2,$24(a0)
00011516 7000                       		moveq	#0,d0
00011518 1028 0028                  		move.b	$28(a0),d0
0001151C 6A00                       		bpl.s	Obj59_Main2
0001151E 5828 0024                  		addq.b	#4,$24(a0)
00011522 0240 007F                  		andi.w	#$7F,d0
00011526 C0FC 0006                  		mulu.w	#6,d0
0001152A 3140 003C                  		move.w	d0,$3C(a0)
0001152E 3140 003E                  		move.w	d0,$3E(a0)
00011532 588F                       		addq.l	#4,sp
00011534 4E75                       		rts	
00011536                            ; ===========================================================================
00011536                            
00011536                            Obj59_Main2:
00011536 E648                       		lsr.w	#3,d0
00011538 0240 001E                  		andi.w	#$1E,d0
0001153C 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011540 115A 0019                  		move.b	(a2)+,$19(a0)
00011544 115A 001A                  		move.b	(a2)+,$1A(a0)
00011548 7000                       		moveq	#0,d0
0001154A 1028 0028                  		move.b	$28(a0),d0
0001154E D040                       		add.w	d0,d0
00011550 0240 001E                  		andi.w	#$1E,d0
00011554 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011558 101A                       		move.b	(a2)+,d0
0001155A E548                       		lsl.w	#2,d0
0001155C 3140 003C                  		move.w	d0,$3C(a0)
00011560 115A 0028                  		move.b	(a2)+,$28(a0)
00011564 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001156C 317C 4000 0002             		move.w	#$4000,2(a0)
00011572 117C 0004 0001             		move.b	#4,1(a0)
00011578 117C 0004 0018             		move.b	#4,$18(a0)
0001157E 3168 0008 0032             		move.w	8(a0),$32(a0)
00011584 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001158A                            
0001158A                            Obj59_Platform:				; XREF: Obj59_Index
0001158A 7200                       		moveq	#0,d1
0001158C 1228 0019                  		move.b	$19(a0),d1
00011590 4EB9 0000 7C08             		jsr	(PlatformObject).l
00011596 6000 0000                  		bra.w	Obj59_Types
0001159A                            ; ===========================================================================
0001159A                            
0001159A                            Obj59_Action:				; XREF: Obj59_Index
0001159A 7200                       		moveq	#0,d1
0001159C 1228 0019                  		move.b	$19(a0),d1
000115A0 4EB9 0000 7D7C             		jsr	(ExitPlatform).l
000115A6 3F28 0008                  		move.w	8(a0),-(sp)
000115AA 6100 0000                  		bsr.w	Obj59_Types
000115AE 341F                       		move.w	(sp)+,d2
000115B0 4A10                       		tst.b	0(a0)
000115B2 6700                       		beq.s	locret_10BD4
000115B4 4EF9 0000 82E6             		jmp	(MvSonicOnPtfm2).l
000115BA                            ; ===========================================================================
000115BA                            
000115BA                            locret_10BD4:
000115BA 4E75                       		rts	
000115BC                            ; ===========================================================================
000115BC                            
000115BC                            Obj59_Types:
000115BC 7000                       		moveq	#0,d0
000115BE 1028 0028                  		move.b	$28(a0),d0
000115C2 0240 000F                  		andi.w	#$F,d0
000115C6 D040                       		add.w	d0,d0
000115C8 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000115CC 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000115D0                            ; ===========================================================================
000115D0 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115D4 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115D8 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115DC 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115E0 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000115E4                            ; ===========================================================================
000115E4                            
000115E4                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000115E4 4E75                       		rts	
000115E6                            ; ===========================================================================
000115E6                            
000115E6                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000115E6 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000115EC 6600                       		bne.s	locret_10C0C
000115EE 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000115F2                            
000115F2                            locret_10C0C:
000115F2 4E75                       		rts	
000115F4                            ; ===========================================================================
000115F4                            
000115F4                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000115F4 6100 0000                  		bsr.w	Obj59_Move
000115F8 3028 0034                  		move.w	$34(a0),d0
000115FC 4440                       		neg.w	d0
000115FE D068 0030                  		add.w	$30(a0),d0
00011602 3140 000C                  		move.w	d0,$C(a0)
00011606 4E75                       		rts	
00011608                            ; ===========================================================================
00011608                            
00011608                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011608 6100 0000                  		bsr.w	Obj59_Move
0001160C 3028 0034                  		move.w	$34(a0),d0
00011610 D068 0030                  		add.w	$30(a0),d0
00011614 3140 000C                  		move.w	d0,$C(a0)
00011618 4E75                       		rts	
0001161A                            ; ===========================================================================
0001161A                            
0001161A                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001161A 6100 0000                  		bsr.w	Obj59_Move
0001161E 3028 0034                  		move.w	$34(a0),d0
00011622 E240                       		asr.w	#1,d0
00011624 4440                       		neg.w	d0
00011626 D068 0030                  		add.w	$30(a0),d0
0001162A 3140 000C                  		move.w	d0,$C(a0)
0001162E 3028 0034                  		move.w	$34(a0),d0
00011632 D068 0032                  		add.w	$32(a0),d0
00011636 3140 0008                  		move.w	d0,8(a0)
0001163A 4E75                       		rts	
0001163C                            ; ===========================================================================
0001163C                            
0001163C                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001163C 6100 0000                  		bsr.w	Obj59_Move
00011640 3028 0034                  		move.w	$34(a0),d0
00011644 E240                       		asr.w	#1,d0
00011646 D068 0030                  		add.w	$30(a0),d0
0001164A 3140 000C                  		move.w	d0,$C(a0)
0001164E 3028 0034                  		move.w	$34(a0),d0
00011652 4440                       		neg.w	d0
00011654 D068 0032                  		add.w	$32(a0),d0
00011658 3140 0008                  		move.w	d0,8(a0)
0001165C 4E75                       		rts	
0001165E                            ; ===========================================================================
0001165E                            
0001165E                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001165E 6100 0000                  		bsr.w	Obj59_Move
00011662 3028 0034                  		move.w	$34(a0),d0
00011666 4440                       		neg.w	d0
00011668 D068 0030                  		add.w	$30(a0),d0
0001166C 3140 000C                  		move.w	d0,$C(a0)
00011670 4A28 0028                  		tst.b	$28(a0)
00011674 6700 0000                  		beq.w	loc_10C94
00011678 4E75                       		rts	
0001167A                            ; ===========================================================================
0001167A                            
0001167A                            loc_10C94:
0001167A 0828 0003 0022             		btst	#3,$22(a0)
00011680 6700                       		beq.s	Obj59_Delete
00011682 08E9 0001 0022             		bset	#1,$22(a1)
00011688 08A9 0003 0022             		bclr	#3,$22(a1)
0001168E 137C 0002 0024             		move.b	#2,$24(a1)
00011694                            
00011694                            Obj59_Delete:
00011694 6000 C99C                  		bra.w	DeleteObject
00011698                            
00011698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011698                            
00011698                            
00011698                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011698 3028 0038                  		move.w	$38(a0),d0
0001169C 4A28 003A                  		tst.b	$3A(a0)
000116A0 6600                       		bne.s	loc_10CC8
000116A2 0C40 0800                  		cmpi.w	#$800,d0
000116A6 6400                       		bcc.s	loc_10CD0
000116A8 0640 0010                  		addi.w	#$10,d0
000116AC 6000                       		bra.s	loc_10CD0
000116AE                            ; ===========================================================================
000116AE                            
000116AE                            loc_10CC8:
000116AE 4A40                       		tst.w	d0
000116B0 6700                       		beq.s	loc_10CD0
000116B2 0440 0010                  		subi.w	#$10,d0
000116B6                            
000116B6                            loc_10CD0:
000116B6 3140 0038                  		move.w	d0,$38(a0)
000116BA 48C0                       		ext.l	d0
000116BC E180                       		asl.l	#8,d0
000116BE D0A8 0034                  		add.l	$34(a0),d0
000116C2 2140 0034                  		move.l	d0,$34(a0)
000116C6 4840                       		swap	d0
000116C8 3428 003C                  		move.w	$3C(a0),d2
000116CC B042                       		cmp.w	d2,d0
000116CE 6300                       		bls.s	loc_10CF0
000116D0 117C 0001 003A             		move.b	#1,$3A(a0)
000116D6                            
000116D6                            loc_10CF0:
000116D6 D442                       		add.w	d2,d2
000116D8 B042                       		cmp.w	d2,d0
000116DA 6600                       		bne.s	locret_10CFA
000116DC 4228 0028                  		clr.b	$28(a0)
000116E0                            
000116E0                            locret_10CFA:
000116E0 4E75                       		rts	
000116E2                            ; End of function Obj59_Move
000116E2                            
000116E2                            ; ===========================================================================
000116E2                            
000116E2                            Obj59_MakeMulti:			; XREF: Obj59_Index
000116E2 5368 003C                  		subq.w	#1,$3C(a0)
000116E6 6600                       		bne.s	Obj59_ChkDel
000116E8 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000116EE 6100 CD8C                  		bsr.w	SingleObjLoad
000116F2 6600                       		bne.s	Obj59_ChkDel
000116F4 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000116F8 3368 0008 0008             		move.w	8(a0),8(a1)
000116FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011704 137C 000E 0028             		move.b	#$E,$28(a1)
0001170A                            
0001170A                            Obj59_ChkDel:
0001170A 588F                       		addq.l	#4,sp
0001170C 3028 0008                  		move.w	8(a0),d0
00011710 0240 FF80                  		andi.w	#$FF80,d0
00011714 3238 F700                  		move.w	($FFFFF700).w,d1
00011718 0441 0080                  		subi.w	#$80,d1
0001171C 0241 FF80                  		andi.w	#$FF80,d1
00011720 9041                       		sub.w	d1,d0
00011722 0C40 0280                  		cmpi.w	#$280,d0
00011726 6200 C90A                  		bhi.w	DeleteObject
0001172A 4E75                       		rts	
0001172C                            ; ===========================================================================
0001172C                            ; ---------------------------------------------------------------------------
0001172C                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001172C                            ; ---------------------------------------------------------------------------
0001172C                            Map_obj59:
0001172C                            	include "_maps\obj59.asm"
0001172C                            ; ---------------------------------------------------------------------------
0001172C                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001172C                            ; ---------------------------------------------------------------------------
0001172C 0000                       		dc.w byte_10D4A-Map_obj59
0001172E 03                         byte_10D4A:	dc.b 3
0001172F F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011734 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011739 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001173E                            		even
0001173E                            		even
0001173E                            
0001173E                            ; ===========================================================================
0001173E                            ; ---------------------------------------------------------------------------
0001173E                            ; Object 5A - platforms	moving in circles (SLZ)
0001173E                            ; ---------------------------------------------------------------------------
0001173E                            
0001173E                            Obj5A:					; XREF: Obj_Index
0001173E 7000                       		moveq	#0,d0
00011740 1028 0024                  		move.b	$24(a0),d0
00011744 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011748 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001174C 3028 0032                  		move.w	$32(a0),d0
00011750 0240 FF80                  		andi.w	#$FF80,d0
00011754 3238 F700                  		move.w	($FFFFF700).w,d1
00011758 0441 0080                  		subi.w	#$80,d1
0001175C 0241 FF80                  		andi.w	#$FF80,d1
00011760 9041                       		sub.w	d1,d0
00011762 0C40 0280                  		cmpi.w	#$280,d0
00011766 6200 C8CA                  		bhi.w	DeleteObject
0001176A 6000 C88A                  		bra.w	DisplaySprite
0001176E                            ; ===========================================================================
0001176E 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011770 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011772 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011774                            ; ===========================================================================
00011774                            
00011774                            Obj5A_Main:				; XREF: Obj5A_Index
00011774 5428 0024                  		addq.b	#2,$24(a0)
00011778 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011780 317C 4000 0002             		move.w	#$4000,2(a0)
00011786 117C 0004 0001             		move.b	#4,1(a0)
0001178C 117C 0004 0018             		move.b	#4,$18(a0)
00011792 117C 0018 0019             		move.b	#$18,$19(a0)
00011798 3168 0008 0032             		move.w	8(a0),$32(a0)
0001179E 3168 000C 0030             		move.w	$C(a0),$30(a0)
000117A4                            
000117A4                            Obj5A_Platform:				; XREF: Obj5A_Index
000117A4 7200                       		moveq	#0,d1
000117A6 1228 0019                  		move.b	$19(a0),d1
000117AA 4EB9 0000 7C08             		jsr	(PlatformObject).l
000117B0 6000 0000                  		bra.w	Obj5A_Types
000117B4                            ; ===========================================================================
000117B4                            
000117B4                            Obj5A_Action:				; XREF: Obj5A_Index
000117B4 7200                       		moveq	#0,d1
000117B6 1228 0019                  		move.b	$19(a0),d1
000117BA 4EB9 0000 7D7C             		jsr	(ExitPlatform).l
000117C0 3F28 0008                  		move.w	8(a0),-(sp)
000117C4 6100 0000                  		bsr.w	Obj5A_Types
000117C8 341F                       		move.w	(sp)+,d2
000117CA 4EF9 0000 82E6             		jmp	(MvSonicOnPtfm2).l
000117D0                            ; ===========================================================================
000117D0                            
000117D0                            Obj5A_Types:
000117D0 7000                       		moveq	#0,d0
000117D2 1028 0028                  		move.b	$28(a0),d0
000117D6 0240 000C                  		andi.w	#$C,d0
000117DA E248                       		lsr.w	#1,d0
000117DC 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000117E0 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000117E4                            ; ===========================================================================
000117E4 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000117E6 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000117E8                            ; ===========================================================================
000117E8                            
000117E8                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000117E8 1238 FE80                  		move.b	($FFFFFE80).w,d1
000117EC 0401 0050                  		subi.b	#$50,d1
000117F0 4881                       		ext.w	d1
000117F2 1438 FE84                  		move.b	($FFFFFE84).w,d2
000117F6 0402 0050                  		subi.b	#$50,d2
000117FA 4882                       		ext.w	d2
000117FC 0828 0000 0028             		btst	#0,$28(a0)
00011802 6700                       		beq.s	loc_10E24
00011804 4441                       		neg.w	d1
00011806 4442                       		neg.w	d2
00011808                            
00011808                            loc_10E24:
00011808 0828 0001 0028             		btst	#1,$28(a0)
0001180E 6700                       		beq.s	loc_10E30
00011810 4441                       		neg.w	d1
00011812 C342                       		exg	d1,d2
00011814                            
00011814                            loc_10E30:
00011814 D268 0032                  		add.w	$32(a0),d1
00011818 3141 0008                  		move.w	d1,8(a0)
0001181C D468 0030                  		add.w	$30(a0),d2
00011820 3142 000C                  		move.w	d2,$C(a0)
00011824 4E75                       		rts	
00011826                            ; ===========================================================================
00011826                            
00011826                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011826 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001182A 0401 0050                  		subi.b	#$50,d1
0001182E 4881                       		ext.w	d1
00011830 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011834 0402 0050                  		subi.b	#$50,d2
00011838 4882                       		ext.w	d2
0001183A 0828 0000 0028             		btst	#0,$28(a0)
00011840 6700                       		beq.s	loc_10E62
00011842 4441                       		neg.w	d1
00011844 4442                       		neg.w	d2
00011846                            
00011846                            loc_10E62:
00011846 0828 0001 0028             		btst	#1,$28(a0)
0001184C 6700                       		beq.s	loc_10E6E
0001184E 4441                       		neg.w	d1
00011850 C342                       		exg	d1,d2
00011852                            
00011852                            loc_10E6E:
00011852 4441                       		neg.w	d1
00011854 D268 0032                  		add.w	$32(a0),d1
00011858 3141 0008                  		move.w	d1,8(a0)
0001185C D468 0030                  		add.w	$30(a0),d2
00011860 3142 000C                  		move.w	d2,$C(a0)
00011864 4E75                       		rts	
00011866                            ; ===========================================================================
00011866                            ; ---------------------------------------------------------------------------
00011866                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011866                            ; ---------------------------------------------------------------------------
00011866                            Map_obj5A:
00011866                            	include "_maps\obj5A.asm"
00011866                            ; ---------------------------------------------------------------------------
00011866                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011866                            ; ---------------------------------------------------------------------------
00011866 0000                       		dc.w byte_10E84-Map_obj5A
00011868 02                         byte_10E84:	dc.b 2
00011869 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001186E F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011874 00                         		even
00011874 00                         		even
00011874                            
00011874                            ; ===========================================================================
00011874                            ; ---------------------------------------------------------------------------
00011874                            ; Object 5B - blocks that form a staircase (SLZ)
00011874                            ; ---------------------------------------------------------------------------
00011874                            
00011874                            Obj5B:					; XREF: Obj_Index
00011874 7000                       		moveq	#0,d0
00011876 1028 0024                  		move.b	$24(a0),d0
0001187A 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001187E 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011882 3028 0030                  		move.w	$30(a0),d0
00011886 0240 FF80                  		andi.w	#$FF80,d0
0001188A 3238 F700                  		move.w	($FFFFF700).w,d1
0001188E 0441 0080                  		subi.w	#$80,d1
00011892 0241 FF80                  		andi.w	#$FF80,d1
00011896 9041                       		sub.w	d1,d0
00011898 0C40 0280                  		cmpi.w	#$280,d0
0001189C 6200 C794                  		bhi.w	DeleteObject
000118A0 6000 C754                  		bra.w	DisplaySprite
000118A4                            ; ===========================================================================
000118A4 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000118A6 0000                       		dc.w Obj5B_Move-Obj5B_Index
000118A8 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000118AA                            ; ===========================================================================
000118AA                            
000118AA                            Obj5B_Main:				; XREF: Obj5B_Index
000118AA 5428 0024                  		addq.b	#2,$24(a0)
000118AE 7638                       		moveq	#$38,d3
000118B0 7801                       		moveq	#1,d4
000118B2 0828 0000 0022             		btst	#0,$22(a0)
000118B8 6700                       		beq.s	loc_10EDA
000118BA 763B                       		moveq	#$3B,d3
000118BC 78FF                       		moveq	#-1,d4
000118BE                            
000118BE                            loc_10EDA:
000118BE 3428 0008                  		move.w	8(a0),d2
000118C2 2248                       		movea.l	a0,a1
000118C4 7203                       		moveq	#3,d1
000118C6 6000                       		bra.s	Obj5B_MakeBlocks
000118C8                            ; ===========================================================================
000118C8                            
000118C8                            Obj5B_Loop:
000118C8 6100 CBC8                  		bsr.w	SingleObjLoad2
000118CC 6600 0000                  		bne.w	Obj5B_Move
000118D0 137C 0004 0024             		move.b	#4,$24(a1)
000118D6                            
000118D6                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000118D6 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000118DA 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000118E2 337C 4000 0002             		move.w	#$4000,2(a1)
000118E8 137C 0004 0001             		move.b	#4,1(a1)
000118EE 137C 0003 0018             		move.b	#3,$18(a1)
000118F4 137C 0010 0019             		move.b	#$10,$19(a1)
000118FA 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011900 3342 0008                  		move.w	d2,8(a1)
00011904 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001190A 3368 0008 0030             		move.w	8(a0),$30(a1)
00011910 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011916 0642 0020                  		addi.w	#$20,d2
0001191A 1343 0037                  		move.b	d3,$37(a1)
0001191E 2348 003C                  		move.l	a0,$3C(a1)
00011922 D604                       		add.b	d4,d3
00011924 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011928                            
00011928                            Obj5B_Move:				; XREF: Obj5B_Index
00011928 7000                       		moveq	#0,d0
0001192A 1028 0028                  		move.b	$28(a0),d0
0001192E 0240 0007                  		andi.w	#7,d0
00011932 D040                       		add.w	d0,d0
00011934 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011938 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001193C                            
0001193C                            Obj5B_Solid:				; XREF: Obj5B_Index
0001193C 2468 003C                  		movea.l	$3C(a0),a2
00011940 7000                       		moveq	#0,d0
00011942 1028 0037                  		move.b	$37(a0),d0
00011946 1032 0000                  		move.b	(a2,d0.w),d0
0001194A D068 0032                  		add.w	$32(a0),d0
0001194E 3140 000C                  		move.w	d0,$C(a0)
00011952 7200                       		moveq	#0,d1
00011954 1228 0019                  		move.b	$19(a0),d1
00011958 0641 000B                  		addi.w	#$B,d1
0001195C 343C 0010                  		move.w	#$10,d2
00011960 363C 0011                  		move.w	#$11,d3
00011964 3828 0008                  		move.w	8(a0),d4
00011968 6100 EA5C                  		bsr.w	SolidObject
0001196C 4A04                       		tst.b	d4
0001196E 6A00                       		bpl.s	loc_10F92
00011970 1544 0036                  		move.b	d4,$36(a2)
00011974                            
00011974                            loc_10F92:
00011974 0828 0003 0022             		btst	#3,$22(a0)
0001197A 6700                       		beq.s	locret_10FA0
0001197C 157C 0001 0036             		move.b	#1,$36(a2)
00011982                            
00011982                            locret_10FA0:
00011982 4E75                       		rts	
00011984                            ; ===========================================================================
00011984 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011986 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011988 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001198A 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001198C                            ; ===========================================================================
0001198C                            
0001198C                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001198C 4A68 0034                  		tst.w	$34(a0)
00011990 6600                       		bne.s	loc_10FC0
00011992 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011998 6600                       		bne.s	locret_10FBE
0001199A 317C 001E 0034             		move.w	#$1E,$34(a0)
000119A0                            
000119A0                            locret_10FBE:
000119A0 4E75                       		rts	
000119A2                            ; ===========================================================================
000119A2                            
000119A2                            loc_10FC0:
000119A2 5368 0034                  		subq.w	#1,$34(a0)
000119A6 66F8                       		bne.s	locret_10FBE
000119A8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000119AC 4E75                       		rts	
000119AE                            ; ===========================================================================
000119AE                            
000119AE                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000119AE 4A68 0034                  		tst.w	$34(a0)
000119B2 6600                       		bne.s	loc_10FE0
000119B4 4A28 0036                  		tst.b	$36(a0)
000119B8 6A00                       		bpl.s	locret_10FDE
000119BA 317C 003C 0034             		move.w	#$3C,$34(a0)
000119C0                            
000119C0                            locret_10FDE:
000119C0 4E75                       		rts	
000119C2                            ; ===========================================================================
000119C2                            
000119C2                            loc_10FE0:
000119C2 5368 0034                  		subq.w	#1,$34(a0)
000119C6 6600                       		bne.s	loc_10FEC
000119C8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000119CC 4E75                       		rts	
000119CE                            ; ===========================================================================
000119CE                            
000119CE                            loc_10FEC:
000119CE 43E8 0038                  		lea	$38(a0),a1
000119D2 3028 0034                  		move.w	$34(a0),d0
000119D6 E408                       		lsr.b	#2,d0
000119D8 0200 0001                  		andi.b	#1,d0
000119DC 12C0                       		move.b	d0,(a1)+
000119DE 0A00 0001                  		eori.b	#1,d0
000119E2 12C0                       		move.b	d0,(a1)+
000119E4 0A00 0001                  		eori.b	#1,d0
000119E8 12C0                       		move.b	d0,(a1)+
000119EA 0A00 0001                  		eori.b	#1,d0
000119EE 12C0                       		move.b	d0,(a1)+
000119F0 4E75                       		rts	
000119F2                            ; ===========================================================================
000119F2                            
000119F2                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000119F2 43E8 0038                  		lea	$38(a0),a1
000119F6 0C11 0080                  		cmpi.b	#$80,(a1)
000119FA 6700                       		beq.s	locret_11038
000119FC 5211                       		addq.b	#1,(a1)
000119FE 7200                       		moveq	#0,d1
00011A00 1219                       		move.b	(a1)+,d1
00011A02 4841                       		swap	d1
00011A04 E289                       		lsr.l	#1,d1
00011A06 2401                       		move.l	d1,d2
00011A08 E289                       		lsr.l	#1,d1
00011A0A 2601                       		move.l	d1,d3
00011A0C D682                       		add.l	d2,d3
00011A0E 4841                       		swap	d1
00011A10 4842                       		swap	d2
00011A12 4843                       		swap	d3
00011A14 12C3                       		move.b	d3,(a1)+
00011A16 12C2                       		move.b	d2,(a1)+
00011A18 12C1                       		move.b	d1,(a1)+
00011A1A                            
00011A1A                            locret_11038:
00011A1A 4E75                       		rts	
00011A1C 4E75                       		rts	
00011A1E                            ; ===========================================================================
00011A1E                            ; ---------------------------------------------------------------------------
00011A1E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A1E                            ; ---------------------------------------------------------------------------
00011A1E                            Map_obj5B:
00011A1E                            	include "_maps\obj5B.asm"
00011A1E                            ; ---------------------------------------------------------------------------
00011A1E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A1E                            ; ---------------------------------------------------------------------------
00011A1E 0000                       		dc.w byte_1103E-Map_obj5B
00011A20 01                         byte_1103E:	dc.b 1
00011A21 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011A26                            		even
00011A26                            		even
00011A26                            
00011A26                            ; ===========================================================================
00011A26                            ; ---------------------------------------------------------------------------
00011A26                            ; Object 5C - metal girders in foreground (SLZ)
00011A26                            ; ---------------------------------------------------------------------------
00011A26                            
00011A26                            Obj5C:					; XREF: Obj_Index
00011A26 7000                       		moveq	#0,d0
00011A28 1028 0024                  		move.b	$24(a0),d0
00011A2C 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011A30 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011A34                            ; ===========================================================================
00011A34 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011A36 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011A38                            ; ===========================================================================
00011A38                            
00011A38                            Obj5C_Main:				; XREF: Obj5C_Index
00011A38 5428 0024                  		addq.b	#2,$24(a0)
00011A3C 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011A44 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011A4A 117C 0010 0019             		move.b	#$10,$19(a0)
00011A50                            
00011A50                            Obj5C_Display:				; XREF: Obj5C_Index
00011A50 2238 F700                  		move.l	($FFFFF700).w,d1
00011A54 D281                       		add.l	d1,d1
00011A56 4841                       		swap	d1
00011A58 4441                       		neg.w	d1
00011A5A 3141 0008                  		move.w	d1,8(a0)
00011A5E 2238 F704                  		move.l	($FFFFF704).w,d1
00011A62 D281                       		add.l	d1,d1
00011A64 4841                       		swap	d1
00011A66 0241 003F                  		andi.w	#$3F,d1
00011A6A 4441                       		neg.w	d1
00011A6C 0641 0100                  		addi.w	#$100,d1
00011A70 3141 000A                  		move.w	d1,$A(a0)
00011A74 6000 C580                  		bra.w	DisplaySprite
00011A78                            ; ===========================================================================
00011A78                            ; ---------------------------------------------------------------------------
00011A78                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011A78                            ; ---------------------------------------------------------------------------
00011A78                            Map_obj5C:
00011A78                            	include "_maps\obj5C.asm"
00011A78                            ; ---------------------------------------------------------------------------
00011A78                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011A78                            ; ---------------------------------------------------------------------------
00011A78 0000                       		dc.w byte_11098-Map_obj5C
00011A7A 09                         byte_11098:	dc.b 9
00011A7B 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011A80 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011A85 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011A8A E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011A8F 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011A94 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011A99 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011A9E 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011AA3 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011AA8                            		even
00011AA8                            		even
00011AA8                            
00011AA8                            ; ===========================================================================
00011AA8                            ; ---------------------------------------------------------------------------
00011AA8                            ; Object 1B - water surface (LZ)
00011AA8                            ; ---------------------------------------------------------------------------
00011AA8                            
00011AA8                            Obj1B:					; XREF: Obj_Index
00011AA8 7000                       		moveq	#0,d0
00011AAA 1028 0024                  		move.b	$24(a0),d0
00011AAE 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011AB2 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011AB6                            ; ===========================================================================
00011AB6 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011AB8 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011ABA                            ; ===========================================================================
00011ABA                            
00011ABA                            Obj1B_Main:				; XREF: Obj1B_Index
00011ABA 5428 0024                  		addq.b	#2,$24(a0)
00011ABE 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011AC6 317C C300 0002             		move.w	#$C300,2(a0)
00011ACC 117C 0004 0001             		move.b	#4,1(a0)
00011AD2 117C 0080 0019             		move.b	#$80,$19(a0)
00011AD8 3168 0008 0030             		move.w	8(a0),$30(a0)
00011ADE                            
00011ADE                            Obj1B_Action:				; XREF: Obj1B_Index
00011ADE 3238 F700                  		move.w	($FFFFF700).w,d1
00011AE2 0241 FFE0                  		andi.w	#$FFE0,d1
00011AE6 D268 0030                  		add.w	$30(a0),d1
00011AEA 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011AF0 6700                       		beq.s	loc_11114
00011AF2 0641 0020                  		addi.w	#$20,d1
00011AF6                            
00011AF6                            loc_11114:
00011AF6 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011AFA 3238 F646                  		move.w	($FFFFF646).w,d1
00011AFE 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011B02 4A28 0032                  		tst.b	$32(a0)
00011B06 6600                       		bne.s	Obj1B_Animate
00011B08 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011B0E 6700                       		beq.s	loc_1114A	; if not, branch
00011B10 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011B14 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011B1A 6000                       		bra.s	Obj1B_Display
00011B1C                            ; ===========================================================================
00011B1C                            
00011B1C                            Obj1B_Animate:				; XREF: loc_11114
00011B1C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011B20 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011B22 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011B28 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011B2C                            
00011B2C                            loc_1114A:				; XREF: loc_11114
00011B2C 5328 001E                  		subq.b	#1,$1E(a0)
00011B30 6A00                       		bpl.s	Obj1B_Display
00011B32 117C 0007 001E             		move.b	#7,$1E(a0)
00011B38 5228 001A                  		addq.b	#1,$1A(a0)
00011B3C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011B42 6500                       		bcs.s	Obj1B_Display
00011B44 117C 0000 001A             		move.b	#0,$1A(a0)
00011B4A                            
00011B4A                            Obj1B_Display:
00011B4A 6000 C4AA                  		bra.w	DisplaySprite
00011B4E                            ; ===========================================================================
00011B4E                            ; ---------------------------------------------------------------------------
00011B4E                            ; Sprite mappings - water surface (LZ)
00011B4E                            ; ---------------------------------------------------------------------------
00011B4E                            Map_obj1B:
00011B4E                            	include "_maps\obj1B.asm"
00011B4E                            ; ---------------------------------------------------------------------------
00011B4E                            ; Sprite mappings - water surface (LZ)
00011B4E                            ; ---------------------------------------------------------------------------
00011B4E 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011B52 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011B56 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011B5A 03                         byte_11178:	dc.b 3
00011B5B FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011B60 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011B65 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011B6A 03                         byte_11188:	dc.b 3
00011B6B FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011B70 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011B75 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011B7A 03                         byte_11198:	dc.b 3
00011B7B FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011B80 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011B85 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011B8A 06                         byte_111A8:	dc.b 6
00011B8B FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011B90 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011B95 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011B9A FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011B9F FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011BA4 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011BA9 06                         byte_111C7:	dc.b 6
00011BAA FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011BAF FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011BB4 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011BB9 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011BBE FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011BC3 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011BC8 06                         byte_111E6:	dc.b 6
00011BC9 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011BCE FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011BD3 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011BD8 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011BDD FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011BE2 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011BE8 00                         		even
00011BE8 00                         		even
00011BE8                            
00011BE8                            ; ===========================================================================
00011BE8                            ; ---------------------------------------------------------------------------
00011BE8                            ; Object 0B - pole that	breaks (LZ)
00011BE8                            ; ---------------------------------------------------------------------------
00011BE8                            
00011BE8                            Obj0B:					; XREF: Obj_Index
00011BE8 7000                       		moveq	#0,d0
00011BEA 1028 0024                  		move.b	$24(a0),d0
00011BEE 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011BF2 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011BF6                            ; ===========================================================================
00011BF6 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011BF8 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011BFA 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011BFC                            ; ===========================================================================
00011BFC                            
00011BFC                            Obj0B_Main:				; XREF: Obj0B_Index
00011BFC 5428 0024                  		addq.b	#2,$24(a0)
00011C00 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011C08 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011C0E 117C 0004 0001             		move.b	#4,1(a0)
00011C14 117C 0008 0019             		move.b	#8,$19(a0)
00011C1A 117C 0004 0018             		move.b	#4,$18(a0)
00011C20 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011C26 7000                       		moveq	#0,d0
00011C28 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C2C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011C30 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011C34                            
00011C34                            Obj0B_Action:				; XREF: Obj0B_Index
00011C34 4A28 0032                  		tst.b	$32(a0)
00011C38 6700                       		beq.s	Obj0B_Grab
00011C3A 4A68 0030                  		tst.w	$30(a0)
00011C3E 6700                       		beq.s	Obj0B_MoveUp
00011C40 5368 0030                  		subq.w	#1,$30(a0)
00011C44 6600                       		bne.s	Obj0B_MoveUp
00011C46 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011C4C 6000                       		bra.s	Obj0B_Release
00011C4E                            ; ===========================================================================
00011C4E                            
00011C4E                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011C4E 43F8 D000                  		lea	($FFFFD000).w,a1
00011C52 3028 000C                  		move.w	$C(a0),d0
00011C56 0440 0018                  		subi.w	#$18,d0
00011C5A 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011C60 6700                       		beq.s	Obj0B_MoveDown
00011C62 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011C66 B069 000C                  		cmp.w	$C(a1),d0
00011C6A 6500                       		bcs.s	Obj0B_MoveDown
00011C6C 3340 000C                  		move.w	d0,$C(a1)
00011C70                            
00011C70                            Obj0B_MoveDown:
00011C70 0640 0024                  		addi.w	#$24,d0
00011C74 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011C7A 6700                       		beq.s	Obj0B_LetGo
00011C7C 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011C80 B069 000C                  		cmp.w	$C(a1),d0
00011C84 6400                       		bcc.s	Obj0B_LetGo
00011C86 3340 000C                  		move.w	d0,$C(a1)
00011C8A                            
00011C8A                            Obj0B_LetGo:
00011C8A 1038 F603                  		move.b	($FFFFF603).w,d0
00011C8E 0240 0070                  		andi.w	#$70,d0
00011C92 6700                       		beq.s	Obj0B_Display
00011C94                            
00011C94                            Obj0B_Release:				; XREF: Obj0B_Action
00011C94 4228 0020                  		clr.b	$20(a0)
00011C98 5428 0024                  		addq.b	#2,$24(a0)
00011C9C 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011CA0 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011CA4 4228 0032                  		clr.b	$32(a0)
00011CA8 6000                       		bra.s	Obj0B_Display
00011CAA                            ; ===========================================================================
00011CAA                            
00011CAA                            Obj0B_Grab:				; XREF: Obj0B_Action
00011CAA 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011CAE 6700                       		beq.s	Obj0B_Display	; if not, branch
00011CB0 43F8 D000                  		lea	($FFFFD000).w,a1
00011CB4 3028 0008                  		move.w	8(a0),d0
00011CB8 0640 0014                  		addi.w	#$14,d0
00011CBC B069 0008                  		cmp.w	8(a1),d0
00011CC0 6400                       		bcc.s	Obj0B_Display
00011CC2 4228 0021                  		clr.b	$21(a0)
00011CC6 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011CCC 6400                       		bcc.s	Obj0B_Display
00011CCE 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011CD2 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011CD6 3028 0008                  		move.w	8(a0),d0
00011CDA 0640 0014                  		addi.w	#$14,d0
00011CDE 3340 0008                  		move.w	d0,8(a1)
00011CE2 08A9 0000 0022             		bclr	#0,$22(a1)
00011CE8 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011CEE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011CF4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011CFA 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011D00                            
00011D00                            Obj0B_Display:				; XREF: Obj0B_Index
00011D00 6000 E39C                  		bra.w	MarkObjGone
00011D04                            ; ===========================================================================
00011D04                            ; ---------------------------------------------------------------------------
00011D04                            ; Sprite mappings - pole that breaks (LZ)
00011D04                            ; ---------------------------------------------------------------------------
00011D04                            Map_obj0B:
00011D04                            	include "_maps\obj0B.asm"
00011D04                            ; ---------------------------------------------------------------------------
00011D04                            ; Sprite mappings - pole that breaks (LZ)
00011D04                            ; ---------------------------------------------------------------------------
00011D04 0000                       		dc.w byte_11326-Map_obj0B
00011D06 0000                       		dc.w byte_11331-Map_obj0B
00011D08 02                         byte_11326:	dc.b 2			; normal pole
00011D09 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011D0E 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011D13 04                         byte_11331:	dc.b 4			; broken pole
00011D14 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011D19 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011D1E 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011D23 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011D28                            		even
00011D28                            		even
00011D28                            
00011D28                            ; ===========================================================================
00011D28                            ; ---------------------------------------------------------------------------
00011D28                            ; Object 0C - flapping door (LZ)
00011D28                            ; ---------------------------------------------------------------------------
00011D28                            
00011D28                            Obj0C:					; XREF: Obj_Index
00011D28 7000                       		moveq	#0,d0
00011D2A 1028 0024                  		move.b	$24(a0),d0
00011D2E 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011D32 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011D36                            ; ===========================================================================
00011D36 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011D38 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011D3A                            ; ===========================================================================
00011D3A                            
00011D3A                            Obj0C_Main:				; XREF: Obj0C_Index
00011D3A 5428 0024                  		addq.b	#2,$24(a0)
00011D3E 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011D46 317C 4328 0002             		move.w	#$4328,2(a0)
00011D4C 0028 0004 0001             		ori.b	#4,1(a0)
00011D52 117C 0028 0019             		move.b	#$28,$19(a0)
00011D58 7000                       		moveq	#0,d0
00011D5A 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D5E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011D62 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011D66                            
00011D66                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011D66 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011D6A 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011D6C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011D72 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011D78 4A28 0001                  		tst.b	1(a0)
00011D7C 6A00                       		bpl.s	Obj0C_Solid
00011D7E 303C 00BB                  		move.w	#$BB,d0
00011D82 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play door sound
00011D88                            
00011D88                            Obj0C_Solid:
00011D88 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011D8E 6100 92BC                  		bsr.w	AnimateSprite
00011D92 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011D96 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011D9A 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011D9C 3038 D008                  		move.w	($FFFFD008).w,d0
00011DA0 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011DA4 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011DA6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011DAC 323C 0013                  		move.w	#$13,d1
00011DB0 343C 0020                  		move.w	#$20,d2
00011DB4 3602                       		move.w	d2,d3
00011DB6 5243                       		addq.w	#1,d3
00011DB8 3828 0008                  		move.w	8(a0),d4
00011DBC 6100 E608                  		bsr.w	SolidObject	; make the door	solid
00011DC0                            
00011DC0                            Obj0C_Display:
00011DC0 6000 E2DC                  		bra.w	MarkObjGone
00011DC4                            ; ===========================================================================
00011DC4                            Ani_obj0C:
00011DC4                            	include "_anim\obj0C.asm"
00011DC4                            ; ---------------------------------------------------------------------------
00011DC4                            ; Animation script - flapping door (LZ)
00011DC4                            ; ---------------------------------------------------------------------------
00011DC4 0000                       		dc.w byte_113E6-Ani_obj0C
00011DC6 0000                       		dc.w byte_113EC-Ani_obj0C
00011DC8 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011DCE 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011DD4                            		even
00011DD4                            		even
00011DD4                            
00011DD4                            ; ---------------------------------------------------------------------------
00011DD4                            ; Sprite mappings - flapping door (LZ)
00011DD4                            ; ---------------------------------------------------------------------------
00011DD4                            Map_obj0C:
00011DD4                            	include "_maps\obj0C.asm"
00011DD4                            ; ---------------------------------------------------------------------------
00011DD4                            ; Sprite mappings - flapping door (LZ)
00011DD4                            ; ---------------------------------------------------------------------------
00011DD4 0000                       		dc.w byte_113F8-Map_obj0C
00011DD6 0000                       		dc.w byte_11403-Map_obj0C
00011DD8 0000                       		dc.w byte_1140E-Map_obj0C
00011DDA 02                         byte_113F8:	dc.b 2
00011DDB E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011DE0 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011DE5 02                         byte_11403:	dc.b 2
00011DE6 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011DEB 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011DF0 02                         byte_1140E:	dc.b 2
00011DF1 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011DF6 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011DFC 00                         		even
00011DFC 00                         		even
00011DFC                            
00011DFC                            ; ===========================================================================
00011DFC                            ; ---------------------------------------------------------------------------
00011DFC                            ; Object 71 - invisible	solid blocks
00011DFC                            ; ---------------------------------------------------------------------------
00011DFC                            
00011DFC                            Obj71:					; XREF: Obj_Index
00011DFC 7000                       		moveq	#0,d0
00011DFE 1028 0024                  		move.b	$24(a0),d0
00011E02 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011E06 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011E0A                            ; ===========================================================================
00011E0A 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011E0C 0000                       		dc.w Obj71_Solid-Obj71_Index
00011E0E                            ; ===========================================================================
00011E0E                            
00011E0E                            Obj71_Main:				; XREF: Obj71_Index
00011E0E 5428 0024                  		addq.b	#2,$24(a0)
00011E12 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011E1A 317C 8680 0002             		move.w	#$8680,2(a0)
00011E20 0028 0004 0001             		ori.b	#4,1(a0)
00011E26 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E2A 1200                       		move.b	d0,d1
00011E2C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011E30 0640 0010                  		addi.w	#$10,d0
00011E34 E248                       		lsr.w	#1,d0
00011E36 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011E3A 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011E3E 5241                       		addq.w	#1,d1
00011E40 E749                       		lsl.w	#3,d1
00011E42 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011E46                            
00011E46                            Obj71_Solid:				; XREF: Obj71_Index
00011E46 6100 C428                  		bsr.w	ChkObjOnScreen
00011E4A 6600                       		bne.s	Obj71_ChkDel
00011E4C 7200                       		moveq	#0,d1
00011E4E 1228 0019                  		move.b	$19(a0),d1
00011E52 0641 000B                  		addi.w	#$B,d1
00011E56 7400                       		moveq	#0,d2
00011E58 1428 0016                  		move.b	$16(a0),d2
00011E5C 3602                       		move.w	d2,d3
00011E5E 5243                       		addq.w	#1,d3
00011E60 3828 0008                  		move.w	8(a0),d4
00011E64 6100 E5A8                  		bsr.w	SolidObject71
00011E68                            
00011E68                            Obj71_ChkDel:
00011E68 3028 0008                  		move.w	8(a0),d0
00011E6C 0240 FF80                  		andi.w	#$FF80,d0
00011E70 3238 F700                  		move.w	($FFFFF700).w,d1
00011E74 0441 0080                  		subi.w	#$80,d1
00011E78 0241 FF80                  		andi.w	#$FF80,d1
00011E7C 9041                       		sub.w	d1,d0
00011E7E 0C40 0280                  		cmpi.w	#$280,d0
00011E82 6200                       		bhi.s	Obj71_Delete
00011E84 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011E88 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011E8A 4EFA C16A                  		jmp	DisplaySprite	; if yes, display the object
00011E8E                            ; ===========================================================================
00011E8E                            
00011E8E                            Obj71_NoDisplay:
00011E8E 4E75                       		rts	
00011E90                            ; ===========================================================================
00011E90                            
00011E90                            Obj71_Delete:
00011E90 4EFA C1A0                  		jmp	DeleteObject
00011E94                            ; ===========================================================================
00011E94                            ; ---------------------------------------------------------------------------
00011E94                            ; Sprite mappings - invisible solid blocks
00011E94                            ; ---------------------------------------------------------------------------
00011E94                            Map_obj71:
00011E94                            	include "_maps\obj71.asm"
00011E94                            ; ---------------------------------------------------------------------------
00011E94                            ; Sprite mappings - invisible solid blocks
00011E94                            ; ---------------------------------------------------------------------------
00011E94 0000                       		dc.w byte_114BC-Map_obj71
00011E96 0000                       		dc.w byte_114D1-Map_obj71
00011E98 0000                       		dc.w byte_114E6-Map_obj71
00011E9A 04                         byte_114BC:	dc.b 4
00011E9B F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011EA0 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011EA5 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011EAA 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011EAF 04                         byte_114D1:	dc.b 4
00011EB0 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011EB5 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011EBA 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011EBF 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011EC4 04                         byte_114E6:	dc.b 4
00011EC5 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011ECA E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011ECF 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011ED4 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011EDA 00                         		even
00011EDA 00                         		even
00011EDA                            
00011EDA                            ; ===========================================================================
00011EDA                            ; ---------------------------------------------------------------------------
00011EDA                            ; Object 5D - fans (SLZ)
00011EDA                            ; ---------------------------------------------------------------------------
00011EDA                            
00011EDA                            Obj5D:					; XREF: Obj_Index
00011EDA 7000                       		moveq	#0,d0
00011EDC 1028 0024                  		move.b	$24(a0),d0
00011EE0 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011EE4 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011EE8                            ; ===========================================================================
00011EE8 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011EEA 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011EEC                            ; ===========================================================================
00011EEC                            
00011EEC                            Obj5D_Main:				; XREF: Obj5D_Index
00011EEC 5428 0024                  		addq.b	#2,$24(a0)
00011EF0 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011EF8 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011EFE 0028 0004 0001             		ori.b	#4,1(a0)
00011F04 117C 0010 0019             		move.b	#$10,$19(a0)
00011F0A 117C 0004 0018             		move.b	#4,$18(a0)
00011F10                            
00011F10                            Obj5D_Delay:				; XREF: Obj5D_Index
00011F10 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011F16 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011F18 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011F1C 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011F1E 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011F24 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011F2A 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011F2C 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011F32                            
00011F32                            Obj5D_Blow:
00011F32 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011F36 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011F3A 43F8 D000                  		lea	($FFFFD000).w,a1
00011F3E 3029 0008                  		move.w	8(a1),d0
00011F42 9068 0008                  		sub.w	8(a0),d0
00011F46 0828 0000 0022             		btst	#0,$22(a0)
00011F4C 6600                       		bne.s	Obj5D_ChkSonic
00011F4E 4440                       		neg.w	d0
00011F50                            
00011F50                            Obj5D_ChkSonic:
00011F50 0640 0050                  		addi.w	#$50,d0
00011F54 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011F58 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011F5A 3229 000C                  		move.w	$C(a1),d1
00011F5E 0641 0060                  		addi.w	#$60,d1
00011F62 9268 000C                  		sub.w	$C(a0),d1
00011F66 6500                       		bcs.s	Obj5D_Animate
00011F68 0C41 0070                  		cmpi.w	#$70,d1
00011F6C 6400                       		bcc.s	Obj5D_Animate
00011F6E 0440 0050                  		subi.w	#$50,d0
00011F72 6400                       		bcc.s	loc_1159A
00011F74 4640                       		not.w	d0
00011F76 D040                       		add.w	d0,d0
00011F78                            
00011F78                            loc_1159A:
00011F78 0640 0060                  		addi.w	#$60,d0
00011F7C 0828 0000 0022             		btst	#0,$22(a0)
00011F82 6600                       		bne.s	loc_115A8
00011F84 4440                       		neg.w	d0
00011F86                            
00011F86                            loc_115A8:
00011F86 4400                       		neg.b	d0
00011F88 E840                       		asr.w	#4,d0
00011F8A 0828 0000 0028             		btst	#0,$28(a0)
00011F90 6700                       		beq.s	Obj5D_MoveSonic
00011F92 4440                       		neg.w	d0
00011F94                            
00011F94                            Obj5D_MoveSonic:
00011F94 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011F98                            
00011F98                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011F98 5328 001E                  		subq.b	#1,$1E(a0)
00011F9C 6A00                       		bpl.s	Obj5D_ChkDel
00011F9E 117C 0000 001E             		move.b	#0,$1E(a0)
00011FA4 5228 001B                  		addq.b	#1,$1B(a0)
00011FA8 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011FAE 6500                       		bcs.s	loc_115D8
00011FB0 117C 0000 001B             		move.b	#0,$1B(a0)
00011FB6                            
00011FB6                            loc_115D8:
00011FB6 7000                       		moveq	#0,d0
00011FB8 0828 0000 0028             		btst	#0,$28(a0)
00011FBE 6700                       		beq.s	loc_115E4
00011FC0 7002                       		moveq	#2,d0
00011FC2                            
00011FC2                            loc_115E4:
00011FC2 D028 001B                  		add.b	$1B(a0),d0
00011FC6 1140 001A                  		move.b	d0,$1A(a0)
00011FCA                            
00011FCA                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011FCA 6100 C02A                  		bsr.w	DisplaySprite
00011FCE 3028 0008                  		move.w	8(a0),d0
00011FD2 0240 FF80                  		andi.w	#$FF80,d0
00011FD6 3238 F700                  		move.w	($FFFFF700).w,d1
00011FDA 0441 0080                  		subi.w	#$80,d1
00011FDE 0241 FF80                  		andi.w	#$FF80,d1
00011FE2 9041                       		sub.w	d1,d0
00011FE4 0C40 0280                  		cmpi.w	#$280,d0
00011FE8 6200 C048                  		bhi.w	DeleteObject
00011FEC 4E75                       		rts	
00011FEE                            ; ===========================================================================
00011FEE                            ; ---------------------------------------------------------------------------
00011FEE                            ; Sprite mappings - fans (SLZ)
00011FEE                            ; ---------------------------------------------------------------------------
00011FEE                            Map_obj5D:
00011FEE                            	include "_maps\obj5D.asm"
00011FEE                            ; ---------------------------------------------------------------------------
00011FEE                            ; Sprite mappings - fans (SLZ)
00011FEE                            ; ---------------------------------------------------------------------------
00011FEE 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011FF2 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011FF6 0000                       		dc.w byte_1161A-Map_obj5D
00011FF8 02                         byte_1161A:	dc.b 2
00011FF9 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011FFE 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012003 02                         byte_11625:	dc.b 2
00012004 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012009 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001200E 02                         byte_11630:	dc.b 2
0001200F F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012014 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001201A 00                         		even
0001201A 00                         		even
0001201A                            
0001201A                            ; ===========================================================================
0001201A                            ; ---------------------------------------------------------------------------
0001201A                            ; Object 5E - seesaws (SLZ)
0001201A                            ; ---------------------------------------------------------------------------
0001201A                            
0001201A                            Obj5E:					; XREF: Obj_Index
0001201A 7000                       		moveq	#0,d0
0001201C 1028 0024                  		move.b	$24(a0),d0
00012020 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012024 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012028 3028 0030                  		move.w	$30(a0),d0
0001202C 0240 FF80                  		andi.w	#$FF80,d0
00012030 3238 F700                  		move.w	($FFFFF700).w,d1
00012034 0441 0080                  		subi.w	#$80,d1
00012038 0241 FF80                  		andi.w	#$FF80,d1
0001203C 9041                       		sub.w	d1,d0
0001203E 6B00 BFF2                  		bmi.w	DeleteObject
00012042 0C40 0280                  		cmpi.w	#$280,d0
00012046 6200 BFEA                  		bhi.w	DeleteObject
0001204A 6000 BFAA                  		bra.w	DisplaySprite
0001204E                            ; ===========================================================================
0001204E 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012050 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012052 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012054 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012056 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00012058 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001205A                            ; ===========================================================================
0001205A                            
0001205A                            Obj5E_Main:				; XREF: Obj5E_Index
0001205A 5428 0024                  		addq.b	#2,$24(a0)
0001205E 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00012066 317C 0374 0002             		move.w	#$374,2(a0)
0001206C 0028 0004 0001             		ori.b	#4,1(a0)
00012072 117C 0004 0018             		move.b	#4,$18(a0)
00012078 117C 0030 0019             		move.b	#$30,$19(a0)
0001207E 3168 0008 0030             		move.w	8(a0),$30(a0)
00012084 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00012088 6600                       		bne.s	loc_116D2	; if not, branch
0001208A 6100 C406                  		bsr.w	SingleObjLoad2
0001208E 6600                       		bne.s	loc_116D2
00012090 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00012094 5C29 0024                  		addq.b	#6,$24(a1)
00012098 3368 0008 0008             		move.w	8(a0),8(a1)
0001209E 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120A4 1368 0022 0022             		move.b	$22(a0),$22(a1)
000120AA 2348 003C                  		move.l	a0,$3C(a1)
000120AE                            
000120AE                            loc_116D2:
000120AE 0828 0000 0022             		btst	#0,$22(a0)
000120B4 6700                       		beq.s	loc_116E0
000120B6 117C 0002 001A             		move.b	#2,$1A(a0)
000120BC                            
000120BC                            loc_116E0:
000120BC 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000120C2                            
000120C2                            Obj5E_Slope:				; XREF: Obj5E_Index
000120C2 1228 003A                  		move.b	$3A(a0),d1
000120C6 6100 0000                  		bsr.w	loc_11766
000120CA 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000120D0 0828 0000 001A             		btst	#0,$1A(a0)
000120D6 6700                       		beq.s	loc_11702
000120D8 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000120DE                            
000120DE                            loc_11702:
000120DE 43F8 D000                  		lea	($FFFFD000).w,a1
000120E2 3169 0012 0038             		move.w	$12(a1),$38(a0)
000120E8 323C 0030                  		move.w	#$30,d1
000120EC 4EB9 0000 7CDC             		jsr	(SlopeObject).l
000120F2 4E75                       		rts	
000120F4                            ; ===========================================================================
000120F4                            
000120F4                            Obj5E_Slope2:				; XREF: Obj5E_Index
000120F4 6100 0000                  		bsr.w	loc_1174A
000120F8 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000120FE 0828 0000 001A             		btst	#0,$1A(a0)
00012104 6700                       		beq.s	loc_11730
00012106 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001210C                            
0001210C                            loc_11730:
0001210C 323C 0030                  		move.w	#$30,d1
00012110 4EB9 0000 7D7C             		jsr	(ExitPlatform).l
00012116 323C 0030                  		move.w	#$30,d1
0001211A 3428 0008                  		move.w	8(a0),d2
0001211E 4EB9 0000 8D6C             		jsr	SlopeObject2
00012124 4E75                       		rts	
00012126                            ; ===========================================================================
00012126                            
00012126                            loc_1174A:				; XREF: Obj5E_Slope2
00012126 7202                       		moveq	#2,d1
00012128 43F8 D000                  		lea	($FFFFD000).w,a1
0001212C 3028 0008                  		move.w	8(a0),d0
00012130 9069 0008                  		sub.w	8(a1),d0
00012134 6400                       		bcc.s	loc_1175E
00012136 4440                       		neg.w	d0
00012138 7200                       		moveq	#0,d1
0001213A                            
0001213A                            loc_1175E:
0001213A 0C40 0008                  		cmpi.w	#8,d0
0001213E 6400                       		bcc.s	loc_11766
00012140 7201                       		moveq	#1,d1
00012142                            
00012142                            loc_11766:
00012142 1028 001A                  		move.b	$1A(a0),d0
00012146 B001                       		cmp.b	d1,d0
00012148 6700                       		beq.s	locret_11790
0001214A 6400                       		bcc.s	loc_11772
0001214C 5400                       		addq.b	#2,d0
0001214E                            
0001214E                            loc_11772:
0001214E 5300                       		subq.b	#1,d0
00012150 1140 001A                  		move.b	d0,$1A(a0)
00012154 1141 003A                  		move.b	d1,$3A(a0)
00012158 08A8 0000 0001             		bclr	#0,1(a0)
0001215E 0828 0001 001A             		btst	#1,$1A(a0)
00012164 6700                       		beq.s	locret_11790
00012166 08E8 0000 0001             		bset	#0,1(a0)
0001216C                            
0001216C                            locret_11790:
0001216C 4E75                       		rts	
0001216E                            ; ===========================================================================
0001216E                            
0001216E                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001216E 5428 0024                  		addq.b	#2,$24(a0)
00012172 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001217A 317C 04F0 0002             		move.w	#$4F0,2(a0)
00012180 0028 0004 0001             		ori.b	#4,1(a0)
00012186 117C 0004 0018             		move.b	#4,$18(a0)
0001218C 117C 008B 0020             		move.b	#$8B,$20(a0)
00012192 117C 000C 0019             		move.b	#$C,$19(a0)
00012198 3168 0008 0030             		move.w	8(a0),$30(a0)
0001219E 0668 0028 0008             		addi.w	#$28,8(a0)
000121A4 3168 000C 0034             		move.w	$C(a0),$34(a0)
000121AA 117C 0001 001A             		move.b	#1,$1A(a0)
000121B0 0828 0000 0022             		btst	#0,$22(a0)
000121B6 6700                       		beq.s	Obj5E_MoveSpike
000121B8 0468 0050 0008             		subi.w	#$50,8(a0)
000121BE 117C 0002 003A             		move.b	#2,$3A(a0)
000121C4                            
000121C4                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000121C4 2268 003C                  		movea.l	$3C(a0),a1
000121C8 7000                       		moveq	#0,d0
000121CA 1028 003A                  		move.b	$3A(a0),d0
000121CE 9029 003A                  		sub.b	$3A(a1),d0
000121D2 6700                       		beq.s	loc_1183E
000121D4 6400                       		bcc.s	loc_117FC
000121D6 4400                       		neg.b	d0
000121D8                            
000121D8                            loc_117FC:
000121D8 323C F7E8                  		move.w	#-$818,d1
000121DC 343C FEEC                  		move.w	#-$114,d2
000121E0 0C00 0001                  		cmpi.b	#1,d0
000121E4 6700                       		beq.s	loc_11822
000121E6 323C F510                  		move.w	#-$AF0,d1
000121EA 343C FF34                  		move.w	#-$CC,d2
000121EE 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000121F4 6D00                       		blt.s	loc_11822
000121F6 323C F200                  		move.w	#-$E00,d1
000121FA 343C FF60                  		move.w	#-$A0,d2
000121FE                            
000121FE                            loc_11822:
000121FE 3141 0012                  		move.w	d1,$12(a0)
00012202 3142 0010                  		move.w	d2,$10(a0)
00012206 3028 0008                  		move.w	8(a0),d0
0001220A 9068 0030                  		sub.w	$30(a0),d0
0001220E 6400                       		bcc.s	loc_11838
00012210 4468 0010                  		neg.w	$10(a0)
00012214                            
00012214                            loc_11838:
00012214 5428 0024                  		addq.b	#2,$24(a0)
00012218 6000                       		bra.s	Obj5E_SpikeFall
0001221A                            ; ===========================================================================
0001221A                            
0001221A                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001221A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012220 7000                       		moveq	#0,d0
00012222 1029 001A                  		move.b	$1A(a1),d0
00012226 343C 0028                  		move.w	#$28,d2
0001222A 3228 0008                  		move.w	8(a0),d1
0001222E 9268 0030                  		sub.w	$30(a0),d1
00012232 6400                       		bcc.s	loc_1185C
00012234 4442                       		neg.w	d2
00012236 5440                       		addq.w	#2,d0
00012238                            
00012238                            loc_1185C:
00012238 D040                       		add.w	d0,d0
0001223A 3228 0034                  		move.w	$34(a0),d1
0001223E D272 0000                  		add.w	(a2,d0.w),d1
00012242 3141 000C                  		move.w	d1,$C(a0)
00012246 D468 0030                  		add.w	$30(a0),d2
0001224A 3142 0008                  		move.w	d2,8(a0)
0001224E 4268 000E                  		clr.w	$E(a0)
00012252 4268 000A                  		clr.w	$A(a0)
00012256 4E75                       		rts	
00012258                            ; ===========================================================================
00012258                            
00012258                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00012258 4A68 0012                  		tst.w	$12(a0)
0001225C 6A00                       		bpl.s	loc_1189A
0001225E 6100 BCFE                  		bsr.w	ObjectFall
00012262 3028 0034                  		move.w	$34(a0),d0
00012266 0440 002F                  		subi.w	#$2F,d0
0001226A B068 000C                  		cmp.w	$C(a0),d0
0001226E 6E00                       		bgt.s	locret_11898
00012270 6100 BCEC                  		bsr.w	ObjectFall
00012274                            
00012274                            locret_11898:
00012274 4E75                       		rts	
00012276                            ; ===========================================================================
00012276                            
00012276                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012276 6100 BCE6                  		bsr.w	ObjectFall
0001227A 2268 003C                  		movea.l	$3C(a0),a1
0001227E 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012284 7000                       		moveq	#0,d0
00012286 1029 001A                  		move.b	$1A(a1),d0
0001228A 3228 0008                  		move.w	8(a0),d1
0001228E 9268 0030                  		sub.w	$30(a0),d1
00012292 6400                       		bcc.s	loc_118BA
00012294 5440                       		addq.w	#2,d0
00012296                            
00012296                            loc_118BA:
00012296 D040                       		add.w	d0,d0
00012298 3228 0034                  		move.w	$34(a0),d1
0001229C D272 0000                  		add.w	(a2,d0.w),d1
000122A0 B268 000C                  		cmp.w	$C(a0),d1
000122A4 6E00                       		bgt.s	locret_11938
000122A6 2268 003C                  		movea.l	$3C(a0),a1
000122AA 7202                       		moveq	#2,d1
000122AC 4A68 0010                  		tst.w	$10(a0)
000122B0 6B00                       		bmi.s	Obj5E_Spring
000122B2 7200                       		moveq	#0,d1
000122B4                            
000122B4                            Obj5E_Spring:
000122B4 1341 003A                  		move.b	d1,$3A(a1)
000122B8 1141 003A                  		move.b	d1,$3A(a0)
000122BC B229 001A                  		cmp.b	$1A(a1),d1
000122C0 6700                       		beq.s	loc_1192C
000122C2 08A9 0003 0022             		bclr	#3,$22(a1)
000122C8 6700                       		beq.s	loc_1192C
000122CA 4229 0025                  		clr.b	$25(a1)
000122CE 137C 0002 0024             		move.b	#2,$24(a1)
000122D4 45F8 D000                  		lea	($FFFFD000).w,a2
000122D8 3568 0012 0012             		move.w	$12(a0),$12(a2)
000122DE 446A 0012                  		neg.w	$12(a2)
000122E2 08EA 0001 0022             		bset	#1,$22(a2)
000122E8 08AA 0003 0022             		bclr	#3,$22(a2)
000122EE 422A 003C                  		clr.b	$3C(a2)
000122F2 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000122F8 157C 0002 0024             		move.b	#2,$24(a2)
000122FE 303C 00CC                  		move.w	#$CC,d0
00012302 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play spring sound
00012308                            
00012308                            loc_1192C:
00012308 4268 0010                  		clr.w	$10(a0)
0001230C 4268 0012                  		clr.w	$12(a0)
00012310 5528 0024                  		subq.b	#2,$24(a0)
00012314                            
00012314                            locret_11938:
00012314 4E75                       		rts	
00012316                            ; ===========================================================================
00012316 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012320                            
00012320                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012350                            		even
00012350                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012380                            		even
00012380                            ; ---------------------------------------------------------------------------
00012380                            ; Sprite mappings - seesaws (SLZ)
00012380                            ; ---------------------------------------------------------------------------
00012380                            Map_obj5E:
00012380                            	include "_maps\obj5E.asm"
00012380                            ; ---------------------------------------------------------------------------
00012380                            ; Sprite mappings - seesaws (SLZ)
00012380                            ; ---------------------------------------------------------------------------
00012380 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012384 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012388 07                         byte_119AC:	dc.b 7
00012389 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001238E DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012393 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012398 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
0001239D FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000123A2 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000123A7 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000123AC 04                         byte_119D0:	dc.b 4
000123AD E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000123B2 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000123B7 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000123BC E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000123C2 00                         		even
000123C2 00                         		even
000123C2                            
000123C2                            ; ---------------------------------------------------------------------------
000123C2                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000123C2                            ; ---------------------------------------------------------------------------
000123C2                            Map_obj5Ea:
000123C2                            	include "_maps\obj5Eballs.asm"
000123C2                            ; ---------------------------------------------------------------------------
000123C2                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000123C2                            ; ---------------------------------------------------------------------------
000123C2 0000                       		dc.w byte_119EA-Map_obj5Ea
000123C4 0000                       		dc.w byte_119F0-Map_obj5Ea
000123C6 01                         byte_119EA:	dc.b 1
000123C7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000123CC 01                         byte_119F0:	dc.b 1
000123CD F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000123D2                            		even
000123D2                            		even
000123D2                            
000123D2                            ; ===========================================================================
000123D2                            ; ---------------------------------------------------------------------------
000123D2                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000123D2                            ; ---------------------------------------------------------------------------
000123D2                            
000123D2                            Obj5F:					; XREF: Obj_Index
000123D2 7000                       		moveq	#0,d0
000123D4 1028 0024                  		move.b	$24(a0),d0
000123D8 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000123DC 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000123E0                            ; ===========================================================================
000123E0 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000123E2 0000                       		dc.w Obj5F_Action-Obj5F_Index
000123E4 0000                       		dc.w Obj5F_Display-Obj5F_Index
000123E6 0000                       		dc.w Obj5F_End-Obj5F_Index
000123E8                            ; ===========================================================================
000123E8                            
000123E8                            Obj5F_Main:				; XREF: Obj5F_Index
000123E8 5428 0024                  		addq.b	#2,$24(a0)
000123EC 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000123F4 317C 0400 0002             		move.w	#$400,2(a0)
000123FA 0028 0004 0001             		ori.b	#4,1(a0)
00012400 117C 0003 0018             		move.b	#3,$18(a0)
00012406 117C 000C 0019             		move.b	#$C,$19(a0)
0001240C 1028 0028                  		move.b	$28(a0),d0
00012410 6700                       		beq.s	loc_11A3C
00012412 1140 0024                  		move.b	d0,$24(a0)
00012416 4E75                       		rts	
00012418                            ; ===========================================================================
00012418                            
00012418                            loc_11A3C:
00012418 117C 009A 0020             		move.b	#$9A,$20(a0)
0001241E 0868 0000 0022             		bchg	#0,$22(a0)
00012424                            
00012424                            Obj5F_Action:				; XREF: Obj5F_Index
00012424 7000                       		moveq	#0,d0
00012426 1028 0025                  		move.b	$25(a0),d0
0001242A 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001242E 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012432 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012438 6100 8C12                  		bsr.w	AnimateSprite
0001243C 6000 DC60                  		bra.w	MarkObjGone
00012440                            ; ===========================================================================
00012440 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012442 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012444 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012446                            ; ===========================================================================
00012446                            
00012446                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012446 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001244A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001244E 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012450 5428 0025                  		addq.b	#2,$25(a0)
00012454 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001245A 317C 0010 0010             		move.w	#$10,$10(a0)
00012460 117C 0001 001C             		move.b	#1,$1C(a0)
00012466 0868 0000 0022             		bchg	#0,$22(a0)
0001246C 6700                       		beq.s	locret_11A96
0001246E 4468 0010                  		neg.w	$10(a0)		; change direction
00012472                            
00012472                            locret_11A96:
00012472 4E75                       		rts	
00012474                            ; ===========================================================================
00012474                            
00012474                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012474 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012478 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001247C 6B00                       		bmi.s	loc_11AA8
0001247E 6100 BB50                  		bsr.w	SpeedToPos
00012482 4E75                       		rts	
00012484                            ; ===========================================================================
00012484                            
00012484                            loc_11AA8:
00012484 5528 0025                  		subq.b	#2,$25(a0)
00012488 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001248E 4268 0010                  		clr.w	$10(a0)		; stop walking
00012492 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012498 4E75                       		rts	
0001249A                            ; ===========================================================================
0001249A                            
0001249A                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001249A 5368 0030                  		subq.w	#1,$30(a0)
0001249E 6A00                       		bpl.s	locret_11AD0
000124A0 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000124A4 117C 0000 0024             		move.b	#0,$24(a0)
000124AA                            
000124AA                            locret_11AD0:
000124AA 4E75                       		rts	
000124AC                            ; ===========================================================================
000124AC                            
000124AC                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000124AC 3038 D008                  		move.w	($FFFFD008).w,d0
000124B0 9068 0008                  		sub.w	8(a0),d0
000124B4 6400                       		bcc.s	loc_11ADE
000124B6 4440                       		neg.w	d0
000124B8                            
000124B8                            loc_11ADE:
000124B8 0C40 0060                  		cmpi.w	#$60,d0
000124BC 6400                       		bcc.s	locret_11B5E
000124BE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000124C2 9068 000C                  		sub.w	$C(a0),d0
000124C6 6400                       		bcc.s	Obj5F_MakeFuse
000124C8 4440                       		neg.w	d0
000124CA                            
000124CA                            Obj5F_MakeFuse:
000124CA 0C40 0060                  		cmpi.w	#$60,d0
000124CE 6400                       		bcc.s	locret_11B5E
000124D0 4A78 FE08                  		tst.w	($FFFFFE08).w
000124D4 6600                       		bne.s	locret_11B5E
000124D6 117C 0004 0025             		move.b	#4,$25(a0)
000124DC 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000124E2 4268 0010                  		clr.w	$10(a0)
000124E6 117C 0002 001C             		move.b	#2,$1C(a0)
000124EC 6100 BFA4                  		bsr.w	SingleObjLoad2
000124F0 6600                       		bne.s	locret_11B5E
000124F2 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000124F6 3368 0008 0008             		move.w	8(a0),8(a1)
000124FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012502 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012508 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001250E 137C 0004 0028             		move.b	#4,$28(a1)
00012514 137C 0003 001C             		move.b	#3,$1C(a1)
0001251A 337C 0010 0012             		move.w	#$10,$12(a1)
00012520 0828 0001 0022             		btst	#1,$22(a0)
00012526 6700                       		beq.s	loc_11B54
00012528 4469 0012                  		neg.w	$12(a1)
0001252C                            
0001252C                            loc_11B54:
0001252C 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012532 2348 003C                  		move.l	a0,$3C(a1)
00012536                            
00012536                            locret_11B5E:
00012536 4E75                       		rts	
00012538                            ; ===========================================================================
00012538                            
00012538                            Obj5F_Display:				; XREF: Obj5F_Index
00012538 6100                       		bsr.s	loc_11B70
0001253A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012540 6100 8B0A                  		bsr.w	AnimateSprite
00012544 6000 DB58                  		bra.w	MarkObjGone
00012548                            ; ===========================================================================
00012548                            
00012548                            loc_11B70:
00012548 5368 0030                  		subq.w	#1,$30(a0)
0001254C 6B00                       		bmi.s	loc_11B7C
0001254E 6100 BA80                  		bsr.w	SpeedToPos
00012552 4E75                       		rts	
00012554                            ; ===========================================================================
00012554                            
00012554                            loc_11B7C:
00012554 4268 0030                  		clr.w	$30(a0)
00012558 4228 0024                  		clr.b	$24(a0)
0001255C 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012562 7203                       		moveq	#3,d1
00012564 2248                       		movea.l	a0,a1
00012566 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001256C 6000                       		bra.s	Obj5F_MakeShrap
0001256E                            ; ===========================================================================
0001256E                            
0001256E                            Obj5F_Loop:
0001256E 6100 BF22                  		bsr.w	SingleObjLoad2
00012572 6600                       		bne.s	loc_11BCE
00012574                            
00012574                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012574 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012578 3368 0008 0008             		move.w	8(a0),8(a1)
0001257E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012584 137C 0006 0028             		move.b	#6,$28(a1)
0001258A 137C 0004 001C             		move.b	#4,$1C(a1)
00012590 335A 0010                  		move.w	(a2)+,$10(a1)
00012594 335A 0012                  		move.w	(a2)+,$12(a1)
00012598 137C 0098 0020             		move.b	#$98,$20(a1)
0001259E 08E9 0007 0001             		bset	#7,1(a1)
000125A4                            
000125A4                            loc_11BCE:
000125A4 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000125A8                            
000125A8 117C 0006 0024             		move.b	#6,$24(a0)
000125AE                            
000125AE                            Obj5F_End:				; XREF: Obj5F_Index
000125AE 6100 BA20                  		bsr.w	SpeedToPos
000125B2 0668 0018 0012             		addi.w	#$18,$12(a0)
000125B8 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000125BE 6100 8A8C                  		bsr.w	AnimateSprite
000125C2 4A28 0001                  		tst.b	1(a0)
000125C6 6A00 BA6A                  		bpl.w	DeleteObject
000125CA 6000 BA2A                  		bra.w	DisplaySprite
000125CE                            ; ===========================================================================
000125CE FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000125DE                            
000125DE                            Ani_obj5F:
000125DE                            	include "_anim\obj5F.asm"
000125DE                            ; ---------------------------------------------------------------------------
000125DE                            ; Animation script - Bomb enemy
000125DE                            ; ---------------------------------------------------------------------------
000125DE 0000                       		dc.w byte_11C12-Ani_obj5F
000125E0 0000                       		dc.w byte_11C16-Ani_obj5F
000125E2 0000                       		dc.w byte_11C1C-Ani_obj5F
000125E4 0000                       		dc.w byte_11C20-Ani_obj5F
000125E6 0000                       		dc.w byte_11C24-Ani_obj5F
000125E8 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000125EC 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000125F2 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000125F6 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000125FA 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000125FE                            		even
000125FE                            		even
000125FE                            
000125FE                            ; ---------------------------------------------------------------------------
000125FE                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000125FE                            ; ---------------------------------------------------------------------------
000125FE                            Map_obj5F:
000125FE                            	include "_maps\obj5F.asm"
000125FE                            ; ---------------------------------------------------------------------------
000125FE                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000125FE                            ; ---------------------------------------------------------------------------
000125FE 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012602 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012606 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001260A 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001260E 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012612 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012616 03                         byte_11C40:	dc.b 3
00012617 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001261C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012621 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012626 03                         byte_11C50:	dc.b 3
00012627 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001262C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012631 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012636 03                         byte_11C60:	dc.b 3
00012637 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001263C 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012641 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012646 03                         byte_11C70:	dc.b 3
00012647 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001264C 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012651 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012656 03                         byte_11C80:	dc.b 3
00012657 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001265C 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012661 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012666 03                         byte_11C90:	dc.b 3
00012667 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001266C 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012671 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012676 02                         byte_11CA0:	dc.b 2
00012677 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001267C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012681 02                         byte_11CAB:	dc.b 2
00012682 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012687 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001268C 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001268D E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012692 01                         byte_11CBC:	dc.b 1			; fuse
00012693 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012698 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012699 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001269E 01                         byte_11CC8:	dc.b 1			; fireball
0001269F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000126A4                            		even
000126A4                            		even
000126A4                            
000126A4                            ; ===========================================================================
000126A4                            ; ---------------------------------------------------------------------------
000126A4                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000126A4                            ; ---------------------------------------------------------------------------
000126A4                            
000126A4                            Obj60:					; XREF: Obj_Index
000126A4 7000                       		moveq	#0,d0
000126A6 1028 0024                  		move.b	$24(a0),d0
000126AA 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000126AE 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000126B2                            ; ===========================================================================
000126B2 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000126B4 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000126B6 0000                       		dc.w Obj60_Display-Obj60_Index
000126B8 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000126BA 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000126BC                            ; ===========================================================================
000126BC                            
000126BC                            Obj60_Main:				; XREF: Obj60_Index
000126BC 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000126C4 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000126CA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000126D0 6700                       		beq.s	loc_11D02
000126D2 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000126D8                            
000126D8                            loc_11D02:
000126D8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000126DE 6600                       		bne.s	loc_11D10
000126E0 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000126E6                            
000126E6                            loc_11D10:
000126E6 0028 0004 0001             		ori.b	#4,1(a0)
000126EC 117C 0004 0018             		move.b	#4,$18(a0)
000126F2 117C 000B 0020             		move.b	#$B,$20(a0)
000126F8 117C 000C 0019             		move.b	#$C,$19(a0)
000126FE 7400                       		moveq	#0,d2
00012700 45E8 0037                  		lea	$37(a0),a2
00012704 264A                       		movea.l	a2,a3
00012706 524A                       		addq.w	#1,a2
00012708 7203                       		moveq	#3,d1
0001270A                            
0001270A                            Obj60_MakeOrbs:
0001270A 6100 BD86                  		bsr.w	SingleObjLoad2
0001270E 6600                       		bne.s	loc_11D90
00012710 5213                       		addq.b	#1,(a3)
00012712 3A09                       		move.w	a1,d5
00012714 0445 D000                  		subi.w	#-$3000,d5
00012718 EC4D                       		lsr.w	#6,d5
0001271A 0245 007F                  		andi.w	#$7F,d5
0001271E 14C5                       		move.b	d5,(a2)+
00012720 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012722 137C 0006 0024             		move.b	#6,$24(a1)
00012728 2368 0004 0004             		move.l	4(a0),4(a1)
0001272E 3368 0002 0002             		move.w	2(a0),2(a1)
00012734 0029 0004 0001             		ori.b	#4,1(a1)
0001273A 137C 0004 0018             		move.b	#4,$18(a1)
00012740 137C 0008 0019             		move.b	#8,$19(a1)
00012746 137C 0003 001A             		move.b	#3,$1A(a1)
0001274C 137C 0098 0020             		move.b	#$98,$20(a1)
00012752 1342 0026                  		move.b	d2,$26(a1)
00012756 0602 0040                  		addi.b	#$40,d2
0001275A 2348 003C                  		move.l	a0,$3C(a1)
0001275E 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012762                            
00012762                            loc_11D90:
00012762 7001                       		moveq	#1,d0
00012764 0828 0000 0022             		btst	#0,$22(a0)
0001276A 6700                       		beq.s	Obj60_Move
0001276C 4440                       		neg.w	d0
0001276E                            
0001276E                            Obj60_Move:
0001276E 1140 0036                  		move.b	d0,$36(a0)
00012772 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012778 5428 0024                  		addq.b	#2,$24(a0)
0001277C 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012782 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012788 6700                       		beq.s	locret_11DBC	; if not, branch
0001278A 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001278E                            
0001278E                            locret_11DBC:
0001278E 4E75                       		rts	
00012790                            ; ===========================================================================
00012790                            
00012790                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012790 3038 D008                  		move.w	($FFFFD008).w,d0
00012794 9068 0008                  		sub.w	8(a0),d0
00012798 6400                       		bcc.s	loc_11DCA
0001279A 4440                       		neg.w	d0
0001279C                            
0001279C                            loc_11DCA:
0001279C 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000127A0 6400                       		bcc.s	Obj60_Animate	; if not, branch
000127A2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000127A6 9068 000C                  		sub.w	$C(a0),d0
000127AA 6400                       		bcc.s	loc_11DDC
000127AC 4440                       		neg.w	d0
000127AE                            
000127AE                            loc_11DDC:
000127AE 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000127B2 6400                       		bcc.s	Obj60_Animate	; if not, branch
000127B4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000127B8 6600                       		bne.s	Obj60_Animate	; if yes, branch
000127BA 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000127C0                            
000127C0                            Obj60_Animate:
000127C0 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000127C6 6100 8884                  		bsr.w	AnimateSprite
000127CA 6000 0000                  		bra.w	Obj60_ChkDel
000127CE                            ; ===========================================================================
000127CE                            
000127CE                            Obj60_Display:				; XREF: Obj60_Index
000127CE 6100 B800                  		bsr.w	SpeedToPos
000127D2                            
000127D2                            Obj60_ChkDel:				; XREF: Obj60_Animate
000127D2 3028 0008                  		move.w	8(a0),d0
000127D6 0240 FF80                  		andi.w	#$FF80,d0
000127DA 3238 F700                  		move.w	($FFFFF700).w,d1
000127DE 0441 0080                  		subi.w	#$80,d1
000127E2 0241 FF80                  		andi.w	#$FF80,d1
000127E6 9041                       		sub.w	d1,d0
000127E8 0C40 0280                  		cmpi.w	#$280,d0
000127EC 6200 0000                  		bhi.w	Obj60_ChkGone
000127F0 6000 B804                  		bra.w	DisplaySprite
000127F4                            ; ===========================================================================
000127F4                            
000127F4                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000127F4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000127F8 7000                       		moveq	#0,d0
000127FA 1028 0023                  		move.b	$23(a0),d0
000127FE 6700                       		beq.s	loc_11E34
00012800 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012806                            
00012806                            loc_11E34:
00012806 45E8 0037                  		lea	$37(a0),a2
0001280A 7400                       		moveq	#0,d2
0001280C 141A                       		move.b	(a2)+,d2
0001280E 5342                       		subq.w	#1,d2
00012810 6500                       		bcs.s	Obj60_Delete
00012812                            
00012812                            loc_11E40:
00012812 7000                       		moveq	#0,d0
00012814 101A                       		move.b	(a2)+,d0
00012816 ED48                       		lsl.w	#6,d0
00012818 0680 00FF D000             		addi.l	#$FFD000,d0
0001281E 2240                       		movea.l	d0,a1
00012820 6100 B812                  		bsr.w	DeleteObject2
00012824 51CA FFEC                  		dbf	d2,loc_11E40
00012828                            
00012828                            Obj60_Delete:
00012828 6000 B808                  		bra.w	DeleteObject
0001282C                            ; ===========================================================================
0001282C                            
0001282C                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001282C 2268 003C                  		movea.l	$3C(a0),a1
00012830 0C11 0060                  		cmpi.b	#$60,0(a1)
00012834 6600 B7FC                  		bne.w	DeleteObject
00012838 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001283E 6600                       		bne.s	Obj60_Circle
00012840 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012846 6600                       		bne.s	Obj60_Circle
00012848 5428 0024                  		addq.b	#2,$24(a0)
0001284C 5329 0037                  		subq.b	#1,$37(a1)
00012850 6600                       		bne.s	Obj60_FireOrb
00012852 5429 0024                  		addq.b	#2,$24(a1)
00012856                            
00012856                            Obj60_FireOrb:
00012856 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
0001285C 0829 0000 0022             		btst	#0,$22(a1)
00012862 6700                       		beq.s	Obj60_Display2
00012864 4468 0010                  		neg.w	$10(a0)
00012868                            
00012868                            Obj60_Display2:
00012868 6000 B78C                  		bra.w	DisplaySprite
0001286C                            ; ===========================================================================
0001286C                            
0001286C                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001286C 1028 0026                  		move.b	$26(a0),d0
00012870 4EB9 0000 2D28             		jsr	(CalcSine).l
00012876 E841                       		asr.w	#4,d1
00012878 D269 0008                  		add.w	8(a1),d1
0001287C 3141 0008                  		move.w	d1,8(a0)
00012880 E840                       		asr.w	#4,d0
00012882 D069 000C                  		add.w	$C(a1),d0
00012886 3140 000C                  		move.w	d0,$C(a0)
0001288A 1029 0036                  		move.b	$36(a1),d0
0001288E D128 0026                  		add.b	d0,$26(a0)
00012892 6000 B762                  		bra.w	DisplaySprite
00012896                            ; ===========================================================================
00012896                            
00012896                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012896 6100 B738                  		bsr.w	SpeedToPos
0001289A 4A28 0001                  		tst.b	1(a0)
0001289E 6A00 B792                  		bpl.w	DeleteObject
000128A2 6000 B752                  		bra.w	DisplaySprite
000128A6                            ; ===========================================================================
000128A6                            Ani_obj60:
000128A6                            	include "_anim\obj60.asm"
000128A6                            ; ---------------------------------------------------------------------------
000128A6                            ; Animation script - Orbinaut enemy
000128A6                            ; ---------------------------------------------------------------------------
000128A6 0000                       		dc.w byte_11EDA-Ani_obj60
000128A8 0000                       		dc.w byte_11EDE-Ani_obj60
000128AA 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000128AE 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000128B4                            		even
000128B4                            		even
000128B4                            
000128B4                            ; ---------------------------------------------------------------------------
000128B4                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000128B4                            ; ---------------------------------------------------------------------------
000128B4                            Map_obj60:
000128B4                            	include "_maps\obj60.asm"
000128B4                            ; ---------------------------------------------------------------------------
000128B4                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000128B4                            ; ---------------------------------------------------------------------------
000128B4 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000128B8 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000128BC 01                         byte_11EEC:	dc.b 1
000128BD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000128C2 01                         byte_11EF2:	dc.b 1
000128C3 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000128C8 01                         byte_11EF8:	dc.b 1
000128C9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000128CE 01                         byte_11EFE:	dc.b 1
000128CF F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000128D4                            		even
000128D4                            		even
000128D4                            
000128D4                            ; ===========================================================================
000128D4                            ; ---------------------------------------------------------------------------
000128D4                            ; Object 16 - harpoon (LZ)
000128D4                            ; ---------------------------------------------------------------------------
000128D4                            
000128D4                            Obj16:					; XREF: Obj_Index
000128D4 7000                       		moveq	#0,d0
000128D6 1028 0024                  		move.b	$24(a0),d0
000128DA 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000128DE 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000128E2                            ; ===========================================================================
000128E2 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000128E4 0000                       		dc.w Obj16_Move-Obj16_Index
000128E6 0000                       		dc.w Obj16_Wait-Obj16_Index
000128E8                            ; ===========================================================================
000128E8                            
000128E8                            Obj16_Main:				; XREF: Obj16_Index
000128E8 5428 0024                  		addq.b	#2,$24(a0)
000128EC 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000128F4 317C 03CC 0002             		move.w	#$3CC,2(a0)
000128FA 0028 0004 0001             		ori.b	#4,1(a0)
00012900 117C 0004 0018             		move.b	#4,$18(a0)
00012906 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001290C 117C 0014 0019             		move.b	#$14,$19(a0)
00012912 317C 003C 0030             		move.w	#60,$30(a0)
00012918                            
00012918                            Obj16_Move:				; XREF: Obj16_Index
00012918 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001291E 6100 872C                  		bsr.w	AnimateSprite
00012922 7000                       		moveq	#0,d0
00012924 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012928 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001292E 6000 D76E                  		bra.w	MarkObjGone
00012932                            ; ===========================================================================
00012932 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012938                            ; ===========================================================================
00012938                            
00012938                            Obj16_Wait:				; XREF: Obj16_Index
00012938 5368 0030                  		subq.w	#1,$30(a0)
0001293C 6A00                       		bpl.s	Obj16_ChkDel
0001293E 317C 003C 0030             		move.w	#60,$30(a0)
00012944 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012948 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001294E                            
0001294E                            Obj16_ChkDel:
0001294E 6000 D74E                  		bra.w	MarkObjGone
00012952                            ; ===========================================================================
00012952                            Ani_obj16:
00012952                            	include "_anim\obj16.asm"
00012952                            ; ---------------------------------------------------------------------------
00012952                            ; Animation script - harpoon (LZ)
00012952                            ; ---------------------------------------------------------------------------
00012952 0000                       		dc.w byte_11F8A-Ani_obj16
00012954 0000                       		dc.w byte_11F8E-Ani_obj16
00012956 0000                       		dc.w byte_11F92-Ani_obj16
00012958 0000                       		dc.w byte_11F96-Ani_obj16
0001295A 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001295E 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012962 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012966 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0001296A                            		even
0001296A                            		even
0001296A                            
0001296A                            ; ---------------------------------------------------------------------------
0001296A                            ; Sprite mappings - harpoon (LZ)
0001296A                            ; ---------------------------------------------------------------------------
0001296A                            Map_obj16:
0001296A                            	include "_maps\obj16.asm"
0001296A                            ; ---------------------------------------------------------------------------
0001296A                            ; Sprite mappings - harpoon (LZ)
0001296A                            ; ---------------------------------------------------------------------------
0001296A 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001296E 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012972 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012976 01                         byte_11FA6:	dc.b 1
00012977 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001297C 01                         byte_11FAC:	dc.b 1
0001297D FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012982 02                         byte_11FB2:	dc.b 2
00012983 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012988 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001298D 01                         byte_11FBD:	dc.b 1
0001298E F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012993 01                         byte_11FC3:	dc.b 1
00012994 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012999 02                         byte_11FC9:	dc.b 2
0001299A D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001299F F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000129A4                            		even
000129A4                            		even
000129A4                            
000129A4                            ; ===========================================================================
000129A4                            ; ---------------------------------------------------------------------------
000129A4                            ; Object 61 - blocks (LZ)
000129A4                            ; ---------------------------------------------------------------------------
000129A4                            
000129A4                            Obj61:					; XREF: Obj_Index
000129A4 7000                       		moveq	#0,d0
000129A6 1028 0024                  		move.b	$24(a0),d0
000129AA 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000129AE 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000129B2                            ; ===========================================================================
000129B2 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000129B4 0000                       		dc.w Obj61_Action-Obj61_Index
000129B6                            
000129B6 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000129B8 200C                       		dc.b $20, $C
000129BA 1010                       		dc.b $10, $10
000129BC 1010                       		dc.b $10, $10
000129BE                            ; ===========================================================================
000129BE                            
000129BE                            Obj61_Main:				; XREF: Obj61_Index
000129BE 5428 0024                  		addq.b	#2,$24(a0)
000129C2 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000129CA 317C 43E6 0002             		move.w	#$43E6,2(a0)
000129D0 117C 0004 0001             		move.b	#4,1(a0)
000129D6 117C 0003 0018             		move.b	#3,$18(a0)
000129DC 7000                       		moveq	#0,d0
000129DE 1028 0028                  		move.b	$28(a0),d0
000129E2 E648                       		lsr.w	#3,d0
000129E4 0240 000E                  		andi.w	#$E,d0
000129E8 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000129EC 115A 0019                  		move.b	(a2)+,$19(a0)
000129F0 1152 0016                  		move.b	(a2),$16(a0)
000129F4 E248                       		lsr.w	#1,d0
000129F6 1140 001A                  		move.b	d0,$1A(a0)
000129FA 3168 0008 0034             		move.w	8(a0),$34(a0)
00012A00 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012A06 1028 0028                  		move.b	$28(a0),d0
00012A0A 0200 000F                  		andi.b	#$F,d0
00012A0E 6700                       		beq.s	Obj61_Action
00012A10 0C00 0007                  		cmpi.b	#7,d0
00012A14 6700                       		beq.s	Obj61_Action
00012A16 117C 0001 0038             		move.b	#1,$38(a0)
00012A1C                            
00012A1C                            Obj61_Action:				; XREF: Obj61_Index
00012A1C 3F28 0008                  		move.w	8(a0),-(sp)
00012A20 7000                       		moveq	#0,d0
00012A22 1028 0028                  		move.b	$28(a0),d0
00012A26 0240 000F                  		andi.w	#$F,d0
00012A2A D040                       		add.w	d0,d0
00012A2C 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012A30 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012A34 381F                       		move.w	(sp)+,d4
00012A36 4A28 0001                  		tst.b	1(a0)
00012A3A 6A00                       		bpl.s	Obj61_ChkDel
00012A3C 7200                       		moveq	#0,d1
00012A3E 1228 0019                  		move.b	$19(a0),d1
00012A42 0641 000B                  		addi.w	#$B,d1
00012A46 7400                       		moveq	#0,d2
00012A48 1428 0016                  		move.b	$16(a0),d2
00012A4C 3602                       		move.w	d2,d3
00012A4E 5243                       		addq.w	#1,d3
00012A50 6100 D974                  		bsr.w	SolidObject
00012A54 1144 003F                  		move.b	d4,$3F(a0)
00012A58 6100 0000                  		bsr.w	loc_12180
00012A5C                            
00012A5C                            Obj61_ChkDel:
00012A5C 3028 0034                  		move.w	$34(a0),d0
00012A60 0240 FF80                  		andi.w	#$FF80,d0
00012A64 3238 F700                  		move.w	($FFFFF700).w,d1
00012A68 0441 0080                  		subi.w	#$80,d1
00012A6C 0241 FF80                  		andi.w	#$FF80,d1
00012A70 9041                       		sub.w	d1,d0
00012A72 0C40 0280                  		cmpi.w	#$280,d0
00012A76 6200 B5BA                  		bhi.w	DeleteObject
00012A7A 6000 B57A                  		bra.w	DisplaySprite
00012A7E                            ; ===========================================================================
00012A7E 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012A82 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012A86 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012A8A 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012A8E                            ; ===========================================================================
00012A8E                            
00012A8E                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012A8E 4E75                       		rts	
00012A90                            ; ===========================================================================
00012A90                            
00012A90                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012A90 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012A94 6600                       		bne.s	loc_120D6	; if yes, branch
00012A96 0828 0003 0022             		btst	#3,$22(a0)
00012A9C 6700                       		beq.s	locret_120D4
00012A9E 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012AA4                            
00012AA4                            locret_120D4:
00012AA4 4E75                       		rts	
00012AA6                            ; ===========================================================================
00012AA6                            
00012AA6                            loc_120D6:
00012AA6 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012AAA 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012AAC 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012AB0 4228 0038                  		clr.b	$38(a0)
00012AB4 4E75                       		rts	
00012AB6                            ; ===========================================================================
00012AB6                            
00012AB6                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012AB6 6100 B518                  		bsr.w	SpeedToPos
00012ABA 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012ABE 6100 0000                  		bsr.w	ObjHitFloor
00012AC2 4A41                       		tst.w	d1
00012AC4 6A00 0000                  		bpl.w	locret_12106
00012AC8 5241                       		addq.w	#1,d1
00012ACA D368 000C                  		add.w	d1,$C(a0)
00012ACE 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012AD2 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012AD6                            
00012AD6                            locret_12106:
00012AD6 4E75                       		rts	
00012AD8                            ; ===========================================================================
00012AD8                            
00012AD8                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012AD8 6100 B4F6                  		bsr.w	SpeedToPos
00012ADC 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012AE0 6100 0000                  		bsr.w	ObjHitCeiling
00012AE4 4A41                       		tst.w	d1
00012AE6 6A00 0000                  		bpl.w	locret_12126
00012AEA 9368 000C                  		sub.w	d1,$C(a0)
00012AEE 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012AF2 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012AF6                            
00012AF6                            locret_12126:
00012AF6 4E75                       		rts	
00012AF8                            ; ===========================================================================
00012AF8                            
00012AF8                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012AF8 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012AFE 6600                       		bne.s	locret_12138	; if not, branch
00012B00 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012B04 4228 0038                  		clr.b	$38(a0)
00012B08                            
00012B08                            locret_12138:
00012B08 4E75                       		rts	
00012B0A                            ; ===========================================================================
00012B0A                            
00012B0A                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012B0A 3038 F646                  		move.w	($FFFFF646).w,d0
00012B0E 9068 000C                  		sub.w	$C(a0),d0
00012B12 6700                       		beq.s	locret_1217E
00012B14 6400                       		bcc.s	loc_12162
00012B16 0C40 FFFE                  		cmpi.w	#-2,d0
00012B1A 6C00                       		bge.s	loc_1214E
00012B1C 70FE                       		moveq	#-2,d0
00012B1E                            
00012B1E                            loc_1214E:
00012B1E D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012B22 6100 0000                  		bsr.w	ObjHitCeiling
00012B26 4A41                       		tst.w	d1
00012B28 6A00 0000                  		bpl.w	locret_12160
00012B2C 9368 000C                  		sub.w	d1,$C(a0)
00012B30                            
00012B30                            locret_12160:
00012B30 4E75                       		rts	
00012B32                            ; ===========================================================================
00012B32                            
00012B32                            loc_12162:				; XREF: Obj61_Type07
00012B32 0C40 0002                  		cmpi.w	#2,d0
00012B36 6F00                       		ble.s	loc_1216A
00012B38 7002                       		moveq	#2,d0
00012B3A                            
00012B3A                            loc_1216A:
00012B3A D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012B3E 6100 0000                  		bsr.w	ObjHitFloor
00012B42 4A41                       		tst.w	d1
00012B44 6A00 0000                  		bpl.w	locret_1217E
00012B48 5241                       		addq.w	#1,d1
00012B4A D368 000C                  		add.w	d1,$C(a0)
00012B4E                            
00012B4E                            locret_1217E:
00012B4E 4E75                       		rts	
00012B50                            ; ===========================================================================
00012B50                            
00012B50                            loc_12180:				; XREF: Obj61_Action
00012B50 4A28 0038                  		tst.b	$38(a0)
00012B54 6700                       		beq.s	locret_121C0
00012B56 0828 0003 0022             		btst	#3,$22(a0)
00012B5C 6600                       		bne.s	loc_1219A
00012B5E 4A28 003E                  		tst.b	$3E(a0)
00012B62 6700                       		beq.s	locret_121C0
00012B64 5928 003E                  		subq.b	#4,$3E(a0)
00012B68 6000                       		bra.s	loc_121A6
00012B6A                            ; ===========================================================================
00012B6A                            
00012B6A                            loc_1219A:
00012B6A 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012B70 6700                       		beq.s	locret_121C0
00012B72 5828 003E                  		addq.b	#4,$3E(a0)
00012B76                            
00012B76                            loc_121A6:
00012B76 1028 003E                  		move.b	$3E(a0),d0
00012B7A 4EB9 0000 2D28             		jsr	(CalcSine).l
00012B80 323C 0400                  		move.w	#$400,d1
00012B84 C1C1                       		muls.w	d1,d0
00012B86 4840                       		swap	d0
00012B88 D068 0030                  		add.w	$30(a0),d0
00012B8C 3140 000C                  		move.w	d0,$C(a0)
00012B90                            
00012B90                            locret_121C0:
00012B90 4E75                       		rts	
00012B92                            ; ===========================================================================
00012B92                            ; ---------------------------------------------------------------------------
00012B92                            ; Sprite mappings - blocks (LZ)
00012B92                            ; ---------------------------------------------------------------------------
00012B92                            Map_obj61:
00012B92                            	include "_maps\obj61.asm"
00012B92                            ; ---------------------------------------------------------------------------
00012B92                            ; Sprite mappings - blocks (LZ)
00012B92                            ; ---------------------------------------------------------------------------
00012B92 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012B96 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012B9A 01                         byte_121CA:	dc.b 1
00012B9B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012BA0 02                         byte_121D0:	dc.b 2
00012BA1 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012BA6 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012BAB 01                         byte_121DB:	dc.b 1
00012BAC F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012BB1 01                         byte_121E1:	dc.b 1
00012BB2 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012BB8 00                         		even
00012BB8 00                         		even
00012BB8                            
00012BB8                            ; ===========================================================================
00012BB8                            ; ---------------------------------------------------------------------------
00012BB8                            ; Object 62 - gargoyle head (LZ)
00012BB8                            ; ---------------------------------------------------------------------------
00012BB8                            
00012BB8                            Obj62:					; XREF: Obj_Index
00012BB8 7000                       		moveq	#0,d0
00012BBA 1028 0024                  		move.b	$24(a0),d0
00012BBE 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012BC2 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012BC6 6000 D4D6                  		bra.w	MarkObjGone
00012BCA                            ; ===========================================================================
00012BCA 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012BCC 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012BCE 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012BD0 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012BD2                            
00012BD2 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012BDA                            ; ===========================================================================
00012BDA                            
00012BDA                            Obj62_Main:				; XREF: Obj62_Index
00012BDA 5428 0024                  		addq.b	#2,$24(a0)
00012BDE 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012BE6 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012BEC 0028 0004 0001             		ori.b	#4,1(a0)
00012BF2 117C 0003 0018             		move.b	#3,$18(a0)
00012BF8 117C 0010 0019             		move.b	#$10,$19(a0)
00012BFE 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C02 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012C06 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012C0C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C12 0228 000F 0028             		andi.b	#$F,$28(a0)
00012C18                            
00012C18                            Obj62_MakeFire:				; XREF: Obj62_Index
00012C18 5328 001E                  		subq.b	#1,$1E(a0)
00012C1C 6600                       		bne.s	Obj62_NoFire
00012C1E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C24 6100 B64A                  		bsr.w	ChkObjOnScreen
00012C28 6600                       		bne.s	Obj62_NoFire
00012C2A 6100 B850                  		bsr.w	SingleObjLoad
00012C2E 6600                       		bne.s	Obj62_NoFire
00012C30 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012C34 5829 0024                  		addq.b	#4,$24(a1)
00012C38 3368 0008 0008             		move.w	8(a0),8(a1)
00012C3E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012C44 1368 0001 0001             		move.b	1(a0),1(a1)
00012C4A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012C50                            
00012C50                            Obj62_NoFire:
00012C50 4E75                       		rts	
00012C52                            ; ===========================================================================
00012C52                            
00012C52                            Obj62_FireBall:				; XREF: Obj62_Index
00012C52 5428 0024                  		addq.b	#2,$24(a0)
00012C56 117C 0008 0016             		move.b	#8,$16(a0)
00012C5C 117C 0008 0017             		move.b	#8,$17(a0)
00012C62 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012C6A 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012C70 0028 0004 0001             		ori.b	#4,1(a0)
00012C76 117C 0004 0018             		move.b	#4,$18(a0)
00012C7C 117C 0098 0020             		move.b	#$98,$20(a0)
00012C82 117C 0008 0019             		move.b	#8,$19(a0)
00012C88 117C 0002 001A             		move.b	#2,$1A(a0)
00012C8E 5068 000C                  		addq.w	#8,$C(a0)
00012C92 317C 0200 0010             		move.w	#$200,$10(a0)
00012C98 0828 0000 0022             		btst	#0,$22(a0)
00012C9E 6600                       		bne.s	Obj62_Sound
00012CA0 4468 0010                  		neg.w	$10(a0)
00012CA4                            
00012CA4                            Obj62_Sound:
00012CA4 303C 00AE                  		move.w	#$AE,d0
00012CA8 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012CAE                            
00012CAE                            Obj62_AniFire:				; XREF: Obj62_Index
00012CAE 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012CB2 0200 0007                  		andi.b	#7,d0
00012CB6 6600                       		bne.s	Obj62_StopFire
00012CB8 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012CBE                            
00012CBE                            Obj62_StopFire:
00012CBE 6100 B310                  		bsr.w	SpeedToPos
00012CC2 0828 0000 0022             		btst	#0,$22(a0)
00012CC8 6600                       		bne.s	Obj62_StopFire2
00012CCA 76F8                       		moveq	#-8,d3
00012CCC 6100 0000                  		bsr.w	ObjHitWallLeft
00012CD0 4A41                       		tst.w	d1
00012CD2 6B00 B35E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012CD6 4E75                       		rts	
00012CD8                            ; ===========================================================================
00012CD8                            
00012CD8                            Obj62_StopFire2:
00012CD8 7608                       		moveq	#8,d3
00012CDA 6100 0000                  		bsr.w	ObjHitWallRight
00012CDE 4A41                       		tst.w	d1
00012CE0 6B00 B350                  		bmi.w	DeleteObject
00012CE4 4E75                       		rts	
00012CE6                            ; ===========================================================================
00012CE6                            ; ---------------------------------------------------------------------------
00012CE6                            ; Sprite mappings - gargoyle head (LZ)
00012CE6                            ; ---------------------------------------------------------------------------
00012CE6                            Map_obj62:
00012CE6                            	include "_maps\obj62.asm"
00012CE6                            ; ---------------------------------------------------------------------------
00012CE6                            ; Sprite mappings - gargoyle head (LZ)
00012CE6                            ; ---------------------------------------------------------------------------
00012CE6 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012CEA 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012CEE 03                         byte_12320:	dc.b 3
00012CEF F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012CF4 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012CF9 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012CFE 01                         byte_12330:	dc.b 1
00012CFF FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012D04 01                         byte_12336:	dc.b 1
00012D05 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012D0A                            		even
00012D0A                            		even
00012D0A                            
00012D0A                            ; ===========================================================================
00012D0A                            ; ---------------------------------------------------------------------------
00012D0A                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012D0A                            ; ---------------------------------------------------------------------------
00012D0A                            
00012D0A                            Obj63:					; XREF: Obj_Index
00012D0A 7000                       		moveq	#0,d0
00012D0C 1028 0024                  		move.b	$24(a0),d0
00012D10 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012D14 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012D18 3028 0030                  		move.w	$30(a0),d0
00012D1C 0240 FF80                  		andi.w	#$FF80,d0
00012D20 3238 F700                  		move.w	($FFFFF700).w,d1
00012D24 0441 0080                  		subi.w	#$80,d1
00012D28 0241 FF80                  		andi.w	#$FF80,d1
00012D2C 9041                       		sub.w	d1,d0
00012D2E 0C40 0280                  		cmpi.w	#$280,d0
00012D32 6200                       		bhi.s	loc_1236A
00012D34                            
00012D34                            Obj63_Display:				; XREF: loc_1236A
00012D34 6000 B2C0                  		bra.w	DisplaySprite
00012D38                            ; ===========================================================================
00012D38                            
00012D38                            loc_1236A:				; XREF: Obj63
00012D38 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012D3E 6600                       		bne.s	loc_12378
00012D40 0C40 FF80                  		cmpi.w	#-$80,d0
00012D44 64EE                       		bcc.s	Obj63_Display
00012D46                            
00012D46                            loc_12378:
00012D46 1028 002F                  		move.b	$2F(a0),d0
00012D4A 6A00 B2E6                  		bpl.w	DeleteObject
00012D4E 0240 007F                  		andi.w	#$7F,d0
00012D52 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012D56 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012D5C 6000 B2D4                  		bra.w	DeleteObject
00012D60                            ; ===========================================================================
00012D60 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012D62 0000                       		dc.w loc_124B2-Obj63_Index
00012D64 0000                       		dc.w loc_124C2-Obj63_Index
00012D66 0000                       		dc.w loc_124DE-Obj63_Index
00012D68                            ; ===========================================================================
00012D68                            
00012D68                            Obj63_Main:				; XREF: Obj63_Index
00012D68 1028 0028                  		move.b	$28(a0),d0
00012D6C 6B00 0000                  		bmi.w	loc_12460
00012D70 5428 0024                  		addq.b	#2,$24(a0)
00012D74 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012D7C 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012D82 0028 0004 0001             		ori.b	#4,1(a0)
00012D88 117C 0010 0019             		move.b	#$10,$19(a0)
00012D8E 117C 0004 0018             		move.b	#4,$18(a0)
00012D94 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012D9A 6600                       		bne.s	loc_123E2
00012D9C 5828 0024                  		addq.b	#4,$24(a0)
00012DA0 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012DA6 117C 0001 0018             		move.b	#1,$18(a0)
00012DAC 6000 0000                  		bra.w	loc_124DE
00012DB0                            ; ===========================================================================
00012DB0                            
00012DB0                            loc_123E2:
00012DB0 117C 0004 001A             		move.b	#4,$1A(a0)
00012DB6 7000                       		moveq	#0,d0
00012DB8 1028 0028                  		move.b	$28(a0),d0
00012DBC 3200                       		move.w	d0,d1
00012DBE E648                       		lsr.w	#3,d0
00012DC0 0240 001E                  		andi.w	#$1E,d0
00012DC4 45FA 0000                  		lea	Obj63_Data(pc),a2
00012DC8 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012DCC 315A 0038                  		move.w	(a2)+,$38(a0)
00012DD0 315A 0030                  		move.w	(a2)+,$30(a0)
00012DD4 214A 003C                  		move.l	a2,$3C(a0)
00012DD8 0241 000F                  		andi.w	#$F,d1
00012DDC E549                       		lsl.w	#2,d1
00012DDE 1141 0038                  		move.b	d1,$38(a0)
00012DE2 117C 0004 003A             		move.b	#4,$3A(a0)
00012DE8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012DEC 6700                       		beq.s	loc_1244C
00012DEE 117C 0001 003B             		move.b	#1,$3B(a0)
00012DF4 4428 003A                  		neg.b	$3A(a0)
00012DF8 7200                       		moveq	#0,d1
00012DFA 1228 0038                  		move.b	$38(a0),d1
00012DFE D228 003A                  		add.b	$3A(a0),d1
00012E02 B228 0039                  		cmp.b	$39(a0),d1
00012E06 6500                       		bcs.s	loc_12448
00012E08 1001                       		move.b	d1,d0
00012E0A 7200                       		moveq	#0,d1
00012E0C 4A00                       		tst.b	d0
00012E0E 6A00                       		bpl.s	loc_12448
00012E10 1228 0039                  		move.b	$39(a0),d1
00012E14 5901                       		subq.b	#4,d1
00012E16                            
00012E16                            loc_12448:
00012E16 1141 0038                  		move.b	d1,$38(a0)
00012E1A                            
00012E1A                            loc_1244C:
00012E1A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012E20 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012E26 6100 0000                  		bsr.w	Obj63_ChangeDir
00012E2A 6000 0000                  		bra.w	loc_124B2
00012E2E                            ; ===========================================================================
00012E2E                            
00012E2E                            loc_12460:				; XREF: Obj63_Main
00012E2E 1140 002F                  		move.b	d0,$2F(a0)
00012E32 0240 007F                  		andi.w	#$7F,d0
00012E36 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E3A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012E40 6600 B1F0                  		bne.w	DeleteObject
00012E44 D040                       		add.w	d0,d0
00012E46 0240 001E                  		andi.w	#$1E,d0
00012E4A 0640 0070                  		addi.w	#$70,d0
00012E4E 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012E54 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012E58 321A                       		move.w	(a2)+,d1
00012E5A 2248                       		movea.l	a0,a1
00012E5C 6000                       		bra.s	Obj63_MakePtfms
00012E5E                            ; ===========================================================================
00012E5E                            
00012E5E                            Obj63_Loop:
00012E5E 6100 B61C                  		bsr.w	SingleObjLoad
00012E62 6600                       		bne.s	loc_124AA
00012E64                            
00012E64                            Obj63_MakePtfms:			; XREF: loc_12460
00012E64 12BC 0063                  		move.b	#$63,0(a1)
00012E68 335A 0008                  		move.w	(a2)+,8(a1)
00012E6C 335A 000C                  		move.w	(a2)+,$C(a1)
00012E70 301A                       		move.w	(a2)+,d0
00012E72 1340 0028                  		move.b	d0,$28(a1)
00012E76                            
00012E76                            loc_124AA:
00012E76 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012E7A                            
00012E7A 588F                       		addq.l	#4,sp
00012E7C 4E75                       		rts	
00012E7E                            ; ===========================================================================
00012E7E                            
00012E7E                            loc_124B2:				; XREF: Obj63_Index
00012E7E 7200                       		moveq	#0,d1
00012E80 1228 0019                  		move.b	$19(a0),d1
00012E84 4EB9 0000 7C08             		jsr	(PlatformObject).l
00012E8A 6000 0000                  		bra.w	sub_12502
00012E8E                            ; ===========================================================================
00012E8E                            
00012E8E                            loc_124C2:				; XREF: Obj63_Index
00012E8E 7200                       		moveq	#0,d1
00012E90 1228 0019                  		move.b	$19(a0),d1
00012E94 4EB9 0000 7D7C             		jsr	(ExitPlatform).l
00012E9A 3F28 0008                  		move.w	8(a0),-(sp)
00012E9E 6100 0000                  		bsr.w	sub_12502
00012EA2 341F                       		move.w	(sp)+,d2
00012EA4 4EF9 0000 82E6             		jmp	(MvSonicOnPtfm2).l
00012EAA                            ; ===========================================================================
00012EAA                            
00012EAA                            loc_124DE:				; XREF: Obj63_Index
00012EAA 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012EAE 0240 0003                  		andi.w	#3,d0
00012EB2 6600                       		bne.s	loc_124FC
00012EB4 7201                       		moveq	#1,d1
00012EB6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012EBA 6700                       		beq.s	loc_124F2
00012EBC 4401                       		neg.b	d1
00012EBE                            
00012EBE                            loc_124F2:
00012EBE D328 001A                  		add.b	d1,$1A(a0)
00012EC2 0228 0003 001A             		andi.b	#3,$1A(a0)
00012EC8                            
00012EC8                            loc_124FC:
00012EC8 588F                       		addq.l	#4,sp
00012ECA 6000 D1D2                  		bra.w	MarkObjGone
00012ECE                            
00012ECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012ECE                            
00012ECE                            
00012ECE                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012ECE 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012ED2 6700                       		beq.s	loc_12520
00012ED4 4A28 003B                  		tst.b	$3B(a0)
00012ED8 6600                       		bne.s	loc_12520
00012EDA 117C 0001 003B             		move.b	#1,$3B(a0)
00012EE0 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012EE6 4428 003A                  		neg.b	$3A(a0)
00012EEA 6000                       		bra.s	loc_12534
00012EEC                            ; ===========================================================================
00012EEC                            
00012EEC                            loc_12520:
00012EEC 3028 0008                  		move.w	8(a0),d0
00012EF0 B068 0034                  		cmp.w	$34(a0),d0
00012EF4 6600                       		bne.s	loc_1256A
00012EF6 3028 000C                  		move.w	$C(a0),d0
00012EFA B068 0036                  		cmp.w	$36(a0),d0
00012EFE 6600                       		bne.s	loc_1256A
00012F00                            
00012F00                            loc_12534:
00012F00 7200                       		moveq	#0,d1
00012F02 1228 0038                  		move.b	$38(a0),d1
00012F06 D228 003A                  		add.b	$3A(a0),d1
00012F0A B228 0039                  		cmp.b	$39(a0),d1
00012F0E 6500                       		bcs.s	loc_12552
00012F10 1001                       		move.b	d1,d0
00012F12 7200                       		moveq	#0,d1
00012F14 4A00                       		tst.b	d0
00012F16 6A00                       		bpl.s	loc_12552
00012F18 1228 0039                  		move.b	$39(a0),d1
00012F1C 5901                       		subq.b	#4,d1
00012F1E                            
00012F1E                            loc_12552:
00012F1E 1141 0038                  		move.b	d1,$38(a0)
00012F22 2268 003C                  		movea.l	$3C(a0),a1
00012F26 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012F2C 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012F32 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F36                            
00012F36                            loc_1256A:
00012F36 6100 B098                  		bsr.w	SpeedToPos
00012F3A 4E75                       		rts	
00012F3C                            ; End of function sub_12502
00012F3C                            
00012F3C                            
00012F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F3C                            
00012F3C                            
00012F3C                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012F3C 7000                       		moveq	#0,d0
00012F3E 343C FF00                  		move.w	#-$100,d2
00012F42 3028 0008                  		move.w	8(a0),d0
00012F46 9068 0034                  		sub.w	$34(a0),d0
00012F4A 6400                       		bcc.s	loc_12584
00012F4C 4440                       		neg.w	d0
00012F4E 4442                       		neg.w	d2
00012F50                            
00012F50                            loc_12584:
00012F50 7200                       		moveq	#0,d1
00012F52 363C FF00                  		move.w	#-$100,d3
00012F56 3228 000C                  		move.w	$C(a0),d1
00012F5A 9268 0036                  		sub.w	$36(a0),d1
00012F5E 6400                       		bcc.s	loc_12598
00012F60 4441                       		neg.w	d1
00012F62 4443                       		neg.w	d3
00012F64                            
00012F64                            loc_12598:
00012F64 B240                       		cmp.w	d0,d1
00012F66 6500                       		bcs.s	loc_125C2
00012F68 3028 0008                  		move.w	8(a0),d0
00012F6C 9068 0034                  		sub.w	$34(a0),d0
00012F70 6700                       		beq.s	loc_125AE
00012F72 48C0                       		ext.l	d0
00012F74 E180                       		asl.l	#8,d0
00012F76 81C1                       		divs.w	d1,d0
00012F78 4440                       		neg.w	d0
00012F7A                            
00012F7A                            loc_125AE:
00012F7A 3140 0010                  		move.w	d0,$10(a0)
00012F7E 3143 0012                  		move.w	d3,$12(a0)
00012F82 4840                       		swap	d0
00012F84 3140 000A                  		move.w	d0,$A(a0)
00012F88 4268 000E                  		clr.w	$E(a0)
00012F8C 4E75                       		rts	
00012F8E                            ; ===========================================================================
00012F8E                            
00012F8E                            loc_125C2:				; XREF: Obj63_ChangeDir
00012F8E 3228 000C                  		move.w	$C(a0),d1
00012F92 9268 0036                  		sub.w	$36(a0),d1
00012F96 6700                       		beq.s	loc_125D4
00012F98 48C1                       		ext.l	d1
00012F9A E181                       		asl.l	#8,d1
00012F9C 83C0                       		divs.w	d0,d1
00012F9E 4441                       		neg.w	d1
00012FA0                            
00012FA0                            loc_125D4:
00012FA0 3141 0012                  		move.w	d1,$12(a0)
00012FA4 3142 0010                  		move.w	d2,$10(a0)
00012FA8 4841                       		swap	d1
00012FAA 3141 000E                  		move.w	d1,$E(a0)
00012FAE 4268 000A                  		clr.w	$A(a0)
00012FB2 4E75                       		rts	
00012FB4                            ; End of function Obj63_ChangeDir
00012FB4                            
00012FB4                            ; ===========================================================================
00012FB4 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012FB6 0000                       		dc.w word_12610-Obj63_Data
00012FB8 0000                       		dc.w word_12628-Obj63_Data
00012FBA 0000                       		dc.w word_1263C-Obj63_Data
00012FBC 0000                       		dc.w word_12650-Obj63_Data
00012FBE 0000                       		dc.w word_12668-Obj63_Data
00012FC0 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012FD0 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012FDC 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012FEC 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012FF4 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013008 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001301C 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013034 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013048                            
00013048                            ; ---------------------------------------------------------------------------
00013048                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013048                            ; ---------------------------------------------------------------------------
00013048                            Map_obj63:
00013048                            	include "_maps\obj63.asm"
00013048                            ; ---------------------------------------------------------------------------
00013048                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013048                            ; ---------------------------------------------------------------------------
00013048 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
0001304C 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013050 0000                       		dc.w byte_1269E-Map_obj63
00013052 01                         byte_12686:	dc.b 1
00013053 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013058 01                         byte_1268C:	dc.b 1
00013059 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001305E 01                         byte_12692:	dc.b 1
0001305F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00013064 01                         byte_12698:	dc.b 1
00013065 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001306A 01                         byte_1269E:	dc.b 1
0001306B F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00013070                            		even
00013070                            		even
00013070                            
00013070                            ; ===========================================================================
00013070                            ; ---------------------------------------------------------------------------
00013070                            ; Object 64 - bubbles (LZ)
00013070                            ; ---------------------------------------------------------------------------
00013070                            
00013070                            Obj64:					; XREF: Obj_Index
00013070 7000                       		moveq	#0,d0
00013072 1028 0024                  		move.b	$24(a0),d0
00013076 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001307A 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
0001307E                            ; ===========================================================================
0001307E 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00013080 0000                       		dc.w Obj64_Animate-Obj64_Index
00013082 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00013084 0000                       		dc.w Obj64_Display2-Obj64_Index
00013086 0000                       		dc.w Obj64_Delete3-Obj64_Index
00013088 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001308A                            ; ===========================================================================
0001308A                            
0001308A                            Obj64_Main:				; XREF: Obj64_Index
0001308A 5428 0024                  		addq.b	#2,$24(a0)
0001308E 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00013096 317C 8348 0002             		move.w	#$8348,2(a0)
0001309C 117C 0084 0001             		move.b	#$84,1(a0)
000130A2 117C 0010 0019             		move.b	#$10,$19(a0)
000130A8 117C 0001 0018             		move.b	#1,$18(a0)
000130AE 1028 0028                  		move.b	$28(a0),d0	; get object type
000130B2 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000130B4 5028 0024                  		addq.b	#8,$24(a0)
000130B8 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000130BC 1140 0032                  		move.b	d0,$32(a0)
000130C0 1140 0033                  		move.b	d0,$33(a0)
000130C4 117C 0006 001C             		move.b	#6,$1C(a0)
000130CA 6000 0000                  		bra.w	Obj64_BblMaker
000130CE                            ; ===========================================================================
000130CE                            
000130CE                            Obj64_Bubble:				; XREF: Obj64_Main
000130CE 1140 001C                  		move.b	d0,$1C(a0)
000130D2 3168 0008 0030             		move.w	8(a0),$30(a0)
000130D8 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000130DE 4EB9 0000 2D02             		jsr	(RandomNumber).l
000130E4 1140 0026                  		move.b	d0,$26(a0)
000130E8                            
000130E8                            Obj64_Animate:				; XREF: Obj64_Index
000130E8 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000130EE 4EB9 0000 B04C             		jsr	AnimateSprite
000130F4 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000130FA 6600                       		bne.s	Obj64_ChkWater
000130FC 117C 0001 002E             		move.b	#1,$2E(a0)
00013102                            
00013102                            Obj64_ChkWater:				; XREF: Obj64_Index
00013102 3038 F646                  		move.w	($FFFFF646).w,d0
00013106 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001310A 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
0001310C                            
0001310C                            Obj64_Burst:				; XREF: Obj64_Wobble
0001310C 117C 0006 0024             		move.b	#6,$24(a0)
00013112 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013116 6000 0000                  		bra.w	Obj64_Display2
0001311A                            ; ===========================================================================
0001311A                            
0001311A                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001311A 1028 0026                  		move.b	$26(a0),d0
0001311E 5228 0026                  		addq.b	#1,$26(a0)
00013122 0240 007F                  		andi.w	#$7F,d0
00013126 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001312C 1031 0000                  		move.b	(a1,d0.w),d0
00013130 4880                       		ext.w	d0
00013132 D068 0030                  		add.w	$30(a0),d0
00013136 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
0001313A 4A28 002E                  		tst.b	$2E(a0)
0001313E 6700                       		beq.s	Obj64_Display
00013140 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00013144 6700                       		beq.s	Obj64_Display	; if not, branch
00013146                            
00013146 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
0001314A 303C 00AD                  		move.w	#$AD,d0
0001314E 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00013154 43F8 D000                  		lea	($FFFFD000).w,a1
00013158 4269 0010                  		clr.w	$10(a1)
0001315C 4269 0012                  		clr.w	$12(a1)
00013160 4269 0014                  		clr.w	$14(a1)
00013164 137C 0015 001C             		move.b	#$15,$1C(a1)
0001316A 337C 0023 003E             		move.w	#$23,$3E(a1)
00013170 137C 0000 003C             		move.b	#0,$3C(a1)
00013176 08A9 0005 0022             		bclr	#5,$22(a1)
0001317C 08A9 0004 0022             		bclr	#4,$22(a1)
00013182 0829 0002 0022             		btst	#2,$22(a1)
00013188 6700 FF82                  		beq.w	Obj64_Burst
0001318C 08A9 0002 0022             		bclr	#2,$22(a1)
00013192 137C 0013 0016             		move.b	#$13,$16(a1)
00013198 137C 0009 0017             		move.b	#9,$17(a1)
0001319E 5B69 000C                  		subq.w	#5,$C(a1)
000131A2 6000 FF68                  		bra.w	Obj64_Burst
000131A6                            ; ===========================================================================
000131A6                            
000131A6                            Obj64_Display:				; XREF: Obj64_Wobble
000131A6 6100 AE28                  		bsr.w	SpeedToPos
000131AA 4A28 0001                  		tst.b	1(a0)
000131AE 6A00                       		bpl.s	Obj64_Delete
000131B0 4EFA AE44                  		jmp	DisplaySprite
000131B4                            ; ===========================================================================
000131B4                            
000131B4                            Obj64_Delete:
000131B4 4EFA AE7C                  		jmp	DeleteObject
000131B8                            ; ===========================================================================
000131B8                            
000131B8                            Obj64_Display2:				; XREF: Obj64_Index
000131B8 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000131BE 4EB9 0000 B04C             		jsr	AnimateSprite
000131C4 4A28 0001                  		tst.b	1(a0)
000131C8 6A00                       		bpl.s	Obj64_Delete2
000131CA 4EFA AE2A                  		jmp	DisplaySprite
000131CE                            ; ===========================================================================
000131CE                            
000131CE                            Obj64_Delete2:
000131CE 4EFA AE62                  		jmp	DeleteObject
000131D2                            ; ===========================================================================
000131D2                            
000131D2                            Obj64_Delete3:				; XREF: Obj64_Index
000131D2 6000 AE5E                  		bra.w	DeleteObject
000131D6                            ; ===========================================================================
000131D6                            
000131D6                            Obj64_BblMaker:				; XREF: Obj64_Index
000131D6 4A68 0036                  		tst.w	$36(a0)
000131DA 6600                       		bne.s	loc_12874
000131DC 3038 F646                  		move.w	($FFFFF646).w,d0
000131E0 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000131E4 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000131E8 4A28 0001                  		tst.b	1(a0)
000131EC 6A00 0000                  		bpl.w	Obj64_ChkDel
000131F0 5368 0038                  		subq.w	#1,$38(a0)
000131F4 6A00 0000                  		bpl.w	loc_12914
000131F8 317C 0001 0036             		move.w	#1,$36(a0)
000131FE                            
000131FE                            loc_1283A:
000131FE 4EB9 0000 2D02             		jsr	(RandomNumber).l
00013204 3200                       		move.w	d0,d1
00013206 0240 0007                  		andi.w	#7,d0
0001320A 0C40 0006                  		cmpi.w	#6,d0
0001320E 64EE                       		bcc.s	loc_1283A
00013210                            
00013210 1140 0034                  		move.b	d0,$34(a0)
00013214 0241 000C                  		andi.w	#$C,d1
00013218 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001321E D2C1                       		adda.w	d1,a1
00013220 2149 003C                  		move.l	a1,$3C(a0)
00013224 5328 0032                  		subq.b	#1,$32(a0)
00013228 6A00                       		bpl.s	loc_12872
0001322A 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013230 08E8 0007 0036             		bset	#7,$36(a0)
00013236                            
00013236                            loc_12872:
00013236 6000                       		bra.s	loc_1287C
00013238                            ; ===========================================================================
00013238                            
00013238                            loc_12874:				; XREF: Obj64_BblMaker
00013238 5368 0038                  		subq.w	#1,$38(a0)
0001323C 6A00 0000                  		bpl.w	loc_12914
00013240                            
00013240                            loc_1287C:
00013240 4EB9 0000 2D02             		jsr	(RandomNumber).l
00013246 0240 001F                  		andi.w	#$1F,d0
0001324A 3140 0038                  		move.w	d0,$38(a0)
0001324E 6100 B22C                  		bsr.w	SingleObjLoad
00013252 6600                       		bne.s	loc_128F8
00013254 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00013258 3368 0008 0008             		move.w	8(a0),8(a1)
0001325E 4EB9 0000 2D02             		jsr	(RandomNumber).l
00013264 0240 000F                  		andi.w	#$F,d0
00013268 5140                       		subq.w	#8,d0
0001326A D169 0008                  		add.w	d0,8(a1)
0001326E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013274 7000                       		moveq	#0,d0
00013276 1028 0034                  		move.b	$34(a0),d0
0001327A 2468 003C                  		movea.l	$3C(a0),a2
0001327E 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00013284 0828 0007 0036             		btst	#7,$36(a0)
0001328A 6700                       		beq.s	loc_128F8
0001328C 4EB9 0000 2D02             		jsr	(RandomNumber).l
00013292 0240 0003                  		andi.w	#3,d0
00013296 6600                       		bne.s	loc_128E4
00013298 08E8 0006 0036             		bset	#6,$36(a0)
0001329E 6600                       		bne.s	loc_128F8
000132A0 137C 0002 0028             		move.b	#2,$28(a1)
000132A6                            
000132A6                            loc_128E4:
000132A6 4A28 0034                  		tst.b	$34(a0)
000132AA 6600                       		bne.s	loc_128F8
000132AC 08E8 0006 0036             		bset	#6,$36(a0)
000132B2 6600                       		bne.s	loc_128F8
000132B4 137C 0002 0028             		move.b	#2,$28(a1)
000132BA                            
000132BA                            loc_128F8:
000132BA 5328 0034                  		subq.b	#1,$34(a0)
000132BE 6A00                       		bpl.s	loc_12914
000132C0 4EB9 0000 2D02             		jsr	(RandomNumber).l
000132C6 0240 007F                  		andi.w	#$7F,d0
000132CA 0640 0080                  		addi.w	#$80,d0
000132CE D168 0038                  		add.w	d0,$38(a0)
000132D2 4268 0036                  		clr.w	$36(a0)
000132D6                            
000132D6                            loc_12914:
000132D6 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000132DC 4EB9 0000 B04C             		jsr	AnimateSprite
000132E2                            
000132E2                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000132E2 3028 0008                  		move.w	8(a0),d0
000132E6 0240 FF80                  		andi.w	#$FF80,d0
000132EA 3238 F700                  		move.w	($FFFFF700).w,d1
000132EE 0441 0080                  		subi.w	#$80,d1
000132F2 0241 FF80                  		andi.w	#$FF80,d1
000132F6 9041                       		sub.w	d1,d0
000132F8 0C40 0280                  		cmpi.w	#$280,d0
000132FC 6200 AD34                  		bhi.w	DeleteObject
00013300 3038 F646                  		move.w	($FFFFF646).w,d0
00013304 B068 000C                  		cmp.w	$C(a0),d0
00013308 6500 ACEC                  		bcs.w	DisplaySprite
0001330C 4E75                       		rts	
0001330E                            ; ===========================================================================
0001330E                            ; bubble production sequence
0001330E                            
0001330E                            ; 0 = small bubble, 1 =	large bubble
0001330E                            
0001330E 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013320                            
00013320                            ; ===========================================================================
00013320                            
00013320                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013320 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013324 6B00                       		bmi.s	loc_12998
00013326 43F8 D000                  		lea	($FFFFD000).w,a1
0001332A 3029 0008                  		move.w	8(a1),d0
0001332E 3228 0008                  		move.w	8(a0),d1
00013332 0441 0010                  		subi.w	#$10,d1
00013336 B240                       		cmp.w	d0,d1
00013338 6400                       		bcc.s	loc_12998
0001333A 0641 0020                  		addi.w	#$20,d1
0001333E B240                       		cmp.w	d0,d1
00013340 6500                       		bcs.s	loc_12998
00013342 3029 000C                  		move.w	$C(a1),d0
00013346 3228 000C                  		move.w	$C(a0),d1
0001334A B240                       		cmp.w	d0,d1
0001334C 6400                       		bcc.s	loc_12998
0001334E 0641 0010                  		addi.w	#$10,d1
00013352 B240                       		cmp.w	d0,d1
00013354 6500                       		bcs.s	loc_12998
00013356 7001                       		moveq	#1,d0
00013358 4E75                       		rts	
0001335A                            ; ===========================================================================
0001335A                            
0001335A                            loc_12998:
0001335A 7000                       		moveq	#0,d0
0001335C 4E75                       		rts	
0001335E                            ; ===========================================================================
0001335E                            Ani_obj64:
0001335E                            	include "_anim\obj64.asm"
0001335E                            ; ---------------------------------------------------------------------------
0001335E                            ; Animation script - bubbles (LZ)
0001335E                            ; ---------------------------------------------------------------------------
0001335E 0000                       		dc.w byte_129AA-Ani_obj64
00013360 0000                       		dc.w byte_129B0-Ani_obj64
00013362 0000                       		dc.w byte_129B6-Ani_obj64
00013364 0000                       		dc.w byte_129BE-Ani_obj64
00013366 0000                       		dc.w byte_129BE-Ani_obj64
00013368 0000                       		dc.w byte_129C0-Ani_obj64
0001336A 0000                       		dc.w byte_129C6-Ani_obj64
0001336C 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013372 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013378 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013380 04FC                       byte_129BE:	dc.b 4,	$FC
00013382 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013388 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001338E 00                         		even
0001338E 00                         		even
0001338E                            
0001338E                            ; ---------------------------------------------------------------------------
0001338E                            ; Sprite mappings - bubbles (LZ)
0001338E                            ; ---------------------------------------------------------------------------
0001338E                            Map_obj64:
0001338E                            	include "_maps\obj64.asm"
0001338E                            ; ---------------------------------------------------------------------------
0001338E                            ; Sprite mappings - bubbles (LZ)
0001338E                            ; ---------------------------------------------------------------------------
0001338E 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013392 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013396 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
0001339A 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
0001339E 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000133A2 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000133A6 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000133AA 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000133AE 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000133B2 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000133B6 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000133BA 0000                       		dc.w byte_12A9C-Map_obj64
000133BC 01                         byte_129FA:	dc.b 1
000133BD FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000133C2 01                         byte_12A00:	dc.b 1
000133C3 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000133C8 01                         byte_12A06:	dc.b 1
000133C9 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000133CE 01                         byte_12A0C:	dc.b 1
000133CF F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000133D4 01                         byte_12A12:	dc.b 1
000133D5 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000133DA 01                         byte_12A18:	dc.b 1
000133DB F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000133E0 01                         byte_12A1E:	dc.b 1
000133E1 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000133E6 04                         byte_12A24:	dc.b 4
000133E7 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000133EC F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000133F1 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000133F6 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000133FB 04                         byte_12A39:	dc.b 4
000133FC F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013401 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013406 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001340B 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013410 01                         byte_12A4E:	dc.b 1
00013411 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013416 01                         byte_12A54:	dc.b 1
00013417 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001341C 01                         byte_12A5A:	dc.b 1
0001341D F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013422 01                         byte_12A60:	dc.b 1
00013423 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013428 01                         byte_12A66:	dc.b 1
00013429 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001342E 01                         byte_12A6C:	dc.b 1
0001342F F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013434 01                         byte_12A72:	dc.b 1
00013435 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001343A 01                         byte_12A78:	dc.b 1
0001343B F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013440 01                         byte_12A7E:	dc.b 1
00013441 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013446 01                         byte_12A84:	dc.b 1
00013447 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001344C 01                         byte_12A8A:	dc.b 1
0001344D F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013452 01                         byte_12A90:	dc.b 1
00013453 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013458 01                         byte_12A96:	dc.b 1
00013459 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001345E 00                         byte_12A9C:	dc.b 0
00013460 00                         		even
00013460 00                         		even
00013460                            
00013460                            ; ===========================================================================
00013460                            ; ---------------------------------------------------------------------------
00013460                            ; Object 65 - waterfalls (LZ)
00013460                            ; ---------------------------------------------------------------------------
00013460                            
00013460                            Obj65:					; XREF: Obj_Index
00013460 7000                       		moveq	#0,d0
00013462 1028 0024                  		move.b	$24(a0),d0
00013466 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001346A 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001346E                            ; ===========================================================================
0001346E 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013470 0000                       		dc.w Obj65_Animate-Obj65_Index
00013472 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013474 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013476 0000                       		dc.w loc_12B36-Obj65_Index
00013478                            ; ===========================================================================
00013478                            
00013478                            Obj65_Main:				; XREF: Obj65_Index
00013478 5828 0024                  		addq.b	#4,$24(a0)
0001347C 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013484 317C 4259 0002             		move.w	#$4259,2(a0)
0001348A 0028 0004 0001             		ori.b	#4,1(a0)
00013490 117C 0018 0019             		move.b	#$18,$19(a0)
00013496 117C 0001 0018             		move.b	#1,$18(a0)
0001349C 1028 0028                  		move.b	$28(a0),d0	; get object type
000134A0 6A00                       		bpl.s	loc_12AE6
000134A2 08E8 0007 0002             		bset	#7,2(a0)
000134A8                            
000134A8                            loc_12AE6:
000134A8 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000134AC 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000134B0 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000134B4 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000134B6 4228 0018                  		clr.b	$18(a0)
000134BA 5528 0024                  		subq.b	#2,$24(a0)
000134BE 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000134C4 6700                       		beq.s	loc_12B0A	; if not, branch
000134C6 117C 0006 0024             		move.b	#6,$24(a0)
000134CC                            
000134CC                            loc_12B0A:
000134CC 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000134D2 6700                       		beq.s	Obj65_Animate	; if not, branch
000134D4 117C 0008 0024             		move.b	#8,$24(a0)
000134DA                            
000134DA                            Obj65_Animate:				; XREF: Obj65_Index
000134DA 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000134E0 4EB9 0000 B04C             		jsr	AnimateSprite
000134E6                            
000134E6                            Obj65_ChkDel:				; XREF: Obj65_Index
000134E6 6000 CBB6                  		bra.w	MarkObjGone
000134EA                            ; ===========================================================================
000134EA                            
000134EA                            Obj65_FixHeight:			; XREF: Obj65_Index
000134EA 3038 F646                  		move.w	($FFFFF646).w,d0
000134EE 0440 0010                  		subi.w	#$10,d0
000134F2 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000134F6 60E2                       		bra.s	Obj65_Animate
000134F8                            ; ===========================================================================
000134F8                            
000134F8                            loc_12B36:				; XREF: Obj65_Index
000134F8 08A8 0007 0002             		bclr	#7,2(a0)
000134FE 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013504 6600                       		bne.s	Obj65_Animate2
00013506 08E8 0007 0002             		bset	#7,2(a0)
0001350C                            
0001350C                            Obj65_Animate2:
0001350C 60CC                       		bra.s	Obj65_Animate
0001350E                            ; ===========================================================================
0001350E                            Ani_obj65:
0001350E                            	include "_anim\obj65.asm"
0001350E                            ; ---------------------------------------------------------------------------
0001350E                            ; Animation script - waterfall (LZ)
0001350E                            ; ---------------------------------------------------------------------------
0001350E 0000                       		dc.w byte_12B4E-Ani_obj65
00013510 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013516 00                         		even
00013516 00                         		even
00013516                            
00013516                            ; ---------------------------------------------------------------------------
00013516                            ; Sprite mappings - waterfalls (LZ)
00013516                            ; ---------------------------------------------------------------------------
00013516                            Map_obj65:
00013516                            	include "_maps\obj65.asm"
00013516                            ; ---------------------------------------------------------------------------
00013516                            ; Sprite mappings - waterfalls (LZ)
00013516                            ; ---------------------------------------------------------------------------
00013516 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001351A 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001351E 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013522 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013526 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001352A 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001352E 01                         byte_12B6C:	dc.b 1
0001352F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013534 02                         byte_12B72:	dc.b 2
00013535 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001353A 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001353F 02                         byte_12B7D:	dc.b 2
00013540 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013545 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001354A 01                         byte_12B88:	dc.b 1
0001354B F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013550 02                         byte_12B8E:	dc.b 2
00013551 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013556 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001355B 01                         byte_12B99:	dc.b 1
0001355C F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013561 01                         byte_12B9F:	dc.b 1
00013562 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013567 01                         byte_12BA5:	dc.b 1
00013568 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001356D 02                         byte_12BAB:	dc.b 2
0001356E F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013573 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013578 02                         byte_12BB6:	dc.b 2
00013579 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001357E F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013583 02                         byte_12BC1:	dc.b 2
00013584 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013589 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001358E 02                         byte_12BCC:	dc.b 2
0001358F F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013594 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001359A 00                         		even
0001359A 00                         		even
0001359A                            
0001359A                            ; ===========================================================================
0001359A                            ; ---------------------------------------------------------------------------
0001359A                            ; Object 01 - Sonic
0001359A                            ; ---------------------------------------------------------------------------
0001359A                            
0001359A                            Obj01:					; XREF: Obj_Index
0001359A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001359E 6700                       		beq.s	Obj01_Normal	; if not, branch
000135A0 4EF9 0000 0000             		jmp	DebugMode
000135A6                            ; ===========================================================================
000135A6                            
000135A6                            Obj01_Normal:
000135A6 7000                       		moveq	#0,d0
000135A8 1028 0024                  		move.b	$24(a0),d0
000135AC 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000135B0 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000135B4                            ; ===========================================================================
000135B4 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000135B6 0000                       		dc.w Obj01_Control-Obj01_Index
000135B8 0000                       		dc.w Obj01_Hurt-Obj01_Index
000135BA 0000                       		dc.w Obj01_Death-Obj01_Index
000135BC 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000135BE                            ; ===========================================================================
000135BE                            
000135BE                            Player_Maps:
000135BE 0000 0000                  	dc.l	Map_Sonic
000135C2 0000 0000                  	dc.l	Map_Sonic ; gronic
000135C6 0000 0000                  	dc.l	Map_Sonic ; anakama
000135CA 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
000135CE                            	; insert player mapping here
000135CE                            	
000135CE                            Obj01_Main:				; XREF: Obj01_Index
000135CE 5428 0024                  		addq.b	#2,$24(a0)
000135D2 117C 0013 0016             		move.b	#$13,$16(a0)
000135D8 117C 0009 0017             		move.b	#9,$17(a0)
000135DE                            		
000135DE 7000                       		moveq	#0,d0
000135E0 1038 FFE8                  		move.b	(v_character),d0
000135E4 E548                       		lsl.w	#2,d0
000135E6 43FA FFD6                  		lea 	Player_Maps(pc),a1
000135EA 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000135F0                            		
000135F0 317C 0780 0002             		move.w	#$780,2(a0)
000135F6 117C 0002 0018             		move.b	#2,$18(a0)
000135FC 117C 0018 0019             		move.b	#$18,$19(a0)
00013602 117C 0004 0001             		move.b	#4,1(a0)
00013608 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001360E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013614 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001361A                            
0001361A                            Obj01_Control:				; XREF: Obj01_Index
0001361A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001361E 6700                       		beq.s	loc_12C58	; if not, branch
00013620 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013626 6700                       		beq.s	loc_12C58	; if not, branch
00013628 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001362E 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013632 4E75                       		rts	
00013634                            ; ===========================================================================
00013634                            
00013634                            loc_12C58:
00013634 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013638 6600                       		bne.s	loc_12C64	; if yes, branch
0001363A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013640                            
00013640                            loc_12C64:
00013640 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013646 6600                       		bne.s	loc_12C7E	; if yes, branch
00013648 7000                       		moveq	#0,d0
0001364A 1028 0022                  		move.b	$22(a0),d0
0001364E 0240 0006                  		andi.w	#6,d0
00013652 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013656 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
0001365A                            
0001365A                            loc_12C7E:
0001365A 6100                       		bsr.s	Sonic_Display
0001365C 6100 0000                  		bsr.w	Sonic_RecordPos
00013660 6100 0000                  		bsr.w	Sonic_Water
00013664 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
0001366A 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013670 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013674 6700                       		beq.s	loc_12CA6
00013676 4A28 001C                  		tst.b	$1C(a0)
0001367A 6600                       		bne.s	loc_12CA6
0001367C 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013682                            
00013682                            loc_12CA6:
00013682 6100 0000                  		bsr.w	Sonic_Animate
00013686 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001368A 6B00                       		bmi.s	loc_12CB6
0001368C 4EB9 0000 0000             		jsr	TouchResponse
00013692                            
00013692                            loc_12CB6:
00013692 6100 0000                  		bsr.w	Sonic_Loops
00013696 6100 0000                  		bsr.w	LoadSonicDynPLC
0001369A 4E75                       		rts	
0001369C                            ; ===========================================================================
0001369C 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001369E 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000136A0 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000136A2 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000136A4                            ; ---------------------------------------------------------------------------
000136A4                            ; Music	to play	after invincibility wears off
000136A4                            ; ---------------------------------------------------------------------------
000136A4                            ; ===========================================================================
000136A4                            
000136A4                            Sonic_Display:				; XREF: loc_12C7E
000136A4 3028 0030                  		move.w	$30(a0),d0
000136A8 6700                       		beq.s	Obj01_Display
000136AA 5368 0030                  		subq.w	#1,$30(a0)
000136AE E648                       		lsr.w	#3,d0
000136B0 6400                       		bcc.s	Obj01_ChkInvin
000136B2                            
000136B2                            Obj01_Display:
000136B2 4EBA A942                  		jsr	DisplaySprite
000136B6                            
000136B6                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000136B6                             
000136B6                            Obj01_ChkInvin:
000136B6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000136BA 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000136BE 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000136C2 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000136C6 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000136CA 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000136CE 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000136D2 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000136D6 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000136DC 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000136E0 7000                       		moveq	#0,d0
000136E2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000136E6                             
000136E6 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000136EC 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000136EE 43F9 0000 3D82             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000136F4 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000136F6                             
000136F6                            Obj01_GetBgm2:
000136F6 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000136FC 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
000136FE 43F9 0000 3D8A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013704 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013706                             
00013706                            Obj01_GetBgm3:
00013706 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001370C 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001370E 43F9 0000 3D92             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013714 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013716                             
00013716                            Obj01_GetBgm4:
00013716 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001371C 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001371E 43F9 0000 3D9A             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013724                             
00013724                            Obj01_PlayMusic:
00013724 1031 0000                  		move.b	(a1,d0.w),d0
00013728 4EB9 0000 1588             		jsr	(PlaySound).l	; play normal music
0001372E                             
0001372E                            ; NineKode ends here.
0001372E                            
0001372E                            Obj01_RmvInvin:
0001372E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013734                            
00013734                            Obj01_ChkShoes:
00013734 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013738 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001373A 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
0001373E 6700                       		beq.s	Obj01_ExitChk
00013740 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013744 6600                       		bne.s	Obj01_ExitChk
00013746 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001374C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013752 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013758 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
0001375E 303C 00E3                  		move.w	#$E3,d0
00013762 4EF9 0000 1588             		jmp	(PlaySound).l	; run music at normal speed
00013768                            ; ===========================================================================
00013768                            
00013768                            Obj01_ExitChk:
00013768 4E75                       		rts	
0001376A                            
0001376A                            ; ---------------------------------------------------------------------------
0001376A                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001376A                            ; ---------------------------------------------------------------------------
0001376A                            
0001376A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001376A                            
0001376A                            
0001376A                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001376A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001376E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013772 43F1 0000                  		lea	(a1,d0.w),a1
00013776 32E8 0008                  		move.w	8(a0),(a1)+
0001377A 32E8 000C                  		move.w	$C(a0),(a1)+
0001377E 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013782 4E75                       		rts	
00013784                            ; End of function Sonic_RecordPos
00013784                            
00013784                            ; ---------------------------------------------------------------------------
00013784                            ; Subroutine for Sonic when he's underwater
00013784                            ; ---------------------------------------------------------------------------
00013784                            
00013784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013784                            
00013784                            
00013784                            Sonic_Water:				; XREF: loc_12C7E
00013784 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001378A 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001378C                            
0001378C                            locret_12D80:
0001378C 4E75                       		rts	
0001378E                            ; ===========================================================================
0001378E                            
0001378E                            Obj01_InWater:
0001378E 3038 F646                  		move.w	($FFFFF646).w,d0
00013792 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013796 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013798 08E8 0006 0022             		bset	#6,$22(a0)
0001379E 66EC                       		bne.s	locret_12D80
000137A0 6100 0000                  		bsr.w	ResumeMusic
000137A4 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000137AA 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000137B0 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000137B6 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000137BC 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000137C2 E0E8 0010                  		asr	$10(a0)
000137C6 E0E8 0012                  		asr	$12(a0)
000137CA E0E8 0012                  		asr	$12(a0)
000137CE 67BC                       		beq.s	locret_12D80
000137D0 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000137D6 303C 00AA                  		move.w	#$AA,d0
000137DA 4EF9 0000 158E             		jmp	(PlaySound_Special).l ;	play splash sound
000137E0                            ; ===========================================================================
000137E0                            
000137E0                            Obj01_OutWater:
000137E0 08A8 0006 0022             		bclr	#6,$22(a0)
000137E6 67A4                       		beq.s	locret_12D80
000137E8 6100 0000                  		bsr.w	ResumeMusic
000137EC 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000137F2 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000137F8 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000137FE E1E8 0012                  		asl	$12(a0)
00013802 6700 FF88                  		beq.w	locret_12D80
00013806 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001380C 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013812 6E00                       		bgt.s	loc_12E0E
00013814 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001381A                            
0001381A                            loc_12E0E:
0001381A 303C 00AA                  		move.w	#$AA,d0
0001381E 4EF9 0000 158E             		jmp	(PlaySound_Special).l ;	play splash sound
00013824                            ; End of function Sonic_Water
00013824                            
00013824                            ; ===========================================================================
00013824                            ; ---------------------------------------------------------------------------
00013824                            ; Modes	for controlling	Sonic
00013824                            ; ---------------------------------------------------------------------------
00013824                            
00013824                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013824 6100 0000                  		bsr.w	Sonic_Jump
00013828 6100 0000                  		bsr.w	Sonic_SlopeResist
0001382C 6100 0000                  		bsr.w	Sonic_Move
00013830 6100 0000                  		bsr.w	Sonic_Roll
00013834 6100 0000                  		bsr.w	Sonic_LevelBound
00013838 4EBA A796                  		jsr	SpeedToPos
0001383C 6100 0000                  		bsr.w	Sonic_AnglePos
00013840 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013844 4E75                       		rts	
00013846                            ; ===========================================================================
00013846                            
00013846                            Obj01_MdJump:				; XREF: Obj01_Modes
00013846 6100 0000                  		bsr.w	Sonic_JumpHeight
0001384A 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001384E 6100 0000                  		bsr.w	Sonic_LevelBound
00013852 4EBA A70A                  		jsr	ObjectFall
00013856 0828 0006 0022             		btst	#6,$22(a0)
0001385C 6700                       		beq.s	loc_12E5C
0001385E 0468 0028 0012             		subi.w	#$28,$12(a0)
00013864                            
00013864                            loc_12E5C:
00013864 6100 0000                  		bsr.w	Sonic_JumpAngle
00013868 6100 0000                  		bsr.w	Sonic_Floor
0001386C 4E75                       		rts	
0001386E                            ; ===========================================================================
0001386E                            
0001386E                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001386E 6100 0000                  		bsr.w	Sonic_Jump
00013872 6100 0000                  		bsr.w	Sonic_RollRepel
00013876 6100 0000                  		bsr.w	Sonic_RollSpeed
0001387A 6100 0000                  		bsr.w	Sonic_LevelBound
0001387E 4EBA A750                  		jsr	SpeedToPos
00013882 6100 0000                  		bsr.w	Sonic_AnglePos
00013886 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001388A 4E75                       		rts	
0001388C                            ; ===========================================================================
0001388C                            
0001388C                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001388C 6100 0000                  		bsr.w	Sonic_JumpHeight
00013890 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013894 6100 0000                  		bsr.w	Sonic_LevelBound
00013898 6100 0000                  		bsr.w	Sonic_AirUnroll
0001389C 4EBA A6C0                  		jsr	ObjectFall
000138A0 0828 0006 0022             		btst	#6,$22(a0)
000138A6 6700                       		beq.s	loc_12EA6
000138A8 0468 0028 0012             		subi.w	#$28,$12(a0)
000138AE                            
000138AE                            loc_12EA6:
000138AE 6100 0000                  		bsr.w	Sonic_JumpAngle
000138B2 6100 0000                  		bsr.w	Sonic_Floor
000138B6 4E75                       		rts	
000138B8                            ; ---------------------------------------------------------------------------
000138B8                            ; Subroutine to	make Sonic walk/run
000138B8                            ; ---------------------------------------------------------------------------
000138B8                            
000138B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138B8                            
000138B8                            
000138B8                            Sonic_Move:				; XREF: Obj01_MdNormal
000138B8 3C38 F760                  		move.w	($FFFFF760).w,d6
000138BC 3A38 F762                  		move.w	($FFFFF762).w,d5
000138C0 3838 F764                  		move.w	($FFFFF764).w,d4
000138C4 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000138C8 6600 0000                  		bne.w	loc_12FEE
000138CC 4A68 003E                  		tst.w	$3E(a0)
000138D0 6600 0000                  		bne.w	Obj01_ResetScr
000138D4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000138DA 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000138DC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138E2 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000138E4 6100 0000                  		bsr.w	Sonic_MoveLeft
000138E8                            
000138E8                            Obj01_NotLeft:
000138E8 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000138EE 6700                       		beq.s	Obj01_NotRight	; if not, branch
000138F0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138F6 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000138F8 6100 0000                  		bsr.w	Sonic_MoveLeft
000138FC 6000                       		bra.s	Obj01_NotRight
000138FE                            
000138FE                            Obj01_MoveRight:
000138FE 6100 0000                  		bsr.w	Sonic_MoveRight
00013902                            
00013902                            Obj01_NotRight:
00013902 1028 0026                  		move.b	$26(a0),d0
00013906 0600 0020                  		addi.b	#$20,d0
0001390A 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001390E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013912 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013916 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001391A 08A8 0005 0022             		bclr	#5,$22(a0)
00013920 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013926 0828 0003 0022             		btst	#3,$22(a0)
0001392C 6700                       		beq.s	Sonic_Balance
0001392E 7000                       		moveq	#0,d0
00013930 1028 003D                  		move.b	$3D(a0),d0
00013934 ED48                       		lsl.w	#6,d0
00013936 43F8 D000                  		lea	($FFFFD000).w,a1
0001393A 43F1 0000                  		lea	(a1,d0.w),a1
0001393E 4A29 0022                  		tst.b	$22(a1)
00013942 6B00                       		bmi.s	Sonic_LookUp
00013944 7200                       		moveq	#0,d1
00013946 1229 0019                  		move.b	$19(a1),d1
0001394A 3401                       		move.w	d1,d2
0001394C D442                       		add.w	d2,d2
0001394E 5942                       		subq.w	#4,d2
00013950 D268 0008                  		add.w	8(a0),d1
00013954 9269 0008                  		sub.w	8(a1),d1
00013958 0C41 0004                  		cmpi.w	#4,d1
0001395C 6D00                       		blt.s	loc_12F6A
0001395E B242                       		cmp.w	d2,d1
00013960 6C00                       		bge.s	loc_12F5A
00013962 6000                       		bra.s	Sonic_LookUp
00013964                            ; ===========================================================================
00013964                            
00013964                            Sonic_Balance:
00013964 4EB9 0000 0000             		jsr	ObjHitFloor
0001396A 0C41 000C                  		cmpi.w	#$C,d1
0001396E 6D00                       		blt.s	Sonic_LookUp
00013970 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013976 6600                       		bne.s	loc_12F62
00013978                            
00013978                            loc_12F5A:
00013978 08A8 0000 0022             		bclr	#0,$22(a0)
0001397E 6000                       		bra.s	loc_12F70
00013980                            ; ===========================================================================
00013980                            
00013980                            loc_12F62:
00013980 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013986 6600                       		bne.s	Sonic_LookUp
00013988                            
00013988                            loc_12F6A:
00013988 08E8 0000 0022             		bset	#0,$22(a0)
0001398E                            
0001398E                            loc_12F70:
0001398E 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013994 6000                       		bra.s	Obj01_ResetScr
00013996                            ; ===========================================================================
00013996                            
00013996                            Sonic_LookUp:
00013996 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001399C 6700                       		beq.s	Sonic_Duck	; if not, branch
0001399E 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000139A4 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000139AA 6700                       		beq.s	loc_12FC2
000139AC 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000139B0 6000                       		bra.s	loc_12FC2
000139B2                            ; ===========================================================================
000139B2                            
000139B2                            Sonic_Duck:
000139B2 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000139B8 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000139BA 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000139C0 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000139C6 6700                       		beq.s	loc_12FC2
000139C8 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000139CC 6000                       		bra.s	loc_12FC2
000139CE                            ; ===========================================================================
000139CE                            
000139CE                            Obj01_ResetScr:
000139CE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000139D4 6700                       		beq.s	loc_12FC2	; if yes, branch
000139D6 6400                       		bcc.s	loc_12FBE
000139D8 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000139DC                            
000139DC                            loc_12FBE:
000139DC 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000139E0                            
000139E0                            loc_12FC2:
000139E0 1038 F602                  		move.b	($FFFFF602).w,d0
000139E4 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000139E8 6600                       		bne.s	loc_12FEE	; if yes, branch
000139EA 3028 0014                  		move.w	$14(a0),d0
000139EE 6700                       		beq.s	loc_12FEE
000139F0 6B00                       		bmi.s	loc_12FE2
000139F2 9045                       		sub.w	d5,d0
000139F4 6400                       		bcc.s	loc_12FDC
000139F6 303C 0000                  		move.w	#0,d0
000139FA                            
000139FA                            loc_12FDC:
000139FA 3140 0014                  		move.w	d0,$14(a0)
000139FE 6000                       		bra.s	loc_12FEE
00013A00                            ; ===========================================================================
00013A00                            
00013A00                            loc_12FE2:
00013A00 D045                       		add.w	d5,d0
00013A02 6400                       		bcc.s	loc_12FEA
00013A04 303C 0000                  		move.w	#0,d0
00013A08                            
00013A08                            loc_12FEA:
00013A08 3140 0014                  		move.w	d0,$14(a0)
00013A0C                            
00013A0C                            loc_12FEE:
00013A0C 1028 0026                  		move.b	$26(a0),d0
00013A10 4EB9 0000 2D28             		jsr	(CalcSine).l
00013A16 C3E8 0014                  		muls.w	$14(a0),d1
00013A1A E081                       		asr.l	#8,d1
00013A1C 3141 0010                  		move.w	d1,$10(a0)
00013A20 C1E8 0014                  		muls.w	$14(a0),d0
00013A24 E080                       		asr.l	#8,d0
00013A26 3140 0012                  		move.w	d0,$12(a0)
00013A2A                            
00013A2A                            loc_1300C:
00013A2A 1028 0026                  		move.b	$26(a0),d0
00013A2E 0600 0040                  		addi.b	#$40,d0
00013A32 6B00                       		bmi.s	locret_1307C
00013A34 123C 0040                  		move.b	#$40,d1
00013A38 4A68 0014                  		tst.w	$14(a0)
00013A3C 6700                       		beq.s	locret_1307C
00013A3E 6B00                       		bmi.s	loc_13024
00013A40 4441                       		neg.w	d1
00013A42                            
00013A42                            loc_13024:
00013A42 1028 0026                  		move.b	$26(a0),d0
00013A46 D001                       		add.b	d1,d0
00013A48 3F00                       		move.w	d0,-(sp)
00013A4A 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013A4E 301F                       		move.w	(sp)+,d0
00013A50 4A41                       		tst.w	d1
00013A52 6A00                       		bpl.s	locret_1307C
00013A54 E141                       		asl.w	#8,d1
00013A56 0600 0020                  		addi.b	#$20,d0
00013A5A 0200 00C0                  		andi.b	#$C0,d0
00013A5E 6700                       		beq.s	loc_13078
00013A60 0C00 0040                  		cmpi.b	#$40,d0
00013A64 6700                       		beq.s	loc_13066
00013A66 0C00 0080                  		cmpi.b	#$80,d0
00013A6A 6700                       		beq.s	loc_13060
00013A6C D368 0010                  		add.w	d1,$10(a0)
00013A70 08E8 0005 0022             		bset	#5,$22(a0)
00013A76 317C 0000 0014             		move.w	#0,$14(a0)
00013A7C 4E75                       		rts	
00013A7E                            ; ===========================================================================
00013A7E                            
00013A7E                            loc_13060:
00013A7E 9368 0012                  		sub.w	d1,$12(a0)
00013A82 4E75                       		rts	
00013A84                            ; ===========================================================================
00013A84                            
00013A84                            loc_13066:
00013A84 9368 0010                  		sub.w	d1,$10(a0)
00013A88 08E8 0005 0022             		bset	#5,$22(a0)
00013A8E 317C 0000 0014             		move.w	#0,$14(a0)
00013A94 4E75                       		rts	
00013A96                            ; ===========================================================================
00013A96                            
00013A96                            loc_13078:
00013A96 D368 0012                  		add.w	d1,$12(a0)
00013A9A                            
00013A9A                            locret_1307C:
00013A9A 4E75                       		rts	
00013A9C                            ; End of function Sonic_Move
00013A9C                            
00013A9C                            
00013A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A9C                            
00013A9C                            
00013A9C                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013A9C 3028 0014                  		move.w	$14(a0),d0
00013AA0 6700                       		beq.s	loc_13086
00013AA2 6A00                       		bpl.s	loc_130B2
00013AA4                            
00013AA4                            loc_13086:
00013AA4 08E8 0000 0022             		bset	#0,$22(a0)
00013AAA 6600                       		bne.s	loc_1309A
00013AAC 08A8 0005 0022             		bclr	#5,$22(a0)
00013AB2 117C 0001 001D             		move.b	#1,$1D(a0)
00013AB8                            
00013AB8                            loc_1309A:
00013AB8 9045                       		sub.w	d5,d0
00013ABA 3206                       		move.w	d6,d1
00013ABC 4441                       		neg.w	d1
00013ABE B041                       		cmp.w	d1,d0
00013AC0 6E00                       		bgt.s	loc_130A6
00013AC2 3001                       		move.w	d1,d0
00013AC4                            
00013AC4                            loc_130A6:
00013AC4 3140 0014                  		move.w	d0,$14(a0)
00013AC8 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013ACE 4E75                       		rts	
00013AD0                            ; ===========================================================================
00013AD0                            
00013AD0                            loc_130B2:				; XREF: Sonic_MoveLeft
00013AD0 9044                       		sub.w	d4,d0
00013AD2 6400                       		bcc.s	loc_130BA
00013AD4 303C FF80                  		move.w	#-$80,d0
00013AD8                            
00013AD8                            loc_130BA:
00013AD8 3140 0014                  		move.w	d0,$14(a0)
00013ADC 1028 0026                  		move.b	$26(a0),d0
00013AE0 0600 0020                  		addi.b	#$20,d0
00013AE4 0200 00C0                  		andi.b	#$C0,d0
00013AE8 6600                       		bne.s	locret_130E8
00013AEA 0C40 0400                  		cmpi.w	#$400,d0
00013AEE 6D00                       		blt.s	locret_130E8
00013AF0 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013AF6 08A8 0000 0022             		bclr	#0,$22(a0)
00013AFC 303C 00A4                  		move.w	#$A4,d0
00013B00 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play stopping sound
00013B06                            
00013B06                            locret_130E8:
00013B06 4E75                       		rts	
00013B08                            ; End of function Sonic_MoveLeft
00013B08                            
00013B08                            
00013B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B08                            
00013B08                            
00013B08                            Sonic_MoveRight:			; XREF: Sonic_Move
00013B08 3028 0014                  		move.w	$14(a0),d0
00013B0C 6B00                       		bmi.s	loc_13118
00013B0E 08A8 0000 0022             		bclr	#0,$22(a0)
00013B14 6700                       		beq.s	loc_13104
00013B16 08A8 0005 0022             		bclr	#5,$22(a0)
00013B1C 117C 0001 001D             		move.b	#1,$1D(a0)
00013B22                            
00013B22                            loc_13104:
00013B22 D045                       		add.w	d5,d0
00013B24 B046                       		cmp.w	d6,d0
00013B26 6D00                       		blt.s	loc_1310C
00013B28 3006                       		move.w	d6,d0
00013B2A                            
00013B2A                            loc_1310C:
00013B2A 3140 0014                  		move.w	d0,$14(a0)
00013B2E 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013B34 4E75                       		rts	
00013B36                            ; ===========================================================================
00013B36                            
00013B36                            loc_13118:				; XREF: Sonic_MoveRight
00013B36 D044                       		add.w	d4,d0
00013B38 6400                       		bcc.s	loc_13120
00013B3A 303C 0080                  		move.w	#$80,d0
00013B3E                            
00013B3E                            loc_13120:
00013B3E 3140 0014                  		move.w	d0,$14(a0)
00013B42 1028 0026                  		move.b	$26(a0),d0
00013B46 0600 0020                  		addi.b	#$20,d0
00013B4A 0200 00C0                  		andi.b	#$C0,d0
00013B4E 6600                       		bne.s	locret_1314E
00013B50 0C40 FC00                  		cmpi.w	#-$400,d0
00013B54 6E00                       		bgt.s	locret_1314E
00013B56 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013B5C 08E8 0000 0022             		bset	#0,$22(a0)
00013B62 303C 00A4                  		move.w	#$A4,d0
00013B66 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play stopping sound
00013B6C                            
00013B6C                            locret_1314E:
00013B6C 4E75                       		rts	
00013B6E                            ; End of function Sonic_MoveRight
00013B6E                            
00013B6E                            ; ---------------------------------------------------------------------------
00013B6E                            ; Subroutine to	change Sonic's speed as he rolls
00013B6E                            ; ---------------------------------------------------------------------------
00013B6E                            
00013B6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B6E                            
00013B6E                            
00013B6E                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013B6E 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B72 E346                       		asl.w	#1,d6
00013B74 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B78 E245                       		asr.w	#1,d5
00013B7A 3838 F764                  		move.w	($FFFFF764).w,d4
00013B7E E444                       		asr.w	#2,d4
00013B80 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013B84 6600 0000                  		bne.w	loc_131CC
00013B88 4A68 003E                  		tst.w	$3E(a0)
00013B8C 6600                       		bne.s	loc_13188
00013B8E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B94 6700                       		beq.s	loc_1317C	; if not, branch
00013B96 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B9C 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013B9E 6100 0000                  		bsr.w	Sonic_RollLeft
00013BA2                            
00013BA2                            loc_1317C:
00013BA2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013BA8 6700                       		beq.s	loc_13188	; if not, branch
00013BAA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013BB0 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013BB2 6100 0000                  		bsr.w	Sonic_RollLeft
00013BB6 6000                       		bra.s	loc_13188
00013BB8                            
00013BB8                            SonicRS_RollRight:
00013BB8 6100 0000                  		bsr.w	Sonic_RollRight
00013BBC                            
00013BBC                            loc_13188:
00013BBC 3028 0014                  		move.w	$14(a0),d0
00013BC0 6700                       		beq.s	loc_131AA
00013BC2 6B00                       		bmi.s	loc_1319E
00013BC4 9045                       		sub.w	d5,d0
00013BC6 6400                       		bcc.s	loc_13198
00013BC8 303C 0000                  		move.w	#0,d0
00013BCC                            
00013BCC                            loc_13198:
00013BCC 3140 0014                  		move.w	d0,$14(a0)
00013BD0 6000                       		bra.s	loc_131AA
00013BD2                            ; ===========================================================================
00013BD2                            
00013BD2                            loc_1319E:				; XREF: Sonic_RollSpeed
00013BD2 D045                       		add.w	d5,d0
00013BD4 6400                       		bcc.s	loc_131A6
00013BD6 303C 0000                  		move.w	#0,d0
00013BDA                            
00013BDA                            loc_131A6:
00013BDA 3140 0014                  		move.w	d0,$14(a0)
00013BDE                            
00013BDE                            loc_131AA:
00013BDE 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013BE2 6600                       		bne.s	loc_131CC	; if yes, branch
00013BE4 08A8 0002 0022             		bclr	#2,$22(a0)
00013BEA 117C 0013 0016             		move.b	#$13,$16(a0)
00013BF0 117C 0009 0017             		move.b	#9,$17(a0)
00013BF6 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013BFC 5B68 000C                  		subq.w	#5,$C(a0)
00013C00                            
00013C00                            loc_131CC:
00013C00 1028 0026                  		move.b	$26(a0),d0
00013C04 4EB9 0000 2D28             		jsr	(CalcSine).l
00013C0A C1E8 0014                  		muls.w	$14(a0),d0
00013C0E E080                       		asr.l	#8,d0
00013C10 3140 0012                  		move.w	d0,$12(a0)
00013C14 C3E8 0014                  		muls.w	$14(a0),d1
00013C18 E081                       		asr.l	#8,d1
00013C1A 0C41 1000                  		cmpi.w	#$1000,d1
00013C1E 6F00                       		ble.s	loc_131F0
00013C20 323C 1000                  		move.w	#$1000,d1
00013C24                            
00013C24                            loc_131F0:
00013C24 0C41 F000                  		cmpi.w	#-$1000,d1
00013C28 6C00                       		bge.s	loc_131FA
00013C2A 323C F000                  		move.w	#-$1000,d1
00013C2E                            
00013C2E                            loc_131FA:
00013C2E 3141 0010                  		move.w	d1,$10(a0)
00013C32 6000 FDF6                  		bra.w	loc_1300C
00013C36                            ; End of function Sonic_RollSpeed
00013C36                            
00013C36                            
00013C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C36                            
00013C36                            
00013C36                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013C36 3028 0014                  		move.w	$14(a0),d0
00013C3A 6700                       		beq.s	loc_1320A
00013C3C 6A00                       		bpl.s	loc_13218
00013C3E                            
00013C3E                            loc_1320A:
00013C3E 08E8 0000 0022             		bset	#0,$22(a0)
00013C44 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C4A 4E75                       		rts	
00013C4C                            ; ===========================================================================
00013C4C                            
00013C4C                            loc_13218:
00013C4C 9044                       		sub.w	d4,d0
00013C4E 6400                       		bcc.s	loc_13220
00013C50 303C FF80                  		move.w	#-$80,d0
00013C54                            
00013C54                            loc_13220:
00013C54 3140 0014                  		move.w	d0,$14(a0)
00013C58 4E75                       		rts	
00013C5A                            ; End of function Sonic_RollLeft
00013C5A                            
00013C5A                            
00013C5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C5A                            
00013C5A                            
00013C5A                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013C5A 3028 0014                  		move.w	$14(a0),d0
00013C5E 6B00                       		bmi.s	loc_1323A
00013C60 08A8 0000 0022             		bclr	#0,$22(a0)
00013C66 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C6C 4E75                       		rts	
00013C6E                            ; ===========================================================================
00013C6E                            
00013C6E                            loc_1323A:
00013C6E D044                       		add.w	d4,d0
00013C70 6400                       		bcc.s	loc_13242
00013C72 303C 0080                  		move.w	#$80,d0
00013C76                            
00013C76                            loc_13242:
00013C76 3140 0014                  		move.w	d0,$14(a0)
00013C7A 4E75                       		rts	
00013C7C                            ; End of function Sonic_RollRight
00013C7C                            
00013C7C                            Sonic_AirUnroll:
00013C7C                            		
00013C7C 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013C80 6600                       		bne.s	@timer
00013C82 1038 F605                  		move.b	($FFFFF605).w,d0
00013C86 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013C8A 6700                       		beq.s	@end	; if not, branch
00013C8C 08A8 0002 0022             		bclr	#2,$22(a0)
00013C92 117C 0013 0016             		move.b	#$13,$16(a0)
00013C98 117C 0009 0017             		move.b	#9,$17(a0)
00013C9E 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013CA4 303C 00A5                  		move.w	#$A5,d0
00013CA8 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play fart sound
00013CAE 2028 0010                  		move.l	$10(a0),d0
00013CB2 D080                       		add.l	d0,d0
00013CB4 2140 0010                  		move.l	d0,$10(a0)
00013CB8 5B68 000C                  		subq.w	#5,$C(a0)
00013CBC                            	@end:
00013CBC 4E75                       		rts
00013CBE                            	@timer:
00013CBE 5328 003A                  		subq.b	#1,$3A(a0)
00013CC2 4E75                       		rts
00013CC4                            
00013CC4                            ; ---------------------------------------------------------------------------
00013CC4                            ; Subroutine to	change Sonic's direction while jumping
00013CC4                            ; ---------------------------------------------------------------------------
00013CC4                            
00013CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CC4                            
00013CC4                            
00013CC4                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013CC4 3C38 F760                  		move.w	($FFFFF760).w,d6
00013CC8 3A38 F762                  		move.w	($FFFFF762).w,d5
00013CCC E345                       		asl.w	#1,d5
00013CCE 0828 0004 0022             		btst	#4,$22(a0)
00013CD4 6600                       		bne.s	Obj01_ResetScr2
00013CD6 3028 0010                  		move.w	$10(a0),d0
00013CDA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013CE0 6700                       		beq.s	loc_13278	; if not, branch
00013CE2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013CE8 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013CEA 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013CEE 6E00                       		bgt.s	loc_13278
00013CF0 3001                       		move.w	d1,d0
00013CF2                            
00013CF2                            loc_13278:
00013CF2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013CF8 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013CFA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013D00 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013D02 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013D06 6E00                       		bgt.s	Obj01_JumpMove
00013D08 3001                       		move.w	d1,d0
00013D0A 6000                       		bra.s	Obj01_JumpMove
00013D0C                            
00013D0C                            SonicCJD_JumpLeft:
00013D0C 08E8 0000 0022             		bset	#0,$22(a0)
00013D12 9045                       		sub.w	d5,d0
00013D14 3206                       		move.w	d6,d1
00013D16 4441                       		neg.w	d1
00013D18 B041                       		cmp.w	d1,d0
00013D1A                            		; bgt.s	loc_13278
00013D1A                            		; move.w	d1,d0
00013D1A 4E75                       		rts
00013D1C                            
00013D1C                            SonicCJD_JumpRight:
00013D1C 08A8 0000 0022             		bclr	#0,$22(a0)
00013D22 D045                       		add.w	d5,d0
00013D24 B046                       		cmp.w	d6,d0
00013D26 6D00                       		blt.s	Obj01_JumpMove
00013D28 3006                       		move.w	d6,d0
00013D2A                            
00013D2A                            Obj01_JumpMove:
00013D2A 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013D2E                            
00013D2E                            Obj01_ResetScr2:
00013D2E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013D34 6700                       		beq.s	loc_132A4	; if yes, branch
00013D36 6400                       		bcc.s	loc_132A0
00013D38 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013D3C                            
00013D3C                            loc_132A0:
00013D3C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013D40                            
00013D40                            loc_132A4:
00013D40 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013D46 6500                       		bcs.s	locret_132D2	; if yes, branch
00013D48 3028 0010                  		move.w	$10(a0),d0
00013D4C 3200                       		move.w	d0,d1
00013D4E EA41                       		asr.w	#5,d1
00013D50 6700                       		beq.s	locret_132D2
00013D52 6B00                       		bmi.s	loc_132C6
00013D54 9041                       		sub.w	d1,d0
00013D56 6400                       		bcc.s	loc_132C0
00013D58 303C 0000                  		move.w	#0,d0
00013D5C                            
00013D5C                            loc_132C0:
00013D5C 3140 0010                  		move.w	d0,$10(a0)
00013D60 4E75                       		rts	
00013D62                            ; ===========================================================================
00013D62                            
00013D62                            loc_132C6:
00013D62 9041                       		sub.w	d1,d0
00013D64 6500                       		bcs.s	loc_132CE
00013D66 303C 0000                  		move.w	#0,d0
00013D6A                            
00013D6A                            loc_132CE:
00013D6A 3140 0010                  		move.w	d0,$10(a0)
00013D6E                            
00013D6E                            locret_132D2:
00013D6E 4E75                       		rts	
00013D70                            ; End of function Sonic_ChgJumpDir
00013D70                            
00013D70                            ; ===========================================================================
00013D70                            ; ---------------------------------------------------------------------------
00013D70                            ; Unused subroutine to squash Sonic
00013D70                            ; ---------------------------------------------------------------------------
00013D70 1028 0026                  		move.b	$26(a0),d0
00013D74 0600 0020                  		addi.b	#$20,d0
00013D78 0200 00C0                  		andi.b	#$C0,d0
00013D7C 6600                       		bne.s	locret_13302
00013D7E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D82 4A41                       		tst.w	d1
00013D84 6A00                       		bpl.s	locret_13302
00013D86 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013D8C 317C 0000 0010             		move.w	#0,$10(a0)
00013D92 317C 0000 0012             		move.w	#0,$12(a0)
00013D98 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013D9E                            
00013D9E                            locret_13302:
00013D9E 4E75                       		rts	
00013DA0                            ; ---------------------------------------------------------------------------
00013DA0                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013DA0                            ; ---------------------------------------------------------------------------
00013DA0                            
00013DA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DA0                            
00013DA0                            
00013DA0                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013DA0 2228 0008                  		move.l	8(a0),d1
00013DA4 3028 0010                  		move.w	$10(a0),d0
00013DA8 48C0                       		ext.l	d0
00013DAA E180                       		asl.l	#8,d0
00013DAC D280                       		add.l	d0,d1
00013DAE 4841                       		swap	d1
00013DB0 3038 F728                  		move.w	($FFFFF728).w,d0
00013DB4 0640 0010                  		addi.w	#$10,d0
00013DB8 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013DBA 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013DBC 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013DC0 0640 0128                  		addi.w	#$128,d0
00013DC4 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013DC8 6600                       		bne.s	loc_13332
00013DCA 0640 0040                  		addi.w	#$40,d0
00013DCE                            
00013DCE                            loc_13332:
00013DCE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013DD0 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013DD2                            
00013DD2                            loc_13336:
00013DD2 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013DD6 0640 00E0                  		addi.w	#$E0,d0
00013DDA B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013DDE 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013DE0 4E75                       		rts	
00013DE2                            ; ===========================================================================
00013DE2                            
00013DE2                            Boundary_Bottom:
00013DE2 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013DE8 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013DEC 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013DF2 6500 0000                  		bcs.w	KillSonic
00013DF6 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013DFA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013E00 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013E06 4E75                       		rts	
00013E08                            ; ===========================================================================
00013E08                            
00013E08                            Boundary_Sides:
00013E08 3140 0008                  		move.w	d0,8(a0)
00013E0C 317C 0000 000A             		move.w	#0,$A(a0)
00013E12 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013E18 317C 0000 0014             		move.w	#0,$14(a0)
00013E1E 60B2                       		bra.s	loc_13336
00013E20                            ; End of function Sonic_LevelBound
00013E20                            
00013E20                            ; ---------------------------------------------------------------------------
00013E20                            ; Subroutine allowing Sonic to roll when he's moving
00013E20                            ; ---------------------------------------------------------------------------
00013E20                            
00013E20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E20                            
00013E20                            
00013E20                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013E20 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013E24 6600                       		bne.s	Obj01_NoRoll
00013E26 3028 0014                  		move.w	$14(a0),d0
00013E2A 6A00                       		bpl.s	loc_13392
00013E2C 4440                       		neg.w	d0
00013E2E                            
00013E2E                            loc_13392:
00013E2E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013E32 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013E34 1038 F602                  		move.b	($FFFFF602).w,d0
00013E38 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013E3C 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013E3E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013E44 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013E46                            
00013E46                            Obj01_NoRoll:
00013E46 4E75                       		rts	
00013E48                            ; ===========================================================================
00013E48                            
00013E48                            Obj01_ChkRoll:
00013E48 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013E4E 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013E50 4E75                       		rts	
00013E52                            ; ===========================================================================
00013E52                            
00013E52                            Obj01_DoRoll:
00013E52 08E8 0002 0022             		bset	#2,$22(a0)
00013E58 117C 000E 0016             		move.b	#$E,$16(a0)
00013E5E 117C 0007 0017             		move.b	#7,$17(a0)
00013E64 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013E6A 5A68 000C                  		addq.w	#5,$C(a0)
00013E6E 303C 00BE                  		move.w	#$BE,d0
00013E72 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play rolling sound
00013E78 4A68 0014                  		tst.w	$14(a0)
00013E7C 6600                       		bne.s	locret_133E8
00013E7E 317C 0200 0014             		move.w	#$200,$14(a0)
00013E84                            
00013E84                            locret_133E8:
00013E84 4E75                       		rts	
00013E86                            ; End of function Sonic_Roll
00013E86                            
00013E86                            ; ---------------------------------------------------------------------------
00013E86                            ; Subroutine allowing Sonic to jump
00013E86                            ; ---------------------------------------------------------------------------
00013E86                            
00013E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E86                            
00013E86                            
00013E86                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013E86 1038 F603                  		move.b	($FFFFF603).w,d0
00013E8A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013E8E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013E92 7000                       		moveq	#0,d0
00013E94 1028 0026                  		move.b	$26(a0),d0
00013E98 0600 0080                  		addi.b	#$80,d0
00013E9C 6100 0000                  		bsr.w	sub_14D48
00013EA0 0C41 0006                  		cmpi.w	#6,d1
00013EA4 6D00 0000                  		blt.w	locret_1348E
00013EA8 343C 0680                  		move.w	#$680,d2
00013EAC 0828 0006 0022             		btst	#6,$22(a0)
00013EB2 6700                       		beq.s	loc_1341C
00013EB4 343C 0380                  		move.w	#$380,d2
00013EB8                            
00013EB8                            loc_1341C:
00013EB8 7000                       		moveq	#0,d0
00013EBA 1028 0026                  		move.b	$26(a0),d0
00013EBE 0400 0040                  		subi.b	#$40,d0
00013EC2 4EB9 0000 2D28             		jsr	(CalcSine).l
00013EC8 C3C2                       		muls.w	d2,d1
00013ECA E081                       		asr.l	#8,d1
00013ECC D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013ED0 C1C2                       		muls.w	d2,d0
00013ED2 E080                       		asr.l	#8,d0
00013ED4 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013ED8 08E8 0001 0022             		bset	#1,$22(a0)
00013EDE 08A8 0005 0022             		bclr	#5,$22(a0)
00013EE4 588F                       		addq.l	#4,sp
00013EE6 117C 0001 003C             		move.b	#1,$3C(a0)
00013EEC 4228 0038                  		clr.b	$38(a0)
00013EF0 303C 00A0                  		move.w	#$A0,d0
00013EF4 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play jumping sound
00013EFA 117C 0013 0016             		move.b	#$13,$16(a0)
00013F00 117C 0009 0017             		move.b	#9,$17(a0)
00013F06 0828 0002 0022             		btst	#2,$22(a0)
00013F0C 6600                       		bne.s	loc_13490
00013F0E 117C 000E 0016             		move.b	#$E,$16(a0)
00013F14 117C 0007 0017             		move.b	#7,$17(a0)
00013F1A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013F20 08E8 0002 0022             		bset	#2,$22(a0)
00013F26 5A68 000C                  		addq.w	#5,$C(a0)
00013F2A 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013F30                            
00013F30                            locret_1348E:
00013F30 4E75                       		rts	
00013F32                            ; ===========================================================================
00013F32                            
00013F32                            loc_13490:
00013F32 08E8 0004 0022             		bset	#4,$22(a0)
00013F38 4E75                       		rts	
00013F3A                            ; End of function Sonic_Jump
00013F3A                            
00013F3A                            
00013F3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F3A                            
00013F3A                            
00013F3A                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013F3A 4A28 003C                  		tst.b	$3C(a0)
00013F3E 6700                       		beq.s	loc_134C4
00013F40 323C FC00                  		move.w	#-$400,d1
00013F44 0828 0006 0022             		btst	#6,$22(a0)
00013F4A 6700                       		beq.s	loc_134AE
00013F4C 323C FE00                  		move.w	#-$200,d1
00013F50                            
00013F50                            loc_134AE:
00013F50 B268 0012                  		cmp.w	$12(a0),d1
00013F54 6F00                       		ble.s	locret_134C2
00013F56 1038 F602                  		move.b	($FFFFF602).w,d0
00013F5A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013F5E 6600                       		bne.s	locret_134C2	; if yes, branch
00013F60 3141 0012                  		move.w	d1,$12(a0)
00013F64                            
00013F64                            locret_134C2:
00013F64 4E75                       		rts	
00013F66                            ; ===========================================================================
00013F66                            
00013F66                            loc_134C4:
00013F66 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013F6C 6C00                       		bge.s	locret_134D2
00013F6E 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013F74                            
00013F74                            locret_134D2:
00013F74 4E75                       		rts	
00013F76                            ; End of function Sonic_JumpHeight
00013F76                            
00013F76                            ; ---------------------------------------------------------------------------
00013F76                            ; Subroutine to	slow Sonic walking up a	slope
00013F76                            ; ---------------------------------------------------------------------------
00013F76                            
00013F76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F76                            
00013F76                            
00013F76                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013F76 1028 0026                  		move.b	$26(a0),d0
00013F7A 0600 0060                  		addi.b	#$60,d0
00013F7E 0C00 00C0                  		cmpi.b	#$C0,d0
00013F82 6400                       		bcc.s	locret_13508
00013F84 1028 0026                  		move.b	$26(a0),d0
00013F88 4EB9 0000 2D28             		jsr	(CalcSine).l
00013F8E C1FC 0020                  		muls.w	#$20,d0
00013F92 E080                       		asr.l	#8,d0
00013F94 4A68 0014                  		tst.w	$14(a0)
00013F98 6700                       		beq.s	locret_13508
00013F9A 6B00                       		bmi.s	loc_13504
00013F9C 4A40                       		tst.w	d0
00013F9E 6700                       		beq.s	locret_13502
00013FA0 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013FA4                            
00013FA4                            locret_13502:
00013FA4 4E75                       		rts	
00013FA6                            ; ===========================================================================
00013FA6                            
00013FA6                            loc_13504:
00013FA6 D168 0014                  		add.w	d0,$14(a0)
00013FAA                            
00013FAA                            locret_13508:
00013FAA 4E75                       		rts	
00013FAC                            ; End of function Sonic_SlopeResist
00013FAC                            
00013FAC                            ; ---------------------------------------------------------------------------
00013FAC                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013FAC                            ; ---------------------------------------------------------------------------
00013FAC                            
00013FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FAC                            
00013FAC                            
00013FAC                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013FAC 1028 0026                  		move.b	$26(a0),d0
00013FB0 0600 0060                  		addi.b	#$60,d0
00013FB4 0C00 00C0                  		cmpi.b	#-$40,d0
00013FB8 6400                       		bcc.s	locret_13544
00013FBA 1028 0026                  		move.b	$26(a0),d0
00013FBE 4EB9 0000 2D28             		jsr	(CalcSine).l
00013FC4 C1FC 0050                  		muls.w	#$50,d0
00013FC8 E080                       		asr.l	#8,d0
00013FCA 4A68 0014                  		tst.w	$14(a0)
00013FCE 6B00                       		bmi.s	loc_1353A
00013FD0 4A40                       		tst.w	d0
00013FD2 6A00                       		bpl.s	loc_13534
00013FD4 E480                       		asr.l	#2,d0
00013FD6                            
00013FD6                            loc_13534:
00013FD6 D168 0014                  		add.w	d0,$14(a0)
00013FDA 4E75                       		rts	
00013FDC                            ; ===========================================================================
00013FDC                            
00013FDC                            loc_1353A:
00013FDC 4A40                       		tst.w	d0
00013FDE 6B00                       		bmi.s	loc_13540
00013FE0 E480                       		asr.l	#2,d0
00013FE2                            
00013FE2                            loc_13540:
00013FE2 D168 0014                  		add.w	d0,$14(a0)
00013FE6                            
00013FE6                            locret_13544:
00013FE6 4E75                       		rts	
00013FE8                            ; End of function Sonic_RollRepel
00013FE8                            
00013FE8                            ; ---------------------------------------------------------------------------
00013FE8                            ; Subroutine to	push Sonic down	a slope
00013FE8                            ; ---------------------------------------------------------------------------
00013FE8                            
00013FE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FE8                            
00013FE8                            
00013FE8                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013FE8 4E71                       		nop	
00013FEA 4A28 0038                  		tst.b	$38(a0)
00013FEE 6600                       		bne.s	locret_13580
00013FF0 4A68 003E                  		tst.w	$3E(a0)
00013FF4 6600                       		bne.s	loc_13582
00013FF6 1028 0026                  		move.b	$26(a0),d0
00013FFA 0600 0020                  		addi.b	#$20,d0
00013FFE 0200 00C0                  		andi.b	#$C0,d0
00014002 6700                       		beq.s	locret_13580
00014004 3028 0014                  		move.w	$14(a0),d0
00014008 6A00                       		bpl.s	loc_1356A
0001400A 4440                       		neg.w	d0
0001400C                            
0001400C                            loc_1356A:
0001400C 0C40 0280                  		cmpi.w	#$280,d0
00014010 6400                       		bcc.s	locret_13580
00014012 4268 0014                  		clr.w	$14(a0)
00014016 08E8 0001 0022             		bset	#1,$22(a0)
0001401C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014022                            
00014022                            locret_13580:
00014022 4E75                       		rts	
00014024                            ; ===========================================================================
00014024                            
00014024                            loc_13582:
00014024 5368 003E                  		subq.w	#1,$3E(a0)
00014028 4E75                       		rts	
0001402A                            ; End of function Sonic_SlopeRepel
0001402A                            
0001402A                            ; ---------------------------------------------------------------------------
0001402A                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001402A                            ; ---------------------------------------------------------------------------
0001402A                            
0001402A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001402A                            
0001402A                            
0001402A                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001402A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001402E 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014030 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014032                            
00014032 5400                       		addq.b	#2,d0		; increase angle
00014034 6400                       		bcc.s	loc_13596
00014036 7000                       		moveq	#0,d0
00014038                            
00014038                            loc_13596:
00014038 6000                       		bra.s	loc_1359E
0001403A                            ; ===========================================================================
0001403A                            
0001403A                            loc_13598:
0001403A 5500                       		subq.b	#2,d0		; decrease angle
0001403C 6400                       		bcc.s	loc_1359E
0001403E 7000                       		moveq	#0,d0
00014040                            
00014040                            loc_1359E:
00014040 1140 0026                  		move.b	d0,$26(a0)
00014044                            
00014044                            locret_135A2:
00014044 4E75                       		rts	
00014046                            ; End of function Sonic_JumpAngle
00014046                            
00014046                            ; ---------------------------------------------------------------------------
00014046                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014046                            ; ---------------------------------------------------------------------------
00014046                            
00014046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014046                            
00014046                            
00014046                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014046 3228 0010                  		move.w	$10(a0),d1
0001404A 3428 0012                  		move.w	$12(a0),d2
0001404E 4EB9 0000 2FF6             		jsr	(CalcAngle).l
00014054 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00014058 0400 0020                  		subi.b	#$20,d0
0001405C 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00014060 0200 00C0                  		andi.b	#$C0,d0
00014064 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00014068 0C00 0040                  		cmpi.b	#$40,d0
0001406C 6700 0000                  		beq.w	loc_13680
00014070 0C00 0080                  		cmpi.b	#$80,d0
00014074 6700 0000                  		beq.w	loc_136E2
00014078 0C00 00C0                  		cmpi.b	#-$40,d0
0001407C 6700 0000                  		beq.w	loc_1373E
00014080 6100 0000                  		bsr.w	Sonic_HitWall
00014084 4A41                       		tst.w	d1
00014086 6A00                       		bpl.s	loc_135F0
00014088 9368 0008                  		sub.w	d1,8(a0)
0001408C 317C 0000 0010             		move.w	#0,$10(a0)
00014092                            
00014092                            loc_135F0:
00014092 6100 0000                  		bsr.w	sub_14EB4
00014096 4A41                       		tst.w	d1
00014098 6A00                       		bpl.s	loc_13602
0001409A D368 0008                  		add.w	d1,8(a0)
0001409E 317C 0000 0010             		move.w	#0,$10(a0)
000140A4                            
000140A4                            loc_13602:
000140A4 6100 0000                  		bsr.w	Sonic_HitFloor
000140A8 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000140AC 4A41                       		tst.w	d1
000140AE 6A00                       		bpl.s	locret_1367E
000140B0 1428 0012                  		move.b	$12(a0),d2
000140B4 5002                       		addq.b	#8,d2
000140B6 4402                       		neg.b	d2
000140B8 B202                       		cmp.b	d2,d1
000140BA 6C00                       		bge.s	loc_1361E
000140BC B002                       		cmp.b	d2,d0
000140BE 6D00                       		blt.s	locret_1367E
000140C0                            
000140C0                            loc_1361E:
000140C0 D368 000C                  		add.w	d1,$C(a0)
000140C4 1143 0026                  		move.b	d3,$26(a0)
000140C8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000140CC 117C 0000 001C             		move.b	#0,$1C(a0)
000140D2 1003                       		move.b	d3,d0
000140D4 0600 0020                  		addi.b	#$20,d0
000140D8 0200 0040                  		andi.b	#$40,d0
000140DC 6600                       		bne.s	loc_1365C
000140DE 1003                       		move.b	d3,d0
000140E0 0600 0010                  		addi.b	#$10,d0
000140E4 0200 0020                  		andi.b	#$20,d0
000140E8 6700                       		beq.s	loc_1364E
000140EA E0E8 0012                  		asr	$12(a0)
000140EE 6000                       		bra.s	loc_13670
000140F0                            ; ===========================================================================
000140F0                            
000140F0                            loc_1364E:
000140F0 317C 0000 0012             		move.w	#0,$12(a0)
000140F6 3168 0010 0014             		move.w	$10(a0),$14(a0)
000140FC 4E75                       		rts	
000140FE                            ; ===========================================================================
000140FE                            
000140FE                            loc_1365C:
000140FE 317C 0000 0010             		move.w	#0,$10(a0)
00014104 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
0001410A 6F00                       		ble.s	loc_13670
0001410C 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00014112                            
00014112                            loc_13670:
00014112 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014118 4A03                       		tst.b	d3
0001411A 6A00                       		bpl.s	locret_1367E
0001411C 4468 0014                  		neg.w	$14(a0)
00014120                            
00014120                            locret_1367E:
00014120 4E75                       		rts	
00014122                            ; ===========================================================================
00014122                            
00014122                            loc_13680:
00014122 6100 0000                  		bsr.w	Sonic_HitWall
00014126 4A41                       		tst.w	d1
00014128 6A00                       		bpl.s	loc_1369A
0001412A 9368 0008                  		sub.w	d1,8(a0)
0001412E 317C 0000 0010             		move.w	#0,$10(a0)
00014134 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001413A 4E75                       		rts	
0001413C                            ; ===========================================================================
0001413C                            
0001413C                            loc_1369A:
0001413C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014140 4A41                       		tst.w	d1
00014142 6A00                       		bpl.s	loc_136B4
00014144 9368 000C                  		sub.w	d1,$C(a0)
00014148 4A68 0012                  		tst.w	$12(a0)
0001414C 6A00                       		bpl.s	locret_136B2
0001414E 317C 0000 0012             		move.w	#0,$12(a0)
00014154                            
00014154                            locret_136B2:
00014154 4E75                       		rts	
00014156                            ; ===========================================================================
00014156                            
00014156                            loc_136B4:
00014156 4A68 0012                  		tst.w	$12(a0)
0001415A 6B00                       		bmi.s	locret_136E0
0001415C 6100 0000                  		bsr.w	Sonic_HitFloor
00014160 4A41                       		tst.w	d1
00014162 6A00                       		bpl.s	locret_136E0
00014164 D368 000C                  		add.w	d1,$C(a0)
00014168 1143 0026                  		move.b	d3,$26(a0)
0001416C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014170 117C 0000 001C             		move.b	#0,$1C(a0)
00014176 317C 0000 0012             		move.w	#0,$12(a0)
0001417C 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014182                            
00014182                            locret_136E0:
00014182 4E75                       		rts	
00014184                            ; ===========================================================================
00014184                            
00014184                            loc_136E2:
00014184 6100 0000                  		bsr.w	Sonic_HitWall
00014188 4A41                       		tst.w	d1
0001418A 6A00                       		bpl.s	loc_136F4
0001418C 9368 0008                  		sub.w	d1,8(a0)
00014190 317C 0000 0010             		move.w	#0,$10(a0)
00014196                            
00014196                            loc_136F4:
00014196 6100 0000                  		bsr.w	sub_14EB4
0001419A 4A41                       		tst.w	d1
0001419C 6A00                       		bpl.s	loc_13706
0001419E D368 0008                  		add.w	d1,8(a0)
000141A2 317C 0000 0010             		move.w	#0,$10(a0)
000141A8                            
000141A8                            loc_13706:
000141A8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000141AC 4A41                       		tst.w	d1
000141AE 6A00                       		bpl.s	locret_1373C
000141B0 9368 000C                  		sub.w	d1,$C(a0)
000141B4 1003                       		move.b	d3,d0
000141B6 0600 0020                  		addi.b	#$20,d0
000141BA 0200 0040                  		andi.b	#$40,d0
000141BE 6600                       		bne.s	loc_13726
000141C0 317C 0000 0012             		move.w	#0,$12(a0)
000141C6 4E75                       		rts	
000141C8                            ; ===========================================================================
000141C8                            
000141C8                            loc_13726:
000141C8 1143 0026                  		move.b	d3,$26(a0)
000141CC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000141D0 3168 0012 0014             		move.w	$12(a0),$14(a0)
000141D6 4A03                       		tst.b	d3
000141D8 6A00                       		bpl.s	locret_1373C
000141DA 4468 0014                  		neg.w	$14(a0)
000141DE                            
000141DE                            locret_1373C:
000141DE 4E75                       		rts	
000141E0                            ; ===========================================================================
000141E0                            
000141E0                            loc_1373E:
000141E0 6100 0000                  		bsr.w	sub_14EB4
000141E4 4A41                       		tst.w	d1
000141E6 6A00                       		bpl.s	loc_13758
000141E8 D368 0008                  		add.w	d1,8(a0)
000141EC 317C 0000 0010             		move.w	#0,$10(a0)
000141F2 3168 0012 0014             		move.w	$12(a0),$14(a0)
000141F8 4E75                       		rts	
000141FA                            ; ===========================================================================
000141FA                            
000141FA                            loc_13758:
000141FA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000141FE 4A41                       		tst.w	d1
00014200 6A00                       		bpl.s	loc_13772
00014202 9368 000C                  		sub.w	d1,$C(a0)
00014206 4A68 0012                  		tst.w	$12(a0)
0001420A 6A00                       		bpl.s	locret_13770
0001420C 317C 0000 0012             		move.w	#0,$12(a0)
00014212                            
00014212                            locret_13770:
00014212 4E75                       		rts	
00014214                            ; ===========================================================================
00014214                            
00014214                            loc_13772:
00014214 4A68 0012                  		tst.w	$12(a0)
00014218 6B00                       		bmi.s	locret_1379E
0001421A 6100 0000                  		bsr.w	Sonic_HitFloor
0001421E 4A41                       		tst.w	d1
00014220 6A00                       		bpl.s	locret_1379E
00014222 D368 000C                  		add.w	d1,$C(a0)
00014226 1143 0026                  		move.b	d3,$26(a0)
0001422A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001422E 117C 0000 001C             		move.b	#0,$1C(a0)
00014234 317C 0000 0012             		move.w	#0,$12(a0)
0001423A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014240                            
00014240                            locret_1379E:
00014240 4E75                       		rts	
00014242                            ; End of function Sonic_Floor
00014242                            
00014242                            ; ---------------------------------------------------------------------------
00014242                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00014242                            ; ---------------------------------------------------------------------------
00014242                            
00014242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014242                            
00014242                            
00014242                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00014242 0828 0004 0022             		btst	#4,$22(a0)
00014248 6700                       		beq.s	loc_137AE
0001424A 4E71                       		nop	
0001424C 4E71                       		nop	
0001424E 4E71                       		nop	
00014250                            
00014250                            loc_137AE:
00014250 08A8 0005 0022             		bclr	#5,$22(a0)
00014256 08A8 0001 0022             		bclr	#1,$22(a0)
0001425C 08A8 0004 0022             		bclr	#4,$22(a0)
00014262 0828 0002 0022             		btst	#2,$22(a0)
00014268 6700                       		beq.s	loc_137E4
0001426A 08A8 0002 0022             		bclr	#2,$22(a0)
00014270 117C 0013 0016             		move.b	#$13,$16(a0)
00014276 117C 0009 0017             		move.b	#9,$17(a0)
0001427C 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00014282 5B68 000C                  		subq.w	#5,$C(a0)
00014286                            
00014286                            loc_137E4:
00014286 117C 0000 003C             		move.b	#0,$3C(a0)
0001428C 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00014292 4E75                       		rts	
00014294                            ; End of function Sonic_ResetOnFloor
00014294                            
00014294                            ; ===========================================================================
00014294                            ; ---------------------------------------------------------------------------
00014294                            ; Sonic	when he	gets hurt
00014294                            ; ---------------------------------------------------------------------------
00014294                            
00014294                            Obj01_Hurt:				; XREF: Obj01_Index
00014294 4EBA 9D3A                  		jsr	SpeedToPos
00014298 0668 0030 0012             		addi.w	#$30,$12(a0)
0001429E 0828 0006 0022             		btst	#6,$22(a0)
000142A4 6700                       		beq.s	loc_1380C
000142A6 0468 0020 0012             		subi.w	#$20,$12(a0)
000142AC                            
000142AC                            loc_1380C:
000142AC 6100 0000                  		bsr.w	Sonic_HurtStop
000142B0 6100 FAEE                  		bsr.w	Sonic_LevelBound
000142B4 6100 F4B4                  		bsr.w	Sonic_RecordPos
000142B8 6100 0000                  		bsr.w	Sonic_Animate
000142BC 6100 0000                  		bsr.w	LoadSonicDynPLC
000142C0 4EFA 9D34                  		jmp	DisplaySprite
000142C4                            
000142C4                            ; ---------------------------------------------------------------------------
000142C4                            ; Subroutine to	stop Sonic falling after he's been hurt
000142C4                            ; ---------------------------------------------------------------------------
000142C4                            
000142C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142C4                            
000142C4                            
000142C4                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000142C4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000142C8 0640 00E0                  		addi.w	#$E0,d0
000142CC B068 000C                  		cmp.w	$C(a0),d0
000142D0 6500 0000                  		bcs.w	KillSonic
000142D4 6100 FD70                  		bsr.w	Sonic_Floor
000142D8 0828 0001 0022             		btst	#1,$22(a0)
000142DE 6600                       		bne.s	locret_13860
000142E0 7000                       		moveq	#0,d0
000142E2 3140 0012                  		move.w	d0,$12(a0)
000142E6 3140 0010                  		move.w	d0,$10(a0)
000142EA 3140 0014                  		move.w	d0,$14(a0)
000142EE 117C 0000 001C             		move.b	#0,$1C(a0)
000142F4 5528 0024                  		subq.b	#2,$24(a0)
000142F8 317C 0078 0030             		move.w	#$78,$30(a0)
000142FE                            
000142FE                            locret_13860:
000142FE 4E75                       		rts	
00014300                            ; End of function Sonic_HurtStop
00014300                            
00014300                            ; ===========================================================================
00014300                            ; ---------------------------------------------------------------------------
00014300                            ; Sonic	when he	dies
00014300                            ; ---------------------------------------------------------------------------
00014300                            
00014300                            Obj01_Death:				; XREF: Obj01_Index
00014300 6100 0000                  		bsr.w	GameOver
00014304 4EBA 9C58                  		jsr	ObjectFall
00014308 6100 F460                  		bsr.w	Sonic_RecordPos
0001430C 6100 0000                  		bsr.w	Sonic_Animate
00014310 6100 0000                  		bsr.w	LoadSonicDynPLC
00014314 4EFA 9CE0                  		jmp	DisplaySprite
00014318                            
00014318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014318                            
00014318                            
00014318                            GameOver:				; XREF: Obj01_Death
00014318 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001431C 0640 0100                  		addi.w	#$100,d0
00014320 B068 000C                  		cmp.w	$C(a0),d0
00014324 6400 0000                  		bcc.w	locret_13900
00014328 317C FFC8 0012             		move.w	#-$38,$12(a0)
0001432E 5428 0024                  		addq.b	#2,$24(a0)
00014332 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014336 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
0001433A 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
0001433E 6600                       		bne.s	loc_138D4
00014340 317C 0000 003A             		move.w	#0,$3A(a0)
00014346 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
0001434C 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014352 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014358 4238 FE1A                  		clr.b	($FFFFFE1A).w
0001435C                            
0001435C                            loc_138C2:
0001435C 303C 008F                  		move.w	#$8F,d0
00014360 4EB9 0000 1588             		jsr	(PlaySound).l	; play game over music
00014366 7003                       		moveq	#3,d0
00014368 4EF9 0000 1772             		jmp	(LoadPLC).l	; load game over patterns
0001436E                            ; ===========================================================================
0001436E                            
0001436E                            loc_138D4:
0001436E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014374 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014378 6700                       		beq.s	locret_13900	; if not, branch
0001437A 317C 0000 003A             		move.w	#0,$3A(a0)
00014380 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014386 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001438C 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014392 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014398 60C2                       		bra.s	loc_138C2
0001439A                            ; ===========================================================================
0001439A                            
0001439A                            locret_13900:
0001439A 4E75                       		rts	
0001439C                            ; End of function GameOver
0001439C                            
0001439C                            ; ===========================================================================
0001439C                            ; ---------------------------------------------------------------------------
0001439C                            ; Sonic	when the level is restarted
0001439C                            ; ---------------------------------------------------------------------------
0001439C                            
0001439C                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001439C 4A68 003A                  		tst.w	$3A(a0)
000143A0 6700                       		beq.s	locret_13914
000143A2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000143A6 6600                       		bne.s	locret_13914
000143A8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000143AE                            
000143AE                            locret_13914:
000143AE 4E75                       		rts	
000143B0                            
000143B0                            ; ---------------------------------------------------------------------------
000143B0                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000143B0                            ; ---------------------------------------------------------------------------
000143B0                            
000143B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000143B0                            
000143B0                            
000143B0                            Sonic_Loops:				; XREF: Obj01_Control
000143B0                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
000143B0                            ;		beq.s	loc_13926	; if yes, branch
000143B0                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
000143B0                            ;		bne.w	locret_139C2	; if not, branch
000143B0                            ;		this is commented out, please do more plane messups id love that
000143B0                            ;loc_13926:
000143B0 3028 000C                  		move.w	$C(a0),d0
000143B4 E248                       		lsr.w	#1,d0
000143B6 0240 0380                  		andi.w	#$380,d0
000143BA 1228 0008                  		move.b	8(a0),d1
000143BE 0241 007F                  		andi.w	#$7F,d1
000143C2 D041                       		add.w	d1,d0
000143C4 43F8 A400                  		lea	($FFFFA400).w,a1
000143C8 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000143CC B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000143D0 6700 FA76                  		beq.w	Obj01_ChkRoll
000143D4 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000143D8 6700 FA6E                  		beq.w	Obj01_ChkRoll
000143DC B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000143E0 6700                       		beq.s	loc_13976
000143E2 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000143E6 6700                       		beq.s	loc_13966
000143E8 08A8 0006 0001             		bclr	#6,1(a0)
000143EE 4E75                       		rts	
000143F0                            ; ===========================================================================
000143F0                            
000143F0                            loc_13966:
000143F0 0828 0001 0022             		btst	#1,$22(a0)
000143F6 6700                       		beq.s	loc_13976
000143F8 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000143FE 4E75                       		rts	
00014400                            ; ===========================================================================
00014400                            
00014400                            loc_13976:
00014400 3428 0008                  		move.w	8(a0),d2
00014404 0C02 002C                  		cmpi.b	#$2C,d2
00014408 6400                       		bcc.s	loc_13988
0001440A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014410 4E75                       		rts	
00014412                            ; ===========================================================================
00014412                            
00014412                            loc_13988:
00014412 0C02 00E0                  		cmpi.b	#-$20,d2
00014416 6500                       		bcs.s	loc_13996
00014418 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001441E 4E75                       		rts	
00014420                            ; ===========================================================================
00014420                            
00014420                            loc_13996:
00014420 0828 0006 0001             		btst	#6,1(a0)
00014426 6600                       		bne.s	loc_139B2
00014428 1228 0026                  		move.b	$26(a0),d1
0001442C 6700                       		beq.s	locret_139C2
0001442E 0C01 0080                  		cmpi.b	#-$80,d1
00014432 6200                       		bhi.s	locret_139C2
00014434 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001443A 4E75                       		rts	
0001443C                            ; ===========================================================================
0001443C                            
0001443C                            loc_139B2:
0001443C 1228 0026                  		move.b	$26(a0),d1
00014440 0C01 0080                  		cmpi.b	#-$80,d1
00014444 6300                       		bls.s	locret_139C2
00014446 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001444C                            
0001444C                            locret_139C2:
0001444C 4E75                       		rts	
0001444E                            ; End of function Sonic_Loops
0001444E                            
0001444E                            ; ---------------------------------------------------------------------------
0001444E                            ; Subroutine to	animate	Sonic's sprites
0001444E                            ; ---------------------------------------------------------------------------
0001444E                            
0001444E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001444E                            
0001444E                            Player_Anim:
0001444E 0000 0000                  	dc.l	SonicAniData
00014452 0000 0000                  	dc.l	SonicAniData ; gronic
00014456 0000 0000                  	dc.l	SonicAniData ; anakama
0001445A 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
0001445E                            
0001445E                            	; Insert more animation data for other characters here
0001445E                            	
0001445E                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001445E 7000                       			moveq	#0,d0
00014460 1038 FFE8                  		move.b	(v_character),d0
00014464 E548                       		lsl.w	#2,d0
00014466 43FA FFE6                  		lea 	Player_Anim(pc),a1
0001446A                            		
0001446A 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
0001446E                            	
0001446E 7000                       		moveq	#0,d0
00014470 1028 001C                  		move.b	$1C(a0),d0
00014474 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014478 6700                       		beq.s	SAnim_Do	; if not, branch
0001447A 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0001447E 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014484 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001448A                            
0001448A                            SAnim_Do:
0001448A D040                       		add.w	d0,d0
0001448C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014490 1011                       		move.b	(a1),d0
00014492 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014494 1228 0022                  		move.b	$22(a0),d1
00014498 0201 0001                  		andi.b	#1,d1
0001449C 0228 00FC 0001             		andi.b	#$FC,1(a0)
000144A2 8328 0001                  		or.b	d1,1(a0)
000144A6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000144AA 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000144AC 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000144B0                            
000144B0                            SAnim_Do2:
000144B0 7200                       		moveq	#0,d1
000144B2 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000144B6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000144BA 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000144BC                            
000144BC                            SAnim_Next:
000144BC 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000144C0 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000144C4                            
000144C4                            SAnim_Delay:
000144C4 4E75                       		rts	
000144C6                            ; ===========================================================================
000144C6                            
000144C6                            SAnim_End_FF:
000144C6 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000144C8 6600                       		bne.s	SAnim_End_FE	; if not, branch
000144CA 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000144D0 1029 0001                  		move.b	1(a1),d0	; read sprite number
000144D4 60E6                       		bra.s	SAnim_Next
000144D6                            ; ===========================================================================
000144D6                            
000144D6                            SAnim_End_FE:
000144D6 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000144D8 6600                       		bne.s	SAnim_End_FD	; if not, branch
000144DA 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000144DE 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000144E2 9200                       		sub.b	d0,d1
000144E4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000144E8 60D2                       		bra.s	SAnim_Next
000144EA                            ; ===========================================================================
000144EA                            
000144EA                            SAnim_End_FD:
000144EA 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000144EC 6600                       		bne.s	SAnim_End	; if not, branch
000144EE 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000144F4                            
000144F4                            SAnim_End:
000144F4 4E75                       		rts	
000144F6                            ; ===========================================================================
000144F6                            
000144F6                            SAnim_WalkRun:				; XREF: SAnim_Do
000144F6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000144FA 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000144FC 5200                       		addq.b	#1,d0		; is animation walking/running?
000144FE 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014502 7200                       		moveq	#0,d1
00014504 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014508 1428 0022                  		move.b	$22(a0),d2
0001450C 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014510 6600                       		bne.s	loc_13A70	; if yes, branch
00014512 4600                       		not.b	d0		; reverse angle
00014514                            
00014514                            loc_13A70:
00014514 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014518 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001451A 7203                       		moveq	#3,d1
0001451C                            
0001451C                            loc_13A78:
0001451C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014522 B302                       		eor.b	d1,d2
00014524 8528 0001                  		or.b	d2,1(a0)
00014528 0828 0005 0022             		btst	#5,$22(a0)
0001452E 6600 0000                  		bne.w	SAnim_Push
00014532 E808                       		lsr.b	#4,d0		; divide angle by $10
00014534 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014538 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001453C 6A00                       		bpl.s	loc_13A9C
0001453E 4442                       		neg.w	d2
00014540                            
00014540                            loc_13A9C:
00014540 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014546 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001454A 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001454C 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014552 1200                       		move.b	d0,d1
00014554 E209                       		lsr.b	#1,d1
00014556 D001                       		add.b	d1,d0
00014558                            
00014558                            loc_13AB4:
00014558 D000                       		add.b	d0,d0
0001455A 1600                       		move.b	d0,d3
0001455C 4442                       		neg.w	d2
0001455E 0642 0800                  		addi.w	#$800,d2
00014562 6A00                       		bpl.s	loc_13AC2
00014564 7400                       		moveq	#0,d2
00014566                            
00014566                            loc_13AC2:
00014566 E04A                       		lsr.w	#8,d2
00014568 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001456C 6100 FF42                  		bsr.w	SAnim_Do2
00014570 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014574 4E75                       		rts	
00014576                            ; ===========================================================================
00014576                            
00014576                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014576 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014578 6600                       		bne.s	SAnim_Push	; if not, branch
0001457A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001457E 6A00                       		bpl.s	loc_13ADE
00014580 4442                       		neg.w	d2
00014582                            
00014582                            loc_13ADE:
00014582 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014588 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001458C 6400                       		bcc.s	loc_13AF0	; if yes, branch
0001458E 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014594                            
00014594                            loc_13AF0:
00014594 4442                       		neg.w	d2
00014596 0642 0400                  		addi.w	#$400,d2
0001459A 6A00                       		bpl.s	loc_13AFA
0001459C 7400                       		moveq	#0,d2
0001459E                            
0001459E                            loc_13AFA:
0001459E E04A                       		lsr.w	#8,d2
000145A0 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145A4 1228 0022                  		move.b	$22(a0),d1
000145A8 0201 0001                  		andi.b	#1,d1
000145AC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000145B2 8328 0001                  		or.b	d1,1(a0)
000145B6 6000 FEF8                  		bra.w	SAnim_Do2
000145BA                            ; ===========================================================================
000145BA                            
000145BA                            SAnim_Push:				; XREF: SAnim_RollJump
000145BA 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000145BE 6B00                       		bmi.s	loc_13B1E
000145C0 4442                       		neg.w	d2
000145C2                            
000145C2                            loc_13B1E:
000145C2 0642 0800                  		addi.w	#$800,d2
000145C6 6A00                       		bpl.s	loc_13B26
000145C8 7400                       		moveq	#0,d2
000145CA                            
000145CA                            loc_13B26:
000145CA EC4A                       		lsr.w	#6,d2
000145CC 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145D0 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000145D6 1228 0022                  		move.b	$22(a0),d1
000145DA 0201 0001                  		andi.b	#1,d1
000145DE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000145E4 8328 0001                  		or.b	d1,1(a0)
000145E8 6000 FEC6                  		bra.w	SAnim_Do2
000145EC                            ; End of function Sonic_Animate
000145EC                            
000145EC                            ; ===========================================================================
000145EC                            SonicAniData:
000145EC                            	include "_anim\Sonic.asm"
000145EC                            ; ---------------------------------------------------------------------------
000145EC                            ; Animation script - Sonic
000145EC                            ; ---------------------------------------------------------------------------
000145EC 0000                       		dc.w SonAni_Walk-SonicAniData
000145EE 0000                       		dc.w SonAni_Run-SonicAniData
000145F0 0000                       		dc.w SonAni_Roll-SonicAniData
000145F2 0000                       		dc.w SonAni_Roll2-SonicAniData
000145F4 0000                       		dc.w SonAni_Push-SonicAniData
000145F6 0000                       		dc.w SonAni_Wait-SonicAniData
000145F8 0000                       		dc.w SonAni_Balance-SonicAniData
000145FA 0000                       		dc.w SonAni_LookUp-SonicAniData
000145FC 0000                       		dc.w SonAni_Duck-SonicAniData
000145FE 0000                       		dc.w SonAni_Warp1-SonicAniData
00014600 0000                       		dc.w SonAni_Warp2-SonicAniData
00014602 0000                       		dc.w SonAni_Warp3-SonicAniData
00014604 0000                       		dc.w SonAni_Warp4-SonicAniData
00014606 0000                       		dc.w SonAni_Stop-SonicAniData
00014608 0000                       		dc.w SonAni_Float1-SonicAniData
0001460A 0000                       		dc.w SonAni_Float2-SonicAniData
0001460C 0000                       		dc.w SonAni_Spring-SonicAniData
0001460E 0000                       		dc.w SonAni_LZHang-SonicAniData
00014610 0000                       		dc.w SonAni_Leap1-SonicAniData
00014612 0000                       		dc.w SonAni_Leap2-SonicAniData
00014614 0000                       		dc.w SonAni_Surf-SonicAniData
00014616 0000                       		dc.w SonAni_Bubble-SonicAniData
00014618 0000                       		dc.w SonAni_Death1-SonicAniData
0001461A 0000                       		dc.w SonAni_Drown-SonicAniData
0001461C 0000                       		dc.w SonAni_Death2-SonicAniData
0001461E 0000                       		dc.w SonAni_Shrink-SonicAniData
00014620 0000                       		dc.w SonAni_Hurt-SonicAniData
00014622 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014624 0000                       		dc.w SonAni_Blank-SonicAniData
00014626 0000                       		dc.w SonAni_Float3-SonicAniData
00014628 0000                       		dc.w SonAni_Float4-SonicAniData
0001462A FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014634 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001463C FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014644 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001464C FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014654 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001466A 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
0001466E 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014672 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014676 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
0001467A 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
0001467E 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014682 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014686 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
0001468A 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001468E 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014696 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001469A 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001469E 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000146A4 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000146AA 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000146AE 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000146B6 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000146BA 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000146BE 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000146C2 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000146CC 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000146D0 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000146D4 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000146D8 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000146E0 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000146E4                            		even
000146E4                            		even
000146E4                            
000146E4                            ; ---------------------------------------------------------------------------
000146E4                            ; Sonic	pattern	loading	subroutine
000146E4                            ; ---------------------------------------------------------------------------
000146E4                            
000146E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146E4                            Player_DPLC:
000146E4 0000 0000                  	dc.l	SonicDynPLC
000146E8 0000 0000                  	dc.l	SonicDynPLC ; gronic
000146EC 0000 0000                  	dc.l	SonicDynPLC ; anakama
000146F0 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
000146F4                            	; add pointers for player dplc here
000146F4                            Player_Art:
000146F4 0000 0000                  	dc.l	Art_Sonic
000146F8 0000 0000                  	dc.l	Art_Sonic ; gronic
000146FC 0000 0000                  	dc.l	Art_Sonic ; anakama
00014700 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
00014704                            	; add pointers for player art here
00014704                            
00014704                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014704 7000                       		moveq	#0,d0
00014706 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001470A B038 F766                  		cmp.b	($FFFFF766).w,d0
0001470E 6700                       		beq.s	locret_13C96
00014710 11C0 F766                  		move.b	d0,($FFFFF766).w
00014714                            		
00014714 323C 0000                  		move.w	#0,d1
00014718 1238 FFE8                  		move.b	(v_character),d1
0001471C E549                       		lsl.w	#2,d1
0001471E 45FA FFC4                  		lea 	Player_DPLC(pc),a2
00014722                            
00014722 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014726                            		
00014726 D040                       		add.w	d0,d0
00014728 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001472C 7200                       		moveq	#0,d1
0001472E 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014730 5301                       		subq.b	#1,d1
00014732 6B00                       		bmi.s	locret_13C96
00014734 47F8 C800                  		lea	($FFFFC800).w,a3
00014738 11FC 0001 F767             		move.b	#1,($FFFFF767).w
0001473E                            
0001473E                            SPLC_ReadEntry:
0001473E 303C 0000                  		move.w	#0,d0
00014742 1038 FFE8                  		move.b	(v_character),d0
00014746 E548                       		lsl.w	#2,d0
00014748 43FA FFAA                  		lea 	Player_Art(pc),a1
0001474C                            
0001474C 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014750                            
00014750 7400                       		moveq	#0,d2
00014752 141A                       		move.b	(a2)+,d2
00014754 3002                       		move.w	d2,d0
00014756 E808                       		lsr.b	#4,d0
00014758 E14A                       		lsl.w	#8,d2
0001475A 141A                       		move.b	(a2)+,d2
0001475C EB4A                       		lsl.w	#5,d2
0001475E D3C2                       		adda.l	d2,a1
00014760                            
00014760                            SPLC_LoadTile:
00014760 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014764 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014768 47EB 0020                  		lea	$20(a3),a3	; next tile
0001476C 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014770                            
00014770 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014774                            
00014774                            locret_13C96:
00014774 4E75                       		rts	
00014776                            ; End of function LoadSonicDynPLC
00014776                            
00014776                            ; ===========================================================================
00014776                            ; ---------------------------------------------------------------------------
00014776                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014776                            ; ---------------------------------------------------------------------------
00014776                            
00014776                            Obj0A:					; XREF: Obj_Index
00014776 7000                       		moveq	#0,d0
00014778 1028 0024                  		move.b	$24(a0),d0
0001477C 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014780 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014784                            ; ===========================================================================
00014784 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014788 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001478C 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014790 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014794 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014796                            ; ===========================================================================
00014796                            
00014796                            Obj0A_Main:				; XREF: Obj0A_Index
00014796 5428 0024                  		addq.b	#2,$24(a0)
0001479A 217C 0001 338E 0004        		move.l	#Map_obj64,4(a0)
000147A2 317C 8348 0002             		move.w	#$8348,2(a0)
000147A8 117C 0084 0001             		move.b	#$84,1(a0)
000147AE 117C 0010 0019             		move.b	#$10,$19(a0)
000147B4 117C 0001 0018             		move.b	#1,$18(a0)
000147BA 1028 0028                  		move.b	$28(a0),d0
000147BE 6A00                       		bpl.s	loc_13D00
000147C0 5028 0024                  		addq.b	#8,$24(a0)
000147C4 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000147CC 317C 0440 0002             		move.w	#$440,2(a0)
000147D2 0240 007F                  		andi.w	#$7F,d0
000147D6 1140 0033                  		move.b	d0,$33(a0)
000147DA 6000 0000                  		bra.w	Obj0A_Countdown
000147DE                            ; ===========================================================================
000147DE                            
000147DE                            loc_13D00:
000147DE 1140 001C                  		move.b	d0,$1C(a0)
000147E2 3168 0008 0030             		move.w	8(a0),$30(a0)
000147E8 317C FF78 0012             		move.w	#-$88,$12(a0)
000147EE                            
000147EE                            Obj0A_Animate:				; XREF: Obj0A_Index
000147EE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000147F4 4EB9 0000 B04C             		jsr	AnimateSprite
000147FA                            
000147FA                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000147FA 3038 F646                  		move.w	($FFFFF646).w,d0
000147FE B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014802 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014804 117C 0006 0024             		move.b	#6,$24(a0)
0001480A 5E28 001C                  		addq.b	#7,$1C(a0)
0001480E 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014814 6700                       		beq.s	Obj0A_Display
00014816 6000                       		bra.s	Obj0A_Display
00014818                            ; ===========================================================================
00014818                            
00014818                            Obj0A_Wobble:
00014818 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001481C 6700                       		beq.s	loc_13D44
0001481E 5868 0030                  		addq.w	#4,$30(a0)
00014822                            
00014822                            loc_13D44:
00014822 1028 0026                  		move.b	$26(a0),d0
00014826 5228 0026                  		addq.b	#1,$26(a0)
0001482A 0240 007F                  		andi.w	#$7F,d0
0001482E 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014834 1031 0000                  		move.b	(a1,d0.w),d0
00014838 4880                       		ext.w	d0
0001483A D068 0030                  		add.w	$30(a0),d0
0001483E 3140 0008                  		move.w	d0,8(a0)
00014842 6100                       		bsr.s	Obj0A_ShowNumber
00014844 4EBA 978A                  		jsr	SpeedToPos
00014848 4A28 0001                  		tst.b	1(a0)
0001484C 6A00                       		bpl.s	Obj0A_Delete
0001484E 4EFA 97A6                  		jmp	DisplaySprite
00014852                            ; ===========================================================================
00014852                            
00014852                            Obj0A_Delete:
00014852 4EFA 97DE                  		jmp	DeleteObject
00014856                            ; ===========================================================================
00014856                            
00014856                            Obj0A_Display:				; XREF: Obj0A_Index
00014856 6100                       		bsr.s	Obj0A_ShowNumber
00014858 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001485E 4EB9 0000 B04C             		jsr	AnimateSprite
00014864 4EFA 9790                  		jmp	DisplaySprite
00014868                            ; ===========================================================================
00014868                            
00014868                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014868 4EFA 97C8                  		jmp	DeleteObject
0001486C                            ; ===========================================================================
0001486C                            
0001486C                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001486C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014872 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014874 5368 0038                  		subq.w	#1,$38(a0)
00014878 6600                       		bne.s	Obj0A_Display2
0001487A 117C 000E 0024             		move.b	#$E,$24(a0)
00014880 5E28 001C                  		addq.b	#7,$1C(a0)
00014884 60D0                       		bra.s	Obj0A_Display
00014886                            ; ===========================================================================
00014886                            
00014886                            Obj0A_Display2:
00014886 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001488C 4EB9 0000 B04C             		jsr	AnimateSprite
00014892 4A28 0001                  		tst.b	1(a0)
00014896 6A00                       		bpl.s	Obj0A_Delete3
00014898 4EFA 975C                  		jmp	DisplaySprite
0001489C                            ; ===========================================================================
0001489C                            
0001489C                            Obj0A_Delete3:
0001489C 4EFA 9794                  		jmp	DeleteObject
000148A0                            ; ===========================================================================
000148A0                            
000148A0                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000148A0 4A68 0038                  		tst.w	$38(a0)
000148A4 6700                       		beq.s	locret_13E1A
000148A6 5368 0038                  		subq.w	#1,$38(a0)
000148AA 6600                       		bne.s	locret_13E1A
000148AC 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000148B2 6400                       		bcc.s	locret_13E1A
000148B4 317C 000F 0038             		move.w	#$F,$38(a0)
000148BA 4268 0012                  		clr.w	$12(a0)
000148BE 117C 0080 0001             		move.b	#$80,1(a0)
000148C4 3028 0008                  		move.w	8(a0),d0
000148C8 9078 F700                  		sub.w	($FFFFF700).w,d0
000148CC 0640 0080                  		addi.w	#$80,d0
000148D0 3140 0008                  		move.w	d0,8(a0)
000148D4 3028 000C                  		move.w	$C(a0),d0
000148D8 9078 F704                  		sub.w	($FFFFF704).w,d0
000148DC 0640 0080                  		addi.w	#$80,d0
000148E0 3140 000A                  		move.w	d0,$A(a0)
000148E4 117C 000C 0024             		move.b	#$C,$24(a0)
000148EA                            
000148EA                            locret_13E1A:
000148EA 4E75                       		rts	
000148EC                            ; ===========================================================================
000148EC                            Obj0A_WobbleData:
000148EC 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000148FD 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001490E 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001491F 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001492F FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001493C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014949 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014956 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014963 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001496C                            ; ===========================================================================
0001496C                            
0001496C                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001496C 4A68 002C                  		tst.w	$2C(a0)
00014970 6600 0000                  		bne.w	loc_13F86
00014974 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001497A 6400 0000                  		bcc.w	locret_1408C
0001497E 0838 0006 D022             		btst	#6,($FFFFD022).w
00014984 6700 0000                  		beq.w	locret_1408C
00014988 5368 0038                  		subq.w	#1,$38(a0)
0001498C 6A00 0000                  		bpl.w	loc_13FAC
00014990 317C 003B 0038             		move.w	#59,$38(a0)
00014996 317C 0001 0036             		move.w	#1,$36(a0)
0001499C 4EB9 0000 2D02             		jsr	(RandomNumber).l
000149A2 0240 0001                  		andi.w	#1,d0
000149A6 1140 0034                  		move.b	d0,$34(a0)
000149AA 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000149AE 0C40 0019                  		cmpi.w	#$19,d0
000149B2 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000149B4 0C40 0014                  		cmpi.w	#$14,d0
000149B8 6700                       		beq.s	Obj0A_WarnSound
000149BA 0C40 000F                  		cmpi.w	#$F,d0
000149BE 6700                       		beq.s	Obj0A_WarnSound
000149C0 0C40 000C                  		cmpi.w	#$C,d0
000149C4 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000149C6 6600                       		bne.s	loc_13F02
000149C8 303C 0092                  		move.w	#$92,d0
000149CC 4EB9 0000 1588             		jsr	(PlaySound).l	; play countdown music
000149D2                            
000149D2                            loc_13F02:
000149D2 5328 0032                  		subq.b	#1,$32(a0)
000149D6 6A00                       		bpl.s	Obj0A_ReduceAir
000149D8 1168 0033 0032             		move.b	$33(a0),$32(a0)
000149DE 08E8 0007 0036             		bset	#7,$36(a0)
000149E4 6000                       		bra.s	Obj0A_ReduceAir
000149E6                            ; ===========================================================================
000149E6                            
000149E6                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000149E6 303C 00C2                  		move.w	#$C2,d0
000149EA 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000149F0                            
000149F0                            Obj0A_ReduceAir:
000149F0 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000149F4 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000149F8 6100 0000                  		bsr.w	ResumeMusic
000149FC 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014A02 303C 00B2                  		move.w	#$B2,d0
00014A06 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play drowning sound
00014A0C 117C 000A 0034             		move.b	#$A,$34(a0)
00014A12 317C 0001 0036             		move.w	#1,$36(a0)
00014A18 317C 0078 002C             		move.w	#$78,$2C(a0)
00014A1E 2F08                       		move.l	a0,-(sp)
00014A20 41F8 D000                  		lea	($FFFFD000).w,a0
00014A24 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
00014A28 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014A2E 08E8 0001 0022             		bset	#1,$22(a0)
00014A34 08E8 0007 0002             		bset	#7,2(a0)
00014A3A 317C 0000 0012             		move.w	#0,$12(a0)
00014A40 317C 0000 0010             		move.w	#0,$10(a0)
00014A46 317C 0000 0014             		move.w	#0,$14(a0)
00014A4C 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014A52 205F                       		movea.l	(sp)+,a0
00014A54 4E75                       		rts	
00014A56                            ; ===========================================================================
00014A56                            
00014A56                            loc_13F86:
00014A56 5368 002C                  		subq.w	#1,$2C(a0)
00014A5A 6600                       		bne.s	loc_13F94
00014A5C 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014A62 4E75                       		rts	
00014A64                            ; ===========================================================================
00014A64                            
00014A64                            loc_13F94:
00014A64 2F08                       		move.l	a0,-(sp)
00014A66 41F8 D000                  		lea	($FFFFD000).w,a0
00014A6A 4EBA 9564                  		jsr	SpeedToPos
00014A6E 0668 0010 0012             		addi.w	#$10,$12(a0)
00014A74 205F                       		movea.l	(sp)+,a0
00014A76 6000                       		bra.s	loc_13FAC
00014A78                            ; ===========================================================================
00014A78                            
00014A78                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014A78 6000                       		bra.s	Obj0A_MakeItem
00014A7A                            ; ===========================================================================
00014A7A                            
00014A7A                            loc_13FAC:
00014A7A 4A68 0036                  		tst.w	$36(a0)
00014A7E 6700 0000                  		beq.w	locret_1408C
00014A82 5368 003A                  		subq.w	#1,$3A(a0)
00014A86 6A00 0000                  		bpl.w	locret_1408C
00014A8A                            
00014A8A                            Obj0A_MakeItem:
00014A8A 4EB9 0000 2D02             		jsr	(RandomNumber).l
00014A90 0240 000F                  		andi.w	#$F,d0
00014A94 3140 003A                  		move.w	d0,$3A(a0)
00014A98 4EBA 99E2                  		jsr	SingleObjLoad
00014A9C 6600 0000                  		bne.w	locret_1408C
00014AA0 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014AA4 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014AAA 7006                       		moveq	#6,d0
00014AAC 0838 0000 D022             		btst	#0,($FFFFD022).w
00014AB2 6700                       		beq.s	loc_13FF2
00014AB4 4440                       		neg.w	d0
00014AB6 137C 0040 0026             		move.b	#$40,$26(a1)
00014ABC                            
00014ABC                            loc_13FF2:
00014ABC D169 0008                  		add.w	d0,8(a1)
00014AC0 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014AC6 137C 0006 0028             		move.b	#6,$28(a1)
00014ACC 4A68 002C                  		tst.w	$2C(a0)
00014AD0 6700 0000                  		beq.w	loc_1403E
00014AD4 0268 0007 003A             		andi.w	#7,$3A(a0)
00014ADA 0668 0000 003A             		addi.w	#0,$3A(a0)
00014AE0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014AE4 0440 000C                  		subi.w	#$C,d0
00014AE8 3340 000C                  		move.w	d0,$C(a1)
00014AEC 4EB9 0000 2D02             		jsr	(RandomNumber).l
00014AF2 1340 0026                  		move.b	d0,$26(a1)
00014AF6 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014AFA 0200 0003                  		andi.b	#3,d0
00014AFE 6600                       		bne.s	loc_14082
00014B00 137C 000E 0028             		move.b	#$E,$28(a1)
00014B06 6000                       		bra.s	loc_14082
00014B08                            ; ===========================================================================
00014B08                            
00014B08                            loc_1403E:
00014B08 0828 0007 0036             		btst	#7,$36(a0)
00014B0E 6700                       		beq.s	loc_14082
00014B10 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014B14 E24A                       		lsr.w	#1,d2
00014B16 4EB9 0000 2D02             		jsr	(RandomNumber).l
00014B1C 0240 0003                  		andi.w	#3,d0
00014B20 6600                       		bne.s	loc_1406A
00014B22 08E8 0006 0036             		bset	#6,$36(a0)
00014B28 6600                       		bne.s	loc_14082
00014B2A 1342 0028                  		move.b	d2,$28(a1)
00014B2E 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B34                            
00014B34                            loc_1406A:
00014B34 4A28 0034                  		tst.b	$34(a0)
00014B38 6600                       		bne.s	loc_14082
00014B3A 08E8 0006 0036             		bset	#6,$36(a0)
00014B40 6600                       		bne.s	loc_14082
00014B42 1342 0028                  		move.b	d2,$28(a1)
00014B46 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B4C                            
00014B4C                            loc_14082:
00014B4C 5328 0034                  		subq.b	#1,$34(a0)
00014B50 6A00                       		bpl.s	locret_1408C
00014B52 4268 0036                  		clr.w	$36(a0)
00014B56                            
00014B56                            locret_1408C:
00014B56 4E75                       		rts	
00014B58                            
00014B58                            ; ---------------------------------------------------------------------------
00014B58                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014B58                            ; ---------------------------------------------------------------------------
00014B58                            
00014B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B58                            
00014B58                            
00014B58                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014B58 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014B5E                             
00014B5E                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014B5E                             
00014B5E 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014B62                             
00014B62 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014B68 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014B6A 43F9 0000 3D82             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014B70 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014B72                             
00014B72                            Air_GetBgm2:
00014B72 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014B78 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014B7A 43F9 0000 3D8A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014B80 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014B82                             
00014B82                            Air_GetBgm3:
00014B82 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014B88 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014B8A 43F9 0000 3D92             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014B90 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014B92                             
00014B92                            Air_GetBgm4:
00014B92 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014B98 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014B9A 43F9 0000 3D9A             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014BA0                             
00014BA0                            Air_PlayMusic:
00014BA0 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014BA4                             
00014BA4                            loc_140A6:
00014BA4 4EB9 0000 1588             		jsr	(PlaySound).l
00014BAA                             
00014BAA                            ; NineKode ends here
00014BAA                            
00014BAA                            loc_140AC:
00014BAA 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014BB0 4238 D372                  		clr.b	($FFFFD372).w
00014BB4 4E75                       		rts	
00014BB6                            ; End of function ResumeMusic
00014BB6                            
00014BB6                            ; ===========================================================================
00014BB6                            Ani_obj0A:
00014BB6                            	include "_anim\obj0A.asm"
00014BB6                            ; ---------------------------------------------------------------------------
00014BB6                            ; Animation script - countdown numbers and bubbles (LZ)
00014BB6                            ; ---------------------------------------------------------------------------
00014BB6 0000                       		dc.w byte_140D6-Ani_obj0A
00014BB8 0000                       		dc.w byte_140E0-Ani_obj0A
00014BBA 0000                       		dc.w byte_140EA-Ani_obj0A
00014BBC 0000                       		dc.w byte_140F4-Ani_obj0A
00014BBE 0000                       		dc.w byte_140FE-Ani_obj0A
00014BC0 0000                       		dc.w byte_14108-Ani_obj0A
00014BC2 0000                       		dc.w byte_14112-Ani_obj0A
00014BC4 0000                       		dc.w byte_14118-Ani_obj0A
00014BC6 0000                       		dc.w byte_14120-Ani_obj0A
00014BC8 0000                       		dc.w byte_14128-Ani_obj0A
00014BCA 0000                       		dc.w byte_14130-Ani_obj0A
00014BCC 0000                       		dc.w byte_14138-Ani_obj0A
00014BCE 0000                       		dc.w byte_14140-Ani_obj0A
00014BD0 0000                       		dc.w byte_14148-Ani_obj0A
00014BD2 0000                       		dc.w byte_1414A-Ani_obj0A
00014BD4 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014BDE 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014BE8 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014BF2 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014BFC 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014C06 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014C10 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014C16 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014C1E 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014C26 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014C2E 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014C36 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014C3E 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014C46 0EFC                       byte_14148:	dc.b $E, $FC
00014C48 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014C4E                            		even
00014C4E                            		even
00014C4E                            
00014C4E                            ; ---------------------------------------------------------------------------
00014C4E                            ; Sprite mappings - drowning countdown numbers (LZ)
00014C4E                            ; ---------------------------------------------------------------------------
00014C4E                            Map_obj0A:
00014C4E                            	include "_maps\obj0A.asm"
00014C4E                            ; ---------------------------------------------------------------------------
00014C4E                            ; Sprite mappings - drowning countdown numbers (LZ)
00014C4E                            ; ---------------------------------------------------------------------------
00014C4E 0000                       		dc.w byte_14152-Map_obj0A
00014C50 01                         byte_14152:	dc.b 1
00014C51 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014C56                            		even
00014C56                            		even
00014C56                            
00014C56                            ; ===========================================================================
00014C56                            ; ---------------------------------------------------------------------------
00014C56                            ; Object 38 - shield and invincibility stars
00014C56                            ; ---------------------------------------------------------------------------
00014C56                            
00014C56                            Obj38:					; XREF: Obj_Index
00014C56 7000                       		moveq	#0,d0
00014C58 1028 0024                  		move.b	$24(a0),d0
00014C5C 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014C60 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014C64                            ; ===========================================================================
00014C64 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014C66 0000                       		dc.w Obj38_Shield-Obj38_Index
00014C68 0000                       		dc.w Obj38_Stars-Obj38_Index
00014C6A                            ; ===========================================================================
00014C6A                            
00014C6A                            Obj38_Main:				; XREF: Obj38_Index
00014C6A 5428 0024                  		addq.b	#2,$24(a0)
00014C6E 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014C76 117C 0004 0001             		move.b	#4,1(a0)
00014C7C 117C 0001 0018             		move.b	#1,$18(a0)
00014C82 117C 0010 0019             		move.b	#$10,$19(a0)
00014C88 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014C8C 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014C8E 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014C94 4E75                       		rts	
00014C96                            ; ===========================================================================
00014C96                            
00014C96                            Obj38_DoStars:
00014C96 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014C9A 317C 055C 0002             		move.w	#$55C,2(a0)
00014CA0 4E75                       		rts	
00014CA2                            ; ===========================================================================
00014CA2                            
00014CA2                            Obj38_Shield:				; XREF: Obj38_Index
00014CA2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014CA6 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014CA8 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014CAC 6700                       		beq.s	Obj38_Delete	; if not, branch
00014CAE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014CB4 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014CBA 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014CC0 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014CC6 4EB9 0000 B04C             		jsr	AnimateSprite
00014CCC 4EFA 9328                  		jmp	DisplaySprite
00014CD0                            ; ===========================================================================
00014CD0                            
00014CD0                            Obj38_RmvShield:
00014CD0 4E75                       		rts	
00014CD2                            ; ===========================================================================
00014CD2                            
00014CD2                            Obj38_Delete:
00014CD2 4EFA 935E                  		jmp	DeleteObject
00014CD6                            ; ===========================================================================
00014CD6                            
00014CD6                            Obj38_Stars:				; XREF: Obj38_Index
00014CD6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014CDA 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014CDC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014CE0 1228 001C                  		move.b	$1C(a0),d1
00014CE4 5301                       		subq.b	#1,d1
00014CE6 6000                       		bra.s	Obj38_StarTrail
00014CE8                            ; ===========================================================================
00014CE8 E909                       		lsl.b	#4,d1
00014CEA 5801                       		addq.b	#4,d1
00014CEC 9001                       		sub.b	d1,d0
00014CEE 1228 0030                  		move.b	$30(a0),d1
00014CF2 9001                       		sub.b	d1,d0
00014CF4 5801                       		addq.b	#4,d1
00014CF6 0201 000F                  		andi.b	#$F,d1
00014CFA 1141 0030                  		move.b	d1,$30(a0)
00014CFE 6000                       		bra.s	Obj38_StarTrail2a
00014D00                            ; ===========================================================================
00014D00                            
00014D00                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014D00 E709                       		lsl.b	#3,d1
00014D02 1401                       		move.b	d1,d2
00014D04 D201                       		add.b	d1,d1
00014D06 D202                       		add.b	d2,d1
00014D08 5801                       		addq.b	#4,d1
00014D0A 9001                       		sub.b	d1,d0
00014D0C 1228 0030                  		move.b	$30(a0),d1
00014D10 9001                       		sub.b	d1,d0
00014D12 5801                       		addq.b	#4,d1
00014D14 0C01 0018                  		cmpi.b	#$18,d1
00014D18 6500                       		bcs.s	Obj38_StarTrail2
00014D1A 7200                       		moveq	#0,d1
00014D1C                            
00014D1C                            Obj38_StarTrail2:
00014D1C 1141 0030                  		move.b	d1,$30(a0)
00014D20                            
00014D20                            Obj38_StarTrail2a:
00014D20 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014D24 43F1 0000                  		lea	(a1,d0.w),a1
00014D28 3159 0008                  		move.w	(a1)+,8(a0)
00014D2C 3159 000C                  		move.w	(a1)+,$C(a0)
00014D30 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D36 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014D3C 4EB9 0000 B04C             		jsr	AnimateSprite
00014D42 4EFA 92B2                  		jmp	DisplaySprite
00014D46                            ; ===========================================================================
00014D46                            
00014D46                            Obj38_Delete2:				; XREF: Obj38_Stars
00014D46 4EFA 92EA                  		jmp	DeleteObject
00014D4A                            ; ===========================================================================
00014D4A                            ; ---------------------------------------------------------------------------
00014D4A                            ; Object 4A - special stage entry from beta
00014D4A                            ; ---------------------------------------------------------------------------
00014D4A                            
00014D4A                            Obj4A:					; XREF: Obj_Index
00014D4A 7000                       		moveq	#0,d0
00014D4C 1028 0024                  		move.b	$24(a0),d0
00014D50 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014D54 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014D58                            ; ===========================================================================
00014D58 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014D5A 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014D5C 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014D5E                            ; ===========================================================================
00014D5E                            
00014D5E                            Obj4A_Main:				; XREF: Obj4A_Index
00014D5E 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014D62 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014D64 4E75                       		rts	
00014D66                            ; ===========================================================================
00014D66                            
00014D66                            Obj4A_Main2:
00014D66 5428 0024                  		addq.b	#2,$24(a0)
00014D6A 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014D72 117C 0004 0001             		move.b	#4,1(a0)
00014D78 117C 0001 0018             		move.b	#1,$18(a0)
00014D7E 117C 0038 0019             		move.b	#$38,$19(a0)
00014D84 317C 0541 0002             		move.w	#$541,2(a0)
00014D8A 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014D90                            
00014D90                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014D90 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014D96 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014D9C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014DA2 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014DA8 4EB9 0000 B04C             		jsr	AnimateSprite
00014DAE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014DB4 6600                       		bne.s	Obj4A_Display
00014DB6 4A38 D000                  		tst.b	($FFFFD000).w
00014DBA 6700                       		beq.s	Obj4A_Display
00014DBC 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014DC2 303C 00A8                  		move.w	#$A8,d0
00014DC6 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014DCC                            
00014DCC                            Obj4A_Display:
00014DCC 4EFA 9228                  		jmp	DisplaySprite
00014DD0                            ; ===========================================================================
00014DD0                            
00014DD0                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014DD0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014DD4 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014DD6 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014DDC 4EFA 9254                  		jmp	DeleteObject
00014DE0                            ; ===========================================================================
00014DE0                            
00014DE0                            Obj4A_Wait:
00014DE0 4E75                       		rts	
00014DE2                            ; ===========================================================================
00014DE2                            ; ---------------------------------------------------------------------------
00014DE2                            ; Object 08 - water splash (LZ)
00014DE2                            ; ---------------------------------------------------------------------------
00014DE2                            
00014DE2                            Obj08:					; XREF: Obj_Index
00014DE2 7000                       		moveq	#0,d0
00014DE4 1028 0024                  		move.b	$24(a0),d0
00014DE8 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014DEC 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014DF0                            ; ===========================================================================
00014DF0 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014DF2 0000                       		dc.w Obj08_Display-Obj08_Index
00014DF4 0000                       		dc.w Obj08_Delete-Obj08_Index
00014DF6                            ; ===========================================================================
00014DF6                            
00014DF6                            Obj08_Main:				; XREF: Obj08_Index
00014DF6 5428 0024                  		addq.b	#2,$24(a0)
00014DFA 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014E02 0028 0004 0001             		ori.b	#4,1(a0)
00014E08 117C 0001 0018             		move.b	#1,$18(a0)
00014E0E 117C 0010 0019             		move.b	#$10,$19(a0)
00014E14 317C 4259 0002             		move.w	#$4259,2(a0)
00014E1A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014E20                            
00014E20                            Obj08_Display:				; XREF: Obj08_Index
00014E20 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014E26 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014E2C 4EB9 0000 B04C             		jsr	AnimateSprite
00014E32 4EFA 91C2                  		jmp	DisplaySprite
00014E36                            ; ===========================================================================
00014E36                            
00014E36                            Obj08_Delete:				; XREF: Obj08_Index
00014E36 4EFA 91FA                  		jmp	DeleteObject	; delete when animation	is complete
00014E3A                            ; ===========================================================================
00014E3A                            Ani_obj38:
00014E3A                            	include "_anim\obj38.asm"
00014E3A                            ; ---------------------------------------------------------------------------
00014E3A                            ; Animation script - shield and invincibility stars
00014E3A                            ; ---------------------------------------------------------------------------
00014E3A 0000                       		dc.w byte_14356-Ani_obj38
00014E3C 0000                       		dc.w byte_1435E-Ani_obj38
00014E3E 0000                       		dc.w byte_14364-Ani_obj38
00014E40 0000                       		dc.w byte_1437E-Ani_obj38
00014E42 0000                       		dc.w byte_14398-Ani_obj38
00014E44 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014E4C 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014E52 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014E63 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014E6C 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014E7D 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014E86 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014E97 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014EA0                            		even
00014EA0                            		even
00014EA0                            
00014EA0                            ; ---------------------------------------------------------------------------
00014EA0                            ; Sprite mappings - shield and invincibility stars
00014EA0                            ; ---------------------------------------------------------------------------
00014EA0                            Map_obj38:
00014EA0                            	include "_maps\obj38.asm"
00014EA0                            ; ---------------------------------------------------------------------------
00014EA0                            ; Sprite mappings - shield and invincibility stars
00014EA0                            ; ---------------------------------------------------------------------------
00014EA0 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014EA4 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014EA8 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014EAC 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014EB0 04                         byte_143C2:	dc.b 4
00014EB1 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014EB6 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014EBB 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014EC0 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014EC5 04                         byte_143D7:	dc.b 4
00014EC6 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014ECB E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014ED0 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014ED5 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014EDA 04                         byte_143EC:	dc.b 4
00014EDB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014EE0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014EE5 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014EEA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014EEF 04                         byte_14401:	dc.b 4
00014EF0 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014EF5 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014EFA 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014EFF 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F04 04                         byte_14416:	dc.b 4
00014F05 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F0A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F0F 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014F14 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F19 04                         byte_1442B:	dc.b 4
00014F1A E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014F1F E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014F24 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014F29 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014F2E 04                         byte_14440:	dc.b 4
00014F2F E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014F34 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014F39 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014F3E 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014F44 00                         		even
00014F44 00                         		even
00014F44                            
00014F44                            Ani_obj4A:
00014F44                            	include "_anim\obj4A.asm"
00014F44                            ; ---------------------------------------------------------------------------
00014F44                            ; Animation script - special stage entry effect from beta
00014F44                            ; ---------------------------------------------------------------------------
00014F44 0000                       		dc.w byte_14458-Ani_obj4A
00014F46 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014F5A                            		even
00014F5A                            		even
00014F5A                            
00014F5A                            ; ---------------------------------------------------------------------------
00014F5A                            ; Sprite mappings - special stage entry	from beta
00014F5A                            ; ---------------------------------------------------------------------------
00014F5A                            Map_obj4A:
00014F5A                            	include "_maps\obj4A.asm"
00014F5A                            ; ---------------------------------------------------------------------------
00014F5A                            ; Sprite mappings - special stage entry	from beta
00014F5A                            ; ---------------------------------------------------------------------------
00014F5A 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014F5E 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014F62 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014F66 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014F6A 03                         byte_1447C:	dc.b 3
00014F6B F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014F70 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014F75 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014F7A 03                         byte_1448C:	dc.b 3
00014F7B F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014F80 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014F85 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014F8A 05                         byte_1449C:	dc.b 5
00014F8B E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014F90 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014F95 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014F9A 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014F9F 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014FA4 09                         byte_144B6:	dc.b 9
00014FA5 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014FAA F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014FAF 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014FB4 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014FB9 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014FBE F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014FC3 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014FC8 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014FCD F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014FD2 12                         byte_144E4:	dc.b $12
00014FD3 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014FD8 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014FDD F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014FE2 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014FE7 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014FEC 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014FF1 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014FF6 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014FFB 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015000 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015005 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001500A 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001500F F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015014 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015019 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001501E F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015023 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015028 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001502D 11                         byte_1453F:	dc.b $11
0001502E F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015033 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015038 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001503D 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015042 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015047 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001504C 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00015051 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00015056 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001505B 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00015060 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00015065 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001506A F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001506F 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00015074 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00015079 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001507E 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00015083 09                         byte_14595:	dc.b 9
00015084 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00015089 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001508E 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00015093 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00015098 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001509D FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000150A2 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000150A7 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000150AC 04                         		dc.b 4
000150AD 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000150B2                            		even
000150B2                            		even
000150B2                            
000150B2                            Ani_obj08:
000150B2                            	include "_anim\obj08.asm"
000150B2                            ; ---------------------------------------------------------------------------
000150B2                            ; Animation script - water splash (LZ)
000150B2                            ; ---------------------------------------------------------------------------
000150B2 0000                       		dc.w byte_145C6-Ani_obj08
000150B4 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000150BA                            		even
000150BA                            		even
000150BA                            
000150BA                            ; ---------------------------------------------------------------------------
000150BA                            ; Sprite mappings - water splash (LZ)
000150BA                            ; ---------------------------------------------------------------------------
000150BA                            Map_obj08:
000150BA                            	include "_maps\obj08.asm"
000150BA                            ; ---------------------------------------------------------------------------
000150BA                            ; Sprite mappings - water splash (LZ)
000150BA                            ; ---------------------------------------------------------------------------
000150BA 0000                       		dc.w byte_145D2-Map_obj08
000150BC 0000                       		dc.w byte_145DD-Map_obj08
000150BE 0000                       		dc.w byte_145E8-Map_obj08
000150C0 02                         byte_145D2:	dc.b 2
000150C1 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000150C6 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000150CB 02                         byte_145DD:	dc.b 2
000150CC E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000150D1 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000150D6 01                         byte_145E8:	dc.b 1
000150D7 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000150DC                            		even
000150DC                            		even
000150DC                            
000150DC                            ; ---------------------------------------------------------------------------
000150DC                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000150DC                            ; ---------------------------------------------------------------------------
000150DC                            
000150DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150DC                            
000150DC                            
000150DC                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000150DC 0828 0003 0022             		btst	#3,$22(a0)
000150E2 6700                       		beq.s	loc_14602
000150E4 7000                       		moveq	#0,d0
000150E6 11C0 F768                  		move.b	d0,($FFFFF768).w
000150EA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000150EE 4E75                       		rts	
000150F0                            ; ===========================================================================
000150F0                            
000150F0                            loc_14602:
000150F0 7003                       		moveq	#3,d0
000150F2 11C0 F768                  		move.b	d0,($FFFFF768).w
000150F6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000150FA 1028 0026                  		move.b	$26(a0),d0
000150FE 0600 0020                  		addi.b	#$20,d0
00015102 6A00                       		bpl.s	loc_14624
00015104 1028 0026                  		move.b	$26(a0),d0
00015108 6A00                       		bpl.s	loc_1461E
0001510A 5300                       		subq.b	#1,d0
0001510C                            
0001510C                            loc_1461E:
0001510C 0600 0020                  		addi.b	#$20,d0
00015110 6000                       		bra.s	loc_14630
00015112                            ; ===========================================================================
00015112                            
00015112                            loc_14624:
00015112 1028 0026                  		move.b	$26(a0),d0
00015116 6A00                       		bpl.s	loc_1462C
00015118 5200                       		addq.b	#1,d0
0001511A                            
0001511A                            loc_1462C:
0001511A 0600 001F                  		addi.b	#$1F,d0
0001511E                            
0001511E                            loc_14630:
0001511E 0200 00C0                  		andi.b	#$C0,d0
00015122 0C00 0040                  		cmpi.b	#$40,d0
00015126 6700 0000                  		beq.w	Sonic_WalkVertL
0001512A 0C00 0080                  		cmpi.b	#$80,d0
0001512E 6700 0000                  		beq.w	Sonic_WalkCeiling
00015132 0C00 00C0                  		cmpi.b	#$C0,d0
00015136 6700 0000                  		beq.w	Sonic_WalkVertR
0001513A 3428 000C                  		move.w	$C(a0),d2
0001513E 3628 0008                  		move.w	8(a0),d3
00015142 7000                       		moveq	#0,d0
00015144 1028 0016                  		move.b	$16(a0),d0
00015148 4880                       		ext.w	d0
0001514A D440                       		add.w	d0,d2
0001514C 1028 0017                  		move.b	$17(a0),d0
00015150 4880                       		ext.w	d0
00015152 D640                       		add.w	d0,d3
00015154 49F8 F768                  		lea	($FFFFF768).w,a4
00015158 367C 0010                  		movea.w	#$10,a3
0001515C 3C3C 0000                  		move.w	#0,d6
00015160 7A0D                       		moveq	#$D,d5
00015162 6100 0000                  		bsr.w	FindFloor
00015166 3F01                       		move.w	d1,-(sp)
00015168 3428 000C                  		move.w	$C(a0),d2
0001516C 3628 0008                  		move.w	8(a0),d3
00015170 7000                       		moveq	#0,d0
00015172 1028 0016                  		move.b	$16(a0),d0
00015176 4880                       		ext.w	d0
00015178 D440                       		add.w	d0,d2
0001517A 1028 0017                  		move.b	$17(a0),d0
0001517E 4880                       		ext.w	d0
00015180 4440                       		neg.w	d0
00015182 D640                       		add.w	d0,d3
00015184 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015188 367C 0010                  		movea.w	#$10,a3
0001518C 3C3C 0000                  		move.w	#0,d6
00015190 7A0D                       		moveq	#$D,d5
00015192 6100 0000                  		bsr.w	FindFloor
00015196 301F                       		move.w	(sp)+,d0
00015198 6100 0000                  		bsr.w	Sonic_Angle
0001519C 4A41                       		tst.w	d1
0001519E 6700                       		beq.s	locret_146BE
000151A0 6A00                       		bpl.s	loc_146C0
000151A2 0C41 FFF2                  		cmpi.w	#-$E,d1
000151A6 6D00                       		blt.s	locret_146E6
000151A8 D368 000C                  		add.w	d1,$C(a0)
000151AC                            
000151AC                            locret_146BE:
000151AC 4E75                       		rts	
000151AE                            ; ===========================================================================
000151AE                            
000151AE                            loc_146C0:
000151AE 0C41 000E                  		cmpi.w	#$E,d1
000151B2 6E00                       		bgt.s	loc_146CC
000151B4                            
000151B4                            loc_146C6:
000151B4 D368 000C                  		add.w	d1,$C(a0)
000151B8 4E75                       		rts	
000151BA                            ; ===========================================================================
000151BA                            
000151BA                            loc_146CC:
000151BA 4A28 0038                  		tst.b	$38(a0)
000151BE 66F4                       		bne.s	loc_146C6
000151C0 08E8 0001 0022             		bset	#1,$22(a0)
000151C6 08A8 0005 0022             		bclr	#5,$22(a0)
000151CC 117C 0001 001D             		move.b	#1,$1D(a0)
000151D2 4E75                       		rts	
000151D4                            ; ===========================================================================
000151D4                            
000151D4                            locret_146E6:
000151D4 4E75                       		rts	
000151D6                            ; End of function Sonic_AnglePos
000151D6                            
000151D6                            ; ===========================================================================
000151D6 2428 0008                  		move.l	8(a0),d2
000151DA 3028 0010                  		move.w	$10(a0),d0
000151DE 48C0                       		ext.l	d0
000151E0 E180                       		asl.l	#8,d0
000151E2 9480                       		sub.l	d0,d2
000151E4 2142 0008                  		move.l	d2,8(a0)
000151E8 303C 0038                  		move.w	#$38,d0
000151EC 48C0                       		ext.l	d0
000151EE E180                       		asl.l	#8,d0
000151F0 9680                       		sub.l	d0,d3
000151F2 2143 000C                  		move.l	d3,$C(a0)
000151F6 4E75                       		rts	
000151F8                            ; ===========================================================================
000151F8                            
000151F8                            locret_1470A:
000151F8 4E75                       		rts	
000151FA                            ; ===========================================================================
000151FA 2628 000C                  		move.l	$C(a0),d3
000151FE 3028 0012                  		move.w	$12(a0),d0
00015202 0440 0038                  		subi.w	#$38,d0
00015206 3140 0012                  		move.w	d0,$12(a0)
0001520A 48C0                       		ext.l	d0
0001520C E180                       		asl.l	#8,d0
0001520E 9680                       		sub.l	d0,d3
00015210 2143 000C                  		move.l	d3,$C(a0)
00015214 4E75                       		rts	
00015216 4E75                       		rts	
00015218                            ; ===========================================================================
00015218 2428 0008                  		move.l	8(a0),d2
0001521C 2628 000C                  		move.l	$C(a0),d3
00015220 3028 0010                  		move.w	$10(a0),d0
00015224 48C0                       		ext.l	d0
00015226 E180                       		asl.l	#8,d0
00015228 9480                       		sub.l	d0,d2
0001522A 3028 0012                  		move.w	$12(a0),d0
0001522E 48C0                       		ext.l	d0
00015230 E180                       		asl.l	#8,d0
00015232 9680                       		sub.l	d0,d3
00015234 2142 0008                  		move.l	d2,8(a0)
00015238 2143 000C                  		move.l	d3,$C(a0)
0001523C 4E75                       		rts	
0001523E                            
0001523E                            ; ---------------------------------------------------------------------------
0001523E                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001523E                            ; ---------------------------------------------------------------------------
0001523E                            
0001523E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001523E                            
0001523E                            
0001523E                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001523E 1438 F76A                  		move.b	($FFFFF76A).w,d2
00015242 B240                       		cmp.w	d0,d1
00015244 6F00                       		ble.s	loc_1475E
00015246 1438 F768                  		move.b	($FFFFF768).w,d2
0001524A 3200                       		move.w	d0,d1
0001524C                            
0001524C                            loc_1475E:
0001524C 0802 0000                  		btst	#0,d2
00015250 6600                       		bne.s	loc_1476A
00015252 1142 0026                  		move.b	d2,$26(a0)
00015256 4E75                       		rts	
00015258                            ; ===========================================================================
00015258                            
00015258                            loc_1476A:
00015258 1428 0026                  		move.b	$26(a0),d2
0001525C 0602 0020                  		addi.b	#$20,d2
00015260 0202 00C0                  		andi.b	#$C0,d2
00015264 1142 0026                  		move.b	d2,$26(a0)
00015268 4E75                       		rts	
0001526A                            ; End of function Sonic_Angle
0001526A                            
0001526A                            ; ---------------------------------------------------------------------------
0001526A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001526A                            ; ---------------------------------------------------------------------------
0001526A                            
0001526A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001526A                            
0001526A                            
0001526A                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
0001526A 3428 000C                  		move.w	$C(a0),d2
0001526E 3628 0008                  		move.w	8(a0),d3
00015272 7000                       		moveq	#0,d0
00015274 1028 0017                  		move.b	$17(a0),d0
00015278 4880                       		ext.w	d0
0001527A 4440                       		neg.w	d0
0001527C D440                       		add.w	d0,d2
0001527E 1028 0016                  		move.b	$16(a0),d0
00015282 4880                       		ext.w	d0
00015284 D640                       		add.w	d0,d3
00015286 49F8 F768                  		lea	($FFFFF768).w,a4
0001528A 367C 0010                  		movea.w	#$10,a3
0001528E 3C3C 0000                  		move.w	#0,d6
00015292 7A0D                       		moveq	#$D,d5
00015294 6100 0000                  		bsr.w	FindWall
00015298 3F01                       		move.w	d1,-(sp)
0001529A 3428 000C                  		move.w	$C(a0),d2
0001529E 3628 0008                  		move.w	8(a0),d3
000152A2 7000                       		moveq	#0,d0
000152A4 1028 0017                  		move.b	$17(a0),d0
000152A8 4880                       		ext.w	d0
000152AA D440                       		add.w	d0,d2
000152AC 1028 0016                  		move.b	$16(a0),d0
000152B0 4880                       		ext.w	d0
000152B2 D640                       		add.w	d0,d3
000152B4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000152B8 367C 0010                  		movea.w	#$10,a3
000152BC 3C3C 0000                  		move.w	#0,d6
000152C0 7A0D                       		moveq	#$D,d5
000152C2 6100 0000                  		bsr.w	FindWall
000152C6 301F                       		move.w	(sp)+,d0
000152C8 6100 FF74                  		bsr.w	Sonic_Angle
000152CC 4A41                       		tst.w	d1
000152CE 6700                       		beq.s	locret_147F0
000152D0 6A00                       		bpl.s	loc_147F2
000152D2 0C41 FFF2                  		cmpi.w	#-$E,d1
000152D6 6D00 FF20                  		blt.w	locret_1470A
000152DA D368 0008                  		add.w	d1,8(a0)
000152DE                            
000152DE                            locret_147F0:
000152DE 4E75                       		rts	
000152E0                            ; ===========================================================================
000152E0                            
000152E0                            loc_147F2:
000152E0 0C41 000E                  		cmpi.w	#$E,d1
000152E4 6E00                       		bgt.s	loc_147FE
000152E6                            
000152E6                            loc_147F8:
000152E6 D368 0008                  		add.w	d1,8(a0)
000152EA 4E75                       		rts	
000152EC                            ; ===========================================================================
000152EC                            
000152EC                            loc_147FE:
000152EC 4A28 0038                  		tst.b	$38(a0)
000152F0 66F4                       		bne.s	loc_147F8
000152F2 08E8 0001 0022             		bset	#1,$22(a0)
000152F8 08A8 0005 0022             		bclr	#5,$22(a0)
000152FE 117C 0001 001D             		move.b	#1,$1D(a0)
00015304 4E75                       		rts	
00015306                            ; End of function Sonic_WalkVertR
00015306                            
00015306                            ; ---------------------------------------------------------------------------
00015306                            ; Subroutine allowing Sonic to walk upside-down
00015306                            ; ---------------------------------------------------------------------------
00015306                            
00015306                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015306                            
00015306                            
00015306                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015306 3428 000C                  		move.w	$C(a0),d2
0001530A 3628 0008                  		move.w	8(a0),d3
0001530E 7000                       		moveq	#0,d0
00015310 1028 0016                  		move.b	$16(a0),d0
00015314 4880                       		ext.w	d0
00015316 9440                       		sub.w	d0,d2
00015318 0A42 000F                  		eori.w	#$F,d2
0001531C 1028 0017                  		move.b	$17(a0),d0
00015320 4880                       		ext.w	d0
00015322 D640                       		add.w	d0,d3
00015324 49F8 F768                  		lea	($FFFFF768).w,a4
00015328 367C FFF0                  		movea.w	#-$10,a3
0001532C 3C3C 1000                  		move.w	#$1000,d6
00015330 7A0D                       		moveq	#$D,d5
00015332 6100 0000                  		bsr.w	FindFloor
00015336 3F01                       		move.w	d1,-(sp)
00015338 3428 000C                  		move.w	$C(a0),d2
0001533C 3628 0008                  		move.w	8(a0),d3
00015340 7000                       		moveq	#0,d0
00015342 1028 0016                  		move.b	$16(a0),d0
00015346 4880                       		ext.w	d0
00015348 9440                       		sub.w	d0,d2
0001534A 0A42 000F                  		eori.w	#$F,d2
0001534E 1028 0017                  		move.b	$17(a0),d0
00015352 4880                       		ext.w	d0
00015354 9640                       		sub.w	d0,d3
00015356 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001535A 367C FFF0                  		movea.w	#-$10,a3
0001535E 3C3C 1000                  		move.w	#$1000,d6
00015362 7A0D                       		moveq	#$D,d5
00015364 6100 0000                  		bsr.w	FindFloor
00015368 301F                       		move.w	(sp)+,d0
0001536A 6100 FED2                  		bsr.w	Sonic_Angle
0001536E 4A41                       		tst.w	d1
00015370 6700                       		beq.s	locret_14892
00015372 6A00                       		bpl.s	loc_14894
00015374 0C41 FFF2                  		cmpi.w	#-$E,d1
00015378 6D00 FE5A                  		blt.w	locret_146E6
0001537C 9368 000C                  		sub.w	d1,$C(a0)
00015380                            
00015380                            locret_14892:
00015380 4E75                       		rts	
00015382                            ; ===========================================================================
00015382                            
00015382                            loc_14894:
00015382 0C41 000E                  		cmpi.w	#$E,d1
00015386 6E00                       		bgt.s	loc_148A0
00015388                            
00015388                            loc_1489A:
00015388 9368 000C                  		sub.w	d1,$C(a0)
0001538C 4E75                       		rts	
0001538E                            ; ===========================================================================
0001538E                            
0001538E                            loc_148A0:
0001538E 4A28 0038                  		tst.b	$38(a0)
00015392 66F4                       		bne.s	loc_1489A
00015394 08E8 0001 0022             		bset	#1,$22(a0)
0001539A 08A8 0005 0022             		bclr	#5,$22(a0)
000153A0 117C 0001 001D             		move.b	#1,$1D(a0)
000153A6 4E75                       		rts	
000153A8                            ; End of function Sonic_WalkCeiling
000153A8                            
000153A8                            ; ---------------------------------------------------------------------------
000153A8                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000153A8                            ; ---------------------------------------------------------------------------
000153A8                            
000153A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153A8                            
000153A8                            
000153A8                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000153A8 3428 000C                  		move.w	$C(a0),d2
000153AC 3628 0008                  		move.w	8(a0),d3
000153B0 7000                       		moveq	#0,d0
000153B2 1028 0017                  		move.b	$17(a0),d0
000153B6 4880                       		ext.w	d0
000153B8 9440                       		sub.w	d0,d2
000153BA 1028 0016                  		move.b	$16(a0),d0
000153BE 4880                       		ext.w	d0
000153C0 9640                       		sub.w	d0,d3
000153C2 0A43 000F                  		eori.w	#$F,d3
000153C6 49F8 F768                  		lea	($FFFFF768).w,a4
000153CA 367C FFF0                  		movea.w	#-$10,a3
000153CE 3C3C 0800                  		move.w	#$800,d6
000153D2 7A0D                       		moveq	#$D,d5
000153D4 6100 0000                  		bsr.w	FindWall
000153D8 3F01                       		move.w	d1,-(sp)
000153DA 3428 000C                  		move.w	$C(a0),d2
000153DE 3628 0008                  		move.w	8(a0),d3
000153E2 7000                       		moveq	#0,d0
000153E4 1028 0017                  		move.b	$17(a0),d0
000153E8 4880                       		ext.w	d0
000153EA D440                       		add.w	d0,d2
000153EC 1028 0016                  		move.b	$16(a0),d0
000153F0 4880                       		ext.w	d0
000153F2 9640                       		sub.w	d0,d3
000153F4 0A43 000F                  		eori.w	#$F,d3
000153F8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153FC 367C FFF0                  		movea.w	#-$10,a3
00015400 3C3C 0800                  		move.w	#$800,d6
00015404 7A0D                       		moveq	#$D,d5
00015406 6100 0000                  		bsr.w	FindWall
0001540A 301F                       		move.w	(sp)+,d0
0001540C 6100 FE30                  		bsr.w	Sonic_Angle
00015410 4A41                       		tst.w	d1
00015412 6700                       		beq.s	locret_14934
00015414 6A00                       		bpl.s	loc_14936
00015416 0C41 FFF2                  		cmpi.w	#-$E,d1
0001541A 6D00 FDDC                  		blt.w	locret_1470A
0001541E 9368 0008                  		sub.w	d1,8(a0)
00015422                            
00015422                            locret_14934:
00015422 4E75                       		rts	
00015424                            ; ===========================================================================
00015424                            
00015424                            loc_14936:
00015424 0C41 000E                  		cmpi.w	#$E,d1
00015428 6E00                       		bgt.s	loc_14942
0001542A                            
0001542A                            loc_1493C:
0001542A 9368 0008                  		sub.w	d1,8(a0)
0001542E 4E75                       		rts	
00015430                            ; ===========================================================================
00015430                            
00015430                            loc_14942:
00015430 4A28 0038                  		tst.b	$38(a0)
00015434 66F4                       		bne.s	loc_1493C
00015436 08E8 0001 0022             		bset	#1,$22(a0)
0001543C 08A8 0005 0022             		bclr	#5,$22(a0)
00015442 117C 0001 001D             		move.b	#1,$1D(a0)
00015448 4E75                       		rts	
0001544A                            ; End of function Sonic_WalkVertL
0001544A                            
0001544A                            ; ---------------------------------------------------------------------------
0001544A                            ; Subroutine to	find which tile	the object is standing on
0001544A                            ; ---------------------------------------------------------------------------
0001544A                            
0001544A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001544A                            
0001544A                            
0001544A                            Floor_ChkTile:				; XREF: FindFloor; et al
0001544A 3002                       		move.w	d2,d0
0001544C E248                       		lsr.w	#1,d0
0001544E 0240 0380                  		andi.w	#$380,d0
00015452 3203                       		move.w	d3,d1
00015454 E049                       		lsr.w	#8,d1
00015456 0241 007F                  		andi.w	#$7F,d1
0001545A D041                       		add.w	d1,d0
0001545C 72FF                       		moveq	#-1,d1
0001545E 43F8 A400                  		lea	($FFFFA400).w,a1
00015462 1231 0000                  		move.b	(a1,d0.w),d1
00015466 6700                       		beq.s	loc_14996
00015468 6B00                       		bmi.s	loc_1499A
0001546A 5301                       		subq.b	#1,d1
0001546C 4881                       		ext.w	d1
0001546E EE59                       		ror.w	#7,d1
00015470 3002                       		move.w	d2,d0
00015472 D040                       		add.w	d0,d0
00015474 0240 01E0                  		andi.w	#$1E0,d0
00015478 D240                       		add.w	d0,d1
0001547A 3003                       		move.w	d3,d0
0001547C E648                       		lsr.w	#3,d0
0001547E 0240 001E                  		andi.w	#$1E,d0
00015482 D240                       		add.w	d0,d1
00015484                            
00015484                            loc_14996:
00015484 2241                       		movea.l	d1,a1
00015486 4E75                       		rts	
00015488                            ; ===========================================================================
00015488                            
00015488                            loc_1499A:
00015488 0241 007F                  		andi.w	#$7F,d1
0001548C 0828 0006 0001             		btst	#6,1(a0)
00015492 6700                       		beq.s	loc_149B2
00015494 5241                       		addq.w	#1,d1
00015496 0C41 0029                  		cmpi.w	#$29,d1
0001549A 6600                       		bne.s	loc_149B2
0001549C 323C 0051                  		move.w	#$51,d1
000154A0                            
000154A0                            loc_149B2:
000154A0 5301                       		subq.b	#1,d1
000154A2 EE59                       		ror.w	#7,d1
000154A4 3002                       		move.w	d2,d0
000154A6 D040                       		add.w	d0,d0
000154A8 0240 01E0                  		andi.w	#$1E0,d0
000154AC D240                       		add.w	d0,d1
000154AE 3003                       		move.w	d3,d0
000154B0 E648                       		lsr.w	#3,d0
000154B2 0240 001E                  		andi.w	#$1E,d0
000154B6 D240                       		add.w	d0,d1
000154B8 2241                       		movea.l	d1,a1
000154BA 4E75                       		rts	
000154BC                            ; End of function Floor_ChkTile
000154BC                            
000154BC                            
000154BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154BC                            
000154BC                            
000154BC                            FindFloor:				; XREF: Sonic_AnglePos; et al
000154BC 618C                       		bsr.s	Floor_ChkTile
000154BE 3011                       		move.w	(a1),d0
000154C0 3800                       		move.w	d0,d4
000154C2 0240 07FF                  		andi.w	#$7FF,d0
000154C6 6700                       		beq.s	loc_149DE
000154C8 0B04                       		btst	d5,d4
000154CA 6600                       		bne.s	loc_149EC
000154CC                            
000154CC                            loc_149DE:
000154CC D44B                       		add.w	a3,d2
000154CE 6100 0000                  		bsr.w	FindFloor2
000154D2 944B                       		sub.w	a3,d2
000154D4 0641 0010                  		addi.w	#$10,d1
000154D8 4E75                       		rts	
000154DA                            ; ===========================================================================
000154DA                            
000154DA                            loc_149EC:
000154DA 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000154DE 1032 0000                  		move.b	(a2,d0.w),d0
000154E2 0240 00FF                  		andi.w	#$FF,d0
000154E6 67E4                       		beq.s	loc_149DE
000154E8 45F9 0000 0000             		lea	(AngleMap).l,a2
000154EE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000154F2 E948                       		lsl.w	#4,d0
000154F4 3203                       		move.w	d3,d1
000154F6 0804 000B                  		btst	#$B,d4
000154FA 6700                       		beq.s	loc_14A12
000154FC 4641                       		not.w	d1
000154FE 4414                       		neg.b	(a4)
00015500                            
00015500                            loc_14A12:
00015500 0804 000C                  		btst	#$C,d4
00015504 6700                       		beq.s	loc_14A22
00015506 0614 0040                  		addi.b	#$40,(a4)
0001550A 4414                       		neg.b	(a4)
0001550C 0414 0040                  		subi.b	#$40,(a4)
00015510                            
00015510                            loc_14A22:
00015510 0241 000F                  		andi.w	#$F,d1
00015514 D240                       		add.w	d0,d1
00015516 45F9 0000 0000             		lea	(CollArray1).l,a2
0001551C 1032 1000                  		move.b	(a2,d1.w),d0
00015520 4880                       		ext.w	d0
00015522 BD44                       		eor.w	d6,d4
00015524 0804 000C                  		btst	#$C,d4
00015528 6700                       		beq.s	loc_14A3E
0001552A 4440                       		neg.w	d0
0001552C                            
0001552C                            loc_14A3E:
0001552C 4A40                       		tst.w	d0
0001552E 679C                       		beq.s	loc_149DE
00015530 6B00                       		bmi.s	loc_14A5A
00015532 0C00 0010                  		cmpi.b	#$10,d0
00015536 6700                       		beq.s	loc_14A66
00015538 3202                       		move.w	d2,d1
0001553A 0241 000F                  		andi.w	#$F,d1
0001553E D041                       		add.w	d1,d0
00015540 323C 000F                  		move.w	#$F,d1
00015544 9240                       		sub.w	d0,d1
00015546 4E75                       		rts	
00015548                            ; ===========================================================================
00015548                            
00015548                            loc_14A5A:
00015548 3202                       		move.w	d2,d1
0001554A 0241 000F                  		andi.w	#$F,d1
0001554E D041                       		add.w	d1,d0
00015550 6A00 FF7A                  		bpl.w	loc_149DE
00015554                            
00015554                            loc_14A66:
00015554 944B                       		sub.w	a3,d2
00015556 6100 0000                  		bsr.w	FindFloor2
0001555A D44B                       		add.w	a3,d2
0001555C 0441 0010                  		subi.w	#$10,d1
00015560 4E75                       		rts	
00015562                            ; End of function FindFloor
00015562                            
00015562                            
00015562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015562                            
00015562                            
00015562                            FindFloor2:				; XREF: FindFloor
00015562 6100 FEE6                  		bsr.w	Floor_ChkTile
00015566 3011                       		move.w	(a1),d0
00015568 3800                       		move.w	d0,d4
0001556A 0240 07FF                  		andi.w	#$7FF,d0
0001556E 6700                       		beq.s	loc_14A86
00015570 0B04                       		btst	d5,d4
00015572 6600                       		bne.s	loc_14A94
00015574                            
00015574                            loc_14A86:
00015574 323C 000F                  		move.w	#$F,d1
00015578 3002                       		move.w	d2,d0
0001557A 0240 000F                  		andi.w	#$F,d0
0001557E 9240                       		sub.w	d0,d1
00015580 4E75                       		rts	
00015582                            ; ===========================================================================
00015582                            
00015582                            loc_14A94:
00015582 2478 F796                  		movea.l	($FFFFF796).w,a2
00015586 1032 0000                  		move.b	(a2,d0.w),d0
0001558A 0240 00FF                  		andi.w	#$FF,d0
0001558E 67E4                       		beq.s	loc_14A86
00015590 45F9 0000 0000             		lea	(AngleMap).l,a2
00015596 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001559A E948                       		lsl.w	#4,d0
0001559C 3203                       		move.w	d3,d1
0001559E 0804 000B                  		btst	#$B,d4
000155A2 6700                       		beq.s	loc_14ABA
000155A4 4641                       		not.w	d1
000155A6 4414                       		neg.b	(a4)
000155A8                            
000155A8                            loc_14ABA:
000155A8 0804 000C                  		btst	#$C,d4
000155AC 6700                       		beq.s	loc_14ACA
000155AE 0614 0040                  		addi.b	#$40,(a4)
000155B2 4414                       		neg.b	(a4)
000155B4 0414 0040                  		subi.b	#$40,(a4)
000155B8                            
000155B8                            loc_14ACA:
000155B8 0241 000F                  		andi.w	#$F,d1
000155BC D240                       		add.w	d0,d1
000155BE 45F9 0000 0000             		lea	(CollArray1).l,a2
000155C4 1032 1000                  		move.b	(a2,d1.w),d0
000155C8 4880                       		ext.w	d0
000155CA BD44                       		eor.w	d6,d4
000155CC 0804 000C                  		btst	#$C,d4
000155D0 6700                       		beq.s	loc_14AE6
000155D2 4440                       		neg.w	d0
000155D4                            
000155D4                            loc_14AE6:
000155D4 4A40                       		tst.w	d0
000155D6 679C                       		beq.s	loc_14A86
000155D8 6B00                       		bmi.s	loc_14AFC
000155DA 3202                       		move.w	d2,d1
000155DC 0241 000F                  		andi.w	#$F,d1
000155E0 D041                       		add.w	d1,d0
000155E2 323C 000F                  		move.w	#$F,d1
000155E6 9240                       		sub.w	d0,d1
000155E8 4E75                       		rts	
000155EA                            ; ===========================================================================
000155EA                            
000155EA                            loc_14AFC:
000155EA 3202                       		move.w	d2,d1
000155EC 0241 000F                  		andi.w	#$F,d1
000155F0 D041                       		add.w	d1,d0
000155F2 6A00 FF80                  		bpl.w	loc_14A86
000155F6 4641                       		not.w	d1
000155F8 4E75                       		rts	
000155FA                            ; End of function FindFloor2
000155FA                            
000155FA                            
000155FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155FA                            
000155FA                            
000155FA                            FindWall:				; XREF: Sonic_WalkVertR; et al
000155FA 6100 FE4E                  		bsr.w	Floor_ChkTile
000155FE 3011                       		move.w	(a1),d0
00015600 3800                       		move.w	d0,d4
00015602 0240 07FF                  		andi.w	#$7FF,d0
00015606 6700                       		beq.s	loc_14B1E
00015608 0B04                       		btst	d5,d4
0001560A 6600                       		bne.s	loc_14B2C
0001560C                            
0001560C                            loc_14B1E:
0001560C D64B                       		add.w	a3,d3
0001560E 6100 0000                  		bsr.w	FindWall2
00015612 964B                       		sub.w	a3,d3
00015614 0641 0010                  		addi.w	#$10,d1
00015618 4E75                       		rts	
0001561A                            ; ===========================================================================
0001561A                            
0001561A                            loc_14B2C:
0001561A 2478 F796                  		movea.l	($FFFFF796).w,a2
0001561E 1032 0000                  		move.b	(a2,d0.w),d0
00015622 0240 00FF                  		andi.w	#$FF,d0
00015626 67E4                       		beq.s	loc_14B1E
00015628 45F9 0000 0000             		lea	(AngleMap).l,a2
0001562E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015632 E948                       		lsl.w	#4,d0
00015634 3202                       		move.w	d2,d1
00015636 0804 000C                  		btst	#$C,d4
0001563A 6700                       		beq.s	loc_14B5A
0001563C 4641                       		not.w	d1
0001563E 0614 0040                  		addi.b	#$40,(a4)
00015642 4414                       		neg.b	(a4)
00015644 0414 0040                  		subi.b	#$40,(a4)
00015648                            
00015648                            loc_14B5A:
00015648 0804 000B                  		btst	#$B,d4
0001564C 6700                       		beq.s	loc_14B62
0001564E 4414                       		neg.b	(a4)
00015650                            
00015650                            loc_14B62:
00015650 0241 000F                  		andi.w	#$F,d1
00015654 D240                       		add.w	d0,d1
00015656 45F9 0000 0000             		lea	(CollArray2).l,a2
0001565C 1032 1000                  		move.b	(a2,d1.w),d0
00015660 4880                       		ext.w	d0
00015662 BD44                       		eor.w	d6,d4
00015664 0804 000B                  		btst	#$B,d4
00015668 6700                       		beq.s	loc_14B7E
0001566A 4440                       		neg.w	d0
0001566C                            
0001566C                            loc_14B7E:
0001566C 4A40                       		tst.w	d0
0001566E 679C                       		beq.s	loc_14B1E
00015670 6B00                       		bmi.s	loc_14B9A
00015672 0C00 0010                  		cmpi.b	#$10,d0
00015676 6700                       		beq.s	loc_14BA6
00015678 3203                       		move.w	d3,d1
0001567A 0241 000F                  		andi.w	#$F,d1
0001567E D041                       		add.w	d1,d0
00015680 323C 000F                  		move.w	#$F,d1
00015684 9240                       		sub.w	d0,d1
00015686 4E75                       		rts	
00015688                            ; ===========================================================================
00015688                            
00015688                            loc_14B9A:
00015688 3203                       		move.w	d3,d1
0001568A 0241 000F                  		andi.w	#$F,d1
0001568E D041                       		add.w	d1,d0
00015690 6A00 FF7A                  		bpl.w	loc_14B1E
00015694                            
00015694                            loc_14BA6:
00015694 964B                       		sub.w	a3,d3
00015696 6100 0000                  		bsr.w	FindWall2
0001569A D64B                       		add.w	a3,d3
0001569C 0441 0010                  		subi.w	#$10,d1
000156A0 4E75                       		rts	
000156A2                            ; End of function FindWall
000156A2                            
000156A2                            
000156A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156A2                            
000156A2                            
000156A2                            FindWall2:				; XREF: FindWall
000156A2 6100 FDA6                  		bsr.w	Floor_ChkTile
000156A6 3011                       		move.w	(a1),d0
000156A8 3800                       		move.w	d0,d4
000156AA 0240 07FF                  		andi.w	#$7FF,d0
000156AE 6700                       		beq.s	loc_14BC6
000156B0 0B04                       		btst	d5,d4
000156B2 6600                       		bne.s	loc_14BD4
000156B4                            
000156B4                            loc_14BC6:
000156B4 323C 000F                  		move.w	#$F,d1
000156B8 3003                       		move.w	d3,d0
000156BA 0240 000F                  		andi.w	#$F,d0
000156BE 9240                       		sub.w	d0,d1
000156C0 4E75                       		rts	
000156C2                            ; ===========================================================================
000156C2                            
000156C2                            loc_14BD4:
000156C2 2478 F796                  		movea.l	($FFFFF796).w,a2
000156C6 1032 0000                  		move.b	(a2,d0.w),d0
000156CA 0240 00FF                  		andi.w	#$FF,d0
000156CE 67E4                       		beq.s	loc_14BC6
000156D0 45F9 0000 0000             		lea	(AngleMap).l,a2
000156D6 18B2 0000                  		move.b	(a2,d0.w),(a4)
000156DA E948                       		lsl.w	#4,d0
000156DC 3202                       		move.w	d2,d1
000156DE 0804 000C                  		btst	#$C,d4
000156E2 6700                       		beq.s	loc_14C02
000156E4 4641                       		not.w	d1
000156E6 0614 0040                  		addi.b	#$40,(a4)
000156EA 4414                       		neg.b	(a4)
000156EC 0414 0040                  		subi.b	#$40,(a4)
000156F0                            
000156F0                            loc_14C02:
000156F0 0804 000B                  		btst	#$B,d4
000156F4 6700                       		beq.s	loc_14C0A
000156F6 4414                       		neg.b	(a4)
000156F8                            
000156F8                            loc_14C0A:
000156F8 0241 000F                  		andi.w	#$F,d1
000156FC D240                       		add.w	d0,d1
000156FE 45F9 0000 0000             		lea	(CollArray2).l,a2
00015704 1032 1000                  		move.b	(a2,d1.w),d0
00015708 4880                       		ext.w	d0
0001570A BD44                       		eor.w	d6,d4
0001570C 0804 000B                  		btst	#$B,d4
00015710 6700                       		beq.s	loc_14C26
00015712 4440                       		neg.w	d0
00015714                            
00015714                            loc_14C26:
00015714 4A40                       		tst.w	d0
00015716 679C                       		beq.s	loc_14BC6
00015718 6B00                       		bmi.s	loc_14C3C
0001571A 3203                       		move.w	d3,d1
0001571C 0241 000F                  		andi.w	#$F,d1
00015720 D041                       		add.w	d1,d0
00015722 323C 000F                  		move.w	#$F,d1
00015726 9240                       		sub.w	d0,d1
00015728 4E75                       		rts	
0001572A                            ; ===========================================================================
0001572A                            
0001572A                            loc_14C3C:
0001572A 3203                       		move.w	d3,d1
0001572C 0241 000F                  		andi.w	#$F,d1
00015730 D041                       		add.w	d1,d0
00015732 6A00 FF80                  		bpl.w	loc_14BC6
00015736 4641                       		not.w	d1
00015738 4E75                       		rts	
0001573A                            ; End of function FindWall2
0001573A                            
0001573A                            ; ---------------------------------------------------------------------------
0001573A                            ; Unused floor/wall subroutine - logs something	to do with collision
0001573A                            ; ---------------------------------------------------------------------------
0001573A                            
0001573A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001573A                            
0001573A                            
0001573A                            FloorLog_Unk:				; XREF: Level
0001573A 4E75                       		rts	
0001573C                            
0001573C 43F9 0000 0000             		lea	(CollArray1).l,a1
00015742 45F9 0000 0000             		lea	(CollArray1).l,a2
00015748 363C 00FF                  		move.w	#$FF,d3
0001574C                            
0001574C                            loc_14C5E:
0001574C 7A10                       		moveq	#$10,d5
0001574E 343C 000F                  		move.w	#$F,d2
00015752                            
00015752                            loc_14C64:
00015752 7800                       		moveq	#0,d4
00015754 323C 000F                  		move.w	#$F,d1
00015758                            
00015758                            loc_14C6A:
00015758 3019                       		move.w	(a1)+,d0
0001575A EAA8                       		lsr.l	d5,d0
0001575C D944                       		addx.w	d4,d4
0001575E 51C9 FFF8                  		dbf	d1,loc_14C6A
00015762                            
00015762 34C4                       		move.w	d4,(a2)+
00015764 92FC 0020                  		suba.w	#$20,a1
00015768 5345                       		subq.w	#1,d5
0001576A 51CA FFE6                  		dbf	d2,loc_14C64
0001576E                            
0001576E D2FC 0020                  		adda.w	#$20,a1
00015772 51CB FFD8                  		dbf	d3,loc_14C5E
00015776                            
00015776 43F9 0000 0000             		lea	(CollArray1).l,a1
0001577C 45F9 0000 0000             		lea	(CollArray2).l,a2
00015782 6100                       		bsr.s	FloorLog_Unk2
00015784 43F9 0000 0000             		lea	(CollArray1).l,a1
0001578A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015790                            
00015790                            ; End of function FloorLog_Unk
00015790                            
00015790                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015790                            
00015790                            
00015790                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015790 363C 0FFF                  		move.w	#$FFF,d3
00015794                            
00015794                            loc_14CA6:
00015794 7400                       		moveq	#0,d2
00015796 323C 000F                  		move.w	#$F,d1
0001579A 3019                       		move.w	(a1)+,d0
0001579C 6700                       		beq.s	loc_14CD4
0001579E 6B00                       		bmi.s	loc_14CBE
000157A0                            
000157A0                            loc_14CB2:
000157A0 E248                       		lsr.w	#1,d0
000157A2 6400                       		bcc.s	loc_14CB8
000157A4 5202                       		addq.b	#1,d2
000157A6                            
000157A6                            loc_14CB8:
000157A6 51C9 FFF8                  		dbf	d1,loc_14CB2
000157AA                            
000157AA 6000                       		bra.s	loc_14CD6
000157AC                            ; ===========================================================================
000157AC                            
000157AC                            loc_14CBE:
000157AC 0C40 FFFF                  		cmpi.w	#-1,d0
000157B0 6700                       		beq.s	loc_14CD0
000157B2                            
000157B2                            loc_14CC4:
000157B2 E348                       		lsl.w	#1,d0
000157B4 6400                       		bcc.s	loc_14CCA
000157B6 5302                       		subq.b	#1,d2
000157B8                            
000157B8                            loc_14CCA:
000157B8 51C9 FFF8                  		dbf	d1,loc_14CC4
000157BC                            
000157BC 6000                       		bra.s	loc_14CD6
000157BE                            ; ===========================================================================
000157BE                            
000157BE                            loc_14CD0:
000157BE 303C 0010                  		move.w	#$10,d0
000157C2                            
000157C2                            loc_14CD4:
000157C2 3400                       		move.w	d0,d2
000157C4                            
000157C4                            loc_14CD6:
000157C4 14C2                       		move.b	d2,(a2)+
000157C6 51CB FFCC                  		dbf	d3,loc_14CA6
000157CA                            
000157CA 4E75                       		rts	
000157CC                            
000157CC                            ; End of function FloorLog_Unk2
000157CC                            
000157CC                            
000157CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157CC                            
000157CC                            
000157CC                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000157CC 2628 0008                  		move.l	8(a0),d3
000157D0 2428 000C                  		move.l	$C(a0),d2
000157D4 3228 0010                  		move.w	$10(a0),d1
000157D8 48C1                       		ext.l	d1
000157DA E181                       		asl.l	#8,d1
000157DC D681                       		add.l	d1,d3
000157DE 3228 0012                  		move.w	$12(a0),d1
000157E2 48C1                       		ext.l	d1
000157E4 E181                       		asl.l	#8,d1
000157E6 D481                       		add.l	d1,d2
000157E8 4842                       		swap	d2
000157EA 4843                       		swap	d3
000157EC 11C0 F768                  		move.b	d0,($FFFFF768).w
000157F0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000157F4 1200                       		move.b	d0,d1
000157F6 0600 0020                  		addi.b	#$20,d0
000157FA 6A00                       		bpl.s	loc_14D1A
000157FC 1001                       		move.b	d1,d0
000157FE 6A00                       		bpl.s	loc_14D14
00015800 5300                       		subq.b	#1,d0
00015802                            
00015802                            loc_14D14:
00015802 0600 0020                  		addi.b	#$20,d0
00015806 6000                       		bra.s	loc_14D24
00015808                            ; ===========================================================================
00015808                            
00015808                            loc_14D1A:
00015808 1001                       		move.b	d1,d0
0001580A 6A00                       		bpl.s	loc_14D20
0001580C 5200                       		addq.b	#1,d0
0001580E                            
0001580E                            loc_14D20:
0001580E 0600 001F                  		addi.b	#$1F,d0
00015812                            
00015812                            loc_14D24:
00015812 0200 00C0                  		andi.b	#$C0,d0
00015816 6700 0000                  		beq.w	loc_14DF0
0001581A 0C00 0080                  		cmpi.b	#$80,d0
0001581E 6700 0000                  		beq.w	loc_14F7C
00015822 0201 0038                  		andi.b	#$38,d1
00015826 6600                       		bne.s	loc_14D3C
00015828 5042                       		addq.w	#8,d2
0001582A                            
0001582A                            loc_14D3C:
0001582A 0C00 0040                  		cmpi.b	#$40,d0
0001582E 6700 0000                  		beq.w	loc_1504A
00015832 6000 0000                  		bra.w	loc_14EBC
00015836                            
00015836                            ; End of function Sonic_WalkSpeed
00015836                            
00015836                            
00015836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015836                            
00015836                            
00015836                            sub_14D48:				; XREF: Sonic_Jump
00015836 11C0 F768                  		move.b	d0,($FFFFF768).w
0001583A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001583E 0600 0020                  		addi.b	#$20,d0
00015842 0200 00C0                  		andi.b	#$C0,d0
00015846 0C00 0040                  		cmpi.b	#$40,d0
0001584A 6700 0000                  		beq.w	loc_14FD6
0001584E 0C00 0080                  		cmpi.b	#$80,d0
00015852 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015856 0C00 00C0                  		cmpi.b	#$C0,d0
0001585A 6700 0000                  		beq.w	sub_14E50
0001585E                            
0001585E                            ; End of function sub_14D48
0001585E                            
0001585E                            ; ---------------------------------------------------------------------------
0001585E                            ; Subroutine to	make Sonic land	on the floor after jumping
0001585E                            ; ---------------------------------------------------------------------------
0001585E                            
0001585E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001585E                            
0001585E                            
0001585E                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001585E 3428 000C                  		move.w	$C(a0),d2
00015862 3628 0008                  		move.w	8(a0),d3
00015866 7000                       		moveq	#0,d0
00015868 1028 0016                  		move.b	$16(a0),d0
0001586C 4880                       		ext.w	d0
0001586E D440                       		add.w	d0,d2
00015870 1028 0017                  		move.b	$17(a0),d0
00015874 4880                       		ext.w	d0
00015876 D640                       		add.w	d0,d3
00015878 49F8 F768                  		lea	($FFFFF768).w,a4
0001587C 367C 0010                  		movea.w	#$10,a3
00015880 3C3C 0000                  		move.w	#0,d6
00015884 7A0D                       		moveq	#$D,d5
00015886 6100 FC34                  		bsr.w	FindFloor
0001588A 3F01                       		move.w	d1,-(sp)
0001588C 3428 000C                  		move.w	$C(a0),d2
00015890 3628 0008                  		move.w	8(a0),d3
00015894 7000                       		moveq	#0,d0
00015896 1028 0016                  		move.b	$16(a0),d0
0001589A 4880                       		ext.w	d0
0001589C D440                       		add.w	d0,d2
0001589E 1028 0017                  		move.b	$17(a0),d0
000158A2 4880                       		ext.w	d0
000158A4 9640                       		sub.w	d0,d3
000158A6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158AA 367C 0010                  		movea.w	#$10,a3
000158AE 3C3C 0000                  		move.w	#0,d6
000158B2 7A0D                       		moveq	#$D,d5
000158B4 6100 FC06                  		bsr.w	FindFloor
000158B8 301F                       		move.w	(sp)+,d0
000158BA 143C 0000                  		move.b	#0,d2
000158BE                            
000158BE                            loc_14DD0:
000158BE 1638 F76A                  		move.b	($FFFFF76A).w,d3
000158C2 B240                       		cmp.w	d0,d1
000158C4 6F00                       		ble.s	loc_14DDE
000158C6 1638 F768                  		move.b	($FFFFF768).w,d3
000158CA C141                       		exg	d0,d1
000158CC                            
000158CC                            loc_14DDE:
000158CC 0803 0000                  		btst	#0,d3
000158D0 6700                       		beq.s	locret_14DE6
000158D2 1602                       		move.b	d2,d3
000158D4                            
000158D4                            locret_14DE6:
000158D4 4E75                       		rts	
000158D6                            
000158D6                            ; End of function Sonic_HitFloor
000158D6                            
000158D6                            ; ===========================================================================
000158D6 3428 000C                  		move.w	$C(a0),d2
000158DA 3628 0008                  		move.w	8(a0),d3
000158DE                            
000158DE                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000158DE 0642 000A                  		addi.w	#$A,d2
000158E2 49F8 F768                  		lea	($FFFFF768).w,a4
000158E6 367C 0010                  		movea.w	#$10,a3
000158EA 3C3C 0000                  		move.w	#0,d6
000158EE 7A0E                       		moveq	#$E,d5
000158F0 6100 FBCA                  		bsr.w	FindFloor
000158F4 143C 0000                  		move.b	#0,d2
000158F8                            
000158F8                            loc_14E0A:				; XREF: sub_14EB4
000158F8 1638 F768                  		move.b	($FFFFF768).w,d3
000158FC 0803 0000                  		btst	#0,d3
00015900 6700                       		beq.s	locret_14E16
00015902 1602                       		move.b	d2,d3
00015904                            
00015904                            locret_14E16:
00015904 4E75                       		rts	
00015906                            
00015906                            ; ---------------------------------------------------------------------------
00015906                            ; Subroutine allowing objects to interact with the floor
00015906                            ; ---------------------------------------------------------------------------
00015906                            
00015906                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015906                            
00015906                            
00015906                            ObjHitFloor:
00015906 3628 0008                  		move.w	8(a0),d3
0001590A                            
0001590A                            ; End of function ObjHitFloor
0001590A                            
0001590A                            
0001590A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001590A                            
0001590A                            
0001590A                            ObjHitFloor2:
0001590A 3428 000C                  		move.w	$C(a0),d2
0001590E 7000                       		moveq	#0,d0
00015910 1028 0016                  		move.b	$16(a0),d0
00015914 4880                       		ext.w	d0
00015916 D440                       		add.w	d0,d2
00015918 49F8 F768                  		lea	($FFFFF768).w,a4
0001591C 18BC 0000                  		move.b	#0,(a4)
00015920 367C 0010                  		movea.w	#$10,a3
00015924 3C3C 0000                  		move.w	#0,d6
00015928 7A0D                       		moveq	#$D,d5
0001592A 6100 FB90                  		bsr.w	FindFloor
0001592E 1638 F768                  		move.b	($FFFFF768).w,d3
00015932 0803 0000                  		btst	#0,d3
00015936 6700                       		beq.s	locret_14E4E
00015938 163C 0000                  		move.b	#0,d3
0001593C                            
0001593C                            locret_14E4E:
0001593C 4E75                       		rts	
0001593E                            ; End of function ObjHitFloor2
0001593E                            
0001593E                            
0001593E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001593E                            
0001593E                            
0001593E                            sub_14E50:				; XREF: sub_14D48
0001593E 3428 000C                  		move.w	$C(a0),d2
00015942 3628 0008                  		move.w	8(a0),d3
00015946 7000                       		moveq	#0,d0
00015948 1028 0017                  		move.b	$17(a0),d0
0001594C 4880                       		ext.w	d0
0001594E 9440                       		sub.w	d0,d2
00015950 1028 0016                  		move.b	$16(a0),d0
00015954 4880                       		ext.w	d0
00015956 D640                       		add.w	d0,d3
00015958 49F8 F768                  		lea	($FFFFF768).w,a4
0001595C 367C 0010                  		movea.w	#$10,a3
00015960 3C3C 0000                  		move.w	#0,d6
00015964 7A0E                       		moveq	#$E,d5
00015966 6100 FC92                  		bsr.w	FindWall
0001596A 3F01                       		move.w	d1,-(sp)
0001596C 3428 000C                  		move.w	$C(a0),d2
00015970 3628 0008                  		move.w	8(a0),d3
00015974 7000                       		moveq	#0,d0
00015976 1028 0017                  		move.b	$17(a0),d0
0001597A 4880                       		ext.w	d0
0001597C D440                       		add.w	d0,d2
0001597E 1028 0016                  		move.b	$16(a0),d0
00015982 4880                       		ext.w	d0
00015984 D640                       		add.w	d0,d3
00015986 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001598A 367C 0010                  		movea.w	#$10,a3
0001598E 3C3C 0000                  		move.w	#0,d6
00015992 7A0E                       		moveq	#$E,d5
00015994 6100 FC64                  		bsr.w	FindWall
00015998 301F                       		move.w	(sp)+,d0
0001599A 143C 00C0                  		move.b	#-$40,d2
0001599E 6000 FF1E                  		bra.w	loc_14DD0
000159A2                            
000159A2                            ; End of function sub_14E50
000159A2                            
000159A2                            
000159A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159A2                            
000159A2                            
000159A2                            sub_14EB4:				; XREF: Sonic_Floor
000159A2 3428 000C                  		move.w	$C(a0),d2
000159A6 3628 0008                  		move.w	8(a0),d3
000159AA                            
000159AA                            loc_14EBC:
000159AA 0643 000A                  		addi.w	#$A,d3
000159AE 49F8 F768                  		lea	($FFFFF768).w,a4
000159B2 367C 0010                  		movea.w	#$10,a3
000159B6 3C3C 0000                  		move.w	#0,d6
000159BA 7A0E                       		moveq	#$E,d5
000159BC 6100 FC3C                  		bsr.w	FindWall
000159C0 143C 00C0                  		move.b	#-$40,d2
000159C4 6000 FF32                  		bra.w	loc_14E0A
000159C8                            
000159C8                            ; End of function sub_14EB4
000159C8                            
000159C8                            ; ---------------------------------------------------------------------------
000159C8                            ; Subroutine to	detect when an object hits a wall to its right
000159C8                            ; ---------------------------------------------------------------------------
000159C8                            
000159C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C8                            
000159C8                            
000159C8                            ObjHitWallRight:
000159C8 D668 0008                  		add.w	8(a0),d3
000159CC 3428 000C                  		move.w	$C(a0),d2
000159D0 49F8 F768                  		lea	($FFFFF768).w,a4
000159D4 18BC 0000                  		move.b	#0,(a4)
000159D8 367C 0010                  		movea.w	#$10,a3
000159DC 3C3C 0000                  		move.w	#0,d6
000159E0 7A0E                       		moveq	#$E,d5
000159E2 6100 FC16                  		bsr.w	FindWall
000159E6 1638 F768                  		move.b	($FFFFF768).w,d3
000159EA 0803 0000                  		btst	#0,d3
000159EE 6700                       		beq.s	locret_14F06
000159F0 163C 00C0                  		move.b	#-$40,d3
000159F4                            
000159F4                            locret_14F06:
000159F4 4E75                       		rts	
000159F6                            
000159F6                            ; End of function ObjHitWallRight
000159F6                            
000159F6                            ; ---------------------------------------------------------------------------
000159F6                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000159F6                            ; touches them
000159F6                            ; ---------------------------------------------------------------------------
000159F6                            
000159F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159F6                            
000159F6                            
000159F6                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000159F6 3428 000C                  		move.w	$C(a0),d2
000159FA 3628 0008                  		move.w	8(a0),d3
000159FE 7000                       		moveq	#0,d0
00015A00 1028 0016                  		move.b	$16(a0),d0
00015A04 4880                       		ext.w	d0
00015A06 9440                       		sub.w	d0,d2
00015A08 0A42 000F                  		eori.w	#$F,d2
00015A0C 1028 0017                  		move.b	$17(a0),d0
00015A10 4880                       		ext.w	d0
00015A12 D640                       		add.w	d0,d3
00015A14 49F8 F768                  		lea	($FFFFF768).w,a4
00015A18 367C FFF0                  		movea.w	#-$10,a3
00015A1C 3C3C 1000                  		move.w	#$1000,d6
00015A20 7A0E                       		moveq	#$E,d5
00015A22 6100 FA98                  		bsr.w	FindFloor
00015A26 3F01                       		move.w	d1,-(sp)
00015A28 3428 000C                  		move.w	$C(a0),d2
00015A2C 3628 0008                  		move.w	8(a0),d3
00015A30 7000                       		moveq	#0,d0
00015A32 1028 0016                  		move.b	$16(a0),d0
00015A36 4880                       		ext.w	d0
00015A38 9440                       		sub.w	d0,d2
00015A3A 0A42 000F                  		eori.w	#$F,d2
00015A3E 1028 0017                  		move.b	$17(a0),d0
00015A42 4880                       		ext.w	d0
00015A44 9640                       		sub.w	d0,d3
00015A46 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015A4A 367C FFF0                  		movea.w	#-$10,a3
00015A4E 3C3C 1000                  		move.w	#$1000,d6
00015A52 7A0E                       		moveq	#$E,d5
00015A54 6100 FA66                  		bsr.w	FindFloor
00015A58 301F                       		move.w	(sp)+,d0
00015A5A 143C 0080                  		move.b	#-$80,d2
00015A5E 6000 FE5E                  		bra.w	loc_14DD0
00015A62                            ; End of function Sonic_DontRunOnWalls
00015A62                            
00015A62                            ; ===========================================================================
00015A62 3428 000C                  		move.w	$C(a0),d2
00015A66 3628 0008                  		move.w	8(a0),d3
00015A6A                            
00015A6A                            loc_14F7C:
00015A6A 0442 000A                  		subi.w	#$A,d2
00015A6E 0A42 000F                  		eori.w	#$F,d2
00015A72 49F8 F768                  		lea	($FFFFF768).w,a4
00015A76 367C FFF0                  		movea.w	#-$10,a3
00015A7A 3C3C 1000                  		move.w	#$1000,d6
00015A7E 7A0E                       		moveq	#$E,d5
00015A80 6100 FA3A                  		bsr.w	FindFloor
00015A84 143C 0080                  		move.b	#-$80,d2
00015A88 6000 FE6E                  		bra.w	loc_14E0A
00015A8C                            
00015A8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A8C                            
00015A8C                            
00015A8C                            ObjHitCeiling:
00015A8C 3428 000C                  		move.w	$C(a0),d2
00015A90 3628 0008                  		move.w	8(a0),d3
00015A94 7000                       		moveq	#0,d0
00015A96 1028 0016                  		move.b	$16(a0),d0
00015A9A 4880                       		ext.w	d0
00015A9C 9440                       		sub.w	d0,d2
00015A9E 0A42 000F                  		eori.w	#$F,d2
00015AA2 49F8 F768                  		lea	($FFFFF768).w,a4
00015AA6 367C FFF0                  		movea.w	#-$10,a3
00015AAA 3C3C 1000                  		move.w	#$1000,d6
00015AAE 7A0E                       		moveq	#$E,d5
00015AB0 6100 FA0A                  		bsr.w	FindFloor
00015AB4 1638 F768                  		move.b	($FFFFF768).w,d3
00015AB8 0803 0000                  		btst	#0,d3
00015ABC 6700                       		beq.s	locret_14FD4
00015ABE 163C 0080                  		move.b	#-$80,d3
00015AC2                            
00015AC2                            locret_14FD4:
00015AC2 4E75                       		rts	
00015AC4                            ; End of function ObjHitCeiling
00015AC4                            
00015AC4                            ; ===========================================================================
00015AC4                            
00015AC4                            loc_14FD6:				; XREF: sub_14D48
00015AC4 3428 000C                  		move.w	$C(a0),d2
00015AC8 3628 0008                  		move.w	8(a0),d3
00015ACC 7000                       		moveq	#0,d0
00015ACE 1028 0017                  		move.b	$17(a0),d0
00015AD2 4880                       		ext.w	d0
00015AD4 9440                       		sub.w	d0,d2
00015AD6 1028 0016                  		move.b	$16(a0),d0
00015ADA 4880                       		ext.w	d0
00015ADC 9640                       		sub.w	d0,d3
00015ADE 0A43 000F                  		eori.w	#$F,d3
00015AE2 49F8 F768                  		lea	($FFFFF768).w,a4
00015AE6 367C FFF0                  		movea.w	#-$10,a3
00015AEA 3C3C 0800                  		move.w	#$800,d6
00015AEE 7A0E                       		moveq	#$E,d5
00015AF0 6100 FB08                  		bsr.w	FindWall
00015AF4 3F01                       		move.w	d1,-(sp)
00015AF6 3428 000C                  		move.w	$C(a0),d2
00015AFA 3628 0008                  		move.w	8(a0),d3
00015AFE 7000                       		moveq	#0,d0
00015B00 1028 0017                  		move.b	$17(a0),d0
00015B04 4880                       		ext.w	d0
00015B06 D440                       		add.w	d0,d2
00015B08 1028 0016                  		move.b	$16(a0),d0
00015B0C 4880                       		ext.w	d0
00015B0E 9640                       		sub.w	d0,d3
00015B10 0A43 000F                  		eori.w	#$F,d3
00015B14 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B18 367C FFF0                  		movea.w	#-$10,a3
00015B1C 3C3C 0800                  		move.w	#$800,d6
00015B20 7A0E                       		moveq	#$E,d5
00015B22 6100 FAD6                  		bsr.w	FindWall
00015B26 301F                       		move.w	(sp)+,d0
00015B28 143C 0040                  		move.b	#$40,d2
00015B2C 6000 FD90                  		bra.w	loc_14DD0
00015B30                            
00015B30                            ; ---------------------------------------------------------------------------
00015B30                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015B30                            ; ---------------------------------------------------------------------------
00015B30                            
00015B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B30                            
00015B30                            
00015B30                            Sonic_HitWall:				; XREF: Sonic_Floor
00015B30 3428 000C                  		move.w	$C(a0),d2
00015B34 3628 0008                  		move.w	8(a0),d3
00015B38                            
00015B38                            loc_1504A:
00015B38 0443 000A                  		subi.w	#$A,d3
00015B3C 0A43 000F                  		eori.w	#$F,d3
00015B40 49F8 F768                  		lea	($FFFFF768).w,a4
00015B44 367C FFF0                  		movea.w	#-$10,a3
00015B48 3C3C 0800                  		move.w	#$800,d6
00015B4C 7A0E                       		moveq	#$E,d5
00015B4E 6100 FAAA                  		bsr.w	FindWall
00015B52 143C 0040                  		move.b	#$40,d2
00015B56 6000 FDA0                  		bra.w	loc_14E0A
00015B5A                            ; End of function Sonic_HitWall
00015B5A                            
00015B5A                            ; ---------------------------------------------------------------------------
00015B5A                            ; Subroutine to	detect when an object hits a wall to its left
00015B5A                            ; ---------------------------------------------------------------------------
00015B5A                            
00015B5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B5A                            
00015B5A                            
00015B5A                            ObjHitWallLeft:
00015B5A D668 0008                  		add.w	8(a0),d3
00015B5E 3428 000C                  		move.w	$C(a0),d2
00015B62 49F8 F768                  		lea	($FFFFF768).w,a4
00015B66 18BC 0000                  		move.b	#0,(a4)
00015B6A 367C FFF0                  		movea.w	#-$10,a3
00015B6E 3C3C 0800                  		move.w	#$800,d6
00015B72 7A0E                       		moveq	#$E,d5
00015B74 6100 FA84                  		bsr.w	FindWall
00015B78 1638 F768                  		move.b	($FFFFF768).w,d3
00015B7C 0803 0000                  		btst	#0,d3
00015B80 6700                       		beq.s	locret_15098
00015B82 163C 0040                  		move.b	#$40,d3
00015B86                            
00015B86                            locret_15098:
00015B86 4E75                       		rts	
00015B88                            ; End of function ObjHitWallLeft
00015B88                            
00015B88                            ; ===========================================================================
00015B88                            ; ---------------------------------------------------------------------------
00015B88                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015B88                            ; ---------------------------------------------------------------------------
00015B88                            
00015B88                            Obj66:					; XREF: Obj_Index
00015B88 7000                       		moveq	#0,d0
00015B8A 1028 0024                  		move.b	$24(a0),d0
00015B8E 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015B92 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015B96                            ; ===========================================================================
00015B96 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015B98 0000                       		dc.w Obj66_Action-Obj66_Index
00015B9A 0000                       		dc.w Obj66_Display-Obj66_Index
00015B9C 0000                       		dc.w Obj66_Release-Obj66_Index
00015B9E                            ; ===========================================================================
00015B9E                            
00015B9E                            Obj66_Main:				; XREF: Obj66_Index
00015B9E 5428 0024                  		addq.b	#2,$24(a0)
00015BA2 323C 0001                  		move.w	#1,d1
00015BA6 2248                       		movea.l	a0,a1
00015BA8 6000                       		bra.s	Obj66_MakeItem
00015BAA                            ; ===========================================================================
00015BAA                            
00015BAA                            Obj66_Loop:
00015BAA 6100 88D0                  		bsr.w	SingleObjLoad
00015BAE 6600                       		bne.s	loc_150FE
00015BB0 12BC 0066                  		move.b	#$66,0(a1)
00015BB4 5829 0024                  		addq.b	#4,$24(a1)
00015BB8 3368 0008 0008             		move.w	8(a0),8(a1)
00015BBE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015BC4 137C 0003 0018             		move.b	#3,$18(a1)
00015BCA 137C 0010 001A             		move.b	#$10,$1A(a1)
00015BD0                            
00015BD0                            Obj66_MakeItem:				; XREF: Obj66_Main
00015BD0 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015BD8 337C 4348 0002             		move.w	#$4348,2(a1)
00015BDE 0029 0004 0001             		ori.b	#4,1(a1)
00015BE4 137C 0038 0019             		move.b	#$38,$19(a1)
00015BEA                            
00015BEA                            loc_150FE:
00015BEA 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015BEE                            
00015BEE 117C 0030 0019             		move.b	#$30,$19(a0)
00015BF4 117C 0004 0018             		move.b	#4,$18(a0)
00015BFA 317C 003C 0030             		move.w	#$3C,$30(a0)
00015C00 117C 0001 0034             		move.b	#1,$34(a0)
00015C06 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015C0C                            
00015C0C                            Obj66_Action:				; XREF: Obj66_Index
00015C0C 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015C10 4A28 0001                  		tst.b	1(a0)
00015C14 6A00 0000                  		bpl.w	Obj66_Display
00015C18 323C 0030                  		move.w	#$30,d1
00015C1C 3401                       		move.w	d1,d2
00015C1E 3602                       		move.w	d2,d3
00015C20 5243                       		addq.w	#1,d3
00015C22 3828 0008                  		move.w	8(a0),d4
00015C26 6100 A79E                  		bsr.w	SolidObject
00015C2A 0828 0005 0022             		btst	#5,$22(a0)
00015C30 6700 0000                  		beq.w	Obj66_Display
00015C34 43F8 D000                  		lea	($FFFFD000).w,a1
00015C38 720E                       		moveq	#$E,d1
00015C3A 3029 0008                  		move.w	8(a1),d0
00015C3E B068 0008                  		cmp.w	8(a0),d0
00015C42 6500                       		bcs.s	Obj66_GrabSonic
00015C44 7207                       		moveq	#7,d1
00015C46                            
00015C46                            Obj66_GrabSonic:
00015C46 B228 001A                  		cmp.b	$1A(a0),d1
00015C4A 6600                       		bne.s	Obj66_Display
00015C4C 1141 0032                  		move.b	d1,$32(a0)
00015C50 5828 0024                  		addq.b	#4,$24(a0)
00015C54 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015C5A 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015C60 337C 0800 0014             		move.w	#$800,$14(a1)
00015C66 337C 0000 0010             		move.w	#0,$10(a1)
00015C6C 337C 0000 0012             		move.w	#0,$12(a1)
00015C72 08A8 0005 0022             		bclr	#5,$22(a0)
00015C78 08A9 0005 0022             		bclr	#5,$22(a1)
00015C7E 08E9 0001 0022             		bset	#1,$22(a1)
00015C84 3429 0008                  		move.w	8(a1),d2
00015C88 3629 000C                  		move.w	$C(a1),d3
00015C8C 6100 0000                  		bsr.w	Obj66_ChgPos
00015C90 D569 0008                  		add.w	d2,8(a1)
00015C94 D769 000C                  		add.w	d3,$C(a1)
00015C98 E0E9 0008                  		asr	8(a1)
00015C9C E0E9 000C                  		asr	$C(a1)
00015CA0                            
00015CA0                            Obj66_Display:				; XREF: Obj66_Index
00015CA0 6000 A3FC                  		bra.w	MarkObjGone
00015CA4                            ; ===========================================================================
00015CA4                            
00015CA4                            Obj66_Release:				; XREF: Obj66_Index
00015CA4 1028 001A                  		move.b	$1A(a0),d0
00015CA8 0C00 0004                  		cmpi.b	#4,d0
00015CAC 6700                       		beq.s	loc_151C8
00015CAE 0C00 0007                  		cmpi.b	#7,d0
00015CB2 6600                       		bne.s	loc_151F8
00015CB4                            
00015CB4                            loc_151C8:
00015CB4 B028 0032                  		cmp.b	$32(a0),d0
00015CB8 6700                       		beq.s	loc_151F8
00015CBA 43F8 D000                  		lea	($FFFFD000).w,a1
00015CBE 337C 0000 0010             		move.w	#0,$10(a1)
00015CC4 337C 0800 0012             		move.w	#$800,$12(a1)
00015CCA 0C00 0004                  		cmpi.b	#4,d0
00015CCE 6700                       		beq.s	loc_151F0
00015CD0 337C 0800 0010             		move.w	#$800,$10(a1)
00015CD6 337C 0800 0012             		move.w	#$800,$12(a1)
00015CDC                            
00015CDC                            loc_151F0:
00015CDC 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015CE0 5928 0024                  		subq.b	#4,$24(a0)
00015CE4                            
00015CE4                            loc_151F8:
00015CE4 6100                       		bsr.s	Obj66_ChkSwitch
00015CE6 6100                       		bsr.s	Obj66_ChgPos
00015CE8 6000 A3B4                  		bra.w	MarkObjGone
00015CEC                            
00015CEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CEC                            
00015CEC                            
00015CEC                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015CEC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015CF0 7000                       		moveq	#0,d0
00015CF2 1028 0038                  		move.b	$38(a0),d0
00015CF6 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015CFC 6700                       		beq.s	loc_15224	; if not, branch
00015CFE 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015D02 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015D04 4428 0034                  		neg.b	$34(a0)
00015D08 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015D0E 6000                       		bra.s	Obj66_Animate
00015D10                            ; ===========================================================================
00015D10                            
00015D10                            loc_15224:
00015D10 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015D14                            
00015D14                            Obj66_Animate:
00015D14 5328 001E                  		subq.b	#1,$1E(a0)
00015D18 6A00                       		bpl.s	locret_15246
00015D1A 117C 0007 001E             		move.b	#7,$1E(a0)
00015D20 1228 0034                  		move.b	$34(a0),d1
00015D24 1028 001A                  		move.b	$1A(a0),d0
00015D28 D001                       		add.b	d1,d0
00015D2A 0200 000F                  		andi.b	#$F,d0
00015D2E 1140 001A                  		move.b	d0,$1A(a0)
00015D32                            
00015D32                            locret_15246:
00015D32 4E75                       		rts	
00015D34                            ; End of function Obj66_ChkSwitch
00015D34                            
00015D34                            
00015D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D34                            
00015D34                            
00015D34                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015D34 43F8 D000                  		lea	($FFFFD000).w,a1
00015D38 7000                       		moveq	#0,d0
00015D3A 1028 001A                  		move.b	$1A(a0),d0
00015D3E D040                       		add.w	d0,d0
00015D40 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015D44 101A                       		move.b	(a2)+,d0
00015D46 4880                       		ext.w	d0
00015D48 D068 0008                  		add.w	8(a0),d0
00015D4C 3340 0008                  		move.w	d0,8(a1)
00015D50 101A                       		move.b	(a2)+,d0
00015D52 4880                       		ext.w	d0
00015D54 D068 000C                  		add.w	$C(a0),d0
00015D58 3340 000C                  		move.w	d0,$C(a1)
00015D5C 4E75                       		rts	
00015D5E                            ; End of function Obj66_ChgPos
00015D5E                            
00015D5E                            ; ===========================================================================
00015D5E E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015D62 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015D66 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015D6A 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015D6E 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015D72 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015D76 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015D7A E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015D7E                            ; ---------------------------------------------------------------------------
00015D7E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015D7E                            ; ---------------------------------------------------------------------------
00015D7E                            Map_obj66:
00015D7E                            	include "_maps\obj66.asm"
00015D7E                            ; ---------------------------------------------------------------------------
00015D7E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015D7E                            ; ---------------------------------------------------------------------------
00015D7E 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015D82 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015D86 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015D8A 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015D8E 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015D92 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015D96 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015D9A 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015D9E 0000                       		dc.w byte_154A4-Map_obj66
00015DA0 06                         byte_152B4:	dc.b 6
00015DA1 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015DA6 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015DAB E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015DB0 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015DB5 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015DBA 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015DBF 06                         byte_152D3:	dc.b 6
00015DC0 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015DC5 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015DCA F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015DCF F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015DD4 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015DD9 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015DDE 06                         byte_152F2:	dc.b 6
00015DDF 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015DE4 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015DE9 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015DEE 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015DF3 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015DF8 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015DFD 06                         byte_15311:	dc.b 6
00015DFE 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015E03 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015E08 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015E0D 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015E12 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015E17 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015E1C 06                         byte_15330:	dc.b 6
00015E1D 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015E22 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015E27 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015E2C 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015E31 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015E36 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015E3B 06                         byte_1534F:	dc.b 6
00015E3C 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015E41 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015E46 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015E4B 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015E50 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015E55 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015E5A 06                         byte_1536E:	dc.b 6
00015E5B 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015E60 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015E65 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015E6A 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015E6F 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015E74 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015E79 06                         byte_1538D:	dc.b 6
00015E7A 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015E7F F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015E84 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015E89 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015E8E 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015E93 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015E98 06                         byte_153AC:	dc.b 6
00015E99 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015E9E 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015EA3 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015EA8 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015EAD 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015EB2 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015EB7 06                         byte_153CB:	dc.b 6
00015EB8 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015EBD E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015EC2 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015EC7 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015ECC F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015ED1 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015ED6 06                         byte_153EA:	dc.b 6
00015ED7 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015EDC E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015EE1 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015EE6 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015EEB E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015EF0 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015EF5 06                         byte_15409:	dc.b 6
00015EF6 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015EFB D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015F00 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015F05 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015F0A E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015F0F E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015F14 06                         byte_15428:	dc.b 6
00015F15 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015F1A D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015F1F C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015F24 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015F29 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015F2E E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015F33 06                         byte_15447:	dc.b 6
00015F34 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015F39 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015F3E CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015F43 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015F48 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015F4D E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015F52 06                         byte_15466:	dc.b 6
00015F53 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015F58 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015F5D D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015F62 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015F67 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015F6C E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015F71 06                         byte_15485:	dc.b 6
00015F72 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015F77 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015F7C DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015F81 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015F86 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015F8B F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015F90 0C                         byte_154A4:	dc.b $C
00015F91 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015F96 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015F9B E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015FA0 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015FA5 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015FAA E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015FAF 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015FB4 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015FB9 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015FBE 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015FC3 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015FC8 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015FCE 00                         		even
00015FCE 00                         		even
00015FCE                            
00015FCE                            ; ===========================================================================
00015FCE                            ; ---------------------------------------------------------------------------
00015FCE                            ; Object 67 - disc that	you run	around (SBZ)
00015FCE                            ; ---------------------------------------------------------------------------
00015FCE                            
00015FCE                            Obj67:					; XREF: Obj_Index
00015FCE 7000                       		moveq	#0,d0
00015FD0 1028 0024                  		move.b	$24(a0),d0
00015FD4 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015FD8 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015FDC                            ; ===========================================================================
00015FDC 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015FDE 0000                       		dc.w Obj67_Action-Obj67_Index
00015FE0                            ; ===========================================================================
00015FE0                            
00015FE0                            Obj67_Main:				; XREF: Obj67_Index
00015FE0 5428 0024                  		addq.b	#2,$24(a0)
00015FE4 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015FEC 317C C344 0002             		move.w	#$C344,2(a0)
00015FF2 117C 0004 0001             		move.b	#4,1(a0)
00015FF8 117C 0004 0018             		move.b	#4,$18(a0)
00015FFE 117C 0008 0019             		move.b	#8,$19(a0)
00016004 3168 0008 0032             		move.w	8(a0),$32(a0)
0001600A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016010 117C 0018 0034             		move.b	#$18,$34(a0)
00016016 117C 0048 0038             		move.b	#$48,$38(a0)
0001601C 1228 0028                  		move.b	$28(a0),d1	; get object type
00016020 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016024 6700                       		beq.s	loc_15546
00016026 117C 0010 0034             		move.b	#$10,$34(a0)
0001602C 117C 0038 0038             		move.b	#$38,$38(a0)
00016032                            
00016032                            loc_15546:
00016032 1228 0028                  		move.b	$28(a0),d1	; get object type
00016036 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001603A 4881                       		ext.w	d1
0001603C E741                       		asl.w	#3,d1
0001603E 3141 0036                  		move.w	d1,$36(a0)
00016042 1028 0022                  		move.b	$22(a0),d0
00016046 E418                       		ror.b	#2,d0
00016048 0200 00C0                  		andi.b	#-$40,d0
0001604C 1140 0026                  		move.b	d0,$26(a0)
00016050                            
00016050                            Obj67_Action:				; XREF: Obj67_Index
00016050 6100 0000                  		bsr.w	Obj67_MoveSonic
00016054 6100 0000                  		bsr.w	Obj67_MoveSpot
00016058 6000 0000                  		bra.w	Obj67_ChkDel
0001605C                            ; ===========================================================================
0001605C                            
0001605C                            Obj67_MoveSonic:			; XREF: Obj67_Action
0001605C 7400                       		moveq	#0,d2
0001605E 1428 0038                  		move.b	$38(a0),d2
00016062 3602                       		move.w	d2,d3
00016064 D643                       		add.w	d3,d3
00016066 43F8 D000                  		lea	($FFFFD000).w,a1
0001606A 3029 0008                  		move.w	8(a1),d0
0001606E 9068 0032                  		sub.w	$32(a0),d0
00016072 D042                       		add.w	d2,d0
00016074 B043                       		cmp.w	d3,d0
00016076 6400                       		bcc.s	loc_155A8
00016078 3229 000C                  		move.w	$C(a1),d1
0001607C 9268 0030                  		sub.w	$30(a0),d1
00016080 D242                       		add.w	d2,d1
00016082 B243                       		cmp.w	d3,d1
00016084 6400                       		bcc.s	loc_155A8
00016086 0829 0001 0022             		btst	#1,$22(a1)
0001608C 6700                       		beq.s	loc_155B8
0001608E 4228 003A                  		clr.b	$3A(a0)
00016092 4E75                       		rts	
00016094                            ; ===========================================================================
00016094                            
00016094                            loc_155A8:
00016094 4A28 003A                  		tst.b	$3A(a0)
00016098 6700                       		beq.s	locret_155B6
0001609A 4229 0038                  		clr.b	$38(a1)
0001609E 4228 003A                  		clr.b	$3A(a0)
000160A2                            
000160A2                            locret_155B6:
000160A2 4E75                       		rts	
000160A4                            ; ===========================================================================
000160A4                            
000160A4                            loc_155B8:
000160A4 4A28 003A                  		tst.b	$3A(a0)
000160A8 6600                       		bne.s	loc_155E2
000160AA 117C 0001 003A             		move.b	#1,$3A(a0)
000160B0 0829 0002 0022             		btst	#2,$22(a1)
000160B6 6600                       		bne.s	loc_155D0
000160B8 4229 001C                  		clr.b	$1C(a1)
000160BC                            
000160BC                            loc_155D0:
000160BC 08A9 0005 0022             		bclr	#5,$22(a1)
000160C2 137C 0001 001D             		move.b	#1,$1D(a1)
000160C8 137C 0001 0038             		move.b	#1,$38(a1)
000160CE                            
000160CE                            loc_155E2:
000160CE 3029 0014                  		move.w	$14(a1),d0
000160D2 4A68 0036                  		tst.w	$36(a0)
000160D6 6A00                       		bpl.s	loc_15608
000160D8 0C40 FC00                  		cmpi.w	#-$400,d0
000160DC 6F00                       		ble.s	loc_155FA
000160DE 337C FC00 0014             		move.w	#-$400,$14(a1)
000160E4 4E75                       		rts	
000160E6                            ; ===========================================================================
000160E6                            
000160E6                            loc_155FA:
000160E6 0C40 F100                  		cmpi.w	#-$F00,d0
000160EA 6C00                       		bge.s	locret_15606
000160EC 337C F100 0014             		move.w	#-$F00,$14(a1)
000160F2                            
000160F2                            locret_15606:
000160F2 4E75                       		rts	
000160F4                            ; ===========================================================================
000160F4                            
000160F4                            loc_15608:
000160F4 0C40 0400                  		cmpi.w	#$400,d0
000160F8 6C00                       		bge.s	loc_15616
000160FA 337C 0400 0014             		move.w	#$400,$14(a1)
00016100 4E75                       		rts	
00016102                            ; ===========================================================================
00016102                            
00016102                            loc_15616:
00016102 0C40 0F00                  		cmpi.w	#$F00,d0
00016106 6F00                       		ble.s	locret_15622
00016108 337C 0F00 0014             		move.w	#$F00,$14(a1)
0001610E                            
0001610E                            locret_15622:
0001610E 4E75                       		rts	
00016110                            ; ===========================================================================
00016110                            
00016110                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016110 3028 0036                  		move.w	$36(a0),d0
00016114 D168 0026                  		add.w	d0,$26(a0)
00016118 1028 0026                  		move.b	$26(a0),d0
0001611C 4EB9 0000 2D28             		jsr	(CalcSine).l
00016122 3428 0030                  		move.w	$30(a0),d2
00016126 3628 0032                  		move.w	$32(a0),d3
0001612A 7800                       		moveq	#0,d4
0001612C 1828 0034                  		move.b	$34(a0),d4
00016130 E14C                       		lsl.w	#8,d4
00016132 2A04                       		move.l	d4,d5
00016134 C9C0                       		muls.w	d0,d4
00016136 4844                       		swap	d4
00016138 CBC1                       		muls.w	d1,d5
0001613A 4845                       		swap	d5
0001613C D842                       		add.w	d2,d4
0001613E DA43                       		add.w	d3,d5
00016140 3144 000C                  		move.w	d4,$C(a0)
00016144 3145 0008                  		move.w	d5,8(a0)
00016148 4E75                       		rts	
0001614A                            ; ===========================================================================
0001614A                            
0001614A                            Obj67_ChkDel:				; XREF: Obj67_Action
0001614A 3028 0032                  		move.w	$32(a0),d0
0001614E 0240 FF80                  		andi.w	#-$80,d0
00016152 3238 F700                  		move.w	($FFFFF700).w,d1
00016156 0441 0080                  		subi.w	#$80,d1
0001615A 0241 FF80                  		andi.w	#-$80,d1
0001615E 9041                       		sub.w	d1,d0
00016160 0C40 0280                  		cmpi.w	#$280,d0
00016164 6200                       		bhi.s	Obj67_Delete
00016166 4EF9 0000 DFF6             		jmp	DisplaySprite
0001616C                            ; ===========================================================================
0001616C                            
0001616C                            Obj67_Delete:
0001616C 4EF9 0000 E032             		jmp	DeleteObject
00016172                            ; ===========================================================================
00016172                            ; ---------------------------------------------------------------------------
00016172                            ; Sprite mappings - disc that you run around (SBZ)
00016172                            ; (It's just a small blob that moves around in a circle. The disc itself is
00016172                            ; part of the level tiles.)
00016172                            ; ---------------------------------------------------------------------------
00016172                            Map_obj67:
00016172                            	include "_maps\obj67.asm"
00016172                            ; ---------------------------------------------------------------------------
00016172                            ; Sprite mappings - disc that you run around (SBZ)
00016172                            ; (It's just a small blob that moves around in a circle. The disc itself is
00016172                            ; part of the level tiles.)
00016172                            ; ---------------------------------------------------------------------------
00016172 0000                       		dc.w byte_15688-Map_obj67
00016174 01                         byte_15688:	dc.b 1
00016175 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001617A                            		even
0001617A                            		even
0001617A                            
0001617A                            ; ===========================================================================
0001617A                            ; ---------------------------------------------------------------------------
0001617A                            ; Object 68 - conveyor belts (SBZ)
0001617A                            ; ---------------------------------------------------------------------------
0001617A                            
0001617A                            Obj68:					; XREF: Obj_Index
0001617A 7000                       		moveq	#0,d0
0001617C 1028 0024                  		move.b	$24(a0),d0
00016180 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00016184 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00016188                            ; ===========================================================================
00016188 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001618A 0000                       		dc.w Obj68_Action-Obj68_Index
0001618C                            ; ===========================================================================
0001618C                            
0001618C                            Obj68_Main:				; XREF: Obj68_Index
0001618C 5428 0024                  		addq.b	#2,$24(a0)
00016190 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00016196 1228 0028                  		move.b	$28(a0),d1	; get object type
0001619A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001619E 6700                       		beq.s	loc_156BA	; if zero, branch
000161A0 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000161A6                            
000161A6                            loc_156BA:
000161A6 1228 0028                  		move.b	$28(a0),d1	; get object type
000161AA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000161AE 4881                       		ext.w	d1
000161B0 E841                       		asr.w	#4,d1
000161B2 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000161B6                            
000161B6                            Obj68_Action:				; XREF: Obj68_Index
000161B6 6100                       		bsr.s	Obj68_MoveSonic
000161B8 3028 0008                  		move.w	8(a0),d0
000161BC 0240 FF80                  		andi.w	#$FF80,d0
000161C0 3238 F700                  		move.w	($FFFFF700).w,d1
000161C4 0441 0080                  		subi.w	#$80,d1
000161C8 0241 FF80                  		andi.w	#$FF80,d1
000161CC 9041                       		sub.w	d1,d0
000161CE 0C40 0280                  		cmpi.w	#$280,d0
000161D2 6200                       		bhi.s	Obj68_Delete
000161D4 4E75                       		rts	
000161D6                            ; ===========================================================================
000161D6                            
000161D6                            Obj68_Delete:
000161D6 4EF9 0000 E032             		jmp	DeleteObject
000161DC                            ; ===========================================================================
000161DC                            
000161DC                            Obj68_MoveSonic:			; XREF: Obj68_Action
000161DC 7400                       		moveq	#0,d2
000161DE 1428 0038                  		move.b	$38(a0),d2
000161E2 3602                       		move.w	d2,d3
000161E4 D643                       		add.w	d3,d3
000161E6 43F8 D000                  		lea	($FFFFD000).w,a1
000161EA 3029 0008                  		move.w	8(a1),d0
000161EE 9068 0008                  		sub.w	8(a0),d0
000161F2 D042                       		add.w	d2,d0
000161F4 B043                       		cmp.w	d3,d0
000161F6 6400                       		bcc.s	locret_1572E
000161F8 3229 000C                  		move.w	$C(a1),d1
000161FC 9268 000C                  		sub.w	$C(a0),d1
00016200 0641 0030                  		addi.w	#$30,d1
00016204 0C41 0030                  		cmpi.w	#$30,d1
00016208 6400                       		bcc.s	locret_1572E
0001620A 0829 0001 0022             		btst	#1,$22(a1)
00016210 6600                       		bne.s	locret_1572E
00016212 3028 0036                  		move.w	$36(a0),d0
00016216 D169 0008                  		add.w	d0,8(a1)
0001621A                            
0001621A                            locret_1572E:
0001621A 4E75                       		rts	
0001621C                            
0001621C                            ; ===========================================================================
0001621C                            ; ---------------------------------------------------------------------------
0001621C                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001621C                            ; ---------------------------------------------------------------------------
0001621C                            
0001621C                            Obj69:					; XREF: Obj_Index
0001621C 7000                       		moveq	#0,d0
0001621E 1028 0024                  		move.b	$24(a0),d0
00016222 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00016226 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001622A                            ; ===========================================================================
0001622A 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001622C 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001622E 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016230                            ; ===========================================================================
00016230                            
00016230                            Obj69_Main:				; XREF: Obj69_Index
00016230 5428 0024                  		addq.b	#2,$24(a0)
00016234 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001623C 317C 4492 0002             		move.w	#$4492,2(a0)
00016242 0028 0004 0001             		ori.b	#4,1(a0)
00016248 117C 0080 0019             		move.b	#$80,$19(a0)
0001624E 7000                       		moveq	#0,d0
00016250 1028 0028                  		move.b	$28(a0),d0
00016254 0240 000F                  		andi.w	#$F,d0
00016258 C0FC 003C                  		mulu.w	#$3C,d0
0001625C 3140 0032                  		move.w	d0,$32(a0)
00016260 4A28 0028                  		tst.b	$28(a0)
00016264 6A00                       		bpl.s	Obj69_Trapdoor
00016266 5428 0024                  		addq.b	#2,$24(a0)
0001626A 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00016272 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016278 117C 0010 0019             		move.b	#$10,$19(a0)
0001627E 117C 0002 001C             		move.b	#2,$1C(a0)
00016284 7000                       		moveq	#0,d0
00016286 1028 0028                  		move.b	$28(a0),d0	; get object type
0001628A 3200                       		move.w	d0,d1
0001628C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016290 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016294 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00016298 3140 0032                  		move.w	d0,$32(a0)
0001629C 0241 0070                  		andi.w	#$70,d1
000162A0 0641 0010                  		addi.w	#$10,d1
000162A4 E549                       		lsl.w	#2,d1
000162A6 5341                       		subq.w	#1,d1
000162A8 3141 0036                  		move.w	d1,$36(a0)
000162AC 6000                       		bra.s	Obj69_Spinner
000162AE                            ; ===========================================================================
000162AE                            
000162AE                            Obj69_Trapdoor:				; XREF: Obj69_Index
000162AE 5368 0030                  		subq.w	#1,$30(a0)
000162B2 6A00                       		bpl.s	Obj69_Animate
000162B4 3168 0032 0030             		move.w	$32(a0),$30(a0)
000162BA 0868 0000 001C             		bchg	#0,$1C(a0)
000162C0 4A28 0001                  		tst.b	1(a0)
000162C4 6A00                       		bpl.s	Obj69_Animate
000162C6 303C 00BB                  		move.w	#$BB,d0
000162CA 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play door sound
000162D0                            
000162D0                            Obj69_Animate:
000162D0 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000162D6 4EB9 0000 B04C             		jsr	AnimateSprite
000162DC 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000162E0 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000162E2 323C 004B                  		move.w	#$4B,d1
000162E6 343C 000C                  		move.w	#$C,d2
000162EA 3602                       		move.w	d2,d3
000162EC 5243                       		addq.w	#1,d3
000162EE 3828 0008                  		move.w	8(a0),d4
000162F2 6100 A0D2                  		bsr.w	SolidObject
000162F6 6000 9DA6                  		bra.w	MarkObjGone
000162FA                            ; ===========================================================================
000162FA                            
000162FA                            Obj69_NotSolid:
000162FA 0828 0003 0022             		btst	#3,$22(a0)
00016300 6700                       		beq.s	Obj69_Display
00016302 43F8 D000                  		lea	($FFFFD000).w,a1
00016306 08A9 0003 0022             		bclr	#3,$22(a1)
0001630C 08A8 0003 0022             		bclr	#3,$22(a0)
00016312 4228 0025                  		clr.b	$25(a0)
00016316                            
00016316                            Obj69_Display:
00016316 6000 9D86                  		bra.w	MarkObjGone
0001631A                            ; ===========================================================================
0001631A                            
0001631A                            Obj69_Spinner:				; XREF: Obj69_Index
0001631A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001631E C068 0036                  		and.w	$36(a0),d0
00016322 6600                       		bne.s	Obj69_Delay
00016324 117C 0001 0034             		move.b	#1,$34(a0)
0001632A                            
0001632A                            Obj69_Delay:
0001632A 4A28 0034                  		tst.b	$34(a0)
0001632E 6700                       		beq.s	Obj69_Animate2
00016330 5368 0030                  		subq.w	#1,$30(a0)
00016334 6A00                       		bpl.s	Obj69_Animate2
00016336 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001633C 4228 0034                  		clr.b	$34(a0)
00016340 0868 0000 001C             		bchg	#0,$1C(a0)
00016346                            
00016346                            Obj69_Animate2:
00016346 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001634C 4EB9 0000 B04C             		jsr	AnimateSprite
00016352 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00016356 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00016358 323C 001B                  		move.w	#$1B,d1
0001635C 343C 0007                  		move.w	#7,d2
00016360 3602                       		move.w	d2,d3
00016362 5243                       		addq.w	#1,d3
00016364 3828 0008                  		move.w	8(a0),d4
00016368 6100 A05C                  		bsr.w	SolidObject
0001636C 6000 9D30                  		bra.w	MarkObjGone
00016370                            ; ===========================================================================
00016370                            
00016370                            Obj69_NotSolid2:
00016370 0828 0003 0022             		btst	#3,$22(a0)
00016376 6700                       		beq.s	Obj69_Display2
00016378 43F8 D000                  		lea	($FFFFD000).w,a1
0001637C 08A9 0003 0022             		bclr	#3,$22(a1)
00016382 08A8 0003 0022             		bclr	#3,$22(a0)
00016388 4228 0025                  		clr.b	$25(a0)
0001638C                            
0001638C                            Obj69_Display2:
0001638C 6000 9D10                  		bra.w	MarkObjGone
00016390                            ; ===========================================================================
00016390                            Ani_obj69:
00016390                            	include "_anim\obj69.asm"
00016390                            ; ---------------------------------------------------------------------------
00016390                            ; Animation script - trapdoor (SBZ)
00016390                            ; ---------------------------------------------------------------------------
00016390 0000                       		dc.w byte_158AC-Ani_obj69
00016392 0000                       		dc.w byte_158B2-Ani_obj69
00016394 0000                       		dc.w byte_158B8-Ani_obj69
00016396 0000                       		dc.w byte_158CC-Ani_obj69
00016398 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001639E 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000163A4 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163B1 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000163B8 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163C5 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000163CC                            		even
000163CC                            		even
000163CC                            
000163CC                            ; ---------------------------------------------------------------------------
000163CC                            ; Sprite mappings - trapdoor (SBZ)
000163CC                            ; ---------------------------------------------------------------------------
000163CC                            Map_obj69:
000163CC                            	include "_maps\obj69.asm"
000163CC                            ; ---------------------------------------------------------------------------
000163CC                            ; Sprite mappings - trapdoor (SBZ)
000163CC                            ; ---------------------------------------------------------------------------
000163CC 0000                       		dc.w byte_158E6-Map_obj69
000163CE 0000                       		dc.w byte_158FB-Map_obj69
000163D0 0000                       		dc.w byte_15924-Map_obj69
000163D2 04                         byte_158E6:	dc.b 4
000163D3 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000163D8 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000163DD F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000163E2 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000163E7 08                         byte_158FB:	dc.b 8
000163E8 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000163ED 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000163F2 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000163F7 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000163FC F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016401 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016406 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001640B 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016410 04                         byte_15924:	dc.b 4
00016411 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016416 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001641B 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016420 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016426 00                         		even
00016426 00                         		even
00016426                            
00016426                            ; ---------------------------------------------------------------------------
00016426                            ; Sprite mappings - spinning platforms (SBZ)
00016426                            ; ---------------------------------------------------------------------------
00016426                            Map_obj69a:
00016426                            	include "_maps\obj69a.asm"
00016426                            ; ---------------------------------------------------------------------------
00016426                            ; Sprite mappings - spinning platforms (SBZ)
00016426                            ; ---------------------------------------------------------------------------
00016426 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001642A 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0001642E 0000                       		dc.w byte_15970-Map_obj69a
00016430 02                         byte_15944:	dc.b 2
00016431 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016436 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001643B 02                         byte_1594F:	dc.b 2
0001643C F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016441 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016446 02                         byte_1595A:	dc.b 2
00016447 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001644C 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016451 02                         byte_15965:	dc.b 2
00016452 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016457 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001645C 02                         byte_15970:	dc.b 2
0001645D F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016462 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00016468 00                         		even
00016468 00                         		even
00016468                            
00016468                            ; ===========================================================================
00016468                            ; ---------------------------------------------------------------------------
00016468                            ; Object 6A - ground saws and pizza cutters (SBZ)
00016468                            ; ---------------------------------------------------------------------------
00016468                            
00016468                            Obj6A:					; XREF: Obj_Index
00016468 7000                       		moveq	#0,d0
0001646A 1028 0024                  		move.b	$24(a0),d0
0001646E 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016472 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016476                            ; ===========================================================================
00016476 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00016478 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001647A                            ; ===========================================================================
0001647A                            
0001647A                            Obj6A_Main:				; XREF: Obj6A_Index
0001647A 5428 0024                  		addq.b	#2,$24(a0)
0001647E 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016486 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001648C 117C 0004 0001             		move.b	#4,1(a0)
00016492 117C 0004 0018             		move.b	#4,$18(a0)
00016498 117C 0020 0019             		move.b	#$20,$19(a0)
0001649E 3168 0008 003A             		move.w	8(a0),$3A(a0)
000164A4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000164AA 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000164B0 6400                       		bcc.s	Obj6A_Action
000164B2 117C 00A2 0020             		move.b	#$A2,$20(a0)
000164B8                            
000164B8                            Obj6A_Action:				; XREF: Obj6A_Index
000164B8 7000                       		moveq	#0,d0
000164BA 1028 0028                  		move.b	$28(a0),d0
000164BE 0240 0007                  		andi.w	#7,d0
000164C2 D040                       		add.w	d0,d0
000164C4 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000164C8 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000164CC 3028 003A                  		move.w	$3A(a0),d0
000164D0 0240 FF80                  		andi.w	#$FF80,d0
000164D4 3238 F700                  		move.w	($FFFFF700).w,d1
000164D8 0441 0080                  		subi.w	#$80,d1
000164DC 0241 FF80                  		andi.w	#$FF80,d1
000164E0 9041                       		sub.w	d1,d0
000164E2 0C40 0280                  		cmpi.w	#$280,d0
000164E6 6200                       		bhi.s	Obj6A_Delete
000164E8 4EF9 0000 DFF6             		jmp	DisplaySprite
000164EE                            ; ===========================================================================
000164EE                            
000164EE                            Obj6A_Delete:
000164EE 4EF9 0000 E032             		jmp	DeleteObject
000164F4                            ; ===========================================================================
000164F4 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000164F8 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000164FC 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000164FE                            ; ===========================================================================
000164FE                            
000164FE                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000164FE 4E75                       		rts	
00016500                            ; ===========================================================================
00016500                            
00016500                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016500 323C 0060                  		move.w	#$60,d1
00016504 7000                       		moveq	#0,d0
00016506 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001650A 0828 0000 0022             		btst	#0,$22(a0)
00016510 6700                       		beq.s	Obj6A_Animate01
00016512 4440                       		neg.w	d0
00016514 D041                       		add.w	d1,d0
00016516                            
00016516                            Obj6A_Animate01:
00016516 3228 003A                  		move.w	$3A(a0),d1
0001651A 9240                       		sub.w	d0,d1
0001651C 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016520 5328 001E                  		subq.b	#1,$1E(a0)
00016524 6A00                       		bpl.s	loc_15A46
00016526 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001652C 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016532                            
00016532                            loc_15A46:
00016532 4A28 0001                  		tst.b	1(a0)
00016536 6A00                       		bpl.s	locret_15A60
00016538 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001653C 0240 000F                  		andi.w	#$F,d0
00016540 6600                       		bne.s	locret_15A60
00016542 303C 00B0                  		move.w	#$B0,d0
00016546 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play saw sound
0001654C                            
0001654C                            locret_15A60:
0001654C 4E75                       		rts	
0001654E                            ; ===========================================================================
0001654E                            
0001654E                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001654E 323C 0030                  		move.w	#$30,d1
00016552 7000                       		moveq	#0,d0
00016554 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016558 0828 0000 0022             		btst	#0,$22(a0)
0001655E 6700                       		beq.s	Obj6A_Animate02
00016560 4440                       		neg.w	d0
00016562 0640 0080                  		addi.w	#$80,d0
00016566                            
00016566                            Obj6A_Animate02:
00016566 3228 0038                  		move.w	$38(a0),d1
0001656A 9240                       		sub.w	d0,d1
0001656C 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016570 5328 001E                  		subq.b	#1,$1E(a0)
00016574 6A00                       		bpl.s	loc_15A96
00016576 117C 0002 001E             		move.b	#2,$1E(a0)
0001657C 0868 0000 001A             		bchg	#0,$1A(a0)
00016582                            
00016582                            loc_15A96:
00016582 4A28 0001                  		tst.b	1(a0)
00016586 6A00                       		bpl.s	locret_15AB0
00016588 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001658C 0C00 0018                  		cmpi.b	#$18,d0
00016590 6600                       		bne.s	locret_15AB0
00016592 303C 00B0                  		move.w	#$B0,d0
00016596 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play saw sound
0001659C                            
0001659C                            locret_15AB0:
0001659C 4E75                       		rts	
0001659E                            ; ===========================================================================
0001659E                            
0001659E                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001659E 4A28 003D                  		tst.b	$3D(a0)
000165A2 6600                       		bne.s	Obj6A_Animate03
000165A4 3038 D008                  		move.w	($FFFFD008).w,d0
000165A8 0440 00C0                  		subi.w	#$C0,d0
000165AC 6500                       		bcs.s	loc_15B02
000165AE 9068 0008                  		sub.w	8(a0),d0
000165B2 6500                       		bcs.s	loc_15B02
000165B4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000165B8 0440 0080                  		subi.w	#$80,d0
000165BC B068 000C                  		cmp.w	$C(a0),d0
000165C0 6400                       		bcc.s	locret_15B04
000165C2 0640 0100                  		addi.w	#$100,d0
000165C6 B068 000C                  		cmp.w	$C(a0),d0
000165CA 6500                       		bcs.s	locret_15B04
000165CC 117C 0001 003D             		move.b	#1,$3D(a0)
000165D2 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000165D8 117C 00A2 0020             		move.b	#$A2,$20(a0)
000165DE 117C 0002 001A             		move.b	#2,$1A(a0)
000165E4 303C 00B0                  		move.w	#$B0,d0
000165E8 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play saw sound
000165EE                            
000165EE                            loc_15B02:
000165EE 588F                       		addq.l	#4,sp
000165F0                            
000165F0                            locret_15B04:
000165F0 4E75                       		rts	
000165F2                            ; ===========================================================================
000165F2                            
000165F2                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000165F2 4EB9 0000 DFD0             		jsr	SpeedToPos
000165F8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000165FE 5328 001E                  		subq.b	#1,$1E(a0)
00016602 6A00                       		bpl.s	locret_15B24
00016604 117C 0002 001E             		move.b	#2,$1E(a0)
0001660A 0868 0000 001A             		bchg	#0,$1A(a0)
00016610                            
00016610                            locret_15B24:
00016610 4E75                       		rts	
00016612                            ; ===========================================================================
00016612                            
00016612                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016612 4A28 003D                  		tst.b	$3D(a0)
00016616 6600                       		bne.s	Obj6A_Animate04
00016618 3038 D008                  		move.w	($FFFFD008).w,d0
0001661C 0640 00E0                  		addi.w	#$E0,d0
00016620 9068 0008                  		sub.w	8(a0),d0
00016624 6400                       		bcc.s	loc_15B74
00016626 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001662A 0440 0080                  		subi.w	#$80,d0
0001662E B068 000C                  		cmp.w	$C(a0),d0
00016632 6400                       		bcc.s	locret_15B76
00016634 0640 0100                  		addi.w	#$100,d0
00016638 B068 000C                  		cmp.w	$C(a0),d0
0001663C 6500                       		bcs.s	locret_15B76
0001663E 117C 0001 003D             		move.b	#1,$3D(a0)
00016644 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001664A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016650 117C 0002 001A             		move.b	#2,$1A(a0)
00016656 303C 00B0                  		move.w	#$B0,d0
0001665A 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play saw sound
00016660                            
00016660                            loc_15B74:
00016660 588F                       		addq.l	#4,sp
00016662                            
00016662                            locret_15B76:
00016662 4E75                       		rts	
00016664                            ; ===========================================================================
00016664                            
00016664                            Obj6A_Animate04:
00016664 4EB9 0000 DFD0             		jsr	SpeedToPos
0001666A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016670 5328 001E                  		subq.b	#1,$1E(a0)
00016674 6A00                       		bpl.s	locret_15B96
00016676 117C 0002 001E             		move.b	#2,$1E(a0)
0001667C 0868 0000 001A             		bchg	#0,$1A(a0)
00016682                            
00016682                            locret_15B96:
00016682 4E75                       		rts	
00016684                            ; ===========================================================================
00016684                            ; ---------------------------------------------------------------------------
00016684                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016684                            ; ---------------------------------------------------------------------------
00016684                            Map_obj6A:
00016684                            	include "_maps\obj6A.asm"
00016684                            ; ---------------------------------------------------------------------------
00016684                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016684                            ; ---------------------------------------------------------------------------
00016684 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016688 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001668C 07                         byte_15BA0:	dc.b 7
0001668D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016692 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016697 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001669C E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000166A1 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000166A6 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000166AB 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000166B0 07                         byte_15BC4:	dc.b 7
000166B1 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000166B6 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000166BB E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000166C0 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000166C5 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000166CA 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000166CF 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000166D4 04                         byte_15BE8:	dc.b 4
000166D5 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000166DA E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000166DF 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000166E4 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000166E9 04                         byte_15BFD:	dc.b 4
000166EA E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000166EF E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000166F4 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000166F9 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000166FE                            		even
000166FE                            		even
000166FE                            
000166FE                            ; ===========================================================================
000166FE                            ; ---------------------------------------------------------------------------
000166FE                            ; Object 6B - stomper (SBZ)
000166FE                            ; ---------------------------------------------------------------------------
000166FE                            
000166FE                            Obj6B:					; XREF: Obj_Index
000166FE 7000                       		moveq	#0,d0
00016700 1028 0024                  		move.b	$24(a0),d0
00016704 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016708 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001670C                            ; ===========================================================================
0001670C 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
0001670E 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016710                            
00016710 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016714 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016718 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001671C 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016720 8040 0005                  		dc.b  $80, $40,	  0,   5
00016724                            ; ===========================================================================
00016724                            
00016724                            Obj6B_Main:				; XREF: Obj6B_Index
00016724 5428 0024                  		addq.b	#2,$24(a0)
00016728 7000                       		moveq	#0,d0
0001672A 1028 0028                  		move.b	$28(a0),d0
0001672E E448                       		lsr.w	#2,d0
00016730 0240 001C                  		andi.w	#$1C,d0
00016734 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016738 115B 0019                  		move.b	(a3)+,$19(a0)
0001673C 115B 0016                  		move.b	(a3)+,$16(a0)
00016740 E448                       		lsr.w	#2,d0
00016742 1140 001A                  		move.b	d0,$1A(a0)
00016746 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001674E 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016754 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001675A 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001675C 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016762 6700                       		beq.s	Obj6B_SBZ3
00016764                            
00016764                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016764 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016768 7000                       		moveq	#0,d0
0001676A 1028 0023                  		move.b	$23(a0),d0
0001676E 6700                       		beq.s	Obj6B_Delete
00016770 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016776                            
00016776                            Obj6B_Delete:
00016776 4EF9 0000 E032             		jmp	DeleteObject
0001677C                            ; ===========================================================================
0001677C                            
0001677C                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001677C 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016782 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016788 6600                       		bne.s	Obj6B_SBZ12
0001678A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001678E 7000                       		moveq	#0,d0
00016790 1028 0023                  		move.b	$23(a0),d0
00016794 6700                       		beq.s	Obj6B_SBZ12
00016796 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001679C 6700                       		beq.s	Obj6B_SBZ12
0001679E 4238 F7CB                  		clr.b	($FFFFF7CB).w
000167A2 60C0                       		bra.s	Obj6B_ChkGone
000167A4                            ; ===========================================================================
000167A4                            
000167A4                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000167A4 0028 0004 0001             		ori.b	#4,1(a0)
000167AA 117C 0004 0018             		move.b	#4,$18(a0)
000167B0 3168 0008 0034             		move.w	8(a0),$34(a0)
000167B6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000167BC 7000                       		moveq	#0,d0
000167BE 101B                       		move.b	(a3)+,d0
000167C0 3140 003C                  		move.w	d0,$3C(a0)
000167C4 7000                       		moveq	#0,d0
000167C6 1028 0028                  		move.b	$28(a0),d0
000167CA 6A00                       		bpl.s	Obj6B_Action
000167CC 0200 000F                  		andi.b	#$F,d0
000167D0 1140 003E                  		move.b	d0,$3E(a0)
000167D4 1153 0028                  		move.b	(a3),$28(a0)
000167D8 0C13 0005                  		cmpi.b	#5,(a3)
000167DC 6600                       		bne.s	Obj6B_ChkGone2
000167DE 08E8 0004 0001             		bset	#4,1(a0)
000167E4                            
000167E4                            Obj6B_ChkGone2:
000167E4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167E8 7000                       		moveq	#0,d0
000167EA 1028 0023                  		move.b	$23(a0),d0
000167EE 6700                       		beq.s	Obj6B_Action
000167F0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000167F6                            
000167F6                            Obj6B_Action:				; XREF: Obj6B_Index
000167F6 3F28 0008                  		move.w	8(a0),-(sp)
000167FA 7000                       		moveq	#0,d0
000167FC 1028 0028                  		move.b	$28(a0),d0
00016800 0240 000F                  		andi.w	#$F,d0
00016804 D040                       		add.w	d0,d0
00016806 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
0001680A 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
0001680E 381F                       		move.w	(sp)+,d4
00016810 4A28 0001                  		tst.b	1(a0)
00016814 6A00                       		bpl.s	Obj6B_ChkDel
00016816 7200                       		moveq	#0,d1
00016818 1228 0019                  		move.b	$19(a0),d1
0001681C 0641 000B                  		addi.w	#$B,d1
00016820 7400                       		moveq	#0,d2
00016822 1428 0016                  		move.b	$16(a0),d2
00016826 3602                       		move.w	d2,d3
00016828 5243                       		addq.w	#1,d3
0001682A 6100 9B9A                  		bsr.w	SolidObject
0001682E                            
0001682E                            Obj6B_ChkDel:
0001682E 3028 0034                  		move.w	$34(a0),d0
00016832 0240 FF80                  		andi.w	#$FF80,d0
00016836 3238 F700                  		move.w	($FFFFF700).w,d1
0001683A 0441 0080                  		subi.w	#$80,d1
0001683E 0241 FF80                  		andi.w	#$FF80,d1
00016842 9041                       		sub.w	d1,d0
00016844 0C40 0280                  		cmpi.w	#$280,d0
00016848 6200                       		bhi.s	loc_15D64
0001684A 4EF9 0000 DFF6             		jmp	DisplaySprite
00016850                            ; ===========================================================================
00016850                            
00016850                            loc_15D64:
00016850 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016856 6600                       		bne.s	Obj6B_Delete2
00016858 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001685C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016860 7000                       		moveq	#0,d0
00016862 1028 0023                  		move.b	$23(a0),d0
00016866 6700                       		beq.s	Obj6B_Delete2
00016868 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001686E                            
0001686E                            Obj6B_Delete2:
0001686E 4EF9 0000 E032             		jmp	DeleteObject
00016874                            ; ===========================================================================
00016874 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016878 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001687C 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016880                            ; ===========================================================================
00016880                            
00016880                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016880 4E75                       		rts	
00016882                            ; ===========================================================================
00016882                            
00016882                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016882 4A28 0038                  		tst.b	$38(a0)
00016886 6600                       		bne.s	loc_15DB4
00016888 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001688C 7000                       		moveq	#0,d0
0001688E 1028 003E                  		move.b	$3E(a0),d0
00016892 0832 0000 0000             		btst	#0,(a2,d0.w)
00016898 6700                       		beq.s	loc_15DC2
0001689A 117C 0001 0038             		move.b	#1,$38(a0)
000168A0                            
000168A0                            loc_15DB4:
000168A0 3028 003C                  		move.w	$3C(a0),d0
000168A4 B068 003A                  		cmp.w	$3A(a0),d0
000168A8 6700                       		beq.s	loc_15DE0
000168AA 5468 003A                  		addq.w	#2,$3A(a0)
000168AE                            
000168AE                            loc_15DC2:
000168AE 3028 003A                  		move.w	$3A(a0),d0
000168B2 0828 0000 0022             		btst	#0,$22(a0)
000168B8 6700                       		beq.s	loc_15DD4
000168BA 4440                       		neg.w	d0
000168BC 0640 0080                  		addi.w	#$80,d0
000168C0                            
000168C0                            loc_15DD4:
000168C0 3228 0034                  		move.w	$34(a0),d1
000168C4 9240                       		sub.w	d0,d1
000168C6 3141 0008                  		move.w	d1,8(a0)
000168CA 4E75                       		rts	
000168CC                            ; ===========================================================================
000168CC                            
000168CC                            loc_15DE0:
000168CC 5228 0028                  		addq.b	#1,$28(a0)
000168D0 317C 00B4 0036             		move.w	#$B4,$36(a0)
000168D6 4228 0038                  		clr.b	$38(a0)
000168DA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000168DE 7000                       		moveq	#0,d0
000168E0 1028 0023                  		move.b	$23(a0),d0
000168E4 67C8                       		beq.s	loc_15DC2
000168E6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000168EC 60C0                       		bra.s	loc_15DC2
000168EE                            ; ===========================================================================
000168EE                            
000168EE                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000168EE 4A28 0038                  		tst.b	$38(a0)
000168F2 6600                       		bne.s	loc_15E14
000168F4 5368 0036                  		subq.w	#1,$36(a0)
000168F8 6600                       		bne.s	loc_15E1E
000168FA 117C 0001 0038             		move.b	#1,$38(a0)
00016900                            
00016900                            loc_15E14:
00016900 4A68 003A                  		tst.w	$3A(a0)
00016904 6700                       		beq.s	loc_15E3C
00016906 5568 003A                  		subq.w	#2,$3A(a0)
0001690A                            
0001690A                            loc_15E1E:
0001690A 3028 003A                  		move.w	$3A(a0),d0
0001690E 0828 0000 0022             		btst	#0,$22(a0)
00016914 6700                       		beq.s	loc_15E30
00016916 4440                       		neg.w	d0
00016918 0640 0080                  		addi.w	#$80,d0
0001691C                            
0001691C                            loc_15E30:
0001691C 3228 0034                  		move.w	$34(a0),d1
00016920 9240                       		sub.w	d0,d1
00016922 3141 0008                  		move.w	d1,8(a0)
00016926 4E75                       		rts	
00016928                            ; ===========================================================================
00016928                            
00016928                            loc_15E3C:
00016928 5328 0028                  		subq.b	#1,$28(a0)
0001692C 4228 0038                  		clr.b	$38(a0)
00016930 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016934 7000                       		moveq	#0,d0
00016936 1028 0023                  		move.b	$23(a0),d0
0001693A 67CE                       		beq.s	loc_15E1E
0001693C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016942 60C6                       		bra.s	loc_15E1E
00016944                            ; ===========================================================================
00016944                            
00016944                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016944 4A28 0038                  		tst.b	$38(a0)
00016948 6600                       		bne.s	loc_15E7C
0001694A 4A68 003A                  		tst.w	$3A(a0)
0001694E 6700                       		beq.s	loc_15E6A
00016950 5368 003A                  		subq.w	#1,$3A(a0)
00016954 6000                       		bra.s	loc_15E8E
00016956                            ; ===========================================================================
00016956                            
00016956                            loc_15E6A:
00016956 5368 0036                  		subq.w	#1,$36(a0)
0001695A 6A00                       		bpl.s	loc_15E8E
0001695C 317C 003C 0036             		move.w	#$3C,$36(a0)
00016962 117C 0001 0038             		move.b	#1,$38(a0)
00016968                            
00016968                            loc_15E7C:
00016968 5068 003A                  		addq.w	#8,$3A(a0)
0001696C 3028 003A                  		move.w	$3A(a0),d0
00016970 B068 003C                  		cmp.w	$3C(a0),d0
00016974 6600                       		bne.s	loc_15E8E
00016976 4228 0038                  		clr.b	$38(a0)
0001697A                            
0001697A                            loc_15E8E:
0001697A 3028 003A                  		move.w	$3A(a0),d0
0001697E 0828 0000 0022             		btst	#0,$22(a0)
00016984 6700                       		beq.s	loc_15EA0
00016986 4440                       		neg.w	d0
00016988 0640 0038                  		addi.w	#$38,d0
0001698C                            
0001698C                            loc_15EA0:
0001698C 3228 0030                  		move.w	$30(a0),d1
00016990 D240                       		add.w	d0,d1
00016992 3141 000C                  		move.w	d1,$C(a0)
00016996 4E75                       		rts	
00016998                            ; ===========================================================================
00016998                            
00016998                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016998 4A28 0038                  		tst.b	$38(a0)
0001699C 6600                       		bne.s	loc_15ED0
0001699E 4A68 003A                  		tst.w	$3A(a0)
000169A2 6700                       		beq.s	loc_15EBE
000169A4 5168 003A                  		subq.w	#8,$3A(a0)
000169A8 6000                       		bra.s	loc_15EF0
000169AA                            ; ===========================================================================
000169AA                            
000169AA                            loc_15EBE:
000169AA 5368 0036                  		subq.w	#1,$36(a0)
000169AE 6A00                       		bpl.s	loc_15EF0
000169B0 317C 003C 0036             		move.w	#$3C,$36(a0)
000169B6 117C 0001 0038             		move.b	#1,$38(a0)
000169BC                            
000169BC                            loc_15ED0:
000169BC 3028 003A                  		move.w	$3A(a0),d0
000169C0 B068 003C                  		cmp.w	$3C(a0),d0
000169C4 6700                       		beq.s	loc_15EE0
000169C6 5068 003A                  		addq.w	#8,$3A(a0)
000169CA 6000                       		bra.s	loc_15EF0
000169CC                            ; ===========================================================================
000169CC                            
000169CC                            loc_15EE0:
000169CC 5368 0036                  		subq.w	#1,$36(a0)
000169D0 6A00                       		bpl.s	loc_15EF0
000169D2 317C 003C 0036             		move.w	#$3C,$36(a0)
000169D8 4228 0038                  		clr.b	$38(a0)
000169DC                            
000169DC                            loc_15EF0:
000169DC 3028 003A                  		move.w	$3A(a0),d0
000169E0 0828 0000 0022             		btst	#0,$22(a0)
000169E6 6700                       		beq.s	loc_15F02
000169E8 4440                       		neg.w	d0
000169EA 0640 0038                  		addi.w	#$38,d0
000169EE                            
000169EE                            loc_15F02:
000169EE 3228 0030                  		move.w	$30(a0),d1
000169F2 D240                       		add.w	d0,d1
000169F4 3141 000C                  		move.w	d1,$C(a0)
000169F8 4E75                       		rts	
000169FA                            ; ===========================================================================
000169FA                            
000169FA                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000169FA 4A28 0038                  		tst.b	$38(a0)
000169FE 6600                       		bne.s	loc_15F3E
00016A00 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016A04 7000                       		moveq	#0,d0
00016A06 1028 003E                  		move.b	$3E(a0),d0
00016A0A 0832 0000 0000             		btst	#0,(a2,d0.w)
00016A10 6700                       		beq.s	locret_15F5C
00016A12 117C 0001 0038             		move.b	#1,$38(a0)
00016A18 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A1C 7000                       		moveq	#0,d0
00016A1E 1028 0023                  		move.b	$23(a0),d0
00016A22 6700                       		beq.s	loc_15F3E
00016A24 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016A2A                            
00016A2A                            loc_15F3E:
00016A2A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016A32 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016A3A 3168 0008 0034             		move.w	8(a0),$34(a0)
00016A40 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016A46 6700                       		beq.s	loc_15F5E
00016A48                            
00016A48                            locret_15F5C:
00016A48 4E75                       		rts	
00016A4A                            ; ===========================================================================
00016A4A                            
00016A4A                            loc_15F5E:
00016A4A 4228 0028                  		clr.b	$28(a0)
00016A4E 4228 0038                  		clr.b	$38(a0)
00016A52 4E75                       		rts	
00016A54                            ; ===========================================================================
00016A54                            ; ---------------------------------------------------------------------------
00016A54                            ; Sprite mappings - stomper and	platforms (SBZ)
00016A54                            ; ---------------------------------------------------------------------------
00016A54                            Map_obj6B:
00016A54                            	include "_maps\obj6B.asm"
00016A54                            ; ---------------------------------------------------------------------------
00016A54                            ; Sprite mappings - stomper and	platforms (SBZ)
00016A54                            ; ---------------------------------------------------------------------------
00016A54 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016A58 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016A5C 0000                       		dc.w byte_15FB0-Map_obj6B
00016A5E 04                         byte_15F72:	dc.b 4
00016A5F F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016A64 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016A69 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016A6E F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016A73 08                         byte_15F87:	dc.b 8
00016A74 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016A79 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016A7E E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016A83 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016A88 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016A8D 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016A92 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016A97 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016A9C 0E                         byte_15FB0:	dc.b $E
00016A9D C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016AA2 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016AA7 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016AAC C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016AB1 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016AB6 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016ABB C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016AC0 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016AC5 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016ACA E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016ACF E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016AD4 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016AD9 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016ADE 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016AE4 00                         		even
00016AE4 00                         		even
00016AE4                            
00016AE4                            ; ===========================================================================
00016AE4                            ; ---------------------------------------------------------------------------
00016AE4                            ; Object 6C - vanishing	platforms (SBZ)
00016AE4                            ; ---------------------------------------------------------------------------
00016AE4                            
00016AE4                            Obj6C:					; XREF: Obj_Index
00016AE4 7000                       		moveq	#0,d0
00016AE6 1028 0024                  		move.b	$24(a0),d0
00016AEA 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016AEE 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016AF2                            ; ===========================================================================
00016AF2 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016AF4 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016AF6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016AF8 0000                       		dc.w loc_16068-Obj6C_Index
00016AFA                            ; ===========================================================================
00016AFA                            
00016AFA                            Obj6C_Main:				; XREF: Obj6C_Index
00016AFA 5C28 0024                  		addq.b	#6,$24(a0)
00016AFE 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016B06 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016B0C 0028 0004 0001             		ori.b	#4,1(a0)
00016B12 117C 0010 0019             		move.b	#$10,$19(a0)
00016B18 117C 0004 0018             		move.b	#4,$18(a0)
00016B1E 7000                       		moveq	#0,d0
00016B20 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B24 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016B28 5240                       		addq.w	#1,d0		; add 1
00016B2A EF48                       		lsl.w	#7,d0		; multiply by $80
00016B2C 3200                       		move.w	d0,d1
00016B2E 5340                       		subq.w	#1,d0
00016B30 3140 0030                  		move.w	d0,$30(a0)
00016B34 3140 0032                  		move.w	d0,$32(a0)
00016B38 7000                       		moveq	#0,d0
00016B3A 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B3E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016B42 0641 0080                  		addi.w	#$80,d1
00016B46 C0C1                       		mulu.w	d1,d0
00016B48 E088                       		lsr.l	#8,d0
00016B4A 3140 0036                  		move.w	d0,$36(a0)
00016B4E 5341                       		subq.w	#1,d1
00016B50 3141 0038                  		move.w	d1,$38(a0)
00016B54                            
00016B54                            loc_16068:				; XREF: Obj6C_Index
00016B54 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016B58 9068 0036                  		sub.w	$36(a0),d0
00016B5C C068 0038                  		and.w	$38(a0),d0
00016B60 6600                       		bne.s	Obj6C_Animate
00016B62 5928 0024                  		subq.b	#4,$24(a0)
00016B66 6000                       		bra.s	Obj6C_Vanish
00016B68                            ; ===========================================================================
00016B68                            
00016B68                            Obj6C_Animate:
00016B68 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016B6E 4EB9 0000 B04C             		jsr	AnimateSprite
00016B74 6000 9528                  		bra.w	MarkObjGone
00016B78                            ; ===========================================================================
00016B78                            
00016B78                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016B78 5368 0030                  		subq.w	#1,$30(a0)
00016B7C 6A00                       		bpl.s	loc_160AA
00016B7E 317C 007F 0030             		move.w	#127,$30(a0)
00016B84 4A28 001C                  		tst.b	$1C(a0)
00016B88 6700                       		beq.s	loc_160A4
00016B8A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016B90                            
00016B90                            loc_160A4:
00016B90 0868 0000 001C             		bchg	#0,$1C(a0)
00016B96                            
00016B96                            loc_160AA:
00016B96 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016B9C 4EB9 0000 B04C             		jsr	AnimateSprite
00016BA2 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016BA8 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016BAA 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016BB0 6600                       		bne.s	loc_160D6
00016BB2 7200                       		moveq	#0,d1
00016BB4 1228 0019                  		move.b	$19(a0),d1
00016BB8 4EB9 0000 7C08             		jsr	(PlatformObject).l
00016BBE 6000 94DE                  		bra.w	MarkObjGone
00016BC2                            ; ===========================================================================
00016BC2                            
00016BC2                            loc_160D6:
00016BC2 7200                       		moveq	#0,d1
00016BC4 1228 0019                  		move.b	$19(a0),d1
00016BC8 4EB9 0000 7D7C             		jsr	(ExitPlatform).l
00016BCE 3428 0008                  		move.w	8(a0),d2
00016BD2 4EB9 0000 82E6             		jsr	(MvSonicOnPtfm2).l
00016BD8 6000 94C4                  		bra.w	MarkObjGone
00016BDC                            ; ===========================================================================
00016BDC                            
00016BDC                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016BDC 0828 0003 0022             		btst	#3,$22(a0)
00016BE2 6700                       		beq.s	Obj6C_Display
00016BE4 43F8 D000                  		lea	($FFFFD000).w,a1
00016BE8 08A9 0003 0022             		bclr	#3,$22(a1)
00016BEE 08A8 0003 0022             		bclr	#3,$22(a0)
00016BF4 117C 0002 0024             		move.b	#2,$24(a0)
00016BFA 4228 0025                  		clr.b	$25(a0)
00016BFE                            
00016BFE                            Obj6C_Display:
00016BFE 6000 949E                  		bra.w	MarkObjGone
00016C02                            ; ===========================================================================
00016C02                            Ani_obj6C:
00016C02                            	include "_anim\obj6C.asm"
00016C02                            ; ---------------------------------------------------------------------------
00016C02                            ; Animation script - vanishing platforms (SBZ)
00016C02                            ; ---------------------------------------------------------------------------
00016C02 0000                       		dc.w byte_1611A-Ani_obj6C
00016C04 0000                       		dc.w byte_16122-Ani_obj6C
00016C06 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016C0E 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016C16                            		even
00016C16                            		even
00016C16                            
00016C16                            ; ---------------------------------------------------------------------------
00016C16                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C16                            ; ---------------------------------------------------------------------------
00016C16                            Map_obj6C:
00016C16                            	include "_maps\obj6C.asm"
00016C16                            ; ---------------------------------------------------------------------------
00016C16                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C16                            ; ---------------------------------------------------------------------------
00016C16 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016C1A 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016C1E 01                         byte_16132:	dc.b 1
00016C1F F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016C24 01                         byte_16138:	dc.b 1
00016C25 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016C2A 01                         byte_1613E:	dc.b 1
00016C2B F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016C30 00                         byte_16144:	dc.b 0
00016C32 00                         		even
00016C32 00                         		even
00016C32                            
00016C32                            ; ===========================================================================
00016C32                            ; ---------------------------------------------------------------------------
00016C32                            ; Object 6E - electrocution orbs (SBZ)
00016C32                            ; ---------------------------------------------------------------------------
00016C32                            
00016C32                            Obj6E:					; XREF: Obj_Index
00016C32 7000                       		moveq	#0,d0
00016C34 1028 0024                  		move.b	$24(a0),d0
00016C38 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016C3C 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016C40                            ; ===========================================================================
00016C40 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016C42 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016C44                            ; ===========================================================================
00016C44                            
00016C44                            Obj6E_Main:				; XREF: Obj6E_Index
00016C44 5428 0024                  		addq.b	#2,$24(a0)
00016C48 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016C50 317C 047E 0002             		move.w	#$47E,2(a0)
00016C56 0028 0004 0001             		ori.b	#4,1(a0)
00016C5C 117C 0028 0019             		move.b	#$28,$19(a0)
00016C62 7000                       		moveq	#0,d0
00016C64 1028 0028                  		move.b	$28(a0),d0	; read object type
00016C68 E948                       		lsl.w	#4,d0		; multiply by $10
00016C6A 5340                       		subq.w	#1,d0
00016C6C 3140 0034                  		move.w	d0,$34(a0)
00016C70                            
00016C70                            Obj6E_Shock:				; XREF: Obj6E_Index
00016C70 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016C74 C068 0034                  		and.w	$34(a0),d0
00016C78 6600                       		bne.s	Obj6E_Animate
00016C7A 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016C80 4A28 0001                  		tst.b	1(a0)
00016C84 6A00                       		bpl.s	Obj6E_Animate
00016C86 303C 00B1                  		move.w	#$B1,d0
00016C8A 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play electricity sound
00016C90                            
00016C90                            Obj6E_Animate:
00016C90 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016C96 4EB9 0000 B04C             		jsr	AnimateSprite
00016C9C 117C 0000 0020             		move.b	#0,$20(a0)
00016CA2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016CA8 6600                       		bne.s	Obj6E_Display	; if not, branch
00016CAA 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016CB0                            
00016CB0                            Obj6E_Display:
00016CB0 6000 93EC                  		bra.w	MarkObjGone
00016CB4                            ; ===========================================================================
00016CB4                            Ani_obj6E:
00016CB4                            	include "_anim\obj6E.asm"
00016CB4                            ; ---------------------------------------------------------------------------
00016CB4                            ; Animation script - electrocution orbs (SBZ)
00016CB4                            ; ---------------------------------------------------------------------------
00016CB4 0000                       		dc.w byte_161CC-Ani_obj6E
00016CB6 0000                       		dc.w byte_161D0-Ani_obj6E
00016CB8 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016CBC 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016CCC                            		even
00016CCC                            		even
00016CCC                            
00016CCC                            ; ---------------------------------------------------------------------------
00016CCC                            ; Sprite mappings - electrocution orbs (SBZ)
00016CCC                            ; ---------------------------------------------------------------------------
00016CCC                            Map_obj6E:
00016CCC                            	include "_maps\obj6E.asm"
00016CCC                            Map_26ed:
00016CCC 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016CCE 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016CD0 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016CD2 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016CD4 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016CD6 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016CD8 01                         Map_26ed_C: 	dc.b $1
00016CD9 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016CDE 02                         Map_26ed_12: 	dc.b $2
00016CDF F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016CE4 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016CE9 06                         Map_26ed_1D: 	dc.b $6
00016CEA F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016CEF 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016CF4 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016CF9 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016CFE F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D03 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D08 08                         Map_26ed_3C: 	dc.b $8
00016D09 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D0E 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D13 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D18 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D1D F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D22 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D27 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D2C F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D31 06                         Map_26ed_65: 	dc.b $6
00016D32 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D37 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D3C F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D41 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D46 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D4B F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D50 04                         Map_26ed_84: 	dc.b $4
00016D51 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D56 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D5B F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D60 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D66 00                         	even
00016D66 00                         	even
00016D66                            
00016D66                            ; ===========================================================================
00016D66                            ; ---------------------------------------------------------------------------
00016D66                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016D66                            ; ---------------------------------------------------------------------------
00016D66                            
00016D66                            Obj6F:					; XREF: Obj_Index
00016D66 7000                       		moveq	#0,d0
00016D68 1028 0024                  		move.b	$24(a0),d0
00016D6C 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016D70 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016D74 3028 0030                  		move.w	$30(a0),d0
00016D78 0240 FF80                  		andi.w	#$FF80,d0
00016D7C 3238 F700                  		move.w	($FFFFF700).w,d1
00016D80 0441 0080                  		subi.w	#$80,d1
00016D84 0241 FF80                  		andi.w	#$FF80,d1
00016D88 9041                       		sub.w	d1,d0
00016D8A 0C40 0280                  		cmpi.w	#$280,d0
00016D8E 6200                       		bhi.s	loc_1629A
00016D90                            
00016D90                            Obj6F_Display:
00016D90 4EF9 0000 DFF6             		jmp	DisplaySprite
00016D96                            ; ===========================================================================
00016D96                            
00016D96                            loc_1629A:
00016D96 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016D9C 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016D9E 0C40 FF80                  		cmpi.w	#-$80,d0
00016DA2 64EC                       		bcc.s	Obj6F_Display
00016DA4                            
00016DA4                            Obj6F_Act1or2:
00016DA4 1028 002F                  		move.b	$2F(a0),d0
00016DA8 6A00                       		bpl.s	Obj6F_Delete
00016DAA 0240 007F                  		andi.w	#$7F,d0
00016DAE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016DB2 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016DB8                            
00016DB8                            Obj6F_Delete:
00016DB8 4EF9 0000 E032             		jmp	DeleteObject
00016DBE                            ; ===========================================================================
00016DBE 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016DC0 0000                       		dc.w loc_163D8-Obj6F_Index
00016DC2                            ; ===========================================================================
00016DC2                            
00016DC2                            Obj6F_Main:				; XREF: Obj6F_Index
00016DC2 1028 0028                  		move.b	$28(a0),d0
00016DC6 6B00 0000                  		bmi.w	loc_16380
00016DCA 5428 0024                  		addq.b	#2,$24(a0)
00016DCE 217C 0001 6426 0004        		move.l	#Map_obj69a,4(a0)
00016DD6 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016DDC 117C 0010 0019             		move.b	#$10,$19(a0)
00016DE2 0028 0004 0001             		ori.b	#4,1(a0)
00016DE8 117C 0004 0018             		move.b	#4,$18(a0)
00016DEE 7000                       		moveq	#0,d0
00016DF0 1028 0028                  		move.b	$28(a0),d0
00016DF4 3200                       		move.w	d0,d1
00016DF6 E648                       		lsr.w	#3,d0
00016DF8 0240 001E                  		andi.w	#$1E,d0
00016DFC 45FA 0000                  		lea	off_164A6(pc),a2
00016E00 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016E04 315A 0038                  		move.w	(a2)+,$38(a0)
00016E08 315A 0030                  		move.w	(a2)+,$30(a0)
00016E0C 214A 003C                  		move.l	a2,$3C(a0)
00016E10 0241 000F                  		andi.w	#$F,d1
00016E14 E549                       		lsl.w	#2,d1
00016E16 1141 0038                  		move.b	d1,$38(a0)
00016E1A 117C 0004 003A             		move.b	#4,$3A(a0)
00016E20 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016E24 6700                       		beq.s	loc_16356
00016E26 117C 0001 003B             		move.b	#1,$3B(a0)
00016E2C 4428 003A                  		neg.b	$3A(a0)
00016E30 7200                       		moveq	#0,d1
00016E32 1228 0038                  		move.b	$38(a0),d1
00016E36 D228 003A                  		add.b	$3A(a0),d1
00016E3A B228 0039                  		cmp.b	$39(a0),d1
00016E3E 6500                       		bcs.s	loc_16352
00016E40 1001                       		move.b	d1,d0
00016E42 7200                       		moveq	#0,d1
00016E44 4A00                       		tst.b	d0
00016E46 6A00                       		bpl.s	loc_16352
00016E48 1228 0039                  		move.b	$39(a0),d1
00016E4C 5901                       		subq.b	#4,d1
00016E4E                            
00016E4E                            loc_16352:
00016E4E 1141 0038                  		move.b	d1,$38(a0)
00016E52                            
00016E52                            loc_16356:
00016E52 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016E58 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016E5E 4A41                       		tst.w	d1
00016E60 6600                       		bne.s	loc_1636C
00016E62 117C 0001 001C             		move.b	#1,$1C(a0)
00016E68                            
00016E68                            loc_1636C:
00016E68 0C41 0008                  		cmpi.w	#8,d1
00016E6C 6600                       		bne.s	loc_16378
00016E6E 117C 0000 001C             		move.b	#0,$1C(a0)
00016E74                            
00016E74                            loc_16378:
00016E74 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016E78 6000 0000                  		bra.w	loc_163D8
00016E7C                            ; ===========================================================================
00016E7C                            
00016E7C                            loc_16380:				; XREF: Obj6F_Main
00016E7C 1140 002F                  		move.b	d0,$2F(a0)
00016E80 0240 007F                  		andi.w	#$7F,d0
00016E84 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016E88 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016E8E 6700                       		beq.s	loc_1639A
00016E90 4EF9 0000 E032             		jmp	DeleteObject
00016E96                            ; ===========================================================================
00016E96                            
00016E96                            loc_1639A:
00016E96 D040                       		add.w	d0,d0
00016E98 0240 001E                  		andi.w	#$1E,d0
00016E9C 0640 0080                  		addi.w	#$80,d0
00016EA0 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016EA6 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016EAA 321A                       		move.w	(a2)+,d1
00016EAC 2248                       		movea.l	a0,a1
00016EAE 6000                       		bra.s	Obj6F_LoadPform
00016EB0                            ; ===========================================================================
00016EB0                            
00016EB0                            Obj6F_Loop:
00016EB0 4EB9 0000 E47C             		jsr	SingleObjLoad
00016EB6 6600                       		bne.s	loc_163D0
00016EB8                            
00016EB8                            Obj6F_LoadPform:			; XREF: loc_1639A
00016EB8 12BC 006F                  		move.b	#$6F,0(a1)
00016EBC 335A 0008                  		move.w	(a2)+,8(a1)
00016EC0 335A 000C                  		move.w	(a2)+,$C(a1)
00016EC4 301A                       		move.w	(a2)+,d0
00016EC6 1340 0028                  		move.b	d0,$28(a1)
00016ECA                            
00016ECA                            loc_163D0:
00016ECA 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016ECE                            
00016ECE 588F                       		addq.l	#4,sp
00016ED0 4E75                       		rts	
00016ED2                            ; ===========================================================================
00016ED2                            
00016ED2                            loc_163D8:				; XREF: Obj6F_Index
00016ED2 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016ED8 4EB9 0000 B04C             		jsr	AnimateSprite
00016EDE 4A28 001A                  		tst.b	$1A(a0)
00016EE2 6600                       		bne.s	loc_16404
00016EE4 3F28 0008                  		move.w	8(a0),-(sp)
00016EE8 6100 0000                  		bsr.w	loc_16424
00016EEC 323C 001B                  		move.w	#$1B,d1
00016EF0 343C 0007                  		move.w	#7,d2
00016EF4 3602                       		move.w	d2,d3
00016EF6 5243                       		addq.w	#1,d3
00016EF8 381F                       		move.w	(sp)+,d4
00016EFA 6000 94CA                  		bra.w	SolidObject
00016EFE                            ; ===========================================================================
00016EFE                            
00016EFE                            loc_16404:
00016EFE 0828 0003 0022             		btst	#3,$22(a0)
00016F04 6700                       		beq.s	loc_16420
00016F06 43F8 D000                  		lea	($FFFFD000).w,a1
00016F0A 08A9 0003 0022             		bclr	#3,$22(a1)
00016F10 08A8 0003 0022             		bclr	#3,$22(a0)
00016F16 4228 0025                  		clr.b	$25(a0)
00016F1A                            
00016F1A                            loc_16420:
00016F1A 6000 0002                  		bra.w	*+4
00016F1E                            
00016F1E                            loc_16424:
00016F1E 3028 0008                  		move.w	8(a0),d0
00016F22 B068 0034                  		cmp.w	$34(a0),d0
00016F26 6600                       		bne.s	loc_16484
00016F28 3028 000C                  		move.w	$C(a0),d0
00016F2C B068 0036                  		cmp.w	$36(a0),d0
00016F30 6600                       		bne.s	loc_16484
00016F32 7200                       		moveq	#0,d1
00016F34 1228 0038                  		move.b	$38(a0),d1
00016F38 D228 003A                  		add.b	$3A(a0),d1
00016F3C B228 0039                  		cmp.b	$39(a0),d1
00016F40 6500                       		bcs.s	loc_16456
00016F42 1001                       		move.b	d1,d0
00016F44 7200                       		moveq	#0,d1
00016F46 4A00                       		tst.b	d0
00016F48 6A00                       		bpl.s	loc_16456
00016F4A 1228 0039                  		move.b	$39(a0),d1
00016F4E 5901                       		subq.b	#4,d1
00016F50                            
00016F50                            loc_16456:
00016F50 1141 0038                  		move.b	d1,$38(a0)
00016F54 2268 003C                  		movea.l	$3C(a0),a1
00016F58 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016F5E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016F64 4A41                       		tst.w	d1
00016F66 6600                       		bne.s	loc_16474
00016F68 117C 0001 001C             		move.b	#1,$1C(a0)
00016F6E                            
00016F6E                            loc_16474:
00016F6E 0C41 0008                  		cmpi.w	#8,d1
00016F72 6600                       		bne.s	loc_16480
00016F74 117C 0000 001C             		move.b	#0,$1C(a0)
00016F7A                            
00016F7A                            loc_16480:
00016F7A 6100 BFC0                  		bsr.w	Obj63_ChangeDir
00016F7E                            
00016F7E                            loc_16484:
00016F7E 4EF9 0000 DFD0             		jmp	SpeedToPos
00016F84                            ; ===========================================================================
00016F84                            Ani_obj6F:
00016F84                            	include "_anim\obj6F.asm"
00016F84                            ; ---------------------------------------------------------------------------
00016F84                            ; Animation script - platform on conveyor belt (SBZ)
00016F84                            ; ---------------------------------------------------------------------------
00016F84 0000                       		dc.w byte_1648E-Ani_obj6F
00016F86 0000                       		dc.w byte_164A2-Ani_obj6F
00016F88 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016F95 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016F9C 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016FA0 00                         		even
00016FA0 00                         		even
00016FA0                            
00016FA0 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016FA6 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016FAC 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016FC0 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016FD4 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016FE8 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016FFC 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017010 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017024                            ; ===========================================================================
00017024                            ; ---------------------------------------------------------------------------
00017024                            ; Object 70 - large girder block (SBZ)
00017024                            ; ---------------------------------------------------------------------------
00017024                            
00017024                            Obj70:					; XREF: Obj_Index
00017024 7000                       		moveq	#0,d0
00017026 1028 0024                  		move.b	$24(a0),d0
0001702A 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001702E 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017032                            ; ===========================================================================
00017032 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017034 0000                       		dc.w Obj70_Action-Obj70_Index
00017036                            ; ===========================================================================
00017036                            
00017036                            Obj70_Main:				; XREF: Obj70_Index
00017036 5428 0024                  		addq.b	#2,$24(a0)
0001703A 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017042 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017048 0028 0004 0001             		ori.b	#4,1(a0)
0001704E 117C 0004 0018             		move.b	#4,$18(a0)
00017054 117C 0060 0019             		move.b	#$60,$19(a0)
0001705A 117C 0018 0016             		move.b	#$18,$16(a0)
00017060 3168 0008 0032             		move.w	8(a0),$32(a0)
00017066 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001706C 6100 0000                  		bsr.w	Obj70_Move2
00017070                            
00017070                            Obj70_Action:				; XREF: Obj70_Index
00017070 3F28 0008                  		move.w	8(a0),-(sp)
00017074 4A68 003A                  		tst.w	$3A(a0)
00017078 6700                       		beq.s	Obj70_Move
0001707A 5368 003A                  		subq.w	#1,$3A(a0)
0001707E 6600                       		bne.s	Obj70_Solid
00017080                            
00017080                            Obj70_Move:
00017080 4EB9 0000 DFD0             		jsr	SpeedToPos
00017086 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
0001708A 6600                       		bne.s	Obj70_Solid	; if time remains, branch
0001708C 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00017090                            
00017090                            Obj70_Solid:
00017090 381F                       		move.w	(sp)+,d4
00017092 4A28 0001                  		tst.b	1(a0)
00017096 6A00                       		bpl.s	Obj70_ChkDel
00017098 7200                       		moveq	#0,d1
0001709A 1228 0019                  		move.b	$19(a0),d1
0001709E 0641 000B                  		addi.w	#$B,d1
000170A2 7400                       		moveq	#0,d2
000170A4 1428 0016                  		move.b	$16(a0),d2
000170A8 3602                       		move.w	d2,d3
000170AA 5243                       		addq.w	#1,d3
000170AC 6100 9318                  		bsr.w	SolidObject
000170B0                            
000170B0                            Obj70_ChkDel:
000170B0 3028 0032                  		move.w	$32(a0),d0
000170B4 0240 FF80                  		andi.w	#$FF80,d0
000170B8 3238 F700                  		move.w	($FFFFF700).w,d1
000170BC 0441 0080                  		subi.w	#$80,d1
000170C0 0241 FF80                  		andi.w	#$FF80,d1
000170C4 9041                       		sub.w	d1,d0
000170C6 0C40 0280                  		cmpi.w	#$280,d0
000170CA 6200                       		bhi.s	Obj70_Delete
000170CC 4EF9 0000 DFF6             		jmp	DisplaySprite
000170D2                            ; ===========================================================================
000170D2                            
000170D2                            Obj70_Delete:
000170D2 4EF9 0000 E032             		jmp	DeleteObject
000170D8                            ; ===========================================================================
000170D8                            
000170D8                            Obj70_Move2:				; XREF: Obj70_Main
000170D8 1028 0038                  		move.b	$38(a0),d0
000170DC 0240 0018                  		andi.w	#$18,d0
000170E0 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000170E6 43F1 0000                  		lea	(a1,d0.w),a1
000170EA 3159 0010                  		move.w	(a1)+,$10(a0)
000170EE 3159 0012                  		move.w	(a1)+,$12(a0)
000170F2 3159 0034                  		move.w	(a1)+,$34(a0)
000170F6 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000170FA 317C 0007 003A             		move.w	#7,$3A(a0)
00017100 4E75                       		rts	
00017102                            ; ===========================================================================
00017102 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001710A 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017112 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001711A 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017122                            ; ---------------------------------------------------------------------------
00017122                            ; Sprite mappings - large girder block (SBZ)
00017122                            ; ---------------------------------------------------------------------------
00017122                            Map_obj70:
00017122                            	include "_maps\obj70.asm"
00017122                            ; ---------------------------------------------------------------------------
00017122                            ; Sprite mappings - large girder block (SBZ)
00017122                            ; ---------------------------------------------------------------------------
00017122 0000                       		dc.w byte_1662A-Map_obj70
00017124 0C                         byte_1662A:	dc.b $C
00017125 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001712A 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001712F E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00017134 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00017139 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001713E 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00017143 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00017148 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001714D E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00017152 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00017157 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001715C 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00017162 00                         		even
00017162 00                         		even
00017162                            
00017162                            ; ===========================================================================
00017162                            ; ---------------------------------------------------------------------------
00017162                            ; Object 72 - teleporter (SBZ)
00017162                            ; ---------------------------------------------------------------------------
00017162                            
00017162                            Obj72:					; XREF: Obj_Index
00017162 7000                       		moveq	#0,d0
00017164 1028 0024                  		move.b	$24(a0),d0
00017168 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001716C 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00017170 3028 0008                  		move.w	8(a0),d0
00017174 0240 FF80                  		andi.w	#$FF80,d0
00017178 3238 F700                  		move.w	($FFFFF700).w,d1
0001717C 0441 0080                  		subi.w	#$80,d1
00017180 0241 FF80                  		andi.w	#$FF80,d1
00017184 9041                       		sub.w	d1,d0
00017186 0C40 0280                  		cmpi.w	#$280,d0
0001718A 6200                       		bhi.s	Obj72_Delete
0001718C 4E75                       		rts	
0001718E                            ; ===========================================================================
0001718E                            
0001718E                            Obj72_Delete:
0001718E 4EF9 0000 E032             		jmp	DeleteObject
00017194                            ; ===========================================================================
00017194 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00017196 0000                       		dc.w loc_166C8-Obj72_Index
00017198 0000                       		dc.w loc_1675E-Obj72_Index
0001719A 0000                       		dc.w loc_16798-Obj72_Index
0001719C                            ; ===========================================================================
0001719C                            
0001719C                            Obj72_Main:				; XREF: Obj72_Index
0001719C 5428 0024                  		addq.b	#2,$24(a0)
000171A0 1028 0028                  		move.b	$28(a0),d0
000171A4 D040                       		add.w	d0,d0
000171A6 0240 001E                  		andi.w	#$1E,d0
000171AA 45FA 0000                  		lea	Obj72_Data(pc),a2
000171AE D4F2 0000                  		adda.w	(a2,d0.w),a2
000171B2 315A 003A                  		move.w	(a2)+,$3A(a0)
000171B6 214A 003C                  		move.l	a2,$3C(a0)
000171BA 315A 0036                  		move.w	(a2)+,$36(a0)
000171BE 315A 0038                  		move.w	(a2)+,$38(a0)
000171C2                            
000171C2                            loc_166C8:				; XREF: Obj72_Index
000171C2 43F8 D000                  		lea	($FFFFD000).w,a1
000171C6 3029 0008                  		move.w	8(a1),d0
000171CA 9068 0008                  		sub.w	8(a0),d0
000171CE 0828 0000 0022             		btst	#0,$22(a0)
000171D4 6700                       		beq.s	loc_166E0
000171D6 0640 000F                  		addi.w	#$F,d0
000171DA                            
000171DA                            loc_166E0:
000171DA 0C40 0010                  		cmpi.w	#$10,d0
000171DE 6400                       		bcc.s	locret_1675C
000171E0 3229 000C                  		move.w	$C(a1),d1
000171E4 9268 000C                  		sub.w	$C(a0),d1
000171E8 0641 0020                  		addi.w	#$20,d1
000171EC 0C41 0040                  		cmpi.w	#$40,d1
000171F0 6400                       		bcc.s	locret_1675C
000171F2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000171F6 6600                       		bne.s	locret_1675C
000171F8 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000171FE 6600                       		bne.s	loc_1670E
00017200 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00017206 6500                       		bcs.s	locret_1675C
00017208                            
00017208                            loc_1670E:
00017208 5428 0024                  		addq.b	#2,$24(a0)
0001720C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017212 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00017218 337C 0800 0014             		move.w	#$800,$14(a1)
0001721E 337C 0000 0010             		move.w	#0,$10(a1)
00017224 337C 0000 0012             		move.w	#0,$12(a1)
0001722A 08A8 0005 0022             		bclr	#5,$22(a0)
00017230 08A9 0005 0022             		bclr	#5,$22(a1)
00017236 08E9 0001 0022             		bset	#1,$22(a1)
0001723C 3368 0008 0008             		move.w	8(a0),8(a1)
00017242 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017248 4228 0032                  		clr.b	$32(a0)
0001724C 303C 00BE                  		move.w	#$BE,d0
00017250 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00017256                            
00017256                            locret_1675C:
00017256 4E75                       		rts	
00017258                            ; ===========================================================================
00017258                            
00017258                            loc_1675E:				; XREF: Obj72_Index
00017258 43F8 D000                  		lea	($FFFFD000).w,a1
0001725C 1028 0032                  		move.b	$32(a0),d0
00017260 5428 0032                  		addq.b	#2,$32(a0)
00017264 4EB9 0000 2D28             		jsr	(CalcSine).l
0001726A EA40                       		asr.w	#5,d0
0001726C 3428 000C                  		move.w	$C(a0),d2
00017270 9440                       		sub.w	d0,d2
00017272 3342 000C                  		move.w	d2,$C(a1)
00017276 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001727C 6600                       		bne.s	locret_16796
0001727E 6100 0000                  		bsr.w	sub_1681C
00017282 5428 0024                  		addq.b	#2,$24(a0)
00017286 303C 00BC                  		move.w	#$BC,d0
0001728A 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play teleport sound
00017290                            
00017290                            locret_16796:
00017290 4E75                       		rts	
00017292                            ; ===========================================================================
00017292                            
00017292                            loc_16798:				; XREF: Obj72_Index
00017292 588F                       		addq.l	#4,sp
00017294 43F8 D000                  		lea	($FFFFD000).w,a1
00017298 5328 002E                  		subq.b	#1,$2E(a0)
0001729C 6A00                       		bpl.s	loc_167DA
0001729E 3368 0036 0008             		move.w	$36(a0),8(a1)
000172A4 3368 0038 000C             		move.w	$38(a0),$C(a1)
000172AA 7200                       		moveq	#0,d1
000172AC 1228 003A                  		move.b	$3A(a0),d1
000172B0 5801                       		addq.b	#4,d1
000172B2 B228 003B                  		cmp.b	$3B(a0),d1
000172B6 6500                       		bcs.s	loc_167C2
000172B8 7200                       		moveq	#0,d1
000172BA 6000                       		bra.s	loc_16800
000172BC                            ; ===========================================================================
000172BC                            
000172BC                            loc_167C2:
000172BC 1141 003A                  		move.b	d1,$3A(a0)
000172C0 2468 003C                  		movea.l	$3C(a0),a2
000172C4 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000172CA 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000172D0 6000 0000                  		bra.w	sub_1681C
000172D4                            ; ===========================================================================
000172D4                            
000172D4                            loc_167DA:
000172D4 2429 0008                  		move.l	8(a1),d2
000172D8 2629 000C                  		move.l	$C(a1),d3
000172DC 3029 0010                  		move.w	$10(a1),d0
000172E0 48C0                       		ext.l	d0
000172E2 E180                       		asl.l	#8,d0
000172E4 D480                       		add.l	d0,d2
000172E6 3029 0012                  		move.w	$12(a1),d0
000172EA 48C0                       		ext.l	d0
000172EC E180                       		asl.l	#8,d0
000172EE D680                       		add.l	d0,d3
000172F0 2342 0008                  		move.l	d2,8(a1)
000172F4 2343 000C                  		move.l	d3,$C(a1)
000172F8 4E75                       		rts	
000172FA                            ; ===========================================================================
000172FA                            
000172FA                            loc_16800:
000172FA 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017300 4228 0024                  		clr.b	$24(a0)
00017304 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017308 337C 0000 0010             		move.w	#0,$10(a1)
0001730E 337C 0200 0012             		move.w	#$200,$12(a1)
00017314 4E75                       		rts	
00017316                            
00017316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017316                            
00017316                            
00017316                            sub_1681C:
00017316 7000                       		moveq	#0,d0
00017318 343C 1000                  		move.w	#$1000,d2
0001731C 3028 0036                  		move.w	$36(a0),d0
00017320 9069 0008                  		sub.w	8(a1),d0
00017324 6C00                       		bge.s	loc_16830
00017326 4440                       		neg.w	d0
00017328 4442                       		neg.w	d2
0001732A                            
0001732A                            loc_16830:
0001732A 7200                       		moveq	#0,d1
0001732C 363C 1000                  		move.w	#$1000,d3
00017330 3228 0038                  		move.w	$38(a0),d1
00017334 9269 000C                  		sub.w	$C(a1),d1
00017338 6C00                       		bge.s	loc_16844
0001733A 4441                       		neg.w	d1
0001733C 4443                       		neg.w	d3
0001733E                            
0001733E                            loc_16844:
0001733E B240                       		cmp.w	d0,d1
00017340 6500                       		bcs.s	loc_1687A
00017342 7200                       		moveq	#0,d1
00017344 3228 0038                  		move.w	$38(a0),d1
00017348 9269 000C                  		sub.w	$C(a1),d1
0001734C 4841                       		swap	d1
0001734E 83C3                       		divs.w	d3,d1
00017350 7000                       		moveq	#0,d0
00017352 3028 0036                  		move.w	$36(a0),d0
00017356 9069 0008                  		sub.w	8(a1),d0
0001735A 6700                       		beq.s	loc_16866
0001735C 4840                       		swap	d0
0001735E 81C1                       		divs.w	d1,d0
00017360                            
00017360                            loc_16866:
00017360 3340 0010                  		move.w	d0,$10(a1)
00017364 3343 0012                  		move.w	d3,$12(a1)
00017368 4A41                       		tst.w	d1
0001736A 6A00                       		bpl.s	loc_16874
0001736C 4441                       		neg.w	d1
0001736E                            
0001736E                            loc_16874:
0001736E 3141 002E                  		move.w	d1,$2E(a0)
00017372 4E75                       		rts	
00017374                            ; ===========================================================================
00017374                            
00017374                            loc_1687A:
00017374 7000                       		moveq	#0,d0
00017376 3028 0036                  		move.w	$36(a0),d0
0001737A 9069 0008                  		sub.w	8(a1),d0
0001737E 4840                       		swap	d0
00017380 81C2                       		divs.w	d2,d0
00017382 7200                       		moveq	#0,d1
00017384 3228 0038                  		move.w	$38(a0),d1
00017388 9269 000C                  		sub.w	$C(a1),d1
0001738C 6700                       		beq.s	loc_16898
0001738E 4841                       		swap	d1
00017390 83C0                       		divs.w	d0,d1
00017392                            
00017392                            loc_16898:
00017392 3341 0012                  		move.w	d1,$12(a1)
00017396 3342 0010                  		move.w	d2,$10(a1)
0001739A 4A40                       		tst.w	d0
0001739C 6A00                       		bpl.s	loc_168A6
0001739E 4440                       		neg.w	d0
000173A0                            
000173A0                            loc_168A6:
000173A0 3140 002E                  		move.w	d0,$2E(a0)
000173A4 4E75                       		rts	
000173A6                            ; End of function sub_1681C
000173A6                            
000173A6                            ; ===========================================================================
000173A6 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000173AC 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000173B2 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000173B6 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000173BC 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000173C2 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000173C8 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000173CE 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000173D4 0884 0298 0894             		dc.w $884, $298, $894
000173DA 0270 0894 0190             		dc.w $270, $894, $190
000173E0 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000173E6 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000173EC 1184 0498 1158             		dc.w $1184, $498, $1158
000173F2 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000173F8 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000173FE 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017404 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001740A 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017410 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017416 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001741C 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017422 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017428 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0001742E                            ; ===========================================================================
0001742E                            ; ---------------------------------------------------------------------------
0001742E                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001742E                            ; ---------------------------------------------------------------------------
0001742E                            
0001742E                            Obj78:					; XREF: Obj_Index
0001742E 7000                       		moveq	#0,d0
00017430 1028 0024                  		move.b	$24(a0),d0
00017434 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00017438 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001743C                            ; ===========================================================================
0001743C 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001743E 0000                       		dc.w Obj78_Action-Obj78_Index
00017440 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017442 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017444 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017446 0000                       		dc.w Obj78_Delete-Obj78_Index
00017448 0000                       		dc.w loc_16CC0-Obj78_Index
0001744A                            ; ===========================================================================
0001744A                            
0001744A                            locret_16950:
0001744A 4E75                       		rts	
0001744C                            ; ===========================================================================
0001744C                            
0001744C                            Obj78_Main:				; XREF: Obj78_Index
0001744C 117C 0007 0016             		move.b	#7,$16(a0)
00017452 117C 0008 0017             		move.b	#8,$17(a0)
00017458 4EB9 0000 DF5E             		jsr	ObjectFall
0001745E 4EBA E4A6                  		jsr	ObjHitFloor
00017462 4A41                       		tst.w	d1
00017464 6AE4                       		bpl.s	locret_16950
00017466 D368 000C                  		add.w	d1,$C(a0)
0001746A 4268 0012                  		clr.w	$12(a0)
0001746E 5428 0024                  		addq.b	#2,$24(a0)
00017472 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001747A 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017480 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017486 6700                       		beq.s	loc_16996
00017488 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001748E                            
0001748E                            loc_16996:
0001748E 0228 0003 0001             		andi.b	#3,1(a0)
00017494 0028 0004 0001             		ori.b	#4,1(a0)
0001749A 1168 0001 0022             		move.b	1(a0),$22(a0)
000174A0 117C 0004 0018             		move.b	#4,$18(a0)
000174A6 117C 0008 0019             		move.b	#8,$19(a0)
000174AC 117C 000B 0020             		move.b	#$B,$20(a0)
000174B2 3428 0008                  		move.w	8(a0),d2
000174B6 7A0C                       		moveq	#$C,d5
000174B8 0828 0000 0022             		btst	#0,$22(a0)
000174BE 6700                       		beq.s	loc_169CA
000174C0 4445                       		neg.w	d5
000174C2                            
000174C2                            loc_169CA:
000174C2 1C3C 0004                  		move.b	#4,d6
000174C6 7600                       		moveq	#0,d3
000174C8 7804                       		moveq	#4,d4
000174CA 2448                       		movea.l	a0,a2
000174CC 7202                       		moveq	#2,d1
000174CE                            
000174CE                            Obj78_LoadBody:
000174CE 4EB9 0000 E492             		jsr	SingleObjLoad2
000174D4 6600                       		bne.s	Obj78_QuitLoad
000174D6 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000174DA 1346 0024                  		move.b	d6,$24(a1)
000174DE 5406                       		addq.b	#2,d6
000174E0 2368 0004 0004             		move.l	4(a0),4(a1)
000174E6 3368 0002 0002             		move.w	2(a0),2(a1)
000174EC 137C 0005 0018             		move.b	#5,$18(a1)
000174F2 137C 0008 0019             		move.b	#8,$19(a1)
000174F8 137C 00CB 0020             		move.b	#$CB,$20(a1)
000174FE D445                       		add.w	d5,d2
00017500 3342 0008                  		move.w	d2,8(a1)
00017504 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001750A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017510 1368 0022 0001             		move.b	$22(a0),1(a1)
00017516 137C 0008 001A             		move.b	#8,$1A(a1)
0001751C 234A 003C                  		move.l	a2,$3C(a1)
00017520 1344 003C                  		move.b	d4,$3C(a1)
00017524 5804                       		addq.b	#4,d4
00017526 2449                       		movea.l	a1,a2
00017528                            
00017528                            Obj78_QuitLoad:
00017528 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001752C                            
0001752C 117C 0007 002A             		move.b	#7,$2A(a0)
00017532 4228 003C                  		clr.b	$3C(a0)
00017536                            
00017536                            Obj78_Action:				; XREF: Obj78_Index
00017536 4A28 0022                  		tst.b	$22(a0)
0001753A 6B00 0000                  		bmi.w	loc_16C96
0001753E 7000                       		moveq	#0,d0
00017540 1028 0025                  		move.b	$25(a0),d0
00017544 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017548 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001754C 1228 002B                  		move.b	$2B(a0),d1
00017550 6A00                       		bpl.s	Obj78_Display
00017552 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017558 1028 0026                  		move.b	$26(a0),d0
0001755C 0240 007F                  		andi.w	#$7F,d0
00017560 5828 0026                  		addq.b	#4,$26(a0)
00017564 1031 0000                  		move.b	(a1,d0.w),d0
00017568 6A00                       		bpl.s	Obj78_AniHead
0001756A 08A8 0007 002B             		bclr	#7,$2B(a0)
00017570 6000                       		bra.s	Obj78_Display
00017572                            ; ===========================================================================
00017572                            
00017572                            Obj78_AniHead:
00017572 0201 0010                  		andi.b	#$10,d1
00017576 D001                       		add.b	d1,d0
00017578 1140 001A                  		move.b	d0,$1A(a0)
0001757C                            
0001757C                            Obj78_Display:
0001757C 3028 0008                  		move.w	8(a0),d0
00017580 0240 FF80                  		andi.w	#$FF80,d0
00017584 3238 F700                  		move.w	($FFFFF700).w,d1
00017588 0441 0080                  		subi.w	#$80,d1
0001758C 0241 FF80                  		andi.w	#$FF80,d1
00017590 9041                       		sub.w	d1,d0
00017592 0C40 0280                  		cmpi.w	#$280,d0
00017596 6200 0000                  		bhi.w	Obj78_ChkGone
0001759A 4EF9 0000 DFF6             		jmp	DisplaySprite
000175A0                            ; ===========================================================================
000175A0                            
000175A0                            Obj78_ChkGone:
000175A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175A4 7000                       		moveq	#0,d0
000175A6 1028 0023                  		move.b	$23(a0),d0
000175AA 6700                       		beq.s	loc_16ABC
000175AC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000175B2                            
000175B2                            loc_16ABC:
000175B2 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000175B8 4E75                       		rts	
000175BA                            ; ===========================================================================
000175BA                            
000175BA                            Obj78_Delete:				; XREF: Obj78_Index
000175BA 4EF9 0000 E032             		jmp	DeleteObject
000175C0                            ; ===========================================================================
000175C0 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000175C2 0000                       		dc.w loc_16B02-Obj78_Index2
000175C4                            ; ===========================================================================
000175C4                            
000175C4                            Obj78_Move:				; XREF: Obj78_Index2
000175C4 5328 002A                  		subq.b	#1,$2A(a0)
000175C8 6B00                       		bmi.s	Obj78_Move2
000175CA 4E75                       		rts	
000175CC                            ; ===========================================================================
000175CC                            
000175CC                            Obj78_Move2:
000175CC 5428 0025                  		addq.b	#2,$25(a0)
000175D0 117C 0010 002A             		move.b	#$10,$2A(a0)
000175D6 317C FF40 0010             		move.w	#-$C0,$10(a0)
000175DC 317C 0040 0014             		move.w	#$40,$14(a0)
000175E2 0868 0004 002B             		bchg	#4,$2B(a0)
000175E8 6600                       		bne.s	loc_16AFC
000175EA 4268 0010                  		clr.w	$10(a0)
000175EE 4468 0014                  		neg.w	$14(a0)
000175F2                            
000175F2                            loc_16AFC:
000175F2 08E8 0007 002B             		bset	#7,$2B(a0)
000175F8                            
000175F8                            loc_16B02:				; XREF: Obj78_Index2
000175F8 5328 002A                  		subq.b	#1,$2A(a0)
000175FC 6B00                       		bmi.s	loc_16B5E
000175FE 2F28 0008                  		move.l	8(a0),-(sp)
00017602 2428 0008                  		move.l	8(a0),d2
00017606 3028 0010                  		move.w	$10(a0),d0
0001760A 0828 0000 0022             		btst	#0,$22(a0)
00017610 6700                       		beq.s	loc_16B1E
00017612 4440                       		neg.w	d0
00017614                            
00017614                            loc_16B1E:
00017614 48C0                       		ext.l	d0
00017616 E180                       		asl.l	#8,d0
00017618 D480                       		add.l	d0,d2
0001761A 2142 0008                  		move.l	d2,8(a0)
0001761E 4EBA E2E6                  		jsr	ObjHitFloor
00017622 241F                       		move.l	(sp)+,d2
00017624 0C41 FFF8                  		cmpi.w	#-8,d1
00017628 6D00                       		blt.s	loc_16B70
0001762A 0C41 000C                  		cmpi.w	#$C,d1
0001762E 6C00                       		bge.s	loc_16B70
00017630 D368 000C                  		add.w	d1,$C(a0)
00017634 4842                       		swap	d2
00017636 B468 0008                  		cmp.w	8(a0),d2
0001763A 6700                       		beq.s	locret_16B5C
0001763C 7000                       		moveq	#0,d0
0001763E 1028 003C                  		move.b	$3C(a0),d0
00017642 5228 003C                  		addq.b	#1,$3C(a0)
00017646 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001764C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017650                            
00017650                            locret_16B5C:
00017650 4E75                       		rts	
00017652                            ; ===========================================================================
00017652                            
00017652                            loc_16B5E:
00017652 5528 0025                  		subq.b	#2,$25(a0)
00017656 117C 0007 002A             		move.b	#7,$2A(a0)
0001765C 317C 0000 0010             		move.w	#0,$10(a0)
00017662 4E75                       		rts	
00017664                            ; ===========================================================================
00017664                            
00017664                            loc_16B70:
00017664 2142 0008                  		move.l	d2,8(a0)
00017668 0868 0000 0022             		bchg	#0,$22(a0)
0001766E 1168 0022 0001             		move.b	$22(a0),1(a0)
00017674 7000                       		moveq	#0,d0
00017676 1028 003C                  		move.b	$3C(a0),d0
0001767A 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017680 5228 003C                  		addq.b	#1,$3C(a0)
00017684 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001768A 4E75                       		rts	
0001768C                            ; ===========================================================================
0001768C                            
0001768C                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001768C 2268 003C                  		movea.l	$3C(a0),a1
00017690 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017696 6A00                       		bpl.s	Obj78_BodySeg1
00017698 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001769E 1028 0026                  		move.b	$26(a0),d0
000176A2 0240 007F                  		andi.w	#$7F,d0
000176A6 5828 0026                  		addq.b	#4,$26(a0)
000176AA 4A31 0004                  		tst.b	4(a1,d0.w)
000176AE 6A00                       		bpl.s	Obj78_AniBody
000176B0 5828 0026                  		addq.b	#4,$26(a0)
000176B4                            
000176B4                            Obj78_AniBody:
000176B4 1031 0000                  		move.b	(a1,d0.w),d0
000176B8 5000                       		addq.b	#8,d0
000176BA 1140 001A                  		move.b	d0,$1A(a0)
000176BE                            
000176BE                            Obj78_BodySeg1:				; XREF: Obj78_Index
000176BE 2268 003C                  		movea.l	$3C(a0),a1
000176C2 4A28 0022                  		tst.b	$22(a0)
000176C6 6B00 0000                  		bmi.w	loc_16C90
000176CA 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000176D0 1169 0025 0025             		move.b	$25(a1),$25(a0)
000176D6 6700 0000                  		beq.w	loc_16C64
000176DA 3169 0014 0014             		move.w	$14(a1),$14(a0)
000176E0 3029 0010                  		move.w	$10(a1),d0
000176E4 D069 0014                  		add.w	$14(a1),d0
000176E8 3140 0010                  		move.w	d0,$10(a0)
000176EC 2428 0008                  		move.l	8(a0),d2
000176F0 2602                       		move.l	d2,d3
000176F2 3028 0010                  		move.w	$10(a0),d0
000176F6 0828 0000 0022             		btst	#0,$22(a0)
000176FC 6700                       		beq.s	loc_16C0C
000176FE 4440                       		neg.w	d0
00017700                            
00017700                            loc_16C0C:
00017700 48C0                       		ext.l	d0
00017702 E180                       		asl.l	#8,d0
00017704 D480                       		add.l	d0,d2
00017706 2142 0008                  		move.l	d2,8(a0)
0001770A 4843                       		swap	d3
0001770C B668 0008                  		cmp.w	8(a0),d3
00017710 6700                       		beq.s	loc_16C64
00017712 7000                       		moveq	#0,d0
00017714 1028 003C                  		move.b	$3C(a0),d0
00017718 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001771C 0C01 0080                  		cmpi.b	#-$80,d1
00017720 6600                       		bne.s	loc_16C50
00017722 4843                       		swap	d3
00017724 2143 0008                  		move.l	d3,8(a0)
00017728 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001772C 0868 0000 0022             		bchg	#0,$22(a0)
00017732 1168 0022 0001             		move.b	$22(a0),1(a0)
00017738 5228 003C                  		addq.b	#1,$3C(a0)
0001773C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017742 6000                       		bra.s	loc_16C64
00017744                            ; ===========================================================================
00017744                            
00017744                            loc_16C50:
00017744 4881                       		ext.w	d1
00017746 D368 000C                  		add.w	d1,$C(a0)
0001774A 5228 003C                  		addq.b	#1,$3C(a0)
0001774E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017754 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017758                            
00017758                            loc_16C64:
00017758 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001775E 6700                       		beq.s	loc_16C90
00017760 0C11 0027                  		cmpi.b	#$27,0(a1)
00017764 6700                       		beq.s	loc_16C7C
00017766 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001776C 6600                       		bne.s	loc_16C82
0001776E                            
0001776E                            loc_16C7C:
0001776E 117C 000A 0024             		move.b	#$A,$24(a0)
00017774                            
00017774                            loc_16C82:
00017774 4EF9 0000 DFF6             		jmp	DisplaySprite
0001777A                            
0001777A                            ; ===========================================================================
0001777A FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017782                            ; ===========================================================================
00017782                            
00017782                            loc_16C90:
00017782 08E9 0007 0022             		bset	#7,$22(a1)
00017788                            
00017788                            loc_16C96:
00017788 7000                       		moveq	#0,d0
0001778A 1028 0024                  		move.b	$24(a0),d0
0001778E 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017792 0828 0000 0022             		btst	#0,$22(a0)
00017798 6700                       		beq.s	loc_16CAA
0001779A 4440                       		neg.w	d0
0001779C                            
0001779C                            loc_16CAA:
0001779C 3140 0010                  		move.w	d0,$10(a0)
000177A0 317C FC00 0012             		move.w	#-$400,$12(a0)
000177A6 117C 000C 0024             		move.b	#$C,$24(a0)
000177AC 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000177B2                            
000177B2                            loc_16CC0:				; XREF: Obj78_Index
000177B2 4EB9 0000 DF5E             		jsr	ObjectFall
000177B8 4A68 0012                  		tst.w	$12(a0)
000177BC 6B00                       		bmi.s	loc_16CE0
000177BE 4EBA E146                  		jsr	ObjHitFloor
000177C2 4A41                       		tst.w	d1
000177C4 6A00                       		bpl.s	loc_16CE0
000177C6 D368 000C                  		add.w	d1,$C(a0)
000177CA 317C FC00 0012             		move.w	#-$400,$12(a0)
000177D0                            
000177D0                            loc_16CE0:
000177D0 4A28 0001                  		tst.b	1(a0)
000177D4 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000177D8 4EF9 0000 DFF6             		jmp	DisplaySprite
000177DE                            ; ===========================================================================
000177DE                            Ani_obj78:
000177DE                            	include "_anim\obj78.asm"
000177DE                            ; ---------------------------------------------------------------------------
000177DE                            ; Animation script - Caterkiller enemy (uses non-standard format)
000177DE                            ; ---------------------------------------------------------------------------
000177DE 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000177EE 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000177FE 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001780E 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001781E 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001782E 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001783E 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001784E 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001785E                            	even
0001785E                            	even
0001785E                            
0001785E                            ; ---------------------------------------------------------------------------
0001785E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001785E                            ; ---------------------------------------------------------------------------
0001785E                            Map_obj78:
0001785E                            	include "_maps\obj78.asm"
0001785E                            ; ---------------------------------------------------------------------------
0001785E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001785E                            ; ---------------------------------------------------------------------------
0001785E 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017862 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017866 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001786A 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001786E 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017872 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017876 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001787A 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001787E 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017882 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017886 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001788A 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001788E 01                         byte_16D9E:	dc.b 1
0001788F F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017894 01                         byte_16DA4:	dc.b 1
00017895 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001789A 01                         byte_16DAA:	dc.b 1
0001789B F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000178A0 01                         byte_16DB0:	dc.b 1
000178A1 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000178A6 01                         byte_16DB6:	dc.b 1
000178A7 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000178AC 01                         byte_16DBC:	dc.b 1
000178AD ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000178B2 01                         byte_16DC2:	dc.b 1
000178B3 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000178B8 01                         byte_16DC8:	dc.b 1
000178B9 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000178BE 01                         byte_16DCE:	dc.b 1
000178BF F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000178C4 01                         byte_16DD4:	dc.b 1
000178C5 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000178CA 01                         byte_16DDA:	dc.b 1
000178CB F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000178D0 01                         byte_16DE0:	dc.b 1
000178D1 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000178D6 01                         byte_16DE6:	dc.b 1
000178D7 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000178DC 01                         byte_16DEC:	dc.b 1
000178DD F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000178E2 01                         byte_16DF2:	dc.b 1
000178E3 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000178E8 01                         byte_16DF8:	dc.b 1
000178E9 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000178EE 01                         byte_16DFE:	dc.b 1
000178EF F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000178F4 01                         byte_16E04:	dc.b 1
000178F5 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000178FA 01                         byte_16E0A:	dc.b 1
000178FB F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017900 01                         byte_16E10:	dc.b 1
00017901 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017906 01                         byte_16E16:	dc.b 1
00017907 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001790C 01                         byte_16E1C:	dc.b 1
0001790D ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017912 01                         byte_16E22:	dc.b 1
00017913 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017918 01                         byte_16E28:	dc.b 1
00017919 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001791E                            		even
0001791E                            		even
0001791E                            
0001791E                            ; ===========================================================================
0001791E                            ; ---------------------------------------------------------------------------
0001791E                            ; Object 79 - lamppost
0001791E                            ; ---------------------------------------------------------------------------
0001791E                            
0001791E                            Obj79:					; XREF: Obj_Index
0001791E 7000                       		moveq	#0,d0
00017920 1028 0024                  		move.b	$24(a0),d0
00017924 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017928 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001792C 4EFA 8770                  		jmp	MarkObjGone
00017930                            ; ===========================================================================
00017930 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017932 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017934 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017936 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017938                            ; ===========================================================================
00017938                            
00017938                            Obj79_Main:				; XREF: Obj79_Index
00017938 5428 0024                  		addq.b	#2,$24(a0)
0001793C 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017944 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001794A 117C 0004 0001             		move.b	#4,1(a0)
00017950 117C 0008 0019             		move.b	#8,$19(a0)
00017956 117C 0005 0018             		move.b	#5,$18(a0)
0001795C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017960 7000                       		moveq	#0,d0
00017962 1028 0023                  		move.b	$23(a0),d0
00017966 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001796C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017972 6600                       		bne.s	Obj79_RedLamp
00017974 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017978 0201 007F                  		andi.b	#$7F,d1
0001797C 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017980 0202 007F                  		andi.b	#$7F,d2
00017984 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017986 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017988                            
00017988                            Obj79_RedLamp:
00017988 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001798E 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017994 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001799A 4E75                       		rts	
0001799C                            ; ===========================================================================
0001799C                            
0001799C                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001799C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000179A0 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000179A4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000179A8 6B00 0000                  		bmi.w	locret_16F90
000179AC 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179B0 0201 007F                  		andi.b	#$7F,d1
000179B4 1428 0028                  		move.b	$28(a0),d2
000179B8 0202 007F                  		andi.b	#$7F,d2
000179BC B202                       		cmp.b	d2,d1
000179BE 6500                       		bcs.s	Obj79_HitLamp
000179C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000179C4 7000                       		moveq	#0,d0
000179C6 1028 0023                  		move.b	$23(a0),d0
000179CA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000179D0 117C 0004 0024             		move.b	#4,$24(a0)
000179D6 117C 0003 001A             		move.b	#3,$1A(a0)
000179DC 6000 0000                  		bra.w	locret_16F90
000179E0                            ; ===========================================================================
000179E0                            
000179E0                            Obj79_HitLamp:
000179E0 3038 D008                  		move.w	($FFFFD008).w,d0
000179E4 9068 0008                  		sub.w	8(a0),d0
000179E8 5040                       		addq.w	#8,d0
000179EA 0C40 0010                  		cmpi.w	#$10,d0
000179EE 6400 0000                  		bcc.w	locret_16F90
000179F2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000179F6 9068 000C                  		sub.w	$C(a0),d0
000179FA 0640 0040                  		addi.w	#$40,d0
000179FE 0C40 0068                  		cmpi.w	#$68,d0
00017A02 6400                       		bcc.s	locret_16F90
00017A04 303C 00A1                  		move.w	#$A1,d0
00017A08 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017A0E 5428 0024                  		addq.b	#2,$24(a0)
00017A12 4EB9 0000 E47C             		jsr	SingleObjLoad
00017A18 6600                       		bne.s	loc_16F76
00017A1A 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017A1E 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017A24 3368 0008 0030             		move.w	8(a0),$30(a1)
00017A2A 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017A30 0469 0018 0032             		subi.w	#$18,$32(a1)
00017A36 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017A3E 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017A44 137C 0004 0001             		move.b	#4,1(a1)
00017A4A 137C 0008 0019             		move.b	#8,$19(a1)
00017A50 137C 0004 0018             		move.b	#4,$18(a1)
00017A56 137C 0002 001A             		move.b	#2,$1A(a1)
00017A5C 337C 0020 0036             		move.w	#$20,$36(a1)
00017A62                            
00017A62                            loc_16F76:
00017A62 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017A68 6100 0000                  		bsr.w	Obj79_StoreInfo
00017A6C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017A70 7000                       		moveq	#0,d0
00017A72 1028 0023                  		move.b	$23(a0),d0
00017A76 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017A7C                            
00017A7C                            locret_16F90:
00017A7C 4E75                       		rts	
00017A7E                            ; ===========================================================================
00017A7E                            
00017A7E                            Obj79_AfterHit:				; XREF: Obj79_Index
00017A7E 4E75                       		rts	
00017A80                            ; ===========================================================================
00017A80                            
00017A80                            Obj79_Twirl:				; XREF: Obj79_Index
00017A80 5368 0036                  		subq.w	#1,$36(a0)
00017A84 6A00                       		bpl.s	loc_16FA0
00017A86 117C 0004 0024             		move.b	#4,$24(a0)
00017A8C                            
00017A8C                            loc_16FA0:
00017A8C 1028 0026                  		move.b	$26(a0),d0
00017A90 0428 0010 0026             		subi.b	#$10,$26(a0)
00017A96 0400 0040                  		subi.b	#$40,d0
00017A9A 4EB9 0000 2D28             		jsr	(CalcSine).l
00017AA0 C3FC 0C00                  		muls.w	#$C00,d1
00017AA4 4841                       		swap	d1
00017AA6 D268 0030                  		add.w	$30(a0),d1
00017AAA 3141 0008                  		move.w	d1,8(a0)
00017AAE C1FC 0C00                  		muls.w	#$C00,d0
00017AB2 4840                       		swap	d0
00017AB4 D068 0032                  		add.w	$32(a0),d0
00017AB8 3140 000C                  		move.w	d0,$C(a0)
00017ABC 4E75                       		rts	
00017ABE                            ; ===========================================================================
00017ABE                            ; ---------------------------------------------------------------------------
00017ABE                            ; Subroutine to	store information when you hit a lamppost
00017ABE                            ; ---------------------------------------------------------------------------
00017ABE                            
00017ABE                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017ABE 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017AC4 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017ACA 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017AD0 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017AD6 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017ADC 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017AE2 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017AE8 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017AEE 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017AF4 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017AFA 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017B00 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017B06 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017B0C 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017B12 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017B18 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017B1E 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017B24 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017B2A 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017B30 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017B36 4E75                       		rts	
00017B38                            
00017B38                            ; ---------------------------------------------------------------------------
00017B38                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017B38                            ; ---------------------------------------------------------------------------
00017B38                            
00017B38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B38                            
00017B38                            
00017B38                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017B38 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017B3E 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017B44 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017B4A 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017B50 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017B56 4278 FE20                  		clr.w	($FFFFFE20).w
00017B5A 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017B5E 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017B64 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017B6A 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017B6E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017B74 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017B7A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017B80 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017B86 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017B8C 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017B92 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017B98 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017B9E 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017BA4 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017BAA 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017BB0 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017BB6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017BBC 6600                       		bne.s	loc_170E4
00017BBE 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017BC4 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017BCA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017BD0                            
00017BD0                            loc_170E4:
00017BD0 4A38 FE30                  		tst.b	($FFFFFE30).w
00017BD4 6A00                       		bpl.s	locret_170F6
00017BD6 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017BDA 0440 00A0                  		subi.w	#$A0,d0
00017BDE 31C0 F728                  		move.w	d0,($FFFFF728).w
00017BE2                            
00017BE2                            locret_170F6:
00017BE2 4E75                       		rts	
00017BE4                            ; End of function Obj79_LoadInfo
00017BE4                            
00017BE4                            ; ===========================================================================
00017BE4                            ; ---------------------------------------------------------------------------
00017BE4                            ; Sprite mappings - lamppost
00017BE4                            ; ---------------------------------------------------------------------------
00017BE4                            Map_obj79:
00017BE4                            	include "_maps\obj79.asm"
00017BE4                            ; ---------------------------------------------------------------------------
00017BE4                            ; Sprite mappings - lamppost
00017BE4                            ; ---------------------------------------------------------------------------
00017BE4 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017BE8 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017BEC 06                         byte_17100:	dc.b 6
00017BED E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017BF2 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017BF7 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017BFC F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C01 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017C06 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017C0B 04                         byte_1711F:	dc.b 4
00017C0C E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C11 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C16 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C1B F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C20 02                         byte_17134:	dc.b 2
00017C21 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017C26 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017C2B 06                         byte_1713F:	dc.b 6
00017C2C E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C31 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C36 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C3B F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C40 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017C45 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017C4A                            		even
00017C4A                            		even
00017C4A                            
00017C4A                            ; ===========================================================================
00017C4A                            ; ---------------------------------------------------------------------------
00017C4A                            ; Object 7D - hidden points at the end of a level
00017C4A                            ; ---------------------------------------------------------------------------
00017C4A                            
00017C4A                            Obj7D:					; XREF: Obj_Index
00017C4A 7000                       		moveq	#0,d0
00017C4C 1028 0024                  		move.b	$24(a0),d0
00017C50 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017C54 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017C58                            ; ===========================================================================
00017C58 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017C5A 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017C5C                            ; ===========================================================================
00017C5C                            
00017C5C                            Obj7D_Main:				; XREF: Obj7D_Index
00017C5C 7410                       		moveq	#$10,d2
00017C5E 3602                       		move.w	d2,d3
00017C60 D643                       		add.w	d3,d3
00017C62 43F8 D000                  		lea	($FFFFD000).w,a1
00017C66 3029 0008                  		move.w	8(a1),d0
00017C6A 9068 0008                  		sub.w	8(a0),d0
00017C6E D042                       		add.w	d2,d0
00017C70 B043                       		cmp.w	d3,d0
00017C72 6400                       		bcc.s	Obj7D_ChkDel
00017C74 3229 000C                  		move.w	$C(a1),d1
00017C78 9268 000C                  		sub.w	$C(a0),d1
00017C7C D242                       		add.w	d2,d1
00017C7E B243                       		cmp.w	d3,d1
00017C80 6400                       		bcc.s	Obj7D_ChkDel
00017C82 4A78 FE08                  		tst.w	($FFFFFE08).w
00017C86 6600                       		bne.s	Obj7D_ChkDel
00017C88 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017C8C 6600                       		bne.s	Obj7D_ChkDel
00017C8E 5428 0024                  		addq.b	#2,$24(a0)
00017C92 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017C9A 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017CA0 0028 0004 0001             		ori.b	#4,1(a0)
00017CA6 117C 0000 0018             		move.b	#0,$18(a0)
00017CAC 117C 0010 0019             		move.b	#$10,$19(a0)
00017CB2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017CB8 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017CBE 303C 00C9                  		move.w	#$C9,d0
00017CC2 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play bonus sound
00017CC8 7000                       		moveq	#0,d0
00017CCA 1028 0028                  		move.b	$28(a0),d0
00017CCE D040                       		add.w	d0,d0
00017CD0 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017CD4 4EB9 0000 0000             		jsr	AddPoints
00017CDA                            
00017CDA                            Obj7D_ChkDel:
00017CDA 3028 0008                  		move.w	8(a0),d0
00017CDE 0240 FF80                  		andi.w	#$FF80,d0
00017CE2 3238 F700                  		move.w	($FFFFF700).w,d1
00017CE6 0441 0080                  		subi.w	#$80,d1
00017CEA 0241 FF80                  		andi.w	#$FF80,d1
00017CEE 9041                       		sub.w	d1,d0
00017CF0 0C40 0280                  		cmpi.w	#$280,d0
00017CF4 6200                       		bhi.s	Obj7D_Delete
00017CF6 4E75                       		rts	
00017CF8                            ; ===========================================================================
00017CF8                            
00017CF8                            Obj7D_Delete:
00017CF8 4EF9 0000 E032             		jmp	DeleteObject
00017CFE                            ; ===========================================================================
00017CFE 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017D00 03E8                       		dc.w 1000
00017D02 0064                       		dc.w 100
00017D04 0001                       		dc.w 1
00017D06                            ; ===========================================================================
00017D06                            
00017D06                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017D06 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017D0A 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017D0C 3028 0008                  		move.w	8(a0),d0
00017D10 0240 FF80                  		andi.w	#-$80,d0
00017D14 3238 F700                  		move.w	($FFFFF700).w,d1
00017D18 0441 0080                  		subi.w	#$80,d1
00017D1C 0241 FF80                  		andi.w	#-$80,d1
00017D20 9041                       		sub.w	d1,d0
00017D22 0C40 0280                  		cmpi.w	#$280,d0
00017D26 6200                       		bhi.s	Obj7D_Delete2
00017D28 4EF9 0000 DFF6             		jmp	DisplaySprite
00017D2E                            ; ===========================================================================
00017D2E                            
00017D2E                            Obj7D_Delete2:
00017D2E 4EF9 0000 E032             		jmp	DeleteObject
00017D34                            ; ===========================================================================
00017D34                            ; ---------------------------------------------------------------------------
00017D34                            ; Sprite mappings - hidden points at the end of	a level
00017D34                            ; ---------------------------------------------------------------------------
00017D34                            Map_obj7D:
00017D34                            	include "_maps\obj7D.asm"
00017D34                            ; ---------------------------------------------------------------------------
00017D34                            ; Sprite mappings - hidden points at the end of	a level
00017D34                            ; ---------------------------------------------------------------------------
00017D34 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017D38 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017D3C 00                         byte_17250:	dc.b 0
00017D3D 01                         byte_17251:	dc.b 1
00017D3E F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017D43 01                         byte_17257:	dc.b 1
00017D44 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017D49 01                         byte_1725D:	dc.b 1
00017D4A F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017D50 00                         		even
00017D50 00                         		even
00017D50                            
00017D50                            ; ===========================================================================
00017D50                            ; ---------------------------------------------------------------------------
00017D50                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017D50                            ; ---------------------------------------------------------------------------
00017D50                            
00017D50                            Obj8A:					; XREF: Obj_Index
00017D50 7000                       		moveq	#0,d0
00017D52 1028 0024                  		move.b	$24(a0),d0
00017D56 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017D5A 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017D5E                            ; ===========================================================================
00017D5E 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017D60 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017D62                            ; ===========================================================================
00017D62                            
00017D62                            Obj8A_Main:				; XREF: Obj8A_Index
00017D62 5428 0024                  		addq.b	#2,$24(a0)
00017D66 317C 0120 0008             		move.w	#$120,8(a0)
00017D6C 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017D72 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017D7A 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017D80 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017D84 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017D88 117C 0000 0001             		move.b	#0,1(a0)
00017D8E 117C 0000 0018             		move.b	#0,$18(a0)
00017D94 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017D9A 6600                       		bne.s	Obj8A_Display	; if not, branch
00017D9C 317C 00A6 0002             		move.w	#$A6,2(a0)
00017DA2 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017DA8 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017DAC 6700                       		beq.s	Obj8A_Display	; if not, branch
00017DAE 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017DB4 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DB6 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017DBC 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017DC2 4EF9 0000 E032             		jmp	DeleteObject
00017DC8                            ; ===========================================================================
00017DC8                            
00017DC8                            Obj8A_Display:				; XREF: Obj8A_Index
00017DC8 4EF9 0000 DFF6             		jmp	DisplaySprite
00017DCE                            ; ===========================================================================
00017DCE                            ; ---------------------------------------------------------------------------
00017DCE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017DCE                            ; ---------------------------------------------------------------------------
00017DCE                            Map_obj8A:
00017DCE                            	include "_maps\obj8A.asm"
00017DCE                            Map_ca8f:
00017DCE 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017DD0 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017DD2 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017DD4 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017DD6 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017DD8 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017DDA 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017DDC 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017DDE 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017DE0 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017DE2 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017DE4 08                         Map_ca8f_16: 	dc.b $8
00017DE5 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017DEA E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017DEF F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017DF4 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017DF9 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017DFE B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017E03 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017E08 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017E0D 10                         Map_ca8f_3F: 	dc.b $10
00017E0E D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017E13 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017E18 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017E1D D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017E22 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017E27 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017E2C D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017E31 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017E36 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017E3B 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017E40 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017E45 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017E4A 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017E4F 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017E54 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017E59 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017E5E 0A                         Map_ca8f_90: 	dc.b $A
00017E5F D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017E64 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017E69 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017E6E D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017E73 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017E78 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017E7D D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017E82 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017E87 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017E8C 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017E91 18                         Map_ca8f_C3: 	dc.b $18
00017E92 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017E97 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017E9C D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017EA1 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017EA6 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017EAB D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017EB0 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017EB5 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017EBA D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017EBF D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017EC4 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017EC9 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017ECE D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017ED3 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017ED8 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017EDD 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017EE2 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017EE7 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017EEC 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017EF1 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017EF6 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017EFB 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017F00 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017F05 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017F0A 14                         Map_ca8f_13C: 	dc.b $14
00017F0B D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017F10 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017F15 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017F1A D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017F1F D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017F24 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017F29 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017F2E 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017F33 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017F38 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017F3D 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017F42 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017F47 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017F4C 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017F51 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017F56 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017F5B 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017F60 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017F65 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017F6A 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017F6F 1A                         Map_ca8f_1A1: 	dc.b $1A
00017F70 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017F75 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017F7A D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017F7F D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017F84 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017F89 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017F8E D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017F93 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017F98 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017F9D D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017FA2 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017FA7 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017FAC 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017FB1 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017FB6 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017FBB 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017FC0 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017FC5 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017FCA 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017FCF 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017FD4 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017FD9 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017FDE 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017FE3 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017FE8 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017FED 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017FF2 17                         Map_ca8f_224: 	dc.b $17
00017FF3 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017FF8 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017FFD D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00018002 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00018007 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
0001800C D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00018011 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00018016 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
0001801B D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00018020 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00018025 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
0001802A D009 0008 58               	dc.b $D0, $9, $0, $8, $58
0001802F 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018034 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018039 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
0001803E 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00018043 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00018048 0005 0004 14               	dc.b $0, $5, $0, $4, $14
0001804D 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00018052 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00018057 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
0001805C 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00018061 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00018066 1F                         Map_ca8f_298: 	dc.b $1F
00018067 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
0001806C D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00018071 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00018076 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
0001807B D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00018080 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00018085 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
0001808A D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
0001808F D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00018094 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00018099 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
0001809E D805 0058 38               	dc.b $D8, $5, $0, $58, $38
000180A3 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
000180A8 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
000180AD 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
000180B2 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
000180B7 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
000180BC 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
000180C1 0009 0008 00               	dc.b $0, $9, $0, $8, $0
000180C6 0001 0046 14               	dc.b $0, $1, $0, $46, $14
000180CB 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
000180D0 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
000180D5 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
000180DA 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
000180DF 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
000180E4 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
000180E9 0001 0046 74               	dc.b $0, $1, $0, $46, $74
000180EE 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
000180F3 2005 0004 08               	dc.b $20, $5, $0, $4, $8
000180F8 2005 0012 18               	dc.b $20, $5, $0, $12, $18
000180FD 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00018102 0F                         Map_ca8f_334: 	dc.b $F
00018103 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00018108 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
0001810D F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00018112 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00018117 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
0001811C F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00018121 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00018126 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
0001812B F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00018130 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00018135 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0001813A F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
0001813F F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00018144 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00018149 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
0001814E 08                         Map_ca8f_380: 	dc.b $8
0001814F 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00018154 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00018159 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
0001815E 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00018163 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00018168 3005 0004 18               	dc.b $30, $5, $0, $4, $18
0001816D 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00018172 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00018177 20                         Map_ca8f_3A9: 	dc.b $20
00018178 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
0001817D ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00018182 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00018187 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
0001818C ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00018191 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00018196 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
0001819B FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
000181A0 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
000181A5 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
000181AA FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
000181AF FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
000181B4 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
000181B9 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
000181BE 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
000181C3 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
000181C8 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
000181CD 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
000181D2 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
000181D7 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
000181DC 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
000181E1 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
000181E6 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
000181EB 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
000181F0 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
000181F5 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
000181FA 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
000181FF 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018204 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00018209 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
0001820E 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018213 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00018218                            	even
00018218                            	even
00018218                            
00018218                            ; ===========================================================================
00018218                            ; ---------------------------------------------------------------------------
00018218                            ; Object 3D - matthew boss - modified by GK89
00018218                            ; ---------------------------------------------------------------------------
00018218                            
00018218                            Obj3D:					; XREF: Obj_Index
00018218 7000                       		moveq	#0,d0
0001821A 1028 0024                  		move.b	$24(a0),d0
0001821E 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018222 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018226                            ; ===========================================================================
00018226 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018228 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001822A 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001822C 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001822E                            
0001822E 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018230 0401                       		dc.b 4,	1
00018232 0607                       		dc.b 6,	7
00018234                            ; ===========================================================================
00018234                            
00018234                            Obj3D_Main:				; XREF: Obj3D_Index
00018234 45F9 0001 822E             		lea	(Obj3D_ObjData).l,a2
0001823A 2248                       		movea.l	a0,a1
0001823C 7202                       		moveq	#2,d1
0001823E 6000                       		bra.s	Obj3D_LoadBoss
00018240                            ; ===========================================================================
00018240                            
00018240                            Obj3D_Loop:
00018240 4EB9 0000 E492             		jsr	SingleObjLoad2
00018246 6600                       		bne.s	loc_17772
00018248                            
00018248                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018248 135A 0024                  		move.b	(a2)+,$24(a1)
0001824C 12BC 003D                  		move.b	#$3D,0(a1)
00018250 3368 0008 0008             		move.w	8(a0),8(a1)
00018256 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001825C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018264 337C 0400 0002             		move.w	#$400,2(a1)
0001826A 137C 0004 0001             		move.b	#4,1(a1)
00018270 137C 0020 0019             		move.b	#$20,$19(a1)
00018276 137C 0003 0018             		move.b	#3,$18(a1)
0001827C 135A 001C                  		move.b	(a2)+,$1C(a1)
00018280 2348 0034                  		move.l	a0,$34(a1)
00018284 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018288                            
00018288                            loc_17772:
00018288 3168 0008 0030             		move.w	8(a0),$30(a0)
0001828E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018294 117C 000F 0020             		move.b	#$F,$20(a0)
0001829A 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
000182A0                            
000182A0                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000182A0 7000                       		moveq	#0,d0
000182A2 1028 0025                  		move.b	$25(a0),d0
000182A6 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000182AA 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000182AE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000182B4 4EB9 0000 B04C             		jsr	AnimateSprite
000182BA 1028 0022                  		move.b	$22(a0),d0
000182BE 0200 0003                  		andi.b	#3,d0
000182C2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000182C8 8128 0001                  		or.b	d0,1(a0)
000182CC 4EF9 0000 DFF6             		jmp	DisplaySprite
000182D2                            ; ===========================================================================
000182D2 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000182D4 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000182D6 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000182D8 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000182DA 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000182DC 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000182DE 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000182E0                            ; ===========================================================================
000182E0                            
000182E0                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000182E0 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000182E6 6100 0000                  		bsr.w	BossMove
000182EA 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000182F0 6600                       		bne.s	loc_177E6
000182F2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000182F8 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000182FC                            
000182FC                            loc_177E6:
000182FC 1028 003F                  		move.b	$3F(a0),d0
00018300 4EB9 0000 2D28             		jsr	(CalcSine).l
00018306 EC40                       		asr.w	#6,d0
00018308 D068 0038                  		add.w	$38(a0),d0
0001830C 3140 000C                  		move.w	d0,$C(a0)
00018310 3168 0030 0008             		move.w	$30(a0),8(a0)
00018316 5428 003F                  		addq.b	#2,$3F(a0)
0001831A 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018320 6400                       		bcc.s	locret_1784A
00018322 4A28 0022                  		tst.b	$22(a0)
00018326 6B00                       		bmi.s	loc_1784C
00018328 4A28 0020                  		tst.b	$20(a0)
0001832C 6600                       		bne.s	locret_1784A
0001832E 4A28 003E                  		tst.b	$3E(a0)
00018332 6600                       		bne.s	Obj3D_ShipFlash
00018334 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001833A 303C 00AC                  		move.w	#$AC,d0
0001833E 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018344                            
00018344                            Obj3D_ShipFlash:
00018344 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018348 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001834A 4A51                       		tst.w	(a1)
0001834C 6600                       		bne.s	loc_1783C
0001834E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018352                            
00018352                            loc_1783C:
00018352 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018354 5328 003E                  		subq.b	#1,$3E(a0)
00018358 6600                       		bne.s	locret_1784A
0001835A 117C 000F 0020             		move.b	#$F,$20(a0)
00018360                            
00018360                            locret_1784A:
00018360 4E75                       		rts	
00018362                            ; ===========================================================================
00018362                            
00018362                            loc_1784C:				; XREF: loc_177E6
00018362 7064                       		moveq	#100,d0
00018364 6100 0000                  		bsr.w	AddPoints
00018368 117C 0008 0025             		move.b	#8,$25(a0)
0001836E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018374 4E75                       		rts	
00018376                            
00018376                            ; ---------------------------------------------------------------------------
00018376                            ; Defeated boss	subroutine
00018376                            ; ---------------------------------------------------------------------------
00018376                            
00018376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018376                            
00018376                            
00018376                            BossDefeated:
00018376 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001837A 0200 0007                  		andi.b	#7,d0
0001837E 6600                       		bne.s	locret_178A2
00018380 4EB9 0000 E47C             		jsr	SingleObjLoad
00018386 6600                       		bne.s	locret_178A2
00018388 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001838C 3368 0008 0008             		move.w	8(a0),8(a1)
00018392 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018398 4EB9 0000 2D02             		jsr	(RandomNumber).l
0001839E 3200                       		move.w	d0,d1
000183A0 7200                       		moveq	#0,d1
000183A2 1200                       		move.b	d0,d1
000183A4 E409                       		lsr.b	#2,d1
000183A6 0441 0020                  		subi.w	#$20,d1
000183AA D369 0008                  		add.w	d1,8(a1)
000183AE E048                       		lsr.w	#8,d0
000183B0 E608                       		lsr.b	#3,d0
000183B2 D169 000C                  		add.w	d0,$C(a1)
000183B6                            
000183B6                            locret_178A2:
000183B6 4E75                       		rts	
000183B8                            ; End of function BossDefeated
000183B8                            
000183B8                            ; ---------------------------------------------------------------------------
000183B8                            ; Subroutine to	move a boss
000183B8                            ; ---------------------------------------------------------------------------
000183B8                            
000183B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183B8                            
000183B8                            
000183B8                            BossMove:
000183B8 2428 0030                  		move.l	$30(a0),d2
000183BC 2628 0038                  		move.l	$38(a0),d3
000183C0 3028 0010                  		move.w	$10(a0),d0
000183C4 48C0                       		ext.l	d0
000183C6 E180                       		asl.l	#8,d0
000183C8 D480                       		add.l	d0,d2
000183CA 3028 0012                  		move.w	$12(a0),d0
000183CE 48C0                       		ext.l	d0
000183D0 E180                       		asl.l	#8,d0
000183D2 D680                       		add.l	d0,d3
000183D4 2142 0030                  		move.l	d2,$30(a0)
000183D8 2143 0038                  		move.l	d3,$38(a0)
000183DC 4E75                       		rts	
000183DE                            ; End of function BossMove
000183DE                            
000183DE                            ; ===========================================================================
000183DE                            
000183DE                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000183DE 6100 FFD8                  		bsr.w	BossMove
000183E2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000183E8 6600                       		bne.s	loc_17916
000183EA 317C 0000 0010             		move.w	#0,$10(a0)
000183F0 317C 0000 0012             		move.w	#0,$12(a0)
000183F6 5428 0025                  		addq.b	#2,$25(a0)
000183FA 4EB9 0000 E492             		jsr	SingleObjLoad2
00018400 6600                       		bne.s	loc_17910
00018402 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018406 3368 0030 0008             		move.w	$30(a0),8(a1)
0001840C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018412 2348 0034                  		move.l	a0,$34(a1)
00018416                            
00018416                            loc_17910:
00018416 317C 0077 003C             		move.w	#$77,$3C(a0)
0001841C                            
0001841C                            loc_17916:
0001841C 6000 FEDE                  		bra.w	loc_177E6
00018420                            ; ===========================================================================
00018420                            
00018420                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018420 5368 003C                  		subq.w	#1,$3C(a0)
00018424 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001842A 5428 0025                  		addq.b	#2,$25(a0)
0001842E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018434 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018438 9068 0008                  		sub.w	8(a0),d0		 
0001843C 6A00                       		bpl.s	Obj3D_left			 
0001843E 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018444 6000                       		bra.s	Obj3D_right		 
00018446 08A8 0005 0022             		bclr	#5,$22(a0)
0001844C 4EB9 0000 0000              		jsr     loc_17950
00018452 4E75                       		rts
00018454                            ; ===========================================================================
00018454                            
00018454                            Obj3D_right:
00018454 317C FF00 0010             		move.w	#-$100,$10(a0)	
0001845A 4E75                       		Rts
0001845C                            
0001845C                            Obj3D_left:
0001845C 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018462 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018468 6600                       		bne.s	RTSboss  	; if not, branch
0001846A 0868 0000 0022              		bchg	#0,$22(a0)
00018470                            
00018470                            RTSboss:	    
00018470 4E75                       		rts
00018472                             ; ===========================================================================
00018472                            
00018472                            Obj3D_UpStuff:
00018472 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018476 9068 000C                  		sub.w	$C(a0),d0		 
0001847A 6A00                       		bpl.s	Obj3D_down			 
0001847C 6000                        		bra.s	Obj3D_up		 
0001847E 08A8 0005 0022             		bclr	#5,$22(a0)
00018484                             
00018484                            Obj3D_up:		
00018484 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
0001848A 4E75                        	    rts
0001848C                            
0001848C                            Obj3D_down:
0001848C 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018492                            
00018492                            loc_17950:
00018492 6000 FE68                  		bra.w	loc_177E6
00018496                            ; ===========================================================================
00018496                            
00018496                            loc_17954:				; XREF: Obj3D_ShipIndex
00018496 5368 003C                  		subq.w	#1,$3C(a0)
0001849A 6B00                       		bmi.s	loc_17960
0001849C 6100 FF1A                  		bsr.w	BossMove
000184A0 6000                       		bra.s	loc_17976
000184A2                            ; ===========================================================================
000184A2                            
000184A2                            loc_17960:
000184A2 0868 0000 0022             		bchg	#0,$22(a0)
000184A8 317C 003F 003C             		move.w	#$3F,$3C(a0)
000184AE 5528 0025                  		subq.b	#2,$25(a0)
000184B2 317C 0000 0010             		move.w	#0,$10(a0)
000184B8                            
000184B8                            loc_17976:
000184B8 6000 FE42                  		bra.w	loc_177E6
000184BC                            ; ===========================================================================
000184BC                            
000184BC                            loc_1797A:				; XREF: Obj3D_ShipIndex
000184BC 5368 003C                  		subq.w	#1,$3C(a0)
000184C0 6B00                       		bmi.s	loc_17984
000184C2 6000 FEB2                  		bra.w	BossDefeated
000184C6                            ; ===========================================================================
000184C6                            
000184C6                            loc_17984:
000184C6 08E8 0000 0022             		bset	#0,$22(a0)
000184CC 08A8 0007 0022             		bclr	#7,$22(a0)
000184D2 4268 0010                  		clr.w	$10(a0)
000184D6 5428 0025                  		addq.b	#2,$25(a0)
000184DA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000184E0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000184E4 6600                       		bne.s	locret_179AA
000184E6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000184EC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000184F2 6000 FE82                  		bra.w	BossDefeated
000184F6                            
000184F6                            locret_179AA:
000184F6 4E75                       		rts	
000184F8                            ; ===========================================================================
000184F8                            
000184F8                            loc_179AC:				; XREF: Obj3D_ShipIndex
000184F8 4EB9 0000 DF5E             		jsr ObjectFall		
000184FE 5268 003C                  		addq.w	#1,$3C(a0)
00018502 6700                       		beq.s	loc_179BC
00018504 6A00                       		bpl.s	loc_179C2
00018506 6000                       		bra.s	loc_179EE
00018508                            ; ===========================================================================
00018508                            
00018508                            loc_179BC:
00018508 4268 0012                  		clr.w	$12(a0)
0001850C 6000                       		bra.s	loc_179EE
0001850E                            ; ===========================================================================
0001850E                            
0001850E                            loc_179C2:
0001850E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018514 6500                       		bcs.s	loc_179DA
00018516 6700                       		beq.s	loc_179E0
00018518 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001851E 6500                       		bcs.s	loc_179EE
00018520 5428 0025                  		addq.b	#2,$25(a0)
00018524 6000                       		bra.s	loc_179EE
00018526                            ; ===========================================================================
00018526                            
00018526                            loc_179DA:
00018526 5168 0012                  		subq.w	#8,$12(a0)
0001852A 6000                       		bra.s	loc_179EE
0001852C 6000 FE48                  		bra.w	BossDefeated
00018530                            ; ===========================================================================
00018530                            
00018530                            loc_179E0:
00018530 4268 0012                  		clr.w	$12(a0)
00018534 303C 0081                  		move.w	#$81,d0
00018538 4EB9 0000 1588             		jsr	(PlaySound).l	; play GHZ music
0001853E                            
0001853E                            loc_179EE:
0001853E 6100 FE78                  		bsr.w	BossMove
00018542 6000 FDB8                  		bra.w	loc_177E6
00018546                            ; ===========================================================================
00018546                            
00018546                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018546 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001854C 6700                       		beq.s	loc_17A10
0001854E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018552 6000                       		bra.s	loc_17A16
00018554                            ; ===========================================================================
00018554                            
00018554                            loc_17A10:
00018554 4A28 0001                  		tst.b	1(a0)
00018558 6A00                       		bpl.s	Obj3D_ShipDel
0001855A                            
0001855A                            loc_17A16:
0001855A 6100 FE5C                  		bsr.w	BossMove
0001855E 6000 FD9C                  		bra.w	loc_177E6
00018562                            ; ===========================================================================
00018562                            
00018562                            Obj3D_ShipDel:
00018562 4EF9 0000 E032             		jmp	DeleteObject
00018568                            ; ===========================================================================
00018568                            
00018568                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018568 7000                       		moveq	#0,d0
0001856A 7201                       		moveq	#1,d1
0001856C 2268 0034                  		movea.l	$34(a0),a1
00018570 1029 0025                  		move.b	$25(a1),d0
00018574 5900                       		subq.b	#4,d0
00018576 6600                       		bne.s	loc_17A3E
00018578 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001857E 6600                       		bne.s	loc_17A46
00018580 7204                       		moveq	#4,d1
00018582                            
00018582                            loc_17A3E:
00018582 5D00                       		subq.b	#6,d0
00018584 6B00                       		bmi.s	loc_17A46
00018586 720A                       		moveq	#$A,d1
00018588 6000                       		bra.s	loc_17A5A
0001858A                            ; ===========================================================================
0001858A                            
0001858A                            loc_17A46:
0001858A 4A29 0020                  		tst.b	$20(a1)
0001858E 6600                       		bne.s	loc_17A50
00018590 7205                       		moveq	#5,d1
00018592 6000                       		bra.s	loc_17A5A
00018594                            ; ===========================================================================
00018594                            
00018594                            loc_17A50:
00018594 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001859A 6500                       		bcs.s	loc_17A5A
0001859C 7204                       		moveq	#4,d1
0001859E                            
0001859E                            loc_17A5A:
0001859E 1141 001C                  		move.b	d1,$1C(a0)
000185A2 5500                       		subq.b	#2,d0
000185A4 6600                       		bne.s	Obj3D_FaceDisp
000185A6 117C 0006 001C             		move.b	#6,$1C(a0)
000185AC 4A28 0001                  		tst.b	1(a0)
000185B0 6A00                       		bpl.s	Obj3D_FaceDel
000185B2                            
000185B2                            Obj3D_FaceDisp:
000185B2 6000                       		bra.s	Obj3D_Display
000185B4                            ; ===========================================================================
000185B4                            
000185B4                            Obj3D_FaceDel:
000185B4 4EF9 0000 E032             		jmp	DeleteObject
000185BA                            ; ===========================================================================
000185BA                            
000185BA                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000185BA 117C 0007 001C             		move.b	#7,$1C(a0)
000185C0 2268 0034                  		movea.l	$34(a0),a1
000185C4 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000185CA 6600                       		bne.s	loc_17A96
000185CC 117C 000B 001C             		move.b	#$B,$1C(a0)
000185D2 4A28 0001                  		tst.b	1(a0)
000185D6 6A00                       		bpl.s	Obj3D_FlameDel
000185D8 6000                       		bra.s	Obj3D_FlameDisp
000185DA                            ; ===========================================================================
000185DA                            
000185DA                            loc_17A96:
000185DA 3029 0010                  		move.w	$10(a1),d0
000185DE 6700                       		beq.s	Obj3D_FlameDisp
000185E0 117C 0008 001C             		move.b	#8,$1C(a0)
000185E6                            
000185E6                            Obj3D_FlameDisp:
000185E6 6000                       		bra.s	Obj3D_Display
000185E8                            ; ===========================================================================
000185E8                            
000185E8                            Obj3D_FlameDel:
000185E8 4EF9 0000 E032             		jmp	DeleteObject
000185EE                            ; ===========================================================================
000185EE                            
000185EE                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000185EE 2268 0034                  		movea.l	$34(a0),a1
000185F2 3169 0008 0008             		move.w	8(a1),8(a0)
000185F8 3169 000C 000C             		move.w	$C(a1),$C(a0)
000185FE 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018604 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001860A 4EB9 0000 B04C             		jsr	AnimateSprite
00018610 1028 0022                  		move.b	$22(a0),d0
00018614 0200 0003                  		andi.b	#3,d0
00018618 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001861E 8128 0001                  		or.b	d0,1(a0)
00018622 4EF9 0000 DFF6             		jmp	DisplaySprite
00018628                            ; ===========================================================================
00018628                            ; ---------------------------------------------------------------------------
00018628                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018628                            ; ---------------------------------------------------------------------------
00018628                            
00018628                            Obj48:					; XREF: Obj_Index
00018628 7000                       		moveq	#0,d0
0001862A 1028 0024                  		move.b	$24(a0),d0
0001862E 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018632 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018636                            ; ===========================================================================
00018636 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018638 0000                       		dc.w Obj48_Base-Obj48_Index
0001863A 0000                       		dc.w Obj48_Display2-Obj48_Index
0001863C 0000                       		dc.w loc_17C68-Obj48_Index
0001863E 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018640                            ; ===========================================================================
00018640                            
00018640                            Obj48_Main:				; XREF: Obj48_Index
00018640 5428 0024                  		addq.b	#2,$24(a0)
00018644 317C 4080 0026             		move.w	#$4080,$26(a0)
0001864A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018650 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018658 317C 046C 0002             		move.w	#$46C,2(a0)
0001865E 45E8 0028                  		lea	$28(a0),a2
00018662 14FC 0000                  		move.b	#0,(a2)+
00018666 7205                       		moveq	#5,d1
00018668 2248                       		movea.l	a0,a1
0001866A 6000                       		bra.s	loc_17B60
0001866C                            ; ===========================================================================
0001866C                            
0001866C                            Obj48_MakeLinks:
0001866C 4EB9 0000 E492             		jsr	SingleObjLoad2
00018672 6600                       		bne.s	Obj48_MakeBall
00018674 3368 0008 0008             		move.w	8(a0),8(a1)
0001867A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018680 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018684 137C 0006 0024             		move.b	#6,$24(a1)
0001868A 237C 0000 8400 0004        		move.l	#Map_obj15,4(a1)
00018692 337C 0380 0002             		move.w	#$380,2(a1)
00018698 137C 0001 001A             		move.b	#1,$1A(a1)
0001869E 5228 0028                  		addq.b	#1,$28(a0)
000186A2                            
000186A2                            loc_17B60:				; XREF: Obj48_Main
000186A2 3A09                       		move.w	a1,d5
000186A4 0445 D000                  		subi.w	#$D000,d5
000186A8 EC4D                       		lsr.w	#6,d5
000186AA 0245 007F                  		andi.w	#$7F,d5
000186AE 14C5                       		move.b	d5,(a2)+
000186B0 137C 0004 0001             		move.b	#4,1(a1)
000186B6 137C 0008 0019             		move.b	#8,$19(a1)
000186BC 137C 0006 0018             		move.b	#6,$18(a1)
000186C2 2368 0034 0034             		move.l	$34(a0),$34(a1)
000186C8 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000186CC                            
000186CC                            Obj48_MakeBall:
000186CC 137C 0008 0024             		move.b	#8,$24(a1)
000186D2 237C 0000 89F0 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000186DA 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000186E0 137C 0001 001A             		move.b	#1,$1A(a1)
000186E6 137C 0005 0018             		move.b	#5,$18(a1)
000186EC 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000186F2 4E75                       		rts	
000186F4                            ; ===========================================================================
000186F4                            
000186F4 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000186FA                            
000186FA                            ; ===========================================================================
000186FA                            
000186FA                            Obj48_Base:				; XREF: Obj48_Index
000186FA 47F9 0001 86F4             		lea	(Obj48_PosData).l,a3
00018700 45E8 0028                  		lea	$28(a0),a2
00018704 7C00                       		moveq	#0,d6
00018706 1C1A                       		move.b	(a2)+,d6
00018708                            
00018708                            loc_17BC6:
00018708 7800                       		moveq	#0,d4
0001870A 181A                       		move.b	(a2)+,d4
0001870C ED4C                       		lsl.w	#6,d4
0001870E 0684 00FF D000             		addi.l	#$FFD000,d4
00018714 2244                       		movea.l	d4,a1
00018716 101B                       		move.b	(a3)+,d0
00018718 B029 003C                  		cmp.b	$3C(a1),d0
0001871C 6700                       		beq.s	loc_17BE0
0001871E 5229 003C                  		addq.b	#1,$3C(a1)
00018722                            
00018722                            loc_17BE0:
00018722 51CE FFE4                  		dbf	d6,loc_17BC6
00018726                            
00018726 B029 003C                  		cmp.b	$3C(a1),d0
0001872A 6600                       		bne.s	loc_17BFA
0001872C 2268 0034                  		movea.l	$34(a0),a1
00018730 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018736 6600                       		bne.s	loc_17BFA
00018738 5428 0024                  		addq.b	#2,$24(a0)
0001873C                            
0001873C                            loc_17BFA:
0001873C 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018742 6700                       		beq.s	Obj48_Display
00018744 5268 0032                  		addq.w	#1,$32(a0)
00018748                            
00018748                            Obj48_Display:
00018748 6100 0000                  		bsr.w	sub_17C2A
0001874C 1028 0026                  		move.b	$26(a0),d0
00018750 4EB9 0000 8372             		jsr	(Obj15_Move2).l
00018756 4EF9 0000 DFF6             		jmp	DisplaySprite
0001875C                            ; ===========================================================================
0001875C                            
0001875C                            Obj48_Display2:				; XREF: Obj48_Index
0001875C 6100 0000                  		bsr.w	sub_17C2A
00018760 4EB9 0000 8332             		jsr	(Obj48_Move).l
00018766 4EF9 0000 DFF6             		jmp	DisplaySprite
0001876C                            
0001876C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001876C                            
0001876C                            
0001876C                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001876C 2268 0034                  		movea.l	$34(a0),a1
00018770 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018776 6400                       		bcc.s	loc_17C3C
00018778 0868 0000 001A             		bchg	#0,$1A(a0)
0001877E                            
0001877E                            loc_17C3C:
0001877E 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018784 3029 000C                  		move.w	$C(a1),d0
00018788 D068 0032                  		add.w	$32(a0),d0
0001878C 3140 0038                  		move.w	d0,$38(a0)
00018790 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018796 4A29 0022                  		tst.b	$22(a1)
0001879A 6A00                       		bpl.s	locret_17C66
0001879C 10BC 003F                  		move.b	#$3F,0(a0)
000187A0 117C 0000 0024             		move.b	#0,$24(a0)
000187A6                            
000187A6                            locret_17C66:
000187A6 4E75                       		rts	
000187A8                            ; End of function sub_17C2A
000187A8                            
000187A8                            ; ===========================================================================
000187A8                            
000187A8                            loc_17C68:				; XREF: Obj48_Index
000187A8 2268 0034                  		movea.l	$34(a0),a1
000187AC 4A29 0022                  		tst.b	$22(a1)
000187B0 6A00                       		bpl.s	Obj48_Display3
000187B2 10BC 003F                  		move.b	#$3F,0(a0)
000187B6 117C 0000 0024             		move.b	#0,$24(a0)
000187BC                            
000187BC                            Obj48_Display3:
000187BC 4EF9 0000 DFF6             		jmp	DisplaySprite
000187C2                            ; ===========================================================================
000187C2                            
000187C2                            Obj48_ChkVanish:			; XREF: Obj48_Index
000187C2 7000                       		moveq	#0,d0
000187C4 4A28 001A                  		tst.b	$1A(a0)
000187C8 6600                       		bne.s	Obj48_Vanish
000187CA 5200                       		addq.b	#1,d0
000187CC                            
000187CC                            Obj48_Vanish:
000187CC 1140 001A                  		move.b	d0,$1A(a0)
000187D0 2268 0034                  		movea.l	$34(a0),a1
000187D4 4A29 0022                  		tst.b	$22(a1)
000187D8 6A00                       		bpl.s	Obj48_Display4
000187DA 117C 0000 0020             		move.b	#0,$20(a0)
000187E0 6100 FB94                  		bsr.w	BossDefeated
000187E4 5328 003C                  		subq.b	#1,$3C(a0)
000187E8 6A00                       		bpl.s	Obj48_Display4
000187EA 10BC 003F                  		move.b	#$3F,(a0)
000187EE 117C 0000 0024             		move.b	#0,$24(a0)
000187F4                            
000187F4                            Obj48_Display4:
000187F4 4EF9 0000 DFF6             		jmp	DisplaySprite
000187FA                            ; ===========================================================================
000187FA                            Ani_Eggman:
000187FA                            	include "_anim\Eggman.asm"
000187FA                            ; ---------------------------------------------------------------------------
000187FA                            ; Animation script - Eggman (bosses)
000187FA                            ; ---------------------------------------------------------------------------
000187FA 0000                       		dc.w byte_17CD4-Ani_Eggman
000187FC 0000                       		dc.w byte_17CD8-Ani_Eggman
000187FE 0000                       		dc.w byte_17CDC-Ani_Eggman
00018800 0000                       		dc.w byte_17CE0-Ani_Eggman
00018802 0000                       		dc.w byte_17CE4-Ani_Eggman
00018804 0000                       		dc.w byte_17CE8-Ani_Eggman
00018806 0000                       		dc.w byte_17CEC-Ani_Eggman
00018808 0000                       		dc.w byte_17CF0-Ani_Eggman
0001880A 0000                       		dc.w byte_17CF4-Ani_Eggman
0001880C 0000                       		dc.w byte_17CF8-Ani_Eggman
0001880E 0000                       		dc.w byte_17CFC-Ani_Eggman
00018810 0000                       		dc.w byte_17D00-Ani_Eggman
00018812 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018816 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001881A 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001881E 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018822 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018826 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001882A 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001882E 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018832 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018836 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001883A 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001883E 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001884A                            		even
0001884A                            		even
0001884A                            Ani_TetoB:
0001884A                            	include "_anim\TetoB.asm"
0001884A                            ; ---------------------------------------------------------------------------
0001884A                            ; Animation script - Eggman (bosses)
0001884A                            ; ---------------------------------------------------------------------------
0001884A 0000                       		dc.w spin-Ani_TetoB
0001884C 0000                       		dc.w static-Ani_TetoB
0001884E 0000                       		dc.w static2-Ani_TetoB
00018850 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018857 0500 FF                    static:	dc.b 5,	0, $FF
0001885A 0501 FF                    static2:	dc.b 5,	1, $FF
0001885E 00                         		even
0001885E 00                         		even
0001885E                            ; ---------------------------------------------------------------------------
0001885E                            ; Sprite mappings - Eggman (boss levels)
0001885E                            ; ---------------------------------------------------------------------------
0001885E                            Map_Eggman:
0001885E                            	include "_maps\Eggman.asm"
0001885E                            Map_dc7e:
0001885E 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018860 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018862 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018864 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018866 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018868 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
0001886A 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
0001886C 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001886E 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018870 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018872 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018874 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018876 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018878 06                         Map_dc7e_1A: 	dc.b $6
00018879 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001887E EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018883 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018888 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
0001888D 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018892 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018897 02                         Map_dc7e_39: 	dc.b $2
00018898 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001889D EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
000188A2 02                         Map_dc7e_44: 	dc.b $2
000188A3 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000188A8 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000188AD 03                         Map_dc7e_4F: 	dc.b $3
000188AE E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000188B3 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000188B8 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000188BD 03                         Map_dc7e_5F: 	dc.b $3
000188BE E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000188C3 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000188C8 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000188CD 03                         Map_dc7e_6F: 	dc.b $3
000188CE E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000188D3 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000188D8 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000188DD 03                         Map_dc7e_7F: 	dc.b $3
000188DE E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000188E3 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000188E8 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000188ED 04                         Map_dc7e_8F: 	dc.b $4
000188EE E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000188F3 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000188F8 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000188FD EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018902 01                         Map_dc7e_A4: 	dc.b $1
00018903 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018908 01                         Map_dc7e_AA: 	dc.b $1
00018909 0405 0031 22               	dc.b $4, $5, $0, $31, $22
0001890E 00                         Map_dc7e_B0: 	dc.b $0
0001890F 02                         Map_dc7e_B1: 	dc.b $2
00018910 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018915 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
0001891A 02                         Map_dc7e_BC: 	dc.b $2
0001891B F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018920 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018926 00                         	even
00018926 00                         	even
00018926                            
00018926                            ; ---------------------------------------------------------------------------
00018926                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018926                            ; ---------------------------------------------------------------------------
00018926                            Map_BossItems:
00018926                            	include "_maps\Boss items.asm"
00018926                            ; ---------------------------------------------------------------------------
00018926                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018926                            ; ---------------------------------------------------------------------------
00018926 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001892A 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001892E 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018932 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018936 01                         byte_17DE4:	dc.b 1
00018937 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001893C 02                         byte_17DEA:	dc.b 2
0001893D FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018942 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018947 00                         		dc.b 0
00018948 01                         byte_17DF6:	dc.b 1
00018949 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001894E 01                         byte_17DFC:	dc.b 1
0001894F 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018954 01                         byte_17E02:	dc.b 1
00018955 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001895A 04                         byte_17E08:	dc.b 4
0001895B F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018960 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018965 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001896A 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001896F 00                         		dc.b 0
00018970 02                         byte_17E1E:	dc.b 2
00018971 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018976 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001897B 00                         		dc.b 0
0001897C 02                         byte_17E2A:	dc.b 2
0001897D 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018982 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018988 00                         		even
00018988 00                         		even
00018988                            
00018988                            ; ===========================================================================
00018988                            ; ---------------------------------------------------------------------------
00018988                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00018988                            ; ---------------------------------------------------------------------------
00018988                            
00018988                            
00018988                            obj77:					; XREF: Obj_Index
00018988 7000                       		moveq	#0,d0
0001898A 1028 0024                  		move.b	$24(a0),d0
0001898E 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018992 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018996                            ; ===========================================================================
00018996 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00018998 0000                       		dc.w obj77_ShipMain-obj77_Index
0001899A 0000                       		dc.w obj77_FaceMain-obj77_Index
0001899C 0000                       		dc.w obj77_FlameMain-obj77_Index
0001899E                            
0001899E 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
000189A0 0401                       		dc.b 4,	1
000189A2 0607                       		dc.b 6,	7
000189A4                            ; ===========================================================================
000189A4                            
000189A4                            obj77_Main:				; XREF: obj77_Index
000189A4 45F9 0001 899E             		lea	(obj77_ObjData).l,a2
000189AA 2248                       		movea.l	a0,a1
000189AC 7202                       		moveq	#2,d1
000189AE 6000                       		bra.s	obj77_LoadBoss
000189B0                            ; ===========================================================================
000189B0                            
000189B0                            obj77_Loop:
000189B0 4EB9 0000 E492             		jsr	SingleObjLoad2
000189B6 6600                       		bne.s	loc2_17772
000189B8                            
000189B8                            obj77_LoadBoss:				; XREF: obj77_Main
000189B8 135A 0024                  		move.b	(a2)+,$24(a1)
000189BC 12BC 0077                  		move.b	#$77,0(a1)
000189C0 3368 0008 0008             		move.w	8(a0),8(a1)
000189C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000189CC 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000189D4 337C 0400 0002             		move.w	#$400,2(a1)
000189DA 137C 0004 0001             		move.b	#4,1(a1)
000189E0 137C 0020 0019             		move.b	#$20,$19(a1)
000189E6 137C 0003 0018             		move.b	#3,$18(a1)
000189EC 135A 001C                  		move.b	(a2)+,$1C(a1)
000189F0 2348 0034                  		move.l	a0,$34(a1)
000189F4 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
000189F8                            
000189F8                            loc2_17772:
000189F8 3168 0008 0030             		move.w	8(a0),$30(a0)
000189FE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018A04 117C 000F 0020             		move.b	#$F,$20(a0)
00018A0A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018A10                            
00018A10                            obj77_ShipMain:				; XREF: obj77_Index
00018A10 7000                       		moveq	#0,d0
00018A12 1028 0025                  		move.b	$25(a0),d0
00018A16 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018A1A 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018A1E 43F9 0001 884A             		lea	(Ani_TetoB).l,a1
00018A24 4EB9 0000 B04C             		jsr	AnimateSprite
00018A2A 1028 0022                  		move.b	$22(a0),d0
00018A2E 0200 0003                  		andi.b	#3,d0
00018A32 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018A38 8128 0001                  		or.b	d0,1(a0)
00018A3C 4EF9 0000 DFF6             		jmp	DisplaySprite
00018A42                            ; ===========================================================================
00018A42 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018A44 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018A46 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018A48 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018A4A 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018A4C 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018A4E 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018A50 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018A52                            ; ===========================================================================
00018A52                            
00018A52                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018A52                            	;	move.w	#$100,$12(a0)	; move ship down
00018A52 6100 F964                  		bsr.w	BossMove
00018A56 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018A5C 6600                       		bne.s	loc2_177E6
00018A5E 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018A64 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018A68                            
00018A68                            loc2_177E6:
00018A68                            ;		move.b	$3F(a0),d0
00018A68                            ;		jsr	(CalcSine).l
00018A68 EC40                       		asr.w	#6,d0
00018A6A D068 0038                  		add.w	$38(a0),d0
00018A6E 3140 000C                  		move.w	d0,$C(a0)
00018A72 3168 0030 0008             		move.w	$30(a0),8(a0)
00018A78 5428 003F                  		addq.b	#2,$3F(a0)
00018A7C 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018A82 6400                       		bcc.s	locret_1784A2
00018A84 4A28 0022                  		tst.b	$22(a0)
00018A88 6B00                       		bmi.s	loc2_1784C
00018A8A 4A28 0020                  		tst.b	$20(a0)
00018A8E 6600                       		bne.s	locret_1784A2
00018A90 4A28 003E                  		tst.b	$3E(a0)
00018A94 6600                       		bne.s	obj77_ShipFlash
00018A96 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018A9C 303C 00AC                  		move.w	#$AC,d0
00018AA0 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018AA6                            
00018AA6                            obj77_ShipFlash:
00018AA6 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018AAA 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018AAC 4A51                       		tst.w	(a1)
00018AAE 6600                       		bne.s	loc2_1783C
00018AB0 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018AB4                            
00018AB4                            loc2_1783C:
00018AB4 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018AB6 5328 003E                  		subq.b	#1,$3E(a0)
00018ABA 6600                       		bne.s	locret_1784A2
00018ABC 117C 000F 0020             		move.b	#$F,$20(a0)
00018AC2                            
00018AC2                            locret_1784A2:
00018AC2 4E75                       		rts	
00018AC4                            ; ===========================================================================
00018AC4                            
00018AC4                            loc2_1784C:				; XREF: loc2_177E6
00018AC4 7064                       		moveq	#100,d0
00018AC6 6100 0000                  		bsr.w	AddPoints
00018ACA 117C 000A 0025             		move.b	#$A,$25(a0)
00018AD0 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018AD6 4E75                       		rts	
00018AD8                            ; ===========================================================================
00018AD8                            
00018AD8                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018AD8 317C FF00 0010             		move.w	#-$100,$10(a0)
00018ADE 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018AE4 6100 F8D2                  		bsr.w	BossMove
00018AE8 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018AEE 6600                       		bne.s	loc2_17916
00018AF0 317C 0000 0010             		move.w	#0,$10(a0)
00018AF6 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018AFC 317C 0000 0012             		move.w	#0,$12(a0)
00018B02 5428 0025                  		addq.b	#2,$25(a0)
00018B06                            
00018B06                            loc2_17910:
00018B06 317C 0077 003C             		move.w	#$77,$3C(a0)
00018B0C                            
00018B0C                            loc2_17916:
00018B0C 6000 FF5A                  		bra.w	loc2_177E6
00018B10                            ; ===========================================================================
00018B10                            
00018B10                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018B10 6100 F8A6                  		bsr.w	BossMove
00018B14 5368 003C                  		subq.w	#1,$3C(a0)
00018B18 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018B1A 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018B20 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018B26 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018B2C 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018B32 6600                       		bne.s	loc2_17950 ; if not branch
00018B34                            
00018B34                            fatass_attack:
00018B34 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018B3A 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018B40 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018B46 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018B48 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018B4C 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018B52                            
00018B52                            loc2_17950:
00018B52 6000 FF14                  		bra.w	loc2_177E6
00018B56                            ; ===========================================================================
00018B56                            
00018B56                            loc2_17954:				; XREF: obj77_ShipIndex
00018B56 6100 F860                  		bsr.w	BossMove
00018B5A 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018B60                            		; i suck at programming
00018B60 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018B66 6600                       		bne.s	loc2_17976    ; if not blah blah
00018B68 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018B6E 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018B72 303C 00B9                  		move.w	#$B9,d0
00018B76 4EB9 0000 1588             		jsr	(PlaySound).l	; play the earthquake sound
00018B7C                            
00018B7C                            Peartobombs:	
00018B7C 4EB9 0000 E492                		jsr	SingleObjLoad2
00018B82 6600                       		bne.s	secondone
00018B84 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018B88 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018B8E 337C 0670 000C             		move.w	#$670,$C(a1)
00018B94                            secondone:		
00018B94 4EB9 0000 E492                		jsr	SingleObjLoad2
00018B9A 6600                       		bne.s	loc2_17976		
00018B9C 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018BA0 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018BA6 337C 0670 000C             		move.w	#$670,$C(a1)
00018BAC                            lastone:
00018BAC 4EB9 0000 E492                		jsr	SingleObjLoad2
00018BB2 6600                       		bne.s	loc2_17976		
00018BB4 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018BB8 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018BBE 337C 0670 000C             		move.w	#$670,$C(a1)
00018BC4                            		
00018BC4                            loc2_17976:
00018BC4 6000 FEA2                  		bra.w	loc2_177E6
00018BC8                            		
00018BC8                            ; ===========================================================================
00018BC8                            Fatassruns:
00018BC8 6100 F7EE                   		bsr.w	BossMove
00018BCC 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018BD2 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018BD8 6600                       		bne.s	processstuff ; is not go here
00018BDA 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018BE0 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018BE6 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018BEA 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018BF0 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018BF6                            		
00018BF6                            		
00018BF6                            processstuff:
00018BF6 6000 FE70                  		bra.w	loc2_177E6
00018BFA                            ; ===========================================================================
00018BFA                            
00018BFA                            loc2_1797A:				; XREF: obj77_ShipIndex
00018BFA 5368 003C                  		subq.w	#1,$3C(a0)
00018BFE 6B00                       		bmi.s	loc2_17984
00018C00 6000 F774                  		bra.w	BossDefeated
00018C04                            ; ===========================================================================
00018C04                            
00018C04                            loc2_17984:
00018C04 08E8 0000 0022             		bset	#0,$22(a0)
00018C0A 08A8 0007 0022             		bclr	#7,$22(a0)
00018C10 4268 0010                  		clr.w	$10(a0)
00018C14 5428 0025                  		addq.b	#2,$25(a0)
00018C18 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018C1E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018C22 6600                       		bne.s	locret_179AA2
00018C24 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018C2A                            
00018C2A                            locret_179AA2:
00018C2A 4E75                       		rts	
00018C2C                            ; ===========================================================================
00018C2C                            
00018C2C                            loc2_179AC:				; XREF: obj77_ShipIndex
00018C2C 5268 003C                  		addq.w	#1,$3C(a0)
00018C30 6700                       		beq.s	loc2_179BC
00018C32 6A00                       		bpl.s	loc2_179C2
00018C34 0668 0018 0012             		addi.w	#$18,$12(a0)
00018C3A 6000                       		bra.s	loc2_179EE
00018C3C                            ; ===========================================================================
00018C3C                            
00018C3C                            loc2_179BC:
00018C3C 4268 0012                  		clr.w	$12(a0)
00018C40 6000                       		bra.s	loc2_179EE
00018C42                            ; ===========================================================================
00018C42                            
00018C42                            loc2_179C2:
00018C42 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018C48 6500                       		bcs.s	loc2_179DA
00018C4A 6700                       		beq.s	loc2_179E0
00018C4C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018C52 6500                       		bcs.s	loc2_179EE
00018C54 5428 0025                  		addq.b	#2,$25(a0)
00018C58 6000                       		bra.s	loc2_179EE
00018C5A                            ; ===========================================================================
00018C5A                            
00018C5A                            loc2_179DA:
00018C5A 5168 0012                  		subq.w	#8,$12(a0)
00018C5E 6000                       		bra.s	loc2_179EE
00018C60                            ; ===========================================================================
00018C60                            
00018C60                            loc2_179E0:
00018C60 4268 0012                  		clr.w	$12(a0)
00018C64 303C 0097                  		move.w	#$97,d0
00018C68 4EB9 0000 1588             		jsr	(PlaySound).l	; play lz3 music
00018C6E                            
00018C6E                            loc2_179EE:
00018C6E 6100 F748                  		bsr.w	BossMove
00018C72 6000 FDF4                  		bra.w	loc2_177E6
00018C76                            ; ===========================================================================
00018C76                            
00018C76                            loc2_179F6:				; XREF: obj77_ShipIndex
00018C76 317C 0400 0010             		move.w	#$400,$10(a0)
00018C7C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018C82 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018C88 6700                       		beq.s	loc2_17A10
00018C8A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018C8E 6000                       		bra.s	loc2_17A16
00018C90                            ; ===========================================================================
00018C90                            
00018C90                            loc2_17A10:
00018C90 4A28 0001                  		tst.b	1(a0)
00018C94 6A00                       		bpl.s	obj77_ShipDel
00018C96                            
00018C96                            loc2_17A16:
00018C96 6100 F720                  		bsr.w	BossMove
00018C9A 6000 FDCC                  		bra.w	loc2_177E6
00018C9E                            ; ===========================================================================
00018C9E                            
00018C9E                            obj77_ShipDel:
00018C9E 4EF9 0000 E032             		jmp	DeleteObject
00018CA4                            ; ===========================================================================
00018CA4                            
00018CA4                            obj77_FaceMain:				; XREF: obj77_Index
00018CA4 4E75                       		rts
00018CA6                            ; ===========================================================================
00018CA6                            
00018CA6                            obj77_FlameMain:			; XREF: obj77_Index
00018CA6 4E75                       		rts
00018CA8                            ; ===========================================================================
00018CA8                            
00018CA8                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018CA8 43F9 0001 884A             		lea	(Ani_TetoB).l,a1
00018CAE 4EB9 0000 B04C             		jsr	AnimateSprite
00018CB4 4EF9 0000 DFF6             		jmp	DisplaySprite
00018CBA                            ; ---------------------------------------------------------------------------
00018CBA                            ; Sprite mappings - Fatass teto boss
00018CBA                            ; ---------------------------------------------------------------------------
00018CBA                            Map_TetoBoss:
00018CBA                            	include "_maps\tetoboss.asm"
00018CBA                            Map_f09a:
00018CBA 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018CBC 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018CBE 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018CC0 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018CC2 03                         Map_f09a_8: 	dc.b $3
00018CC3 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018CC8 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018CCD DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018CD2 06                         Map_f09a_18: 	dc.b $6
00018CD3 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018CD8 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018CDD E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018CE2 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018CE7 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018CEC 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018CF1 03                         Map_f09a_37: 	dc.b $3
00018CF2 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018CF7 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018CFC DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018D01 06                         Map_f09a_47: 	dc.b $6
00018D02 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018D07 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018D0C E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018D11 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018D16 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018D1B 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018D20                            	even
00018D20                            	even
00018D20                            ; ===========================================================================
00018D20                            ; ---------------------------------------------------------------------------
00018D20                            ; Object 73 - Eggman (MZ)
00018D20                            ; ---------------------------------------------------------------------------
00018D20                            
00018D20                            Obj73:					; XREF: Obj_Index
00018D20 7000                       		moveq	#0,d0
00018D22 1028 0024                  		move.b	$24(a0),d0
00018D26 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018D2A 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018D2E                            ; ===========================================================================
00018D2E 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018D30 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018D32 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018D34 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018D36 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018D38                            
00018D38 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018D3B 0401 04                    		dc.b 4,	1, 4
00018D3E 0607 04                    		dc.b 6,	7, 4
00018D41 0800 03                    		dc.b 8,	0, 3
00018D44                            ; ===========================================================================
00018D44                            
00018D44                            Obj73_Main:				; XREF: Obj73_Index
00018D44 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D4A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D50 117C 000F 0020             		move.b	#$F,$20(a0)
00018D56 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018D5C 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018D60 2248                       		movea.l	a0,a1
00018D62 7203                       		moveq	#3,d1
00018D64 6000                       		bra.s	Obj73_LoadBoss
00018D66                            ; ===========================================================================
00018D66                            
00018D66                            Obj73_Loop:
00018D66 4EB9 0000 E492             		jsr	SingleObjLoad2
00018D6C 6600                       		bne.s	Obj73_ShipMain
00018D6E 12BC 0073                  		move.b	#$73,0(a1)
00018D72 3368 0008 0008             		move.w	8(a0),8(a1)
00018D78 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018D7E                            
00018D7E                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018D7E 08A8 0000 0022             		bclr	#0,$22(a0)
00018D84 4229 0025                  		clr.b	$25(a1)
00018D88 135A 0024                  		move.b	(a2)+,$24(a1)
00018D8C 135A 001C                  		move.b	(a2)+,$1C(a1)
00018D90 135A 0018                  		move.b	(a2)+,$18(a1)
00018D94 237C 0001 885E 0004        		move.l	#Map_Eggman,4(a1)
00018D9C 337C 0400 0002             		move.w	#$400,2(a1)
00018DA2 137C 0004 0001             		move.b	#4,1(a1)
00018DA8 137C 0020 0019             		move.b	#$20,$19(a1)
00018DAE 2348 0034                  		move.l	a0,$34(a1)
00018DB2 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018DB6                            
00018DB6                            Obj73_ShipMain:
00018DB6 7000                       		moveq	#0,d0
00018DB8 1028 0025                  		move.b	$25(a0),d0
00018DBC 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018DC0 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018DC4 43F9 0001 87FA             		lea	(Ani_Eggman).l,a1
00018DCA 4EB9 0000 B04C             		jsr	AnimateSprite
00018DD0 7003                       		moveq	#3,d0
00018DD2 C028 0022                  		and.b	$22(a0),d0
00018DD6 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018DDC 8128 0001                  		or.b	d0,1(a0)
00018DE0 4EF9 0000 DFF6             		jmp	DisplaySprite
00018DE6                            ; ===========================================================================
00018DE6 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018DE8 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018DEA 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018DEC 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018DEE 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018DF0                            ; ===========================================================================
00018DF0                            
00018DF0                            loc_18302:				; XREF: Obj73_ShipIndex
00018DF0 1028 003F                  		move.b	$3F(a0),d0
00018DF4 5428 003F                  		addq.b	#2,$3F(a0)
00018DF8 4EB9 0000 2D28             		jsr	(CalcSine).l
00018DFE E440                       		asr.w	#2,d0
00018E00 3140 0012                  		move.w	d0,$12(a0)
00018E04 317C FF00 0010             		move.w	#-$100,$10(a0)
00018E0A 6100 F5AC                  		bsr.w	BossMove
00018E0E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018E14 6600                       		bne.s	loc_18334
00018E16 5428 0025                  		addq.b	#2,$25(a0)
00018E1A 4228 0028                  		clr.b	$28(a0)
00018E1E 42A8 0010                  		clr.l	$10(a0)
00018E22                            
00018E22                            loc_18334:
00018E22 4EB9 0000 2D02             		jsr	(RandomNumber).l
00018E28 1140 0034                  		move.b	d0,$34(a0)
00018E2C                            
00018E2C                            loc_1833E:
00018E2C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E32 3168 0030 0008             		move.w	$30(a0),8(a0)
00018E38 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018E3E 6400                       		bcc.s	locret_18390
00018E40 4A28 0022                  		tst.b	$22(a0)
00018E44 6B00                       		bmi.s	loc_18392
00018E46 4A28 0020                  		tst.b	$20(a0)
00018E4A 6600                       		bne.s	locret_18390
00018E4C 4A28 003E                  		tst.b	$3E(a0)
00018E50 6600                       		bne.s	loc_18374
00018E52 117C 0028 003E             		move.b	#$28,$3E(a0)
00018E58 303C 00AC                  		move.w	#$AC,d0
00018E5C 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018E62                            
00018E62                            loc_18374:
00018E62 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018E66 7000                       		moveq	#0,d0
00018E68 4A51                       		tst.w	(a1)
00018E6A 6600                       		bne.s	loc_18382
00018E6C 303C 0EEE                  		move.w	#$EEE,d0
00018E70                            
00018E70                            loc_18382:
00018E70 3280                       		move.w	d0,(a1)
00018E72 5328 003E                  		subq.b	#1,$3E(a0)
00018E76 6600                       		bne.s	locret_18390
00018E78 117C 000F 0020             		move.b	#$F,$20(a0)
00018E7E                            
00018E7E                            locret_18390:
00018E7E 4E75                       		rts	
00018E80                            ; ===========================================================================
00018E80                            
00018E80                            loc_18392:				; XREF: loc_1833E
00018E80 7064                       		moveq	#100,d0
00018E82 6100 0000                  		bsr.w	AddPoints
00018E86 117C 0004 0025             		move.b	#4,$25(a0)
00018E8C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018E92 4268 0010                  		clr.w	$10(a0)
00018E96 4E75                       		rts	
00018E98                            ; ===========================================================================
00018E98                            
00018E98                            loc_183AA:				; XREF: Obj73_ShipIndex
00018E98 7000                       		moveq	#0,d0
00018E9A 1028 0028                  		move.b	$28(a0),d0
00018E9E 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018EA2 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018EA6 0228 0006 0028             		andi.b	#6,$28(a0)
00018EAC 6000 FF7E                  		bra.w	loc_1833E
00018EB0                            ; ===========================================================================
00018EB0 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018EB2 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EB4 0000                       		dc.w loc_183CA-off_183C2
00018EB6 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EB8                            ; ===========================================================================
00018EB8                            
00018EB8                            loc_183CA:				; XREF: off_183C2
00018EB8 4A68 0010                  		tst.w	$10(a0)
00018EBC 6600                       		bne.s	loc_183FE
00018EBE 7040                       		moveq	#$40,d0
00018EC0 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018EC6 6700                       		beq.s	loc_183E6
00018EC8 6500                       		bcs.s	loc_183DE
00018ECA 4440                       		neg.w	d0
00018ECC                            
00018ECC                            loc_183DE:
00018ECC 3140 0012                  		move.w	d0,$12(a0)
00018ED0 6000 F4E6                  		bra.w	BossMove
00018ED4                            ; ===========================================================================
00018ED4                            
00018ED4                            loc_183E6:
00018ED4 317C 0200 0010             		move.w	#$200,$10(a0)
00018EDA 317C 0100 0012             		move.w	#$100,$12(a0)
00018EE0 0828 0000 0022             		btst	#0,$22(a0)
00018EE6 6600                       		bne.s	loc_183FE
00018EE8 4468 0010                  		neg.w	$10(a0)
00018EEC                            
00018EEC                            loc_183FE:
00018EEC 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018EF2 6400                       		bcc.s	Obj73_MakeLava
00018EF4 6100 F4C2                  		bsr.w	BossMove
00018EF8 5968 0012                  		subq.w	#4,$12(a0)
00018EFC                            
00018EFC                            Obj73_MakeLava:
00018EFC 5328 0034                  		subq.b	#1,$34(a0)
00018F00 6400                       		bcc.s	loc_1845C
00018F02 4EB9 0000 E47C             		jsr	SingleObjLoad
00018F08 6600                       		bne.s	loc_1844A
00018F0A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018F0E 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018F14 4EB9 0000 2D02             		jsr	(RandomNumber).l
00018F1A 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018F20 80FC 0050                  		divu.w	#$50,d0
00018F24 4840                       		swap	d0
00018F26 0640 1878                  		addi.w	#$1878,d0
00018F2A 3340 0008                  		move.w	d0,8(a1)
00018F2E EE09                       		lsr.b	#7,d1
00018F30 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018F36                            
00018F36                            loc_1844A:
00018F36 4EB9 0000 2D02             		jsr	(RandomNumber).l
00018F3C 0200 001F                  		andi.b	#$1F,d0
00018F40 0600 0040                  		addi.b	#$40,d0
00018F44 1140 0034                  		move.b	d0,$34(a0)
00018F48                            
00018F48                            loc_1845C:
00018F48 0828 0000 0022             		btst	#0,$22(a0)
00018F4E 6700                       		beq.s	loc_18474
00018F50 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018F56 6D00                       		blt.s	locret_1849C
00018F58 317C 1910 0030             		move.w	#$1910,$30(a0)
00018F5E 6000                       		bra.s	loc_18482
00018F60                            ; ===========================================================================
00018F60                            
00018F60                            loc_18474:
00018F60 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018F66 6E00                       		bgt.s	locret_1849C
00018F68 317C 1830 0030             		move.w	#$1830,$30(a0)
00018F6E                            
00018F6E                            loc_18482:
00018F6E 4268 0010                  		clr.w	$10(a0)
00018F72 317C FE80 0012             		move.w	#-$180,$12(a0)
00018F78 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018F7E 6400                       		bcc.s	loc_18498
00018F80 4468 0012                  		neg.w	$12(a0)
00018F84                            
00018F84                            loc_18498:
00018F84 5428 0028                  		addq.b	#2,$28(a0)
00018F88                            
00018F88                            locret_1849C:
00018F88 4E75                       		rts	
00018F8A                            ; ===========================================================================
00018F8A                            
00018F8A                            Obj73_MakeLava2:			; XREF: off_183C2
00018F8A 6100 F42C                  		bsr.w	BossMove
00018F8E 3028 0038                  		move.w	$38(a0),d0
00018F92 0440 022C                  		subi.w	#$22C,d0
00018F96 6E00                       		bgt.s	locret_184F4
00018F98 303C 022C                  		move.w	#$22C,d0
00018F9C 4A68 0012                  		tst.w	$12(a0)
00018FA0 6700                       		beq.s	loc_184EA
00018FA2 4268 0012                  		clr.w	$12(a0)
00018FA6 317C 0050 003C             		move.w	#$50,$3C(a0)
00018FAC 0868 0000 0022             		bchg	#0,$22(a0)
00018FB2 4EB9 0000 E47C             		jsr	SingleObjLoad
00018FB8 6600                       		bne.s	loc_184EA
00018FBA 3368 0030 0008             		move.w	$30(a0),8(a1)
00018FC0 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018FC6 0669 0018 000C             		addi.w	#$18,$C(a1)
00018FCC 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018FD0 137C 0001 0028             		move.b	#1,$28(a1)
00018FD6                            
00018FD6                            loc_184EA:
00018FD6 5368 003C                  		subq.w	#1,$3C(a0)
00018FDA 6600                       		bne.s	locret_184F4
00018FDC 5428 0028                  		addq.b	#2,$28(a0)
00018FE0                            
00018FE0                            locret_184F4:
00018FE0 4E75                       		rts	
00018FE2                            ; ===========================================================================
00018FE2                            
00018FE2                            loc_184F6:				; XREF: Obj73_ShipIndex
00018FE2 5368 003C                  		subq.w	#1,$3C(a0)
00018FE6 6B00                       		bmi.s	loc_18500
00018FE8 6000 F38C                  		bra.w	BossDefeated
00018FEC                            ; ===========================================================================
00018FEC                            
00018FEC                            loc_18500:
00018FEC 08E8 0000 0022             		bset	#0,$22(a0)
00018FF2 08A8 0007 0022             		bclr	#7,$22(a0)
00018FF8 4268 0010                  		clr.w	$10(a0)
00018FFC 5428 0025                  		addq.b	#2,$25(a0)
00019000 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019006 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001900A 6600                       		bne.s	locret_1852A
0001900C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019012 4268 0012                  		clr.w	$12(a0)
00019016                            
00019016                            locret_1852A:
00019016 4E75                       		rts	
00019018                            ; ===========================================================================
00019018                            
00019018                            loc_1852C:				; XREF: Obj73_ShipIndex
00019018 5268 003C                  		addq.w	#1,$3C(a0)
0001901C 6700                       		beq.s	loc_18544
0001901E 6A00                       		bpl.s	loc_1854E
00019020 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019026 6400                       		bcc.s	loc_18544
00019028 0668 0018 0012             		addi.w	#$18,$12(a0)
0001902E 6000                       		bra.s	loc_1857A
00019030                            ; ===========================================================================
00019030                            
00019030                            loc_18544:
00019030 4268 0012                  		clr.w	$12(a0)
00019034 4268 003C                  		clr.w	$3C(a0)
00019038 6000                       		bra.s	loc_1857A
0001903A                            ; ===========================================================================
0001903A                            
0001903A                            loc_1854E:
0001903A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019040 6500                       		bcs.s	loc_18566
00019042 6700                       		beq.s	loc_1856C
00019044 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001904A 6500                       		bcs.s	loc_1857A
0001904C 5428 0025                  		addq.b	#2,$25(a0)
00019050 6000                       		bra.s	loc_1857A
00019052                            ; ===========================================================================
00019052                            
00019052                            loc_18566:
00019052 5168 0012                  		subq.w	#8,$12(a0)
00019056 6000                       		bra.s	loc_1857A
00019058                            ; ===========================================================================
00019058                            
00019058                            loc_1856C:
00019058 4268 0012                  		clr.w	$12(a0)
0001905C 303C 0083                  		move.w	#$83,d0
00019060 4EB9 0000 1588             		jsr	(PlaySound).l	; play MZ music
00019066                            
00019066                            loc_1857A:
00019066 6100 F350                  		bsr.w	BossMove
0001906A 6000 FDC0                  		bra.w	loc_1833E
0001906E                            ; ===========================================================================
0001906E                            
0001906E                            loc_18582:				; XREF: Obj73_ShipIndex
0001906E 317C 0500 0010             		move.w	#$500,$10(a0)
00019074 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001907A 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019080 6400                       		bcc.s	loc_1859C
00019082 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019086 6000                       		bra.s	loc_185A2
00019088                            ; ===========================================================================
00019088                            
00019088                            loc_1859C:
00019088 4A28 0001                  		tst.b	1(a0)
0001908C 6A00                       		bpl.s	Obj73_ShipDel
0001908E                            
0001908E                            loc_185A2:
0001908E 6100 F328                  		bsr.w	BossMove
00019092 6000 FD98                  		bra.w	loc_1833E
00019096                            ; ===========================================================================
00019096                            
00019096                            Obj73_ShipDel:
00019096 4EF9 0000 E032             		jmp	DeleteObject
0001909C                            ; ===========================================================================
0001909C                            
0001909C                            Obj73_FaceMain:				; XREF: Obj73_Index
0001909C 7000                       		moveq	#0,d0
0001909E 7201                       		moveq	#1,d1
000190A0 2268 0034                  		movea.l	$34(a0),a1
000190A4 1029 0025                  		move.b	$25(a1),d0
000190A8 5540                       		subq.w	#2,d0
000190AA 6600                       		bne.s	loc_185D2
000190AC 0829 0001 0028             		btst	#1,$28(a1)
000190B2 6700                       		beq.s	loc_185DA
000190B4 4A69 0012                  		tst.w	$12(a1)
000190B8 6600                       		bne.s	loc_185DA
000190BA 7204                       		moveq	#4,d1
000190BC 6000                       		bra.s	loc_185EE
000190BE                            ; ===========================================================================
000190BE                            
000190BE                            loc_185D2:
000190BE 5500                       		subq.b	#2,d0
000190C0 6B00                       		bmi.s	loc_185DA
000190C2 720A                       		moveq	#$A,d1
000190C4 6000                       		bra.s	loc_185EE
000190C6                            ; ===========================================================================
000190C6                            
000190C6                            loc_185DA:
000190C6 4A29 0020                  		tst.b	$20(a1)
000190CA 6600                       		bne.s	loc_185E4
000190CC 7205                       		moveq	#5,d1
000190CE 6000                       		bra.s	loc_185EE
000190D0                            ; ===========================================================================
000190D0                            
000190D0                            loc_185E4:
000190D0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000190D6 6500                       		bcs.s	loc_185EE
000190D8 7204                       		moveq	#4,d1
000190DA                            
000190DA                            loc_185EE:
000190DA 1141 001C                  		move.b	d1,$1C(a0)
000190DE 5900                       		subq.b	#4,d0
000190E0 6600                       		bne.s	loc_18602
000190E2 117C 0006 001C             		move.b	#6,$1C(a0)
000190E8 4A28 0001                  		tst.b	1(a0)
000190EC 6A00                       		bpl.s	Obj73_FaceDel
000190EE                            
000190EE                            loc_18602:
000190EE 6000                       		bra.s	Obj73_Display
000190F0                            ; ===========================================================================
000190F0                            
000190F0                            Obj73_FaceDel:
000190F0 4EF9 0000 E032             		jmp	DeleteObject
000190F6                            ; ===========================================================================
000190F6                            
000190F6                            Obj73_FlameMain:			; XREF: Obj73_Index
000190F6 117C 0007 001C             		move.b	#7,$1C(a0)
000190FC 2268 0034                  		movea.l	$34(a0),a1
00019100 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019106 6D00                       		blt.s	loc_1862A
00019108 117C 000B 001C             		move.b	#$B,$1C(a0)
0001910E 4A28 0001                  		tst.b	1(a0)
00019112 6A00                       		bpl.s	Obj73_FlameDel
00019114 6000                       		bra.s	loc_18636
00019116                            ; ===========================================================================
00019116                            
00019116                            loc_1862A:
00019116 4A69 0010                  		tst.w	$10(a1)
0001911A 6700                       		beq.s	loc_18636
0001911C 117C 0008 001C             		move.b	#8,$1C(a0)
00019122                            
00019122                            loc_18636:
00019122 6000                       		bra.s	Obj73_Display
00019124                            ; ===========================================================================
00019124                            
00019124                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019124 4EF9 0000 E032             		jmp	DeleteObject
0001912A                            ; ===========================================================================
0001912A                            
0001912A                            Obj73_Display:
0001912A 43F9 0001 87FA             		lea	(Ani_Eggman).l,a1
00019130 4EB9 0000 B04C             		jsr	AnimateSprite
00019136                            
00019136                            loc_1864A:
00019136 2268 0034                  		movea.l	$34(a0),a1
0001913A 3169 0008 0008             		move.w	8(a1),8(a0)
00019140 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019146 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001914C 7003                       		moveq	#3,d0
0001914E C028 0022                  		and.b	$22(a0),d0
00019152 0228 00FC 0001             		andi.b	#-4,1(a0)
00019158 8128 0001                  		or.b	d0,1(a0)
0001915C 4EF9 0000 DFF6             		jmp	DisplaySprite
00019162                            ; ===========================================================================
00019162                            
00019162                            Obj73_TubeMain:				; XREF: Obj73_Index
00019162 2268 0034                  		movea.l	$34(a0),a1
00019166 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001916C 6600                       		bne.s	loc_18688
0001916E 4A28 0001                  		tst.b	1(a0)
00019172 6A00                       		bpl.s	Obj73_TubeDel
00019174                            
00019174                            loc_18688:
00019174 217C 0001 8926 0004        		move.l	#Map_BossItems,4(a0)
0001917C 317C 246C 0002             		move.w	#$246C,2(a0)
00019182 117C 0004 001A             		move.b	#4,$1A(a0)
00019188 60AC                       		bra.s	loc_1864A
0001918A                            ; ===========================================================================
0001918A                            
0001918A                            Obj73_TubeDel:
0001918A 4EF9 0000 E032             		jmp	DeleteObject
00019190                            ; ===========================================================================
00019190                            ; ---------------------------------------------------------------------------
00019190                            ; Object 74 - lava that	Eggman drops (MZ)
00019190                            ; ---------------------------------------------------------------------------
00019190                            
00019190                            Obj74:					; XREF: Obj_Index
00019190 7000                       		moveq	#0,d0
00019192 1028 0024                  		move.b	$24(a0),d0
00019196 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001919A 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001919E 4EF9 0000 DFF6             		jmp	DisplaySprite
000191A4                            ; ===========================================================================
000191A4 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000191A6 0000                       		dc.w Obj74_Action-Obj74_Index
000191A8 0000                       		dc.w loc_18886-Obj74_Index
000191AA 0000                       		dc.w Obj74_Delete3-Obj74_Index
000191AC                            ; ===========================================================================
000191AC                            
000191AC                            Obj74_Main:				; XREF: Obj74_Index
000191AC 117C 0008 0016             		move.b	#8,$16(a0)
000191B2 117C 0008 0017             		move.b	#8,$17(a0)
000191B8 217C 0000 BC4A 0004        		move.l	#Map_obj14,4(a0)
000191C0 317C 0345 0002             		move.w	#$345,2(a0)
000191C6 117C 0004 0001             		move.b	#4,1(a0)
000191CC 117C 0005 0018             		move.b	#5,$18(a0)
000191D2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000191D8 117C 0008 0019             		move.b	#8,$19(a0)
000191DE 5428 0024                  		addq.b	#2,$24(a0)
000191E2 4A28 0028                  		tst.b	$28(a0)
000191E6 6600                       		bne.s	loc_1870A
000191E8 117C 008B 0020             		move.b	#$8B,$20(a0)
000191EE 5428 0024                  		addq.b	#2,$24(a0)
000191F2 6000 0000                  		bra.w	loc_18886
000191F6                            ; ===========================================================================
000191F6                            
000191F6                            loc_1870A:
000191F6 117C 001E 0029             		move.b	#$1E,$29(a0)
000191FC 303C 00AE                  		move.w	#$AE,d0
00019200 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play lava sound
00019206                            
00019206                            Obj74_Action:				; XREF: Obj74_Index
00019206 7000                       		moveq	#0,d0
00019208 1028 0025                  		move.b	$25(a0),d0
0001920C 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019210 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019214 4EB9 0000 DFD0             		jsr	SpeedToPos
0001921A 43F9 0000 EEB0             		lea	(Ani_obj14).l,a1
00019220 4EB9 0000 B04C             		jsr	AnimateSprite
00019226 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001922C 6200                       		bhi.s	Obj74_Delete
0001922E 4E75                       		rts	
00019230                            ; ===========================================================================
00019230                            
00019230                            Obj74_Delete:
00019230 4EF9 0000 E032             		jmp	DeleteObject
00019236                            ; ===========================================================================
00019236 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019238 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001923A 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001923C 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001923E                            ; ===========================================================================
0001923E                            
0001923E                            Obj74_Drop:				; XREF: Obj74_Index2
0001923E 08E8 0001 0022             		bset	#1,$22(a0)
00019244 5328 0029                  		subq.b	#1,$29(a0)
00019248 6A00                       		bpl.s	locret_18780
0001924A 117C 008B 0020             		move.b	#$8B,$20(a0)
00019250 4228 0028                  		clr.b	$28(a0)
00019254 0668 0018 0012             		addi.w	#$18,$12(a0)
0001925A 08A8 0001 0022             		bclr	#1,$22(a0)
00019260 6100 C6A4                  		bsr.w	ObjHitFloor
00019264 4A41                       		tst.w	d1
00019266 6A00                       		bpl.s	locret_18780
00019268 5428 0025                  		addq.b	#2,$25(a0)
0001926C                            
0001926C                            locret_18780:
0001926C 4E75                       		rts	
0001926E                            ; ===========================================================================
0001926E                            
0001926E                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001926E 5568 000C                  		subq.w	#2,$C(a0)
00019272 08E8 0007 0002             		bset	#7,2(a0)
00019278 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001927E 4268 0012                  		clr.w	$12(a0)
00019282 3168 0008 0030             		move.w	8(a0),$30(a0)
00019288 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001928E 117C 0003 0029             		move.b	#3,$29(a0)
00019294 4EB9 0000 E492             		jsr	SingleObjLoad2
0001929A 6600                       		bne.s	loc_187CA
0001929C 47D1                       		lea	(a1),a3
0001929E 45D0                       		lea	(a0),a2
000192A0 7003                       		moveq	#3,d0
000192A2                            
000192A2                            Obj74_Loop:
000192A2 26DA                       		move.l	(a2)+,(a3)+
000192A4 26DA                       		move.l	(a2)+,(a3)+
000192A6 26DA                       		move.l	(a2)+,(a3)+
000192A8 26DA                       		move.l	(a2)+,(a3)+
000192AA 51C8 FFF6                  		dbf	d0,Obj74_Loop
000192AE                            
000192AE 4469 0010                  		neg.w	$10(a1)
000192B2 5429 0025                  		addq.b	#2,$25(a1)
000192B6                            
000192B6                            loc_187CA:
000192B6 5428 0025                  		addq.b	#2,$25(a0)
000192BA 4E75                       		rts	
000192BC                            
000192BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000192BC                            
000192BC                            
000192BC                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000192BC 4EB9 0000 E492             		jsr	SingleObjLoad2
000192C2 6600                       		bne.s	locret_187EE
000192C4 3368 0008 0008             		move.w	8(a0),8(a1)
000192CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000192D0 12BC 0074                  		move.b	#$74,(a1)
000192D4 337C 0067 0028             		move.w	#$67,$28(a1)
000192DA                            
000192DA                            locret_187EE:
000192DA 4E75                       		rts	
000192DC                            ; End of function Obj74_Duplicate2
000192DC                            
000192DC                            ; ===========================================================================
000192DC                            
000192DC                            Obj74_Duplicate:			; XREF: Obj74_Index2
000192DC 6100 C628                  		bsr.w	ObjHitFloor
000192E0 4A41                       		tst.w	d1
000192E2 6A00                       		bpl.s	loc_18826
000192E4 3028 0008                  		move.w	8(a0),d0
000192E8 0C40 1940                  		cmpi.w	#$1940,d0
000192EC 6E00                       		bgt.s	loc_1882C
000192EE 3228 0030                  		move.w	$30(a0),d1
000192F2 B240                       		cmp.w	d0,d1
000192F4 6700                       		beq.s	loc_1881E
000192F6 0240 0010                  		andi.w	#$10,d0
000192FA 0241 0010                  		andi.w	#$10,d1
000192FE B240                       		cmp.w	d0,d1
00019300 6700                       		beq.s	loc_1881E
00019302 61B8                       		bsr.s	Obj74_Duplicate2
00019304 3168 0008 0032             		move.w	8(a0),$32(a0)
0001930A                            
0001930A                            loc_1881E:
0001930A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019310 4E75                       		rts	
00019312                            ; ===========================================================================
00019312                            
00019312                            loc_18826:
00019312 5428 0025                  		addq.b	#2,$25(a0)
00019316 4E75                       		rts	
00019318                            ; ===========================================================================
00019318                            
00019318                            loc_1882C:
00019318 5428 0024                  		addq.b	#2,$24(a0)
0001931C 4E75                       		rts	
0001931E                            ; ===========================================================================
0001931E                            
0001931E                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001931E 08A8 0001 0022             		bclr	#1,$22(a0)
00019324 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001932A 3028 0008                  		move.w	8(a0),d0
0001932E 9068 0032                  		sub.w	$32(a0),d0
00019332 6A00                       		bpl.s	loc_1884A
00019334 4440                       		neg.w	d0
00019336                            
00019336                            loc_1884A:
00019336 0C40 0012                  		cmpi.w	#$12,d0
0001933A 6600                       		bne.s	loc_18856
0001933C 08A8 0007 0002             		bclr	#7,2(a0)
00019342                            
00019342                            loc_18856:
00019342 6100 C5C2                  		bsr.w	ObjHitFloor
00019346 4A41                       		tst.w	d1
00019348 6A00                       		bpl.s	locret_1887E
0001934A 5328 0029                  		subq.b	#1,$29(a0)
0001934E 6700                       		beq.s	Obj74_Delete2
00019350 4268 0012                  		clr.w	$12(a0)
00019354 3168 0032 0008             		move.w	$32(a0),8(a0)
0001935A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019360 08E8 0007 0002             		bset	#7,2(a0)
00019366 5528 0025                  		subq.b	#2,$25(a0)
0001936A                            
0001936A                            locret_1887E:
0001936A 4E75                       		rts	
0001936C                            ; ===========================================================================
0001936C                            
0001936C                            Obj74_Delete2:
0001936C 4EF9 0000 E032             		jmp	DeleteObject
00019372                            ; ===========================================================================
00019372                            
00019372                            loc_18886:				; XREF: Obj74_Index
00019372 08E8 0007 0002             		bset	#7,2(a0)
00019378 5328 0029                  		subq.b	#1,$29(a0)
0001937C 6600                       		bne.s	Obj74_Animate
0001937E 117C 0001 001C             		move.b	#1,$1C(a0)
00019384 5968 000C                  		subq.w	#4,$C(a0)
00019388 4228 0020                  		clr.b	$20(a0)
0001938C                            
0001938C                            Obj74_Animate:
0001938C 43F9 0000 EEB0             		lea	(Ani_obj14).l,a1
00019392 4EF9 0000 B04C             		jmp	AnimateSprite
00019398                            ; ===========================================================================
00019398                            
00019398                            Obj74_Delete3:				; XREF: Obj74_Index
00019398 4EF9 0000 E032             		jmp	DeleteObject
0001939E                            ; ===========================================================================
0001939E                            
0001939E                            Obj7A_Delete:
0001939E 4EF9 0000 E032             		jmp	DeleteObject
000193A4                            ; ===========================================================================
000193A4                            ; ---------------------------------------------------------------------------
000193A4                            ; Object 7A - Eggman (SLZ)
000193A4                            ; ---------------------------------------------------------------------------
000193A4                            
000193A4                            Obj7A:					; XREF: Obj_Index
000193A4 7000                       		moveq	#0,d0
000193A6 1028 0024                  		move.b	$24(a0),d0
000193AA 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000193AE 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000193B2                            ; ===========================================================================
000193B2 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000193B4 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000193B6 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000193B8 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000193BA 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000193BC                            
000193BC 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000193BF 0401 04                    		dc.b 4,	1, 4
000193C2 0607 04                    		dc.b 6,	7, 4
000193C5 0800 03                    		dc.b 8,	0, 3
000193C8                            ; ===========================================================================
000193C8                            
000193C8                            Obj7A_Main:				; XREF: Obj7A_Index
000193C8 317C 2188 0008             		move.w	#$2188,8(a0)
000193CE 317C 0228 000C             		move.w	#$228,$C(a0)
000193D4 3168 0008 0030             		move.w	8(a0),$30(a0)
000193DA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000193E0 117C 000F 0020             		move.b	#$F,$20(a0)
000193E6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000193EC 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000193F0 2248                       		movea.l	a0,a1
000193F2 7203                       		moveq	#3,d1
000193F4 6000                       		bra.s	Obj7A_LoadBoss
000193F6                            ; ===========================================================================
000193F6                            
000193F6                            Obj7A_Loop:
000193F6 4EB9 0000 E492             		jsr	SingleObjLoad2
000193FC 6600                       		bne.s	loc_1895C
000193FE 12BC 007A                  		move.b	#$7A,0(a1)
00019402 3368 0008 0008             		move.w	8(a0),8(a1)
00019408 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001940E                            
0001940E                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001940E 08A8 0000 0022             		bclr	#0,$22(a0)
00019414 4229 0025                  		clr.b	$25(a1)
00019418 135A 0024                  		move.b	(a2)+,$24(a1)
0001941C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019420 135A 0018                  		move.b	(a2)+,$18(a1)
00019424 237C 0001 885E 0004        		move.l	#Map_Eggman,4(a1)
0001942C 337C 0400 0002             		move.w	#$400,2(a1)
00019432 137C 0004 0001             		move.b	#4,1(a1)
00019438 137C 0020 0019             		move.b	#$20,$19(a1)
0001943E 2348 0034                  		move.l	a0,$34(a1)
00019442 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019446                            
00019446                            loc_1895C:
00019446 43F8 D040                  		lea	($FFFFD040).w,a1
0001944A 45E8 002A                  		lea	$2A(a0),a2
0001944E 705E                       		moveq	#$5E,d0
00019450 723E                       		moveq	#$3E,d1
00019452                            
00019452                            loc_18968:
00019452 B011                       		cmp.b	(a1),d0
00019454 6600                       		bne.s	loc_18974
00019456 4A29 0028                  		tst.b	$28(a1)
0001945A 6700                       		beq.s	loc_18974
0001945C 34C9                       		move.w	a1,(a2)+
0001945E                            
0001945E                            loc_18974:
0001945E D2FC 0040                  		adda.w	#$40,a1
00019462 51C9 FFEE                  		dbf	d1,loc_18968
00019466                            
00019466                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019466 7000                       		moveq	#0,d0
00019468 1028 0025                  		move.b	$25(a0),d0
0001946C 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019470 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019474 43F9 0001 87FA             		lea	(Ani_Eggman).l,a1
0001947A 4EB9 0000 B04C             		jsr	AnimateSprite
00019480 7003                       		moveq	#3,d0
00019482 C028 0022                  		and.b	$22(a0),d0
00019486 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001948C 8128 0001                  		or.b	d0,1(a0)
00019490 4EF9 0000 DFF6             		jmp	DisplaySprite
00019496                            ; ===========================================================================
00019496 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019498 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001949A 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001949C 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001949E 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000194A0 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000194A2                            ; ===========================================================================
000194A2                            
000194A2                            loc_189B8:				; XREF: Obj7A_ShipIndex
000194A2 317C FF00 0010             		move.w	#-$100,$10(a0)
000194A8 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000194AE 6400                       		bcc.s	loc_189CA
000194B0 5428 0025                  		addq.b	#2,$25(a0)
000194B4                            
000194B4                            loc_189CA:
000194B4 6100 EF02                  		bsr.w	BossMove
000194B8 1028 003F                  		move.b	$3F(a0),d0
000194BC 5428 003F                  		addq.b	#2,$3F(a0)
000194C0 4EB9 0000 2D28             		jsr	(CalcSine).l
000194C6 EC40                       		asr.w	#6,d0
000194C8 D068 0038                  		add.w	$38(a0),d0
000194CC 3140 000C                  		move.w	d0,$C(a0)
000194D0 3168 0030 0008             		move.w	$30(a0),8(a0)
000194D6 6000                       		bra.s	loc_189FE
000194D8                            ; ===========================================================================
000194D8                            
000194D8                            loc_189EE:
000194D8 6100 EEDE                  		bsr.w	BossMove
000194DC 3168 0038 000C             		move.w	$38(a0),$C(a0)
000194E2 3168 0030 0008             		move.w	$30(a0),8(a0)
000194E8                            
000194E8                            loc_189FE:
000194E8 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000194EE 6400                       		bcc.s	locret_18A44
000194F0 4A28 0022                  		tst.b	$22(a0)
000194F4 6B00                       		bmi.s	loc_18A46
000194F6 4A28 0020                  		tst.b	$20(a0)
000194FA 6600                       		bne.s	locret_18A44
000194FC 4A28 003E                  		tst.b	$3E(a0)
00019500 6600                       		bne.s	loc_18A28
00019502 117C 0020 003E             		move.b	#$20,$3E(a0)
00019508 303C 00AC                  		move.w	#$AC,d0
0001950C 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019512                            
00019512                            loc_18A28:
00019512 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019516 7000                       		moveq	#0,d0
00019518 4A51                       		tst.w	(a1)
0001951A 6600                       		bne.s	loc_18A36
0001951C 303C 0EEE                  		move.w	#$EEE,d0
00019520                            
00019520                            loc_18A36:
00019520 3280                       		move.w	d0,(a1)
00019522 5328 003E                  		subq.b	#1,$3E(a0)
00019526 6600                       		bne.s	locret_18A44
00019528 117C 000F 0020             		move.b	#$F,$20(a0)
0001952E                            
0001952E                            locret_18A44:
0001952E 4E75                       		rts	
00019530                            ; ===========================================================================
00019530                            
00019530                            loc_18A46:
00019530 7064                       		moveq	#100,d0
00019532 6100 0000                  		bsr.w	AddPoints
00019536 117C 0006 0025             		move.b	#6,$25(a0)
0001953C 117C 0078 003C             		move.b	#$78,$3C(a0)
00019542 4268 0010                  		clr.w	$10(a0)
00019546 4E75                       		rts	
00019548                            ; ===========================================================================
00019548                            
00019548                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019548 3028 0030                  		move.w	$30(a0),d0
0001954C 317C 0200 0010             		move.w	#$200,$10(a0)
00019552 0828 0000 0022             		btst	#0,$22(a0)
00019558 6600                       		bne.s	loc_18A7C
0001955A 4468 0010                  		neg.w	$10(a0)
0001955E 0C40 2008                  		cmpi.w	#$2008,d0
00019562 6E00                       		bgt.s	loc_18A88
00019564 6000                       		bra.s	loc_18A82
00019566                            ; ===========================================================================
00019566                            
00019566                            loc_18A7C:
00019566 0C40 2138                  		cmpi.w	#$2138,d0
0001956A 6D00                       		blt.s	loc_18A88
0001956C                            
0001956C                            loc_18A82:
0001956C 0868 0000 0022             		bchg	#0,$22(a0)
00019572                            
00019572                            loc_18A88:
00019572 3028 0008                  		move.w	8(a0),d0
00019576 72FF                       		moveq	#-1,d1
00019578 7402                       		moveq	#2,d2
0001957A 45E8 002A                  		lea	$2A(a0),a2
0001957E 7828                       		moveq	#$28,d4
00019580 4A68 0010                  		tst.w	$10(a0)
00019584 6A00                       		bpl.s	loc_18A9E
00019586 4444                       		neg.w	d4
00019588                            
00019588                            loc_18A9E:
00019588 321A                       		move.w	(a2)+,d1
0001958A 2641                       		movea.l	d1,a3
0001958C 082B 0003 0022             		btst	#3,$22(a3)
00019592 6600                       		bne.s	loc_18AB4
00019594 362B 0008                  		move.w	8(a3),d3
00019598 D644                       		add.w	d4,d3
0001959A 9640                       		sub.w	d0,d3
0001959C 6700                       		beq.s	loc_18AC0
0001959E                            
0001959E                            loc_18AB4:
0001959E 51CA FFE8                  		dbf	d2,loc_18A9E
000195A2                            
000195A2 1142 0028                  		move.b	d2,$28(a0)
000195A6 6000 FF0C                  		bra.w	loc_189CA
000195AA                            ; ===========================================================================
000195AA                            
000195AA                            loc_18AC0:
000195AA 1142 0028                  		move.b	d2,$28(a0)
000195AE 5428 0025                  		addq.b	#2,$25(a0)
000195B2 117C 0028 003C             		move.b	#$28,$3C(a0)
000195B8 6000 FEFA                  		bra.w	loc_189CA
000195BC                            ; ===========================================================================
000195BC                            
000195BC                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000195BC 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000195C2 6600                       		bne.s	loc_18B36
000195C4 70FF                       		moveq	#-1,d0
000195C6 1028 0028                  		move.b	$28(a0),d0
000195CA 4880                       		ext.w	d0
000195CC 6B00                       		bmi.s	loc_18B40
000195CE 5540                       		subq.w	#2,d0
000195D0 4440                       		neg.w	d0
000195D2 D040                       		add.w	d0,d0
000195D4 43E8 002A                  		lea	$2A(a0),a1
000195D8 3031 0000                  		move.w	(a1,d0.w),d0
000195DC 2440                       		movea.l	d0,a2
000195DE 43F8 D040                  		lea	($FFFFD040).w,a1
000195E2 723E                       		moveq	#$3E,d1
000195E4                            
000195E4                            loc_18AFA:
000195E4 B0A9 003C                  		cmp.l	$3C(a1),d0
000195E8 6700                       		beq.s	loc_18B40
000195EA D2FC 0040                  		adda.w	#$40,a1
000195EE 51C9 FFF4                  		dbf	d1,loc_18AFA
000195F2                            
000195F2 2F08                       		move.l	a0,-(sp)
000195F4 41D2                       		lea	(a2),a0
000195F6 4EB9 0000 E492             		jsr	SingleObjLoad2
000195FC 205F                       		movea.l	(sp)+,a0
000195FE 6600                       		bne.s	loc_18B40
00019600 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019604 3368 0008 0008             		move.w	8(a0),8(a1)
0001960A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019610 0669 0020 000C             		addi.w	#$20,$C(a1)
00019616 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001961C 234A 003C                  		move.l	a2,$3C(a1)
00019620                            
00019620                            loc_18B36:
00019620 5328 003C                  		subq.b	#1,$3C(a0)
00019624 6700                       		beq.s	loc_18B40
00019626 6000 FEC0                  		bra.w	loc_189FE
0001962A                            ; ===========================================================================
0001962A                            
0001962A                            loc_18B40:
0001962A 5528 0025                  		subq.b	#2,$25(a0)
0001962E 6000 FE84                  		bra.w	loc_189CA
00019632                            ; ===========================================================================
00019632                            
00019632                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019632 5328 003C                  		subq.b	#1,$3C(a0)
00019636 6B00                       		bmi.s	loc_18B52
00019638 6000 ED3C                  		bra.w	BossDefeated
0001963C                            ; ===========================================================================
0001963C                            
0001963C                            loc_18B52:
0001963C 5428 0025                  		addq.b	#2,$25(a0)
00019640 4268 0012                  		clr.w	$12(a0)
00019644 08E8 0000 0022             		bset	#0,$22(a0)
0001964A 08A8 0007 0022             		bclr	#7,$22(a0)
00019650 4268 0010                  		clr.w	$10(a0)
00019654 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001965A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001965E 6600                       		bne.s	loc_18B7C
00019660 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019666                            
00019666                            loc_18B7C:
00019666 6000 FE80                  		bra.w	loc_189FE
0001966A                            ; ===========================================================================
0001966A                            
0001966A                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001966A 5228 003C                  		addq.b	#1,$3C(a0)
0001966E 6700                       		beq.s	loc_18B90
00019670 6A00                       		bpl.s	loc_18B96
00019672 0668 0018 0012             		addi.w	#$18,$12(a0)
00019678 6000                       		bra.s	loc_18BC2
0001967A                            ; ===========================================================================
0001967A                            
0001967A                            loc_18B90:
0001967A 4268 0012                  		clr.w	$12(a0)
0001967E 6000                       		bra.s	loc_18BC2
00019680                            ; ===========================================================================
00019680                            
00019680                            loc_18B96:
00019680 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019686 6500                       		bcs.s	loc_18BAE
00019688 6700                       		beq.s	loc_18BB4
0001968A 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019690 6500                       		bcs.s	loc_18BC2
00019692 5428 0025                  		addq.b	#2,$25(a0)
00019696 6000                       		bra.s	loc_18BC2
00019698                            ; ===========================================================================
00019698                            
00019698                            loc_18BAE:
00019698 5168 0012                  		subq.w	#8,$12(a0)
0001969C 6000                       		bra.s	loc_18BC2
0001969E                            ; ===========================================================================
0001969E                            
0001969E                            loc_18BB4:
0001969E 4268 0012                  		clr.w	$12(a0)
000196A2 303C 0084                  		move.w	#$84,d0
000196A6 4EB9 0000 1588             		jsr	(PlaySound).l	; play SLZ music
000196AC                            
000196AC                            loc_18BC2:
000196AC 6000 FE2A                  		bra.w	loc_189EE
000196B0                            ; ===========================================================================
000196B0                            
000196B0                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000196B0 317C 0400 0010             		move.w	#$400,$10(a0)
000196B6 317C FFC0 0012             		move.w	#-$40,$12(a0)
000196BC 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000196C2 6400                       		bcc.s	loc_18BE0
000196C4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000196C8 6000                       		bra.s	loc_18BE8
000196CA                            ; ===========================================================================
000196CA                            
000196CA                            loc_18BE0:
000196CA 4A28 0001                  		tst.b	1(a0)
000196CE 6A00 FCCE                  		bpl.w	Obj7A_Delete
000196D2                            
000196D2                            loc_18BE8:
000196D2 6100 ECE4                  		bsr.w	BossMove
000196D6 6000 FDDC                  		bra.w	loc_189CA
000196DA                            ; ===========================================================================
000196DA                            
000196DA                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000196DA 7000                       		moveq	#0,d0
000196DC 7201                       		moveq	#1,d1
000196DE 2268 0034                  		movea.l	$34(a0),a1
000196E2 1029 0025                  		move.b	$25(a1),d0
000196E6 0C00 0006                  		cmpi.b	#6,d0
000196EA 6B00                       		bmi.s	loc_18C06
000196EC 720A                       		moveq	#$A,d1
000196EE 6000                       		bra.s	loc_18C1A
000196F0                            ; ===========================================================================
000196F0                            
000196F0                            loc_18C06:
000196F0 4A29 0020                  		tst.b	$20(a1)
000196F4 6600                       		bne.s	loc_18C10
000196F6 7205                       		moveq	#5,d1
000196F8 6000                       		bra.s	loc_18C1A
000196FA                            ; ===========================================================================
000196FA                            
000196FA                            loc_18C10:
000196FA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019700 6500                       		bcs.s	loc_18C1A
00019702 7204                       		moveq	#4,d1
00019704                            
00019704                            loc_18C1A:
00019704 1141 001C                  		move.b	d1,$1C(a0)
00019708 0C00 000A                  		cmpi.b	#$A,d0
0001970C 6600                       		bne.s	loc_18C32
0001970E 117C 0006 001C             		move.b	#6,$1C(a0)
00019714 4A28 0001                  		tst.b	1(a0)
00019718 6A00 FC84                  		bpl.w	Obj7A_Delete
0001971C                            
0001971C                            loc_18C32:
0001971C 6000                       		bra.s	loc_18C6C
0001971E                            ; ===========================================================================
0001971E                            
0001971E                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001971E 117C 0008 001C             		move.b	#8,$1C(a0)
00019724 2268 0034                  		movea.l	$34(a0),a1
00019728 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001972E 6600                       		bne.s	loc_18C56
00019730 4A28 0001                  		tst.b	1(a0)
00019734 6A00 FC68                  		bpl.w	Obj7A_Delete
00019738 117C 000B 001C             		move.b	#$B,$1C(a0)
0001973E 6000                       		bra.s	loc_18C6C
00019740                            ; ===========================================================================
00019740                            
00019740                            loc_18C56:
00019740 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019746 6E00                       		bgt.s	loc_18C6C
00019748 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001974E 6D00                       		blt.s	loc_18C6C
00019750 117C 0007 001C             		move.b	#7,$1C(a0)
00019756                            
00019756                            loc_18C6C:
00019756 43F9 0001 87FA             		lea	(Ani_Eggman).l,a1
0001975C 4EB9 0000 B04C             		jsr	AnimateSprite
00019762                            
00019762                            loc_18C78:
00019762 2268 0034                  		movea.l	$34(a0),a1
00019766 3169 0008 0008             		move.w	8(a1),8(a0)
0001976C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019772 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019778 7003                       		moveq	#3,d0
0001977A C028 0022                  		and.b	$22(a0),d0
0001977E 0228 00FC 0001             		andi.b	#-4,1(a0)
00019784 8128 0001                  		or.b	d0,1(a0)
00019788 4EF9 0000 DFF6             		jmp	DisplaySprite
0001978E                            ; ===========================================================================
0001978E                            
0001978E                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001978E 2268 0034                  		movea.l	$34(a0),a1
00019792 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019798 6600                       		bne.s	loc_18CB8
0001979A 4A28 0001                  		tst.b	1(a0)
0001979E 6A00 FBFE                  		bpl.w	Obj7A_Delete
000197A2                            
000197A2                            loc_18CB8:
000197A2 217C 0001 8926 0004        		move.l	#Map_BossItems,4(a0)
000197AA 317C 246C 0002             		move.w	#$246C,2(a0)
000197B0 117C 0003 001A             		move.b	#3,$1A(a0)
000197B6 60AA                       		bra.s	loc_18C78
000197B8                            ; ===========================================================================
000197B8                            ; ---------------------------------------------------------------------------
000197B8                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000197B8                            ; ---------------------------------------------------------------------------
000197B8                            
000197B8                            Obj7B:					; XREF: Obj_Index
000197B8 7000                       		moveq	#0,d0
000197BA 1028 0024                  		move.b	$24(a0),d0
000197BE 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000197C2 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000197C6 3028 0030                  		move.w	$30(a0),d0
000197CA 0240 FF80                  		andi.w	#$FF80,d0
000197CE 3238 F700                  		move.w	($FFFFF700).w,d1
000197D2 0441 0080                  		subi.w	#$80,d1
000197D6 0241 FF80                  		andi.w	#$FF80,d1
000197DA 9041                       		sub.w	d1,d0
000197DC 6B00 FBC0                  		bmi.w	Obj7A_Delete
000197E0 0C40 0280                  		cmpi.w	#$280,d0
000197E4 6200 FBB8                  		bhi.w	Obj7A_Delete
000197E8 4EF9 0000 DFF6             		jmp	DisplaySprite
000197EE                            ; ===========================================================================
000197EE 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000197F0 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000197F2 0000                       		dc.w loc_18DC6-Obj7B_Index
000197F4 0000                       		dc.w loc_18EAA-Obj7B_Index
000197F6 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000197F8 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000197FA                            ; ===========================================================================
000197FA                            
000197FA                            Obj7B_Main:				; XREF: Obj7B_Index
000197FA 217C 0001 23C2 0004        		move.l	#Map_obj5Ea,4(a0)
00019802 317C 0518 0002             		move.w	#$518,2(a0)
00019808 117C 0001 001A             		move.b	#1,$1A(a0)
0001980E 0028 0004 0001             		ori.b	#4,1(a0)
00019814 117C 0004 0018             		move.b	#4,$18(a0)
0001981A 117C 008B 0020             		move.b	#$8B,$20(a0)
00019820 117C 000C 0019             		move.b	#$C,$19(a0)
00019826 2268 003C                  		movea.l	$3C(a0),a1
0001982A 3169 0008 0030             		move.w	8(a1),$30(a0)
00019830 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019836 08E8 0000 0022             		bset	#0,$22(a0)
0001983C 3028 0008                  		move.w	8(a0),d0
00019840 B069 0008                  		cmp.w	8(a1),d0
00019844 6E00                       		bgt.s	loc_18D68
00019846 08A8 0000 0022             		bclr	#0,$22(a0)
0001984C 117C 0002 003A             		move.b	#2,$3A(a0)
00019852                            
00019852                            loc_18D68:
00019852 5428 0024                  		addq.b	#2,$24(a0)
00019856                            
00019856                            Obj7B_Fall:				; XREF: Obj7B_Index
00019856 4EB9 0000 DF5E             		jsr	ObjectFall
0001985C 2268 003C                  		movea.l	$3C(a0),a1
00019860 45F9 0000 0000             		lea	(word_19018).l,a2
00019866 7000                       		moveq	#0,d0
00019868 1029 001A                  		move.b	$1A(a1),d0
0001986C 3228 0008                  		move.w	8(a0),d1
00019870 9268 0030                  		sub.w	$30(a0),d1
00019874 6400                       		bcc.s	loc_18D8E
00019876 5440                       		addq.w	#2,d0
00019878                            
00019878                            loc_18D8E:
00019878 D040                       		add.w	d0,d0
0001987A 3228 0034                  		move.w	$34(a0),d1
0001987E D272 0000                  		add.w	(a2,d0.w),d1
00019882 B268 000C                  		cmp.w	$C(a0),d1
00019886 6E00                       		bgt.s	locret_18DC4
00019888 2268 003C                  		movea.l	$3C(a0),a1
0001988C 7202                       		moveq	#2,d1
0001988E 0828 0000 0022             		btst	#0,$22(a0)
00019894 6700                       		beq.s	loc_18DAE
00019896 7200                       		moveq	#0,d1
00019898                            
00019898                            loc_18DAE:
00019898 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001989E 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000198A4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000198AA 6000 0000                  		bra.w	loc_18FA2
000198AE                            ; ===========================================================================
000198AE                            
000198AE                            locret_18DC4:
000198AE 4E75                       		rts	
000198B0                            ; ===========================================================================
000198B0                            
000198B0                            loc_18DC6:				; XREF: Obj7B_Index
000198B0 2268 003C                  		movea.l	$3C(a0),a1
000198B4 7000                       		moveq	#0,d0
000198B6 1028 003A                  		move.b	$3A(a0),d0
000198BA 9029 003A                  		sub.b	$3A(a1),d0
000198BE 6700                       		beq.s	loc_18E2A
000198C0 6400                       		bcc.s	loc_18DDA
000198C2 4400                       		neg.b	d0
000198C4                            
000198C4                            loc_18DDA:
000198C4 323C F7E8                  		move.w	#-$818,d1
000198C8 343C FEEC                  		move.w	#-$114,d2
000198CC 0C00 0001                  		cmpi.b	#1,d0
000198D0 6700                       		beq.s	loc_18E00
000198D2 323C F6A0                  		move.w	#-$960,d1
000198D6 343C FF0C                  		move.w	#-$F4,d2
000198DA 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000198E0 6D00                       		blt.s	loc_18E00
000198E2 323C F5E0                  		move.w	#-$A20,d1
000198E6 343C FF80                  		move.w	#-$80,d2
000198EA                            
000198EA                            loc_18E00:
000198EA 3141 0012                  		move.w	d1,$12(a0)
000198EE 3142 0010                  		move.w	d2,$10(a0)
000198F2 3028 0008                  		move.w	8(a0),d0
000198F6 9068 0030                  		sub.w	$30(a0),d0
000198FA 6400                       		bcc.s	loc_18E16
000198FC 4468 0010                  		neg.w	$10(a0)
00019900                            
00019900                            loc_18E16:
00019900 117C 0001 001A             		move.b	#1,$1A(a0)
00019906 317C 0020 0028             		move.w	#$20,$28(a0)
0001990C 5428 0024                  		addq.b	#2,$24(a0)
00019910 6000 0000                  		bra.w	loc_18EAA
00019914                            ; ===========================================================================
00019914                            
00019914                            loc_18E2A:				; XREF: loc_18DC6
00019914 45F9 0000 0000             		lea	(word_19018).l,a2
0001991A 7000                       		moveq	#0,d0
0001991C 1029 001A                  		move.b	$1A(a1),d0
00019920 343C 0028                  		move.w	#$28,d2
00019924 3228 0008                  		move.w	8(a0),d1
00019928 9268 0030                  		sub.w	$30(a0),d1
0001992C 6400                       		bcc.s	loc_18E48
0001992E 4442                       		neg.w	d2
00019930 5440                       		addq.w	#2,d0
00019932                            
00019932                            loc_18E48:
00019932 D040                       		add.w	d0,d0
00019934 3228 0034                  		move.w	$34(a0),d1
00019938 D272 0000                  		add.w	(a2,d0.w),d1
0001993C 3141 000C                  		move.w	d1,$C(a0)
00019940 D468 0030                  		add.w	$30(a0),d2
00019944 3142 0008                  		move.w	d2,8(a0)
00019948 4268 000E                  		clr.w	$E(a0)
0001994C 4268 000A                  		clr.w	$A(a0)
00019950 5368 0028                  		subq.w	#1,$28(a0)
00019954 6600                       		bne.s	loc_18E7A
00019956 317C 0020 0028             		move.w	#$20,$28(a0)
0001995C 117C 0008 0024             		move.b	#8,$24(a0)
00019962 4E75                       		rts	
00019964                            ; ===========================================================================
00019964                            
00019964                            loc_18E7A:
00019964 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001996A 6600                       		bne.s	loc_18E88
0001996C 117C 0005 001F             		move.b	#5,$1F(a0)
00019972                            
00019972                            loc_18E88:
00019972 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019978 6600                       		bne.s	loc_18E96
0001997A 117C 0002 001F             		move.b	#2,$1F(a0)
00019980                            
00019980                            loc_18E96:
00019980 5328 001E                  		subq.b	#1,$1E(a0)
00019984 6E00                       		bgt.s	locret_18EA8
00019986 0868 0000 001A             		bchg	#0,$1A(a0)
0001998C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019992                            
00019992                            locret_18EA8:
00019992 4E75                       		rts	
00019994                            ; ===========================================================================
00019994                            
00019994                            loc_18EAA:				; XREF: Obj7B_Index
00019994 43F8 D040                  		lea	($FFFFD040).w,a1
00019998 707A                       		moveq	#$7A,d0
0001999A 7240                       		moveq	#$40,d1
0001999C 743E                       		moveq	#$3E,d2
0001999E                            
0001999E                            loc_18EB4:
0001999E B011                       		cmp.b	(a1),d0
000199A0 6700                       		beq.s	loc_18EC0
000199A2 D2C1                       		adda.w	d1,a1
000199A4 51CA FFF8                  		dbf	d2,loc_18EB4
000199A8                            
000199A8 6000                       		bra.s	loc_18F38
000199AA                            ; ===========================================================================
000199AA                            
000199AA                            loc_18EC0:
000199AA 3029 0008                  		move.w	8(a1),d0
000199AE 3229 000C                  		move.w	$C(a1),d1
000199B2 3428 0008                  		move.w	8(a0),d2
000199B6 3628 000C                  		move.w	$C(a0),d3
000199BA 45FA 0000                  		lea	byte_19022(pc),a2
000199BE 47FA 0000                  		lea	byte_19026(pc),a3
000199C2 181A                       		move.b	(a2)+,d4
000199C4 4884                       		ext.w	d4
000199C6 D044                       		add.w	d4,d0
000199C8 181B                       		move.b	(a3)+,d4
000199CA 4884                       		ext.w	d4
000199CC D444                       		add.w	d4,d2
000199CE B440                       		cmp.w	d0,d2
000199D0 6500                       		bcs.s	loc_18F38
000199D2 181A                       		move.b	(a2)+,d4
000199D4 4884                       		ext.w	d4
000199D6 D044                       		add.w	d4,d0
000199D8 181B                       		move.b	(a3)+,d4
000199DA 4884                       		ext.w	d4
000199DC D444                       		add.w	d4,d2
000199DE B042                       		cmp.w	d2,d0
000199E0 6500                       		bcs.s	loc_18F38
000199E2 181A                       		move.b	(a2)+,d4
000199E4 4884                       		ext.w	d4
000199E6 D244                       		add.w	d4,d1
000199E8 181B                       		move.b	(a3)+,d4
000199EA 4884                       		ext.w	d4
000199EC D644                       		add.w	d4,d3
000199EE B641                       		cmp.w	d1,d3
000199F0 6500                       		bcs.s	loc_18F38
000199F2 181A                       		move.b	(a2)+,d4
000199F4 4884                       		ext.w	d4
000199F6 D244                       		add.w	d4,d1
000199F8 181B                       		move.b	(a3)+,d4
000199FA 4884                       		ext.w	d4
000199FC D644                       		add.w	d4,d3
000199FE B243                       		cmp.w	d3,d1
00019A00 6500                       		bcs.s	loc_18F38
00019A02 5428 0024                  		addq.b	#2,$24(a0)
00019A06 4268 0028                  		clr.w	$28(a0)
00019A0A 4229 0020                  		clr.b	$20(a1)
00019A0E 5329 0021                  		subq.b	#1,$21(a1)
00019A12 6600                       		bne.s	loc_18F38
00019A14 08E9 0007 0022             		bset	#7,$22(a1)
00019A1A 4268 0010                  		clr.w	$10(a0)
00019A1E 4268 0012                  		clr.w	$12(a0)
00019A22                            
00019A22                            loc_18F38:
00019A22 4A68 0012                  		tst.w	$12(a0)
00019A26 6A00                       		bpl.s	loc_18F5C
00019A28 4EB9 0000 DF5E             		jsr	ObjectFall
00019A2E 3028 0034                  		move.w	$34(a0),d0
00019A32 0440 002F                  		subi.w	#$2F,d0
00019A36 B068 000C                  		cmp.w	$C(a0),d0
00019A3A 6E00                       		bgt.s	loc_18F58
00019A3C 4EB9 0000 DF5E             		jsr	ObjectFall
00019A42                            
00019A42                            loc_18F58:
00019A42 6000 FF20                  		bra.w	loc_18E7A
00019A46                            ; ===========================================================================
00019A46                            
00019A46                            loc_18F5C:
00019A46 4EB9 0000 DF5E             		jsr	ObjectFall
00019A4C 2268 003C                  		movea.l	$3C(a0),a1
00019A50 45F9 0000 0000             		lea	(word_19018).l,a2
00019A56 7000                       		moveq	#0,d0
00019A58 1029 001A                  		move.b	$1A(a1),d0
00019A5C 3228 0008                  		move.w	8(a0),d1
00019A60 9268 0030                  		sub.w	$30(a0),d1
00019A64 6400                       		bcc.s	loc_18F7E
00019A66 5440                       		addq.w	#2,d0
00019A68                            
00019A68                            loc_18F7E:
00019A68 D040                       		add.w	d0,d0
00019A6A 3228 0034                  		move.w	$34(a0),d1
00019A6E D272 0000                  		add.w	(a2,d0.w),d1
00019A72 B268 000C                  		cmp.w	$C(a0),d1
00019A76 6ECA                       		bgt.s	loc_18F58
00019A78 2268 003C                  		movea.l	$3C(a0),a1
00019A7C 7202                       		moveq	#2,d1
00019A7E 4A68 0010                  		tst.w	$10(a0)
00019A82 6B00                       		bmi.s	loc_18F9C
00019A84 7200                       		moveq	#0,d1
00019A86                            
00019A86                            loc_18F9C:
00019A86 317C 0000 0028             		move.w	#0,$28(a0)
00019A8C                            
00019A8C                            loc_18FA2:
00019A8C 1341 003A                  		move.b	d1,$3A(a1)
00019A90 1141 003A                  		move.b	d1,$3A(a0)
00019A94 B229 001A                  		cmp.b	$1A(a1),d1
00019A98 6700                       		beq.s	loc_19008
00019A9A 08A9 0003 0022             		bclr	#3,$22(a1)
00019AA0 6700                       		beq.s	loc_19008
00019AA2 4229 0025                  		clr.b	$25(a1)
00019AA6 137C 0002 0024             		move.b	#2,$24(a1)
00019AAC 45F8 D000                  		lea	($FFFFD000).w,a2
00019AB0 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019AB6 446A 0012                  		neg.w	$12(a2)
00019ABA 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019AC0 6600                       		bne.s	loc_18FDC
00019AC2 E0EA 0012                  		asr	$12(a2)
00019AC6                            
00019AC6                            loc_18FDC:
00019AC6 08EA 0001 0022             		bset	#1,$22(a2)
00019ACC 08AA 0003 0022             		bclr	#3,$22(a2)
00019AD2 422A 003C                  		clr.b	$3C(a2)
00019AD6 2F08                       		move.l	a0,-(sp)
00019AD8 41D2                       		lea	(a2),a0
00019ADA 4EBA A36C                  		jsr	Obj01_ChkRoll
00019ADE 205F                       		movea.l	(sp)+,a0
00019AE0 157C 0002 0024             		move.b	#2,$24(a2)
00019AE6 303C 00CC                  		move.w	#$CC,d0
00019AEA 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019AF0                            
00019AF0                            loc_19008:
00019AF0 4268 0010                  		clr.w	$10(a0)
00019AF4 4268 0012                  		clr.w	$12(a0)
00019AF8 5428 0024                  		addq.b	#2,$24(a0)
00019AFC 6000 FE66                  		bra.w	loc_18E7A
00019B00                            ; ===========================================================================
00019B00 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019B0A                            		even
00019B0A E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019B0E                            		even
00019B0E 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019B12                            		even
00019B12                            ; ===========================================================================
00019B12                            
00019B12                            Obj7B_Explode:				; XREF: Obj7B_Index
00019B12 10BC 003F                  		move.b	#$3F,(a0)
00019B16 4228 0024                  		clr.b	$24(a0)
00019B1A 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019B20 6700                       		beq.s	Obj7B_MakeFrag
00019B22 4E75                       		rts	
00019B24                            ; ===========================================================================
00019B24                            
00019B24                            Obj7B_MakeFrag:
00019B24 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019B2A 7203                       		moveq	#3,d1
00019B2C 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019B30                            
00019B30                            Obj7B_Loop:
00019B30 4EB9 0000 E47C             		jsr	SingleObjLoad
00019B36 6600                       		bne.s	loc_1909A
00019B38 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019B3C 137C 000A 0024             		move.b	#$A,$24(a1)
00019B42 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019B4A 137C 0003 0018             		move.b	#3,$18(a1)
00019B50 337C 0518 0002             		move.w	#$518,2(a1)
00019B56 3368 0008 0008             		move.w	8(a0),8(a1)
00019B5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019B62 335A 0010                  		move.w	(a2)+,$10(a1)
00019B66 335A 0012                  		move.w	(a2)+,$12(a1)
00019B6A 137C 0098 0020             		move.b	#$98,$20(a1)
00019B70 0029 0004 0001             		ori.b	#4,1(a1)
00019B76 08E9 0007 0001             		bset	#7,1(a1)
00019B7C 137C 000C 0019             		move.b	#$C,$19(a1)
00019B82                            
00019B82                            loc_1909A:
00019B82 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019B86                            
00019B86 4E75                       		rts	
00019B88                            ; ===========================================================================
00019B88 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019B8C FF60 FDC0                  		dc.w $FF60, $FDC0
00019B90 0100 FCC0                  		dc.w $100, $FCC0
00019B94 00A0 FDC0                  		dc.w $A0, $FDC0
00019B98                            ; ===========================================================================
00019B98                            
00019B98                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019B98 4EB9 0000 DFD0             		jsr	SpeedToPos
00019B9E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BA4 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019BAA 0668 0018 0012             		addi.w	#$18,$12(a0)
00019BB0 7004                       		moveq	#4,d0
00019BB2 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019BB6 E448                       		lsr.w	#2,d0
00019BB8 1140 001A                  		move.b	d0,$1A(a0)
00019BBC 4A28 0001                  		tst.b	1(a0)
00019BC0 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019BC4 4E75                       		rts	
00019BC6                            ; ===========================================================================
00019BC6                            ; ---------------------------------------------------------------------------
00019BC6                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019BC6                            ; ---------------------------------------------------------------------------
00019BC6                            Map_obj7B:
00019BC6                            	include "_maps\obj7B.asm"
00019BC6                            ; ---------------------------------------------------------------------------
00019BC6                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019BC6                            ; ---------------------------------------------------------------------------
00019BC6 0000                       		dc.w byte_190E2-Map_obj7B
00019BC8 0000                       		dc.w byte_190E8-Map_obj7B
00019BCA 01                         byte_190E2:	dc.b 1
00019BCB FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019BD0 01                         byte_190E8:	dc.b 1
00019BD1 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019BD6                            		even
00019BD6                            		even
00019BD6                            
00019BD6                            ; ===========================================================================
00019BD6                            ; ---------------------------------------------------------------------------
00019BD6                            ; Object 75 - Eggman (SYZ)
00019BD6                            ; ---------------------------------------------------------------------------
00019BD6                            
00019BD6                            Obj75:					; XREF: Obj_Index
00019BD6 7000                       		moveq	#0,d0
00019BD8 1028 0024                  		move.b	$24(a0),d0
00019BDC 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019BE0 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019BE4                            ; ===========================================================================
00019BE4 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019BE6 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019BE8 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019BEA 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019BEC 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019BEE                            
00019BEE 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019BF1 0401 05                    		dc.b 4,	1, 5
00019BF4 0607 05                    		dc.b 6,	7, 5
00019BF7 0800 05                    		dc.b 8,	0, 5
00019BFA                            ; ===========================================================================
00019BFA                            
00019BFA                            Obj75_Main:				; XREF: Obj75_Index
00019BFA 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019C00 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019C06 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C0C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C12 117C 000F 0020             		move.b	#$F,$20(a0)
00019C18 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C1E 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019C22 2248                       		movea.l	a0,a1
00019C24 7203                       		moveq	#3,d1
00019C26 6000                       		bra.s	Obj75_LoadBoss
00019C28                            ; ===========================================================================
00019C28                            
00019C28                            Obj75_Loop:
00019C28 4EB9 0000 E492             		jsr	SingleObjLoad2
00019C2E 6600                       		bne.s	Obj75_ShipMain
00019C30 12BC 0075                  		move.b	#$75,(a1)
00019C34 3368 0008 0008             		move.w	8(a0),8(a1)
00019C3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C40                            
00019C40                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019C40 08A8 0000 0022             		bclr	#0,$22(a0)
00019C46 4229 0025                  		clr.b	$25(a1)
00019C4A 135A 0024                  		move.b	(a2)+,$24(a1)
00019C4E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C52 135A 0018                  		move.b	(a2)+,$18(a1)
00019C56 237C 0001 885E 0004        		move.l	#Map_Eggman,4(a1)
00019C5E 337C 0400 0002             		move.w	#$400,2(a1)
00019C64 137C 0004 0001             		move.b	#4,1(a1)
00019C6A 137C 0020 0019             		move.b	#$20,$19(a1)
00019C70 2348 0034                  		move.l	a0,$34(a1)
00019C74 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019C78                            
00019C78                            Obj75_ShipMain:				; XREF: Obj75_Index
00019C78 7000                       		moveq	#0,d0
00019C7A 1028 0025                  		move.b	$25(a0),d0
00019C7E 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019C82 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019C86 43F9 0001 87FA             		lea	(Ani_Eggman).l,a1
00019C8C 4EB9 0000 B04C             		jsr	AnimateSprite
00019C92 7003                       		moveq	#3,d0
00019C94 C028 0022                  		and.b	$22(a0),d0
00019C98 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019C9E 8128 0001                  		or.b	d0,1(a0)
00019CA2 4EF9 0000 DFF6             		jmp	DisplaySprite
00019CA8                            ; ===========================================================================
00019CA8 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019CAC 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019CB0 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019CB4                            ; ===========================================================================
00019CB4                            
00019CB4                            loc_191CC:				; XREF: Obj75_ShipIndex
00019CB4 317C FF00 0010             		move.w	#-$100,$10(a0)
00019CBA 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019CC0 6400                       		bcc.s	loc_191DE
00019CC2 5428 0025                  		addq.b	#2,$25(a0)
00019CC6                            
00019CC6                            loc_191DE:
00019CC6 1028 003F                  		move.b	$3F(a0),d0
00019CCA 5428 003F                  		addq.b	#2,$3F(a0)
00019CCE 4EB9 0000 2D28             		jsr	(CalcSine).l
00019CD4 E440                       		asr.w	#2,d0
00019CD6 3140 0012                  		move.w	d0,$12(a0)
00019CDA                            
00019CDA                            loc_191F2:
00019CDA 6100 E6DC                  		bsr.w	BossMove
00019CDE 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019CE4 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CEA                            
00019CEA                            loc_19202:
00019CEA 3028 0008                  		move.w	8(a0),d0
00019CEE 0440 2C00                  		subi.w	#$2C00,d0
00019CF2 EA48                       		lsr.w	#5,d0
00019CF4 1140 0034                  		move.b	d0,$34(a0)
00019CF8 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019CFE 6400                       		bcc.s	locret_19256
00019D00 4A28 0022                  		tst.b	$22(a0)
00019D04 6B00                       		bmi.s	loc_19258
00019D06 4A28 0020                  		tst.b	$20(a0)
00019D0A 6600                       		bne.s	locret_19256
00019D0C 4A28 003E                  		tst.b	$3E(a0)
00019D10 6600                       		bne.s	loc_1923A
00019D12 117C 0020 003E             		move.b	#$20,$3E(a0)
00019D18 303C 00AC                  		move.w	#$AC,d0
00019D1C 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D22                            
00019D22                            loc_1923A:
00019D22 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D26 7000                       		moveq	#0,d0
00019D28 4A51                       		tst.w	(a1)
00019D2A 6600                       		bne.s	loc_19248
00019D2C 303C 0EEE                  		move.w	#$EEE,d0
00019D30                            
00019D30                            loc_19248:
00019D30 3280                       		move.w	d0,(a1)
00019D32 5328 003E                  		subq.b	#1,$3E(a0)
00019D36 6600                       		bne.s	locret_19256
00019D38 117C 000F 0020             		move.b	#$F,$20(a0)
00019D3E                            
00019D3E                            locret_19256:
00019D3E 4E75                       		rts	
00019D40                            ; ===========================================================================
00019D40                            
00019D40                            loc_19258:				; XREF: loc_19202
00019D40 7064                       		moveq	#100,d0
00019D42 6100 0000                  		bsr.w	AddPoints
00019D46 117C 0006 0025             		move.b	#6,$25(a0)
00019D4C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D52 4268 0010                  		clr.w	$10(a0)
00019D56 4E75                       		rts	
00019D58                            ; ===========================================================================
00019D58                            
00019D58                            loc_19270:				; XREF: Obj75_ShipIndex
00019D58 3028 0030                  		move.w	$30(a0),d0
00019D5C 317C 0140 0010             		move.w	#$140,$10(a0)
00019D62 0828 0000 0022             		btst	#0,$22(a0)
00019D68 6600                       		bne.s	loc_1928E
00019D6A 4468 0010                  		neg.w	$10(a0)
00019D6E 0C40 2C08                  		cmpi.w	#$2C08,d0
00019D72 6E00                       		bgt.s	loc_1929E
00019D74 6000                       		bra.s	loc_19294
00019D76                            ; ===========================================================================
00019D76                            
00019D76                            loc_1928E:
00019D76 0C40 2D38                  		cmpi.w	#$2D38,d0
00019D7A 6D00                       		blt.s	loc_1929E
00019D7C                            
00019D7C                            loc_19294:
00019D7C 0868 0000 0022             		bchg	#0,$22(a0)
00019D82 4228 003D                  		clr.b	$3D(a0)
00019D86                            
00019D86                            loc_1929E:
00019D86 0440 2C10                  		subi.w	#$2C10,d0
00019D8A 0240 001F                  		andi.w	#$1F,d0
00019D8E 0440 001F                  		subi.w	#$1F,d0
00019D92 6A00                       		bpl.s	loc_192AE
00019D94 4440                       		neg.w	d0
00019D96                            
00019D96                            loc_192AE:
00019D96 5340                       		subq.w	#1,d0
00019D98 6E00                       		bgt.s	loc_192E8
00019D9A 4A28 003D                  		tst.b	$3D(a0)
00019D9E 6600                       		bne.s	loc_192E8
00019DA0 3238 D008                  		move.w	($FFFFD008).w,d1
00019DA4 0441 2C00                  		subi.w	#$2C00,d1
00019DA8 EA41                       		asr.w	#5,d1
00019DAA B228 0034                  		cmp.b	$34(a0),d1
00019DAE 6600                       		bne.s	loc_192E8
00019DB0 7000                       		moveq	#0,d0
00019DB2 1028 0034                  		move.b	$34(a0),d0
00019DB6 EB40                       		asl.w	#5,d0
00019DB8 0640 2C10                  		addi.w	#$2C10,d0
00019DBC 3140 0030                  		move.w	d0,$30(a0)
00019DC0 6100 0000                  		bsr.w	Obj75_FindBlocks
00019DC4 5428 0025                  		addq.b	#2,$25(a0)
00019DC8 4268 0028                  		clr.w	$28(a0)
00019DCC 4268 0010                  		clr.w	$10(a0)
00019DD0                            
00019DD0                            loc_192E8:
00019DD0 6000 FEF4                  		bra.w	loc_191DE
00019DD4                            ; ===========================================================================
00019DD4                            
00019DD4                            loc_192EC:				; XREF: Obj75_ShipIndex
00019DD4 7000                       		moveq	#0,d0
00019DD6 1028 0028                  		move.b	$28(a0),d0
00019DDA 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019DDE 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019DE2                            ; ===========================================================================
00019DE2 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019DE4 0000                       		dc.w loc_19348-off_192FA
00019DE6 0000                       		dc.w loc_1938E-off_192FA
00019DE8 0000                       		dc.w loc_193D0-off_192FA
00019DEA                            ; ===========================================================================
00019DEA                            
00019DEA                            loc_19302:				; XREF: off_192FA
00019DEA 317C 0180 0012             		move.w	#$180,$12(a0)
00019DF0 3028 0038                  		move.w	$38(a0),d0
00019DF4 0C40 0556                  		cmpi.w	#$556,d0
00019DF8 6500                       		bcs.s	loc_19344
00019DFA 317C 0556 0038             		move.w	#$556,$38(a0)
00019E00 4268 003C                  		clr.w	$3C(a0)
00019E04 70FF                       		moveq	#-1,d0
00019E06 3028 0036                  		move.w	$36(a0),d0
00019E0A 6700                       		beq.s	loc_1933C
00019E0C 2240                       		movea.l	d0,a1
00019E0E 137C 00FF 0029             		move.b	#-1,$29(a1)
00019E14 117C 00FF 0029             		move.b	#-1,$29(a0)
00019E1A 2348 0034                  		move.l	a0,$34(a1)
00019E1E 317C 0032 003C             		move.w	#$32,$3C(a0)
00019E24                            
00019E24                            loc_1933C:
00019E24 4268 0012                  		clr.w	$12(a0)
00019E28 5428 0028                  		addq.b	#2,$28(a0)
00019E2C                            
00019E2C                            loc_19344:
00019E2C 6000 FEAC                  		bra.w	loc_191F2
00019E30                            ; ===========================================================================
00019E30                            
00019E30                            loc_19348:				; XREF: off_192FA
00019E30 5368 003C                  		subq.w	#1,$3C(a0)
00019E34 6A00                       		bpl.s	loc_19366
00019E36 5428 0028                  		addq.b	#2,$28(a0)
00019E3A 317C F800 0012             		move.w	#-$800,$12(a0)
00019E40 4A68 0036                  		tst.w	$36(a0)
00019E44 6600                       		bne.s	loc_19362
00019E46 E0E8 0012                  		asr	$12(a0)
00019E4A                            
00019E4A                            loc_19362:
00019E4A 7000                       		moveq	#0,d0
00019E4C 6000                       		bra.s	loc_1937C
00019E4E                            ; ===========================================================================
00019E4E                            
00019E4E                            loc_19366:
00019E4E 7000                       		moveq	#0,d0
00019E50 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019E56 6E00                       		bgt.s	loc_1937C
00019E58 7002                       		moveq	#2,d0
00019E5A 0828 0001 003D             		btst	#1,$3D(a0)
00019E60 6700                       		beq.s	loc_1937C
00019E62 4440                       		neg.w	d0
00019E64                            
00019E64                            loc_1937C:
00019E64 D068 0038                  		add.w	$38(a0),d0
00019E68 3140 000C                  		move.w	d0,$C(a0)
00019E6C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019E72 6000 FE76                  		bra.w	loc_19202
00019E76                            ; ===========================================================================
00019E76                            
00019E76                            loc_1938E:				; XREF: off_192FA
00019E76 303C 04DA                  		move.w	#$4DA,d0
00019E7A 4A68 0036                  		tst.w	$36(a0)
00019E7E 6700                       		beq.s	loc_1939C
00019E80 0440 0018                  		subi.w	#$18,d0
00019E84                            
00019E84                            loc_1939C:
00019E84 B068 0038                  		cmp.w	$38(a0),d0
00019E88 6D00                       		blt.s	loc_193BE
00019E8A 317C 0008 003C             		move.w	#8,$3C(a0)
00019E90 4A68 0036                  		tst.w	$36(a0)
00019E94 6700                       		beq.s	loc_193B4
00019E96 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019E9C                            
00019E9C                            loc_193B4:
00019E9C 5428 0028                  		addq.b	#2,$28(a0)
00019EA0 4268 0012                  		clr.w	$12(a0)
00019EA4 6000                       		bra.s	loc_193CC
00019EA6                            ; ===========================================================================
00019EA6                            
00019EA6                            loc_193BE:
00019EA6 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019EAC 6C00                       		bge.s	loc_193CC
00019EAE 0668 000C 0012             		addi.w	#$C,$12(a0)
00019EB4                            
00019EB4                            loc_193CC:
00019EB4 6000 FE24                  		bra.w	loc_191F2
00019EB8                            ; ===========================================================================
00019EB8                            
00019EB8                            loc_193D0:				; XREF: off_192FA
00019EB8 5368 003C                  		subq.w	#1,$3C(a0)
00019EBC 6E00                       		bgt.s	loc_19406
00019EBE 6B00                       		bmi.s	loc_193EE
00019EC0 70FF                       		moveq	#-1,d0
00019EC2 3028 0036                  		move.w	$36(a0),d0
00019EC6 6700                       		beq.s	loc_193E8
00019EC8 2240                       		movea.l	d0,a1
00019ECA 137C 000A 0029             		move.b	#$A,$29(a1)
00019ED0                            
00019ED0                            loc_193E8:
00019ED0 4268 0036                  		clr.w	$36(a0)
00019ED4 6000                       		bra.s	loc_19406
00019ED6                            ; ===========================================================================
00019ED6                            
00019ED6                            loc_193EE:
00019ED6 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019EDC 6600                       		bne.s	loc_19406
00019EDE 4228 0029                  		clr.b	$29(a0)
00019EE2 5528 0025                  		subq.b	#2,$25(a0)
00019EE6 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019EEC 6000                       		bra.s	loc_19446
00019EEE                            ; ===========================================================================
00019EEE                            
00019EEE                            loc_19406:
00019EEE 7001                       		moveq	#1,d0
00019EF0 4A68 0036                  		tst.w	$36(a0)
00019EF4 6700                       		beq.s	loc_19410
00019EF6 7002                       		moveq	#2,d0
00019EF8                            
00019EF8                            loc_19410:
00019EF8 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019EFE 6700                       		beq.s	loc_19424
00019F00 6D00                       		blt.s	loc_1941C
00019F02 4440                       		neg.w	d0
00019F04                            
00019F04                            loc_1941C:
00019F04 4A68 0036                  		tst.w	$36(a0)
00019F08 D168 0038                  		add.w	d0,$38(a0)
00019F0C                            
00019F0C                            loc_19424:
00019F0C 7000                       		moveq	#0,d0
00019F0E 4A68 0036                  		tst.w	$36(a0)
00019F12 6700                       		beq.s	loc_19438
00019F14 7002                       		moveq	#2,d0
00019F16 0828 0000 003D             		btst	#0,$3D(a0)
00019F1C 6700                       		beq.s	loc_19438
00019F1E 4440                       		neg.w	d0
00019F20                            
00019F20                            loc_19438:
00019F20 D068 0038                  		add.w	$38(a0),d0
00019F24 3140 000C                  		move.w	d0,$C(a0)
00019F28 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F2E                            
00019F2E                            loc_19446:
00019F2E 6000 FDBA                  		bra.w	loc_19202
00019F32                            
00019F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F32                            
00019F32                            
00019F32                            Obj75_FindBlocks:			; XREF: loc_192AE
00019F32 4268 0036                  		clr.w	$36(a0)
00019F36 43F8 D040                  		lea	($FFFFD040).w,a1
00019F3A 703E                       		moveq	#$3E,d0
00019F3C 7276                       		moveq	#$76,d1
00019F3E 1428 0034                  		move.b	$34(a0),d2
00019F42                            
00019F42                            Obj75_FindLoop:
00019F42 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019F44 6600                       		bne.s	loc_1946A	; if not, branch
00019F46 B429 0028                  		cmp.b	$28(a1),d2
00019F4A 6600                       		bne.s	loc_1946A
00019F4C 3149 0036                  		move.w	a1,$36(a0)
00019F50 6000                       		bra.s	locret_19472
00019F52                            ; ===========================================================================
00019F52                            
00019F52                            loc_1946A:
00019F52 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019F56 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019F5A                            
00019F5A                            locret_19472:
00019F5A 4E75                       		rts	
00019F5C                            ; End of function Obj75_FindBlocks
00019F5C                            
00019F5C                            ; ===========================================================================
00019F5C                            
00019F5C                            loc_19474:				; XREF: Obj75_ShipIndex
00019F5C 5368 003C                  		subq.w	#1,$3C(a0)
00019F60 6B00                       		bmi.s	loc_1947E
00019F62 6000 E412                  		bra.w	BossDefeated
00019F66                            ; ===========================================================================
00019F66                            
00019F66                            loc_1947E:
00019F66 5428 0025                  		addq.b	#2,$25(a0)
00019F6A 4268 0012                  		clr.w	$12(a0)
00019F6E 08E8 0000 0022             		bset	#0,$22(a0)
00019F74 08A8 0007 0022             		bclr	#7,$22(a0)
00019F7A 4268 0010                  		clr.w	$10(a0)
00019F7E 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019F84 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019F88 6600                       		bne.s	loc_194A8
00019F8A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019F90                            
00019F90                            loc_194A8:
00019F90 6000 FD58                  		bra.w	loc_19202
00019F94                            ; ===========================================================================
00019F94                            
00019F94                            loc_194AC:				; XREF: Obj75_ShipIndex
00019F94 5268 003C                  		addq.w	#1,$3C(a0)
00019F98 6700                       		beq.s	loc_194BC
00019F9A 6A00                       		bpl.s	loc_194C2
00019F9C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019FA2 6000                       		bra.s	loc_194EE
00019FA4                            ; ===========================================================================
00019FA4                            
00019FA4                            loc_194BC:
00019FA4 4268 0012                  		clr.w	$12(a0)
00019FA8 6000                       		bra.s	loc_194EE
00019FAA                            ; ===========================================================================
00019FAA                            
00019FAA                            loc_194C2:
00019FAA 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019FB0 6500                       		bcs.s	loc_194DA
00019FB2 6700                       		beq.s	loc_194E0
00019FB4 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019FBA 6500                       		bcs.s	loc_194EE
00019FBC 5428 0025                  		addq.b	#2,$25(a0)
00019FC0 6000                       		bra.s	loc_194EE
00019FC2                            ; ===========================================================================
00019FC2                            
00019FC2                            loc_194DA:
00019FC2 5168 0012                  		subq.w	#8,$12(a0)
00019FC6 6000                       		bra.s	loc_194EE
00019FC8                            ; ===========================================================================
00019FC8                            
00019FC8                            loc_194E0:
00019FC8 4268 0012                  		clr.w	$12(a0)
00019FCC 303C 0085                  		move.w	#$85,d0
00019FD0 4EB9 0000 1588             		jsr	(PlaySound).l	; play SYZ music
00019FD6                            
00019FD6                            loc_194EE:
00019FD6 6000 FD02                  		bra.w	loc_191F2
00019FDA                            ; ===========================================================================
00019FDA                            
00019FDA                            loc_194F2:				; XREF: Obj75_ShipIndex
00019FDA 317C 0400 0010             		move.w	#$400,$10(a0)
00019FE0 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019FE6 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019FEC 6400                       		bcc.s	loc_1950C
00019FEE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019FF2 6000                       		bra.s	loc_19512
00019FF4                            ; ===========================================================================
00019FF4                            
00019FF4                            loc_1950C:
00019FF4 4A28 0001                  		tst.b	1(a0)
00019FF8 6A00                       		bpl.s	Obj75_ShipDelete
00019FFA                            
00019FFA                            loc_19512:
00019FFA 6100 E3BC                  		bsr.w	BossMove
00019FFE 6000 FCC6                  		bra.w	loc_191DE
0001A002                            ; ===========================================================================
0001A002                            
0001A002                            Obj75_ShipDelete:
0001A002 4EF9 0000 E032             		jmp	DeleteObject
0001A008                            ; ===========================================================================
0001A008                            
0001A008                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A008 7201                       		moveq	#1,d1
0001A00A 2268 0034                  		movea.l	$34(a0),a1
0001A00E 7000                       		moveq	#0,d0
0001A010 1029 0025                  		move.b	$25(a1),d0
0001A014 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A018 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A01C 1141 001C                  		move.b	d1,$1C(a0)
0001A020 1010                       		move.b	(a0),d0
0001A022 B011                       		cmp.b	(a1),d0
0001A024 6600                       		bne.s	Obj75_FaceDelete
0001A026 6000                       		bra.s	loc_195BE
0001A028                            ; ===========================================================================
0001A028                            
0001A028                            Obj75_FaceDelete:
0001A028 4EF9 0000 E032             		jmp	DeleteObject
0001A02E                            ; ===========================================================================
0001A02E 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A032 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A036 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A03A                            ; ===========================================================================
0001A03A                            
0001A03A                            loc_19552:				; XREF: off_19546
0001A03A 720A                       		moveq	#$A,d1
0001A03C 4E75                       		rts	
0001A03E                            ; ===========================================================================
0001A03E                            
0001A03E                            loc_19556:				; XREF: off_19546
0001A03E 7206                       		moveq	#6,d1
0001A040 4E75                       		rts	
0001A042                            ; ===========================================================================
0001A042                            
0001A042                            loc_1955A:				; XREF: off_19546
0001A042 7000                       		moveq	#0,d0
0001A044 1029 0028                  		move.b	$28(a1),d0
0001A048 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A04C 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A050                            ; ===========================================================================
0001A050 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A054 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A058                            ; ===========================================================================
0001A058                            
0001A058                            loc_19570:				; XREF: off_19568
0001A058 6000                       		bra.s	loc_19574
0001A05A                            ; ===========================================================================
0001A05A                            
0001A05A                            loc_19572:				; XREF: off_19568
0001A05A 7206                       		moveq	#6,d1
0001A05C                            
0001A05C                            loc_19574:				; XREF: off_19546
0001A05C 4A29 0020                  		tst.b	$20(a1)
0001A060 6600                       		bne.s	loc_1957E
0001A062 7205                       		moveq	#5,d1
0001A064 4E75                       		rts	
0001A066                            ; ===========================================================================
0001A066                            
0001A066                            loc_1957E:
0001A066 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A06C 6500                       		bcs.s	locret_19588
0001A06E 7204                       		moveq	#4,d1
0001A070                            
0001A070                            locret_19588:
0001A070 4E75                       		rts	
0001A072                            ; ===========================================================================
0001A072                            
0001A072                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A072 117C 0007 001C             		move.b	#7,$1C(a0)
0001A078 2268 0034                  		movea.l	$34(a0),a1
0001A07C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A082 6600                       		bne.s	loc_195AA
0001A084 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A08A 4A28 0001                  		tst.b	1(a0)
0001A08E 6A00                       		bpl.s	Obj75_FlameDelete
0001A090 6000                       		bra.s	loc_195B6
0001A092                            ; ===========================================================================
0001A092                            
0001A092                            loc_195AA:
0001A092 4A69 0010                  		tst.w	$10(a1)
0001A096 6700                       		beq.s	loc_195B6
0001A098 117C 0008 001C             		move.b	#8,$1C(a0)
0001A09E                            
0001A09E                            loc_195B6:
0001A09E 6000                       		bra.s	loc_195BE
0001A0A0                            ; ===========================================================================
0001A0A0                            
0001A0A0                            Obj75_FlameDelete:
0001A0A0 4EF9 0000 E032             		jmp	DeleteObject
0001A0A6                            ; ===========================================================================
0001A0A6                            
0001A0A6                            loc_195BE:
0001A0A6 43F9 0001 87FA             		lea	(Ani_Eggman).l,a1
0001A0AC 4EB9 0000 B04C             		jsr	AnimateSprite
0001A0B2 2268 0034                  		movea.l	$34(a0),a1
0001A0B6 3169 0008 0008             		move.w	8(a1),8(a0)
0001A0BC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A0C2                            
0001A0C2                            loc_195DA:
0001A0C2 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A0C8 7003                       		moveq	#3,d0
0001A0CA C028 0022                  		and.b	$22(a0),d0
0001A0CE 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A0D4 8128 0001                  		or.b	d0,1(a0)
0001A0D8 4EF9 0000 DFF6             		jmp	DisplaySprite
0001A0DE                            ; ===========================================================================
0001A0DE                            
0001A0DE                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A0DE 217C 0001 8926 0004        		move.l	#Map_BossItems,4(a0)
0001A0E6 317C 246C 0002             		move.w	#$246C,2(a0)
0001A0EC 117C 0005 001A             		move.b	#5,$1A(a0)
0001A0F2 2268 0034                  		movea.l	$34(a0),a1
0001A0F6 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A0FC 6600                       		bne.s	loc_1961C
0001A0FE 4A28 0001                  		tst.b	1(a0)
0001A102 6A00                       		bpl.s	Obj75_SpikeDelete
0001A104                            
0001A104                            loc_1961C:
0001A104 3169 0008 0008             		move.w	8(a1),8(a0)
0001A10A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A110 3028 003C                  		move.w	$3C(a0),d0
0001A114 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A11A 6600                       		bne.s	loc_19652
0001A11C 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A122 6700                       		beq.s	loc_1964C
0001A124 4A29 0028                  		tst.b	$28(a1)
0001A128 6600                       		bne.s	loc_19658
0001A12A 0C40 0094                  		cmpi.w	#$94,d0
0001A12E 6C00                       		bge.s	loc_19658
0001A130 5E40                       		addq.w	#7,d0
0001A132 6000                       		bra.s	loc_19658
0001A134                            ; ===========================================================================
0001A134                            
0001A134                            loc_1964C:
0001A134 4A69 003C                  		tst.w	$3C(a1)
0001A138 6A00                       		bpl.s	loc_19658
0001A13A                            
0001A13A                            loc_19652:
0001A13A 4A40                       		tst.w	d0
0001A13C 6F00                       		ble.s	loc_19658
0001A13E 5B40                       		subq.w	#5,d0
0001A140                            
0001A140                            loc_19658:
0001A140 3140 003C                  		move.w	d0,$3C(a0)
0001A144 E440                       		asr.w	#2,d0
0001A146 D168 000C                  		add.w	d0,$C(a0)
0001A14A 117C 0008 0019             		move.b	#8,$19(a0)
0001A150 117C 000C 0016             		move.b	#$C,$16(a0)
0001A156 4228 0020                  		clr.b	$20(a0)
0001A15A 2268 0034                  		movea.l	$34(a0),a1
0001A15E 4A29 0020                  		tst.b	$20(a1)
0001A162 6700                       		beq.s	loc_19688
0001A164 4A29 0029                  		tst.b	$29(a1)
0001A168 6600                       		bne.s	loc_19688
0001A16A 117C 0084 0020             		move.b	#$84,$20(a0)
0001A170                            
0001A170                            loc_19688:
0001A170 6000 FF50                  		bra.w	loc_195DA
0001A174                            ; ===========================================================================
0001A174                            
0001A174                            Obj75_SpikeDelete:
0001A174 4EF9 0000 E032             		jmp	DeleteObject
0001A17A                            ; ===========================================================================
0001A17A                            ; ---------------------------------------------------------------------------
0001A17A                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A17A                            ; ---------------------------------------------------------------------------
0001A17A                            
0001A17A                            Obj76:					; XREF: Obj_Index
0001A17A 7000                       		moveq	#0,d0
0001A17C 1028 0024                  		move.b	$24(a0),d0
0001A180 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A184 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A188                            ; ===========================================================================
0001A188 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A18A 0000                       		dc.w Obj76_Action-Obj76_Index
0001A18C 0000                       		dc.w loc_19762-Obj76_Index
0001A18E                            ; ===========================================================================
0001A18E                            
0001A18E                            Obj76_Main:				; XREF: Obj76_Index
0001A18E 7800                       		moveq	#0,d4
0001A190 3A3C 2C10                  		move.w	#$2C10,d5
0001A194 7C09                       		moveq	#9,d6
0001A196 43D0                       		lea	(a0),a1
0001A198 6000                       		bra.s	Obj76_MakeBlock
0001A19A                            ; ===========================================================================
0001A19A                            
0001A19A                            Obj76_Loop:
0001A19A 4EB9 0000 E47C             		jsr	SingleObjLoad
0001A1A0 6600                       		bne.s	Obj76_ExitLoop
0001A1A2                            
0001A1A2                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A1A2 12BC 0076                  		move.b	#$76,(a1)
0001A1A6 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A1AE 337C 4000 0002             		move.w	#$4000,2(a1)
0001A1B4 137C 0004 0001             		move.b	#4,1(a1)
0001A1BA 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1C0 137C 0010 0016             		move.b	#$10,$16(a1)
0001A1C6 137C 0003 0018             		move.b	#3,$18(a1)
0001A1CC 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A1D0 337C 0582 000C             		move.w	#$582,$C(a1)
0001A1D6 3344 0028                  		move.w	d4,$28(a1)
0001A1DA 0644 0101                  		addi.w	#$101,d4
0001A1DE 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A1E2 5429 0024                  		addq.b	#2,$24(a1)
0001A1E6 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A1EA                            
0001A1EA                            Obj76_ExitLoop:
0001A1EA 4E75                       		rts	
0001A1EC                            ; ===========================================================================
0001A1EC                            
0001A1EC                            Obj76_Action:				; XREF: Obj76_Index
0001A1EC 1028 0029                  		move.b	$29(a0),d0
0001A1F0 B028 0028                  		cmp.b	$28(a0),d0
0001A1F4 6700                       		beq.s	Obj76_Solid
0001A1F6 4A00                       		tst.b	d0
0001A1F8 6B00                       		bmi.s	loc_19718
0001A1FA                            
0001A1FA                            loc_19712:
0001A1FA 6100 0000                  		bsr.w	Obj76_Break
0001A1FE 6000                       		bra.s	Obj76_Display
0001A200                            ; ===========================================================================
0001A200                            
0001A200                            loc_19718:
0001A200 2268 0034                  		movea.l	$34(a0),a1
0001A204 4A29 0021                  		tst.b	$21(a1)
0001A208 67F0                       		beq.s	loc_19712
0001A20A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A210 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A216 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A21C B2C8                       		cmpa.w	a0,a1
0001A21E 6500                       		bcs.s	Obj76_Display
0001A220 3029 0012                  		move.w	$12(a1),d0
0001A224 48C0                       		ext.l	d0
0001A226 E080                       		asr.l	#8,d0
0001A228 D168 000C                  		add.w	d0,$C(a0)
0001A22C 6000                       		bra.s	Obj76_Display
0001A22E                            ; ===========================================================================
0001A22E                            
0001A22E                            Obj76_Solid:				; XREF: Obj76_Action
0001A22E 323C 001B                  		move.w	#$1B,d1
0001A232 343C 0010                  		move.w	#$10,d2
0001A236 363C 0011                  		move.w	#$11,d3
0001A23A 3828 0008                  		move.w	8(a0),d4
0001A23E 4EB9 0001 03C6             		jsr	SolidObject
0001A244                            
0001A244                            Obj76_Display:				; XREF: Obj76_Action
0001A244 4EF9 0000 DFF6             		jmp	DisplaySprite
0001A24A                            ; ===========================================================================
0001A24A                            
0001A24A                            loc_19762:				; XREF: Obj76_Index
0001A24A 4A28 0001                  		tst.b	1(a0)
0001A24E 6A00                       		bpl.s	Obj76_Delete
0001A250 4EB9 0000 DF5E             		jsr	ObjectFall
0001A256 4EF9 0000 DFF6             		jmp	DisplaySprite
0001A25C                            ; ===========================================================================
0001A25C                            
0001A25C                            Obj76_Delete:
0001A25C 4EF9 0000 E032             		jmp	DeleteObject
0001A262                            
0001A262                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A262                            
0001A262                            
0001A262                            Obj76_Break:				; XREF: Obj76_Action
0001A262 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A266 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A26A 7801                       		moveq	#1,d4
0001A26C 7203                       		moveq	#3,d1
0001A26E 7438                       		moveq	#$38,d2
0001A270 5428 0024                  		addq.b	#2,$24(a0)
0001A274 117C 0008 0019             		move.b	#8,$19(a0)
0001A27A 117C 0008 0016             		move.b	#8,$16(a0)
0001A280 43D0                       		lea	(a0),a1
0001A282 6000                       		bra.s	Obj76_MakeFrag
0001A284                            ; ===========================================================================
0001A284                            
0001A284                            Obj76_LoopFrag:
0001A284 4EB9 0000 E492             		jsr	SingleObjLoad2
0001A28A 6600                       		bne.s	loc_197D4
0001A28C                            
0001A28C                            Obj76_MakeFrag:
0001A28C 45D0                       		lea	(a0),a2
0001A28E 47D1                       		lea	(a1),a3
0001A290 7603                       		moveq	#3,d3
0001A292                            
0001A292                            loc_197AA:
0001A292 26DA                       		move.l	(a2)+,(a3)+
0001A294 26DA                       		move.l	(a2)+,(a3)+
0001A296 26DA                       		move.l	(a2)+,(a3)+
0001A298 26DA                       		move.l	(a2)+,(a3)+
0001A29A 51CB FFF6                  		dbf	d3,loc_197AA
0001A29E                            
0001A29E 335C 0010                  		move.w	(a4)+,$10(a1)
0001A2A2 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2A6 361D                       		move.w	(a5)+,d3
0001A2A8 D769 0008                  		add.w	d3,8(a1)
0001A2AC 361D                       		move.w	(a5)+,d3
0001A2AE D769 000C                  		add.w	d3,$C(a1)
0001A2B2 1344 001A                  		move.b	d4,$1A(a1)
0001A2B6 5244                       		addq.w	#1,d4
0001A2B8 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A2BC                            
0001A2BC                            loc_197D4:
0001A2BC 303C 00CB                  		move.w	#$CB,d0
0001A2C0 4EF9 0000 158E             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A2C6                            ; End of function Obj76_Break
0001A2C6                            
0001A2C6                            ; ===========================================================================
0001A2C6 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A2CA 0180 FE00                  		dc.w $180, $FE00
0001A2CE FF00 FF00                  		dc.w $FF00, $FF00
0001A2D2 0100 FF00                  		dc.w $100, $FF00
0001A2D6 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A2DA 0010 0000                  		dc.w $10, 0
0001A2DE 0000 0010                  		dc.w 0,	$10
0001A2E2 0010 0010                  		dc.w $10, $10
0001A2E6                            ; ---------------------------------------------------------------------------
0001A2E6                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A2E6                            ; ---------------------------------------------------------------------------
0001A2E6                            Map_obj76:
0001A2E6                            	include "_maps\obj76.asm"
0001A2E6                            ; ---------------------------------------------------------------------------
0001A2E6                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A2E6                            ; ---------------------------------------------------------------------------
0001A2E6 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A2EA 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A2EE 0000                       		dc.w byte_19826-Map_obj76
0001A2F0 02                         byte_19808:	dc.b 2
0001A2F1 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A2F6 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A2FB 00                         		dc.b 0
0001A2FC 01                         byte_19814:	dc.b 1
0001A2FD F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A302 01                         byte_1981A:	dc.b 1
0001A303 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A308 01                         byte_19820:	dc.b 1
0001A309 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A30E 01                         byte_19826:	dc.b 1
0001A30F F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A314                            		even
0001A314                            		even
0001A314                            
0001A314                            ; ===========================================================================
0001A314                            
0001A314                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A314 4EF9 0000 E032             		jmp	DeleteObject
0001A31A                            ; ===========================================================================
0001A31A                            ; ---------------------------------------------------------------------------
0001A31A                            ; Object 82 - Eggman (SBZ2)
0001A31A                            ; ---------------------------------------------------------------------------
0001A31A                            
0001A31A                            Obj82:					; XREF: Obj_Index
0001A31A 7000                       		moveq	#0,d0
0001A31C 1028 0024                  		move.b	$24(a0),d0
0001A320 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A324 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A328                            ; ===========================================================================
0001A328 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A32A 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A32C 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A32E                            
0001A32E 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A331 0400 03                    		dc.b 4,	0, 3
0001A334                            ; ===========================================================================
0001A334                            
0001A334                            Obj82_Main:				; XREF: Obj82_Index
0001A334 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A338 317C 2160 0008             		move.w	#$2160,8(a0)
0001A33E 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A344 117C 000F 0020             		move.b	#$F,$20(a0)
0001A34A 117C 0010 0021             		move.b	#$10,$21(a0)
0001A350 08A8 0000 0022             		bclr	#0,$22(a0)
0001A356 4228 0025                  		clr.b	$25(a0)
0001A35A 115A 0024                  		move.b	(a2)+,$24(a0)
0001A35E 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A362 115A 0018                  		move.b	(a2)+,$18(a0)
0001A366 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A36E 317C 0400 0002             		move.w	#$400,2(a0)
0001A374 117C 0004 0001             		move.b	#4,1(a0)
0001A37A 08E8 0007 0001             		bset	#7,1(a0)
0001A380 117C 0020 0019             		move.b	#$20,$19(a0)
0001A386 4EB9 0000 E492             		jsr	SingleObjLoad2
0001A38C 6600                       		bne.s	Obj82_Eggman
0001A38E 2348 0034                  		move.l	a0,$34(a1)
0001A392 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A396 337C 2130 0008             		move.w	#$2130,8(a1)
0001A39C 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A3A2 4228 0025                  		clr.b	$25(a0)
0001A3A6 135A 0024                  		move.b	(a2)+,$24(a1)
0001A3AA 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A3AE 135A 0018                  		move.b	(a2)+,$18(a1)
0001A3B2 237C 0000 C780 0004        		move.l	#Map_obj32,4(a1)
0001A3BA 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A3C0 137C 0004 0001             		move.b	#4,1(a1)
0001A3C6 08E9 0007 0001             		bset	#7,1(a1)
0001A3CC 137C 0010 0019             		move.b	#$10,$19(a1)
0001A3D2 137C 0000 001A             		move.b	#0,$1A(a1)
0001A3D8                            
0001A3D8                            Obj82_Eggman:				; XREF: Obj82_Index
0001A3D8 7000                       		moveq	#0,d0
0001A3DA 1028 0025                  		move.b	$25(a0),d0
0001A3DE 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A3E2 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A3E6 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A3EA 4EB9 0000 B04C             		jsr	AnimateSprite
0001A3F0 4EF9 0000 DFF6             		jmp	DisplaySprite
0001A3F6                            ; ===========================================================================
0001A3F6 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A3F8 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A3FA 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A3FC 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A3FE                            ; ===========================================================================
0001A3FE                            
0001A3FE                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A3FE 3028 0008                  		move.w	8(a0),d0
0001A402 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A406 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A40A 6400                       		bcc.s	loc_19934	; if not, branch
0001A40C 5428 0025                  		addq.b	#2,$25(a0)
0001A410 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A416 117C 0001 001C             		move.b	#1,$1C(a0)
0001A41C                            
0001A41C                            loc_19934:				; XREF: Obj82_EggIndex
0001A41C 4EF9 0000 DFD0             		jmp	SpeedToPos
0001A422                            ; ===========================================================================
0001A422                            
0001A422                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A422 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A426 6600                       		bne.s	loc_19954	; if time remains, branch
0001A428 5428 0025                  		addq.b	#2,$25(a0)
0001A42C 117C 0002 001C             		move.b	#2,$1C(a0)
0001A432 5868 000C                  		addq.w	#4,$C(a0)
0001A436 317C 000F 003C             		move.w	#15,$3C(a0)
0001A43C                            
0001A43C                            loc_19954:
0001A43C 60DE                       		bra.s	loc_19934
0001A43E                            ; ===========================================================================
0001A43E                            
0001A43E                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A43E 5368 003C                  		subq.w	#1,$3C(a0)
0001A442 6E00                       		bgt.s	loc_199D0
0001A444 6600                       		bne.s	loc_1996A
0001A446 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A44C 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A452                            
0001A452                            loc_1996A:
0001A452 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A458 6E00                       		bgt.s	loc_19976
0001A45A 4268 0010                  		clr.w	$10(a0)
0001A45E                            
0001A45E                            loc_19976:
0001A45E 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A464 4A68 0012                  		tst.w	$12(a0)
0001A468 6B00                       		bmi.s	Obj82_FindBlocks
0001A46A 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A470 6500                       		bcs.s	Obj82_FindBlocks
0001A472 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A478 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A47E 6500                       		bcs.s	Obj82_FindBlocks
0001A480 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A486 4268 0012                  		clr.w	$12(a0)
0001A48A                            
0001A48A                            Obj82_FindBlocks:
0001A48A 3028 0010                  		move.w	$10(a0),d0
0001A48E 8068 0012                  		or.w	$12(a0),d0
0001A492 6600                       		bne.s	loc_199D0
0001A494 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A498 703E                       		moveq	#$3E,d0
0001A49A 7240                       		moveq	#$40,d1
0001A49C                            
0001A49C                            Obj82_FindLoop:	
0001A49C D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A49E 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A4A2 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A4A6                            
0001A4A6 6600                       		bne.s	loc_199D0
0001A4A8 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A4AE 5428 0025                  		addq.b	#2,$25(a0)
0001A4B2 117C 0001 001C             		move.b	#1,$1C(a0)
0001A4B8                            
0001A4B8                            loc_199D0:
0001A4B8 6000 FF62                  		bra.w	loc_19934
0001A4BC                            ; ===========================================================================
0001A4BC                            
0001A4BC                            Obj82_Switch:				; XREF: Obj82_Index
0001A4BC 7000                       		moveq	#0,d0
0001A4BE 1028 0025                  		move.b	$25(a0),d0
0001A4C2 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A4C6 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A4CA                            ; ===========================================================================
0001A4CA 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A4CC 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A4CE                            ; ===========================================================================
0001A4CE                            
0001A4CE                            loc_199E6:				; XREF: Obj82_SwIndex
0001A4CE 2268 0034                  		movea.l	$34(a0),a1
0001A4D2 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A4D8 6600                       		bne.s	Obj82_SwDisplay
0001A4DA 117C 0001 001A             		move.b	#1,$1A(a0)
0001A4E0 5428 0025                  		addq.b	#2,$25(a0)
0001A4E4                            
0001A4E4                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A4E4 4EF9 0000 DFF6             		jmp	DisplaySprite
0001A4EA                            ; ===========================================================================
0001A4EA                            Ani_obj82:
0001A4EA                            	include "_anim\obj82.asm"
0001A4EA                            ; ---------------------------------------------------------------------------
0001A4EA                            ; Animation script - Eggman (SBZ2)
0001A4EA                            ; ---------------------------------------------------------------------------
0001A4EA 0000                       		dc.w byte_19A10-Ani_obj82
0001A4EC 0000                       		dc.w byte_19A14-Ani_obj82
0001A4EE 0000                       		dc.w byte_19A18-Ani_obj82
0001A4F0 0000                       		dc.w byte_19A20-Ani_obj82
0001A4F2 0000                       		dc.w byte_19A24-Ani_obj82
0001A4F4 0000                       		dc.w byte_19A2A-Ani_obj82
0001A4F6 0000                       		dc.w byte_19A30-Ani_obj82
0001A4F8 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A4FC 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A500 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A508 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A50C 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A512 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A518 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A51C                            		even
0001A51C                            		even
0001A51C                            
0001A51C                            ; ---------------------------------------------------------------------------
0001A51C                            ; Sprite mappings - Eggman (SBZ2)
0001A51C                            ; ---------------------------------------------------------------------------
0001A51C                            Map_obj82:
0001A51C                            	include "_maps\obj82.asm"
0001A51C                            ; ================================================================================
0001A51C                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A51C                            ; ================================================================================
0001A51C                            
0001A51C                            DATAA16Z12RYSAF:
0001A51C 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A520 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A524 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A528 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A52C 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A530 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A532 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A533 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A538 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A53D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A542 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A543 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A548 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A54D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A552 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A557 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A558 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A55D E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A562 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A567 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A56C 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A56D E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A572 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A577 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A57C 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A57D E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A582 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A587 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A58C E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A591 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A592 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A597 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A59C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A5A1 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A5A6 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A5A7 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A5AC E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A5B1 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A5B6 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A5BB F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A5C0 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A5C5 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A5CA 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A5CB 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A5D0 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A5D5 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A5DA F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A5DF 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A5E0 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A5E5 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A5EA 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A5EF 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A5F4 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A5F9 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A5FA E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A5FF E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A604 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A609 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A60E E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A613 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A618 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A61D 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A622 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A623 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A628 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A62D EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A632                            	even
0001A632                            	even
0001A632                            
0001A632                            ; ===========================================================================
0001A632                            ; ---------------------------------------------------------------------------
0001A632                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A632                            ; ---------------------------------------------------------------------------
0001A632                            
0001A632                            Obj83:					; XREF: Obj_Index
0001A632 7000                       		moveq	#0,d0
0001A634 1028 0024                  		move.b	$24(a0),d0
0001A638 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A63C 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A640                            ; ===========================================================================
0001A640 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A642 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A644 0000                       		dc.w loc_19C36-Obj83_Index
0001A646 0000                       		dc.w loc_19C62-Obj83_Index
0001A648 0000                       		dc.w loc_19C72-Obj83_Index
0001A64A 0000                       		dc.w loc_19C80-Obj83_Index
0001A64C                            ; ===========================================================================
0001A64C                            
0001A64C                            Obj83_Main:				; XREF: Obj83_Index
0001A64C 317C 2080 0008             		move.w	#$2080,8(a0)
0001A652 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A658 117C 0080 0019             		move.b	#$80,$19(a0)
0001A65E 117C 0010 0016             		move.b	#$10,$16(a0)
0001A664 117C 0004 0001             		move.b	#4,1(a0)
0001A66A 08E8 0007 0001             		bset	#7,1(a0)
0001A670 7800                       		moveq	#0,d4
0001A672 3A3C 2010                  		move.w	#$2010,d5
0001A676 7C07                       		moveq	#7,d6
0001A678 45E8 0030                  		lea	$30(a0),a2
0001A67C                            
0001A67C                            Obj83_MakeBlock:
0001A67C 4EB9 0000 E47C             		jsr	SingleObjLoad
0001A682 6600                       		bne.s	Obj83_ExitMake
0001A684 34C9                       		move.w	a1,(a2)+
0001A686 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A68A 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A692 337C 4518 0002             		move.w	#$4518,2(a1)
0001A698 137C 0004 0001             		move.b	#4,1(a1)
0001A69E 137C 0010 0019             		move.b	#$10,$19(a1)
0001A6A4 137C 0010 0016             		move.b	#$10,$16(a1)
0001A6AA 137C 0003 0018             		move.b	#3,$18(a1)
0001A6B0 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A6B4 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A6BA 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A6BE 137C 0008 0024             		move.b	#8,$24(a1)
0001A6C4 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A6C8                            
0001A6C8                            Obj83_ExitMake:
0001A6C8 5428 0024                  		addq.b	#2,$24(a0)
0001A6CC 4E75                       		rts	
0001A6CE                            ; ===========================================================================
0001A6CE                            
0001A6CE                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A6CE 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A6D4 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A6D6 4228 001A                  		clr.b	$1A(a0)
0001A6DA 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A6DE                            
0001A6DE                            Obj83_Solid:
0001A6DE 7000                       		moveq	#0,d0
0001A6E0 1028 001A                  		move.b	$1A(a0),d0
0001A6E4 4400                       		neg.b	d0
0001A6E6 4880                       		ext.w	d0
0001A6E8 5040                       		addq.w	#8,d0
0001A6EA E940                       		asl.w	#4,d0
0001A6EC 383C 2100                  		move.w	#$2100,d4
0001A6F0 9840                       		sub.w	d0,d4
0001A6F2 1140 0019                  		move.b	d0,$19(a0)
0001A6F6 3144 0008                  		move.w	d4,8(a0)
0001A6FA 720B                       		moveq	#$B,d1
0001A6FC D240                       		add.w	d0,d1
0001A6FE 7410                       		moveq	#$10,d2
0001A700 7611                       		moveq	#$11,d3
0001A702 4EF9 0001 03C6             		jmp	SolidObject
0001A708                            ; ===========================================================================
0001A708                            
0001A708                            loc_19C36:				; XREF: Obj83_Index
0001A708 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A70E 6400                       		bcc.s	Obj83_Solid2
0001A710 70FF                       		moveq	#-1,d0
0001A712 1028 001A                  		move.b	$1A(a0),d0
0001A716 4880                       		ext.w	d0
0001A718 D040                       		add.w	d0,d0
0001A71A 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A71E 2240                       		movea.l	d0,a1
0001A720 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A726 5228 001A                  		addq.b	#1,$1A(a0)
0001A72A 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A730 6700                       		beq.s	loc_19C62
0001A732                            
0001A732                            Obj83_Solid2:
0001A732 60AA                       		bra.s	Obj83_Solid
0001A734                            ; ===========================================================================
0001A734                            
0001A734                            loc_19C62:				; XREF: Obj83_Index
0001A734 08A8 0003 0022             		bclr	#3,$22(a0)
0001A73A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A740 6000 FBD2                  		bra.w	loc_1982C
0001A744                            ; ===========================================================================
0001A744                            
0001A744                            loc_19C72:				; XREF: Obj83_Index
0001A744 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A74A 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A74C 4EF9 0000 DFF6             		jmp	DisplaySprite
0001A752                            ; ===========================================================================
0001A752                            
0001A752                            loc_19C80:				; XREF: Obj83_Index
0001A752 4A28 0001                  		tst.b	1(a0)
0001A756 6A00 FBBC                  		bpl.w	loc_1982C
0001A75A 4EB9 0000 DF5E             		jsr	ObjectFall
0001A760 4EF9 0000 DFF6             		jmp	DisplaySprite
0001A766                            ; ===========================================================================
0001A766                            
0001A766                            Obj83_Break:				; XREF: loc_19C72
0001A766 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A76A 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A76E 7801                       		moveq	#1,d4
0001A770 7203                       		moveq	#3,d1
0001A772 7438                       		moveq	#$38,d2
0001A774 5428 0024                  		addq.b	#2,$24(a0)
0001A778 117C 0008 0019             		move.b	#8,$19(a0)
0001A77E 117C 0008 0016             		move.b	#8,$16(a0)
0001A784 43D0                       		lea	(a0),a1
0001A786 6000                       		bra.s	Obj83_MakeFrag
0001A788                            ; ===========================================================================
0001A788                            
0001A788                            Obj83_LoopFrag:
0001A788 4EB9 0000 E492             		jsr	SingleObjLoad2
0001A78E 6600                       		bne.s	Obj83_BreakSnd
0001A790                            
0001A790                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A790 45D0                       		lea	(a0),a2
0001A792 47D1                       		lea	(a1),a3
0001A794 7603                       		moveq	#3,d3
0001A796                            
0001A796                            loc_19CC4:
0001A796 26DA                       		move.l	(a2)+,(a3)+
0001A798 26DA                       		move.l	(a2)+,(a3)+
0001A79A 26DA                       		move.l	(a2)+,(a3)+
0001A79C 26DA                       		move.l	(a2)+,(a3)+
0001A79E 51CB FFF6                  		dbf	d3,loc_19CC4
0001A7A2                            
0001A7A2 335C 0012                  		move.w	(a4)+,$12(a1)
0001A7A6 361D                       		move.w	(a5)+,d3
0001A7A8 D769 0008                  		add.w	d3,8(a1)
0001A7AC 361D                       		move.w	(a5)+,d3
0001A7AE D769 000C                  		add.w	d3,$C(a1)
0001A7B2 1344 001A                  		move.b	d4,$1A(a1)
0001A7B6 5244                       		addq.w	#1,d4
0001A7B8 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A7BC                            
0001A7BC                            Obj83_BreakSnd:
0001A7BC 303C 00CB                  		move.w	#$CB,d0
0001A7C0 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A7C6 4EF9 0000 DFF6             		jmp	DisplaySprite
0001A7CC                            ; ===========================================================================
0001A7CC 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A7D0 0120 00C0                  		dc.w $120, $C0
0001A7D4 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A7D8 0010 0000                  		dc.w $10, 0
0001A7DC 0000 0010                  		dc.w 0,	$10
0001A7E0 0010 0010                  		dc.w $10, $10
0001A7E4                            ; ---------------------------------------------------------------------------
0001A7E4                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A7E4                            ; ---------------------------------------------------------------------------
0001A7E4                            Map_obj83:
0001A7E4                            	include "_maps\obj83.asm"
0001A7E4                            ; ---------------------------------------------------------------------------
0001A7E4                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A7E4                            ; ---------------------------------------------------------------------------
0001A7E4 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A7E8 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A7EC 0000                       		dc.w byte_19D46-Map_obj83
0001A7EE 01                         byte_19D1C:	dc.b 1
0001A7EF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A7F4 02                         byte_19D22:	dc.b 2
0001A7F5 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A7FA F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A7FF 00                         		dc.b 0
0001A800 02                         byte_19D2E:	dc.b 2
0001A801 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A806 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A80B 00                         		dc.b 0
0001A80C 02                         byte_19D3A:	dc.b 2
0001A80D F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A812 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A817 00                         		dc.b 0
0001A818 02                         byte_19D46:	dc.b 2
0001A819 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A81E F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A824 00                         		even
0001A824 00                         		even
0001A824                            
0001A824                            ; ===========================================================================
0001A824                            ; ---------------------------------------------------------------------------
0001A824                            ; Object 85 - Eggman (FZ)
0001A824                            ; ---------------------------------------------------------------------------
0001A824                            
0001A824                            Obj85_Delete:
0001A824 4EF9 0000 E032             		jmp	DeleteObject
0001A82A                            ; ===========================================================================
0001A82A                            
0001A82A                            Obj85:					; XREF: Obj_Index
0001A82A 7000                       		moveq	#0,d0
0001A82C 1028 0024                  		move.b	$24(a0),d0
0001A830 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A834 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A838                            ; ===========================================================================
0001A838 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A83A 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A83C 0000                       		dc.w loc_1A38E-Obj85_Index
0001A83E 0000                       		dc.w loc_1A346-Obj85_Index
0001A840 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A842 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A844 0000                       		dc.w loc_1A264-Obj85_Index
0001A846                            
0001A846 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A84C 0001 A51C                  		dc.l Map_obj82		; mappings pointer
0001A850 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A856 0000 0000                  		dc.l Map_obj84
0001A85A 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A860 0000 0000                  		dc.l Map_FZBoss
0001A864 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A86A 0001 A51C                  		dc.l Map_obj82
0001A86E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A874 0001 885E                  		dc.l Map_Eggman
0001A878 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A87E 0001 885E                  		dc.l Map_Eggman
0001A882                            
0001A882 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A887 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A88C 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A891 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A896 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A89B 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A8A0                            ; ===========================================================================
0001A8A0                            
0001A8A0                            Obj85_Main:				; XREF: Obj85_Index
0001A8A0 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A8A4 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A8A8 2248                       		movea.l	a0,a1
0001A8AA 7205                       		moveq	#5,d1
0001A8AC 6000                       		bra.s	Obj85_LoadBoss
0001A8AE                            ; ===========================================================================
0001A8AE                            
0001A8AE                            Obj85_Loop:
0001A8AE 4EB9 0000 E492             		jsr	SingleObjLoad2
0001A8B4 6600                       		bne.s	loc_19E20
0001A8B6                            
0001A8B6                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A8B6 12BC 0085                  		move.b	#$85,(a1)
0001A8BA 335A 0008                  		move.w	(a2)+,8(a1)
0001A8BE 335A 000C                  		move.w	(a2)+,$C(a1)
0001A8C2 335A 0002                  		move.w	(a2)+,2(a1)
0001A8C6 235A 0004                  		move.l	(a2)+,4(a1)
0001A8CA 135B 0024                  		move.b	(a3)+,$24(a1)
0001A8CE 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A8D2 135B 0018                  		move.b	(a3)+,$18(a1)
0001A8D6 135B 0017                  		move.b	(a3)+,$17(a1)
0001A8DA 135B 0016                  		move.b	(a3)+,$16(a1)
0001A8DE 137C 0004 0001             		move.b	#4,1(a1)
0001A8E4 08E8 0007 0001             		bset	#7,1(a0)
0001A8EA 2348 0034                  		move.l	a0,$34(a1)
0001A8EE 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A8F2                            
0001A8F2                            loc_19E20:
0001A8F2 45E8 0036                  		lea	$36(a0),a2
0001A8F6 4EB9 0000 E47C             		jsr	SingleObjLoad
0001A8FC 6600                       		bne.s	loc_19E5A
0001A8FE 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A902 3489                       		move.w	a1,(a2)
0001A904 2348 0034                  		move.l	a0,$34(a1)
0001A908 45E8 0038                  		lea	$38(a0),a2
0001A90C 7400                       		moveq	#0,d2
0001A90E 7203                       		moveq	#3,d1
0001A910                            
0001A910                            loc_19E3E:
0001A910 4EB9 0000 E492             		jsr	SingleObjLoad2
0001A916 6600                       		bne.s	loc_19E5A
0001A918 34C9                       		move.w	a1,(a2)+
0001A91A 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A91E 2348 0034                  		move.l	a0,$34(a1)
0001A922 1342 0028                  		move.b	d2,$28(a1)
0001A926 5442                       		addq.w	#2,d2
0001A928 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A92C                            
0001A92C                            loc_19E5A:
0001A92C 317C 0000 0034             		move.w	#0,$34(a0)
0001A932 4EB8 2D02                  		jsr	RandomNumber	; get a number between 0 and 250
0001A936 4240                       		clr.w	d0
0001A938 4840                       		swap	d0
0001A93A 80FC 00FB                  		divu.w	#251,d0
0001A93E 4840                       		swap	d0
0001A940 0640 0118                  		add.w	#280,d0		; add 280
0001A944 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001A94A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A950                            
0001A950                            Obj85_Eggman:				; XREF: Obj85_Index
0001A950 7000                       		moveq	#0,d0
0001A952 1028 0034                  		move.b	$34(a0),d0
0001A956 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A95A 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A95E 4EF9 0000 DFF6             		jmp	DisplaySprite
0001A964                            ; ===========================================================================
0001A964 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A968 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A96C 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A970 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A974                            ; ===========================================================================
0001A974                            
0001A974                            loc_19E90:				; XREF: off_19E80
0001A974 4AB8 F680                  		tst.l	($FFFFF680).w
0001A978 6600                       		bne.s	loc_19EA2
0001A97A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A980 6500                       		bcs.s	loc_19EA2
0001A982 5428 0034                  		addq.b	#2,$34(a0)
0001A986                            
0001A986                            loc_19EA2:
0001A986 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A98A 4E75                       		rts	
0001A98C                            ; ===========================================================================
0001A98C                            
0001A98C                            loc_19EA8:				; XREF: off_19E80
0001A98C 4A68 0030                  		tst.w	$30(a0)
0001A990 6A00                       		bpl.s	loc_19F10
0001A992 4268 0030                  		clr.w	$30(a0)
0001A996 4EB9 0000 2D02             		jsr	(RandomNumber).l
0001A99C 0240 000C                  		andi.w	#$C,d0
0001A9A0 3200                       		move.w	d0,d1
0001A9A2 5441                       		addq.w	#2,d1
0001A9A4 4A80                       		tst.l	d0
0001A9A6 6A00                       		bpl.s	loc_19EC6
0001A9A8 C141                       		exg	d1,d0
0001A9AA                            
0001A9AA                            loc_19EC6:
0001A9AA 43FA 0000                  		lea	word_19FD6(pc),a1
0001A9AE 3031 0000                  		move.w	(a1,d0.w),d0
0001A9B2 3231 1000                  		move.w	(a1,d1.w),d1
0001A9B6 3140 0030                  		move.w	d0,$30(a0)
0001A9BA 74FF                       		moveq	#-1,d2
0001A9BC 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A9C0 2242                       		movea.l	d2,a1
0001A9C2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A9C8 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A9CE 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A9D2 2242                       		movea.l	d2,a1
0001A9D4 137C 0001 0029             		move.b	#1,$29(a1)
0001A9DA 337C 0000 0030             		move.w	#0,$30(a1)
0001A9E0 317C 0001 0032             		move.w	#1,$32(a0)
0001A9E6 4228 0035                  		clr.b	$35(a0)
0001A9EA 303C 00B7                  		move.w	#$B7,d0
0001A9EE 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A9F4                            
0001A9F4                            loc_19F10:
0001A9F4 4A68 0032                  		tst.w	$32(a0)
0001A9F8 6B00 0000                  		bmi.w	loc_19FA6
0001A9FC 08A8 0000 0022             		bclr	#0,$22(a0)
0001AA02 3038 D008                  		move.w	($FFFFD008).w,d0
0001AA06 9068 0008                  		sub.w	8(a0),d0
0001AA0A 6500                       		bcs.s	loc_19F2E
0001AA0C 08E8 0000 0022             		bset	#0,$22(a0)
0001AA12                            
0001AA12                            loc_19F2E:
0001AA12 323C 002B                  		move.w	#$2B,d1
0001AA16 343C 0014                  		move.w	#$14,d2
0001AA1A 363C 0014                  		move.w	#$14,d3
0001AA1E 3828 0008                  		move.w	8(a0),d4
0001AA22 4EB9 0001 03C6             		jsr	SolidObject
0001AA28 4A44                       		tst.w	d4
0001AA2A 6E00                       		bgt.s	loc_19F50
0001AA2C                            
0001AA2C                            loc_19F48:
0001AA2C 4A28 0035                  		tst.b	$35(a0)
0001AA30 6600                       		bne.s	loc_19F88
0001AA32 6000                       		bra.s	loc_19F96
0001AA34                            ; ===========================================================================
0001AA34                            
0001AA34                            loc_19F50:
0001AA34 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001AA38                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001AA38                            ;		bne.s	loc_19F48
0001AA38                            ;		move.w	#$300,d0		; knock player back (nah)
0001AA38                            ;		btst	#0,$22(a0)
0001AA38                            ;		bne.s	loc_19F6A
0001AA38                            ;		neg.w	d0
0001AA38                            ;
0001AA38                            ;loc_19F6A:
0001AA38                            ;		move.w	d0,($FFFFD010).w
0001AA38 4A28 0035                  		tst.b	$35(a0)
0001AA3C 6600                       		bne.s	loc_19F88
0001AA3E 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001AA44 6400                       		bcc.s	@notoverflown
0001AA46 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001AA4C                            @notoverflown:
0001AA4C 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001AA52 303C 00AC                  		move.w	#$AC,d0
0001AA56 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AA5C                            
0001AA5C                            loc_19F88:
0001AA5C 5328 0035                  		subq.b	#1,$35(a0)
0001AA60 6700                       		beq.s	loc_19F96
0001AA62 117C 0003 001C             		move.b	#3,$1C(a0)
0001AA68 6000                       		bra.s	loc_19F9C
0001AA6A                            ; ===========================================================================
0001AA6A                            
0001AA6A                            loc_19F96:
0001AA6A 117C 0001 001C             		move.b	#1,$1C(a0)
0001AA70                            
0001AA70                            loc_19F9C:
0001AA70 43FA FA78                  		lea	Ani_obj82(pc),a1
0001AA74 4EF9 0000 B04C             		jmp	AnimateSprite
0001AA7A                            ; ===========================================================================
0001AA7A                            
0001AA7A                            loc_19FA6:
0001AA7A 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001AA80 6700                       		beq.s	loc_19FBC
0001AA82 5428 0034                  		addq.b	#2,$34(a0)
0001AA86 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AA8C 4268 0032                  		clr.w	$32(a0)
0001AA90 4E75                       		rts	
0001AA92                            ; ===========================================================================
0001AA92                            
0001AA92                            loc_19FBC:
0001AA92 117C 0006 0034             		move.b	#6,$34(a0)
0001AA98 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001AA9E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AAA4 117C 0014 0016             		move.b	#$14,$16(a0)
0001AAAA 4E75                       		rts	
0001AAAC                            ; ===========================================================================
0001AAAC 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001AABC                            ; ===========================================================================
0001AABC                            
0001AABC                            loc_19FE6:				; XREF: off_19E80
0001AABC 70FF                       		moveq	#-1,d0
0001AABE 3028 0036                  		move.w	$36(a0),d0
0001AAC2 2240                       		movea.l	d0,a1
0001AAC4 4A68 0030                  		tst.w	$30(a0)
0001AAC8 6A00                       		bpl.s	loc_1A000
0001AACA 4268 0030                  		clr.w	$30(a0)
0001AACE 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AAD4 6100                       		bsr.s	loc_1A020
0001AAD6                            
0001AAD6                            loc_1A000:
0001AAD6 700F                       		moveq	#$F,d0
0001AAD8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AADC 6600                       		bne.s	loc_1A00A
0001AADE 6100                       		bsr.s	loc_1A020
0001AAE0                            
0001AAE0                            loc_1A00A:
0001AAE0 4A68 0032                  		tst.w	$32(a0)
0001AAE4 6700                       		beq.s	locret_1A01E
0001AAE6 5528 0034                  		subq.b	#2,$34(a0)
0001AAEA 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AAF0 4268 0032                  		clr.w	$32(a0)
0001AAF4                            
0001AAF4                            locret_1A01E:
0001AAF4 4E75                       		rts	
0001AAF6                            ; ===========================================================================
0001AAF6                            
0001AAF6                            loc_1A020:
0001AAF6 303C 00B1                  		move.w	#$B1,d0
0001AAFA 4EF9 0000 158E             		jmp	(PlaySound_Special).l ;	play electricity sound
0001AB00                            ; ===========================================================================
0001AB00                            
0001AB00                            loc_1A02A:				; XREF: off_19E80
0001AB00 117C 0030 0017             		move.b	#$30,$17(a0)
0001AB06 08E8 0000 0022             		bset	#0,$22(a0)
0001AB0C 4EB9 0000 DFD0             		jsr	SpeedToPos
0001AB12 117C 0006 001A             		move.b	#6,$1A(a0)
0001AB18 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AB1E 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AB24 6500                       		bcs.s	loc_1A070
0001AB26 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AB2C 5428 0034                  		addq.b	#2,$34(a0)
0001AB30 117C 0020 0017             		move.b	#$20,$17(a0)
0001AB36 317C 0100 0010             		move.w	#$100,$10(a0)
0001AB3C 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AB42 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AB46                            
0001AB46                            loc_1A070:
0001AB46 6000 0000                  		bra.w	loc_1A166
0001AB4A                            ; ===========================================================================
0001AB4A                            
0001AB4A                            loc_1A074:				; XREF: off_19E80
0001AB4A 08E8 0000 0022             		bset	#0,$22(a0)
0001AB50 117C 0004 001C             		move.b	#4,$1C(a0)
0001AB56 4EB9 0000 DFD0             		jsr	SpeedToPos
0001AB5C 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AB62 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AB68 6500                       		bcs.s	loc_1A09A
0001AB6A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AB70                            
0001AB70                            loc_1A09A:
0001AB70 317C 0400 0010             		move.w	#$400,$10(a0)
0001AB76 3028 0008                  		move.w	8(a0),d0
0001AB7A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AB7E 6A00                       		bpl.s	loc_1A0B4
0001AB80 317C 0500 0010             		move.w	#$500,$10(a0)
0001AB86 6000 0000                  		bra.w	loc_1A0F2
0001AB8A                            ; ===========================================================================
0001AB8A                            
0001AB8A                            loc_1A0B4:
0001AB8A 0440 0070                  		subi.w	#$70,d0
0001AB8E 6500                       		bcs.s	loc_1A0F2
0001AB90 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AB96 5140                       		subq.w	#8,d0
0001AB98 6500                       		bcs.s	loc_1A0F2
0001AB9A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001ABA0 5140                       		subq.w	#8,d0
0001ABA2 6500                       		bcs.s	loc_1A0F2
0001ABA4 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABAA 5140                       		subq.w	#8,d0
0001ABAC 6500                       		bcs.s	loc_1A0F2
0001ABAE 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABB4 5140                       		subq.w	#8,d0
0001ABB6 6500                       		bcs.s	loc_1A0F2
0001ABB8 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABBE 0440 0038                  		subi.w	#$38,d0
0001ABC2 6500                       		bcs.s	loc_1A0F2
0001ABC4 4268 0010                  		clr.w	$10(a0)
0001ABC8                            
0001ABC8                            loc_1A0F2:
0001ABC8 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001ABCE 6500                       		bcs.s	loc_1A110
0001ABD0 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001ABD6 317C 0240 0010             		move.w	#$240,$10(a0)
0001ABDC 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001ABE2 5428 0034                  		addq.b	#2,$34(a0)
0001ABE6                            
0001ABE6                            loc_1A110:
0001ABE6 6000                       		bra.s	loc_1A15C
0001ABE8                            ; ===========================================================================
0001ABE8                            
0001ABE8                            loc_1A112:				; XREF: off_19E80
0001ABE8 4EB9 0000 DFD0             		jsr	SpeedToPos
0001ABEE 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001ABF4 6500                       		bcs.s	loc_1A124
0001ABF6 4268 0010                  		clr.w	$10(a0)
0001ABFA                            
0001ABFA                            loc_1A124:
0001ABFA 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AC00 4A68 0012                  		tst.w	$12(a0)
0001AC04 6B00                       		bmi.s	loc_1A142
0001AC06 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AC0C 6500                       		bcs.s	loc_1A142
0001AC0E 317C 0592 000C             		move.w	#$592,$C(a0)
0001AC14 4268 0012                  		clr.w	$12(a0)
0001AC18                            
0001AC18                            loc_1A142:
0001AC18 3028 0010                  		move.w	$10(a0),d0
0001AC1C 8068 0012                  		or.w	$12(a0),d0
0001AC20 6600                       		bne.s	loc_1A15C
0001AC22 5428 0034                  		addq.b	#2,$34(a0)
0001AC26 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AC2C 117C 0001 0021             		move.b	#1,$21(a0)
0001AC32                            
0001AC32                            loc_1A15C:
0001AC32 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001AC36 4EB9 0000 B04C             		jsr	AnimateSprite
0001AC3C                            
0001AC3C                            loc_1A166:
0001AC3C 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AC42 6C00                       		bge.s	loc_1A172
0001AC44 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AC48                            
0001AC48                            loc_1A172:
0001AC48 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AC4E 6C00                       		bge.s	locret_1A190
0001AC50 323C 001B                  		move.w	#$1B,d1
0001AC54 343C 0070                  		move.w	#$70,d2
0001AC58 363C 0071                  		move.w	#$71,d3
0001AC5C 3828 0008                  		move.w	8(a0),d4
0001AC60 4EF9 0001 03C6             		jmp	SolidObject
0001AC66                            ; ===========================================================================
0001AC66                            
0001AC66                            locret_1A190:
0001AC66 4E75                       		rts	
0001AC68                            ; ===========================================================================
0001AC68                            
0001AC68                            loc_1A192:				; XREF: off_19E80
0001AC68 217C 0001 885E 0004        		move.l	#Map_Eggman,4(a0)
0001AC70 317C 0400 0002             		move.w	#$400,2(a0)
0001AC76 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC7C 08E8 0000 0022             		bset	#0,$22(a0)
0001AC82 4EB9 0000 DFD0             		jsr	SpeedToPos
0001AC88 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AC8E 6400                       		bcc.s	loc_1A1D0
0001AC90 317C 0180 0010             		move.w	#$180,$10(a0)
0001AC96 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AC9C 117C 000F 0020             		move.b	#$F,$20(a0)
0001ACA2 5428 0034                  		addq.b	#2,$34(a0)
0001ACA6                            
0001ACA6                            loc_1A1D0:
0001ACA6 6000 FF8A                  		bra.w	loc_1A15C
0001ACAA                            ; ===========================================================================
0001ACAA                            
0001ACAA                            loc_1A1D4:				; XREF: off_19E80
0001ACAA 08E8 0000 0022             		bset	#0,$22(a0)
0001ACB0 4EB9 0000 DFD0             		jsr	SpeedToPos
0001ACB6 4A68 0030                  		tst.w	$30(a0)
0001ACBA 6600                       		bne.s	loc_1A1FC
0001ACBC 4A28 0020                  		tst.b	$20(a0)
0001ACC0 6600                       		bne.s	loc_1A216
0001ACC2 317C 001E 0030             		move.w	#$1E,$30(a0)
0001ACC8 303C 00AC                  		move.w	#$AC,d0
0001ACCC 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ACD2                            
0001ACD2                            loc_1A1FC:
0001ACD2 5368 0030                  		subq.w	#1,$30(a0)
0001ACD6 6600                       		bne.s	loc_1A216
0001ACD8 4A28 0022                  		tst.b	$22(a0)
0001ACDC 6A00                       		bpl.s	loc_1A210
0001ACDE 317C 0060 0012             		move.w	#$60,$12(a0)
0001ACE4 6000                       		bra.s	loc_1A216
0001ACE6                            ; ===========================================================================
0001ACE6                            
0001ACE6                            loc_1A210:
0001ACE6 117C 000F 0020             		move.b	#$F,$20(a0)
0001ACEC                            
0001ACEC                            loc_1A216:
0001ACEC 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001ACF2 6D00                       		blt.s	loc_1A23A
0001ACF4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001ACFA 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AD00 4278 D014                  		clr.w	($FFFFD014).w
0001AD04 4A68 0012                  		tst.w	$12(a0)
0001AD08 6A00                       		bpl.s	loc_1A248
0001AD0A 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AD10                            
0001AD10                            loc_1A23A:
0001AD10 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AD16 6D00                       		blt.s	loc_1A248
0001AD18 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AD1E                            
0001AD1E                            loc_1A248:
0001AD1E 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AD24 6500                       		bcs.s	loc_1A260
0001AD26 4A28 0001                  		tst.b	1(a0)
0001AD2A 6B00                       		bmi.s	loc_1A260
0001AD2C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AD32 6000 FAF0                  		bra.w	Obj85_Delete
0001AD36                            ; ===========================================================================
0001AD36                            
0001AD36                            loc_1A260:
0001AD36 6000 FEFA                  		bra.w	loc_1A15C
0001AD3A                            ; ===========================================================================
0001AD3A                            
0001AD3A                            loc_1A264:				; XREF: Obj85_Index
0001AD3A 2268 0034                  		movea.l	$34(a0),a1
0001AD3E 1011                       		move.b	(a1),d0
0001AD40 B010                       		cmp.b	(a0),d0
0001AD42 6600 FAE0                  		bne.w	Obj85_Delete
0001AD46 117C 0007 001C             		move.b	#7,$1C(a0)
0001AD4C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AD52 6C00                       		bge.s	loc_1A280
0001AD54 6000                       		bra.s	loc_1A2A6
0001AD56                            ; ===========================================================================
0001AD56                            
0001AD56                            loc_1A280:
0001AD56 4A69 0010                  		tst.w	$10(a1)
0001AD5A 6700                       		beq.s	loc_1A28C
0001AD5C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AD62                            
0001AD62                            loc_1A28C:
0001AD62 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001AD66 4EB9 0000 B04C             		jsr	AnimateSprite
0001AD6C                            
0001AD6C                            loc_1A296:
0001AD6C 2268 0034                  		movea.l	$34(a0),a1
0001AD70 3169 0008 0008             		move.w	8(a1),8(a0)
0001AD76 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AD7C                            
0001AD7C                            loc_1A2A6:
0001AD7C 2268 0034                  		movea.l	$34(a0),a1
0001AD80 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AD86 7003                       		moveq	#3,d0
0001AD88 C028 0022                  		and.b	$22(a0),d0
0001AD8C 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AD92 8128 0001                  		or.b	d0,1(a0)
0001AD96 4EF9 0000 DFF6             		jmp	DisplaySprite
0001AD9C                            ; ===========================================================================
0001AD9C                            
0001AD9C                            loc_1A2C6:				; XREF: Obj85_Index
0001AD9C 2268 0034                  		movea.l	$34(a0),a1
0001ADA0 1011                       		move.b	(a1),d0
0001ADA2 B010                       		cmp.b	(a0),d0
0001ADA4 6600 FA7E                  		bne.w	Obj85_Delete
0001ADA8 0CA9 0001 885E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ADB0 6700                       		beq.s	loc_1A2E4
0001ADB2 117C 000A 001A             		move.b	#$A,$1A(a0)
0001ADB8 60C2                       		bra.s	loc_1A2A6
0001ADBA                            ; ===========================================================================
0001ADBA                            
0001ADBA                            loc_1A2E4:
0001ADBA 117C 0001 001C             		move.b	#1,$1C(a0)
0001ADC0 4A29 0021                  		tst.b	$21(a1)
0001ADC4 6F00                       		ble.s	loc_1A312
0001ADC6 117C 0006 001C             		move.b	#6,$1C(a0)
0001ADCC 217C 0001 885E 0004        		move.l	#Map_Eggman,4(a0)
0001ADD4 317C 0400 0002             		move.w	#$400,2(a0)
0001ADDA 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001ADDE 4EB9 0000 B04C             		jsr	AnimateSprite
0001ADE4 6000 FF86                  		bra.w	loc_1A296
0001ADE8                            ; ===========================================================================
0001ADE8                            
0001ADE8                            loc_1A312:
0001ADE8 4A28 0001                  		tst.b	1(a0)
0001ADEC 6A00 FA36                  		bpl.w	Obj85_Delete
0001ADF0 6100 D584                  		bsr.w	BossDefeated
0001ADF4 117C 0002 0018             		move.b	#2,$18(a0)
0001ADFA 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE00 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AE08 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AE0E 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AE12 4EB9 0000 B04C             		jsr	AnimateSprite
0001AE18 6000 FF52                  		bra.w	loc_1A296
0001AE1C                            ; ===========================================================================
0001AE1C                            
0001AE1C                            loc_1A346:				; XREF: Obj85_Index
0001AE1C 08E8 0000 0022             		bset	#0,$22(a0)
0001AE22 2268 0034                  		movea.l	$34(a0),a1
0001AE26 0CA9 0001 885E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AE2E 6700                       		beq.s	loc_1A35E
0001AE30 6000 FF4A                  		bra.w	loc_1A2A6
0001AE34                            ; ===========================================================================
0001AE34                            
0001AE34                            loc_1A35E:
0001AE34 3169 0008 0008             		move.w	8(a1),8(a0)
0001AE3A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AE40 4A28 001E                  		tst.b	$1E(a0)
0001AE44 6600                       		bne.s	loc_1A376
0001AE46 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AE4C                            
0001AE4C                            loc_1A376:
0001AE4C 5328 001E                  		subq.b	#1,$1E(a0)
0001AE50 6E00                       		bgt.s	loc_1A38A
0001AE52 5228 001A                  		addq.b	#1,$1A(a0)
0001AE56 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AE5C 6E00 F9C6                  		bgt.w	Obj85_Delete
0001AE60                            
0001AE60                            loc_1A38A:
0001AE60 6000 FF0A                  		bra.w	loc_1A296
0001AE64                            ; ===========================================================================
0001AE64                            
0001AE64                            loc_1A38E:				; XREF: Obj85_Index
0001AE64 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AE6A 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE6E 9068 0008                  		sub.w	8(a0),d0
0001AE72 6500                       		bcs.s	loc_1A3A6
0001AE74 4A28 0001                  		tst.b	1(a0)
0001AE78 6A00 F9AA                  		bpl.w	Obj85_Delete
0001AE7C                            
0001AE7C                            loc_1A3A6:
0001AE7C 4EF9 0000 DFF6             		jmp	DisplaySprite
0001AE82                            ; ===========================================================================
0001AE82                            
0001AE82                            loc_1A3AC:				; XREF: Obj85_Index
0001AE82 117C 0000 001A             		move.b	#0,$1A(a0)
0001AE88 08E8 0000 0022             		bset	#0,$22(a0)
0001AE8E 2268 0034                  		movea.l	$34(a0),a1
0001AE92 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AE98 6600                       		bne.s	loc_1A3D0
0001AE9A 0CA9 0001 885E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AEA2 6700 F980                  		beq.w	Obj85_Delete
0001AEA6                            
0001AEA6                            loc_1A3D0:
0001AEA6 6000 FED4                  		bra.w	loc_1A2A6
0001AEAA                            ; ===========================================================================
0001AEAA                            Ani_obj85:
0001AEAA                            	include "_anim\obj85.asm"
0001AEAA                            ; ---------------------------------------------------------------------------
0001AEAA                            ; Animation script - Eggman (FZ)
0001AEAA                            ; ---------------------------------------------------------------------------
0001AEAA 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AEAC 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AEB0                            		even
0001AEB0                            		even
0001AEB0                            
0001AEB0                            Map_Eggman2:
0001AEB0                            	include "_maps\Eggman2.asm"
0001AEB0                            ; ---------------------------------------------------------------------------
0001AEB0                            ; Sprite mappings - Eggman (FZ)
0001AEB0                            ; ---------------------------------------------------------------------------
0001AEB0 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AEB2 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AEB4 06                         byte_1A3DE:	dc.b 6
0001AEB5 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AEBA EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AEBF EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AEC4 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AEC9 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AECE 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AED3 06                         byte_1A3FD:	dc.b 6
0001AED4 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AED9 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AEDE EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AEE3 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AEE8 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AEED 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AEF2                            		even
0001AEF2                            		even
0001AEF2                            
0001AEF2                            Map_FZBoss:
0001AEF2                            	include "_maps\FZ boss.asm"
0001AEF2                            ; ---------------------------------------------------------------------------
0001AEF2                            ; Sprite mappings - boss (FZ)
0001AEF2                            ; ---------------------------------------------------------------------------
0001AEF2 0000                       		dc.w byte_1A422-Map_FZBoss
0001AEF4 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AEF6 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AEF8 02                         byte_1A422:	dc.b 2
0001AEF9 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AEFE 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AF03 03                         byte_1A42D:	dc.b 3
0001AF04 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AF09 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AF0E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AF13 02                         byte_1A43D:	dc.b 2
0001AF14 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AF19 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AF1E                            		even
0001AF1E                            		even
0001AF1E                            
0001AF1E                            ; ===========================================================================
0001AF1E                            
0001AF1E                            Obj84_Delete:
0001AF1E 4EF9 0000 E032             		jmp	DeleteObject
0001AF24                            ; ===========================================================================
0001AF24                            ; ---------------------------------------------------------------------------
0001AF24                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AF24                            ; ---------------------------------------------------------------------------
0001AF24                            
0001AF24                            Obj84:					; XREF: Obj_Index
0001AF24 7000                       		moveq	#0,d0
0001AF26 1028 0024                  		move.b	$24(a0),d0
0001AF2A 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AF2E 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AF32                            ; ===========================================================================
0001AF32 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AF34 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AF36 0000                       		dc.w loc_1A57E-Obj84_Index
0001AF38                            
0001AF38 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AF3C 2550 0620                  		dc.w $2550, $620
0001AF40 2490 04C0                  		dc.w $2490, $4C0
0001AF44 2510 04C0                  		dc.w $2510, $4C0
0001AF48                            ; ===========================================================================
0001AF48                            
0001AF48                            Obj84_Main:				; XREF: Obj84_Index
0001AF48 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AF4C 7000                       		moveq	#0,d0
0001AF4E 1028 0028                  		move.b	$28(a0),d0
0001AF52 D040                       		add.w	d0,d0
0001AF54 D2C0                       		adda.w	d0,a1
0001AF56 117C 0004 0001             		move.b	#4,1(a0)
0001AF5C 08E8 0007 0001             		bset	#7,1(a0)
0001AF62 08E8 0004 0001             		bset	#4,1(a0)
0001AF68 317C 0300 0002             		move.w	#$300,2(a0)
0001AF6E 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AF76 3159 0008                  		move.w	(a1)+,8(a0)
0001AF7A 3151 000C                  		move.w	(a1),$C(a0)
0001AF7E 3159 0038                  		move.w	(a1)+,$38(a0)
0001AF82 117C 0020 0016             		move.b	#$20,$16(a0)
0001AF88 117C 0060 0017             		move.b	#$60,$17(a0)
0001AF8E 117C 0020 0019             		move.b	#$20,$19(a0)
0001AF94 117C 0060 0016             		move.b	#$60,$16(a0)
0001AF9A 117C 0003 0018             		move.b	#3,$18(a0)
0001AFA0 5428 0024                  		addq.b	#2,$24(a0)
0001AFA4                            
0001AFA4                            loc_1A4CE:				; XREF: Obj84_Index
0001AFA4 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AFAA 6F00                       		ble.s	loc_1A4DC
0001AFAC 08E8 0001 0001             		bset	#1,1(a0)
0001AFB2                            
0001AFB2                            loc_1A4DC:
0001AFB2 42A8 003C                  		clr.l	$3C(a0)
0001AFB6 4A28 0029                  		tst.b	$29(a0)
0001AFBA 6700                       		beq.s	loc_1A4EA
0001AFBC 5428 0024                  		addq.b	#2,$24(a0)
0001AFC0                            
0001AFC0                            loc_1A4EA:
0001AFC0 2028 003C                  		move.l	$3C(a0),d0
0001AFC4 2228 0038                  		move.l	$38(a0),d1
0001AFC8 D280                       		add.l	d0,d1
0001AFCA 4841                       		swap	d1
0001AFCC 3141 000C                  		move.w	d1,$C(a0)
0001AFD0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AFD6 6600                       		bne.s	loc_1A524
0001AFD8 4A68 0030                  		tst.w	$30(a0)
0001AFDC 6A00                       		bpl.s	loc_1A524
0001AFDE 70F6                       		moveq	#-$A,d0
0001AFE0 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AFE6 6F00                       		ble.s	loc_1A514
0001AFE8 700E                       		moveq	#$E,d0
0001AFEA                            
0001AFEA                            loc_1A514:
0001AFEA D240                       		add.w	d0,d1
0001AFEC 2268 0034                  		movea.l	$34(a0),a1
0001AFF0 3341 000C                  		move.w	d1,$C(a1)
0001AFF4 3368 0008 0008             		move.w	8(a0),8(a1)
0001AFFA                            
0001AFFA                            loc_1A524:
0001AFFA 323C 002B                  		move.w	#$2B,d1
0001AFFE 343C 0060                  		move.w	#$60,d2
0001B002 363C 0061                  		move.w	#$61,d3
0001B006 3828 0008                  		move.w	8(a0),d4
0001B00A 4EB9 0001 03C6             		jsr	SolidObject
0001B010 7000                       		moveq	#0,d0
0001B012 3228 003C                  		move.w	$3C(a0),d1
0001B016 6A00                       		bpl.s	loc_1A550
0001B018 4441                       		neg.w	d1
0001B01A 5141                       		subq.w	#8,d1
0001B01C 6500                       		bcs.s	loc_1A55C
0001B01E 5200                       		addq.b	#1,d0
0001B020 E841                       		asr.w	#4,d1
0001B022 D041                       		add.w	d1,d0
0001B024 6000                       		bra.s	loc_1A55C
0001B026                            ; ===========================================================================
0001B026                            
0001B026                            loc_1A550:
0001B026 0441 0027                  		subi.w	#$27,d1
0001B02A 6500                       		bcs.s	loc_1A55C
0001B02C 5200                       		addq.b	#1,d0
0001B02E E841                       		asr.w	#4,d1
0001B030 D041                       		add.w	d1,d0
0001B032                            
0001B032                            loc_1A55C:
0001B032 1140 001A                  		move.b	d0,$1A(a0)
0001B036 3038 D008                  		move.w	($FFFFD008).w,d0
0001B03A 9068 0008                  		sub.w	8(a0),d0
0001B03E 6B00                       		bmi.s	loc_1A578
0001B040 0440 0140                  		subi.w	#$140,d0
0001B044 6B00                       		bmi.s	loc_1A578
0001B046 4A28 0001                  		tst.b	1(a0)
0001B04A 6A00 FED2                  		bpl.w	Obj84_Delete
0001B04E                            
0001B04E                            loc_1A578:
0001B04E 4EF9 0000 DFF6             		jmp	DisplaySprite
0001B054                            ; ===========================================================================
0001B054                            
0001B054                            loc_1A57E:				; XREF: Obj84_Index
0001B054 7000                       		moveq	#0,d0
0001B056 1028 0028                  		move.b	$28(a0),d0
0001B05A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B05E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B062 6000 FF5C                  		bra.w	loc_1A4EA
0001B066                            ; ===========================================================================
0001B066 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B068 0000                       		dc.w loc_1A598-off_1A590
0001B06A 0000                       		dc.w loc_1A604-off_1A590
0001B06C 0000                       		dc.w loc_1A604-off_1A590
0001B06E                            ; ===========================================================================
0001B06E                            
0001B06E                            loc_1A598:				; XREF: off_1A590
0001B06E 4A28 0029                  		tst.b	$29(a0)
0001B072 6600                       		bne.s	loc_1A5D4
0001B074 2268 0034                  		movea.l	$34(a0),a1
0001B078 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B07E 6600                       		bne.s	loc_1A5B4
0001B080 6100 D2F4                  		bsr.w	BossDefeated
0001B084 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B08C                            
0001B08C                            loc_1A5B4:
0001B08C 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B094 6400                       		bcc.s	locret_1A602
0001B096 42A8 003C                  		clr.l	$3C(a0)
0001B09A 2268 0034                  		movea.l	$34(a0),a1
0001B09E 5369 0032                  		subq.w	#1,$32(a1)
0001B0A2 4269 0030                  		clr.w	$30(a1)
0001B0A6 5528 0024                  		subq.b	#2,$24(a0)
0001B0AA 4E75                       		rts	
0001B0AC                            ; ===========================================================================
0001B0AC                            
0001B0AC                            loc_1A5D4:
0001B0AC 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B0B2 6C00                       		bge.s	loc_1A5E4
0001B0B4 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B0BC                            
0001B0BC                            loc_1A5E4:
0001B0BC 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B0C4 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B0CA 6E00                       		bgt.s	locret_1A602
0001B0CC 4268 003E                  		clr.w	$3E(a0)
0001B0D0 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B0D6 4228 0029                  		clr.b	$29(a0)
0001B0DA                            
0001B0DA                            locret_1A602:
0001B0DA 4E75                       		rts	
0001B0DC                            ; ===========================================================================
0001B0DC                            
0001B0DC                            loc_1A604:				; XREF: off_1A590
0001B0DC 08E8 0001 0001             		bset	#1,1(a0)
0001B0E2 4A28 0029                  		tst.b	$29(a0)
0001B0E6 6600                       		bne.s	loc_1A646
0001B0E8 2268 0034                  		movea.l	$34(a0),a1
0001B0EC 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B0F2 6600                       		bne.s	loc_1A626
0001B0F4 6100 D280                  		bsr.w	BossDefeated
0001B0F8 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B100                            
0001B100                            loc_1A626:
0001B100 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B108 6400                       		bcc.s	locret_1A674
0001B10A 42A8 003C                  		clr.l	$3C(a0)
0001B10E 2268 0034                  		movea.l	$34(a0),a1
0001B112 5369 0032                  		subq.w	#1,$32(a1)
0001B116 4269 0030                  		clr.w	$30(a1)
0001B11A 5528 0024                  		subq.b	#2,$24(a0)
0001B11E 4E75                       		rts	
0001B120                            ; ===========================================================================
0001B120                            
0001B120                            loc_1A646:
0001B120 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B126 6D00                       		blt.s	loc_1A656
0001B128 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B130                            
0001B130                            loc_1A656:
0001B130 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B138 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B13E 6D00                       		blt.s	locret_1A674
0001B140 4268 003E                  		clr.w	$3E(a0)
0001B144 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B14A 4228 0029                  		clr.b	$29(a0)
0001B14E                            
0001B14E                            locret_1A674:
0001B14E 4E75                       		rts	
0001B150                            ; ===========================================================================
0001B150                            ; ---------------------------------------------------------------------------
0001B150                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B150                            ; ---------------------------------------------------------------------------
0001B150                            Map_obj84:
0001B150                            	include "_maps\obj84.asm"
0001B150                            ; ---------------------------------------------------------------------------
0001B150                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B150                            ; ---------------------------------------------------------------------------
0001B150 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B154 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B158 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B15C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B160 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B164 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B168 06                         byte_1A68E:	dc.b 6
0001B169 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B16E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B173 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B178 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B17D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B182 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B187 08                         byte_1A6AD:	dc.b 8
0001B188 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B18D A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B192 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B197 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B19C B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1A1 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1A6 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B1AB D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B1B0 0A                         byte_1A6D6:	dc.b $A
0001B1B1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1B6 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1BB B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1C0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1C5 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1CA B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1CF D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B1D4 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B1D9 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B1DE F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B1E3 0C                         byte_1A709:	dc.b $C
0001B1E4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1E9 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1EE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1F3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1F8 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1FD B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B202 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B207 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B20C F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B211 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B216 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B21B 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B220 0D                         byte_1A746:	dc.b $D
0001B221 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B226 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B22B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B230 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B235 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B23A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B23F D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B244 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B249 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B24E F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B253 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B258 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B25D 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B262 0E                         byte_1A788:	dc.b $E
0001B263 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B268 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B26D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B272 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B277 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B27C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B281 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B286 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B28B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B290 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B295 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B29A 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B29F 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B2A4 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B2A9 02                         byte_1A7CF:	dc.b 2
0001B2AA F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B2AF 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B2B4                            		even
0001B2B4                            		even
0001B2B4                            
0001B2B4                            ; ===========================================================================
0001B2B4                            ; ---------------------------------------------------------------------------
0001B2B4                            ; Object 86 - energy balls (FZ)
0001B2B4                            ; ---------------------------------------------------------------------------
0001B2B4                            
0001B2B4                            Obj86:					; XREF: Obj_Index
0001B2B4 7000                       		moveq	#0,d0
0001B2B6 1028 0024                  		move.b	$24(a0),d0
0001B2BA 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B2BE 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B2C2                            ; ===========================================================================
0001B2C2 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B2C4 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B2C6 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B2C8 0000                       		dc.w loc_1A962-Obj86_Index
0001B2CA 0000                       		dc.w loc_1A982-Obj86_Index
0001B2CC                            ; ===========================================================================
0001B2CC                            
0001B2CC                            Obj86_Main:				; XREF: Obj86_Index
0001B2CC 317C 2588 0008             		move.w	#$2588,8(a0)
0001B2D2 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B2D8 317C 0300 0002             		move.w	#$300,2(a0)
0001B2DE 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B2E6 117C 0000 001C             		move.b	#0,$1C(a0)
0001B2EC 117C 0003 0018             		move.b	#3,$18(a0)
0001B2F2 117C 0008 0017             		move.b	#8,$17(a0)
0001B2F8 117C 0008 0016             		move.b	#8,$16(a0)
0001B2FE 117C 0004 0001             		move.b	#4,1(a0)
0001B304 08E8 0007 0001             		bset	#7,1(a0)
0001B30A 5428 0024                  		addq.b	#2,$24(a0)
0001B30E                            
0001B30E                            Obj86_Generator:			; XREF: Obj86_Index
0001B30E 2268 0034                  		movea.l	$34(a0),a1
0001B312 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B318 6600                       		bne.s	loc_1A850
0001B31A 10BC 003F                  		move.b	#$3F,(a0)
0001B31E 117C 0000 0024             		move.b	#0,$24(a0)
0001B324 4EF9 0000 DFF6             		jmp	DisplaySprite
0001B32A                            ; ===========================================================================
0001B32A                            
0001B32A                            loc_1A850:
0001B32A 117C 0000 001C             		move.b	#0,$1C(a0)
0001B330 4A28 0029                  		tst.b	$29(a0)
0001B334 6700                       		beq.s	loc_1A86C
0001B336 5428 0024                  		addq.b	#2,$24(a0)
0001B33A 117C 0001 001C             		move.b	#1,$1C(a0)
0001B340 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B346                            
0001B346                            loc_1A86C:
0001B346 323C 0013                  		move.w	#$13,d1
0001B34A 343C 0008                  		move.w	#8,d2
0001B34E 363C 0011                  		move.w	#$11,d3
0001B352 3828 0008                  		move.w	8(a0),d4
0001B356 4EB9 0001 03C6             		jsr	SolidObject
0001B35C 3038 D008                  		move.w	($FFFFD008).w,d0
0001B360 9068 0008                  		sub.w	8(a0),d0
0001B364 6B00                       		bmi.s	loc_1A89A
0001B366 0440 0140                  		subi.w	#$140,d0
0001B36A 6B00                       		bmi.s	loc_1A89A
0001B36C 4A28 0001                  		tst.b	1(a0)
0001B370 6A00 FBAC                  		bpl.w	Obj84_Delete
0001B374                            
0001B374                            loc_1A89A:
0001B374 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B378 4EB9 0000 B04C             		jsr	AnimateSprite
0001B37E 4EF9 0000 DFF6             		jmp	DisplaySprite
0001B384                            ; ===========================================================================
0001B384                            
0001B384                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B384 4A28 0029                  		tst.b	$29(a0)
0001B388 6700 0000                  		beq.w	loc_1A954
0001B38C 4228 0029                  		clr.b	$29(a0)
0001B390 D068 0030                  		add.w	$30(a0),d0
0001B394 0240 001E                  		andi.w	#$1E,d0
0001B398 D4C0                       		adda.w	d0,a2
0001B39A 5868 0030                  		addq.w	#4,$30(a0)
0001B39E 4268 0032                  		clr.w	$32(a0)
0001B3A2 7403                       		moveq	#3,d2
0001B3A4                            
0001B3A4                            Obj86_Loop:
0001B3A4 4EB9 0000 E492             		jsr	SingleObjLoad2
0001B3AA 6600 0000                  		bne.w	loc_1A954
0001B3AE 12BC 0086                  		move.b	#$86,(a1)
0001B3B2 3368 0008 0008             		move.w	8(a0),8(a1)
0001B3B8 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B3BE 137C 0008 0024             		move.b	#8,$24(a1)
0001B3C4 337C 2300 0002             		move.w	#$2300,2(a1)
0001B3CA 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B3D2 137C 000C 0016             		move.b	#$C,$16(a1)
0001B3D8 137C 000C 0017             		move.b	#$C,$17(a1)
0001B3DE 137C 0000 0020             		move.b	#0,$20(a1)
0001B3E4 137C 0003 0018             		move.b	#3,$18(a1)
0001B3EA 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B3F0 137C 0004 0001             		move.b	#4,1(a1)
0001B3F6 08E9 0007 0001             		bset	#7,1(a1)
0001B3FC 2348 0034                  		move.l	a0,$34(a1)
0001B400 4EB9 0000 2D02             		jsr	(RandomNumber).l
0001B406 3228 0032                  		move.w	$32(a0),d1
0001B40A C3FC FFB1                  		muls.w	#-$4F,d1
0001B40E 0641 2578                  		addi.w	#$2578,d1
0001B412 0240 001F                  		andi.w	#$1F,d0
0001B416 0440 0010                  		subi.w	#$10,d0
0001B41A D041                       		add.w	d1,d0
0001B41C 3340 0030                  		move.w	d0,$30(a1)
0001B420 5268 0032                  		addq.w	#1,$32(a0)
0001B424 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B42A 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B42E                            
0001B42E                            loc_1A954:
0001B42E 4A68 0032                  		tst.w	$32(a0)
0001B432 6600                       		bne.s	loc_1A95E
0001B434 5428 0024                  		addq.b	#2,$24(a0)
0001B438                            
0001B438                            loc_1A95E:
0001B438 6000 FF0C                  		bra.w	loc_1A86C
0001B43C                            ; ===========================================================================
0001B43C                            
0001B43C                            loc_1A962:				; XREF: Obj86_Index
0001B43C 117C 0002 001C             		move.b	#2,$1C(a0)
0001B442 4A68 0038                  		tst.w	$38(a0)
0001B446 6600                       		bne.s	loc_1A97E
0001B448 117C 0002 0024             		move.b	#2,$24(a0)
0001B44E 2268 0034                  		movea.l	$34(a0),a1
0001B452 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B458                            
0001B458                            loc_1A97E:
0001B458 6000 FEEC                  		bra.w	loc_1A86C
0001B45C                            ; ===========================================================================
0001B45C                            
0001B45C                            loc_1A982:				; XREF: Obj86_Index
0001B45C 7000                       		moveq	#0,d0
0001B45E 1028 0025                  		move.b	$25(a0),d0
0001B462 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B466 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001B46A                            ; ===========================================================================
0001B46A 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B46C 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B46E 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001B470 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001B472 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001B474 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001B476 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B478 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001B47A 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B47C 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001B47E                            ; ===========================================================================
0001B47E                            
0001B47E                            loc_1A9A6:				; XREF: Obj86_Index2
0001B47E 3028 0030                  		move.w	$30(a0),d0
0001B482 9068 0008                  		sub.w	8(a0),d0
0001B486 E940                       		asl.w	#4,d0
0001B488 3140 0010                  		move.w	d0,$10(a0)
0001B48C 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B492 5428 0025                  		addq.b	#2,$25(a0)
0001B496                            
0001B496                            Obj86_Ball_Animate:
0001B496 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B49A 4EB9 0000 B04C             		jsr	AnimateSprite
0001B4A0 4EF9 0000 DFF6             		jmp	DisplaySprite
0001B4A6                            ; ===========================================================================
0001B4A6                            
0001B4A6                            loc_1A9C0:				; XREF: Obj86_Index2
0001B4A6 4A68 0010                  		tst.w	$10(a0)
0001B4AA 6700                       		beq.s	loc_1A9E6
0001B4AC 4EB9 0000 DFD0             		jsr	SpeedToPos
0001B4B2 3028 0008                  		move.w	8(a0),d0
0001B4B6 9068 0030                  		sub.w	$30(a0),d0
0001B4BA 6400                       		bcc.s	loc_1A9E6
0001B4BC 4268 0010                  		clr.w	$10(a0)
0001B4C0 D168 0008                  		add.w	d0,8(a0)
0001B4C4 2268 0034                  		movea.l	$34(a0),a1
0001B4C8 5369 0032                  		subq.w	#1,$32(a1)
0001B4CC                            
0001B4CC                            loc_1A9E6:
0001B4CC 117C 0000 001C             		move.b	#0,$1C(a0)
0001B4D2 5368 0028                  		subq.w	#1,$28(a0)
0001B4D6 6600                       		bne.s	locret_1AA1C
0001B4D8 4EB8 2D02                  		jsr	RandomNumber
0001B4DC 0240 000E                  		and.w	#7*2,d0
0001B4E0 5840                       		addq.w	#2*2,d0
0001B4E2 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001B4E6 4840                       		swap	d0
0001B4E8 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001B4EC 117C 0001 001C             		move.b	#1,$1C(a0)
0001B4F2 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B4F8 3038 D008                  		move.w	($FFFFD008).w,d0
0001B4FC 9068 0008                  		sub.w	8(a0),d0
0001B500 3140 0010                  		move.w	d0,$10(a0)
0001B504 317C 0140 0012             		move.w	#$140,$12(a0)
0001B50A                            
0001B50A                            locret_1AA1C:
0001B50A 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001B50E                            ; ===========================================================================
0001B50E                            
0001B50E                            Obj86_Ball_Explode:
0001B50E 5328 0028                  		subq.b	#1,$28(a0)
0001B512 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001B516 2268 0034                  		movea.l	$34(a0),a1
0001B51A 5369 0038                  		subq.w	#1,$38(a1)
0001B51E 2248                       		move.l	a0,a1
0001B520 7400                       		moveq	#0,d2	; GMZ
0001B522 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001B524 6000                       		bra.s	@start
0001B526                            @loop:
0001B526 4EB9 0000 E47C             		jsr	SingleObjLoad
0001B52C 6600                       		bne.s	@exit
0001B52E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B534 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B53A                            @start:
0001B53A 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B53E 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001B544 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001B548 5802                       		addq.b	#4,d2
0001B54A 51C9 FFDA                  		dbf	d1,@loop
0001B54E                            @exit:
0001B54E 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001B552                            ; ===========================================================================
0001B552                            
0001B552                            Obj86_Ball_Sine:
0001B552 1028 0028                  		move.b	$28(a0),d0
0001B556 5828 0028                  		addq.b	#4,$28(a0)
0001B55A 4EB8 2D28                  		jsr	CalcSine
0001B55E C1FC 0002                  		muls.w	#2,d0
0001B562 3140 0010                  		move.w	d0,$10(a0)
0001B566                            
0001B566 1028 0029                  		move.b	$29(a0),d0
0001B56A 5828 0029                  		addq.b	#4,$29(a0)
0001B56E 4EB8 2D28                  		jsr	CalcSine
0001B572 4A40                       		tst.w	d0
0001B574 6B00                       		bmi.s	@upwards
0001B576 E548                       		lsl.w	#2,d0		; x4 go down faster
0001B578                            @upwards:
0001B578 3140 0012                  		move.w	d0,$12(a0)
0001B57C 6000 0000                  		bra.w	loc_1AA1E
0001B580                            ; ===========================================================================
0001B580                            
0001B580                            Obj86_Ball_Homing:
0001B580 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001B586 6400                       		bhs.s	@homer
0001B588 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001B58E 6400                       		bhs.s	Obj86_Ball_Vanish
0001B590 5328 0028                  		subq.b	#1,$28(a0)
0001B594 6400                       		bcc.s	@nomorehoming
0001B596 3038 D008                  		move.w	($FFFFD008).w,d0
0001B59A 9068 0008                  		sub.w	8(a0),d0
0001B59E D168 0010                  		add.w	d0,$10(a0)
0001B5A2 D168 0010                  		add.w	d0,$10(a0)
0001B5A6                            @nomorehoming:
0001B5A6 6000 0000                  		bra.w	loc_1AA1E
0001B5AA                            @homer:
0001B5AA 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001B5B0 60F4                       		bra.s	@nomorehoming	; next frame ig
0001B5B2                            ; ===========================================================================
0001B5B2                            
0001B5B2                            Obj86_Ball_Speed:
0001B5B2 4268 0010                  		clr.w	$10(a0)
0001B5B6 7000                       		moveq	#0,d0
0001B5B8 1028 0028                  		move.b	$28(a0),d0
0001B5BC E448                       		lsr.w	#2,d0
0001B5BE D168 0012                  		add.w	d0,$12(a0)
0001B5C2 1028 0029                  		move.b	$29(a0),d0
0001B5C6 D128 0028                  		add.b	d0,$28(a0)
0001B5CA 6000 0000                  		bra.w	loc_1AA1E
0001B5CE                            ; ===========================================================================
0001B5CE                            
0001B5CE                            Obj86_Ball_Vanish:
0001B5CE 303C 00E1                  		move.w	#$E1,d0
0001B5D2 4EB9 0000 158E             		jsr	(PlaySound_Special).l
0001B5D8 6000 0000                  		bra.w	loc_1AA34
0001B5DC                            ; ===========================================================================
0001B5DC                            
0001B5DC                            Obj86_Ball_Static:
0001B5DC 4268 0010                  		clr.w	$10(a0)
0001B5E0 7000                       		moveq	#0,d0
0001B5E2 7200                       		moveq	#0,d1
0001B5E4 1028 0028                  		move.b	$28(a0),d0
0001B5E8 1228 0029                  		move.b	$29(a0),d1
0001B5EC D041                       		add.w	d1,d0
0001B5EE 3140 0012                  		move.w	d0,$12(a0)
0001B5F2 6000 0000                  		bra.w	loc_1AA1E
0001B5F6                            ; ===========================================================================
0001B5F6                            
0001B5F6                            Obj86_Ball_Standard:
0001B5F6                            loc_1AA1E:
0001B5F6 4EB9 0000 DFD0             		jsr	SpeedToPos
0001B5FC 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B602 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001B606                            loc_1AA34:
0001B606 2268 0034                  		movea.l	$34(a0),a1
0001B60A 5369 0038                  		subq.w	#1,$38(a1)
0001B60E 6000 F90E                  		bra.w	Obj84_Delete
0001B612                            ; ===========================================================================
0001B612                            Ani_obj86:
0001B612                            	include "_anim\obj86.asm"
0001B612                            ; ---------------------------------------------------------------------------
0001B612                            ; Animation script - energy ball launcher (FZ)
0001B612                            ; ---------------------------------------------------------------------------
0001B612 0000                       		dc.w byte_1AA46-Ani_obj86
0001B614 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B616 0000                       		dc.w byte_1AA50-Ani_obj86
0001B618 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B61C 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B622 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B628                            		even
0001B628                            		even
0001B628                            
0001B628                            ; ---------------------------------------------------------------------------
0001B628                            ; Sprite mappings - energy ball	launcher (FZ)
0001B628                            ; ---------------------------------------------------------------------------
0001B628                            Map_obj86:
0001B628                            	include "_maps\obj86.asm"
0001B628                            ; ---------------------------------------------------------------------------
0001B628                            ; Sprite mappings - energy ball	launcher (FZ)
0001B628                            ; ---------------------------------------------------------------------------
0001B628 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B62C 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B630 01                         byte_1AA5E:	dc.b 1
0001B631 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B636 01                         byte_1AA64:	dc.b 1
0001B637 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B63C 01                         byte_1AA6A:	dc.b 1
0001B63D F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B642 01                         byte_1AA70:	dc.b 1
0001B643 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B648                            		even
0001B648                            		even
0001B648                            
0001B648                            Ani_obj86a:
0001B648                            	include "_anim\obj86a.asm"
0001B648                            ; ---------------------------------------------------------------------------
0001B648                            ; Animation script - energy balls (FZ)
0001B648                            ; ---------------------------------------------------------------------------
0001B648 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B64A 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B64C 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B65B 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B66A 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B66E 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B678                            		even
0001B678                            		even
0001B678                            
0001B678                            ; ---------------------------------------------------------------------------
0001B678                            ; Sprite mappings - energy balls (FZ)
0001B678                            ; ---------------------------------------------------------------------------
0001B678                            Map_obj86a:
0001B678                            	include "_maps\obj86a.asm"
0001B678                            ; ---------------------------------------------------------------------------
0001B678                            ; Sprite mappings - energy balls (FZ)
0001B678                            ; ---------------------------------------------------------------------------
0001B678 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B67C 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B680 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B684 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B688 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B68C 0000                       		dc.w byte_1AB20-Map_obj86a
0001B68E 02                         byte_1AABC:	dc.b 2
0001B68F F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B694 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B699 02                         byte_1AAC7:	dc.b 2
0001B69A F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B69F F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B6A4 02                         byte_1AAD2:	dc.b 2
0001B6A5 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B6AA 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B6AF 02                         byte_1AADD:	dc.b 2
0001B6B0 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B6B5 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B6BA 02                         byte_1AAE8:	dc.b 2
0001B6BB F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B6C0 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B6C5 02                         byte_1AAF3:	dc.b 2
0001B6C6 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B6CB F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B6D0 01                         byte_1AAFE:	dc.b 1
0001B6D1 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B6D6 01                         byte_1AB04:	dc.b 1
0001B6D7 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B6DC 02                         byte_1AB0A:	dc.b 2
0001B6DD F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B6E2 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B6E7 02                         byte_1AB15:	dc.b 2
0001B6E8 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B6ED F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B6F2 00                         byte_1AB20:	dc.b 0
0001B6F4 00                         		even
0001B6F4 00                         		even
0001B6F4                            
0001B6F4                            ; ===========================================================================
0001B6F4                            ; ---------------------------------------------------------------------------
0001B6F4                            ; Object 3E - prison capsule
0001B6F4                            ; ---------------------------------------------------------------------------
0001B6F4                            
0001B6F4                            Obj3E:					; XREF: Obj_Index
0001B6F4 7000                       		moveq	#0,d0
0001B6F6 1028 0024                  		move.b	$24(a0),d0
0001B6FA 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B6FE 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B702 3028 0008                  		move.w	8(a0),d0
0001B706 0240 FF80                  		andi.w	#$FF80,d0
0001B70A 3238 F700                  		move.w	($FFFFF700).w,d1
0001B70E 0441 0080                  		subi.w	#$80,d1
0001B712 0241 FF80                  		andi.w	#$FF80,d1
0001B716 9041                       		sub.w	d1,d0
0001B718 0C40 0280                  		cmpi.w	#$280,d0
0001B71C 6200                       		bhi.s	Obj3E_Delete
0001B71E 4EF9 0000 DFF6             		jmp	DisplaySprite
0001B724                            ; ===========================================================================
0001B724                            
0001B724                            Obj3E_Delete:
0001B724 4EF9 0000 E032             		jmp	DeleteObject
0001B72A                            ; ===========================================================================
0001B72A 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B72C 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B72E 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B730 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B732 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B734 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B736 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B738 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B73A                            
0001B73A 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B73E 040C 0501                  		dc.b 4,	$C, 5, 1
0001B742 0610 0403                  		dc.b 6,	$10, 4,	3
0001B746 0810 0305                  		dc.b 8,	$10, 3,	5
0001B74A                            ; ===========================================================================
0001B74A                            
0001B74A                            Obj3E_Main:				; XREF: Obj3E_Index
0001B74A 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B752 317C 049D 0002             		move.w	#$49D,2(a0)
0001B758 117C 0004 0001             		move.b	#4,1(a0)
0001B75E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B764 7000                       		moveq	#0,d0
0001B766 1028 0028                  		move.b	$28(a0),d0
0001B76A E548                       		lsl.w	#2,d0
0001B76C 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B770 1159 0024                  		move.b	(a1)+,$24(a0)
0001B774 1159 0019                  		move.b	(a1)+,$19(a0)
0001B778 1159 0018                  		move.b	(a1)+,$18(a0)
0001B77C 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B780 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B784 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B786 117C 0006 0020             		move.b	#6,$20(a0)
0001B78C 117C 0008 0021             		move.b	#8,$21(a0)
0001B792                            
0001B792                            Obj3E_Not02:
0001B792 4E75                       		rts	
0001B794                            ; ===========================================================================
0001B794                            
0001B794                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B794 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B79A 6700                       		beq.s	Obj3E_ChkOpened
0001B79C 323C 002B                  		move.w	#$2B,d1
0001B7A0 343C 0018                  		move.w	#$18,d2
0001B7A4 363C 0018                  		move.w	#$18,d3
0001B7A8 3828 0008                  		move.w	8(a0),d4
0001B7AC 4EF9 0001 03C6             		jmp	SolidObject
0001B7B2                            ; ===========================================================================
0001B7B2                            
0001B7B2                            Obj3E_ChkOpened:
0001B7B2 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B7B6 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B7B8 4228 0025                  		clr.b	$25(a0)
0001B7BC 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B7C2 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B7C8                            
0001B7C8                            Obj3E_DoOpen:
0001B7C8 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B7CE 4E75                       		rts	
0001B7D0                            ; ===========================================================================
0001B7D0                            
0001B7D0                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B7D0 323C 0017                  		move.w	#$17,d1
0001B7D4 343C 0008                  		move.w	#8,d2
0001B7D8 363C 0008                  		move.w	#8,d3
0001B7DC 3828 0008                  		move.w	8(a0),d4
0001B7E0 4EB9 0001 03C6             		jsr	SolidObject
0001B7E6 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B7EC 4EB9 0000 B04C             		jsr	AnimateSprite
0001B7F2 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B7F8 4A28 0025                  		tst.b	$25(a0)
0001B7FC 6700                       		beq.s	locret_1AC60
0001B7FE 5068 000C                  		addq.w	#8,$C(a0)
0001B802 117C 000A 0024             		move.b	#$A,$24(a0)
0001B808 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B80E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B812 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B816 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B81C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B822 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B824 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B82A 6000                       		bra.s	Obj3E_ContinueCode
0001B82C                            
0001B82C                            Obj3E_MoveLeft:
0001B82C 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B832                            
0001B832                            Obj3E_ContinueCode:
0001B832 4228 0025                  		clr.b	$25(a0)
0001B836 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B83C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B842                            
0001B842                            locret_1AC60:
0001B842 4E75                       		rts	
0001B844                            ; ===========================================================================
0001B844                            
0001B844                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B844 7007                       		moveq	#7,d0
0001B846 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B84A 6600                       		bne.s	loc_1ACA0
0001B84C 4EB9 0000 E47C             		jsr	SingleObjLoad
0001B852 6600                       		bne.s	loc_1ACA0
0001B854 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B858 3368 0008 0008             		move.w	8(a0),8(a1)
0001B85E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B864 4EB9 0000 2D02             		jsr	(RandomNumber).l
0001B86A 7200                       		moveq	#0,d1
0001B86C 1200                       		move.b	d0,d1
0001B86E E409                       		lsr.b	#2,d1
0001B870 0441 0020                  		subi.w	#$20,d1
0001B874 D369 0008                  		add.w	d1,8(a1)
0001B878 E048                       		lsr.w	#8,d0
0001B87A E608                       		lsr.b	#3,d0
0001B87C D169 000C                  		add.w	d0,$C(a1)
0001B880                            
0001B880                            loc_1ACA0:
0001B880 5368 001E                  		subq.w	#1,$1E(a0)
0001B884 6700                       		beq.s	Obj3E_MakeAnimal
0001B886 4E75                       		rts	
0001B888                            ; ===========================================================================
0001B888                            
0001B888                            Obj3E_MakeAnimal:
0001B888 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B88E 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B894 117C 0006 001A             		move.b	#6,$1A(a0)
0001B89A 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B8A0 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B8A6 7C07                       		moveq	#7,d6
0001B8A8 3A3C 009A                  		move.w	#$9A,d5
0001B8AC 78E4                       		moveq	#-$1C,d4
0001B8AE                            
0001B8AE                            Obj3E_Loop:
0001B8AE 4EB9 0000 E47C             		jsr	SingleObjLoad
0001B8B4 6600                       		bne.s	locret_1ACF8
0001B8B6 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B8BA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B8C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B8C6 D969 0008                  		add.w	d4,8(a1)
0001B8CA 5E44                       		addq.w	#7,d4
0001B8CC 3345 0036                  		move.w	d5,$36(a1)
0001B8D0 5145                       		subq.w	#8,d5
0001B8D2 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B8D6                            
0001B8D6                            locret_1ACF8:
0001B8D6 4E75                       		rts	
0001B8D8                            ; ===========================================================================
0001B8D8                            
0001B8D8                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B8D8 7007                       		moveq	#7,d0
0001B8DA C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B8DE 6600                       		bne.s	loc_1AD38
0001B8E0 4EB9 0000 E47C             		jsr	SingleObjLoad
0001B8E6 6600                       		bne.s	loc_1AD38
0001B8E8 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B8EC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B8F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B8F8 4EB9 0000 2D02             		jsr	(RandomNumber).l
0001B8FE 0240 001F                  		andi.w	#$1F,d0
0001B902 5D40                       		subq.w	#6,d0
0001B904 4A41                       		tst.w	d1
0001B906 6A00                       		bpl.s	loc_1AD2E
0001B908 4440                       		neg.w	d0
0001B90A                            
0001B90A                            loc_1AD2E:
0001B90A D169 0008                  		add.w	d0,8(a1)
0001B90E 337C 000C 0036             		move.w	#$C,$36(a1)
0001B914                            
0001B914                            loc_1AD38:
0001B914 5368 001E                  		subq.w	#1,$1E(a0)
0001B918 6600                       		bne.s	locret_1AD48
0001B91A 5428 0024                  		addq.b	#2,$24(a0)
0001B91E 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B924                            
0001B924                            locret_1AD48:
0001B924 4E75                       		rts	
0001B926                            ; ===========================================================================
0001B926                            
0001B926                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B926 703E                       		moveq	#$3E,d0
0001B928 7228                       		moveq	#$28,d1
0001B92A 7440                       		moveq	#$40,d2
0001B92C 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B930                            
0001B930                            Obj3E_FindObj28:
0001B930 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B932 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B934 D2C2                       		adda.w	d2,a1		; next object RAM
0001B936 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B93A                            
0001B93A 4EB9 0000 F682             		jsr	GotThroughAct
0001B940 4EF9 0000 E032             		jmp	DeleteObject
0001B946                            ; ===========================================================================
0001B946                            
0001B946                            Obj3E_Obj28Found:
0001B946 4E75                       		rts	
0001B948                            ; ===========================================================================
0001B948                            Ani_obj3E:
0001B948                            	include "_anim\obj3E.asm"
0001B948                            ; ---------------------------------------------------------------------------
0001B948                            ; Animation script - prison capsule
0001B948                            ; ---------------------------------------------------------------------------
0001B948 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B94A 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B94C 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B950                            		even
0001B950                            		even
0001B950                            
0001B950                            ; ---------------------------------------------------------------------------
0001B950                            ; Sprite mappings - prison capsule
0001B950                            ; ---------------------------------------------------------------------------
0001B950                            Map_obj3E:
0001B950                            	include "_maps\obj3E.asm"
0001B950                            ; ---------------------------------------------------------------------------
0001B950                            ; Sprite mappings - prison capsule
0001B950                            ; ---------------------------------------------------------------------------
0001B950 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B954 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B958 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B95C 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B95E 07                         byte_1AD82:	dc.b 7
0001B95F E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B964 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B969 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B96E F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B973 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B978 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B97D 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B982 01                         byte_1ADA6:	dc.b 1
0001B983 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B988 06                         byte_1ADAC:	dc.b 6
0001B989 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B98E 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B993 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B998 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B99D 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B9A2 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B9A7 01                         byte_1ADCB:	dc.b 1
0001B9A8 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B9AD 02                         byte_1ADD1:	dc.b 2
0001B9AE E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B9B3 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B9B8 01                         byte_1ADDC:	dc.b 1
0001B9B9 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B9BE 00                         byte_1ADE2:	dc.b 0
0001B9C0 00                         		even
0001B9C0 00                         		even
0001B9C0                            
0001B9C0                            ; ---------------------------------------------------------------------------
0001B9C0                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B9C0                            ; ---------------------------------------------------------------------------
0001B9C0                            
0001B9C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9C0                            
0001B9C0                            
0001B9C0                            TouchResponse:				; XREF: Obj01
0001B9C0 4E71                       		nop	
0001B9C2 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B9C6 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B9CA 5142                       		subq.w	#8,d2
0001B9CC 7A00                       		moveq	#0,d5
0001B9CE 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B9D2 5705                       		subq.b	#3,d5
0001B9D4 9645                       		sub.w	d5,d3
0001B9D6 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B9DC 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B9DE 0643 000C                  		addi.w	#$C,d3
0001B9E2 7A0A                       		moveq	#$A,d5
0001B9E4                            
0001B9E4                            Touch_NoDuck:
0001B9E4 383C 0010                  		move.w	#$10,d4
0001B9E8 DA45                       		add.w	d5,d5
0001B9EA 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B9EE 3C3C 005F                  		move.w	#$5F,d6
0001B9F2                            
0001B9F2                            Touch_Loop:
0001B9F2 4A29 0001                  		tst.b	1(a1)
0001B9F6 6A00                       		bpl.s	Touch_NextObj
0001B9F8 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B9FC 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B9FE                            
0001B9FE                            Touch_NextObj:
0001B9FE 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001BA02 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001BA06                            
0001BA06 7000                       		moveq	#0,d0
0001BA08 4E75                       		rts	
0001BA0A                            ; ===========================================================================
0001BA0A 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001BA0C 0C14                       		dc.b   $C, $14
0001BA0E 140C                       		dc.b  $14,  $C
0001BA10 0410                       		dc.b	4, $10
0001BA12 0C12                       		dc.b   $C, $12
0001BA14 1010                       		dc.b  $10, $10
0001BA16 0606                       		dc.b	6,   6
0001BA18 180C                       		dc.b  $18,  $C
0001BA1A 0C10                       		dc.b   $C, $10
0001BA1C 100C                       		dc.b  $10,  $C
0001BA1E 0808                       		dc.b	8,   8
0001BA20 1410                       		dc.b  $14, $10
0001BA22 1408                       		dc.b  $14,   8
0001BA24 0E0E                       		dc.b   $E,  $E
0001BA26 1818                       		dc.b  $18, $18
0001BA28 2810                       		dc.b  $28, $10
0001BA2A 1018                       		dc.b  $10, $18
0001BA2C 0810                       		dc.b	8, $10
0001BA2E 2070                       		dc.b  $20, $70
0001BA30 4020                       		dc.b  $40, $20
0001BA32 8020                       		dc.b  $80, $20
0001BA34 2020                       		dc.b  $20, $20
0001BA36 0808                       		dc.b	8,   8
0001BA38 0404                       		dc.b	4,   4
0001BA3A 2008                       		dc.b  $20,   8
0001BA3C 0C0C                       		dc.b   $C,  $C
0001BA3E 0804                       		dc.b	8,   4
0001BA40 1804                       		dc.b  $18,   4
0001BA42 2804                       		dc.b  $28,   4
0001BA44 0408                       		dc.b	4,   8
0001BA46 0418                       		dc.b	4, $18
0001BA48 0428                       		dc.b	4, $28
0001BA4A 0420                       		dc.b	4, $20
0001BA4C 1818                       		dc.b  $18, $18
0001BA4E 0C18                       		dc.b   $C, $18
0001BA50 4808                       		dc.b  $48,   8
0001BA52                            ; ===========================================================================
0001BA52                            
0001BA52                            Touch_Height:				; XREF: TouchResponse
0001BA52 0240 003F                  		andi.w	#$3F,d0
0001BA56 D040                       		add.w	d0,d0
0001BA58 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001BA5C 7200                       		moveq	#0,d1
0001BA5E 121A                       		move.b	(a2)+,d1
0001BA60 3029 0008                  		move.w	8(a1),d0
0001BA64 9041                       		sub.w	d1,d0
0001BA66 9042                       		sub.w	d2,d0
0001BA68 6400                       		bcc.s	loc_1AE98
0001BA6A D241                       		add.w	d1,d1
0001BA6C D041                       		add.w	d1,d0
0001BA6E 6500                       		bcs.s	Touch_Width
0001BA70 6000 FF8C                  		bra.w	Touch_NextObj
0001BA74                            ; ===========================================================================
0001BA74                            
0001BA74                            loc_1AE98:
0001BA74 B044                       		cmp.w	d4,d0
0001BA76 6200 FF86                  		bhi.w	Touch_NextObj
0001BA7A                            
0001BA7A                            Touch_Width:
0001BA7A 7200                       		moveq	#0,d1
0001BA7C 121A                       		move.b	(a2)+,d1
0001BA7E 3029 000C                  		move.w	$C(a1),d0
0001BA82 9041                       		sub.w	d1,d0
0001BA84 9043                       		sub.w	d3,d0
0001BA86 6400                       		bcc.s	loc_1AEB6
0001BA88 D241                       		add.w	d1,d1
0001BA8A D240                       		add.w	d0,d1
0001BA8C 6500                       		bcs.s	Touch_ChkValue
0001BA8E 6000 FF6E                  		bra.w	Touch_NextObj
0001BA92                            ; ===========================================================================
0001BA92                            
0001BA92                            loc_1AEB6:
0001BA92 B045                       		cmp.w	d5,d0
0001BA94 6200 FF68                  		bhi.w	Touch_NextObj
0001BA98                            
0001BA98                            Touch_ChkValue:
0001BA98 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001BA9C 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001BAA0 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001BAA4 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001BAA8 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001BAAC 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001BAAE 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001BAB2                            
0001BAB2                            ; touch	response is $40-$7F
0001BAB2                            
0001BAB2 1029 0020                  		move.b	$20(a1),d0
0001BAB6 0200 003F                  		andi.b	#$3F,d0
0001BABA 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001BABE 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001BAC0 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001BAC6 6400 0000                  		bcc.w	locret_1AEF2
0001BACA 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BACE                            
0001BACE                            locret_1AEF2:
0001BACE 4E75                       		rts	
0001BAD0                            ; ===========================================================================
0001BAD0                            
0001BAD0                            Touch_Monitor:
0001BAD0 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BAD4 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BAD6 3028 000C                  		move.w	$C(a0),d0
0001BADA 0440 0010                  		subi.w	#$10,d0
0001BADE B069 000C                  		cmp.w	$C(a1),d0
0001BAE2 6500                       		bcs.s	locret_1AF2E
0001BAE4 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BAE8 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BAEE 4A29 0025                  		tst.b	$25(a1)
0001BAF2 6600                       		bne.s	locret_1AF2E
0001BAF4 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BAF8 4E75                       		rts	
0001BAFA                            ; ===========================================================================
0001BAFA                            
0001BAFA                            loc_1AF1E:
0001BAFA 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BB00 6600                       		bne.s	locret_1AF2E
0001BB02 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BB06 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BB0A                            
0001BB0A                            locret_1AF2E:
0001BB0A 4E75                       		rts	
0001BB0C                            ; ===========================================================================
0001BB0C                            
0001BB0C                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BB0C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BB10 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BB12 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BB18 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BB1C                            
0001BB1C                            loc_1AF40:
0001BB1C 4A29 0021                  		tst.b	$21(a1)
0001BB20 6700                       		beq.s	Touch_KillEnemy
0001BB22 4468 0010                  		neg.w	$10(a0)
0001BB26 4468 0012                  		neg.w	$12(a0)
0001BB2A E0E8 0010                  		asr	$10(a0)
0001BB2E E0E8 0012                  		asr	$12(a0)
0001BB32 137C 0000 0020             		move.b	#0,$20(a1)
0001BB38 5329 0021                  		subq.b	#1,$21(a1)
0001BB3C 6600                       		bne.s	locret_1AF68
0001BB3E 08E9 0007 0022             		bset	#7,$22(a1)
0001BB44                            
0001BB44                            locret_1AF68:
0001BB44 4E75                       		rts	
0001BB46                            ; ===========================================================================
0001BB46                            
0001BB46                            Touch_KillEnemy:
0001BB46 08E9 0007 0022             		bset	#7,$22(a1)
0001BB4C 7000                       		moveq	#0,d0
0001BB4E 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BB52 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BB56 0C40 0006                  		cmpi.w	#6,d0
0001BB5A 6500                       		bcs.s	loc_1AF82
0001BB5C 7006                       		moveq	#6,d0
0001BB5E                            
0001BB5E                            loc_1AF82:
0001BB5E 3340 003E                  		move.w	d0,$3E(a1)
0001BB62 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BB66 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BB6C 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BB6E 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BB72 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BB78                            
0001BB78                            loc_1AF9C:
0001BB78 6100 0000                  		bsr.w	AddPoints
0001BB7C 7400                       		moveq	#0,d2	; GMZ
0001BB7E 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BB80 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BB82                            
0001BB82                            TouchKE_Explode:
0001BB82 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BB86 137C 0000 0024             		move.b	#0,$24(a1)
0001BB8C 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BB90                            
0001BB90                            TouchKE_NextExplosion:
0001BB90 5802                       		addq.b	#4,d2
0001BB92 4EB9 0000 E47C             		jsr	SingleObjLoad
0001BB98 6600                       		bne.s	TouchKE_NoExplosion
0001BB9A 336A 0008 0008             		move.w	8(a2),8(a1)
0001BBA0 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BBA6 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BBAA                            
0001BBAA                            TouchKE_NoExplosion:
0001BBAA 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BBAC 4A68 0012                  		tst.w	$12(a0)
0001BBB0 6B00                       		bmi.s	loc_1AFC2
0001BBB2 3028 000C                  		move.w	$C(a0),d0
0001BBB6 B069 000C                  		cmp.w	$C(a1),d0
0001BBBA 6400                       		bcc.s	loc_1AFCA
0001BBBC 4468 0012                  		neg.w	$12(a0)
0001BBC0 4E75                       		rts	
0001BBC2                            ; ===========================================================================
0001BBC2                            
0001BBC2                            loc_1AFC2:
0001BBC2 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BBC8 4E75                       		rts	
0001BBCA                            ; ===========================================================================
0001BBCA                            
0001BBCA                            loc_1AFCA:
0001BBCA 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BBD0 4E75                       		rts	
0001BBD2                            ; ===========================================================================
0001BBD2 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BBDA                            ; ===========================================================================
0001BBDA                            
0001BBDA                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BBDA 08E9 0007 0022             		bset	#7,$22(a1)
0001BBE0                            
0001BBE0                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BBE0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BBE4 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BBE6                            
0001BBE6                            loc_1AFE6:				; XREF: Touch_Hurt
0001BBE6 70FF                       		moveq	#-1,d0
0001BBE8 4E75                       		rts	
0001BBEA                            ; ===========================================================================
0001BBEA                            
0001BBEA                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BBEA 4E71                       		nop	
0001BBEC 4A68 0030                  		tst.w	$30(a0)
0001BBF0 66F4                       		bne.s	loc_1AFE6
0001BBF2 2449                       		movea.l	a1,a2
0001BBF4                            
0001BBF4                            ; End of function TouchResponse
0001BBF4                            ; continue straight to HurtSonic
0001BBF4                            
0001BBF4                            ; ---------------------------------------------------------------------------
0001BBF4                            ; Hurting Sonic	subroutine
0001BBF4                            ; ---------------------------------------------------------------------------
0001BBF4                            
0001BBF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBF4                            
0001BBF4                            
0001BBF4                            HurtSonic:
0001BBF4 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BBF8 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BBFA 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BBFE 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BC02 4EB9 0000 E47C             		jsr	SingleObjLoad
0001BC08 6600                       		bne.s	Hurt_Shield
0001BC0A 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BC0E 3368 0008 0008             		move.w	8(a0),8(a1)
0001BC14 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BC1A                            
0001BC1A                            Hurt_Shield:
0001BC1A 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BC20 117C 0004 0024             		move.b	#4,$24(a0)
0001BC26 6100 861A                  		bsr.w	Sonic_ResetOnFloor
0001BC2A 08E8 0001 0022             		bset	#1,$22(a0)
0001BC30 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BC36 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BC3C 0828 0006 0022             		btst	#6,$22(a0)
0001BC42 6700                       		beq.s	Hurt_Reverse
0001BC44 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BC4A 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BC50                            
0001BC50                            Hurt_Reverse:
0001BC50 3028 0008                  		move.w	8(a0),d0
0001BC54 B06A 0008                  		cmp.w	8(a2),d0
0001BC58 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BC5A 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BC5E                            
0001BC5E                            Hurt_ChkSpikes:
0001BC5E 317C 0000 0014             		move.w	#0,$14(a0)
0001BC64 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BC6A 317C 0078 0030             		move.w	#$78,$30(a0)
0001BC70 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BC74 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BC78 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BC7A 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BC7E 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BC80 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BC84                            
0001BC84                            Hurt_Sound:
0001BC84 4EB9 0000 158E             		jsr	(PlaySound_Special).l
0001BC8A 70FF                       		moveq	#-1,d0
0001BC8C 4E75                       		rts	
0001BC8E                            ; ===========================================================================
0001BC8E                            
0001BC8E                            Hurt_NoRings:
0001BC8E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BC92 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BC96                            ; End of function HurtSonic
0001BC96                            
0001BC96                            ; ---------------------------------------------------------------------------
0001BC96                            ; Subroutine to	kill Sonic
0001BC96                            ; ---------------------------------------------------------------------------
0001BC96                            
0001BC96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC96                            
0001BC96                            
0001BC96                            KillSonic:
0001BC96 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BC9A 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BC9C 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BCA2 117C 0006 0024             		move.b	#6,$24(a0)
0001BCA8 6100 8598                  		bsr.w	Sonic_ResetOnFloor
0001BCAC 08E8 0001 0022             		bset	#1,$22(a0)
0001BCB2 317C F900 0012             		move.w	#-$700,$12(a0)
0001BCB8 317C 0000 0010             		move.w	#0,$10(a0)
0001BCBE 317C 0000 0014             		move.w	#0,$14(a0)
0001BCC4 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BCCA 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BCD0 08E8 0007 0002             		bset	#7,2(a0)
0001BCD6 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BCDA 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BCDE 6600                       		bne.s	Kill_Sound
0001BCE0 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BCE4                            
0001BCE4                            Kill_Sound:
0001BCE4 4EB9 0000 158E             		jsr	(PlaySound_Special).l
0001BCEA                            
0001BCEA                            Kill_NoDeath:
0001BCEA 70FF                       		moveq	#-1,d0
0001BCEC 4E75                       		rts	
0001BCEE                            ; End of function KillSonic
0001BCEE                            
0001BCEE                            
0001BCEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCEE                            
0001BCEE                            
0001BCEE                            Touch_Special:				; XREF: Touch_ChkValue
0001BCEE 1229 0020                  		move.b	$20(a1),d1
0001BCF2 0201 003F                  		andi.b	#$3F,d1
0001BCF6 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BCFA 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BCFC 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BD00 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BD02 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BD06 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BD08 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BD0C 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BD0E 4E75                       		rts	
0001BD10                            ; ===========================================================================
0001BD10                            
0001BD10                            Touch_CatKiller:			; XREF: Touch_Special
0001BD10 6000 FEC8                  		bra.w	loc_1AFDA
0001BD14                            ; ===========================================================================
0001BD14                            
0001BD14                            Touch_Yadrin:				; XREF: Touch_Special
0001BD14 9A40                       		sub.w	d0,d5
0001BD16 0C45 0008                  		cmpi.w	#8,d5
0001BD1A 6400                       		bcc.s	loc_1B144
0001BD1C 3029 0008                  		move.w	8(a1),d0
0001BD20 5940                       		subq.w	#4,d0
0001BD22 0829 0000 0022             		btst	#0,$22(a1)
0001BD28 6700                       		beq.s	loc_1B130
0001BD2A 0440 0010                  		subi.w	#$10,d0
0001BD2E                            
0001BD2E                            loc_1B130:
0001BD2E 9042                       		sub.w	d2,d0
0001BD30 6400                       		bcc.s	loc_1B13C
0001BD32 0640 0018                  		addi.w	#$18,d0
0001BD36 6500                       		bcs.s	loc_1B140
0001BD38 6000                       		bra.s	loc_1B144
0001BD3A                            ; ===========================================================================
0001BD3A                            
0001BD3A                            loc_1B13C:
0001BD3A B044                       		cmp.w	d4,d0
0001BD3C 6200                       		bhi.s	loc_1B144
0001BD3E                            
0001BD3E                            loc_1B140:
0001BD3E 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BD42                            ; ===========================================================================
0001BD42                            
0001BD42                            loc_1B144:
0001BD42 6000 FDC8                  		bra.w	Touch_Enemy
0001BD46                            ; ===========================================================================
0001BD46                            
0001BD46                            Touch_D7orE1:				; XREF: Touch_Special
0001BD46 5229 0021                  		addq.b	#1,$21(a1)
0001BD4A 4E75                       		rts	
0001BD4C                            ; End of function Touch_Special
0001BD4C                            
0001BD4C                            ; ---------------------------------------------------------------------------
0001BD4C                            ; Subroutine to	show the special stage layout
0001BD4C                            ; ---------------------------------------------------------------------------
0001BD4C                            
0001BD4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD4C                            
0001BD4C                            
0001BD4C                            SS_ShowLayout:				; XREF: SpecialStage
0001BD4C 6100 0000                  		bsr.w	SS_AniWallsRings
0001BD50 6100 0000                  		bsr.w	SS_AniItems
0001BD54 3F05                       		move.w	d5,-(sp)
0001BD56 43F8 8000                  		lea	($FFFF8000).w,a1
0001BD5A 1038 F780                  		move.b	($FFFFF780).w,d0
0001BD5E 0200 00FC                  		andi.b	#$FC,d0
0001BD62 4EB9 0000 2D28             		jsr	(CalcSine).l
0001BD68 3800                       		move.w	d0,d4
0001BD6A 3A01                       		move.w	d1,d5
0001BD6C C9FC 0018                  		muls.w	#$18,d4
0001BD70 CBFC 0018                  		muls.w	#$18,d5
0001BD74 7400                       		moveq	#0,d2
0001BD76 3438 F700                  		move.w	($FFFFF700).w,d2
0001BD7A 84FC 0018                  		divu.w	#$18,d2
0001BD7E 4842                       		swap	d2
0001BD80 4442                       		neg.w	d2
0001BD82 0642 FF4C                  		addi.w	#-$B4,d2
0001BD86 7600                       		moveq	#0,d3
0001BD88 3638 F704                  		move.w	($FFFFF704).w,d3
0001BD8C 86FC 0018                  		divu.w	#$18,d3
0001BD90 4843                       		swap	d3
0001BD92 4443                       		neg.w	d3
0001BD94 0643 FF4C                  		addi.w	#-$B4,d3
0001BD98 3E3C 000F                  		move.w	#$F,d7
0001BD9C                            
0001BD9C                            loc_1B19E:
0001BD9C 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BDA0 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BDA4 4440                       		neg.w	d0
0001BDA6 C3C2                       		muls.w	d2,d1
0001BDA8 C1C3                       		muls.w	d3,d0
0001BDAA 2C00                       		move.l	d0,d6
0001BDAC DC81                       		add.l	d1,d6
0001BDAE 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BDB2 C1C2                       		muls.w	d2,d0
0001BDB4 C3C3                       		muls.w	d3,d1
0001BDB6 D280                       		add.l	d0,d1
0001BDB8 2406                       		move.l	d6,d2
0001BDBA 3C3C 000F                  		move.w	#$F,d6
0001BDBE                            
0001BDBE                            loc_1B1C0:
0001BDBE 2002                       		move.l	d2,d0
0001BDC0 E080                       		asr.l	#8,d0
0001BDC2 32C0                       		move.w	d0,(a1)+
0001BDC4 2001                       		move.l	d1,d0
0001BDC6 E080                       		asr.l	#8,d0
0001BDC8 32C0                       		move.w	d0,(a1)+
0001BDCA D485                       		add.l	d5,d2
0001BDCC D284                       		add.l	d4,d1
0001BDCE 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BDD2                            
0001BDD2 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BDD6 0643 0018                  		addi.w	#$18,d3
0001BDDA 51CF FFC0                  		dbf	d7,loc_1B19E
0001BDDE                            
0001BDDE 3A1F                       		move.w	(sp)+,d5
0001BDE0 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BDE6 7000                       		moveq	#0,d0
0001BDE8 3038 F704                  		move.w	($FFFFF704).w,d0
0001BDEC 80FC 0018                  		divu.w	#$18,d0
0001BDF0 C0FC 0080                  		mulu.w	#$80,d0
0001BDF4 D1C0                       		adda.l	d0,a0
0001BDF6 7000                       		moveq	#0,d0
0001BDF8 3038 F700                  		move.w	($FFFFF700).w,d0
0001BDFC 80FC 0018                  		divu.w	#$18,d0
0001BE00 D0C0                       		adda.w	d0,a0
0001BE02 49F8 8000                  		lea	($FFFF8000).w,a4
0001BE06 3E3C 000F                  		move.w	#$F,d7
0001BE0A                            
0001BE0A                            loc_1B20C:
0001BE0A 3C3C 000F                  		move.w	#$F,d6
0001BE0E                            
0001BE0E                            loc_1B210:
0001BE0E 7000                       		moveq	#0,d0
0001BE10 1018                       		move.b	(a0)+,d0
0001BE12 6700                       		beq.s	loc_1B268
0001BE14 0C00 004E                  		cmpi.b	#$4E,d0
0001BE18 6200                       		bhi.s	loc_1B268
0001BE1A 3614                       		move.w	(a4),d3
0001BE1C 0643 0120                  		addi.w	#$120,d3
0001BE20 0C43 0070                  		cmpi.w	#$70,d3
0001BE24 6500                       		bcs.s	loc_1B268
0001BE26 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BE2A 6400                       		bcc.s	loc_1B268
0001BE2C 342C 0002                  		move.w	2(a4),d2
0001BE30 0642 00F0                  		addi.w	#$F0,d2
0001BE34 0C42 0070                  		cmpi.w	#$70,d2
0001BE38 6500                       		bcs.s	loc_1B268
0001BE3A 0C42 0170                  		cmpi.w	#$170,d2
0001BE3E 6400                       		bcc.s	loc_1B268
0001BE40 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BE46 E748                       		lsl.w	#3,d0
0001BE48 4BF5 0000                  		lea	(a5,d0.w),a5
0001BE4C 225D                       		movea.l	(a5)+,a1
0001BE4E 321D                       		move.w	(a5)+,d1
0001BE50 D241                       		add.w	d1,d1
0001BE52 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BE56 365D                       		movea.w	(a5)+,a3
0001BE58 7200                       		moveq	#0,d1
0001BE5A 1219                       		move.b	(a1)+,d1
0001BE5C 5301                       		subq.b	#1,d1
0001BE5E 6B00                       		bmi.s	loc_1B268
0001BE60 4EB9 0000 E154             		jsr	sub_D762
0001BE66                            
0001BE66                            loc_1B268:
0001BE66 584C                       		addq.w	#4,a4
0001BE68 51CE FFA4                  		dbf	d6,loc_1B210
0001BE6C                            
0001BE6C 41E8 0070                  		lea	$70(a0),a0
0001BE70 51CF FF98                  		dbf	d7,loc_1B20C
0001BE74                            
0001BE74 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BE78 0C05 0050                  		cmpi.b	#$50,d5
0001BE7C 6700                       		beq.s	loc_1B288
0001BE7E 24BC 0000 0000             		move.l	#0,(a2)
0001BE84 4E75                       		rts	
0001BE86                            ; ===========================================================================
0001BE86                            
0001BE86                            loc_1B288:
0001BE86 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BE8C 4E75                       		rts	
0001BE8E                            ; End of function SS_ShowLayout
0001BE8E                            
0001BE8E                            ; ---------------------------------------------------------------------------
0001BE8E                            ; Subroutine to	animate	walls and rings	in the special stage
0001BE8E                            ; ---------------------------------------------------------------------------
0001BE8E                            
0001BE8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE8E                            
0001BE8E                            
0001BE8E                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BE8E 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BE94 7000                       		moveq	#0,d0
0001BE96 1038 F780                  		move.b	($FFFFF780).w,d0
0001BE9A E408                       		lsr.b	#2,d0
0001BE9C 0240 000F                  		andi.w	#$F,d0
0001BEA0 7223                       		moveq	#$23,d1
0001BEA2                            
0001BEA2                            loc_1B2A4:
0001BEA2 3280                       		move.w	d0,(a1)
0001BEA4 5049                       		addq.w	#8,a1
0001BEA6 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BEAA                            
0001BEAA 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BEB0 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BEB4 6A00                       		bpl.s	loc_1B2C8
0001BEB6 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BEBC 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BEC0 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BEC6                            
0001BEC6                            loc_1B2C8:
0001BEC6 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BECC 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BED0 6A00                       		bpl.s	loc_1B2E4
0001BED2 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BED8 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BEDC 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BEE2                            
0001BEE2                            loc_1B2E4:
0001BEE2 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BEE6 1340 0138                  		move.b	d0,$138(a1)
0001BEEA 1340 0160                  		move.b	d0,$160(a1)
0001BEEE 1340 0148                  		move.b	d0,$148(a1)
0001BEF2 1340 0150                  		move.b	d0,$150(a1)
0001BEF6 1340 01D8                  		move.b	d0,$1D8(a1)
0001BEFA 1340 01E0                  		move.b	d0,$1E0(a1)
0001BEFE 1340 01E8                  		move.b	d0,$1E8(a1)
0001BF02 1340 01F0                  		move.b	d0,$1F0(a1)
0001BF06 1340 01F8                  		move.b	d0,$1F8(a1)
0001BF0A 1340 0200                  		move.b	d0,$200(a1)
0001BF0E 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BF12 6A00                       		bpl.s	loc_1B326
0001BF14 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BF1A 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BF1E 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BF24                            
0001BF24                            loc_1B326:
0001BF24 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BF28 1340 0168                  		move.b	d0,$168(a1)
0001BF2C 1340 0170                  		move.b	d0,$170(a1)
0001BF30 1340 0178                  		move.b	d0,$178(a1)
0001BF34 1340 0180                  		move.b	d0,$180(a1)
0001BF38 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BF3C 6A00                       		bpl.s	loc_1B350
0001BF3E 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BF44 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BF48 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BF4E                            
0001BF4E                            loc_1B350:
0001BF4E 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BF54 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BF5A 7000                       		moveq	#0,d0
0001BF5C 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BF60 D040                       		add.w	d0,d0
0001BF62 41F0 0000                  		lea	(a0,d0.w),a0
0001BF66 3290                       		move.w	(a0),(a1)
0001BF68 3368 0002 0008             		move.w	2(a0),8(a1)
0001BF6E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BF74 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BF7A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BF80 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BF86 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BF8C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BF92 D0FC 0020                  		adda.w	#$20,a0
0001BF96 D2FC 0048                  		adda.w	#$48,a1
0001BF9A 3290                       		move.w	(a0),(a1)
0001BF9C 3368 0002 0008             		move.w	2(a0),8(a1)
0001BFA2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BFA8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BFAE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BFB4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BFBA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BFC0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BFC6 D0FC 0020                  		adda.w	#$20,a0
0001BFCA D2FC 0048                  		adda.w	#$48,a1
0001BFCE 3290                       		move.w	(a0),(a1)
0001BFD0 3368 0002 0008             		move.w	2(a0),8(a1)
0001BFD6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BFDC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BFE2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BFE8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BFEE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BFF4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BFFA D0FC 0020                  		adda.w	#$20,a0
0001BFFE D2FC 0048                  		adda.w	#$48,a1
0001C002 3290                       		move.w	(a0),(a1)
0001C004 3368 0002 0008             		move.w	2(a0),8(a1)
0001C00A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C010 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C016 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C01C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C022 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C028 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C02E D0FC 0020                  		adda.w	#$20,a0
0001C032 D2FC 0048                  		adda.w	#$48,a1
0001C036 4E75                       		rts	
0001C038                            ; End of function SS_AniWallsRings
0001C038                            
0001C038                            ; ===========================================================================
0001C038 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C048 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C058 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C068 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C078 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C088 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C098 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C0A8 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C0B8                            ; ---------------------------------------------------------------------------
0001C0B8                            ; Subroutine to	remove items when you collect them in the special stage
0001C0B8                            ; ---------------------------------------------------------------------------
0001C0B8                            
0001C0B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0B8                            
0001C0B8                            
0001C0B8                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C0B8 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C0BE 303C 001F                  		move.w	#$1F,d0
0001C0C2                            
0001C0C2                            loc_1B4C4:
0001C0C2 4A12                       		tst.b	(a2)
0001C0C4 6700                       		beq.s	locret_1B4CE
0001C0C6 504A                       		addq.w	#8,a2
0001C0C8 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C0CC                            
0001C0CC                            locret_1B4CE:
0001C0CC 4E75                       		rts	
0001C0CE                            ; End of function SS_RemoveCollectedItem
0001C0CE                            
0001C0CE                            ; ---------------------------------------------------------------------------
0001C0CE                            ; Subroutine to	animate	special	stage items when you touch them
0001C0CE                            ; ---------------------------------------------------------------------------
0001C0CE                            
0001C0CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0CE                            
0001C0CE                            
0001C0CE                            SS_AniItems:				; XREF: SS_ShowLayout
0001C0CE 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C0D4 3E3C 001F                  		move.w	#$1F,d7
0001C0D8                            
0001C0D8                            loc_1B4DA:
0001C0D8 7000                       		moveq	#0,d0
0001C0DA 1010                       		move.b	(a0),d0
0001C0DC 6700                       		beq.s	loc_1B4E8
0001C0DE E548                       		lsl.w	#2,d0
0001C0E0 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C0E4 4E91                       		jsr	(a1)
0001C0E6                            
0001C0E6                            loc_1B4E8:
0001C0E6 5048                       		addq.w	#8,a0
0001C0E8                            
0001C0E8                            loc_1B4EA:
0001C0E8 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C0EC                            
0001C0EC 4E75                       		rts	
0001C0EE                            ; End of function SS_AniItems
0001C0EE                            
0001C0EE                            ; ===========================================================================
0001C0EE 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C0F2 0000 0000                  		dc.l SS_AniBumper
0001C0F6 0000 0000                  		dc.l SS_Ani1Up
0001C0FA 0000 0000                  		dc.l SS_AniReverse
0001C0FE 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C102 0000 0000                  		dc.l SS_AniGlassBlock
0001C106                            ; ===========================================================================
0001C106                            
0001C106                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C106 5328 0002                  		subq.b	#1,2(a0)
0001C10A 6A00                       		bpl.s	locret_1B530
0001C10C 117C 0005 0002             		move.b	#5,2(a0)
0001C112 7000                       		moveq	#0,d0
0001C114 1028 0003                  		move.b	3(a0),d0
0001C118 5228 0003                  		addq.b	#1,3(a0)
0001C11C 2268 0004                  		movea.l	4(a0),a1
0001C120 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C124 1280                       		move.b	d0,(a1)
0001C126 6600                       		bne.s	locret_1B530
0001C128 4290                       		clr.l	(a0)
0001C12A 42A8 0004                  		clr.l	4(a0)
0001C12E                            
0001C12E                            locret_1B530:
0001C12E 4E75                       		rts	
0001C130                            ; ===========================================================================
0001C130 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C136                            ; ===========================================================================
0001C136                            
0001C136                            SS_AniBumper:				; XREF: SS_AniIndex
0001C136 5328 0002                  		subq.b	#1,2(a0)
0001C13A 6A00                       		bpl.s	locret_1B566
0001C13C 117C 0007 0002             		move.b	#7,2(a0)
0001C142 7000                       		moveq	#0,d0
0001C144 1028 0003                  		move.b	3(a0),d0
0001C148 5228 0003                  		addq.b	#1,3(a0)
0001C14C 2268 0004                  		movea.l	4(a0),a1
0001C150 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C154 6600                       		bne.s	loc_1B564
0001C156 4290                       		clr.l	(a0)
0001C158 42A8 0004                  		clr.l	4(a0)
0001C15C 12BC 0025                  		move.b	#$25,(a1)
0001C160 4E75                       		rts	
0001C162                            ; ===========================================================================
0001C162                            
0001C162                            loc_1B564:
0001C162 1280                       		move.b	d0,(a1)
0001C164                            
0001C164                            locret_1B566:
0001C164 4E75                       		rts	
0001C166                            ; ===========================================================================
0001C166 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C16C                            ; ===========================================================================
0001C16C                            
0001C16C                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C16C 5328 0002                  		subq.b	#1,2(a0)
0001C170 6A00                       		bpl.s	locret_1B596
0001C172 117C 0005 0002             		move.b	#5,2(a0)
0001C178 7000                       		moveq	#0,d0
0001C17A 1028 0003                  		move.b	3(a0),d0
0001C17E 5228 0003                  		addq.b	#1,3(a0)
0001C182 2268 0004                  		movea.l	4(a0),a1
0001C186 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C18A 1280                       		move.b	d0,(a1)
0001C18C 6600                       		bne.s	locret_1B596
0001C18E 4290                       		clr.l	(a0)
0001C190 42A8 0004                  		clr.l	4(a0)
0001C194                            
0001C194                            locret_1B596:
0001C194 4E75                       		rts	
0001C196                            ; ===========================================================================
0001C196 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C19C                            ; ===========================================================================
0001C19C                            
0001C19C                            SS_AniReverse:				; XREF: SS_AniIndex
0001C19C 5328 0002                  		subq.b	#1,2(a0)
0001C1A0 6A00                       		bpl.s	locret_1B5CC
0001C1A2 117C 0007 0002             		move.b	#7,2(a0)
0001C1A8 7000                       		moveq	#0,d0
0001C1AA 1028 0003                  		move.b	3(a0),d0
0001C1AE 5228 0003                  		addq.b	#1,3(a0)
0001C1B2 2268 0004                  		movea.l	4(a0),a1
0001C1B6 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C1BA 6600                       		bne.s	loc_1B5CA
0001C1BC 4290                       		clr.l	(a0)
0001C1BE 42A8 0004                  		clr.l	4(a0)
0001C1C2 12BC 002B                  		move.b	#$2B,(a1)
0001C1C6 4E75                       		rts	
0001C1C8                            ; ===========================================================================
0001C1C8                            
0001C1C8                            loc_1B5CA:
0001C1C8 1280                       		move.b	d0,(a1)
0001C1CA                            
0001C1CA                            locret_1B5CC:
0001C1CA 4E75                       		rts	
0001C1CC                            ; ===========================================================================
0001C1CC 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C1D2                            ; ===========================================================================
0001C1D2                            
0001C1D2                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C1D2 5328 0002                  		subq.b	#1,2(a0)
0001C1D6 6A00                       		bpl.s	locret_1B60C
0001C1D8 117C 0005 0002             		move.b	#5,2(a0)
0001C1DE 7000                       		moveq	#0,d0
0001C1E0 1028 0003                  		move.b	3(a0),d0
0001C1E4 5228 0003                  		addq.b	#1,3(a0)
0001C1E8 2268 0004                  		movea.l	4(a0),a1
0001C1EC 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C1F0 1280                       		move.b	d0,(a1)
0001C1F2 6600                       		bne.s	locret_1B60C
0001C1F4 4290                       		clr.l	(a0)
0001C1F6 42A8 0004                  		clr.l	4(a0)
0001C1FA 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C200 303C 00A8                  		move.w	#$A8,d0
0001C204 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C20A                            
0001C20A                            locret_1B60C:
0001C20A 4E75                       		rts	
0001C20C                            ; ===========================================================================
0001C20C 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C212                            ; ===========================================================================
0001C212                            
0001C212                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C212 5328 0002                  		subq.b	#1,2(a0)
0001C216 6A00                       		bpl.s	locret_1B640
0001C218 117C 0001 0002             		move.b	#1,2(a0)
0001C21E 7000                       		moveq	#0,d0
0001C220 1028 0003                  		move.b	3(a0),d0
0001C224 5228 0003                  		addq.b	#1,3(a0)
0001C228 2268 0004                  		movea.l	4(a0),a1
0001C22C 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C230 1280                       		move.b	d0,(a1)
0001C232 6600                       		bne.s	locret_1B640
0001C234 12A8 0004                  		move.b	4(a0),(a1)
0001C238 4290                       		clr.l	(a0)
0001C23A 42A8 0004                  		clr.l	4(a0)
0001C23E                            
0001C23E                            locret_1B640:
0001C23E 4E75                       		rts	
0001C240                            ; ===========================================================================
0001C240 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C24A                            ; ---------------------------------------------------------------------------
0001C24A                            ; Special stage	layout pointers
0001C24A                            ; ---------------------------------------------------------------------------
0001C24A                            SS_LayoutIndex:
0001C24A                            	include "_inc\Special stage layout pointers.asm"
0001C24A                            ; ---------------------------------------------------------------------------
0001C24A                            ; Special stage	layout pointers
0001C24A                            ; ---------------------------------------------------------------------------
0001C24A 0000 0000                  	dc.l SS_1
0001C24E 0000 0000                  	dc.l SS_2
0001C252 0000 0000                  	dc.l SS_3
0001C256 0000 0000                  	dc.l SS_4
0001C25A 0000 0000                  	dc.l SS_5
0001C25E 0000 0000                  	dc.l SS_6
0001C262                            	even
0001C262                            	even
0001C262                            
0001C262                            ; ---------------------------------------------------------------------------
0001C262                            ; Special stage	start locations
0001C262                            ; ---------------------------------------------------------------------------
0001C262                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C27A                            		even
0001C27A                            
0001C27A                            ; ---------------------------------------------------------------------------
0001C27A                            ; Subroutine to	load special stage layout
0001C27A                            ; ---------------------------------------------------------------------------
0001C27A                            
0001C27A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C27A                            
0001C27A                            
0001C27A                            SS_Load:				; XREF: SpecialStage
0001C27A 7000                       		moveq	#0,d0
0001C27C 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C280 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C284 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C28A 6500                       		bcs.s	SS_ChkEmldNum
0001C28C 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C292                            
0001C292                            SS_ChkEmldNum:
0001C292 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C298 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C29A 7200                       		moveq	#0,d1
0001C29C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C2A0 5301                       		subq.b	#1,d1
0001C2A2 6500                       		bcs.s	SS_LoadData
0001C2A4 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C2A8                            
0001C2A8                            SS_ChkEmldLoop:	
0001C2A8 B033 1000                  		cmp.b	(a3,d1.w),d0
0001C2AC 6600                       		bne.s	SS_ChkEmldRepeat
0001C2AE 60CA                       		bra.s	SS_Load
0001C2B0                            ; ===========================================================================
0001C2B0                            
0001C2B0                            SS_ChkEmldRepeat:
0001C2B0 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C2B4                            
0001C2B4                            SS_LoadData:
0001C2B4 E548                       		lsl.w	#2,d0
0001C2B6 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C2BA 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C2BE 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C2C2 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C2C6 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C2CC 303C 0000                  		move.w	#0,d0
0001C2D0 4EB9 0000 1910             		jsr	(EniDec).l
0001C2D6 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C2DC 303C 0FFF                  		move.w	#$FFF,d0
0001C2E0                            
0001C2E0                            SS_ClrRAM3:
0001C2E0 4299                       		clr.l	(a1)+
0001C2E2 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C2E6                            
0001C2E6 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C2EC 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C2F2 723F                       		moveq	#$3F,d1
0001C2F4                            
0001C2F4                            loc_1B6F6:
0001C2F4 743F                       		moveq	#$3F,d2
0001C2F6                            
0001C2F6                            loc_1B6F8:
0001C2F6 12D8                       		move.b	(a0)+,(a1)+
0001C2F8 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C2FC                            
0001C2FC 43E9 0040                  		lea	$40(a1),a1
0001C300 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C304                            
0001C304 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C30A 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C310 724D                       		moveq	#$4D,d1
0001C312                            
0001C312                            loc_1B714:
0001C312 22D8                       		move.l	(a0)+,(a1)+
0001C314 32FC 0000                  		move.w	#0,(a1)+
0001C318 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C31E 32D8                       		move.w	(a0)+,(a1)+
0001C320 51C9 FFF0                  		dbf	d1,loc_1B714
0001C324                            
0001C324 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C32A 323C 003F                  		move.w	#$3F,d1
0001C32E                            
0001C32E                            loc_1B730:
0001C32E                            
0001C32E 4299                       		clr.l	(a1)+
0001C330 51C9 FFFC                  		dbf	d1,loc_1B730
0001C334                            
0001C334 4E75                       		rts	
0001C336                            ; End of function SS_Load
0001C336                            
0001C336                            ; ===========================================================================
0001C336                            ; ---------------------------------------------------------------------------
0001C336                            ; Special stage	mappings and VRAM pointers
0001C336                            ; ---------------------------------------------------------------------------
0001C336                            SS_MapIndex:
0001C336                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C336                            ; ---------------------------------------------------------------------------
0001C336                            ; Special stage	mappings and VRAM pointers
0001C336                            ; ---------------------------------------------------------------------------
0001C336 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C33A 0142                       	dc.w $142		; VRAM setting
0001C33C 0000 0000                  	dc.l Map_SSWalls
0001C340 0142                       	dc.w $142
0001C342 0000 0000                  	dc.l Map_SSWalls
0001C346 0142                       	dc.w $142
0001C348 0000 0000                  	dc.l Map_SSWalls
0001C34C 0142                       	dc.w $142
0001C34E 0000 0000                  	dc.l Map_SSWalls
0001C352 0142                       	dc.w $142
0001C354 0000 0000                  	dc.l Map_SSWalls
0001C358 0142                       	dc.w $142
0001C35A 0000 0000                  	dc.l Map_SSWalls
0001C35E 0142                       	dc.w $142
0001C360 0000 0000                  	dc.l Map_SSWalls
0001C364 0142                       	dc.w $142
0001C366 0000 0000                  	dc.l Map_SSWalls
0001C36A 0142                       	dc.w $142
0001C36C 0000 0000                  	dc.l Map_SSWalls
0001C370 2142                       	dc.w $2142
0001C372 0000 0000                  	dc.l Map_SSWalls
0001C376 2142                       	dc.w $2142
0001C378 0000 0000                  	dc.l Map_SSWalls
0001C37C 2142                       	dc.w $2142
0001C37E 0000 0000                  	dc.l Map_SSWalls
0001C382 2142                       	dc.w $2142
0001C384 0000 0000                  	dc.l Map_SSWalls
0001C388 2142                       	dc.w $2142
0001C38A 0000 0000                  	dc.l Map_SSWalls
0001C38E 2142                       	dc.w $2142
0001C390 0000 0000                  	dc.l Map_SSWalls
0001C394 2142                       	dc.w $2142
0001C396 0000 0000                  	dc.l Map_SSWalls
0001C39A 2142                       	dc.w $2142
0001C39C 0000 0000                  	dc.l Map_SSWalls
0001C3A0 2142                       	dc.w $2142
0001C3A2 0000 0000                  	dc.l Map_SSWalls
0001C3A6 4142                       	dc.w $4142
0001C3A8 0000 0000                  	dc.l Map_SSWalls
0001C3AC 4142                       	dc.w $4142
0001C3AE 0000 0000                  	dc.l Map_SSWalls
0001C3B2 4142                       	dc.w $4142
0001C3B4 0000 0000                  	dc.l Map_SSWalls
0001C3B8 4142                       	dc.w $4142
0001C3BA 0000 0000                  	dc.l Map_SSWalls
0001C3BE 4142                       	dc.w $4142
0001C3C0 0000 0000                  	dc.l Map_SSWalls
0001C3C4 4142                       	dc.w $4142
0001C3C6 0000 0000                  	dc.l Map_SSWalls
0001C3CA 4142                       	dc.w $4142
0001C3CC 0000 0000                  	dc.l Map_SSWalls
0001C3D0 4142                       	dc.w $4142
0001C3D2 0000 0000                  	dc.l Map_SSWalls
0001C3D6 4142                       	dc.w $4142
0001C3D8 0000 0000                  	dc.l Map_SSWalls
0001C3DC 6142                       	dc.w $6142
0001C3DE 0000 0000                  	dc.l Map_SSWalls
0001C3E2 6142                       	dc.w $6142
0001C3E4 0000 0000                  	dc.l Map_SSWalls
0001C3E8 6142                       	dc.w $6142
0001C3EA 0000 0000                  	dc.l Map_SSWalls
0001C3EE 6142                       	dc.w $6142
0001C3F0 0000 0000                  	dc.l Map_SSWalls
0001C3F4 6142                       	dc.w $6142
0001C3F6 0000 0000                  	dc.l Map_SSWalls
0001C3FA 6142                       	dc.w $6142
0001C3FC 0000 0000                  	dc.l Map_SSWalls
0001C400 6142                       	dc.w $6142
0001C402 0000 0000                  	dc.l Map_SSWalls
0001C406 6142                       	dc.w $6142
0001C408 0000 0000                  	dc.l Map_SSWalls
0001C40C 6142                       	dc.w $6142
0001C40E 0000 F4EA                  	dc.l Map_obj47
0001C412 023B                       	dc.w $23B
0001C414 0000 0000                  	dc.l Map_SS_R
0001C418 0570                       	dc.w $570
0001C41A 0000 0000                  	dc.l Map_SS_R
0001C41E 0251                       	dc.w $251
0001C420 0000 0000                  	dc.l Map_SS_R
0001C424 0370                       	dc.w $370
0001C426 0000 0000                  	dc.l Map_SS_Up
0001C42A 0263                       	dc.w $263
0001C42C 0000 0000                  	dc.l Map_SS_Down
0001C430 0263                       	dc.w $263
0001C432 0000 0000                  	dc.l Map_SS_R
0001C436 22F0                       	dc.w $22F0
0001C438 0000 0000                  	dc.l Map_SS_Glass
0001C43C 0470                       	dc.w $470
0001C43E 0000 0000                  	dc.l Map_SS_Glass
0001C442 05F0                       	dc.w $5F0
0001C444 0000 0000                  	dc.l Map_SS_Glass
0001C448 65F0                       	dc.w $65F0
0001C44A 0000 0000                  	dc.l Map_SS_Glass
0001C44E 25F0                       	dc.w $25F0
0001C450 0000 0000                  	dc.l Map_SS_Glass
0001C454 45F0                       	dc.w $45F0
0001C456 0000 0000                  	dc.l Map_SS_R
0001C45A 02F0                       	dc.w $2F0
0001C45C 0100 F4EA                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C460 023B                       	dc.w $23B
0001C462 0200 F4EA                  	dc.l Map_obj47+$2000000
0001C466 023B                       	dc.w $23B
0001C468 0000 0000                  	dc.l Map_SS_R
0001C46C 0797                       	dc.w $797
0001C46E 0000 0000                  	dc.l Map_SS_R
0001C472 07A0                       	dc.w $7A0
0001C474 0000 0000                  	dc.l Map_SS_R
0001C478 07A9                       	dc.w $7A9
0001C47A 0000 0000                  	dc.l Map_SS_R
0001C47E 0797                       	dc.w $797
0001C480 0000 0000                  	dc.l Map_SS_R
0001C484 07A0                       	dc.w $7A0
0001C486 0000 0000                  	dc.l Map_SS_R
0001C48A 07A9                       	dc.w $7A9
0001C48C 0000 A7EA                  	dc.l Map_obj25
0001C490 27B2                       	dc.w $27B2
0001C492 0000 0000                  	dc.l Map_SS_Chaos3
0001C496 0770                       	dc.w $770
0001C498 0000 0000                  	dc.l Map_SS_Chaos3
0001C49C 2770                       	dc.w $2770
0001C49E 0000 0000                  	dc.l Map_SS_Chaos3
0001C4A2 4770                       	dc.w $4770
0001C4A4 0000 0000                  	dc.l Map_SS_Chaos3
0001C4A8 6770                       	dc.w $6770
0001C4AA 0000 0000                  	dc.l Map_SS_Chaos1
0001C4AE 0770                       	dc.w $770
0001C4B0 0000 0000                  	dc.l Map_SS_Chaos2
0001C4B4 0770                       	dc.w $770
0001C4B6 0000 0000                  	dc.l Map_SS_R
0001C4BA 04F0                       	dc.w $4F0
0001C4BC 0400 A7EA                  	dc.l Map_obj25+$4000000
0001C4C0 27B2                       	dc.w $27B2
0001C4C2 0500 A7EA                  	dc.l Map_obj25+$5000000
0001C4C6 27B2                       	dc.w $27B2
0001C4C8 0600 A7EA                  	dc.l Map_obj25+$6000000
0001C4CC 27B2                       	dc.w $27B2
0001C4CE 0700 A7EA                  	dc.l Map_obj25+$7000000
0001C4D2 27B2                       	dc.w $27B2
0001C4D4 0000 0000                  	dc.l Map_SS_Glass
0001C4D8 23F0                       	dc.w $23F0
0001C4DA 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C4DE 23F0                       	dc.w $23F0
0001C4E0 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C4E4 23F0                       	dc.w $23F0
0001C4E6 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C4EA 23F0                       	dc.w $23F0
0001C4EC 0000 0000                  	dc.l Map_SS_R+$2000000
0001C4F0 04F0                       	dc.w $4F0
0001C4F2 0000 0000                  	dc.l Map_SS_Glass
0001C4F6 05F0                       	dc.w $5F0
0001C4F8 0000 0000                  	dc.l Map_SS_Glass
0001C4FC 65F0                       	dc.w $65F0
0001C4FE 0000 0000                  	dc.l Map_SS_Glass
0001C502 25F0                       	dc.w $25F0
0001C504 0000 0000                  	dc.l Map_SS_Glass
0001C508 45F0                       	dc.w $45F0
0001C508 45F0                       	dc.w $45F0
0001C50A                            
0001C50A                            ; ---------------------------------------------------------------------------
0001C50A                            ; Sprite mappings - special stage "R" block
0001C50A                            ; ---------------------------------------------------------------------------
0001C50A                            Map_SS_R:
0001C50A                            	include "_maps\SSRblock.asm"
0001C50A                            ; ---------------------------------------------------------------------------
0001C50A                            ; Sprite mappings - special stage "R" block
0001C50A                            ; ---------------------------------------------------------------------------
0001C50A 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C50E 0000                       		dc.w byte_1B91E-Map_SS_R
0001C510 01                         byte_1B912:	dc.b 1
0001C511 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C516 01                         byte_1B918:	dc.b 1
0001C517 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C51C 00                         byte_1B91E:	dc.b 0
0001C51E 00                         		even
0001C51E 00                         		even
0001C51E                            
0001C51E                            ; ---------------------------------------------------------------------------
0001C51E                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C51E                            ; ---------------------------------------------------------------------------
0001C51E                            Map_SS_Glass:
0001C51E                            	include "_maps\SSglassblock.asm"
0001C51E                            ; ---------------------------------------------------------------------------
0001C51E                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C51E                            ; ---------------------------------------------------------------------------
0001C51E 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C522 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C526 01                         byte_1B928:	dc.b 1
0001C527 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C52C 01                         byte_1B92E:	dc.b 1
0001C52D F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C532 01                         byte_1B934:	dc.b 1
0001C533 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C538 01                         byte_1B93A:	dc.b 1
0001C539 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C53E                            		even
0001C53E                            		even
0001C53E                            
0001C53E                            ; ---------------------------------------------------------------------------
0001C53E                            ; Sprite mappings - special stage "UP" block
0001C53E                            ; ---------------------------------------------------------------------------
0001C53E                            Map_SS_Up:
0001C53E                            	include "_maps\SSUPblock.asm"
0001C53E                            ; ---------------------------------------------------------------------------
0001C53E                            ; Sprite mappings - special stage "UP" block
0001C53E                            ; ---------------------------------------------------------------------------
0001C53E 0000                       		dc.w byte_1B944-Map_SS_Up
0001C540 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C542 01                         byte_1B944:	dc.b 1
0001C543 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C548 01                         byte_1B94A:	dc.b 1
0001C549 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C54E                            		even
0001C54E                            		even
0001C54E                            
0001C54E                            ; ---------------------------------------------------------------------------
0001C54E                            ; Sprite mappings - special stage "DOWN" block
0001C54E                            ; ---------------------------------------------------------------------------
0001C54E                            Map_SS_Down:
0001C54E                            	include "_maps\SSDOWNblock.asm"
0001C54E                            ; ---------------------------------------------------------------------------
0001C54E                            ; Sprite mappings - special stage "DOWN" block
0001C54E                            ; ---------------------------------------------------------------------------
0001C54E 0000                       		dc.w byte_1B954-Map_SS_Down
0001C550 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C552 01                         byte_1B954:	dc.b 1
0001C553 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C558 01                         byte_1B95A:	dc.b 1
0001C559 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C55E                            		even
0001C55E                            		even
0001C55E                            
0001C55E                            ; ---------------------------------------------------------------------------
0001C55E                            ; Sprite mappings - special stage chaos	emeralds
0001C55E                            ; ---------------------------------------------------------------------------
0001C55E 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C560 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C562 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C564 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C566 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C568 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C56A 01                         byte_1B96C:	dc.b 1
0001C56B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C570 01                         byte_1B972:	dc.b 1
0001C571 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C576 01                         byte_1B978:	dc.b 1
0001C577 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C57C 01                         byte_1B97E:	dc.b 1
0001C57D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C582                            		even
0001C582                            ; ===========================================================================
0001C582                            ; ---------------------------------------------------------------------------
0001C582                            ; Object 09 - Sonic (special stage)
0001C582                            ; ---------------------------------------------------------------------------
0001C582                            
0001C582                            Obj09:					; XREF: Obj_Index
0001C582                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C582                            ;		beq.s	Obj09_Normal	; if not, branch
0001C582 6100 0000                  		bsr.w	SS_FixCamera
0001C586                            ;		bra.w	DebugMode
0001C586                            ; ===========================================================================
0001C586                            
0001C586                            Obj09_Normal:
0001C586 7000                       		moveq	#0,d0
0001C588 1028 0024                  		move.b	$24(a0),d0
0001C58C 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C590 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C594                            ; ===========================================================================
0001C594 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C596 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C598 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C59A 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C59C                            ; ===========================================================================
0001C59C                            
0001C59C                            Obj09_Main:				; XREF: Obj09_Index
0001C59C 5428 0024                  		addq.b	#2,$24(a0)
0001C5A0 117C 000E 0016             		move.b	#$E,$16(a0)
0001C5A6 117C 0007 0017             		move.b	#7,$17(a0)
0001C5AC 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C5B4 317C 0780 0002             		move.w	#$780,2(a0)
0001C5BA 117C 0004 0001             		move.b	#4,1(a0)
0001C5C0 117C 0000 0018             		move.b	#0,$18(a0)
0001C5C6 117C 0002 001C             		move.b	#2,$1C(a0)
0001C5CC 08E8 0002 0022             		bset	#2,$22(a0)
0001C5D2 08E8 0001 0022             		bset	#1,$22(a0)
0001C5D8                            
0001C5D8                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C5D8                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C5D8                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C5D8                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C5D8                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C5D8                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C5D8                            
0001C5D8                            Obj09_NoDebug:
0001C5D8 117C 0000 0030             		move.b	#0,$30(a0)
0001C5DE 7000                       		moveq	#0,d0
0001C5E0 1028 0022                  		move.b	$22(a0),d0
0001C5E4 0240 0002                  		andi.w	#2,d0
0001C5E8 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C5EC 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C5F0 4EBA 8112                  		jsr	LoadSonicDynPLC
0001C5F4 4EF9 0000 DFF6             		jmp	DisplaySprite
0001C5FA                            ; ===========================================================================
0001C5FA 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C5FC 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C5FE                            ; ===========================================================================
0001C5FE                            
0001C5FE                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C5FE 6100 0000                  		bsr.w	Obj09_Rise
0001C602 6100 0000                  		bsr.w	Obj09_Move
0001C606 6100 0000                  		bsr.w	Obj09_Fall
0001C60A 6000                       		bra.s	Obj09_Display
0001C60C                            ; ===========================================================================
0001C60C                            
0001C60C                            Obj09_InAir:				; XREF: Obj09_Modes
0001C60C 6100 0000                  		bsr.w	Obj09_Rise
0001C610 6100 0000                  		bsr.w	Obj09_Move
0001C614 6100 0000                  		bsr.w	Obj09_Fall
0001C618                            
0001C618                            Obj09_Display:				; XREF: Obj09_OnWall
0001C618 6100 0000                  		bsr.w	Obj09_ChkItems
0001C61C 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C620 4EB9 0000 DFD0             		jsr	SpeedToPos
0001C626 6100 0000                  		bsr.w	SS_FixCamera
0001C62A 3038 F780                  		move.w	($FFFFF780).w,d0
0001C62E D078 F782                  		add.w	($FFFFF782).w,d0
0001C632 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C636 4EB9 0001 445E             		jsr	Sonic_Animate
0001C63C 4E75                       		rts	
0001C63E                            
0001C63E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C63E                            
0001C63E                            
0001C63E                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C63E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C644 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C646 4A78 F784                          tst.w   ($FFFFF784).w
0001C64A 6600                               bne.s   @corereverse1
0001C64C 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C650 6000                               bra.s   Obj09_ChkRight          
0001C652                            
0001C652                            @corereverse1:
0001C652 6100 0000                          bsr.w	Obj09_MoveRight
0001C656                            
0001C656                            Obj09_ChkRight:
0001C656 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C65C 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C65E 4A78 F784                          tst.w   ($FFFFF784).w
0001C662 6600                               bne.s   @corereverse2
0001C664 6100 0000                  		bsr.w	Obj09_MoveRight
0001C668 6000                               bra.s   Obj09_MoveSpeed 
0001C66A                            
0001C66A                            @corereverse2:
0001C66A 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C66E                            
0001C66E                            Obj09_MoveSpeed:
0001C66E 1038 F602                  		move.b	($FFFFF602).w,d0
0001C672 0200 000C                  		andi.b	#$C,d0
0001C676 6600                       		bne.s	Obj09_MoveCollision
0001C678 3028 0010                  		move.w	$10(a0),d0
0001C67C 6700                       		beq.s	Obj09_MoveCollision
0001C67E 317C 0000 0010             		move.w	#0,$10(a0)
0001C684                            
0001C684                            Obj09_MoveCollision:
0001C684 1038 F780                  		move.b	($FFFFF780).w,d0
0001C688 0600 0020                  		addi.b	#$20,d0
0001C68C 0200 00C0                  		andi.b	#$C0,d0
0001C690 4400                       		neg.b	d0
0001C692 4EB9 0000 2D28             		jsr	(CalcSine).l
0001C698 C3E8 0010                  		muls.w	$10(a0),d1
0001C69C D3A8 0008                  		add.l	d1,8(a0)
0001C6A0 C1E8 0012                  		muls.w	$12(a0),d0
0001C6A4 D1A8 000C                  		add.l	d0,$C(a0)
0001C6A8 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C6AC 2428 000C                  		move.l	$C(a0),d2
0001C6B0 2628 0008                  		move.l	8(a0),d3
0001C6B4 6100 0000                  		bsr.w	sub_1BCE8
0001C6B8 6700                       		beq.s	loc_1BAF2
0001C6BA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C6BE 93A8 0008                  		sub.l	d1,8(a0)
0001C6C2 91A8 000C                  		sub.l	d0,$C(a0)
0001C6C6 317C 0000 0010             		move.w	#0,$10(a0)
0001C6CC 4E75                       		rts	
0001C6CE                            ; ===========================================================================
0001C6CE                            
0001C6CE                            loc_1BAF2:
0001C6CE 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C6D2 4E75                       		rts	
0001C6D4                            ; End of function Obj09_Move
0001C6D4                            
0001C6D4                            
0001C6D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6D4                            
0001C6D4                            
0001C6D4                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C6D4 08E8 0000 0022             		bset	#0,$22(a0)
0001C6DA 4240                               clr.w   d0
0001C6DC 3038 F786                          move.w  ($FFFFF786).w,d0
0001C6E0 D040                               add.w   d0,d0
0001C6E2 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C6E8 4468 0010                          neg.w   $10(a0)
0001C6EC 4E75                               rts
0001C6EE                            
0001C6EE                            ; End of function Obj09_MoveLeft
0001C6EE                            
0001C6EE                            
0001C6EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6EE                            
0001C6EE                            
0001C6EE                            Obj09_MoveRight:
0001C6EE 08A8 0000 0022             		bclr	#0,$22(a0)
0001C6F4 4240                               clr.w   d0
0001C6F6 3038 F786                          move.w  ($FFFFF786).w,d0
0001C6FA D040                               add.w   d0,d0
0001C6FC 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C702 4E75                       		rts
0001C704                            
0001C704                            ; End of function Obj09_MoveRight
0001C704                            
0001C704                            ; ---------------------------------------------------------------------------
0001C704                            
0001C704                            SS_XSpdIndex:
0001C704 0032                       		dc.w 50
0001C706 0064                       		dc.w 100
0001C708 0096                       		dc.w 150
0001C70A 00C8                       		dc.w 200
0001C70C 00FA                       		dc.w 250
0001C70E                            
0001C70E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C70E                            
0001C70E                            
0001C70E                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C70E 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C714 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C716 4A78 F784                          tst.w   ($FFFFF784).w
0001C71A 6600 0000                          bne.w   @corereverse1
0001C71E 6100 0000                  		bsr.w	Obj09_MoveUp
0001C722 6000                               bra.s   Obj09_NoRise
0001C724                            
0001C724                            @corereverse1:
0001C724 6100 0000                  		bsr.w	Obj09_Falling 
0001C728                                    
0001C728                            Obj09_NoRise:
0001C728 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C72E 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C730 4A78 F784                          tst.w   ($FFFFF784).w
0001C734 6600 0000                          bne.w   @corereverse2
0001C738 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C73C 6000                               bra.s   Obj09_MoveYSpeed
0001C73E                            
0001C73E                            @corereverse2:
0001C73E 6100 0000                  		bsr.w	Obj09_MoveUp
0001C742                            		
0001C742                            Obj09_MoveYSpeed:
0001C742 1038 F602                  		move.b	($FFFFF602).w,d0
0001C746 0200 0003                  		andi.b	#3,d0
0001C74A 6600                       		bne.s	Obj09_MoveYCollision
0001C74C 3028 0012                  		move.w	$12(a0),d0
0001C750 6700                       		beq.s	Obj09_MoveYCollision
0001C752 317C 0000 0012             		move.w	#0,$12(a0)
0001C758                            
0001C758                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C758 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C75C 0600 0020                  		addi.b	#$20,d0					;	?
0001C760 0200 00C0                  		andi.b	#$C0,d0					;	
0001C764 4400                       		neg.b	d0						;	?
0001C766 4EB9 0000 2D28             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C76C C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C770 D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C774 C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C778 D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C77C 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C780 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C784 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C788 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C78C 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C790 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C794 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C798 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C79C 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C7A2 4E75                       		rts								;	end routine
0001C7A4                            
0001C7A4                            Obj09_MoveUp:
0001C7A4 4240                               clr.w   d0
0001C7A6 3038 F786                          move.w  ($FFFFF786).w,d0
0001C7AA D040                               add.w   d0,d0
0001C7AC 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C7B2 4468 0012                          neg.w   $12(a0)
0001C7B6 4E75                               rts
0001C7B8                            
0001C7B8                            Obj09_Falling:
0001C7B8 4240                               clr.w   d0
0001C7BA 3038 F786                          move.w  ($FFFFF786).w,d0
0001C7BE D040                               add.w   d0,d0
0001C7C0 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C7C6 4E75                       		rts
0001C7C8                            ; End of function Obj09_Jump
0001C7C8                            
0001C7C8                            ; ---------------------------------------------------------------------------
0001C7C8                            SS_YSpdIndex:
0001C7C8 0080                       		dc.w $80
0001C7CA 0100                       		dc.w $100
0001C7CC 0180                       		dc.w $180
0001C7CE 0200                       		dc.w $200
0001C7D0 0280                       		dc.w $280
0001C7D2                            
0001C7D2                            
0001C7D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7D2                            
0001C7D2                            
0001C7D2                            nullsub_2:				; XREF: Obj09_InAir
0001C7D2 4E75                       		rts	
0001C7D4                            ; End of function nullsub_2
0001C7D4                            
0001C7D4                            ; ===========================================================================
0001C7D4                            ; ---------------------------------------------------------------------------
0001C7D4                            ; unused subroutine to limit Sonic's upward vertical speed
0001C7D4                            ; ---------------------------------------------------------------------------
0001C7D4 323C FC00                  		move.w	#-$400,d1
0001C7D8 B268 0012                  		cmp.w	$12(a0),d1
0001C7DC 6F00                       		ble.s	locret_1BBB4
0001C7DE 1038 F602                  		move.b	($FFFFF602).w,d0
0001C7E2 0200 0070                  		andi.b	#$70,d0
0001C7E6 6600                       		bne.s	locret_1BBB4
0001C7E8 3141 0012                  		move.w	d1,$12(a0)
0001C7EC                            
0001C7EC                            locret_1BBB4:
0001C7EC 4E75                       		rts	
0001C7EE                            ; ---------------------------------------------------------------------------
0001C7EE                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C7EE                            ; ---------------------------------------------------------------------------
0001C7EE                            
0001C7EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7EE                            
0001C7EE                            
0001C7EE                            SS_FixCamera:				; XREF: Obj09
0001C7EE 3428 000C                  		move.w	$C(a0),d2
0001C7F2 3628 0008                  		move.w	8(a0),d3
0001C7F6 3038 F700                  		move.w	($FFFFF700).w,d0
0001C7FA 0443 00A0                  		subi.w	#$A0,d3
0001C7FE 6500                       		bcs.s	loc_1BBCE
0001C800 9043                       		sub.w	d3,d0
0001C802 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C806                            
0001C806                            loc_1BBCE:
0001C806 3038 F704                  		move.w	($FFFFF704).w,d0
0001C80A 0442 0070                  		subi.w	#$70,d2
0001C80E 6500                       		bcs.s	locret_1BBDE
0001C810 9042                       		sub.w	d2,d0
0001C812 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C816                            
0001C816                            locret_1BBDE:
0001C816 4E75                       		rts	
0001C818                            ; End of function SS_FixCamera
0001C818                            
0001C818                            ; ===========================================================================
0001C818                            
0001C818                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C818 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C81E 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C824 6600                       		bne.s	loc_1BBF4
0001C826 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C82C                            
0001C82C                            loc_1BBF4:
0001C82C 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C832 6D00                       		blt.s	loc_1BC12
0001C834 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C83A                            ;		move.w	#$4000,($FFFFF780).w
0001C83A 5428 0024                  		addq.b	#2,$24(a0)
0001C83E 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C844                            
0001C844                            loc_1BC12:
0001C844                            ;		move.w	($FFFFF780).w,d0
0001C844                            ;		add.w	($FFFFF782).w,d0
0001C844                            ;		move.w	d0,($FFFFF780).w
0001C844 4EB9 0001 445E             		jsr	Sonic_Animate
0001C84A 4EB9 0001 4704             		jsr	LoadSonicDynPLC
0001C850 6100 FF9C                  		bsr.w	SS_FixCamera
0001C854 4EF9 0000 DFF6             		jmp	DisplaySprite
0001C85A                            ; ===========================================================================
0001C85A                            
0001C85A                            Obj09_Exit2:				; XREF: Obj09_Index
0001C85A 5368 0038                  		subq.w	#1,$38(a0)
0001C85E 6600                       		bne.s	loc_1BC40
0001C860 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C866                            
0001C866                            loc_1BC40:
0001C866 4EB9 0001 445E             		jsr	Sonic_Animate
0001C86C 4EB9 0001 4704             		jsr	LoadSonicDynPLC
0001C872 6100 FF7A                  		bsr.w	SS_FixCamera
0001C876 4EF9 0000 DFF6             		jmp	DisplaySprite
0001C87C                            
0001C87C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C87C                            
0001C87C                            
0001C87C                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C87C 2428 000C                  		move.l	$C(a0),d2
0001C880 2628 0008                  		move.l	8(a0),d3
0001C884 1038 F780                  		move.b	($FFFFF780).w,d0
0001C888 0200 00FC                  		andi.b	#$FC,d0
0001C88C 4EB9 0000 2D28             		jsr	(CalcSine).l
0001C892 3828 0010                  		move.w	$10(a0),d4
0001C896 48C4                       		ext.l	d4
0001C898 E184                       		asl.l	#8,d4
0001C89A C1FC 002A                  		muls.w	#$2A,d0
0001C89E D084                       		add.l	d4,d0
0001C8A0 3828 0012                  		move.w	$12(a0),d4
0001C8A4 48C4                       		ext.l	d4
0001C8A6 E184                       		asl.l	#8,d4
0001C8A8 C3FC 002A                  		muls.w	#$2A,d1
0001C8AC D284                       		add.l	d4,d1
0001C8AE 7A00                       		moveq	#0,d5
0001C8B0 3A28 0010                  		move.w	$10(a0),d5
0001C8B4 6700                       		beq.s	Obj09_NoXFall
0001C8B6 D680                       		add.l	d0,d3
0001C8B8 6100 0000                  		bsr.w	sub_1BCE8
0001C8BC 6700                       		beq.s	loc_1BCB0
0001C8BE 9680                       		sub.l	d0,d3
0001C8C0 7000                       		moveq	#0,d0
0001C8C2 3140 0010                  		move.w	d0,$10(a0)
0001C8C6 08A8 0001 0022             		bclr	#1,$22(a0)
0001C8CC                            
0001C8CC                            Obj09_NoXFall
0001C8CC 7C00                       		moveq	#0,d6
0001C8CE 3C28 0012                  		move.w	$12(a0),d6
0001C8D2 6700                       		beq.s	Obj09_NoYFall
0001C8D4 D481                       		add.l	d1,d2
0001C8D6 6100 0000                  		bsr.w	sub_1BCE8
0001C8DA 6700                       		beq.s	loc_1BCC6
0001C8DC 9481                       		sub.l	d1,d2
0001C8DE 7200                       		moveq	#0,d1
0001C8E0 3141 0012                  		move.w	d1,$12(a0)
0001C8E4 4E75                       		rts	
0001C8E6                            ; ===========================================================================
0001C8E6                            
0001C8E6                            loc_1BCB0:
0001C8E6 7C00                       		moveq	#0,d6
0001C8E8 3C28 0012                  		move.w	$12(a0),d6
0001C8EC 6700                       		beq.s	Obj09_NoYFall
0001C8EE D481                       		add.l	d1,d2
0001C8F0 6100 0000                  		bsr.w	sub_1BCE8
0001C8F4 6700                       		beq.s	loc_1BCD4
0001C8F6 9481                       		sub.l	d1,d2
0001C8F8 7200                       		moveq	#0,d1
0001C8FA 3141 0012                  		move.w	d1,$12(a0)
0001C8FE 08A8 0001 0022             		bclr	#1,$22(a0)
0001C904                            
0001C904                            loc_1BCC6:
0001C904 E080                       		asr.l	#8,d0
0001C906 E081                       		asr.l	#8,d1
0001C908 3140 0010                  		move.w	d0,$10(a0)
0001C90C 3141 0012                  		move.w	d1,$12(a0)
0001C910 4E75                       		rts	
0001C912                            ; ===========================================================================
0001C912                            
0001C912                            loc_1BCD4:
0001C912 E080                       		asr.l	#8,d0
0001C914 E081                       		asr.l	#8,d1
0001C916 3140 0010                  		move.w	d0,$10(a0)
0001C91A 3141 0012                  		move.w	d1,$12(a0)
0001C91E 08E8 0001 0022             		bset	#1,$22(a0)
0001C924 4E75                       		rts	
0001C926                            
0001C926                            Obj09_NoYFall:
0001C926 4E75                       		rts
0001C928                            ; End of function Obj09_Fall
0001C928                            
0001C928                            
0001C928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C928                            
0001C928                            
0001C928                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C928 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C92E 7800                       		moveq	#0,d4
0001C930 4842                       		swap	d2
0001C932 3802                       		move.w	d2,d4
0001C934 4842                       		swap	d2
0001C936 0644 0044                  		addi.w	#$44,d4
0001C93A 88FC 0018                  		divu.w	#$18,d4
0001C93E C8FC 0080                  		mulu.w	#$80,d4
0001C942 D3C4                       		adda.l	d4,a1
0001C944 7800                       		moveq	#0,d4
0001C946 4843                       		swap	d3
0001C948 3803                       		move.w	d3,d4
0001C94A 4843                       		swap	d3
0001C94C 0644 0014                  		addi.w	#$14,d4
0001C950 88FC 0018                  		divu.w	#$18,d4
0001C954 D2C4                       		adda.w	d4,a1
0001C956 7A00                       		moveq	#0,d5
0001C958 1819                       		move.b	(a1)+,d4
0001C95A 6100                       		bsr.s	sub_1BD30
0001C95C 1819                       		move.b	(a1)+,d4
0001C95E 6100                       		bsr.s	sub_1BD30
0001C960 D2FC 007E                  		adda.w	#$7E,a1
0001C964 1819                       		move.b	(a1)+,d4
0001C966 6100                       		bsr.s	sub_1BD30
0001C968 1819                       		move.b	(a1)+,d4
0001C96A 6100                       		bsr.s	sub_1BD30
0001C96C 4A05                       		tst.b	d5
0001C96E 4E75                       		rts	
0001C970                            ; End of function sub_1BCE8
0001C970                            
0001C970                            
0001C970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C970                            
0001C970                            
0001C970                            sub_1BD30:				; XREF: sub_1BCE8
0001C970 6700                       		beq.s	locret_1BD44
0001C972 0C04 0028                  		cmpi.b	#$28,d4
0001C976 6500                       		blo.s	loc_1BD46
0001C978 0C04 004B                  		cmpi.b	#$4B,d4
0001C97C 6400                       		bhs.s	loc_1BD46
0001C97E 0C04 003A                  		cmpi.b	#$3A,d4
0001C982 6400                       		bhs.s	locret_1BD44
0001C984 0C04 002C                  		cmpi.b	#$2C,d4
0001C988 6400                       		bhs.s	loc_1BD46
0001C98A                            
0001C98A                            locret_1BD44:
0001C98A 4E75                       		rts	
0001C98C                            ; ===========================================================================
0001C98C                            
0001C98C                            loc_1BD46:
0001C98C 1144 0030                  		move.b	d4,$30(a0)
0001C990 2149 0032                  		move.l	a1,$32(a0)
0001C994 7AFF                       		moveq	#-1,d5
0001C996 4E75                       		rts	
0001C998                            ; End of function sub_1BD30
0001C998                            
0001C998                            
0001C998                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C998                            
0001C998                            
0001C998                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C998 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C99E 7800                       		moveq	#0,d4
0001C9A0 3828 000C                  		move.w	$C(a0),d4
0001C9A4 0644 0050                  		addi.w	#$50,d4
0001C9A8 88FC 0018                  		divu.w	#$18,d4
0001C9AC C8FC 0080                  		mulu.w	#$80,d4
0001C9B0 D3C4                       		adda.l	d4,a1
0001C9B2 7800                       		moveq	#0,d4
0001C9B4 3828 0008                  		move.w	8(a0),d4
0001C9B8 0644 0020                  		addi.w	#$20,d4
0001C9BC 88FC 0018                  		divu.w	#$18,d4
0001C9C0 D2C4                       		adda.w	d4,a1
0001C9C2 1811                       		move.b	(a1),d4
0001C9C4 6600                       		bne.s	Obj09_ChkCont
0001C9C6 4A28 003A                  		tst.b	$3A(a0)
0001C9CA 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C9CE 7800                       		moveq	#0,d4
0001C9D0 4E75                       		rts	
0001C9D2                            ; ===========================================================================
0001C9D2                            
0001C9D2                            Obj09_ChkCont:
0001C9D2 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C9D6 6600                       		bne.s	Obj09_Chk1Up
0001C9D8 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001C9DC 6600                       		bne.s	Obj09_GetCont
0001C9DE 14BC 0001                  		move.b	#1,(a2)
0001C9E2 2549 0004                  		move.l	a1,4(a2)
0001C9E6                            
0001C9E6                            Obj09_GetCont:
0001C9E6 4EB9 0000 A4D2             		jsr	CollectRing
0001C9EC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C9F2 6500                       		bcs.s	Obj09_NoCont
0001C9F4 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C9FA 6600                       		bne.s	Obj09_NoCont
0001C9FC 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001CA00 303C 00BF                  		move.w	#$BF,d0
0001CA04 4EB9 0000 1588             		jsr	(PlaySound).l	; play extra continue sound
0001CA0A                            
0001CA0A                            Obj09_NoCont:
0001CA0A 7800                       		moveq	#0,d4
0001CA0C 4E75                       		rts	
0001CA0E                            ; ===========================================================================
0001CA0E                            
0001CA0E                            Obj09_Chk1Up:
0001CA0E 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001CA12 6600                       		bne.s	Obj09_ChkEmer
0001CA14 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001CA18 6600                       		bne.s	Obj09_Get1Up
0001CA1A 14BC 0003                  		move.b	#3,(a2)
0001CA1E 2549 0004                  		move.l	a1,4(a2)
0001CA22                            
0001CA22                            Obj09_Get1Up:
0001CA22 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001CA26 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001CA2A 303C 0088                  		move.w	#$88,d0
0001CA2E 4EB9 0000 1588             		jsr	(PlaySound).l	; play extra life music
0001CA34 7800                       		moveq	#0,d4
0001CA36 4E75                       		rts	
0001CA38                            ; ===========================================================================
0001CA38                            
0001CA38                            Obj09_ChkEmer:
0001CA38 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001CA3C 6500                       		bcs.s	Obj09_UPblock
0001CA3E 0C04 0040                  		cmpi.b	#$40,d4
0001CA42 6200                       		bhi.s	Obj09_UPblock
0001CA44 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001CA48 6600                       		bne.s	Obj09_GetEmer
0001CA4A 14BC 0005                  		move.b	#5,(a2)
0001CA4E 2549 0004                  		move.l	a1,4(a2)
0001CA52                            
0001CA52                            Obj09_GetEmer:
0001CA52 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001CA58 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001CA5A 0404 003B                  		subi.b	#$3B,d4
0001CA5E 7000                       		moveq	#0,d0
0001CA60 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001CA64 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001CA68 1584 0000                  		move.b	d4,(a2,d0.w)
0001CA6C 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001CA70                            
0001CA70                            Obj09_NoEmer:
0001CA70 303C 0093                  		move.w	#$93,d0
0001CA74 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play emerald music
0001CA7A 7800                       		moveq	#0,d4
0001CA7C 4E75                       		rts	
0001CA7E                            
0001CA7E                            ; ===========================================================================
0001CA7E                            
0001CA7E                            Obj09_UPblock:
0001CA7E 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001CA82 6600                       		bne.s	Obj09_DOWNblock
0001CA84 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001CA88 6600                       		bne.s	Obj09_SpeedUp
0001CA8A 14BC 0001                  		move.b	#1,(a2)
0001CA8E 2549 0004                  		move.l	a1,4(a2)
0001CA92                            
0001CA92                            Obj09_SpeedUp:
0001CA92 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001CA98 6400                       		bhs.s	Obj09_UPsnd
0001CA9A 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001CA9E                            
0001CA9E                            Obj09_UPsnd:
0001CA9E 303C 00A9                  		move.w	#$A9,d0
0001CAA2 4EB9 0000 158E             		jsr	(PlaySound_Special).l	; play up/down sound
0001CAA8 7800                       		moveq	#0,d4
0001CAAA 4E75                       		rts	
0001CAAC                            ; ===========================================================================
0001CAAC                            
0001CAAC                            Obj09_DOWNblock:
0001CAAC 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001CAB0 6600                       		bne.s	Obj09_Rblock
0001CAB2 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001CAB6 6600                       		bne.s	Obj09_SpeedDown
0001CAB8 14BC 0001                  		move.b	#1,(a2)
0001CABC 2549 0004                  		move.l	a1,4(a2)
0001CAC0                            
0001CAC0                            Obj09_SpeedDown:
0001CAC0 4A78 F786                  		tst.w 	($FFFFF786).w
0001CAC4 6700                       		beq.s	Obj09_DOWNsnd
0001CAC6 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001CACA                            
0001CACA                            Obj09_DOWNsnd:
0001CACA 303C 00A9                  		move.w	#$A9,d0
0001CACE 4EB9 0000 158E             		jsr	(PlaySound_Special).l	; play up/down sound
0001CAD4 7800                       		moveq	#0,d4
0001CAD6 4E75                       		rts	
0001CAD8                            ; ===========================================================================
0001CAD8                            
0001CAD8                            Obj09_Rblock:
0001CAD8 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001CADC 6600                       		bne.s	Obj09_ChkGhost
0001CADE 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001CAE2 6600                       		bne.s	Obj09_RevStage
0001CAE4 14BC 0001                  		move.b	#1,(a2)
0001CAE8 2549 0004                  		move.l	a1,4(a2)
0001CAEC                            
0001CAEC                            Obj09_RevStage:
0001CAEC 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001CAF2 103C 00A9                  		move.b	#$A9,d0
0001CAF6 4EB9 0000 158E             		jsr	(PlaySound_Special).l	; play sound
0001CAFC 7800                       		moveq	#0,d4
0001CAFE 4E75                       		rts	
0001CB00                            
0001CB00                            ; ===========================================================================
0001CB00                            
0001CB00                            Obj09_ChkGhost:
0001CB00 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CB04 6600                       		bne.s	Obj09_ChkGhostTag
0001CB06 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CB0C                            
0001CB0C                            Obj09_ChkGhostTag:
0001CB0C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CB10 6600                       		bne.s	Obj09_NoGhost
0001CB12 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CB18 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CB1A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CB20                            
0001CB20                            Obj09_NoGhost:
0001CB20 78FF                       		moveq	#-1,d4
0001CB22 4E75                       		rts	
0001CB24                            ; ===========================================================================
0001CB24                            
0001CB24                            Obj09_MakeGhostSolid:
0001CB24 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CB2A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CB2C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CB32 723F                       		moveq	#$3F,d1
0001CB34                            
0001CB34                            Obj09_GhostLoop2:
0001CB34 743F                       		moveq	#$3F,d2
0001CB36                            
0001CB36                            Obj09_GhostLoop:
0001CB36 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CB3A 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CB3C 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CB40                            
0001CB40                            Obj09_NoReplace:
0001CB40 5249                       		addq.w	#1,a1
0001CB42 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CB46 43E9 0040                  		lea	$40(a1),a1
0001CB4A 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CB4E                            
0001CB4E                            Obj09_GhostNotSolid:
0001CB4E 4228 003A                  		clr.b	$3A(a0)
0001CB52 7800                       		moveq	#0,d4
0001CB54 4E75                       		rts	
0001CB56                            ; End of function Obj09_ChkItems
0001CB56                            
0001CB56                            
0001CB56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB56                            
0001CB56                            
0001CB56                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CB56 1028 0030                  		move.b	$30(a0),d0
0001CB5A 6600                       		bne.s	Obj09_GOAL
0001CB5C 5328 0036                  		subq.b	#1,$36(a0)
0001CB60 6A00                       		bpl.s	loc_1BEA0
0001CB62 117C 0000 0036             		move.b	#0,$36(a0)
0001CB68                            
0001CB68                            loc_1BEA0:
0001CB68 5328 0037                  		subq.b	#1,$37(a0)
0001CB6C 6A00                       		bpl.s	locret_1BEAC
0001CB6E 117C 0000 0037             		move.b	#0,$37(a0)
0001CB74                            
0001CB74                            locret_1BEAC:
0001CB74 4E75                       		rts	
0001CB76                            ; ===========================================================================
0001CB76                            
0001CB76                            ; ===========================================================================
0001CB76                            
0001CB76                            Obj09_GOAL:
0001CB76 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CB7A 6600                       		bne.s	Obj09_ChkGlass
0001CB7C 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CB80 303C 00A8                  		move.w	#$A8,d0		; change item
0001CB84 4EB9 0000 158E             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CB8A 4E75                       		rts	
0001CB8C                            ; ===========================================================================
0001CB8C                            
0001CB8C                            ; ===========================================================================
0001CB8C                            
0001CB8C                            Obj09_ChkGlass:
0001CB8C 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CB90 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CB92 0C00 002E                  		cmpi.b	#$2E,d0
0001CB96 6700                       		beq.s	Obj09_Glass
0001CB98 0C00 002F                  		cmpi.b	#$2F,d0
0001CB9C 6700                       		beq.s	Obj09_Glass
0001CB9E 0C00 0030                  		cmpi.b	#$30,d0
0001CBA2 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CBA4                            
0001CBA4                            Obj09_Glass:
0001CBA4 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001CBA8 6600                       		bne.s	Obj09_GlassSnd
0001CBAA 14BC 0006                  		move.b	#6,(a2)
0001CBAE 2268 0032                  		movea.l	$32(a0),a1
0001CBB2 5389                       		subq.l	#1,a1
0001CBB4 2549 0004                  		move.l	a1,4(a2)
0001CBB8 1011                       		move.b	(a1),d0
0001CBBA 5200                       		addq.b	#1,d0		; change glass type when touched
0001CBBC 0C00 0030                  		cmpi.b	#$30,d0
0001CBC0 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CBC2 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CBC4                            
0001CBC4                            Obj09_GlassUpdate:
0001CBC4 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CBC8                            
0001CBC8                            Obj09_GlassSnd:
0001CBC8 303C 00BA                  		move.w	#$BA,d0
0001CBCC 4EF9 0000 158E             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CBD2                            ; ===========================================================================
0001CBD2                            
0001CBD2                            Obj09_NoGlass:
0001CBD2 4E75                       		rts	
0001CBD4                            ; End of function Obj09_ChkItems2
0001CBD4                            
0001CBD4                            ; ===========================================================================
0001CBD4                            ; ---------------------------------------------------------------------------
0001CBD4                            ; Object 10 - blank
0001CBD4                            ; ---------------------------------------------------------------------------
0001CBD4                            
0001CBD4                            Obj10:					; XREF: Obj_Index
0001CBD4 4E75                       		rts	
0001CBD6                            ; ---------------------------------------------------------------------------
0001CBD6                            ; Subroutine to	animate	level graphics
0001CBD6                            ; ---------------------------------------------------------------------------
0001CBD6                            
0001CBD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBD6                            
0001CBD6                            
0001CBD6                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CBD6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CBDA 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CBDC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CBE2 6100 0000                  		bsr.w	AniArt_GiantRing
0001CBE6 7000                       		moveq	#0,d0
0001CBE8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CBEC D040                       		add.w	d0,d0
0001CBEE 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CBF2 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CBF6                            ; ===========================================================================
0001CBF6                            
0001CBF6                            AniArt_Pause:
0001CBF6 4E75                       		rts	
0001CBF8                            ; End of function AniArt_Load
0001CBF8                            
0001CBF8                            ; ===========================================================================
0001CBF8 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CBFC 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CC00 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CC04 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CC08                            ; ===========================================================================
0001CC08                            ; ---------------------------------------------------------------------------
0001CC08                            ; Animated pattern routine - Green Hill
0001CC08                            ; ---------------------------------------------------------------------------
0001CC08                            
0001CC08                            AniArt_GHZ:				; XREF: AniArt_Index
0001CC08 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CC0C 6A00                       		bpl.s	loc_1C08A
0001CC0E 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CC14 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CC1A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CC1E 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CC22 0240 0001                  		andi.w	#1,d0
0001CC26 6700                       		beq.s	loc_1C078
0001CC28 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CC2C                            
0001CC2C                            loc_1C078:
0001CC2C 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CC36 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CC3A 6000 0000                  		bra.w	LoadTiles
0001CC3E                            ; ===========================================================================
0001CC3E                            
0001CC3E                            loc_1C08A:
0001CC3E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CC42 6A00                       		bpl.s	loc_1C0C0
0001CC44 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CC4A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CC50 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CC54 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CC58 0240 0001                  		andi.w	#1,d0
0001CC5C 6700                       		beq.s	loc_1C0AE
0001CC5E 43E9 0200                  		lea	$200(a1),a1
0001CC62                            
0001CC62                            loc_1C0AE:
0001CC62 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CC6C 323C 000F                  		move.w	#$F,d1
0001CC70 6000 0000                  		bra.w	LoadTiles
0001CC74                            ; ===========================================================================
0001CC74                            
0001CC74                            loc_1C0C0:
0001CC74 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CC78 6A00                       		bpl.s	locret_1C10C
0001CC7A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CC80 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CC84 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CC88 0240 0003                  		andi.w	#3,d0
0001CC8C 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CC90 0800 0000                  		btst	#0,d0
0001CC94 6600                       		bne.s	loc_1C0E8
0001CC96 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CC9C                            
0001CC9C                            loc_1C0E8:
0001CC9C EF48                       		lsl.w	#7,d0
0001CC9E 3200                       		move.w	d0,d1
0001CCA0 D040                       		add.w	d0,d0
0001CCA2 D041                       		add.w	d1,d0
0001CCA4 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CCAE 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CCB4 43F1 0000                  		lea	(a1,d0.w),a1
0001CCB8 323C 000B                  		move.w	#$B,d1
0001CCBC 6100 0000                  		bsr.w	LoadTiles
0001CCC0                            
0001CCC0                            locret_1C10C:
0001CCC0 4E75                       		rts	
0001CCC2                            ; ===========================================================================
0001CCC2 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CCC6                            ; ===========================================================================
0001CCC6                            ; ---------------------------------------------------------------------------
0001CCC6                            ; Animated pattern routine - Marble
0001CCC6                            ; ---------------------------------------------------------------------------
0001CCC6                            
0001CCC6                            AniArt_MZ:				; XREF: AniArt_Index
0001CCC6 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CCCA 6A00                       		bpl.s	loc_1C150
0001CCCC 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CCD2 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CCD8 7000                       		moveq	#0,d0
0001CCDA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CCDE 5200                       		addq.b	#1,d0
0001CCE0 0C00 0003                  		cmpi.b	#3,d0
0001CCE4 6600                       		bne.s	loc_1C134
0001CCE6 7000                       		moveq	#0,d0
0001CCE8                            
0001CCE8                            loc_1C134:
0001CCE8 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CCEC C0FC 0100                  		mulu.w	#$100,d0
0001CCF0 D2C0                       		adda.w	d0,a1
0001CCF2 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CCFC 323C 0007                  		move.w	#7,d1
0001CD00 6100 0000                  		bsr.w	LoadTiles
0001CD04                            
0001CD04                            loc_1C150:
0001CD04 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD08 6A00                       		bpl.s	loc_1C1AE
0001CD0A 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CD10 7000                       		moveq	#0,d0
0001CD12 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CD16 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CD1C EE58                       		ror.w	#7,d0
0001CD1E D8C0                       		adda.w	d0,a4
0001CD20 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CD2A 7600                       		moveq	#0,d3
0001CD2C 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CD30 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CD34 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CD38 343C 0003                  		move.w	#3,d2
0001CD3C                            
0001CD3C                            loc_1C188:
0001CD3C 3003                       		move.w	d3,d0
0001CD3E D040                       		add.w	d0,d0
0001CD40 0240 001E                  		andi.w	#$1E,d0
0001CD44 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CD4A 3033 0000                  		move.w	(a3,d0.w),d0
0001CD4E 47F3 0000                  		lea	(a3,d0.w),a3
0001CD52 224C                       		movea.l	a4,a1
0001CD54 323C 001F                  		move.w	#$1F,d1
0001CD58 4E93                       		jsr	(a3)
0001CD5A 5843                       		addq.w	#4,d3
0001CD5C 51CA FFDE                  		dbf	d2,loc_1C188
0001CD60 4E75                       		rts	
0001CD62                            ; ===========================================================================
0001CD62                            
0001CD62                            loc_1C1AE:
0001CD62 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CD66 6A00 0000                  		bpl.w	locret_1C1EA
0001CD6A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CD70 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CD76 7000                       		moveq	#0,d0
0001CD78 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CD7C 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CD80 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CD86 C0FC 00C0                  		mulu.w	#$C0,d0
0001CD8A D2C0                       		adda.w	d0,a1
0001CD8C 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CD96 323C 0005                  		move.w	#5,d1
0001CD9A 6000 0000                  		bra.w	LoadTiles
0001CD9E                            ; ===========================================================================
0001CD9E                            
0001CD9E                            locret_1C1EA:
0001CD9E 4E75                       		rts	
0001CDA0                            ; ===========================================================================
0001CDA0                            ; ---------------------------------------------------------------------------
0001CDA0                            ; Animated pattern routine - Scrap Brain
0001CDA0                            ; ---------------------------------------------------------------------------
0001CDA0                            
0001CDA0                            AniArt_SBZ:				; XREF: AniArt_Index
0001CDA0 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CDA4 6700                       		beq.s	loc_1C1F8
0001CDA6 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CDAA 6000                       		bra.s	loc_1C250
0001CDAC                            ; ===========================================================================
0001CDAC                            
0001CDAC                            loc_1C1F8:
0001CDAC 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CDB0 6A00                       		bpl.s	loc_1C250
0001CDB2 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CDB8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CDBE 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CDC8 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CDCC 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CDD0 0240 0007                  		andi.w	#7,d0
0001CDD4 6700                       		beq.s	loc_1C234
0001CDD6 5340                       		subq.w	#1,d0
0001CDD8 C0FC 0180                  		mulu.w	#$180,d0
0001CDDC 43F1 0000                  		lea	(a1,d0.w),a1
0001CDE0 323C 000B                  		move.w	#$B,d1
0001CDE4 6000 0000                  		bra.w	LoadTiles
0001CDE8                            ; ===========================================================================
0001CDE8                            
0001CDE8                            loc_1C234:
0001CDE8 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CDEE                            
0001CDEE                            loc_1C23A:
0001CDEE 323C 0005                  		move.w	#5,d1
0001CDF2 6100 0000                  		bsr.w	LoadTiles
0001CDF6 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CDFC 323C 0005                  		move.w	#5,d1
0001CE00 6000 0000                  		bra.w	LoadTiles
0001CE04                            ; ===========================================================================
0001CE04                            
0001CE04                            loc_1C250:
0001CE04 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CE08 6700                       		beq.s	loc_1C25C
0001CE0A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CE0E 6000                       		bra.s	locret_1C2A0
0001CE10                            ; ===========================================================================
0001CE10                            
0001CE10                            loc_1C25C:
0001CE10 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CE14 6A00                       		bpl.s	locret_1C2A0
0001CE16 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CE1C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CE22 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CE2C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CE30 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CE34 0240 0007                  		andi.w	#7,d0
0001CE38 6700                       		beq.s	loc_1C298
0001CE3A 5340                       		subq.w	#1,d0
0001CE3C C0FC 0180                  		mulu.w	#$180,d0
0001CE40 43F1 0000                  		lea	(a1,d0.w),a1
0001CE44 323C 000B                  		move.w	#$B,d1
0001CE48 6000 0000                  		bra.w	LoadTiles
0001CE4C                            ; ===========================================================================
0001CE4C                            
0001CE4C                            loc_1C298:
0001CE4C 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CE52 609A                       		bra.s	loc_1C23A
0001CE54                            ; ===========================================================================
0001CE54                            
0001CE54                            locret_1C2A0:
0001CE54 4E75                       		rts	
0001CE56                            ; ===========================================================================
0001CE56                            ; ---------------------------------------------------------------------------
0001CE56                            ; Animated pattern routine - ending sequence
0001CE56                            ; ---------------------------------------------------------------------------
0001CE56                            
0001CE56                            AniArt_Ending:				; XREF: AniArt_Index
0001CE56 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CE5A 6A00                       		bpl.s	loc_1C2F4
0001CE5C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CE62 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CE68 45F8 9400                  		lea	($FFFF9400).w,a2
0001CE6C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CE70 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CE74 0240 0001                  		andi.w	#1,d0
0001CE78 6700                       		beq.s	loc_1C2CE
0001CE7A 43E9 0200                  		lea	$200(a1),a1
0001CE7E 45EA 0200                  		lea	$200(a2),a2
0001CE82                            
0001CE82                            loc_1C2CE:
0001CE82 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CE8C 323C 000F                  		move.w	#$F,d1
0001CE90 6100 0000                  		bsr.w	LoadTiles
0001CE94 224A                       		movea.l	a2,a1
0001CE96 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CEA0 323C 000F                  		move.w	#$F,d1
0001CEA4 6000 0000                  		bra.w	LoadTiles
0001CEA8                            ; ===========================================================================
0001CEA8                            
0001CEA8                            loc_1C2F4:
0001CEA8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CEAC 6A00                       		bpl.s	loc_1C33C
0001CEAE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CEB4 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CEB8 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CEBC 0240 0007                  		andi.w	#7,d0
0001CEC0 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CEC4 EF48                       		lsl.w	#7,d0
0001CEC6 3200                       		move.w	d0,d1
0001CEC8 D040                       		add.w	d0,d0
0001CECA D041                       		add.w	d1,d0
0001CECC 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CED6 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CEDC 43F1 0000                  		lea	(a1,d0.w),a1
0001CEE0 323C 000B                  		move.w	#$B,d1
0001CEE4 6000 0000                  		bra.w	LoadTiles
0001CEE8                            ; ===========================================================================
0001CEE8 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CEF0                            ; ===========================================================================
0001CEF0                            
0001CEF0                            loc_1C33C:
0001CEF0 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CEF4 6A00                       		bpl.s	loc_1C37A
0001CEF6 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CEFC 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CF00 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CF04 0240 0003                  		andi.w	#3,d0
0001CF08 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CF0C E148                       		lsl.w	#8,d0
0001CF0E D040                       		add.w	d0,d0
0001CF10 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CF1A 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CF1E 43F1 0000                  		lea	(a1,d0.w),a1
0001CF22 323C 000F                  		move.w	#$F,d1
0001CF26 6000 0000                  		bra.w	LoadTiles
0001CF2A                            ; ===========================================================================
0001CF2A 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CF2E                            ; ===========================================================================
0001CF2E                            
0001CF2E                            loc_1C37A:
0001CF2E 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CF32 6A00                       		bpl.s	locret_1C3B4
0001CF34 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CF3A 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CF3E 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CF42 0240 0003                  		andi.w	#3,d0
0001CF46 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CF4A E148                       		lsl.w	#8,d0
0001CF4C D040                       		add.w	d0,d0
0001CF4E 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CF58 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CF5C 43F1 0000                  		lea	(a1,d0.w),a1
0001CF60 323C 000F                  		move.w	#$F,d1
0001CF64 6000 0000                  		bra.w	LoadTiles
0001CF68                            ; ===========================================================================
0001CF68                            
0001CF68                            locret_1C3B4:
0001CF68 4E75                       		rts	
0001CF6A                            ; ===========================================================================
0001CF6A                            
0001CF6A                            AniArt_none:				; XREF: AniArt_Index
0001CF6A 4E75                       		rts	
0001CF6C                            
0001CF6C                            ; ---------------------------------------------------------------------------
0001CF6C                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CF6C                            ; ---------------------------------------------------------------------------
0001CF6C                            
0001CF6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF6C                            
0001CF6C                            
0001CF6C                            LoadTiles:
0001CF6C 2C99                       		move.l	(a1)+,(a6)
0001CF6E 2C99                       		move.l	(a1)+,(a6)
0001CF70 2C99                       		move.l	(a1)+,(a6)
0001CF72 2C99                       		move.l	(a1)+,(a6)
0001CF74 2C99                       		move.l	(a1)+,(a6)
0001CF76 2C99                       		move.l	(a1)+,(a6)
0001CF78 2C99                       		move.l	(a1)+,(a6)
0001CF7A 2C99                       		move.l	(a1)+,(a6)
0001CF7C 51C9 FFEE                  		dbf	d1,LoadTiles
0001CF80 4E75                       		rts	
0001CF82                            ; End of function LoadTiles
0001CF82                            
0001CF82                            ; ===========================================================================
0001CF82                            ; ---------------------------------------------------------------------------
0001CF82                            ; Animated pattern routine - more Marble Zone
0001CF82                            ; ---------------------------------------------------------------------------
0001CF82 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CF86 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CF8A 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CF8E 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CF92 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CF96 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CF9A 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CF9E 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CFA2                            ; ===========================================================================
0001CFA2                            
0001CFA2                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CFA2 2C91                       		move.l	(a1),(a6)
0001CFA4 43E9 0010                  		lea	$10(a1),a1
0001CFA8 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CFAC 4E75                       		rts	
0001CFAE                            ; ===========================================================================
0001CFAE                            
0001CFAE                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CFAE 2029 0002                  		move.l	2(a1),d0
0001CFB2 1029 0001                  		move.b	1(a1),d0
0001CFB6 E098                       		ror.l	#8,d0
0001CFB8 2C80                       		move.l	d0,(a6)
0001CFBA 43E9 0010                  		lea	$10(a1),a1
0001CFBE 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CFC2 4E75                       		rts	
0001CFC4                            ; ===========================================================================
0001CFC4                            
0001CFC4                            loc_1C410:				; XREF: AniArt_MZextra
0001CFC4 2CA9 0002                  		move.l	2(a1),(a6)
0001CFC8 43E9 0010                  		lea	$10(a1),a1
0001CFCC 51C9 FFF6                  		dbf	d1,loc_1C410
0001CFD0 4E75                       		rts	
0001CFD2                            ; ===========================================================================
0001CFD2                            
0001CFD2                            loc_1C41E:				; XREF: AniArt_MZextra
0001CFD2 2029 0004                  		move.l	4(a1),d0
0001CFD6 1029 0003                  		move.b	3(a1),d0
0001CFDA E098                       		ror.l	#8,d0
0001CFDC 2C80                       		move.l	d0,(a6)
0001CFDE 43E9 0010                  		lea	$10(a1),a1
0001CFE2 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CFE6 4E75                       		rts	
0001CFE8                            ; ===========================================================================
0001CFE8                            
0001CFE8                            loc_1C434:				; XREF: AniArt_MZextra
0001CFE8 2CA9 0004                  		move.l	4(a1),(a6)
0001CFEC 43E9 0010                  		lea	$10(a1),a1
0001CFF0 51C9 FFF6                  		dbf	d1,loc_1C434
0001CFF4 4E75                       		rts	
0001CFF6                            ; ===========================================================================
0001CFF6                            
0001CFF6                            loc_1C442:				; XREF: AniArt_MZextra
0001CFF6 2029 0006                  		move.l	6(a1),d0
0001CFFA 1029 0005                  		move.b	5(a1),d0
0001CFFE E098                       		ror.l	#8,d0
0001D000 2C80                       		move.l	d0,(a6)
0001D002 43E9 0010                  		lea	$10(a1),a1
0001D006 51C9 FFEE                  		dbf	d1,loc_1C442
0001D00A 4E75                       		rts	
0001D00C                            ; ===========================================================================
0001D00C                            
0001D00C                            loc_1C458:				; XREF: AniArt_MZextra
0001D00C 2CA9 0006                  		move.l	6(a1),(a6)
0001D010 43E9 0010                  		lea	$10(a1),a1
0001D014 51C9 FFF6                  		dbf	d1,loc_1C458
0001D018 4E75                       		rts	
0001D01A                            ; ===========================================================================
0001D01A                            
0001D01A                            loc_1C466:				; XREF: AniArt_MZextra
0001D01A 2029 0008                  		move.l	8(a1),d0
0001D01E 1029 0007                  		move.b	7(a1),d0
0001D022 E098                       		ror.l	#8,d0
0001D024 2C80                       		move.l	d0,(a6)
0001D026 43E9 0010                  		lea	$10(a1),a1
0001D02A 51C9 FFEE                  		dbf	d1,loc_1C466
0001D02E 4E75                       		rts	
0001D030                            ; ===========================================================================
0001D030                            
0001D030                            loc_1C47C:				; XREF: AniArt_MZextra
0001D030 2CA9 0008                  		move.l	8(a1),(a6)
0001D034 43E9 0010                  		lea	$10(a1),a1
0001D038 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D03C 4E75                       		rts	
0001D03E                            ; ===========================================================================
0001D03E                            
0001D03E                            loc_1C48A:				; XREF: AniArt_MZextra
0001D03E 2029 000A                  		move.l	$A(a1),d0
0001D042 1029 0009                  		move.b	9(a1),d0
0001D046 E098                       		ror.l	#8,d0
0001D048 2C80                       		move.l	d0,(a6)
0001D04A 43E9 0010                  		lea	$10(a1),a1
0001D04E 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D052 4E75                       		rts	
0001D054                            ; ===========================================================================
0001D054                            
0001D054                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D054 2CA9 000A                  		move.l	$A(a1),(a6)
0001D058 43E9 0010                  		lea	$10(a1),a1
0001D05C 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D060 4E75                       		rts	
0001D062                            ; ===========================================================================
0001D062                            
0001D062                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D062 2029 000C                  		move.l	$C(a1),d0
0001D066 1029 000B                  		move.b	$B(a1),d0
0001D06A E098                       		ror.l	#8,d0
0001D06C 2C80                       		move.l	d0,(a6)
0001D06E 43E9 0010                  		lea	$10(a1),a1
0001D072 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D076 4E75                       		rts	
0001D078                            ; ===========================================================================
0001D078                            
0001D078                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D078 2CA9 000C                  		move.l	$C(a1),(a6)
0001D07C 43E9 0010                  		lea	$10(a1),a1
0001D080 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D084 4E75                       		rts	
0001D086                            ; ===========================================================================
0001D086                            
0001D086                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D086 2029 000C                  		move.l	$C(a1),d0
0001D08A E198                       		rol.l	#8,d0
0001D08C 1011                       		move.b	0(a1),d0
0001D08E 2C80                       		move.l	d0,(a6)
0001D090 43E9 0010                  		lea	$10(a1),a1
0001D094 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D098 4E75                       		rts	
0001D09A                            ; ===========================================================================
0001D09A                            
0001D09A                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D09A 3CA9 000E                  		move.w	$E(a1),(a6)
0001D09E 3C91                       		move.w	0(a1),(a6)
0001D0A0 43E9 0010                  		lea	$10(a1),a1
0001D0A4 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D0A8 4E75                       		rts	
0001D0AA                            ; ===========================================================================
0001D0AA                            
0001D0AA                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D0AA 2011                       		move.l	0(a1),d0
0001D0AC 1029 000F                  		move.b	$F(a1),d0
0001D0B0 E098                       		ror.l	#8,d0
0001D0B2 2C80                       		move.l	d0,(a6)
0001D0B4 43E9 0010                  		lea	$10(a1),a1
0001D0B8 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D0BC 4E75                       		rts	
0001D0BE                            
0001D0BE                            ; ---------------------------------------------------------------------------
0001D0BE                            ; Animated pattern routine - giant ring
0001D0BE                            ; ---------------------------------------------------------------------------
0001D0BE                            
0001D0BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0BE                            
0001D0BE                            
0001D0BE                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D0BE 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D0C2 6600                       		bne.s	loc_1C518
0001D0C4 4E75                       		rts	
0001D0C6                            ; ===========================================================================
0001D0C6                            
0001D0C6                            loc_1C518:
0001D0C6 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D0CC 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D0D2 7000                       		moveq	#0,d0
0001D0D4 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D0D8 43F1 0000                  		lea	(a1,d0.w),a1
0001D0DC 0640 8000                  		addi.w	#$8000,d0
0001D0E0 E588                       		lsl.l	#2,d0
0001D0E2 E448                       		lsr.w	#2,d0
0001D0E4 0040 4000                  		ori.w	#$4000,d0
0001D0E8 4840                       		swap	d0
0001D0EA 2D40 0004                  		move.l	d0,4(a6)
0001D0EE 323C 000D                  		move.w	#$D,d1
0001D0F2 6000 FE78                  		bra.w	LoadTiles
0001D0F6                            ; End of function AniArt_GiantRing
0001D0F6                            
0001D0F6                            ; ===========================================================================
0001D0F6                            ; ---------------------------------------------------------------------------
0001D0F6                            ; Object 21 - SCORE, TIME, RINGS
0001D0F6                            ; ---------------------------------------------------------------------------
0001D0F6                            
0001D0F6                            Obj21:					; XREF: Obj_Index
0001D0F6 7000                       		moveq	#0,d0
0001D0F8 1028 0024                  		move.b	$24(a0),d0
0001D0FC 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D100 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D104                            ; ===========================================================================
0001D104 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D106 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D108                            ; ===========================================================================
0001D108                            
0001D108                            Obj21_Main:				; XREF: Obj21_Main
0001D108 5428 0024                  		addq.b	#2,$24(a0)
0001D10C 317C 0090 0008             		move.w	#$90,8(a0)
0001D112 317C 0108 000A             		move.w	#$108,$A(a0)
0001D118 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D120 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D126 117C 0000 0001             		move.b	#0,1(a0)
0001D12C 117C 0000 0018             		move.b	#0,$18(a0)
0001D132                            
0001D132                            Obj21_Flash:				; XREF: Obj21_Main
0001D132 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D136 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D138 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D13C 4EF9 0000 DFF6             		jmp	DisplaySprite
0001D142                            ; ===========================================================================
0001D142                            
0001D142                            Obj21_Flash2:
0001D142 7000                       		moveq	#0,d0
0001D144 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D14A 6600                       		bne.s	Obj21_Display
0001D14C 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D14E 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D154 6600                       		bne.s	Obj21_Display	; if not, branch
0001D156 5440                       		addq.w	#2,d0		; make time counter flash red
0001D158                            
0001D158                            Obj21_Display:
0001D158 1140 001A                  		move.b	d0,$1A(a0)
0001D15C 4EF9 0000 DFF6             		jmp	DisplaySprite
0001D162                            ; ===========================================================================
0001D162                            ; ---------------------------------------------------------------------------
0001D162                            ; Sprite mappings - SCORE, TIME, RINGS
0001D162                            ; ---------------------------------------------------------------------------
0001D162                            Map_obj21:
0001D162                            	include "_maps\obj21.asm"
0001D162                            ; ---------------------------------------------------------------------------
0001D162                            ; Sprite mappings - SCORE, TIME, RINGS
0001D162                            ; ---------------------------------------------------------------------------
0001D162 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001D166 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001D16A 0A                         byte_1C5BC:	dc.b $A
0001D16B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D170 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D175 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D17A 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D17F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D184 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D189 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D18E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D193 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D198 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D19D 00                         		dc.b 0
0001D19E 0A                         byte_1C5F0:	dc.b $A
0001D19F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D1A4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D1A9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D1AE 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D1B3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D1B8 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D1BD A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D1C2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D1C7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D1CC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D1D1 00                         		dc.b 0
0001D1D2 0A                         byte_1C624:	dc.b $A
0001D1D3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D1D8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D1DD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D1E2 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D1E7 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D1EC A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D1F1 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D1F6 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D1FB 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D200 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D205 00                         		dc.b 0
0001D206 0A                         byte_1C658:	dc.b $A
0001D207 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D20C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D211 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D216 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D21B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D220 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D225 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D22A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D22F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D234 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D23A 00                         		even
0001D23A 00                         		even
0001D23A                            
0001D23A                            ; ---------------------------------------------------------------------------
0001D23A                            ; Add points subroutine
0001D23A                            ; ---------------------------------------------------------------------------
0001D23A                            
0001D23A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D23A                            
0001D23A                            
0001D23A                            AddPoints:
0001D23A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D240 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D244 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D248 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D24A 223C 000F 423F             		move.l	#999999,d1
0001D250 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D252 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D256 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D258 2481                       		move.l	d1,(a2)
0001D25A                            
0001D25A                            loc_1C6AC:
0001D25A 2013                       		move.l	(a3),d0
0001D25C B092                       		cmp.l	(a2),d0
0001D25E 6500 0000                  		bcs.w	locret_1C6B6
0001D262 2480                       		move.l	d0,(a2)
0001D264                            
0001D264                            locret_1C6B6:
0001D264 4E75                       		rts	
0001D266                            ; End of function AddPoints
0001D266                            
0001D266                            ; ---------------------------------------------------------------------------
0001D266                            ; Subroutine to	update the HUD
0001D266                            ; ---------------------------------------------------------------------------
0001D266                            
0001D266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D266                            
0001D266                            
0001D266                            HudUpdate:
0001D266 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D26A 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D26E 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D272 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D274 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D278 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D27E 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D282 6100 0000                  		bsr.w	Hud_Score
0001D286                            
0001D286                            Hud_ChkRings:
0001D286 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D28A 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D28C 6A00                       		bpl.s	loc_1C6E4
0001D28E 6100 0000                  		bsr.w	Hud_LoadZero
0001D292                            
0001D292                            loc_1C6E4:
0001D292 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D296 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D29C 7200                       		moveq	#0,d1
0001D29E 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D2A2 6100 0000                  		bsr.w	Hud_Rings
0001D2A6                            
0001D2A6                            Hud_ChkTime:
0001D2A6 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D2AA 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D2AC 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D2B0 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D2B2 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D2B6 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D2BC 6700                       		beq.s	TimeOver	; if yes, branch
0001D2BE 5221                       		addq.b	#1,-(a1)
0001D2C0 0C11 003C                  		cmpi.b	#60,(a1)
0001D2C4 6500                       		bcs.s	Hud_ChkLives
0001D2C6 12BC 0000                  		move.b	#0,(a1)
0001D2CA 5221                       		addq.b	#1,-(a1)
0001D2CC 0C11 003C                  		cmpi.b	#60,(a1)
0001D2D0 6500                       		bcs.s	loc_1C734
0001D2D2 12BC 0000                  		move.b	#0,(a1)
0001D2D6 5221                       		addq.b	#1,-(a1)
0001D2D8 0C11 0009                  		cmpi.b	#9,(a1)
0001D2DC 6500                       		bcs.s	loc_1C734
0001D2DE 12BC 0009                  		move.b	#9,(a1)
0001D2E2                            
0001D2E2                            loc_1C734:
0001D2E2 203C 5E40 0003             		move.l	#$5E400003,d0
0001D2E8 7200                       		moveq	#0,d1
0001D2EA 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D2EE 6100 0000                  		bsr.w	Hud_Mins
0001D2F2 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D2F8 7200                       		moveq	#0,d1
0001D2FA 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D2FE 6100 0000                  		bsr.w	Hud_Secs
0001D302                            
0001D302                            Hud_ChkLives:
0001D302 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D306 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D308 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D30C 6100 0000                  		bsr.w	Hud_Lives
0001D310                            
0001D310                            Hud_ChkBonus:
0001D310 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D314 6700                       		beq.s	Hud_End		; if not, branch
0001D316 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D31A 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D324 7200                       		moveq	#0,d1
0001D326 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D32A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D32E 7200                       		moveq	#0,d1
0001D330 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D334 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D338                            
0001D338                            Hud_End:
0001D338 4E75                       		rts	
0001D33A                            ; ===========================================================================
0001D33A                            
0001D33A                            TimeOver:				; XREF: Hud_ChkTime
0001D33A 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D33E 41F8 D000                  		lea	($FFFFD000).w,a0
0001D342 2448                       		movea.l	a0,a2
0001D344 6100 E950                  		bsr.w	KillSonic
0001D348 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D34E 4E75                       		rts	
0001D350                            ; ===========================================================================
0001D350                            
0001D350                            HudDebug:				; XREF: HudUpdate
0001D350 6100 0000                  		bsr.w	HudDb_XY
0001D354 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D358 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D35A 6A00                       		bpl.s	HudDb_Rings
0001D35C 6100 0000                  		bsr.w	Hud_LoadZero
0001D360                            
0001D360                            HudDb_Rings:
0001D360 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D364 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D36A 7200                       		moveq	#0,d1
0001D36C 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D370 6100 0000                  		bsr.w	Hud_Rings
0001D374                            
0001D374                            HudDb_ObjCount:
0001D374 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D37A 7200                       		moveq	#0,d1
0001D37C 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D380 6100 0000                  		bsr.w	Hud_Secs
0001D384 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D388 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D38A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D38E 6100 0000                  		bsr.w	Hud_Lives
0001D392                            
0001D392                            HudDb_ChkBonus:
0001D392 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D396 6700                       		beq.s	HudDb_End	; if not, branch
0001D398 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D39C 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D3A6 7200                       		moveq	#0,d1
0001D3A8 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D3AC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3B0 7200                       		moveq	#0,d1
0001D3B2 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D3B6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3BA                            
0001D3BA                            HudDb_End:
0001D3BA 4E75                       		rts	
0001D3BC                            ; End of function HudUpdate
0001D3BC                            
0001D3BC                            ; ---------------------------------------------------------------------------
0001D3BC                            ; Subroutine to	load "0" on the	HUD
0001D3BC                            ; ---------------------------------------------------------------------------
0001D3BC                            
0001D3BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3BC                            
0001D3BC                            
0001D3BC                            Hud_LoadZero:				; XREF: HudUpdate
0001D3BC 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D3C6 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D3CA 343C 0002                  		move.w	#2,d2
0001D3CE 6000                       		bra.s	loc_1C83E
0001D3D0                            ; End of function Hud_LoadZero
0001D3D0                            
0001D3D0                            ; ---------------------------------------------------------------------------
0001D3D0                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D3D0                            ; ---------------------------------------------------------------------------
0001D3D0                            
0001D3D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3D0                            
0001D3D0                            
0001D3D0                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D3D0 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D3D6 6100 0000                  		bsr.w	Hud_Lives
0001D3DA 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D3E4 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D3E8 343C 000E                  		move.w	#$E,d2
0001D3EC                            
0001D3EC                            loc_1C83E:				; XREF: Hud_LoadZero
0001D3EC 43FA 0000                  		lea	Art_Hud(pc),a1
0001D3F0                            
0001D3F0                            loc_1C842:
0001D3F0 323C 000F                  		move.w	#$F,d1
0001D3F4 101A                       		move.b	(a2)+,d0
0001D3F6 6B00                       		bmi.s	loc_1C85E
0001D3F8 4880                       		ext.w	d0
0001D3FA EB48                       		lsl.w	#5,d0
0001D3FC 47F1 0000                  		lea	(a1,d0.w),a3
0001D400                            
0001D400                            loc_1C852:
0001D400 2C9B                       		move.l	(a3)+,(a6)
0001D402 51C9 FFFC                  		dbf	d1,loc_1C852
0001D406                            
0001D406                            loc_1C858:
0001D406 51CA FFE8                  		dbf	d2,loc_1C842
0001D40A                            
0001D40A 4E75                       		rts	
0001D40C                            ; ===========================================================================
0001D40C                            
0001D40C                            loc_1C85E:
0001D40C 2CBC 0000 0000             		move.l	#0,(a6)
0001D412 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D416                            
0001D416 60EE                       		bra.s	loc_1C858
0001D418                            ; End of function Hud_Base
0001D418                            
0001D418                            ; ===========================================================================
0001D418 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D424 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D428                            ; ---------------------------------------------------------------------------
0001D428                            ; Subroutine to	load debug mode	numbers	patterns
0001D428                            ; ---------------------------------------------------------------------------
0001D428                            
0001D428                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D428                            
0001D428                            
0001D428                            HudDb_XY:				; XREF: HudDebug
0001D428 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D432 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D436 4841                       		swap	d1
0001D438 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D43C 6100                       		bsr.s	HudDb_XY2
0001D43E 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D442 4841                       		swap	d1
0001D444 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D448                            ; End of function HudDb_XY
0001D448                            
0001D448                            
0001D448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D448                            
0001D448                            
0001D448                            HudDb_XY2:
0001D448 7C07                       		moveq	#7,d6
0001D44A 43F9 0000 05E2             		lea	(Art_Text).l,a1
0001D450                            
0001D450                            HudDb_XYLoop:
0001D450 E959                       		rol.w	#4,d1
0001D452 3401                       		move.w	d1,d2
0001D454 0242 000F                  		andi.w	#$F,d2
0001D458 0C42 000A                  		cmpi.w	#$A,d2
0001D45C 6500                       		bcs.s	loc_1C8B2
0001D45E 5E42                       		addq.w	#7,d2
0001D460                            
0001D460                            loc_1C8B2:
0001D460 EB4A                       		lsl.w	#5,d2
0001D462 47F1 2000                  		lea	(a1,d2.w),a3
0001D466 2C9B                       		move.l	(a3)+,(a6)
0001D468 2C9B                       		move.l	(a3)+,(a6)
0001D46A 2C9B                       		move.l	(a3)+,(a6)
0001D46C 2C9B                       		move.l	(a3)+,(a6)
0001D46E 2C9B                       		move.l	(a3)+,(a6)
0001D470 2C9B                       		move.l	(a3)+,(a6)
0001D472 2C9B                       		move.l	(a3)+,(a6)
0001D474 2C9B                       		move.l	(a3)+,(a6)
0001D476 4841                       		swap	d1
0001D478 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D47C                            
0001D47C 4E75                       		rts	
0001D47E                            ; End of function HudDb_XY2
0001D47E                            
0001D47E                            ; ---------------------------------------------------------------------------
0001D47E                            ; Subroutine to	load rings numbers patterns
0001D47E                            ; ---------------------------------------------------------------------------
0001D47E                            
0001D47E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D47E                            
0001D47E                            
0001D47E                            Hud_Rings:				; XREF: HudUpdate
0001D47E 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D484 7C02                       		moveq	#2,d6
0001D486 6000                       		bra.s	Hud_LoadArt
0001D488                            ; End of function Hud_Rings
0001D488                            
0001D488                            ; ---------------------------------------------------------------------------
0001D488                            ; Subroutine to	load score numbers patterns
0001D488                            ; ---------------------------------------------------------------------------
0001D488                            
0001D488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D488                            
0001D488                            
0001D488                            Hud_Score:				; XREF: HudUpdate
0001D488 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D48E 7C05                       		moveq	#5,d6
0001D490                            
0001D490                            Hud_LoadArt:
0001D490 7800                       		moveq	#0,d4
0001D492 43FA 0000                  		lea	Art_Hud(pc),a1
0001D496                            
0001D496                            Hud_ScoreLoop:
0001D496 7400                       		moveq	#0,d2
0001D498 261A                       		move.l	(a2)+,d3
0001D49A                            
0001D49A                            loc_1C8EC:
0001D49A 9283                       		sub.l	d3,d1
0001D49C 6500                       		bcs.s	loc_1C8F4
0001D49E 5242                       		addq.w	#1,d2
0001D4A0 60F8                       		bra.s	loc_1C8EC
0001D4A2                            ; ===========================================================================
0001D4A2                            
0001D4A2                            loc_1C8F4:
0001D4A2 D283                       		add.l	d3,d1
0001D4A4 4A42                       		tst.w	d2
0001D4A6 6700                       		beq.s	loc_1C8FE
0001D4A8 383C 0001                  		move.w	#1,d4
0001D4AC                            
0001D4AC                            loc_1C8FE:
0001D4AC 4A44                       		tst.w	d4
0001D4AE 6700                       		beq.s	loc_1C92C
0001D4B0 ED4A                       		lsl.w	#6,d2
0001D4B2 2D40 0004                  		move.l	d0,4(a6)
0001D4B6 47F1 2000                  		lea	(a1,d2.w),a3
0001D4BA 2C9B                       		move.l	(a3)+,(a6)
0001D4BC 2C9B                       		move.l	(a3)+,(a6)
0001D4BE 2C9B                       		move.l	(a3)+,(a6)
0001D4C0 2C9B                       		move.l	(a3)+,(a6)
0001D4C2 2C9B                       		move.l	(a3)+,(a6)
0001D4C4 2C9B                       		move.l	(a3)+,(a6)
0001D4C6 2C9B                       		move.l	(a3)+,(a6)
0001D4C8 2C9B                       		move.l	(a3)+,(a6)
0001D4CA 2C9B                       		move.l	(a3)+,(a6)
0001D4CC 2C9B                       		move.l	(a3)+,(a6)
0001D4CE 2C9B                       		move.l	(a3)+,(a6)
0001D4D0 2C9B                       		move.l	(a3)+,(a6)
0001D4D2 2C9B                       		move.l	(a3)+,(a6)
0001D4D4 2C9B                       		move.l	(a3)+,(a6)
0001D4D6 2C9B                       		move.l	(a3)+,(a6)
0001D4D8 2C9B                       		move.l	(a3)+,(a6)
0001D4DA                            
0001D4DA                            loc_1C92C:
0001D4DA 0680 0040 0000             		addi.l	#$400000,d0
0001D4E0 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D4E4                            
0001D4E4 4E75                       		rts	
0001D4E6                            ; End of function Hud_Score
0001D4E6                            
0001D4E6                            ; ---------------------------------------------------------------------------
0001D4E6                            ; Subroutine to	load countdown numbers on the continue screen
0001D4E6                            ; ---------------------------------------------------------------------------
0001D4E6                            
0001D4E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4E6                            
0001D4E6                            
0001D4E6                            ContScrCounter:				; XREF: ContinueScreen
0001D4E6 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D4F0 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D4F6 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D4FC 7C01                       		moveq	#1,d6
0001D4FE 7800                       		moveq	#0,d4
0001D500 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D504                            
0001D504                            ContScr_Loop:
0001D504 7400                       		moveq	#0,d2
0001D506 261A                       		move.l	(a2)+,d3
0001D508                            
0001D508                            loc_1C95A:
0001D508 9283                       		sub.l	d3,d1
0001D50A 6500                       		bcs.s	loc_1C962
0001D50C 5242                       		addq.w	#1,d2
0001D50E 60F8                       		bra.s	loc_1C95A
0001D510                            ; ===========================================================================
0001D510                            
0001D510                            loc_1C962:
0001D510 D283                       		add.l	d3,d1
0001D512 ED4A                       		lsl.w	#6,d2
0001D514 47F1 2000                  		lea	(a1,d2.w),a3
0001D518 2C9B                       		move.l	(a3)+,(a6)
0001D51A 2C9B                       		move.l	(a3)+,(a6)
0001D51C 2C9B                       		move.l	(a3)+,(a6)
0001D51E 2C9B                       		move.l	(a3)+,(a6)
0001D520 2C9B                       		move.l	(a3)+,(a6)
0001D522 2C9B                       		move.l	(a3)+,(a6)
0001D524 2C9B                       		move.l	(a3)+,(a6)
0001D526 2C9B                       		move.l	(a3)+,(a6)
0001D528 2C9B                       		move.l	(a3)+,(a6)
0001D52A 2C9B                       		move.l	(a3)+,(a6)
0001D52C 2C9B                       		move.l	(a3)+,(a6)
0001D52E 2C9B                       		move.l	(a3)+,(a6)
0001D530 2C9B                       		move.l	(a3)+,(a6)
0001D532 2C9B                       		move.l	(a3)+,(a6)
0001D534 2C9B                       		move.l	(a3)+,(a6)
0001D536 2C9B                       		move.l	(a3)+,(a6)
0001D538 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D53C                            
0001D53C 4E75                       		rts	
0001D53E                            ; End of function ContScrCounter
0001D53E                            
0001D53E                            ; ===========================================================================
0001D53E                            ; ---------------------------------------------------------------------------
0001D53E                            ; HUD counter sizes
0001D53E                            ; ---------------------------------------------------------------------------
0001D53E 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D542 0000 2710                  Hud_10000:	dc.l 10000
0001D546 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D54A 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D54E 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D552 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D556                            
0001D556                            ; ---------------------------------------------------------------------------
0001D556                            ; Subroutine to	load time numbers patterns
0001D556                            ; ---------------------------------------------------------------------------
0001D556                            
0001D556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D556                            
0001D556                            
0001D556                            Hud_Mins:				; XREF: Hud_ChkTime
0001D556 45F9 0001 D552             		lea	(Hud_1).l,a2
0001D55C 7C00                       		moveq	#0,d6
0001D55E 6000                       		bra.s	loc_1C9BA
0001D560                            ; End of function Hud_Mins
0001D560                            
0001D560                            
0001D560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D560                            
0001D560                            
0001D560                            Hud_Secs:				; XREF: Hud_ChkTime
0001D560 45F9 0001 D54E             		lea	(Hud_10).l,a2
0001D566 7C01                       		moveq	#1,d6
0001D568                            
0001D568                            loc_1C9BA:
0001D568 7800                       		moveq	#0,d4
0001D56A 43FA 0000                  		lea	Art_Hud(pc),a1
0001D56E                            
0001D56E                            Hud_TimeLoop:
0001D56E 7400                       		moveq	#0,d2
0001D570 261A                       		move.l	(a2)+,d3
0001D572                            
0001D572                            loc_1C9C4:
0001D572 9283                       		sub.l	d3,d1
0001D574 6500                       		bcs.s	loc_1C9CC
0001D576 5242                       		addq.w	#1,d2
0001D578 60F8                       		bra.s	loc_1C9C4
0001D57A                            ; ===========================================================================
0001D57A                            
0001D57A                            loc_1C9CC:
0001D57A D283                       		add.l	d3,d1
0001D57C 4A42                       		tst.w	d2
0001D57E 6700                       		beq.s	loc_1C9D6
0001D580 383C 0001                  		move.w	#1,d4
0001D584                            
0001D584                            loc_1C9D6:
0001D584 ED4A                       		lsl.w	#6,d2
0001D586 2D40 0004                  		move.l	d0,4(a6)
0001D58A 47F1 2000                  		lea	(a1,d2.w),a3
0001D58E 2C9B                       		move.l	(a3)+,(a6)
0001D590 2C9B                       		move.l	(a3)+,(a6)
0001D592 2C9B                       		move.l	(a3)+,(a6)
0001D594 2C9B                       		move.l	(a3)+,(a6)
0001D596 2C9B                       		move.l	(a3)+,(a6)
0001D598 2C9B                       		move.l	(a3)+,(a6)
0001D59A 2C9B                       		move.l	(a3)+,(a6)
0001D59C 2C9B                       		move.l	(a3)+,(a6)
0001D59E 2C9B                       		move.l	(a3)+,(a6)
0001D5A0 2C9B                       		move.l	(a3)+,(a6)
0001D5A2 2C9B                       		move.l	(a3)+,(a6)
0001D5A4 2C9B                       		move.l	(a3)+,(a6)
0001D5A6 2C9B                       		move.l	(a3)+,(a6)
0001D5A8 2C9B                       		move.l	(a3)+,(a6)
0001D5AA 2C9B                       		move.l	(a3)+,(a6)
0001D5AC 2C9B                       		move.l	(a3)+,(a6)
0001D5AE 0680 0040 0000             		addi.l	#$400000,d0
0001D5B4 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D5B8                            
0001D5B8 4E75                       		rts	
0001D5BA                            ; End of function Hud_Secs
0001D5BA                            
0001D5BA                            ; ---------------------------------------------------------------------------
0001D5BA                            ; Subroutine to	load time/ring bonus numbers patterns
0001D5BA                            ; ---------------------------------------------------------------------------
0001D5BA                            
0001D5BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5BA                            
0001D5BA                            
0001D5BA                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D5BA 45F9 0001 D546             		lea	(Hud_1000).l,a2
0001D5C0 7C03                       		moveq	#3,d6
0001D5C2 7800                       		moveq	#0,d4
0001D5C4 43FA 0000                  		lea	Art_Hud(pc),a1
0001D5C8                            
0001D5C8                            Hud_BonusLoop:
0001D5C8 7400                       		moveq	#0,d2
0001D5CA 261A                       		move.l	(a2)+,d3
0001D5CC                            
0001D5CC                            loc_1CA1E:
0001D5CC 9283                       		sub.l	d3,d1
0001D5CE 6500                       		bcs.s	loc_1CA26
0001D5D0 5242                       		addq.w	#1,d2
0001D5D2 60F8                       		bra.s	loc_1CA1E
0001D5D4                            ; ===========================================================================
0001D5D4                            
0001D5D4                            loc_1CA26:
0001D5D4 D283                       		add.l	d3,d1
0001D5D6 4A42                       		tst.w	d2
0001D5D8 6700                       		beq.s	loc_1CA30
0001D5DA 383C 0001                  		move.w	#1,d4
0001D5DE                            
0001D5DE                            loc_1CA30:
0001D5DE 4A44                       		tst.w	d4
0001D5E0 6700                       		beq.s	Hud_ClrBonus
0001D5E2 ED4A                       		lsl.w	#6,d2
0001D5E4 47F1 2000                  		lea	(a1,d2.w),a3
0001D5E8 2C9B                       		move.l	(a3)+,(a6)
0001D5EA 2C9B                       		move.l	(a3)+,(a6)
0001D5EC 2C9B                       		move.l	(a3)+,(a6)
0001D5EE 2C9B                       		move.l	(a3)+,(a6)
0001D5F0 2C9B                       		move.l	(a3)+,(a6)
0001D5F2 2C9B                       		move.l	(a3)+,(a6)
0001D5F4 2C9B                       		move.l	(a3)+,(a6)
0001D5F6 2C9B                       		move.l	(a3)+,(a6)
0001D5F8 2C9B                       		move.l	(a3)+,(a6)
0001D5FA 2C9B                       		move.l	(a3)+,(a6)
0001D5FC 2C9B                       		move.l	(a3)+,(a6)
0001D5FE 2C9B                       		move.l	(a3)+,(a6)
0001D600 2C9B                       		move.l	(a3)+,(a6)
0001D602 2C9B                       		move.l	(a3)+,(a6)
0001D604 2C9B                       		move.l	(a3)+,(a6)
0001D606 2C9B                       		move.l	(a3)+,(a6)
0001D608                            
0001D608                            loc_1CA5A:
0001D608 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D60C                            
0001D60C 4E75                       		rts	
0001D60E                            ; ===========================================================================
0001D60E                            
0001D60E                            Hud_ClrBonus:
0001D60E 7A0F                       		moveq	#$F,d5
0001D610                            
0001D610                            Hud_ClrBonusLoop:
0001D610 2CBC 0000 0000             		move.l	#0,(a6)
0001D616 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D61A                            
0001D61A 60EC                       		bra.s	loc_1CA5A
0001D61C                            ; End of function Hud_TimeRingBonus
0001D61C                            
0001D61C                            ; ---------------------------------------------------------------------------
0001D61C                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D61C                            ; ---------------------------------------------------------------------------
0001D61C                            
0001D61C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D61C                            
0001D61C                            
0001D61C                            Hud_Lives:				; XREF: Hud_ChkLives
0001D61C 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D622 7200                       		moveq	#0,d1
0001D624 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D628 45F9 0001 D54E             		lea	(Hud_10).l,a2
0001D62E 7C01                       		moveq	#1,d6
0001D630 7800                       		moveq	#0,d4
0001D632 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D636                            
0001D636                            Hud_LivesLoop:
0001D636 2D40 0004                  		move.l	d0,4(a6)
0001D63A 7400                       		moveq	#0,d2
0001D63C 261A                       		move.l	(a2)+,d3
0001D63E                            
0001D63E                            loc_1CA90:
0001D63E 9283                       		sub.l	d3,d1
0001D640 6500                       		bcs.s	loc_1CA98
0001D642 5242                       		addq.w	#1,d2
0001D644 60F8                       		bra.s	loc_1CA90
0001D646                            ; ===========================================================================
0001D646                            
0001D646                            loc_1CA98:
0001D646 D283                       		add.l	d3,d1
0001D648 4A42                       		tst.w	d2
0001D64A 6700                       		beq.s	loc_1CAA2
0001D64C 383C 0001                  		move.w	#1,d4
0001D650                            
0001D650                            loc_1CAA2:
0001D650 4A44                       		tst.w	d4
0001D652 6700                       		beq.s	Hud_ClrLives
0001D654                            
0001D654                            loc_1CAA6:
0001D654 EB4A                       		lsl.w	#5,d2
0001D656 47F1 2000                  		lea	(a1,d2.w),a3
0001D65A 2C9B                       		move.l	(a3)+,(a6)
0001D65C 2C9B                       		move.l	(a3)+,(a6)
0001D65E 2C9B                       		move.l	(a3)+,(a6)
0001D660 2C9B                       		move.l	(a3)+,(a6)
0001D662 2C9B                       		move.l	(a3)+,(a6)
0001D664 2C9B                       		move.l	(a3)+,(a6)
0001D666 2C9B                       		move.l	(a3)+,(a6)
0001D668 2C9B                       		move.l	(a3)+,(a6)
0001D66A                            
0001D66A                            loc_1CABC:
0001D66A 0680 0040 0000             		addi.l	#$400000,d0
0001D670 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D674                            
0001D674 4E75                       		rts	
0001D676                            ; ===========================================================================
0001D676                            
0001D676                            Hud_ClrLives:
0001D676 4A46                       		tst.w	d6
0001D678 67DA                       		beq.s	loc_1CAA6
0001D67A 7A07                       		moveq	#7,d5
0001D67C                            
0001D67C                            Hud_ClrLivesLoop:
0001D67C 2CBC 0000 0000             		move.l	#0,(a6)
0001D682 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D686 60E2                       		bra.s	loc_1CABC
0001D688                            ; End of function Hud_Lives
0001D688                            
0001D688                            ; ===========================================================================
0001D688                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D988                            		even
0001D988                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001DAC8                            		even
0001DAC8                            ; ===========================================================================
0001DAC8                            ; ---------------------------------------------------------------------------
0001DAC8                            ; When debug mode is currently in use
0001DAC8                            ; ---------------------------------------------------------------------------
0001DAC8                            
0001DAC8                            DebugMode:				; XREF: Obj01; Obj09
0001DAC8 7000                       		moveq	#0,d0
0001DACA 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DACE 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DAD2 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DAD6                            ; ===========================================================================
0001DAD6 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DAD8 0000                       		dc.w Debug_Skip-Debug_Index
0001DADA                            ; ===========================================================================
0001DADA                            
0001DADA                            Debug_Main:				; XREF: Debug_Index
0001DADA 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DADE 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DAE4 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DAEA 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DAF0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DAF6 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DAFC 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DB02 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DB08 117C 0000 001A             		move.b	#0,$1A(a0)
0001DB0E 117C 0000 001C             		move.b	#0,$1C(a0)
0001DB14 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DB1A 6600                       		bne.s	Debug_Zone	; if not, branch
0001DB1C 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DB22 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DB28 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DB2A 6000                       		bra.s	Debug_UseList
0001DB2C                            ; ===========================================================================
0001DB2C                            
0001DB2C                            Debug_Zone:
0001DB2C 7000                       		moveq	#0,d0
0001DB2E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DB32                            
0001DB32                            Debug_UseList:
0001DB32 45F9 0000 0000             		lea	(DebugList).l,a2
0001DB38 D040                       		add.w	d0,d0
0001DB3A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DB3E 3C1A                       		move.w	(a2)+,d6
0001DB40 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DB44 6200                       		bhi.s	loc_1CF9E
0001DB46 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DB4C                            
0001DB4C                            loc_1CF9E:
0001DB4C 6100 0000                  		bsr.w	Debug_ShowItem
0001DB50 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DB56 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DB5C                            
0001DB5C                            Debug_Skip:				; XREF: Debug_Index
0001DB5C 7006                       		moveq	#6,d0
0001DB5E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DB64 6700                       		beq.s	loc_1CFBE
0001DB66 7000                       		moveq	#0,d0
0001DB68 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DB6C                            
0001DB6C                            loc_1CFBE:
0001DB6C 45F9 0000 0000             		lea	(DebugList).l,a2
0001DB72 D040                       		add.w	d0,d0
0001DB74 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DB78 3C1A                       		move.w	(a2)+,d6
0001DB7A 6100 0000                  		bsr.w	Debug_Control
0001DB7E 4EF9 0000 DFF6             		jmp	DisplaySprite
0001DB84                            
0001DB84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB84                            
0001DB84                            
0001DB84                            Debug_Control:
0001DB84 7800                       		moveq	#0,d4
0001DB86 323C 0001                  		move.w	#1,d1
0001DB8A 1838 F605                  		move.b	($FFFFF605).w,d4
0001DB8E 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DB92 6600                       		bne.s	loc_1D018	; if yes, branch
0001DB94 1038 F604                  		move.b	($FFFFF604).w,d0
0001DB98 0240 000F                  		andi.w	#$F,d0
0001DB9C 6600                       		bne.s	loc_1D000
0001DB9E 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DBA4 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DBAA 6000 0000                  		bra.w	Debug_BackItem
0001DBAE                            ; ===========================================================================
0001DBAE                            
0001DBAE                            loc_1D000:
0001DBAE 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DBB2 6600                       		bne.s	loc_1D01C
0001DBB4 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DBBA 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DBBE 6600                       		bne.s	loc_1D018
0001DBC0 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DBC6                            
0001DBC6                            loc_1D018:
0001DBC6 1838 F604                  		move.b	($FFFFF604).w,d4
0001DBCA                            
0001DBCA                            loc_1D01C:
0001DBCA 7200                       		moveq	#0,d1
0001DBCC 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DBD0 5241                       		addq.w	#1,d1
0001DBD2 4841                       		swap	d1
0001DBD4 E881                       		asr.l	#4,d1
0001DBD6 2428 000C                  		move.l	$C(a0),d2
0001DBDA 2628 0008                  		move.l	8(a0),d3
0001DBDE 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DBE2 6700                       		beq.s	loc_1D03C	; if not, branch
0001DBE4 9481                       		sub.l	d1,d2
0001DBE6 6400                       		bcc.s	loc_1D03C
0001DBE8 7400                       		moveq	#0,d2
0001DBEA                            
0001DBEA                            loc_1D03C:
0001DBEA 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DBEE 6700                       		beq.s	loc_1D052	; if not, branch
0001DBF0 D481                       		add.l	d1,d2
0001DBF2 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DBF8 6500                       		bcs.s	loc_1D052
0001DBFA 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DC00                            
0001DC00                            loc_1D052:
0001DC00 0804 0002                  		btst	#2,d4
0001DC04 6700                       		beq.s	loc_1D05E
0001DC06 9681                       		sub.l	d1,d3
0001DC08 6400                       		bcc.s	loc_1D05E
0001DC0A 7600                       		moveq	#0,d3
0001DC0C                            
0001DC0C                            loc_1D05E:
0001DC0C 0804 0003                  		btst	#3,d4
0001DC10 6700                       		beq.s	loc_1D066
0001DC12 D681                       		add.l	d1,d3
0001DC14                            
0001DC14                            loc_1D066:
0001DC14 2142 000C                  		move.l	d2,$C(a0)
0001DC18 2143 0008                  		move.l	d3,8(a0)
0001DC1C                            
0001DC1C                            Debug_BackItem:
0001DC1C 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DC22 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DC24 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DC2A 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DC2C 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DC30 6400                       		bcc.s	Debug_NoLoop
0001DC32 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DC36 6000                       		bra.s	Debug_NoLoop
0001DC38                            ; ===========================================================================
0001DC38                            
0001DC38                            Debug_NextItem:
0001DC38 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DC3E 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DC40 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DC44 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DC48 6200                       		bhi.s	Debug_NoLoop
0001DC4A 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DC50                            
0001DC50                            Debug_NoLoop:
0001DC50 6000 0000                  		bra.w	Debug_ShowItem
0001DC54                            ; ===========================================================================
0001DC54                            
0001DC54                            Debug_MakeItem:
0001DC54 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DC5A 6700                       		beq.s	Debug_Exit	; if not, branch
0001DC5C 4EB9 0000 E47C             		jsr	SingleObjLoad
0001DC62 6600                       		bne.s	Debug_Exit
0001DC64 3368 0008 0008             		move.w	8(a0),8(a1)
0001DC6A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DC70 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DC74 1368 0001 0001             		move.b	1(a0),1(a1)
0001DC7A 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DC80 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DC86 7000                       		moveq	#0,d0
0001DC88 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DC8C E748                       		lsl.w	#3,d0
0001DC8E 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DC94 4E75                       		rts	
0001DC96                            ; ===========================================================================
0001DC96                            
0001DC96                            Debug_Exit:
0001DC96 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DC9C 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DC9E 7000                       		moveq	#0,d0
0001DCA0 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DCA4 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DCAC 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DCB2 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DCB6 3140 000A                  		move.w	d0,$A(a0)
0001DCBA 3140 000E                  		move.w	d0,$E(a0)
0001DCBE 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DCC4 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DCCA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DCD0 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DCD2 4278 F780                  		clr.w	($FFFFF780).w
0001DCD6 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DCDC 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DCE4 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DCEA 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DCF0 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DCF6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DCFC                            
0001DCFC                            Debug_DoNothing:
0001DCFC 4E75                       		rts	
0001DCFE                            ; End of function Debug_Control
0001DCFE                            
0001DCFE                            
0001DCFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCFE                            
0001DCFE                            
0001DCFE                            Debug_ShowItem:				; XREF: Debug_Main
0001DCFE 7000                       		moveq	#0,d0
0001DD00 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DD04 E748                       		lsl.w	#3,d0
0001DD06 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DD0C 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DD12 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DD18 4E75                       		rts	
0001DD1A                            ; End of function Debug_ShowItem
0001DD1A                            
0001DD1A                            ; ===========================================================================
0001DD1A                            ; ---------------------------------------------------------------------------
0001DD1A                            ; Debug	list pointers
0001DD1A                            ; ---------------------------------------------------------------------------
0001DD1A                            DebugList:
0001DD1A                            	include "_inc\Debug list pointers.asm"
0001DD1A                            ; ---------------------------------------------------------------------------
0001DD1A                            ; Debug	list pointers
0001DD1A                            ; ---------------------------------------------------------------------------
0001DD1A 0000                       	dc.w Debug_GHZ-DebugList
0001DD1C 0000                       	dc.w Debug_LZ-DebugList
0001DD1E 0000                       	dc.w Debug_MZ-DebugList
0001DD20 0000                       	dc.w Debug_SLZ-DebugList
0001DD22 0000                       	dc.w Debug_SYZ-DebugList
0001DD24 0000                       	dc.w Debug_SBZ-DebugList
0001DD26 0000                       	dc.w Debug_Ending-DebugList
0001DD28 0000                       	dc.w Debug_GHZ-DebugList
0001DD28 0000                       	dc.w Debug_GHZ-DebugList
0001DD2A                            
0001DD2A                            ; ---------------------------------------------------------------------------
0001DD2A                            ; Debug	list - Green Hill
0001DD2A                            ; ---------------------------------------------------------------------------
0001DD2A                            Debug_GHZ:
0001DD2A                            	include "_inc\Debug list - GHZ.asm"
0001DD2A                            ; ---------------------------------------------------------------------------
0001DD2A                            ; Debug	list - Green Hill
0001DD2A                            ; ---------------------------------------------------------------------------
0001DD2A 0010                       	dc.w $10			; number of items in list
0001DD2C 2500 A7EA                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DD30 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DD34 2600 ADF0                  	dc.l Map_obj26+$26000000
0001DD38 0000 0680                  	dc.b 0,	0, 6, $80
0001DD3C 1F00 9FE2                  	dc.l Map_obj1F+$1F000000
0001DD40 0000 0400                  	dc.b 0,	0, 4, 0
0001DD44 2200 A29E                  	dc.l Map_obj22+$22000000
0001DD48 0000 0444                  	dc.b 0,	0, 4, $44
0001DD4C 2B00 B464                  	dc.l Map_obj2B+$2B000000
0001DD50 0000 047B                  	dc.b 0,	0, 4, $7B
0001DD54 3600 D998                  	dc.l Map_obj36+$36000000
0001DD58 0000 051B                  	dc.b 0,	0, 5, $1B
0001DD5C 1800 88F0                  	dc.l Map_obj18+$18000000
0001DD60 0000 4000                  	dc.b 0,	0, $40,	0
0001DD64 3B00 DABE                  	dc.l Map_obj3B+$3B000000
0001DD68 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DD6C 4001 0190                  	dc.l Map_obj40+$40000000
0001DD70 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DD74 4100 E70A                  	dc.l Map_obj41+$41000000
0001DD78 0000 0523                  	dc.b 0,	0, 5, $23
0001DD7C 4200 E930                  	dc.l Map_obj42+$42000000
0001DD80 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DD84 4400 EC3E                  	dc.l Map_obj44+$44000000
0001DD88 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DD8C 1900 89F0                  	dc.l Map_obj48+$19000000
0001DD90 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DD94 7901 7BE4                  	dc.l Map_obj79+$79000000
0001DD98 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD9C 4B00 A82A                  	dc.l Map_obj4B+$4B000000
0001DDA0 0000 2400                  	dc.b 0,	0, $24,	0
0001DDA4 7D01 7D34                  	dc.l Map_obj7D+$7D000000
0001DDA8 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DDAC                            	even
0001DDAC                            	even
0001DDAC                            
0001DDAC                            ; ---------------------------------------------------------------------------
0001DDAC                            ; Debug	list - Labyrinth
0001DDAC                            ; ---------------------------------------------------------------------------
0001DDAC                            Debug_LZ:
0001DDAC                            	include "_inc\Debug list - LZ.asm"
0001DDAC                            ; ---------------------------------------------------------------------------
0001DDAC                            ; Debug	list - Labyrinth
0001DDAC                            ; ---------------------------------------------------------------------------
0001DDAC 0019                       	dc.w $19
0001DDAE 2500 A7EA                  	dc.l Map_obj25+$25000000
0001DDB2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DDB6 2600 ADF0                  	dc.l Map_obj26+$26000000
0001DDBA 0000 0680                  	dc.b 0,	0, 6, $80
0001DDBE 4100 E70A                  	dc.l Map_obj41+$41000000
0001DDC2 0000 0523                  	dc.b 0,	0, 5, $23
0001DDC6 2C00 B514                  	dc.l Map_obj2C+$2C000000
0001DDCA 0800 2486                  	dc.b 8,	0, $24,	$86
0001DDCE 2D00 B708                  	dc.l Map_obj2D+$2D000000
0001DDD2 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DDD6 1601 296A                  	dc.l Map_obj16+$16000000
0001DDDA 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DDDE 1601 296A                  	dc.l Map_obj16+$16000000
0001DDE2 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DDE6 3300 CBC0                  	dc.l Map_obj33+$33000000
0001DDEA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DDEE 3200 C780                  	dc.l Map_obj32+$32000000
0001DDF2 0000 0513                  	dc.b 0,	0, 5, $13
0001DDF6 3600 D998                  	dc.l Map_obj36+$36000000
0001DDFA 0000 051B                  	dc.b 0,	0, 5, $1B
0001DDFE 5201 0A8C                  	dc.l Map_obj52a+$52000000
0001DE02 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DE06 6101 2B92                  	dc.l Map_obj61+$61000000
0001DE0A 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DE0E 6101 2B92                  	dc.l Map_obj61+$61000000
0001DE12 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DE16 6101 2B92                  	dc.l Map_obj61+$61000000
0001DE1A 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DE1E 6201 2CE6                  	dc.l Map_obj62+$62000000
0001DE22 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DE26 6101 2B92                  	dc.l Map_obj61+$61000000
0001DE2A 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DE2E 6101 2B92                  	dc.l Map_obj61+$61000000
0001DE32 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DE36 6301 3048                  	dc.l Map_obj63+$63000000
0001DE3A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DE3E 6001 28B4                  	dc.l Map_obj60+$60000000
0001DE42 0000 0467                  	dc.b 0,	0, 4, $67
0001DE46 6401 338E                  	dc.l Map_obj64+$64000000
0001DE4A 8413 8348                  	dc.b $84, $13, $83, $48
0001DE4E 6501 3516                  	dc.l Map_obj65+$65000000
0001DE52 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DE56 6501 3516                  	dc.l Map_obj65+$65000000
0001DE5A 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DE5E 0B01 1D04                  	dc.l Map_obj0B+$B000000
0001DE62 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DE66 0C01 1DD4                  	dc.l Map_obj0C+$C000000
0001DE6A 0200 4328                  	dc.b 2,	0, $43,	$28
0001DE6E 7901 7BE4                  	dc.l Map_obj79+$79000000
0001DE72 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE76                            	even
0001DE76                            	even
0001DE76                            
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76                            ; Debug	list - Marble
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76                            Debug_MZ:
0001DE76                            	include "_inc\Debug list - MZ.asm"
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76                            ; Debug	list - Marble
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76 0012                       	dc.w $12
0001DE78 2500 A7EA                  	dc.l Map_obj25+$25000000
0001DE7C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE80 2600 ADF0                  	dc.l Map_obj26+$26000000
0001DE84 0000 0680                  	dc.b 0,	0, 6, $80
0001DE88 2200 A29E                  	dc.l Map_obj22+$22000000
0001DE8C 0000 0444                  	dc.b 0,	0, 4, $44
0001DE90 3600 D998                  	dc.l Map_obj36+$36000000
0001DE94 0000 051B                  	dc.b 0,	0, 5, $1B
0001DE98 4100 E70A                  	dc.l Map_obj41+$41000000
0001DE9C 0000 0523                  	dc.b 0,	0, 5, $23
0001DEA0 1300 BC4A                  	dc.l Map_obj14+$13000000
0001DEA4 0000 0345                  	dc.b 0,	0, 3, $45
0001DEA8 4600 F2F0                  	dc.l Map_obj46+$46000000
0001DEAC 0000 4000                  	dc.b 0,	0, $40,	0
0001DEB0 4C00 FC3C                  	dc.l Map_obj4C+$4C000000
0001DEB4 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DEB8 4E00 FF20                  	dc.l Map_obj4E+$4E000000
0001DEBC 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DEC0 3300 CBC0                  	dc.l Map_obj33+$33000000
0001DEC4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DEC8 5001 031E                  	dc.l Map_obj50+$50000000
0001DECC 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DED0 5101 07C0                  	dc.l Map_obj51+$51000000
0001DED4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DED8 5201 0A36                  	dc.l Map_obj52+$52000000
0001DEDC 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DEE0 5300 8F88                  	dc.l Map_obj53+$53000000
0001DEE4 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DEE8 5400 FC02                  	dc.l Map_obj54+$54000000
0001DEEC 0000 8680                  	dc.b 0,	0, $86,	$80
0001DEF0 5501 0C2A                  	dc.l Map_obj55+$55000000
0001DEF4 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DEF8 7801 785E                  	dc.l Map_obj78+$78000000
0001DEFC 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DF00 7901 7BE4                  	dc.l Map_obj79+$79000000
0001DF04 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DF08                            	even
0001DF08                            	even
0001DF08                            
0001DF08                            ; ---------------------------------------------------------------------------
0001DF08                            ; Debug	list - Star Light
0001DF08                            ; ---------------------------------------------------------------------------
0001DF08                            Debug_SLZ:
0001DF08                            	include "_inc\Debug list - SLZ.asm"
0001DF08                            ; ---------------------------------------------------------------------------
0001DF08                            ; Debug	list - Star Light
0001DF08                            ; ---------------------------------------------------------------------------
0001DF08 000F                       	dc.w $F
0001DF0A 2500 A7EA                  	dc.l Map_obj25+$25000000
0001DF0E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DF12 2600 ADF0                  	dc.l Map_obj26+$26000000
0001DF16 0000 0680                  	dc.b 0,	0, 6, $80
0001DF1A 5901 172C                  	dc.l Map_obj59+$59000000
0001DF1E 0000 4000                  	dc.b 0,	0, $40,	0
0001DF22 5300 8F88                  	dc.l Map_obj53+$53000000
0001DF26 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DF2A 1800 894E                  	dc.l Map_obj18b+$18000000
0001DF2E 0000 4000                  	dc.b 0,	0, $40,	0
0001DF32 5A01 1866                  	dc.l Map_obj5A+$5A000000
0001DF36 0000 4000                  	dc.b 0,	0, $40,	0
0001DF3A 5B01 1A1E                  	dc.l Map_obj5B+$5B000000
0001DF3E 0000 4000                  	dc.b 0,	0, $40,	0
0001DF42 5D01 1FEE                  	dc.l Map_obj5D+$5D000000
0001DF46 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DF4A 5E01 2380                  	dc.l Map_obj5E+$5E000000
0001DF4E 0000 0374                  	dc.b 0,	0, 3, $74
0001DF52 4100 E70A                  	dc.l Map_obj41+$41000000
0001DF56 0000 0523                  	dc.b 0,	0, 5, $23
0001DF5A 1300 BC4A                  	dc.l Map_obj14+$13000000
0001DF5E 0000 0480                  	dc.b 0,	0, 4, $80
0001DF62 1C00 9098                  	dc.l Map_obj1C+$1C000000
0001DF66 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DF6A 5F01 25FE                  	dc.l Map_obj5F+$5F000000
0001DF6E 0000 0400                  	dc.b 0,	0, 4, 0
0001DF72 6001 28B4                  	dc.l Map_obj60+$60000000
0001DF76 0000 2429                  	dc.b 0,	0, $24,	$29
0001DF7A 7901 7BE4                  	dc.l Map_obj79+$79000000
0001DF7E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DF82                            	even
0001DF82                            	even
0001DF82                            
0001DF82                            ; ---------------------------------------------------------------------------
0001DF82                            ; Debug	list - Spring Yard
0001DF82                            ; ---------------------------------------------------------------------------
0001DF82                            Debug_SYZ:
0001DF82                            	include "_inc\Debug list - SYZ.asm"
0001DF82                            ; ---------------------------------------------------------------------------
0001DF82                            ; Debug	list - Spring Yard
0001DF82                            ; ---------------------------------------------------------------------------
0001DF82 000F                       	dc.w $F
0001DF84 2500 A7EA                  	dc.l Map_obj25+$25000000
0001DF88 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DF8C 2600 ADF0                  	dc.l Map_obj26+$26000000
0001DF90 0000 0680                  	dc.b 0,	0, 6, $80
0001DF94 3600 D998                  	dc.l Map_obj36+$36000000
0001DF98 0000 051B                  	dc.b 0,	0, 5, $1B
0001DF9C 4100 E70A                  	dc.l Map_obj41+$41000000
0001DFA0 0000 0523                  	dc.b 0,	0, 5, $23
0001DFA4 4300 EB90                  	dc.l Map_obj43+$43000000
0001DFA8 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DFAC 1200 F36E                  	dc.l Map_obj12+$12000000
0001DFB0 0000 0000                  	dc.b 0,	0, 0, 0
0001DFB4 4700 F4EA                  	dc.l Map_obj47+$47000000
0001DFB8 0000 0380                  	dc.b 0,	0, 3, $80
0001DFBC 1F00 9FE2                  	dc.l Map_obj1F+$1F000000
0001DFC0 0000 0400                  	dc.b 0,	0, 4, 0
0001DFC4 2200 A29E                  	dc.l Map_obj22+$22000000
0001DFC8 0000 0444                  	dc.b 0,	0, 4, $44
0001DFCC 5001 031E                  	dc.l Map_obj50+$50000000
0001DFD0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DFD4 1800 893C                  	dc.l Map_obj18a+$18000000
0001DFD8 0000 4000                  	dc.b 0,	0, $40,	0
0001DFDC 5601 10EC                  	dc.l Map_obj56+$56000000
0001DFE0 0000 4000                  	dc.b 0,	0, $40,	0
0001DFE4 3200 C780                  	dc.l Map_obj32+$32000000
0001DFE8 0000 0513                  	dc.b 0,	0, 5, $13
0001DFEC 7801 785E                  	dc.l Map_obj78+$78000000
0001DFF0 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DFF4 7901 7BE4                  	dc.l Map_obj79+$79000000
0001DFF8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DFFC                            	even
0001DFFC                            	even
0001DFFC                            
0001DFFC                            ; ---------------------------------------------------------------------------
0001DFFC                            ; Debug	list - Scrap Brain
0001DFFC                            ; ---------------------------------------------------------------------------
0001DFFC                            Debug_SBZ:
0001DFFC                            	include "_inc\Debug list - SBZ.asm"
0001DFFC                            ; ---------------------------------------------------------------------------
0001DFFC                            ; Debug	list - Scrap Brain
0001DFFC                            ; ---------------------------------------------------------------------------
0001DFFC 001D                       	dc.w $1D
0001DFFE 2500 A7EA                  	dc.l Map_obj25+$25000000
0001E002 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E006 2600 ADF0                  	dc.l Map_obj26+$26000000
0001E00A 0000 0680                  	dc.b 0,	0, 6, $80
0001E00E 5F01 25FE                  	dc.l Map_obj5F+$5F000000
0001E012 0000 0400                  	dc.b 0,	0, 4, 0
0001E016 6001 28B4                  	dc.l Map_obj60+$60000000
0001E01A 0000 0429                  	dc.b 0,	0, 4, $29
0001E01E 7801 785E                  	dc.l Map_obj78+$78000000
0001E022 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E026 1501 1488                  	dc.l Map_obj15b+$15000000
0001E02A 0702 4391                  	dc.b 7,	2, $43,	$91
0001E02E 6701 6172                  	dc.l Map_obj67+$67000000
0001E032 E000 C344                  	dc.b $E0, 0, $C3, $44
0001E036 5201 0A36                  	dc.l Map_obj52+$52000000
0001E03A 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E03E 3200 C780                  	dc.l Map_obj32+$32000000
0001E042 0000 0513                  	dc.b 0,	0, 5, $13
0001E046 6901 63CC                  	dc.l Map_obj69+$69000000
0001E04A 0300 4492                  	dc.b 3,	0, $44,	$92
0001E04E 6901 6426                  	dc.l Map_obj69a+$69000000
0001E052 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E056 6A01 6684                  	dc.l Map_obj6A+$6A000000
0001E05A 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E05E 5300 8F88                  	dc.l Map_obj53+$53000000
0001E062 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E066 5201 0A36                  	dc.l Map_obj52+$52000000
0001E06A 3903 4460                  	dc.b $39, 3, $44, $60
0001E06E 6B01 6A54                  	dc.l Map_obj6B+$6B000000
0001E072 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E076 2A00 922E                  	dc.l Map_obj2A+$2A000000
0001E07A 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E07E 6B01 6A54                  	dc.l Map_obj6B+$6B000000
0001E082 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E086 6A01 6684                  	dc.l Map_obj6A+$6A000000
0001E08A 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E08E 6B01 6A54                  	dc.l Map_obj6B+$6B000000
0001E092 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E096 6A01 6684                  	dc.l Map_obj6A+$6A000000
0001E09A 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E09E 6B01 6A54                  	dc.l Map_obj6B+$6B000000
0001E0A2 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E0A6 6C01 6C16                  	dc.l Map_obj6C+$6C000000
0001E0AA 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E0AE 6D00 EFE0                  	dc.l Map_obj6D+$6D000000
0001E0B2 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E0B6 6D00 EFE0                  	dc.l Map_obj6D+$6D000000
0001E0BA 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E0BE 6E01 6CCC                  	dc.l Map_obj6E+$6E000000
0001E0C2 0400 047E                  	dc.b 4,	0, 4, $7E
0001E0C6 7001 7122                  	dc.l Map_obj70+$70000000
0001E0CA 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E0CE 7101 1E94                  	dc.l Map_obj71+$71000000
0001E0D2 1100 8680                  	dc.b $11, 0, $86, $80
0001E0D6 1E00 96EC                  	dc.l Map_obj1E+$1E000000
0001E0DA 0400 2302                  	dc.b 4,	0, $23,	2
0001E0DE 7901 7BE4                  	dc.l Map_obj79+$79000000
0001E0E2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E0E6                            	even
0001E0E6                            	even
0001E0E6                            
0001E0E6                            ; ---------------------------------------------------------------------------
0001E0E6                            ; Debug	list - ending sequence / special stage
0001E0E6                            ; ---------------------------------------------------------------------------
0001E0E6                            Debug_Ending:
0001E0E6                            	include "_inc\Debug list - Ending and SS.asm"
0001E0E6                            ; ---------------------------------------------------------------------------
0001E0E6                            ; Debug	list - ending sequence / special stage
0001E0E6                            ; ---------------------------------------------------------------------------
0001E0E6 000D                       	dc.w $D
0001E0E8 2500 A7EA                  	dc.l Map_obj25+$25000000
0001E0EC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E0F0 4700 F4EA                  	dc.l Map_obj47+$47000000
0001E0F4 0000 0380                  	dc.b 0,	0, 3, $80
0001E0F8 2800 9D14                  	dc.l Map_obj28a+$28000000
0001E0FC 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E100 2800 9D14                  	dc.l Map_obj28a+$28000000
0001E104 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E108 2800 9D14                  	dc.l Map_obj28a+$28000000
0001E10C 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E110 2800 9CFC                  	dc.l Map_obj28+$28000000
0001E114 0D00 0553                  	dc.b $D, 0, 5, $53
0001E118 2800 9CFC                  	dc.l Map_obj28+$28000000
0001E11C 0E00 0553                  	dc.b $E, 0, 5, $53
0001E120 2800 9CFC                  	dc.l Map_obj28+$28000000
0001E124 0F00 0573                  	dc.b $F, 0, 5, $73
0001E128 2800 9CFC                  	dc.l Map_obj28+$28000000
0001E12C 1000 0573                  	dc.b $10, 0, 5,	$73
0001E130 2800 9D14                  	dc.l Map_obj28a+$28000000
0001E134 1100 0585                  	dc.b $11, 0, 5,	$85
0001E138 2800 9D2C                  	dc.l Map_obj28b+$28000000
0001E13C 1200 0593                  	dc.b $12, 0, 5,	$93
0001E140 2800 9D14                  	dc.l Map_obj28a+$28000000
0001E144 1300 0565                  	dc.b $13, 0, 5,	$65
0001E148 2800 9D2C                  	dc.l Map_obj28b+$28000000
0001E14C 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E150                            	even
0001E150                            	even
0001E150                            
0001E150                            ; ---------------------------------------------------------------------------
0001E150                            ; Main level load blocks
0001E150                            ; ---------------------------------------------------------------------------
0001E150                            MainLoadBlocks:
0001E150                            	include "_inc\Main level load blocks.asm"
0001E150                            ; ---------------------------------------------------------------------------
0001E150                            ; Main level load blocks
0001E150                            ;
0001E150                            ; ===FORMAT===
0001E150                            ; level	patterns + (1st	PLC num	* 10^6)
0001E150                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E150                            ; 256x256 mappings
0001E150                            ; blank, music (unused), pal index (unused), pal index
0001E150                            ; ---------------------------------------------------------------------------
0001E150 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001E154 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001E158 0000 0000                  	dc.l Blk256_GHZ
0001E15C 0081 0404                  	dc.b 0,	$81, 4,	4
0001E160 0000 0000                  	dc.l Nem_LZ|6<<24
0001E164 0000 0000                  	dc.l Blk16_LZ|7<<24
0001E168 0000 0000                  	dc.l Blk256_LZ
0001E16C 0082 0505                  	dc.b 0,	$82, 5,	5
0001E170 0000 0000                  	dc.l Nem_MZ|8<<24
0001E174 0000 0000                  	dc.l Blk16_MZ|9<<24
0001E178 0000 0000                  	dc.l Blk256_MZ
0001E17C 0083 0606                  	dc.b 0,	$83, 6,	6
0001E180 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001E184 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001E188 0000 0000                  	dc.l Blk256_SLZ
0001E18C 0084 0707                  	dc.b 0,	$84, 7,	7
0001E190 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001E194 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001E198 0000 0000                  	dc.l Blk256_SYZ
0001E19C 0085 0808                  	dc.b 0,	$85, 8,	8
0001E1A0 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001E1A4 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001E1A8 0000 0000                  	dc.l Blk256_SBZ
0001E1AC 0086 0909                  	dc.b 0,	$86, 9,	9
0001E1B0 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E1B4 0000 0000                  	dc.l Blk16_GHZ
0001E1B8 0000 0000                  	dc.l Blk256_GHZ
0001E1BC 0086 1313                  	dc.b 0,	$86, $13, $13
0001E1C0                            ; there you go lol
0001E1C0 0000 0000                  	dc.l Nem_BHZ_2nd|$20<<24 ; MAKOTO ZONE
0001E1C4 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001E1C8 0000 0000                  	dc.l Blk256_BHZ
0001E1CC 009E 1515                  	dc.b 0,	$9E, $15, $15
0001E1D0                            	even
0001E1D0                            	even
0001E1D0                            
0001E1D0                            ; ---------------------------------------------------------------------------
0001E1D0                            ; Pattern load cues
0001E1D0                            ; ---------------------------------------------------------------------------
0001E1D0                            ArtLoadCues:
0001E1D0                            	include "_inc\Pattern load cues.asm"
0001E1D0                            ; ---------------------------------------------------------------------------
0001E1D0                            ; Pattern load cues - index
0001E1D0                            ; ---------------------------------------------------------------------------
0001E1D0 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001E1D4 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001E1D8 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001E1DC 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E1E0 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E1E4 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E1E8 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E1EC 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E1F0 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001E1F4 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E1F8 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E1FC 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E200 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E204 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E208 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E20C 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E210                            
0001E210 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001E214 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E216                            ; ---------------------------------------------------------------------------
0001E216                            ; Pattern load cues - standard block 1
0001E216                            ; ---------------------------------------------------------------------------
0001E216 0004                       PLC_Main:	dc.w 4
0001E218 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E21C F400                       		dc.w $F400
0001E21E 0000 0000                  		dc.l Nem_Hud		; HUD
0001E222 D940                       		dc.w $D940
0001E224 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E228 FA80                       		dc.w $FA80
0001E22A 0000 0000                  		dc.l Nem_Ring		; rings
0001E22E F640                       		dc.w $F640
0001E230 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E234 F2E0                       		dc.w $F2E0
0001E236                            ; ---------------------------------------------------------------------------
0001E236                            ; Pattern load cues - standard block 2
0001E236                            ; ---------------------------------------------------------------------------
0001E236 0002                       PLC_Main2:	dc.w 2
0001E238 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E23C D000                       		dc.w $D000
0001E23E 0000 0000                  		dc.l Nem_Shield		; shield
0001E242 A820                       		dc.w $A820
0001E244 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E248 AB80                       		dc.w $AB80
0001E24A                            ; ---------------------------------------------------------------------------
0001E24A                            ; Pattern load cues - explosion
0001E24A                            ; ---------------------------------------------------------------------------
0001E24A 0000                       PLC_Explode:	dc.w 0
0001E24C 0000 0000                  		dc.l Nem_Explode	; explosion
0001E250 B400                       		dc.w $B400
0001E252                            ; ---------------------------------------------------------------------------
0001E252                            ; Pattern load cues - game/time	over
0001E252                            ; ---------------------------------------------------------------------------
0001E252 0000                       PLC_GameOver:	dc.w 0
0001E254 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E258 ABC0                       		dc.w $ABC0
0001E25A                            ; ---------------------------------------------------------------------------
0001E25A                            ; Pattern load cues - Green Hill
0001E25A                            ; ---------------------------------------------------------------------------
0001E25A 000B                       PLC_GHZ:	dc.w $B
0001E25C 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E260 0000                       		dc.w 0
0001E262 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E266 39A0                       		dc.w $39A0
0001E268 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E26C 6B00                       		dc.w $6B00
0001E26E 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E272 7A00                       		dc.w $7A00
0001E274 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E278 8000                       		dc.w $8000
0001E27A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E27E 8880                       		dc.w $8880
0001E280 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E284 8F60                       		dc.w $8F60
0001E286 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E28A 9360                       		dc.w $9360
0001E28C 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E290 9E00                       		dc.w $9E00
0001E292 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E296 A360                       		dc.w $A360
0001E298 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E29C A460                       		dc.w $A460
0001E29E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E2A2 A660                       		dc.w $A660
0001E2A4 0005                       PLC_GHZ2:	dc.w 5
0001E2A6 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E2AA 7000                       		dc.w $7000
0001E2AC 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E2B0 71C0                       		dc.w $71C0
0001E2B2 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E2B6 7300                       		dc.w $7300
0001E2B8 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E2BC 7540                       		dc.w $7540
0001E2BE 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E2C2 A1E0                       		dc.w $A1E0
0001E2C4 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E2C8 6980                       		dc.w $6980
0001E2CA                            ; ---------------------------------------------------------------------------
0001E2CA                            ; Pattern load cues - Labyrinth
0001E2CA                            ; ---------------------------------------------------------------------------
0001E2CA 000B                       PLC_LZ:		dc.w $B
0001E2CC 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E2D0 0000                       		dc.w 0
0001E2D2 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E2D6 3C00                       		dc.w $3C00
0001E2D8 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E2DC 3E00                       		dc.w $3E00
0001E2DE 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E2E2 4B20                       		dc.w $4B20
0001E2E4 0000 0000                  		dc.l Nem_Water		; water	surface
0001E2E8 6000                       		dc.w $6000
0001E2EA 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E2EE 6200                       		dc.w $6200
0001E2F0 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E2F4 6500                       		dc.w $6500
0001E2F6 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E2FA 6900                       		dc.w $6900
0001E2FC 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E300 7780                       		dc.w $7780
0001E302 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E306 7880                       		dc.w $7880
0001E308 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E30C 7980                       		dc.w $7980
0001E30E 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E312 94C0                       		dc.w $94C0
0001E314 000C                       PLC_LZ2:	dc.w $C
0001E316 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E31A 7BC0                       		dc.w $7BC0
0001E31C 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E320 7CC0                       		dc.w $7CC0
0001E322 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E326 7EC0                       		dc.w $7EC0
0001E328 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E32C 5D20                       		dc.w $5D20
0001E32E 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E332 8800                       		dc.w $8800
0001E334 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E338 89E0                       		dc.w $89E0
0001E33A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E33E 8CE0                       		dc.w $8CE0
0001E340 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E344 90C0                       		dc.w $90C0
0001E346 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E34A A1E0                       		dc.w $A1E0
0001E34C 0000 0000                  		dc.l Nem_Cork		; cork block
0001E350 A000                       		dc.w $A000
0001E352 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E356 A360                       		dc.w $A360
0001E358 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E35C A460                       		dc.w $A460
0001E35E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E362 A660                       		dc.w $A660
0001E364                            ; ---------------------------------------------------------------------------
0001E364                            ; Pattern load cues - Marble
0001E364                            ; ---------------------------------------------------------------------------
0001E364 0009                       PLC_MZ:		dc.w 9
0001E366 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E36A 0000                       		dc.w 0
0001E36C 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E370 6000                       		dc.w $6000
0001E372 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E376 68A0                       		dc.w $68A0
0001E378 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E37C 7000                       		dc.w $7000
0001E37E 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E382 71C0                       		dc.w $71C0
0001E384 0000 0000                  		dc.l Nem_Lava		; lava
0001E388 7500                       		dc.w $7500
0001E38A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E38E 8880                       		dc.w $8880
0001E390 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E394 8F60                       		dc.w $8F60
0001E396 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E39A 9700                       		dc.w $9700
0001E39C 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E3A0 9FE0                       		dc.w $9FE0
0001E3A2 0004                       PLC_MZ2:	dc.w 4
0001E3A4 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E3A8 A260                       		dc.w $A260
0001E3AA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E3AE A360                       		dc.w $A360
0001E3B0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E3B4 A460                       		dc.w $A460
0001E3B6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E3BA A660                       		dc.w $A660
0001E3BC 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E3C0 5700                       		dc.w $5700
0001E3C2                            ; ---------------------------------------------------------------------------
0001E3C2                            ; Pattern load cues - Star Light
0001E3C2                            ; ---------------------------------------------------------------------------
0001E3C2 0008                       PLC_SLZ:	dc.w 8
0001E3C4 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E3C8 0000                       		dc.w 0
0001E3CA 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E3CE 8000                       		dc.w $8000
0001E3D0 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E3D4 8520                       		dc.w $8520
0001E3D6 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E3DA 9000                       		dc.w $9000
0001E3DC 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E3E0 9C00                       		dc.w $9C00
0001E3E2 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E3E6 A260                       		dc.w $A260
0001E3E8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E3EC A360                       		dc.w $A360
0001E3EE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E3F2 A460                       		dc.w $A460
0001E3F4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E3F8 A660                       		dc.w $A660
0001E3FA 0005                       PLC_SLZ2:	dc.w 5
0001E3FC 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E400 6E80                       		dc.w $6E80
0001E402 0000 0000                  		dc.l Nem_Fan		; fan
0001E406 7400                       		dc.w $7400
0001E408 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E40C 7980                       		dc.w $7980
0001E40E 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E412 7B80                       		dc.w $7B80
0001E414 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E418 9B00                       		dc.w $9B00
0001E41A 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E41E 9E00                       		dc.w $9E00
0001E420                            ; ---------------------------------------------------------------------------
0001E420                            ; Pattern load cues - Spring Yard
0001E420                            ; ---------------------------------------------------------------------------
0001E420 0004                       PLC_SYZ:	dc.w 4
0001E422 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E426 0000                       		dc.w 0
0001E428 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E42C 8000                       		dc.w $8000
0001E42E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E432 8880                       		dc.w $8880
0001E434 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E438 8F60                       		dc.w $8F60
0001E43A 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E43E 9700                       		dc.w $9700
0001E440 0007                       PLC_SYZ2:	dc.w 7
0001E442 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E446 7000                       		dc.w $7000
0001E448 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E44C 72C0                       		dc.w $72C0
0001E44E 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E452 7740                       		dc.w $7740
0001E454 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E458 9FE0                       		dc.w $9FE0
0001E45A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E45E A1E0                       		dc.w $A1E0
0001E460 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E464 A360                       		dc.w $A360
0001E466 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E46A A460                       		dc.w $A460
0001E46C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E470 A660                       		dc.w $A660
0001E472                            ; ---------------------------------------------------------------------------
0001E472                            ; Pattern load cues - Scrap Brain
0001E472                            ; ---------------------------------------------------------------------------
0001E472 000B                       PLC_SBZ:	dc.w $B
0001E474 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E478 0000                       		dc.w 0
0001E47A 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E47E 5800                       		dc.w $5800
0001E480 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E484 5D00                       		dc.w $5D00
0001E486 0000 0000                  		dc.l Nem_Girder		; girder
0001E48A 5E00                       		dc.w $5E00
0001E48C 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E490 6040                       		dc.w $6040
0001E492 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E496 6880                       		dc.w $6880
0001E498 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E49C 6900                       		dc.w $6900
0001E49E 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E4A2 7220                       		dc.w $7220
0001E4A4 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E4A8 76A0                       		dc.w $76A0
0001E4AA 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E4AE 7B20                       		dc.w $7B20
0001E4B0 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E4B4 7EA0                       		dc.w $7EA0
0001E4B6 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E4BA 9860                       		dc.w $9860
0001E4BC 000C                       PLC_SBZ2:	dc.w $C
0001E4BE 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E4C2 5600                       		dc.w $5600
0001E4C4 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E4C8 8000                       		dc.w $8000
0001E4CA 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E4CE 8520                       		dc.w $8520
0001E4D0 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E4D4 8C00                       		dc.w $8C00
0001E4D6 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E4DA 8DE0                       		dc.w $8DE0
0001E4DC 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E4E0 8FC0                       		dc.w $8FC0
0001E4E2 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E4E6 9240                       		dc.w $9240
0001E4E8 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E4EC 7F20                       		dc.w $7F20
0001E4EE 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E4F2 9BE0                       		dc.w $9BE0
0001E4F4 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E4F8 A1E0                       		dc.w $A1E0
0001E4FA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E4FE A360                       		dc.w $A360
0001E500 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E504 A460                       		dc.w $A460
0001E506 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E50A A660                       		dc.w $A660
0001E50C                            ; ---------------------------------------------------------------------------
0001E50C                            ; Pattern load cues - DR. Breen Hill
0001E50C                            ; ---------------------------------------------------------------------------
0001E50C 000B                       PLC_BHZ:	dc.w $B
0001E50E 0000 0000                  		dc.l Nem_BHZ_1st	; GHZ main patterns
0001E512 0000                       		dc.w 0
0001E514 0000 0000                  		dc.l Nem_BHZ_2nd	; GHZ secondary	patterns
0001E518 39A0                       		dc.w $39A0
0001E51A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E51E 6B00                       		dc.w $6B00
0001E520 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E524 7A00                       		dc.w $7A00
0001E526 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E52A 8000                       		dc.w $8000
0001E52C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E530 8880                       		dc.w $8880
0001E532 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E536 8F60                       		dc.w $8F60
0001E538 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E53C 9360                       		dc.w $9360
0001E53E 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E542 9E00                       		dc.w $9E00
0001E544 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E548 A360                       		dc.w $A360
0001E54A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E54E A460                       		dc.w $A460
0001E550 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E554 A660                       		dc.w $A660
0001E556 0005                       PLC_BHZ2:	dc.w 5
0001E558 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E55C 7000                       		dc.w $7000
0001E55E 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E562 71C0                       		dc.w $71C0
0001E564 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E568 7300                       		dc.w $7300
0001E56A 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E56E 7540                       		dc.w $7540
0001E570 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E574 A1E0                       		dc.w $A1E0
0001E576 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E57A 6980                       		dc.w $6980
0001E57C                            ; ---------------------------------------------------------------------------
0001E57C                            ; Pattern load cues - title card
0001E57C                            ; ---------------------------------------------------------------------------
0001E57C 0000                       PLC_TitleCard:	dc.w 0
0001E57E 0000 0000                  		dc.l Nem_TitleCard
0001E582 B000                       		dc.w $B000
0001E584                            ; ---------------------------------------------------------------------------
0001E584                            ; Pattern load cues - act 3 boss
0001E584                            ; ---------------------------------------------------------------------------
0001E584 0005                       PLC_Boss:	dc.w 5
0001E586 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E58A 8000                       		dc.w $8000
0001E58C 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E590 8D80                       		dc.w $8D80
0001E592 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E596 93A0                       		dc.w $93A0
0001E598 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E59C A300                       		dc.w $A300
0001E59E 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E5A2 A300                       		dc.w $A300
0001E5A4 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E5A8 A540                       		dc.w $A540
0001E5AA                            ; ---------------------------------------------------------------------------
0001E5AA                            ; Pattern load cues - act 1/2 signpost
0001E5AA                            ; ---------------------------------------------------------------------------
0001E5AA 0002                       PLC_Signpost:	dc.w 2
0001E5AC 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E5B0 D000                       		dc.w $D000
0001E5B2 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E5B6 96C0                       		dc.w $96C0
0001E5B8 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E5BC 8C40                       		dc.w $8C40
0001E5BE                            ; ---------------------------------------------------------------------------
0001E5BE                            ; Pattern load cues - beta special stage warp effect
0001E5BE                            ; ---------------------------------------------------------------------------
0001E5BE 0000                       PLC_Warp:	dc.w 0
0001E5C0 0000 0000                  		dc.l Nem_Warp
0001E5C4 A820                       		dc.w $A820
0001E5C6                            ; ---------------------------------------------------------------------------
0001E5C6                            ; Pattern load cues - special stage
0001E5C6                            ; ---------------------------------------------------------------------------
0001E5C6 0010                       PLC_SpeStage:	dc.w $10
0001E5C8 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E5CC 0000                       		dc.w 0
0001E5CE 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E5D2 0A20                       		dc.w $A20
0001E5D4 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E5D8 2840                       		dc.w $2840
0001E5DA 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E5DE 4760                       		dc.w $4760
0001E5E0 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E5E4 4A20                       		dc.w $4A20
0001E5E6 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E5EA 4C60                       		dc.w $4C60
0001E5EC 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E5F0 5E00                       		dc.w $5E00
0001E5F2 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E5F6 6E00                       		dc.w $6E00
0001E5F8 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E5FC 7E00                       		dc.w $7E00
0001E5FE 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E602 8E00                       		dc.w $8E00
0001E604 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E608 9E00                       		dc.w $9E00
0001E60A 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E60E AE00                       		dc.w $AE00
0001E610 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E614 BE00                       		dc.w $BE00
0001E616 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E61A EE00                       		dc.w $EE00
0001E61C 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E620 F2E0                       		dc.w $F2E0
0001E622 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E626 F400                       		dc.w $F400
0001E628 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E62C F520                       		dc.w $F520
0001E62E 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E632 F2E0                       		dc.w $F2E0
0001E634 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E638 F400                       		dc.w $F400
0001E63A 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E63E F520                       		dc.w $F520
0001E640                            ; ---------------------------------------------------------------------------
0001E640                            ; Pattern load cues - GHZ animals
0001E640                            ; ---------------------------------------------------------------------------
0001E640 0001                       PLC_GHZAnimals:	dc.w 1
0001E642 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E646 B000                       		dc.w $B000
0001E648 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E64C B240                       		dc.w $B240
0001E64E                            ; ---------------------------------------------------------------------------
0001E64E                            ; Pattern load cues - LZ animals
0001E64E                            ; ---------------------------------------------------------------------------
0001E64E 0001                       PLC_LZAnimals:	dc.w 1
0001E650 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E654 B000                       		dc.w $B000
0001E656 0000 0000                  		dc.l Nem_Seal		; seal
0001E65A B240                       		dc.w $B240
0001E65C                            ; ---------------------------------------------------------------------------
0001E65C                            ; Pattern load cues - MZ animals
0001E65C                            ; ---------------------------------------------------------------------------
0001E65C 0001                       PLC_MZAnimals:	dc.w 1
0001E65E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E662 B000                       		dc.w $B000
0001E664 0000 0000                  		dc.l Nem_Seal		; seal
0001E668 B240                       		dc.w $B240
0001E66A                            ; ---------------------------------------------------------------------------
0001E66A                            ; Pattern load cues - SLZ animals
0001E66A                            ; ---------------------------------------------------------------------------
0001E66A 0001                       PLC_SLZAnimals:	dc.w 1
0001E66C 0000 0000                  		dc.l Nem_Pig		; pig
0001E670 B000                       		dc.w $B000
0001E672 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E676 B240                       		dc.w $B240
0001E678                            ; ---------------------------------------------------------------------------
0001E678                            ; Pattern load cues - SYZ animals
0001E678                            ; ---------------------------------------------------------------------------
0001E678 0001                       PLC_SYZAnimals:	dc.w 1
0001E67A 0000 0000                  		dc.l Nem_Pig		; pig
0001E67E B000                       		dc.w $B000
0001E680 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E684 B240                       		dc.w $B240
0001E686                            ; ---------------------------------------------------------------------------
0001E686                            ; Pattern load cues - SBZ animals
0001E686                            ; ---------------------------------------------------------------------------
0001E686 0001                       PLC_SBZAnimals:	dc.w 1
0001E688 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E68C B000                       		dc.w $B000
0001E68E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E692 B240                       		dc.w $B240
0001E694                            ; ---------------------------------------------------------------------------
0001E694                            ; Pattern load cues - special stage results screen
0001E694                            ; ---------------------------------------------------------------------------
0001E694 0001                       PLC_SpeStResult:dc.w 1
0001E696 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E69A A820                       		dc.w $A820
0001E69C 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E6A0 AA20                       		dc.w $AA20
0001E6A2                            ; ---------------------------------------------------------------------------
0001E6A2                            ; Pattern load cues - ending sequence
0001E6A2                            ; ---------------------------------------------------------------------------
0001E6A2 000E                       PLC_Ending:	dc.w $E
0001E6A4 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E6A8 0000                       		dc.w 0
0001E6AA 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E6AE 39A0                       		dc.w $39A0
0001E6B0 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E6B4 6B00                       		dc.w $6B00
0001E6B6 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E6BA 7400                       		dc.w $7400
0001E6BC 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E6C0 78A0                       		dc.w $78A0
0001E6C2 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E6C6 7C20                       		dc.w $7C20
0001E6C8 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E6CC A480                       		dc.w $A480
0001E6CE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E6D2 AA60                       		dc.w $AA60
0001E6D4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E6D8 ACA0                       		dc.w $ACA0
0001E6DA 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E6DE AE60                       		dc.w $AE60
0001E6E0 0000 0000                  		dc.l Nem_Seal		; seal
0001E6E4 B0A0                       		dc.w $B0A0
0001E6E6 0000 0000                  		dc.l Nem_Pig		; pig
0001E6EA B260                       		dc.w $B260
0001E6EC 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E6F0 B4A0                       		dc.w $B4A0
0001E6F2 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E6F6 B660                       		dc.w $B660
0001E6F8 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E6FC B8A0                       		dc.w $B8A0
0001E6FE                            ; ---------------------------------------------------------------------------
0001E6FE                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E6FE                            ; ---------------------------------------------------------------------------
0001E6FE 0002                       PLC_TryAgain:	dc.w 2
0001E700 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E704 78A0                       		dc.w $78A0
0001E706 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E70A 7C20                       		dc.w $7C20
0001E70C 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E710 B400                       		dc.w $B400
0001E712                            ; ---------------------------------------------------------------------------
0001E712                            ; Pattern load cues - Eggman on SBZ 2
0001E712                            ; ---------------------------------------------------------------------------
0001E712 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E714 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E718 A300                       		dc.w $A300
0001E71A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E71E 8000                       		dc.w $8000
0001E720 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E724 9400                       		dc.w $9400
0001E726                            ; ---------------------------------------------------------------------------
0001E726                            ; Pattern load cues - final boss
0001E726                            ; ---------------------------------------------------------------------------
0001E726 0004                       PLC_FZBoss:	dc.w 4
0001E728 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E72C 7400                       		dc.w $7400
0001E72E 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E732 6000                       		dc.w $6000
0001E734 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E738 8000                       		dc.w $8000
0001E73A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E73E 8E00                       		dc.w $8E00
0001E740 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E744 A540                       		dc.w $A540
0001E746                            ; ---------------------------------------------------------------------------
0001E746                            ; Pattern load cues - Teto boss
0001E746                            ; ---------------------------------------------------------------------------
0001E746 0002                       PLC_TetoBoss:	dc.w 2
0001E748 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E74C 8000                       		dc.w $8000
0001E74E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E752 93A0                       		dc.w $93A0
0001E754 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E758 9000                       		dc.w $9000
0001E75A                            		even
0001E75A                            		even
0001E75A                            
0001E75A                            		incbin	misc\padding.bin
0001E848                            		even
0001E848                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001EC9E                            		even
0001EC9E                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001ED36                            		even
0001ED36                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EE78                            		even
0001EE78                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EEC6                            		even
0001EEC6                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EFDA                            		even
0001EFDA                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FEA4                            		even
0001FEA4                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023FAA                            		even
00023FAA                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023FDE                            		even
00023FDE                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
0002409C                            		even
0002409C                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024544                            		even
00024544                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000245A2                            		even
000245A2                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
000251A8                            		even
000251A8                            ; ---------------------------------------------------------------------------
000251A8                            ; Sprite mappings - Sonic
000251A8                            ; ---------------------------------------------------------------------------
000251A8                            Map_Sonic:
000251A8                            	include "_maps\Sonic.asm"
000251A8                            Map_a933:
000251A8 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
000251AA 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
000251AC 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
000251AE 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
000251B0 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
000251B2 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
000251B4 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
000251B6 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
000251B8 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
000251BA 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
000251BC 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
000251BE 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
000251C0 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
000251C2 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
000251C4 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
000251C6 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
000251C8 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
000251CA 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
000251CC 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
000251CE 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
000251D0 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
000251D2 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
000251D4 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
000251D6 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
000251D8 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
000251DA 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
000251DC 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
000251DE 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
000251E0 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
000251E2 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
000251E4 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
000251E6 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
000251E8 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
000251EA 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
000251EC 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
000251EE 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
000251F0 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
000251F2 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
000251F4 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
000251F6 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
000251F8 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
000251FA 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
000251FC 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
000251FE 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
00025200 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
00025202 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
00025204 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
00025206 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
00025208 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
0002520A 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
0002520C 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
0002520E 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
00025210 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
00025212 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
00025214 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
00025216 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
00025218 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
0002521A 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
0002521C 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
0002521E 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
00025220 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
00025222 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
00025224 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
00025226 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
00025228 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
0002522A 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
0002522C 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
0002522E 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
00025230 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
00025232 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
00025234 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
00025236 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
00025238 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
0002523A 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
0002523C 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
0002523E 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00025240 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00025242 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00025244 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
00025246 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
00025248 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
0002524A 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
0002524C 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
0002524E 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00025250 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00025252 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00025254 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
00025256 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
00025258 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
0002525A 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
0002525C 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
0002525E 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00025260 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00025262 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
00025264 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
00025266 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
00025268 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
0002526A 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
0002526C 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
0002526E 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
00025270 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
00025272 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
00025274 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
00025276 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
00025278 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
0002527A 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
0002527C 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
0002527E 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
00025280 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
00025282 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
00025284 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
00025286 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
00025288 00                         Map_a933_E0: 	dc.b $0
00025289 02                         Map_a933_E1: 	dc.b $2
0002528A ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
0002528F 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00025294 03                         Map_a933_EC: 	dc.b $3
00025295 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002529A FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
0002529F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000252A4 03                         Map_a933_FC: 	dc.b $3
000252A5 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000252AA FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000252AF 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000252B4 03                         Map_a933_10C: 	dc.b $3
000252B5 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000252BA FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000252BF 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000252C4 03                         Map_a933_11C: 	dc.b $3
000252C5 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000252CA 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
000252CF 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000252D4 04                         Map_a933_12C: 	dc.b $4
000252D5 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
000252DA FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
000252DF FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000252E4 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000252E9 02                         Map_a933_141: 	dc.b $2
000252EA EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000252EF FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000252F4 02                         Map_a933_14C: 	dc.b $2
000252F5 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000252FA FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
000252FF 04                         Map_a933_157: 	dc.b $4
00025300 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025305 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
0002530A FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
0002530F 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00025314 02                         Map_a933_16C: 	dc.b $2
00025315 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
0002531A EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
0002531F 03                         Map_a933_177: 	dc.b $3
00025320 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00025325 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
0002532A 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
0002532F 05                         Map_a933_187: 	dc.b $5
00025330 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025335 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
0002533A FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
0002533F 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00025344 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00025349 06                         Map_a933_1A1: 	dc.b $6
0002534A EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002534F EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025354 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00025359 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
0002535E FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025363 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00025368 04                         Map_a933_1C0: 	dc.b $4
00025369 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
0002536E ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025373 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00025378 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
0002537D 05                         Map_a933_1D5: 	dc.b $5
0002537E EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025383 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00025388 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
0002538D 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00025392 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00025397 04                         Map_a933_1EF: 	dc.b $4
00025398 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002539D EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000253A2 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000253A7 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000253AC 05                         Map_a933_204: 	dc.b $5
000253AD ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000253B2 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000253B7 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000253BC FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000253C1 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000253C6 04                         Map_a933_21E: 	dc.b $4
000253C7 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000253CC EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000253D1 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000253D6 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000253DB 02                         Map_a933_233: 	dc.b $2
000253DC F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000253E1 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000253E6 02                         Map_a933_23E: 	dc.b $2
000253E7 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000253EC F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000253F1 04                         Map_a933_249: 	dc.b $4
000253F2 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000253F7 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000253FC FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00025401 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00025406 02                         Map_a933_25E: 	dc.b $2
00025407 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
0002540C F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025411 03                         Map_a933_269: 	dc.b $3
00025412 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00025417 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
0002541C F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025421 06                         Map_a933_279: 	dc.b $6
00025422 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025427 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
0002542C F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025431 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00025436 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002543B FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025440 06                         Map_a933_298: 	dc.b $6
00025441 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025446 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002544B EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025450 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025455 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002545A 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
0002545F 04                         Map_a933_2B7: 	dc.b $4
00025460 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025465 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002546A EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
0002546F 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025474 05                         Map_a933_2CC: 	dc.b $5
00025475 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002547A ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
0002547F F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025484 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00025489 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
0002548E 04                         Map_a933_2E6: 	dc.b $4
0002548F FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025494 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00025499 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
0002549E 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000254A3 05                         Map_a933_2FB: 	dc.b $5
000254A4 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000254A9 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000254AE F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000254B3 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000254B8 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000254BD 02                         Map_a933_315: 	dc.b $2
000254BE EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000254C3 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000254C8 02                         Map_a933_320: 	dc.b $2
000254C9 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000254CE FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000254D3 02                         Map_a933_32B: 	dc.b $2
000254D4 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000254D9 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000254DE 02                         Map_a933_336: 	dc.b $2
000254DF EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000254E4 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000254E9 04                         Map_a933_341: 	dc.b $4
000254EA EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000254EF EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000254F4 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000254F9 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000254FE 03                         Map_a933_356: 	dc.b $3
000254FF EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025504 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025509 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002550E 04                         Map_a933_366: 	dc.b $4
0002550F EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025514 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025519 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002551E FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025523 03                         Map_a933_37B: 	dc.b $3
00025524 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025529 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002552E FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025533 02                         Map_a933_38B: 	dc.b $2
00025534 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025539 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002553E 02                         Map_a933_396: 	dc.b $2
0002553F F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025544 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025549 02                         Map_a933_3A1: 	dc.b $2
0002554A F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002554F F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025554 02                         Map_a933_3AC: 	dc.b $2
00025555 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002555A F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002555F 04                         Map_a933_3B7: 	dc.b $4
00025560 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025565 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002556A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002556F 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025574 02                         Map_a933_3CC: 	dc.b $2
00025575 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002557A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002557F 04                         Map_a933_3D7: 	dc.b $4
00025580 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025585 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002558A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002558F 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025594 02                         Map_a933_3EC: 	dc.b $2
00025595 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002559A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002559F 01                         Map_a933_3F7: 	dc.b $1
000255A0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255A5 01                         Map_a933_3FD: 	dc.b $1
000255A6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255AB 01                         Map_a933_403: 	dc.b $1
000255AC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255B1 01                         Map_a933_409: 	dc.b $1
000255B2 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255B7 01                         Map_a933_40F: 	dc.b $1
000255B8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255BD 02                         Map_a933_415: 	dc.b $2
000255BE F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000255C3 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000255C8 01                         Map_a933_420: 	dc.b $1
000255C9 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255CE 02                         Map_a933_426: 	dc.b $2
000255CF EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000255D4 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000255D9 01                         Map_a933_431: 	dc.b $1
000255DA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255DF 02                         Map_a933_437: 	dc.b $2
000255E0 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000255E5 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000255EA 04                         Map_a933_442: 	dc.b $4
000255EB ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000255F0 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000255F5 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000255FA 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000255FF 06                         Map_a933_457: 	dc.b $6
00025600 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00025605 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
0002560A 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
0002560F 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025614 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00025619 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
0002561E 02                         Map_a933_476: 	dc.b $2
0002561F 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025624 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00025629 02                         Map_a933_481: 	dc.b $2
0002562A 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
0002562F EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025634 04                         Map_a933_48C: 	dc.b $4
00025635 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002563A F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002563F 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025644 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025649 02                         Map_a933_4A1: 	dc.b $2
0002564A F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002564F F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025654 03                         Map_a933_4AC: 	dc.b $3
00025655 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002565A FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002565F 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025664 04                         Map_a933_4BC: 	dc.b $4
00025665 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002566A F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002566F 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025674 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025679 02                         Map_a933_4D1: 	dc.b $2
0002567A EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002567F 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
00025684 04                         Map_a933_4DC: 	dc.b $4
00025685 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002568A 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002568F F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025694 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025699 04                         Map_a933_4F1: 	dc.b $4
0002569A F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002569F 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000256A4 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000256A9 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000256AE 05                         Map_a933_506: 	dc.b $5
000256AF E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000256B4 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000256B9 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000256BE 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000256C3 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000256C8 05                         Map_a933_520: 	dc.b $5
000256C9 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000256CE E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000256D3 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000256D8 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000256DD 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000256E2 02                         Map_a933_53A: 	dc.b $2
000256E3 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000256E8 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000256ED 03                         Map_a933_545: 	dc.b $3
000256EE EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000256F3 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000256F8 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000256FD 02                         Map_a933_555: 	dc.b $2
000256FE ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025703 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025708 03                         Map_a933_560: 	dc.b $3
00025709 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002570E 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025713 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025718 02                         Map_a933_570: 	dc.b $2
00025719 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002571E FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025723 03                         Map_a933_57B: 	dc.b $3
00025724 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00025729 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
0002572E E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025733 03                         Map_a933_58B: 	dc.b $3
00025734 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025739 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002573E F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025743 05                         Map_a933_59B: 	dc.b $5
00025744 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025749 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002574E F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025753 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025758 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002575D 05                         Map_a933_5B5: 	dc.b $5
0002575E E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025763 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025768 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002576D 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025772 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025777 02                         Map_a933_5CF: 	dc.b $2
00025778 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002577D F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025782 03                         Map_a933_5DA: 	dc.b $3
00025783 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025788 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
0002578D 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025792 01                         Map_a933_5EA: 	dc.b $1
00025793 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00025798 01                         Map_a933_5F0: 	dc.b $1
00025799 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0002579E 01                         Map_a933_5F6: 	dc.b $1
0002579F F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000257A4 04                         Map_a933_5FC: 	dc.b $4
000257A5 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000257AA F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000257AF 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000257B4 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000257B9 03                         Map_a933_611: 	dc.b $3
000257BA F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000257BF FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000257C4 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000257C9 03                         Map_a933_621: 	dc.b $3
000257CA F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000257CF F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000257D4 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000257D9 03                         Map_a933_631: 	dc.b $3
000257DA EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000257DF FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000257E4 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000257E9 02                         Map_a933_641: 	dc.b $2
000257EA F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000257EF F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000257F4 02                         Map_a933_64C: 	dc.b $2
000257F5 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000257FA EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000257FF 03                         Map_a933_657: 	dc.b $3
00025800 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00025805 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
0002580A 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
0002580F 02                         Map_a933_667: 	dc.b $2
00025810 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00025815 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
0002581A 04                         Map_a933_672: 	dc.b $4
0002581B ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025820 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00025825 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
0002582A 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
0002582F 00                         Map_a933_687: 	dc.b $0
00025830 00                         Map_a933_688: 	dc.b $0
00025831 00                         Map_a933_689: 	dc.b $0
00025832 00                         Map_a933_68A: 	dc.b $0
00025833 02                         Map_a933_68B: 	dc.b $2
00025834 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025839 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002583E 00                         Map_a933_696: 	dc.b $0
0002583F 02                         Map_a933_697: 	dc.b $2
00025840 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025845 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002584A 00                         Map_a933_6A2: 	dc.b $0
0002584B 00                         Map_a933_6A3: 	dc.b $0
0002584C 00                         Map_a933_6A4: 	dc.b $0
0002584D 02                         Map_a933_6A5: 	dc.b $2
0002584E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025853 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025858 00                         Map_a933_6B0: 	dc.b $0
00025859 02                         Map_a933_6B1: 	dc.b $2
0002585A F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002585F EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025864 00                         Map_a933_6BC: 	dc.b $0
00025865 00                         Map_a933_6BD: 	dc.b $0
00025866 00                         Map_a933_6BE: 	dc.b $0
00025867 02                         Map_a933_6BF: 	dc.b $2
00025868 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002586D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025872 00                         Map_a933_6CA: 	dc.b $0
00025873 02                         Map_a933_6CB: 	dc.b $2
00025874 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025879 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002587E 00                         Map_a933_6D6: 	dc.b $0
00025880 00                         	even
00025880 00                         	even
00025880                            
00025880                            ; ---------------------------------------------------------------------------
00025880                            ; Uncompressed graphics	loading	array for Sonic
00025880                            ; ---------------------------------------------------------------------------
00025880                            SonicDynPLC:
00025880                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025880                            DPLC_33c5:
00025880 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00025882 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00025884 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
00025886 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
00025888 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
0002588A 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
0002588C 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
0002588E 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00025890 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00025892 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00025894 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
00025896 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
00025898 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
0002589A 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
0002589C 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
0002589E 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
000258A0 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
000258A2 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
000258A4 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
000258A6 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
000258A8 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
000258AA 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
000258AC 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
000258AE 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
000258B0 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
000258B2 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
000258B4 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
000258B6 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
000258B8 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
000258BA 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
000258BC 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
000258BE 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
000258C0 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
000258C2 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
000258C4 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
000258C6 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
000258C8 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
000258CA 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
000258CC 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
000258CE 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
000258D0 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
000258D2 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
000258D4 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
000258D6 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
000258D8 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
000258DA 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
000258DC 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
000258DE 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
000258E0 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
000258E2 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
000258E4 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
000258E6 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
000258E8 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
000258EA 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
000258EC 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
000258EE 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
000258F0 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
000258F2 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
000258F4 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
000258F6 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
000258F8 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
000258FA 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
000258FC 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
000258FE 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
00025900 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
00025902 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
00025904 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
00025906 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
00025908 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
0002590A 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
0002590C 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
0002590E 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
00025910 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00025912 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00025914 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
00025916 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
00025918 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
0002591A 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
0002591C 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
0002591E 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
00025920 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00025922 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00025924 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
00025926 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
00025928 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
0002592A 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
0002592C 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
0002592E 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
00025930 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00025932 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00025934 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
00025936 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
00025938 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
0002593A 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
0002593C 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
0002593E 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00025940 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00025942 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00025944 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
00025946 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00025948 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
0002594A 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
0002594C 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
0002594E 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00025950 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00025952 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00025954 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00025956 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00025958 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
0002595A 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
0002595C 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
0002595E 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00025960 00                         DPLC_33c5_E0: 	dc.b $0
00025961 02                         DPLC_33c5_E1: 	dc.b $2
00025962 F000                       	dc.b $F0, $0
00025964 1010                       	dc.b $10, $10
00025966 03                         DPLC_33c5_E6: 	dc.b $3
00025967 5012                       	dc.b $50, $12
00025969 5018                       	dc.b $50, $18
0002596B 201E                       	dc.b $20, $1E
0002596D 03                         DPLC_33c5_ED: 	dc.b $3
0002596E 5021                       	dc.b $50, $21
00025970 5018                       	dc.b $50, $18
00025972 201E                       	dc.b $20, $1E
00025974 03                         DPLC_33c5_F4: 	dc.b $3
00025975 5021                       	dc.b $50, $21
00025977 5018                       	dc.b $50, $18
00025979 2027                       	dc.b $20, $27
0002597B 03                         DPLC_33c5_FB: 	dc.b $3
0002597C 802A                       	dc.b $80, $2A
0002597E 2033                       	dc.b $20, $33
00025980 2036                       	dc.b $20, $36
00025982 04                         DPLC_33c5_102: 	dc.b $4
00025983 7039                       	dc.b $70, $39
00025985 5041                       	dc.b $50, $41
00025987 5047                       	dc.b $50, $47
00025989 104D                       	dc.b $10, $4D
0002598B 02                         DPLC_33c5_10B: 	dc.b $2
0002598C 7039                       	dc.b $70, $39
0002598E B04F                       	dc.b $B0, $4F
00025990 02                         DPLC_33c5_110: 	dc.b $2
00025991 505B                       	dc.b $50, $5B
00025993 8061                       	dc.b $80, $61
00025995 04                         DPLC_33c5_115: 	dc.b $4
00025996 505B                       	dc.b $50, $5B
00025998 506A                       	dc.b $50, $6A
0002599A 5070                       	dc.b $50, $70
0002599C 1076                       	dc.b $10, $76
0002599E 02                         DPLC_33c5_11E: 	dc.b $2
0002599F F4F0                       	dc.b $F4, $F0
000259A1 1500                       	dc.b $15, $0
000259A3 03                         DPLC_33c5_123: 	dc.b $3
000259A4 7039                       	dc.b $70, $39
000259A6 3078                       	dc.b $30, $78
000259A8 507C                       	dc.b $50, $7C
000259AA 05                         DPLC_33c5_12A: 	dc.b $5
000259AB 5082                       	dc.b $50, $82
000259AD 5088                       	dc.b $50, $88
000259AF 208E                       	dc.b $20, $8E
000259B1 5091                       	dc.b $50, $91
000259B3 0097                       	dc.b $0, $97
000259B5 06                         DPLC_33c5_135: 	dc.b $6
000259B6 5082                       	dc.b $50, $82
000259B8 1098                       	dc.b $10, $98
000259BA 309A                       	dc.b $30, $9A
000259BC 509E                       	dc.b $50, $9E
000259BE 30A4                       	dc.b $30, $A4
000259C0 00A8                       	dc.b $0, $A8
000259C2 04                         DPLC_33c5_142: 	dc.b $4
000259C3 50A9                       	dc.b $50, $A9
000259C5 10AF                       	dc.b $10, $AF
000259C7 70B1                       	dc.b $70, $B1
000259C9 20B9                       	dc.b $20, $B9
000259CB 05                         DPLC_33c5_14B: 	dc.b $5
000259CC 50BC                       	dc.b $50, $BC
000259CE 30C2                       	dc.b $30, $C2
000259D0 70C6                       	dc.b $70, $C6
000259D2 20CE                       	dc.b $20, $CE
000259D4 10D1                       	dc.b $10, $D1
000259D6 04                         DPLC_33c5_156: 	dc.b $4
000259D7 50BC                       	dc.b $50, $BC
000259D9 10D3                       	dc.b $10, $D3
000259DB 70D5                       	dc.b $70, $D5
000259DD 20DD                       	dc.b $20, $DD
000259DF 05                         DPLC_33c5_15F: 	dc.b $5
000259E0 5082                       	dc.b $50, $82
000259E2 1098                       	dc.b $10, $98
000259E4 008E                       	dc.b $0, $8E
000259E6 70E0                       	dc.b $70, $E0
000259E8 20E8                       	dc.b $20, $E8
000259EA 04                         DPLC_33c5_16A: 	dc.b $4
000259EB 70EB                       	dc.b $70, $EB
000259ED 50F3                       	dc.b $50, $F3
000259EF 10F9                       	dc.b $10, $F9
000259F1 50FB                       	dc.b $50, $FB
000259F3 02                         DPLC_33c5_173: 	dc.b $2
000259F4 70EB                       	dc.b $70, $EB
000259F6 B101                       	dc.b $B1, $1
000259F8 02                         DPLC_33c5_178: 	dc.b $2
000259F9 510D                       	dc.b $51, $D
000259FB 8113                       	dc.b $81, $13
000259FD 04                         DPLC_33c5_17D: 	dc.b $4
000259FE 510D                       	dc.b $51, $D
00025A00 511C                       	dc.b $51, $1C
00025A02 1122                       	dc.b $11, $22
00025A04 5124                       	dc.b $51, $24
00025A06 02                         DPLC_33c5_186: 	dc.b $2
00025A07 510D                       	dc.b $51, $D
00025A09 B12A                       	dc.b $B1, $2A
00025A0B 03                         DPLC_33c5_18B: 	dc.b $3
00025A0C 70EB                       	dc.b $70, $EB
00025A0E 0101                       	dc.b $1, $1
00025A10 8136                       	dc.b $81, $36
00025A12 06                         DPLC_33c5_192: 	dc.b $6
00025A13 513F                       	dc.b $51, $3F
00025A15 1145                       	dc.b $11, $45
00025A17 1147                       	dc.b $11, $47
00025A19 8149                       	dc.b $81, $49
00025A1B 0152                       	dc.b $1, $52
00025A1D 0153                       	dc.b $1, $53
00025A1F 06                         DPLC_33c5_19F: 	dc.b $6
00025A20 513F                       	dc.b $51, $3F
00025A22 2154                       	dc.b $21, $54
00025A24 1157                       	dc.b $11, $57
00025A26 1159                       	dc.b $11, $59
00025A28 815B                       	dc.b $81, $5B
00025A2A 0152                       	dc.b $1, $52
00025A2C 04                         DPLC_33c5_1AC: 	dc.b $4
00025A2D 5164                       	dc.b $51, $64
00025A2F 116A                       	dc.b $11, $6A
00025A31 816C                       	dc.b $81, $6C
00025A33 1175                       	dc.b $11, $75
00025A35 05                         DPLC_33c5_1B5: 	dc.b $5
00025A36 5177                       	dc.b $51, $77
00025A38 217D                       	dc.b $21, $7D
00025A3A 1180                       	dc.b $11, $80
00025A3C 7182                       	dc.b $71, $82
00025A3E 218A                       	dc.b $21, $8A
00025A40 04                         DPLC_33c5_1C0: 	dc.b $4
00025A41 5177                       	dc.b $51, $77
00025A43 118D                       	dc.b $11, $8D
00025A45 818F                       	dc.b $81, $8F
00025A47 1198                       	dc.b $11, $98
00025A49 05                         DPLC_33c5_1C9: 	dc.b $5
00025A4A 513F                       	dc.b $51, $3F
00025A4C 819A                       	dc.b $81, $9A
00025A4E 1159                       	dc.b $11, $59
00025A50 11A3                       	dc.b $11, $A3
00025A52 0152                       	dc.b $1, $52
00025A54 02                         DPLC_33c5_1D4: 	dc.b $2
00025A55 51A5                       	dc.b $51, $A5
00025A57 B1AB                       	dc.b $B1, $AB
00025A59 02                         DPLC_33c5_1D9: 	dc.b $2
00025A5A 505B                       	dc.b $50, $5B
00025A5C B1B7                       	dc.b $B1, $B7
00025A5E 02                         DPLC_33c5_1DE: 	dc.b $2
00025A5F 51A5                       	dc.b $51, $A5
00025A61 B1C3                       	dc.b $B1, $C3
00025A63 02                         DPLC_33c5_1E3: 	dc.b $2
00025A64 505B                       	dc.b $50, $5B
00025A66 B1CF                       	dc.b $B1, $CF
00025A68 04                         DPLC_33c5_1E8: 	dc.b $4
00025A69 51DB                       	dc.b $51, $DB
00025A6B 11E1                       	dc.b $11, $E1
00025A6D B1E3                       	dc.b $B1, $E3
00025A6F 01EF                       	dc.b $1, $EF
00025A71 03                         DPLC_33c5_1F1: 	dc.b $3
00025A72 51F0                       	dc.b $51, $F0
00025A74 11F6                       	dc.b $11, $F6
00025A76 B1F8                       	dc.b $B1, $F8
00025A78 04                         DPLC_33c5_1F8: 	dc.b $4
00025A79 51DB                       	dc.b $51, $DB
00025A7B 1204                       	dc.b $12, $4
00025A7D B206                       	dc.b $B2, $6
00025A7F 01EF                       	dc.b $1, $EF
00025A81 03                         DPLC_33c5_201: 	dc.b $3
00025A82 51F0                       	dc.b $51, $F0
00025A84 11F6                       	dc.b $11, $F6
00025A86 B212                       	dc.b $B2, $12
00025A88 02                         DPLC_33c5_208: 	dc.b $2
00025A89 521E                       	dc.b $52, $1E
00025A8B B224                       	dc.b $B2, $24
00025A8D 02                         DPLC_33c5_20D: 	dc.b $2
00025A8E 510D                       	dc.b $51, $D
00025A90 B230                       	dc.b $B2, $30
00025A92 02                         DPLC_33c5_212: 	dc.b $2
00025A93 521E                       	dc.b $52, $1E
00025A95 B23C                       	dc.b $B2, $3C
00025A97 02                         DPLC_33c5_217: 	dc.b $2
00025A98 510D                       	dc.b $51, $D
00025A9A B248                       	dc.b $B2, $48
00025A9C 04                         DPLC_33c5_21C: 	dc.b $4
00025A9D 5254                       	dc.b $52, $54
00025A9F 125A                       	dc.b $12, $5A
00025AA1 B25C                       	dc.b $B2, $5C
00025AA3 0268                       	dc.b $2, $68
00025AA5 02                         DPLC_33c5_225: 	dc.b $2
00025AA6 7269                       	dc.b $72, $69
00025AA8 B271                       	dc.b $B2, $71
00025AAA 04                         DPLC_33c5_22A: 	dc.b $4
00025AAB 5254                       	dc.b $52, $54
00025AAD 127D                       	dc.b $12, $7D
00025AAF B27F                       	dc.b $B2, $7F
00025AB1 0268                       	dc.b $2, $68
00025AB3 02                         DPLC_33c5_233: 	dc.b $2
00025AB4 7269                       	dc.b $72, $69
00025AB6 B28B                       	dc.b $B2, $8B
00025AB8 01                         DPLC_33c5_238: 	dc.b $1
00025AB9 F297                       	dc.b $F2, $97
00025ABB 01                         DPLC_33c5_23B: 	dc.b $1
00025ABC F2A7                       	dc.b $F2, $A7
00025ABE 01                         DPLC_33c5_23E: 	dc.b $1
00025ABF F2B7                       	dc.b $F2, $B7
00025AC1 01                         DPLC_33c5_241: 	dc.b $1
00025AC2 F2C7                       	dc.b $F2, $C7
00025AC4 01                         DPLC_33c5_244: 	dc.b $1
00025AC5 F2D7                       	dc.b $F2, $D7
00025AC7 02                         DPLC_33c5_247: 	dc.b $2
00025AC8 B2E7                       	dc.b $B2, $E7
00025ACA 22F3                       	dc.b $22, $F3
00025ACC 01                         DPLC_33c5_24C: 	dc.b $1
00025ACD F2F6                       	dc.b $F2, $F6
00025ACF 02                         DPLC_33c5_24F: 	dc.b $2
00025AD0 B306                       	dc.b $B3, $6
00025AD2 2312                       	dc.b $23, $12
00025AD4 01                         DPLC_33c5_254: 	dc.b $1
00025AD5 F315                       	dc.b $F3, $15
00025AD7 02                         DPLC_33c5_257: 	dc.b $2
00025AD8 5325                       	dc.b $53, $25
00025ADA B32B                       	dc.b $B3, $2B
00025ADC 04                         DPLC_33c5_25C: 	dc.b $4
00025ADD 5337                       	dc.b $53, $37
00025ADF 733D                       	dc.b $73, $3D
00025AE1 1345                       	dc.b $13, $45
00025AE3 0347                       	dc.b $3, $47
00025AE5 02                         DPLC_33c5_265: 	dc.b $2
00025AE6 D348                       	dc.b $D3, $48
00025AE8 34EC                       	dc.b $34, $EC
00025AEA 02                         DPLC_33c5_26A: 	dc.b $2
00025AEB F528                       	dc.b $F5, $28
00025AED 0538                       	dc.b $5, $38
00025AEF 02                         DPLC_33c5_26F: 	dc.b $2
00025AF0 F539                       	dc.b $F5, $39
00025AF2 0549                       	dc.b $5, $49
00025AF4 02                         DPLC_33c5_274: 	dc.b $2
00025AF5 E356                       	dc.b $E3, $56
00025AF7 054A                       	dc.b $5, $4A
00025AF9 01                         DPLC_33c5_279: 	dc.b $1
00025AFA 8365                       	dc.b $83, $65
00025AFC 03                         DPLC_33c5_27C: 	dc.b $3
00025AFD 736E                       	dc.b $73, $6E
00025AFF 0376                       	dc.b $3, $76
00025B01 3377                       	dc.b $33, $77
00025B03 02                         DPLC_33c5_283: 	dc.b $2
00025B04 E37B                       	dc.b $E3, $7B
00025B06 054A                       	dc.b $5, $4A
00025B08 01                         DPLC_33c5_288: 	dc.b $1
00025B09 D561                       	dc.b $D5, $61
00025B0B 04                         DPLC_33c5_28B: 	dc.b $4
00025B0C B399                       	dc.b $B3, $99
00025B0E 33A5                       	dc.b $33, $A5
00025B10 03A9                       	dc.b $3, $A9
00025B12 03AA                       	dc.b $3, $AA
00025B14 04                         DPLC_33c5_294: 	dc.b $4
00025B15 B3AB                       	dc.b $B3, $AB
00025B17 33B7                       	dc.b $33, $B7
00025B19 03BB                       	dc.b $3, $BB
00025B1B 03BC                       	dc.b $3, $BC
00025B1D 05                         DPLC_33c5_29D: 	dc.b $5
00025B1E 83BD                       	dc.b $83, $BD
00025B20 13C6                       	dc.b $13, $C6
00025B22 53C8                       	dc.b $53, $C8
00025B24 13CE                       	dc.b $13, $CE
00025B26 03D0                       	dc.b $3, $D0
00025B28 05                         DPLC_33c5_2A8: 	dc.b $5
00025B29 83D1                       	dc.b $83, $D1
00025B2B 13DA                       	dc.b $13, $DA
00025B2D 53C8                       	dc.b $53, $C8
00025B2F 13CE                       	dc.b $13, $CE
00025B31 03D0                       	dc.b $3, $D0
00025B33 02                         DPLC_33c5_2B3: 	dc.b $2
00025B34 83DC                       	dc.b $83, $DC
00025B36 73E5                       	dc.b $73, $E5
00025B38 03                         DPLC_33c5_2B8: 	dc.b $3
00025B39 83ED                       	dc.b $83, $ED
00025B3B 23F6                       	dc.b $23, $F6
00025B3D 13F9                       	dc.b $13, $F9
00025B3F 02                         DPLC_33c5_2BF: 	dc.b $2
00025B40 83FB                       	dc.b $83, $FB
00025B42 7404                       	dc.b $74, $4
00025B44 03                         DPLC_33c5_2C4: 	dc.b $3
00025B45 83ED                       	dc.b $83, $ED
00025B47 240C                       	dc.b $24, $C
00025B49 140F                       	dc.b $14, $F
00025B4B 02                         DPLC_33c5_2CB: 	dc.b $2
00025B4C 5411                       	dc.b $54, $11
00025B4E B417                       	dc.b $B4, $17
00025B50 03                         DPLC_33c5_2D0: 	dc.b $3
00025B51 8423                       	dc.b $84, $23
00025B53 342C                       	dc.b $34, $2C
00025B55 0430                       	dc.b $4, $30
00025B57 03                         DPLC_33c5_2D7: 	dc.b $3
00025B58 7431                       	dc.b $74, $31
00025B5A 1439                       	dc.b $14, $39
00025B5C B43B                       	dc.b $B4, $3B
00025B5E 05                         DPLC_33c5_2DE: 	dc.b $5
00025B5F 7447                       	dc.b $74, $47
00025B61 144F                       	dc.b $14, $4F
00025B63 5451                       	dc.b $54, $51
00025B65 3457                       	dc.b $34, $57
00025B67 045B                       	dc.b $4, $5B
00025B69 05                         DPLC_33c5_2E9: 	dc.b $5
00025B6A 745C                       	dc.b $74, $5C
00025B6C 144F                       	dc.b $14, $4F
00025B6E 5464                       	dc.b $54, $64
00025B70 3457                       	dc.b $34, $57
00025B72 045B                       	dc.b $4, $5B
00025B74 02                         DPLC_33c5_2F4: 	dc.b $2
00025B75 246A                       	dc.b $24, $6A
00025B77 F46D                       	dc.b $F4, $6D
00025B79 03                         DPLC_33c5_2F9: 	dc.b $3
00025B7A 247D                       	dc.b $24, $7D
00025B7C B480                       	dc.b $B4, $80
00025B7E 248C                       	dc.b $24, $8C
00025B80 01                         DPLC_33c5_300: 	dc.b $1
00025B81 B48F                       	dc.b $B4, $8F
00025B83 01                         DPLC_33c5_303: 	dc.b $1
00025B84 549B                       	dc.b $54, $9B
00025B86 01                         DPLC_33c5_306: 	dc.b $1
00025B87 14A1                       	dc.b $14, $A1
00025B89 02                         DPLC_33c5_309: 	dc.b $2
00025B8A E356                       	dc.b $E3, $56
00025B8C 054A                       	dc.b $5, $4A
00025B8E 03                         DPLC_33c5_30E: 	dc.b $3
00025B8F 736E                       	dc.b $73, $6E
00025B91 0376                       	dc.b $3, $76
00025B93 3377                       	dc.b $33, $77
00025B95 03                         DPLC_33c5_315: 	dc.b $3
00025B96 B4A3                       	dc.b $B4, $A3
00025B98 14AF                       	dc.b $14, $AF
00025B9A 34B1                       	dc.b $34, $B1
00025B9C 03                         DPLC_33c5_31C: 	dc.b $3
00025B9D 54B5                       	dc.b $54, $B5
00025B9F B4BB                       	dc.b $B4, $BB
00025BA1 1074                       	dc.b $10, $74
00025BA3 02                         DPLC_33c5_323: 	dc.b $2
00025BA4 F4C7                       	dc.b $F4, $C7
00025BA6 24D7                       	dc.b $24, $D7
00025BA8 02                         DPLC_33c5_328: 	dc.b $2
00025BA9 F4DA                       	dc.b $F4, $DA
00025BAB 14EA                       	dc.b $14, $EA
00025BAD 02                         DPLC_33c5_32D: 	dc.b $2
00025BAE F502                       	dc.b $F5, $2
00025BB0 2512                       	dc.b $25, $12
00025BB2 02                         DPLC_33c5_332: 	dc.b $2
00025BB3 F515                       	dc.b $F5, $15
00025BB5 2525                       	dc.b $25, $25
00025BB7 02                         DPLC_33c5_337: 	dc.b $2
00025BB8 F54B                       	dc.b $F5, $4B
00025BBA 755B                       	dc.b $75, $5B
00025BBC 00                         DPLC_33c5_33C: 	dc.b $0
00025BBD 00                         DPLC_33c5_33D: 	dc.b $0
00025BBE 00                         DPLC_33c5_33E: 	dc.b $0
00025BBF 00                         DPLC_33c5_33F: 	dc.b $0
00025BC0 02                         DPLC_33c5_340: 	dc.b $2
00025BC1 F4DA                       	dc.b $F4, $DA
00025BC3 14EA                       	dc.b $14, $EA
00025BC5 00                         DPLC_33c5_345: 	dc.b $0
00025BC6 02                         DPLC_33c5_346: 	dc.b $2
00025BC7 F4DA                       	dc.b $F4, $DA
00025BC9 14EA                       	dc.b $14, $EA
00025BCB 00                         DPLC_33c5_34B: 	dc.b $0
00025BCC 00                         DPLC_33c5_34C: 	dc.b $0
00025BCD 00                         DPLC_33c5_34D: 	dc.b $0
00025BCE 02                         DPLC_33c5_34E: 	dc.b $2
00025BCF F4DA                       	dc.b $F4, $DA
00025BD1 14EA                       	dc.b $14, $EA
00025BD3 00                         DPLC_33c5_353: 	dc.b $0
00025BD4 02                         DPLC_33c5_354: 	dc.b $2
00025BD5 F4DA                       	dc.b $F4, $DA
00025BD7 14EA                       	dc.b $14, $EA
00025BD9 00                         DPLC_33c5_359: 	dc.b $0
00025BDA 00                         DPLC_33c5_35A: 	dc.b $0
00025BDB 00                         DPLC_33c5_35B: 	dc.b $0
00025BDC 02                         DPLC_33c5_35C: 	dc.b $2
00025BDD F4DA                       	dc.b $F4, $DA
00025BDF 14EA                       	dc.b $14, $EA
00025BE1 00                         DPLC_33c5_361: 	dc.b $0
00025BE2 02                         DPLC_33c5_362: 	dc.b $2
00025BE3 F4DA                       	dc.b $F4, $DA
00025BE5 14EA                       	dc.b $14, $EA
00025BE7 00                         DPLC_33c5_367: 	dc.b $0
00025BE8                            	even
00025BE8                            	even
00025BE8                            
00025BE8                            ; ---------------------------------------------------------------------------
00025BE8                            ; Uncompressed graphics	- Sonic
00025BE8                            ; ---------------------------------------------------------------------------
00025BE8                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000309C8                            		even
000309C8                            ; ---------------------------------------------------------------------------
000309C8                            ; Compressed graphics - various
000309C8                            ; ---------------------------------------------------------------------------
000309C8                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030ACC                            		even
00030ACC                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030B06                            		even
00030B06                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030C9C                            		even
00030C9C                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030DE4                            		even
00030DE4                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030EEE                            		even
00030EEE                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030F40                            		even
00030F40                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00031188                            		even
00031188                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0003130E                            		even
0003130E                            ; ---------------------------------------------------------------------------
0003130E                            ; Sprite mappings - walls of the special stage
0003130E                            ; ---------------------------------------------------------------------------
0003130E                            Map_SSWalls:
0003130E                            	include "_maps\SSwalls.asm"
0003130E                            ; ---------------------------------------------------------------------------
0003130E                            ; Sprite mappings - walls of the special stage
0003130E                            ; ---------------------------------------------------------------------------
0003130E 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00031312 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00031316 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003131A 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0003131E 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00031322 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00031326 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003132A 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0003132E 01                         byte_2C584:	dc.b 1
0003132F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00031334 01                         byte_2C58A:	dc.b 1
00031335 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003133A 01                         byte_2C590:	dc.b 1
0003133B F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00031340 01                         byte_2C596:	dc.b 1
00031341 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00031346 01                         byte_2C59C:	dc.b 1
00031347 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003134C 01                         byte_2C5A2:	dc.b 1
0003134D F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00031352 01                         byte_2C5A8:	dc.b 1
00031353 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00031358 01                         byte_2C5AE:	dc.b 1
00031359 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003135E 01                         byte_2C5B4:	dc.b 1
0003135F F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00031364 01                         byte_2C5BA:	dc.b 1
00031365 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003136A 01                         byte_2C5C0:	dc.b 1
0003136B F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00031370 01                         byte_2C5C6:	dc.b 1
00031371 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00031376 01                         byte_2C5CC:	dc.b 1
00031377 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003137C 01                         byte_2C5D2:	dc.b 1
0003137D F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00031382 01                         byte_2C5D8:	dc.b 1
00031383 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00031388 01                         byte_2C5DE:	dc.b 1
00031389 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003138E                            		even
0003138E                            		even
0003138E                            ; ---------------------------------------------------------------------------
0003138E                            ; Compressed graphics - special stage
0003138E                            ; ---------------------------------------------------------------------------
0003138E                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031CC6                            		even
00031CC6                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031E14                            		even
00031E14                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
000332A6                            		even
000332A6                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000335A6                            		even
000335A6                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033A9A                            		even
00033A9A                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033B88                            		even
00033B88                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033C58                            		even
00033C58                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033D4E                            		even
00033D4E                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033DAC                            		even
00033DAC                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033E3E                            		even
00033E3E                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033F00                            		even
00033F00                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033FCE                            		even
00033FCE                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003409A                            		even
0003409A                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00034162                            		even
00034162                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003422C                            		even
0003422C                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000342FC                            		even
000342FC                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000344F0                            		even
000344F0                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00034658                            		even
00034658                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00034708                            		even
00034708                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000347E2                            		even
000347E2                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00034866                            		even
00034866                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000349E4                            		even
000349E4                            ; ---------------------------------------------------------------------------
000349E4                            ; Compressed graphics - GHZ stuff
000349E4                            ; ---------------------------------------------------------------------------
000349E4                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034A2E                            		even
00034A2E                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034B48                            		even
00034B48                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034C34                            		even
00034C34                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034C7C                            		even
00034C7C                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034E1A                            		even
00034E1A                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034ED6                            		even
00034ED6                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
000350EA                            		even
000350EA                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00035216                            		even
00035216                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00035344                            		even
00035344                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000353E2                            		even
000353E2                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00035442                            		even
00035442                            ; ---------------------------------------------------------------------------
00035442                            ; Compressed graphics - LZ stuff
00035442                            ; ---------------------------------------------------------------------------
00035442                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00035566                            		even
00035566                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035D5A                            		even
00035D5A                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035EDA                            		even
00035EDA                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00036044                            		even
00036044                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003669A                            		even
0003669A                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036750                            		even
00036750                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000367F2                            		even
000367F2                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003694E                            		even
0003694E                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000369B2                            		even
000369B2                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036B04                            		even
00036B04                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036FE6                            		even
00036FE6                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00037156                            		even
00037156                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003740E                            		even
0003740E                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00037546                            		even
00037546                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037670                            		even
00037670                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037780                            		even
00037780                            ; ---------------------------------------------------------------------------
00037780                            ; Compressed graphics - MZ stuff
00037780                            ; ---------------------------------------------------------------------------
00037780                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037A0E                            		even
00037A0E                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037ACC                            		even
00037ACC                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037B84                            		even
00037B84                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037BD8                            		even
00037BD8                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037EAA 00                         		even
00037EAA                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000387C0                            		even
000387C0                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038924                            		even
00038924                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000389AC                            		even
000389AC                            ; ---------------------------------------------------------------------------
000389AC                            ; Compressed graphics - SLZ stuff
000389AC                            ; ---------------------------------------------------------------------------
000389AC                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038BE8                            		even
00038BE8                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038D2E                            		even
00038D2E                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038F72                            		even
00038F72                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038FD4                            		even
00038FD4                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000390B6                            		even
000390B6                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00039298                            		even
00039298                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000393A4                            		even
000393A4                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00039448                            		even
00039448                            ; ---------------------------------------------------------------------------
00039448                            ; Compressed graphics - SYZ stuff
00039448                            ; ---------------------------------------------------------------------------
00039448                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000395B2                            		even
000395B2                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00039614                            		even
00039614                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000396F6                            		even
000396F6                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039984                            		even
00039984                            ; ---------------------------------------------------------------------------
00039984                            ; Compressed graphics - SBZ stuff
00039984                            ; ---------------------------------------------------------------------------
00039984                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000399D8                            		even
000399D8                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039C74                            		even
00039C74                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039E78                            		even
00039E78                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003A016                            		even
0003A016                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A346                            		even
0003A346                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A524                            		even
0003A524                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A57C                            		even
0003A57C                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A746 00                         		even
0003A746                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A844                            		even
0003A844                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A9D0                            		even
0003A9D0                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003AA20                            		even
0003AA20                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003AA78                            		even
0003AA78                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003AB74                            		even
0003AB74                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003AC8A                            		even
0003AC8A                            ; ---------------------------------------------------------------------------
0003AC8A                            ; Compressed graphics - enemies
0003AC8A                            ; ---------------------------------------------------------------------------
0003AC8A                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003B0F8 00                         		even
0003B0F8                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003B2A2 00                         		even
0003B2A2                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B664 00                         		even
0003B664                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B84C                            		even
0003B84C                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003BA04 00                         		even
0003BA04                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BB4E                            		even
0003BB4E                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BDD8                            		even
0003BDD8                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C3FC                            		even
0003C3FC                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C5F2                            		even
0003C5F2                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CC10                            		even
0003CC10                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003D010 00                         		even
0003D010                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D30C                            		even
0003D30C                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D554                            		even
0003D554                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D7EC                            		even
0003D7EC                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D9CA                            		even
0003D9CA                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DB58                            		even
0003DB58                            ; ---------------------------------------------------------------------------
0003DB58                            ; Compressed graphics - various
0003DB58                            ; ---------------------------------------------------------------------------
0003DB58                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003E088                            		even
0003E088                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E17E                            		even
0003E17E                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003E284                            		even
0003E284                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E378                            		even
0003E378                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E8BC                            		even
0003E8BC                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EF22                            		even
0003EF22                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003EFD2                            		even
0003EFD2                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F164                            		even
0003F164                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F278                            		even
0003F278                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F34A                            		even
0003F34A                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F7C6                            		even
0003F7C6                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F886                            		even
0003F886                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F9FA                            		even
0003F9FA                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003FCFC                            		even
0003FCFC                            ; ---------------------------------------------------------------------------
0003FCFC                            ; Compressed graphics - continue screen
0003FCFC                            ; ---------------------------------------------------------------------------
0003FCFC                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003FFAC                            		even
0003FFAC                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000401E6                            		even
000401E6                            ; ---------------------------------------------------------------------------
000401E6                            ; Compressed graphics - animals
000401E6                            ; ---------------------------------------------------------------------------
000401E6                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0004033E                            		even
0004033E                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0004049A                            		even
0004049A                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040616                            		even
00040616                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040732                            		even
00040732                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040868                            		even
00040868                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000409A2                            		even
000409A2                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040AFE                            		even
00040AFE                            ; ---------------------------------------------------------------------------
00040AFE                            ; Compressed graphics - primary patterns and block mappings
00040AFE                            ; ---------------------------------------------------------------------------
00040AFE                            Blk16_GHZ:	incbin	map16\ghz.bin
00041412                            		even
00041412                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042D20                            		even
00042D20                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
000440A0                            		even
000440A0                            Blk256_GHZ:	incbin	map256\ghz.bin
000464DA                            		even
000464DA                            Blk16_LZ:	incbin	map16\lz.bin
00046C14                            		even
00046C14                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00049068                            		even
00049068                            Blk256_LZ:	incbin	map256\lz.bin
0004B9E8                            		even
0004B9E8                            Blk16_MZ:	incbin	map16\mz.bin
0004C150                            		even
0004C150                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004EA8C                            		even
0004EA8C                            Blk256_MZ:	incbin	map256\mz.bin
00050230                            		even
00050230                            Blk16_SLZ:	incbin	map16\slz.bin
000508FA                            		even
000508FA                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005284E                            		even
0005284E                            Blk256_SLZ:	incbin	map256\slz.bin
00052EC8                            		even
00052EC8                            Blk16_SYZ:	incbin	map16\syz.bin
00053AEE                            		even
00053AEE                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00058080                            		even
00058080                            Blk256_SYZ:	incbin	map256\syz.bin
0005A0DC                            		even
0005A0DC                            Blk16_SBZ:	incbin	map16\sbz.bin
0005B024                            		even
0005B024                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D9E8                            		even
0005D9E8                            Blk256_SBZ:	incbin	map256\sbz.bin
000604DE                            		even
000604DE                            Blk16_BHZ:	incbin	map16\bhz.bin
00060DF2                            		even
00060DF2                            Nem_BHZ_1st:	incbin	artnem\8x8bhz1.bin	; GHZ primary patterns
00062404                            		even
00062404                            Nem_BHZ_2nd:	incbin	artnem\8x8bhz2.bin	; GHZ secondary patterns
00063798                            		even
00063798                            Blk256_BHZ:	incbin	map256\bhz.bin
000658E8                            		even
000658E8                            ; ---------------------------------------------------------------------------
000658E8                            ; Compressed graphics - bosses and ending sequence
000658E8                            ; ---------------------------------------------------------------------------
000658E8                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00066102 00                         		even
00066102                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00066750                            		even
00066750                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
000667CA                            		even
000667CA                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00066AB4                            		even
00066AB4                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00067338                            		even
00067338                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006808E 00                         		even
0006808E                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000687F6                            		even
000687F6                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00068D76                            		even
00068D76                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00068E96                            		even
00068E96                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00069094                            		even
00069094                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006A272                            		even
0006A272                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006ABB6                            		even
0006ABB6                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006AF8C                            		even
0006AF8C                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006B51C                            		even
0006B51C                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006B7A4                            		even
0006B7A4                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006BD92 00                         		even
0006BD92                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006C01A                            		even
0006C01A                            		incbin	misc\padding2.bin
0006C11E                            		even
0006C11E                            ; ---------------------------------------------------------------------------
0006C11E                            ; Collision data
0006C11E                            ; ---------------------------------------------------------------------------
0006C11E                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006C21E                            		even
0006C21E                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006D21E                            		even
0006D21E                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006E21E                            		even
0006E21E                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006E3D6 00                         		even
0006E3D6                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006E53E                            		even
0006E53E                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006E6CE 00                         		even
0006E6CE                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006E8C2                            		even
0006E8C2                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006EAC8                            		even
0006EAC8                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006ED66                            		even
0006ED66                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
0006EF1E 00                         		even
0006EF1E                            ; ---------------------------------------------------------------------------
0006EF1E                            ; Special layouts
0006EF1E                            ; ---------------------------------------------------------------------------
0006EF1E                            SS_1:		incbin	sslayout\1.bin
0006F166                            		even
0006F166                            SS_2:		incbin	sslayout\2.bin
0006F51E                            		even
0006F51E                            SS_3:		incbin	sslayout\3.bin
0006F87A                            		even
0006F87A                            SS_4:		incbin	sslayout\4.bin
0006FD54                            		even
0006FD54                            SS_5:		incbin	sslayout\5.bin
00070204                            		even
00070204                            SS_6:		incbin	sslayout\6.bin
000704F6                            		even
000704F6                            ; ---------------------------------------------------------------------------
000704F6                            ; Animated uncompressed graphics
000704F6                            ; ---------------------------------------------------------------------------
000704F6                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
000706F6                            		even
000706F6                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00070AF6                            		even
00070AF6                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00070F76                            		even
00070F76                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00071276                            		even
00071276                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00071876                            		even
00071876                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00071B76                            		even
00071B76                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
000725F6                            		even
000725F6                            
000725F6                            ; ---------------------------------------------------------------------------
000725F6                            ; Level	layout index
000725F6                            ; ---------------------------------------------------------------------------
000725F6 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000725FC 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00072602 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00072608 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007260E 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00072614 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007261A 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00072620 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00072626 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007262C 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00072632 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00072638 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007263E 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072644 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007264A 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072650 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00072656 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007265C 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00072662 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00072668 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007266E 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00072674 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007267A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00072680 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00072686 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007268C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00072692 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00072698 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007269E 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
000726A4 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
000726AA 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
000726B0 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000726B6                            
000726B6                            Level_GHZ1:	incbin	levels\ghz1.bin
000727A8                            		even
000727A8 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000727AC                            Level_GHZ2:	incbin	levels\ghz2.bin
00072874                            		even
00072874 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00072878                            Level_GHZ3:	incbin	levels\ghz3.bin
0007299A                            		even
0007299A                            Level_GHZbg:	incbin	levels\ghzbg.bin
000729BC                            		even
000729BC 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000729C0 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000729C4                            
000729C4                            Level_LZ1:	incbin	levels\lz1.bin
00072AC6                            		even
00072AC6                            Level_LZbg:	incbin	levels\lzbg.bin
00072BC8                            		even
00072BC8 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00072BCC                            Level_LZ2:	incbin	levels\lz2.bin
00072C66                            		even
00072C66 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00072C6A                            Level_LZ3:	incbin	levels\lz3.bin
00072D84                            		even
00072D84 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00072D88                            Level_SBZ3:	incbin	levels\sbz3.bin
00072E42                            		even
00072E42 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00072E46                            
00072E46                            Level_MZ1:	incbin	levels\mz1.bin
00072EE4                            		even
00072EE4                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00072F5E                            		even
00072F5E                            Level_MZ2:	incbin	levels\mz2.bin
00073002                            		even
00073002                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00073094                            		even
00073094 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00073098                            Level_MZ3:	incbin	levels\mz3.bin
0007317A                            		even
0007317A                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007321E 00                         		even
0007321E 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00073222 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00073226                            
00073226                            Level_SLZ1:	incbin	levels\slz1.bin
00073338                            		even
00073338                            Level_SLZbg:	incbin	levels\slzbg.bin
00073352                            		even
00073352                            Level_SLZ2:	incbin	levels\slz2.bin
00073442                            		even
00073442                            Level_SLZ3:	incbin	levels\slz3.bin
0007355C                            		even
0007355C 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00073560                            
00073560                            Level_SYZ1:	incbin	levels\syz1.bin
0007361C 00                         		even
0007361C                            Level_SYZbg:	incbin	levels\syzbg.bin
00073656                            		even
00073656 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007365A                            Level_SYZ2:	incbin	levels\syz2.bin
0007375E                            		even
0007375E 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00073762                            Level_SYZ3:	incbin	levels\syz3.bin
000738BC 00                         		even
000738BC 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000738C0 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000738C4                            
000738C4                            Level_SBZ1:	incbin	levels\sbz1.bin
000739E6                            		even
000739E6                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00073A24                            		even
00073A24                            Level_SBZ2:	incbin	levels\sbz2.bin
00073B66                            		even
00073B66                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00073CD0                            		even
00073CD0 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00073CD4 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00073CD8                            Level_End:	incbin	levels\ending.bin
00073D08 00                         		even
00073D08 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00073D0C                            Level_BHZ1:	incbin	levels\bhz1.bin
00073DFE                            		even
00073DFE                            
00073DFE                            Level_BHZ2:	incbin	levels\bhz2.bin
00073EC6                            		even
00073EC6                            
00073EC6                            Level_BHZ3:	incbin	levels\bhz3.bin
00073FE8                            		even
00073FE8                            Level_BHZbg:	incbin	levels\bhzbg.bin
0007400A                            		even
0007400A                            ; ---------------------------------------------------------------------------
0007400A                            ; Animated uncompressed giant ring graphics
0007400A                            ; ---------------------------------------------------------------------------
0007400A                            Art_BigRing:	incbin	artunc\bigring.bin
00074C4A                            		even
00074C4A                            
00074C4A                            		incbin	misc\padding3.bin
00074CE6                            		even
00074CE6                            
00074CE6                            ; ---------------------------------------------------------------------------
00074CE6                            ; Sprite locations index
00074CE6                            ; ---------------------------------------------------------------------------
00074CE6 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CEA 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CEE 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CF2 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CF6 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CFA 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CFE 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D02 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D06 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D0A 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D0E 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D12 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D16 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D1A 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D1E 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D22 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D26 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D2A 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D2E 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D32 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D36 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D3A 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D3E 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D42 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D46 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D4A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D4E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D52 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D56 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D5A 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D5E 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D62 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D66 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00074D6A 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00074D6E 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00074D72 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00074D76 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00074D7A 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00074D7E 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00074D82 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00074D86 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00074D8C                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000755D8                            		even
000755D8                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000758A2                            		even
000758A2                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007626E                            		even
0007626E                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00076616                            		even
00076616                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007694C                            		even
0007694C                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00076E0E                            		even
00076E0E                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000772A6                            		even
000772A6                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000772D8                            		even
000772D8                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007730A                            		even
0007730A                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007733C                            		even
0007733C                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007736E                            		even
0007736E                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000773B8                            		even
000773B8                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000773F6                            		even
000773F6                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00077762                            		even
00077762                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00077C0C                            		even
00077C0C                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00078182                            		even
00078182                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000781AC                            		even
000781AC                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00078614                            		even
00078614                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00078BF6                            		even
00078BF6                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00079268                            		even
00079268                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000797D2                            		even
000797D2                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00079DD8                            		even
00079DD8                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007A516                            		even
0007A516                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007ABF4                            		even
0007ABF4                            ObjPos_FZ:	incbin	objpos\fz.bin
0007AC06                            		even
0007AC06                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007AC38                            		even
0007AC38                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007AC6A                            		even
0007AC6A                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007AC9C                            		even
0007AC9C                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007ACCE                            		even
0007ACCE                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007AD00                            		even
0007AD00                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007AD38                            		even
0007AD38                            ObjPos_End:	incbin	objpos\ending.bin
0007AE94                            		even
0007AE94                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007B49A                            		even
0007B49A                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007BA5E                            		even
0007BA5E                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007C118                            		even
0007C118 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007C11E                            ; ---------------------------------------------------------------------------
0007C11E                            		incbin	misc\padding4.bin
0007C748                            		even
0007C748                            
0007C748 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007C74C 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0007C750 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007C754 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007C758 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0007C75C 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007C760                            ; ---------------------------------------------------------------------------
0007C760                            ; PSG instruments used in music
0007C760                            ; ---------------------------------------------------------------------------
0007C760 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007C76C 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007C778 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007C784                            
0007C784 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007C794 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007C79B                            
0007C79B 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007C7A2                            
0007C7A2 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007C7B2 80                                     dc.b    $80
0007C7B3                            
0007C7B3 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007C7BE                            
0007C7BE 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007C7CE 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007C7DE 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007C7E8                            
0007C7E8 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007C7F7                            
0007C7F7 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007C807 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007C813                            
0007C813 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007C823 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007C833 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007C83B                            
0007C83B 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007C84B 80                                     dc.b    $80
0007C84C                            
0007C84C 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007C854                            ; ---------------------------------------------------------------------------
0007C854                            ; Music	Pointers
0007C854                            ; ---------------------------------------------------------------------------
0007C854 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007C85C 0000 0000 0000 0000        		dc.l Music83, Music84
0007C864 0000 0000 0000 0000        		dc.l Music85, Music86
0007C86C 0000 0000 0000 0000        		dc.l Music87, Music88
0007C874 0000 0000 0000 0000        		dc.l Music89, Music8A
0007C87C 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007C884 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007C88C 0000 0000 0000 0000        		dc.l Music8F, Music90
0007C894 0000 0000 0000 0000        		dc.l Music91, Music92
0007C89C 0000 0000 0000 0000        		dc.l Music93, Music94
0007C8A4 0000 0000 0000 0000        		dc.l Music95, Music96
0007C8AC 0000 0000 0000 0000        		dc.l Music97, Music98
0007C8B4 0000 0000 0000 0000        		dc.l Music99, Music9A
0007C8BC 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007C8C4 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007C8CC 0000 0000                  		dc.l Music9F
0007C8D0                            ; ---------------------------------------------------------------------------
0007C8D0                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0007C8D0                            ; ---------------------------------------------------------------------------
0007C8D0 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007C8E0 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0007C8F0 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0007C900 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007C910 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007C920 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007C930 9090 9090                  		dc.b $90, $90, $90, $90
0007C934                            
0007C934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C934                            
0007C934                            
0007C934                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007C934                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
0007C934 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; if in an NTSC region(!), branch ; TODO: use the VDP pal value instead
0007C93A 6700                       		beq.s	@main
0007C93C 7000                       		moveq	#0,d0			; PAL song timer "optimization"
0007C93E 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
0007C942 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
0007C946 4840                       		swap	d0
0007C948 4A40                       		tst.w	d0
0007C94A 6600                       		bne.s	@main
0007C94C 6100 0000                  		bsr.w	@main
0007C950                            @main:
0007C950 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007C958 4E71                       		nop
0007C95A 4E71                       		nop
0007C95C 4E71                       		nop
0007C95E                            ; loc_71B5A:
0007C95E                            @wait:
0007C95E 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007C966 66F6                       		bne.s	@wait
0007C968                            
0007C968 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007C970 6700                       		beq.s	loc_71B82
0007C972 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007C97A 4E71                       		nop
0007C97C 4E71                       		nop
0007C97E 4E71                       		nop
0007C980 4E71                       		nop
0007C982 4E71                       		nop
0007C984 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
0007C986                            ; ===========================================================================
0007C986                            
0007C986                            loc_71B82:
0007C986 4DF9 00FF F000             		lea	($FFF000).l,a6
0007C98C 422E 000E                  		clr.b	$E(a6)
0007C990 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007C994 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007C998 532E 0001                  		subq.b	#1,1(a6)
0007C99C 6600                       		bne.s	loc_71B9E
0007C99E 4EBA 0000                  		jsr	sub_7260C(pc)
0007C9A2                            
0007C9A2                            loc_71B9E:
0007C9A2 102E 0004                  		move.b	4(a6),d0
0007C9A6 6700                       		beq.s	loc_71BA8
0007C9A8 4EBA 0000                  		jsr	sub_72504(pc)
0007C9AC                            
0007C9AC                            loc_71BA8:
0007C9AC 4A2E 0024                  		tst.b	$24(a6)
0007C9B0 6700                       		beq.s	loc_71BB2
0007C9B2 4EBA 0000                  		jsr	sub_7267C(pc)
0007C9B6                            
0007C9B6                            loc_71BB2:
0007C9B6 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007C9BA 6700                       		beq.s	loc_71BBC	; if not, branch
0007C9BC 4EBA 0000                  		jsr	Sound_Play(pc)
0007C9C0                            
0007C9C0                            loc_71BBC:
0007C9C0 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007C9C6 6700                       		beq.s	loc_71BC8
0007C9C8 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007C9CC                            
0007C9CC                            loc_71BC8:
0007C9CC 4BEE 0040                  		lea	$40(a6),a5
0007C9D0 4A15                       		tst.b	(a5)
0007C9D2 6A00                       		bpl.s	loc_71BD4
0007C9D4 4EBA 0000                  		jsr	sub_71C4E(pc)
0007C9D8                            
0007C9D8                            loc_71BD4:
0007C9D8 422E 0008                  		clr.b	8(a6)
0007C9DC 7E05                       		moveq	#5,d7
0007C9DE                            
0007C9DE                            loc_71BDA:
0007C9DE DAFC 0030                  		adda.w	#$30,a5
0007C9E2 4A15                       		tst.b	(a5)
0007C9E4 6A00                       		bpl.s	loc_71BE6
0007C9E6 4EBA 0000                  		jsr	sub_71CCA(pc)
0007C9EA                            
0007C9EA                            loc_71BE6:
0007C9EA 51CF FFF2                  		dbf	d7,loc_71BDA
0007C9EE                            
0007C9EE 7E02                       		moveq	#2,d7
0007C9F0                            
0007C9F0                            loc_71BEC:
0007C9F0 DAFC 0030                  		adda.w	#$30,a5
0007C9F4 4A15                       		tst.b	(a5)
0007C9F6 6A00                       		bpl.s	loc_71BF8
0007C9F8 4EBA 0000                  		jsr	sub_72850(pc)
0007C9FC                            
0007C9FC                            loc_71BF8:
0007C9FC 51CF FFF2                  		dbf	d7,loc_71BEC
0007CA00                            
0007CA00 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007CA06 7E02                       		moveq	#2,d7
0007CA08                            
0007CA08                            loc_71C04:
0007CA08 DAFC 0030                  		adda.w	#$30,a5
0007CA0C 4A15                       		tst.b	(a5)
0007CA0E 6A00                       		bpl.s	loc_71C10
0007CA10 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CA14                            
0007CA14                            loc_71C10:
0007CA14 51CF FFF2                  		dbf	d7,loc_71C04
0007CA18                            
0007CA18 7E02                       		moveq	#2,d7
0007CA1A                            
0007CA1A                            loc_71C16:
0007CA1A DAFC 0030                  		adda.w	#$30,a5
0007CA1E 4A15                       		tst.b	(a5)
0007CA20 6A00                       		bpl.s	loc_71C22
0007CA22 4EBA 0000                  		jsr	sub_72850(pc)
0007CA26                            
0007CA26                            loc_71C22:
0007CA26 51CF FFF2                  		dbf	d7,loc_71C16
0007CA2A 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007CA30 DAFC 0030                  		adda.w	#$30,a5
0007CA34 4A15                       		tst.b	(a5)
0007CA36 6A00                       		bpl.s	loc_71C38
0007CA38 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CA3C                            
0007CA3C                            loc_71C38:
0007CA3C DAFC 0030                  		adda.w	#$30,a5
0007CA40 4A15                       		tst.b	(a5)
0007CA42 6A00                       		bpl.s	loc_71C44
0007CA44 4EBA 0000                  		jsr	sub_72850(pc)
0007CA48                            
0007CA48                            loc_71C44:
0007CA48 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007CA50 4E75                       		rts	
0007CA52                            ; End of function sub_71B4C
0007CA52                            
0007CA52                            
0007CA52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CA52                            
0007CA52                            
0007CA52                            sub_71C4E:				; XREF: sub_71B4C
0007CA52 532D 000E                  		subq.b	#1,$E(a5)
0007CA56 6600                       		bne.s	locret_71CAA
0007CA58 1D7C 0080 0008             		move.b	#$80,8(a6)
0007CA5E 286D 0004                  		movea.l	4(a5),a4
0007CA62                            
0007CA62                            loc_71C5E:
0007CA62 7A00                       		moveq	#0,d5
0007CA64 1A1C                       		move.b	(a4)+,d5
0007CA66 0C05 00E0                  		cmpi.b	#-$20,d5
0007CA6A 6500                       		bcs.s	loc_71C6E
0007CA6C 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CA70 60F0                       		bra.s	loc_71C5E
0007CA72                            ; ===========================================================================
0007CA72                            
0007CA72                            loc_71C6E:
0007CA72 4A05                       		tst.b	d5
0007CA74 6A00                       		bpl.s	loc_71C84
0007CA76 1B45 0010                  		move.b	d5,$10(a5)
0007CA7A 1A1C                       		move.b	(a4)+,d5
0007CA7C 6A00                       		bpl.s	loc_71C84
0007CA7E 534C                       		subq.w	#1,a4
0007CA80 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CA86 6000                       		bra.s	loc_71C88
0007CA88                            ; ===========================================================================
0007CA88                            
0007CA88                            loc_71C84:
0007CA88 4EBA 0000                  		jsr	sub_71D40(pc)
0007CA8C                            
0007CA8C                            loc_71C88:
0007CA8C 2B4C 0004                  		move.l	a4,4(a5)
0007CA90 0815 0002                  		btst	#2,(a5)
0007CA94 6600                       		bne.s	locret_71CAA
0007CA96 7000                       		moveq	#0,d0
0007CA98 102D 0010                  		move.b	$10(a5),d0
0007CA9C 0C00 0080                  		cmpi.b	#$80,d0
0007CAA0 6700                       		beq.s	locret_71CAA
0007CAA2 0800 0003                  		btst	#3,d0
0007CAA6 6600                       		bne.s	loc_71CAC
0007CAA8 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007CAAE                            
0007CAAE                            locret_71CAA:
0007CAAE 4E75                       		rts	
0007CAB0                            ; ===========================================================================
0007CAB0                            
0007CAB0                            loc_71CAC:
0007CAB0 0400 0088                  		subi.b	#$88,d0
0007CAB4 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007CAB8 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007CABE 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007CAC6 4E75                       		rts	
0007CAC8                            ; End of function sub_71C4E
0007CAC8                            
0007CAC8                            ; ===========================================================================
0007CAC8 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007CACE                            
0007CACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CACE                            
0007CACE                            
0007CACE                            sub_71CCA:				; XREF: sub_71B4C
0007CACE 532D 000E                  		subq.b	#1,$E(a5)
0007CAD2 6600                       		bne.s	loc_71CE0
0007CAD4 0895 0004                  		bclr	#4,(a5)
0007CAD8 4EBA 0000                  		jsr	sub_71CEC(pc)
0007CADC 4EBA 0000                  		jsr	sub_71E18(pc)
0007CAE0 6000 0000                  		bra.w	loc_726E2
0007CAE4                            ; ===========================================================================
0007CAE4                            
0007CAE4                            loc_71CE0:
0007CAE4 4EBA 0000                  		jsr	sub_71D9E(pc)
0007CAE8 4EBA 0000                  		jsr	sub_71DC6(pc)
0007CAEC 6000 0000                  		bra.w	loc_71E24
0007CAF0                            ; End of function sub_71CCA
0007CAF0                            
0007CAF0                            
0007CAF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CAF0                            
0007CAF0                            
0007CAF0                            sub_71CEC:				; XREF: sub_71CCA
0007CAF0 286D 0004                  		movea.l	4(a5),a4
0007CAF4 0895 0001                  		bclr	#1,(a5)
0007CAF8                            
0007CAF8                            loc_71CF4:
0007CAF8 7A00                       		moveq	#0,d5
0007CAFA 1A1C                       		move.b	(a4)+,d5
0007CAFC 0C05 00E0                  		cmpi.b	#-$20,d5
0007CB00 6500                       		bcs.s	loc_71D04
0007CB02 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CB06 60F0                       		bra.s	loc_71CF4
0007CB08                            ; ===========================================================================
0007CB08                            
0007CB08                            loc_71D04:
0007CB08 4EBA 0000                  		jsr	sub_726FE(pc)
0007CB0C 4A05                       		tst.b	d5
0007CB0E 6A00                       		bpl.s	loc_71D1A
0007CB10 4EBA 0000                  		jsr	sub_71D22(pc)
0007CB14 1A1C                       		move.b	(a4)+,d5
0007CB16 6A00                       		bpl.s	loc_71D1A
0007CB18 534C                       		subq.w	#1,a4
0007CB1A 6000 0000                  		bra.w	sub_71D60
0007CB1E                            ; ===========================================================================
0007CB1E                            
0007CB1E                            loc_71D1A:
0007CB1E 4EBA 0000                  		jsr	sub_71D40(pc)
0007CB22 6000 0000                  		bra.w	sub_71D60
0007CB26                            ; End of function sub_71CEC
0007CB26                            
0007CB26                            
0007CB26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CB26                            
0007CB26                            
0007CB26                            sub_71D22:				; XREF: sub_71CEC
0007CB26 0405 0080                  		subi.b	#$80,d5
0007CB2A 6700                       		beq.s	loc_71D58
0007CB2C DA2D 0008                  		add.b	8(a5),d5
0007CB30 0245 007F                  		andi.w	#$7F,d5
0007CB34 E34D                       		lsl.w	#1,d5
0007CB36 41FA 0000                  		lea	word_72790(pc),a0
0007CB3A 3C30 5000                  		move.w	(a0,d5.w),d6
0007CB3E 3B46 0010                  		move.w	d6,$10(a5)
0007CB42 4E75                       		rts	
0007CB44                            ; End of function sub_71D22
0007CB44                            
0007CB44                            
0007CB44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CB44                            
0007CB44                            
0007CB44                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007CB44 1005                       		move.b	d5,d0
0007CB46 122D 0002                  		move.b	2(a5),d1
0007CB4A                            
0007CB4A                            loc_71D46:
0007CB4A 5301                       		subq.b	#1,d1
0007CB4C 6700                       		beq.s	loc_71D4E
0007CB4E D005                       		add.b	d5,d0
0007CB50 60F8                       		bra.s	loc_71D46
0007CB52                            ; ===========================================================================
0007CB52                            
0007CB52                            loc_71D4E:
0007CB52 1B40 000F                  		move.b	d0,$F(a5)
0007CB56 1B40 000E                  		move.b	d0,$E(a5)
0007CB5A 4E75                       		rts	
0007CB5C                            ; End of function sub_71D40
0007CB5C                            
0007CB5C                            ; ===========================================================================
0007CB5C                            
0007CB5C                            loc_71D58:				; XREF: sub_71D22
0007CB5C 08D5 0001                  		bset	#1,(a5)
0007CB60 426D 0010                  		clr.w	$10(a5)
0007CB64                            
0007CB64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CB64                            
0007CB64                            
0007CB64                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007CB64 2B4C 0004                  		move.l	a4,4(a5)
0007CB68 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CB6E 0815 0004                  		btst	#4,(a5)
0007CB72 6600                       		bne.s	locret_71D9C
0007CB74 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007CB7A 422D 000C                  		clr.b	$C(a5)
0007CB7E 0815 0003                  		btst	#3,(a5)
0007CB82 6700                       		beq.s	locret_71D9C
0007CB84 206D 0014                  		movea.l	$14(a5),a0
0007CB88 1B58 0018                  		move.b	(a0)+,$18(a5)
0007CB8C 1B58 0019                  		move.b	(a0)+,$19(a5)
0007CB90 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007CB94 1018                       		move.b	(a0)+,d0
0007CB96 E208                       		lsr.b	#1,d0
0007CB98 1B40 001B                  		move.b	d0,$1B(a5)
0007CB9C 426D 001C                  		clr.w	$1C(a5)
0007CBA0                            
0007CBA0                            locret_71D9C:
0007CBA0 4E75                       		rts	
0007CBA2                            ; End of function sub_71D60
0007CBA2                            
0007CBA2                            
0007CBA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CBA2                            
0007CBA2                            
0007CBA2                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007CBA2 4A2D 0012                  		tst.b	$12(a5)
0007CBA6 6700                       		beq.s	locret_71DC4
0007CBA8 532D 0012                  		subq.b	#1,$12(a5)
0007CBAC 6600                       		bne.s	locret_71DC4
0007CBAE 08D5 0001                  		bset	#1,(a5)
0007CBB2 4A2D 0001                  		tst.b	1(a5)
0007CBB6 6B00 0000                  		bmi.w	loc_71DBE
0007CBBA 4EBA 0000                  		jsr	sub_726FE(pc)
0007CBBE 584F                       		addq.w	#4,sp
0007CBC0 4E75                       		rts	
0007CBC2                            ; ===========================================================================
0007CBC2                            
0007CBC2                            loc_71DBE:
0007CBC2 4EBA 0000                  		jsr	sub_729A0(pc)
0007CBC6 584F                       		addq.w	#4,sp
0007CBC8                            
0007CBC8                            locret_71DC4:
0007CBC8 4E75                       		rts	
0007CBCA                            ; End of function sub_71D9E
0007CBCA                            
0007CBCA                            
0007CBCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CBCA                            
0007CBCA                            
0007CBCA                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007CBCA 584F                       		addq.w	#4,sp
0007CBCC 0815 0003                  		btst	#3,(a5)
0007CBD0 6700                       		beq.s	locret_71E16
0007CBD2 4A2D 0018                  		tst.b	$18(a5)
0007CBD6 6700                       		beq.s	loc_71DDA
0007CBD8 532D 0018                  		subq.b	#1,$18(a5)
0007CBDC 4E75                       		rts	
0007CBDE                            ; ===========================================================================
0007CBDE                            
0007CBDE                            loc_71DDA:
0007CBDE 532D 0019                  		subq.b	#1,$19(a5)
0007CBE2 6700                       		beq.s	loc_71DE2
0007CBE4 4E75                       		rts	
0007CBE6                            ; ===========================================================================
0007CBE6                            
0007CBE6                            loc_71DE2:
0007CBE6 206D 0014                  		movea.l	$14(a5),a0
0007CBEA 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007CBF0 4A2D 001B                  		tst.b	$1B(a5)
0007CBF4 6600                       		bne.s	loc_71DFE
0007CBF6 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007CBFC 442D 001A                  		neg.b	$1A(a5)
0007CC00 4E75                       		rts	
0007CC02                            ; ===========================================================================
0007CC02                            
0007CC02                            loc_71DFE:
0007CC02 532D 001B                  		subq.b	#1,$1B(a5)
0007CC06 1C2D 001A                  		move.b	$1A(a5),d6
0007CC0A 4886                       		ext.w	d6
0007CC0C DC6D 001C                  		add.w	$1C(a5),d6
0007CC10 3B46 001C                  		move.w	d6,$1C(a5)
0007CC14 DC6D 0010                  		add.w	$10(a5),d6
0007CC18 594F                       		subq.w	#4,sp
0007CC1A                            
0007CC1A                            locret_71E16:
0007CC1A 4E75                       		rts	
0007CC1C                            ; End of function sub_71DC6
0007CC1C                            
0007CC1C                            
0007CC1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CC1C                            
0007CC1C                            
0007CC1C                            sub_71E18:				; XREF: sub_71CCA
0007CC1C 0815 0001                  		btst	#1,(a5)
0007CC20 6600                       		bne.s	locret_71E48
0007CC22 3C2D 0010                  		move.w	$10(a5),d6
0007CC26 6700                       		beq.s	loc_71E4A
0007CC28                            
0007CC28                            loc_71E24:				; XREF: sub_71CCA
0007CC28 102D 001E                  		move.b	$1E(a5),d0
0007CC2C 4880                       		ext.w	d0
0007CC2E DC40                       		add.w	d0,d6
0007CC30 0815 0002                  		btst	#2,(a5)
0007CC34 6600                       		bne.s	locret_71E48
0007CC36 3206                       		move.w	d6,d1
0007CC38 E049                       		lsr.w	#8,d1
0007CC3A 103C 00A4                  		move.b	#-$5C,d0
0007CC3E 4EBA 0000                  		jsr	sub_72722(pc)
0007CC42 1206                       		move.b	d6,d1
0007CC44 103C 00A0                  		move.b	#-$60,d0
0007CC48 4EBA 0000                  		jsr	sub_72722(pc)
0007CC4C                            
0007CC4C                            locret_71E48:
0007CC4C 4E75                       		rts	
0007CC4E                            ; ===========================================================================
0007CC4E                            
0007CC4E                            loc_71E4A:
0007CC4E 08D5 0001                  		bset	#1,(a5)
0007CC52 4E75                       		rts	
0007CC54                            ; End of function sub_71E18
0007CC54                            
0007CC54                            ; ===========================================================================
0007CC54                            
0007CC54                            loc_71E50:				; XREF: sub_71B4C
0007CC54 6B00                       		bmi.s	loc_71E94
0007CC56 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007CC5C 6700 0000                  		beq.w	loc_71EFE
0007CC60 1D7C 0002 0003             		move.b	#2,3(a6)
0007CC66 7602                       		moveq	#2,d3
0007CC68 103C 00B4                  		move.b	#-$4C,d0
0007CC6C 7200                       		moveq	#0,d1
0007CC6E                            
0007CC6E                            loc_71E6A:
0007CC6E 4EBA 0000                  		jsr	sub_7272E(pc)
0007CC72 4EBA 0000                  		jsr	sub_72764(pc)
0007CC76 5200                       		addq.b	#1,d0
0007CC78 51CB FFF4                  		dbf	d3,loc_71E6A
0007CC7C                            
0007CC7C 7602                       		moveq	#2,d3
0007CC7E 7028                       		moveq	#$28,d0
0007CC80                            
0007CC80                            loc_71E7C:
0007CC80 1203                       		move.b	d3,d1
0007CC82 4EBA 0000                  		jsr	sub_7272E(pc)
0007CC86 5801                       		addq.b	#4,d1
0007CC88 4EBA 0000                  		jsr	sub_7272E(pc)
0007CC8C 51CB FFF2                  		dbf	d3,loc_71E7C
0007CC90                            
0007CC90 4EBA 0000                  		jsr	sub_729B6(pc)
0007CC94 6000 FDB2                  		bra.w	loc_71C44
0007CC98                            ; ===========================================================================
0007CC98                            
0007CC98                            loc_71E94:				; XREF: loc_71E50
0007CC98 422E 0003                  		clr.b	3(a6)
0007CC9C 7630                       		moveq	#$30,d3
0007CC9E 4BEE 0040                  		lea	$40(a6),a5
0007CCA2 7806                       		moveq	#6,d4
0007CCA4                            
0007CCA4                            loc_71EA0:
0007CCA4 0815 0007                  		btst	#7,(a5)
0007CCA8 6700                       		beq.s	loc_71EB8
0007CCAA 0815 0002                  		btst	#2,(a5)
0007CCAE 6600                       		bne.s	loc_71EB8
0007CCB0 103C 00B4                  		move.b	#-$4C,d0
0007CCB4 122D 000A                  		move.b	$A(a5),d1
0007CCB8 4EBA 0000                  		jsr	sub_72722(pc)
0007CCBC                            
0007CCBC                            loc_71EB8:
0007CCBC DAC3                       		adda.w	d3,a5
0007CCBE 51CC FFE4                  		dbf	d4,loc_71EA0
0007CCC2                            
0007CCC2 4BEE 0220                  		lea	$220(a6),a5
0007CCC6 7802                       		moveq	#2,d4
0007CCC8                            
0007CCC8                            loc_71EC4:
0007CCC8 0815 0007                  		btst	#7,(a5)
0007CCCC 6700                       		beq.s	loc_71EDC
0007CCCE 0815 0002                  		btst	#2,(a5)
0007CCD2 6600                       		bne.s	loc_71EDC
0007CCD4 103C 00B4                  		move.b	#-$4C,d0
0007CCD8 122D 000A                  		move.b	$A(a5),d1
0007CCDC 4EBA 0000                  		jsr	sub_72722(pc)
0007CCE0                            
0007CCE0                            loc_71EDC:
0007CCE0 DAC3                       		adda.w	d3,a5
0007CCE2 51CC FFE4                  		dbf	d4,loc_71EC4
0007CCE6                            
0007CCE6 4BEE 0340                  		lea	$340(a6),a5
0007CCEA 0815 0007                  		btst	#7,(a5)
0007CCEE 6700                       		beq.s	loc_71EFE
0007CCF0 0815 0002                  		btst	#2,(a5)
0007CCF4 6600                       		bne.s	loc_71EFE
0007CCF6 103C 00B4                  		move.b	#-$4C,d0
0007CCFA 122D 000A                  		move.b	$A(a5),d1
0007CCFE 4EBA 0000                  		jsr	sub_72722(pc)
0007CD02                            
0007CD02                            loc_71EFE:
0007CD02 6000 FD44                  		bra.w	loc_71C44
0007CD06                            
0007CD06                            ; ---------------------------------------------------------------------------
0007CD06                            ; Subroutine to	play a sound or	music track
0007CD06                            ; ---------------------------------------------------------------------------
0007CD06                            
0007CD06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD06                            
0007CD06                            
0007CD06                            Sound_Play:				; XREF: sub_71B4C
0007CD06 2079 0007 C748             		movea.l	(Go_SoundTypes).l,a0
0007CD0C 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007CD10 1616                       		move.b	0(a6),d3
0007CD12 7802                       		moveq	#2,d4
0007CD14                            
0007CD14                            loc_71F12:
0007CD14 1011                       		move.b	(a1),d0		; move track number to d0
0007CD16 1200                       		move.b	d0,d1
0007CD18 4219                       		clr.b	(a1)+
0007CD1A 0400 0081                  		subi.b	#$81,d0
0007CD1E 6500                       		bcs.s	loc_71F3E
0007CD20 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007CD26 6700                       		beq.s	loc_71F2C
0007CD28 1D41 000A                  		move.b	d1,$A(a6)
0007CD2C 6000                       		bra.s	loc_71F3E
0007CD2E                            ; ===========================================================================
0007CD2E                            
0007CD2E                            loc_71F2C:
0007CD2E 0240 007F                  		andi.w	#$7F,d0
0007CD32 1430 0000                  		move.b	(a0,d0.w),d2
0007CD36 B403                       		cmp.b	d3,d2
0007CD38 6500                       		bcs.s	loc_71F3E
0007CD3A 1602                       		move.b	d2,d3
0007CD3C 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007CD40                            
0007CD40                            loc_71F3E:
0007CD40 51CC FFD2                  		dbf	d4,loc_71F12
0007CD44                            
0007CD44 4A03                       		tst.b	d3
0007CD46 6B00                       		bmi.s	locret_71F4A
0007CD48 1C83                       		move.b	d3,0(a6)
0007CD4A                            
0007CD4A                            locret_71F4A:
0007CD4A 4E75                       		rts	
0007CD4C                            ; End of function Sound_Play
0007CD4C                            
0007CD4C                            
0007CD4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD4C                            
0007CD4C                            
0007CD4C                            Sound_ChkValue:				; XREF: sub_71B4C
0007CD4C 7E00                       		moveq	#0,d7
0007CD4E 1E2E 0009                  		move.b	9(a6),d7
0007CD52 6700 0000                  		beq.w	Sound_E4
0007CD56 6A00                       		bpl.s	locret_71F8C
0007CD58 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007CD5E 0C07 009F                  		cmpi.b	#$9F,d7
0007CD62 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007CD66 0C07 00A0                  		cmpi.b	#$A0,d7
0007CD6A 6500 0000                  		bcs.w	locret_71F8C
0007CD6E 0C07 00CF                  		cmpi.b	#$CF,d7
0007CD72 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007CD76 0C07 00D0                  		cmpi.b	#$D0,d7
0007CD7A 6500 0000                  		bcs.w	locret_71F8C
0007CD7E 0C07 00E0                  		cmpi.b	#$E0,d7
0007CD82 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007CD86 0C07 00E5                  		cmpi.b	#$E5,d7
0007CD8A 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007CD8C                            
0007CD8C                            locret_71F8C:
0007CD8C 4E75                       		rts	
0007CD8E                            ; ===========================================================================
0007CD8E                            
0007CD8E                            Sound_E0toE5				; XREF: Sound_ChkValue
0007CD8E 0407 00E0                  		subi.b	#$E0,d7
0007CD92 E54F                       		lsl.w	#2,d7
0007CD94 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007CD98                            ; ===========================================================================
0007CD98                            
0007CD98                            Sound_ExIndex:
0007CD98 6000 0000                  		bra.w	Sound_E0
0007CD9C                            ; ===========================================================================
0007CD9C 6000 0000                  		bra.w	Sound_E1
0007CDA0                            ; ===========================================================================
0007CDA0 6000 0000                  		bra.w	Sound_E2
0007CDA4                            ; ===========================================================================
0007CDA4 6000 0000                  		bra.w	Sound_E3
0007CDA8                            ; ===========================================================================
0007CDA8 6000 0000                  		bra.w	Sound_E4
0007CDAC                            ; ===========================================================================
0007CDAC 6000 0000                  		bra.w	Sound_E5
0007CDB0                            ; ===========================================================================
0007CDB0                            ; ---------------------------------------------------------------------------
0007CDB0                            ; Play "Say-gaa" PCM sound
0007CDB0                            ; ---------------------------------------------------------------------------
0007CDB0                            
0007CDB0                            Sound_E1:				  
0007CDB0 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007CDB8 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007CDC0 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
0007CDC4 51C8 FFFE                  		dbf	d0,*
0007CDC8 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CDCE 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007CDD4 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007CDDC                            PlayPCM_Loop:	  
0007CDDC 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CDE2 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007CDE6 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007CDEA 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CDEC 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007CDEE 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007CDF2 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007CDF8 4EB8 13E6                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007CDFC 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007CE02 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007CE04 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007CE06                            return_PlayPCM: 
0007CE06 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
0007CE0E 584F                       		addq.w	#4,sp 
0007CE10 4E75                       		rts
0007CE12                            		
0007CE12                            ; ---------------------------------------------------------------------------
0007CE12                            ; Play you are an idiot pcm sound
0007CE12                            ; since the sfx already crashes the game forever load it here :V
0007CE12                            ; ---------------------------------------------------------------------------
0007CE12                            
0007CE12                            Sound_E5: 
0007CE12 4EB8 14B6                  		jsr	ClearScreen
0007CE16 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007CE1E 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007CE26                            
0007CE26                            		;control port on a5
0007CE26 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
0007CE2C 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007CE32 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007CE36 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
0007CE3A 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
0007CE3E                            		
0007CE3E 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007CE42                            		
0007CE42 2ABC 4000 0000             		move.l	#$40000000,(a5)
0007CE48 41F9 0002 45A2             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0007CE4E 4EB8 1632                  		jsr	NemDec
0007CE52 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CE58 41F9 0002 4544             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0007CE5E 303C 0000                  		move.w	#0,d0
0007CE62 4EB8 1910                  		jsr	EniDec
0007CE66 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CE6C 203C 4304 0003             		move.l	#$43040003,d0
0007CE72 7223                       		moveq	#35,d1
0007CE74 740D                       		moveq	#13,d2
0007CE76 4EB8 1612                  		jsr	ShowVDPGraphics
0007CE7A 7014                       		moveq	#20,d0
0007CE7C 4EB8 22D6                  		jsr	PalLoad2	; load pallet
0007CE80                            
0007CE80                            
0007CE80 4BF9 00C0 0004             		lea	($C00004).l,a5
0007CE86 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
0007CE8A 7600                       		moveq	#0,d3				; make @palett jump to @start when done
0007CE8C 6000                       		bra.s	@palett
0007CE8E                            @start:
0007CE8E 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CE94 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
0007CE9A 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
0007CEA2                            @loop:
0007CEA2 44D5                       		move.w	(a5),ccr
0007CEA4 6B00                       		bmi.s	@vblank
0007CEA6                            
0007CEA6 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CEAC 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007CEB0 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007CEB4 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CEB6 66EA                       		bne.s	@loop				; if not zero, loop
0007CEB8 60D4                       		bra.s	@start
0007CEBA                            @vblank:
0007CEBA 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
0007CEC0 6700                       		beq.s	@palett
0007CEC2 5238 FE24                  		addq.b	#1,($FFFFFE24).w
0007CEC6                            @loop_vblank:
0007CEC6 44D5                       		move.w	(a5),ccr
0007CEC8 6AD8                       		bpl.s	@loop
0007CECA                            
0007CECA 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CED0 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007CED4 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007CED8 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CEDA 66EA                       		bne.s	@loop_vblank			; if not zero, loop
0007CEDC 60B0                       		bra.s	@start
0007CEDE                            @palett:
0007CEDE 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007CEE4                            
0007CEE4 4238 FE24                  		clr.b	($FFFFFE24).w
0007CEE8 4638 FE25                  		not.b	($FFFFFE25).w
0007CEEC 6700                       		beq.s	@not_black
0007CEEE 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007CEF4 6000                       		bra.s	@merge
0007CEF6                            	@not_black:
0007CEF6 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007CEFC                            	@merge:
0007CEFC 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007CF00 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007CF04 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
0007CF08 3A9F                       		move.w	(sp)+,(a5)
0007CF0A                            		
0007CF0A 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007CF0E 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007CF12 4A83                       		tst.l	d3
0007CF14 66B0                       		bne.s	@loop_vblank
0007CF16 6000 FF76                  		bra.w	@start
0007CF1A                            ; ===========================================================================
0007CF1A                            ; ---------------------------------------------------------------------------
0007CF1A                            ; Play music track $81-$9F
0007CF1A                            ; ---------------------------------------------------------------------------
0007CF1A                            
0007CF1A                            Sound_81to9F:				; XREF: Sound_ChkValue
0007CF1A 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007CF1E 6600                       		bne.s	loc_72024	; if not, branch
0007CF20 4A2E 0027                  		tst.b	$27(a6)
0007CF24 6600 0000                  		bne.w	loc_721B6
0007CF28 4BEE 0040                  		lea	$40(a6),a5
0007CF2C 7009                       		moveq	#9,d0
0007CF2E                            
0007CF2E                            loc_71FE6:
0007CF2E 0895 0002                  		bclr	#2,(a5)
0007CF32 DAFC 0030                  		adda.w	#$30,a5
0007CF36 51C8 FFF6                  		dbf	d0,loc_71FE6
0007CF3A                            
0007CF3A 4BEE 0220                  		lea	$220(a6),a5
0007CF3E 7005                       		moveq	#5,d0
0007CF40                            
0007CF40                            loc_71FF8:
0007CF40 0895 0007                  		bclr	#7,(a5)
0007CF44 DAFC 0030                  		adda.w	#$30,a5
0007CF48 51C8 FFF6                  		dbf	d0,loc_71FF8
0007CF4C 4216                       		clr.b	0(a6)
0007CF4E 204E                       		movea.l	a6,a0
0007CF50 43EE 03A0                  		lea	$3A0(a6),a1
0007CF54 303C 0087                  		move.w	#$87,d0
0007CF58                            
0007CF58                            loc_72012:
0007CF58 22D8                       		move.l	(a0)+,(a1)+
0007CF5A 51C8 FFFC                  		dbf	d0,loc_72012
0007CF5E                            
0007CF5E 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007CF64 4216                       		clr.b	0(a6)
0007CF66 6000                       		bra.s	loc_7202C
0007CF68                            ; ===========================================================================
0007CF68                            
0007CF68                            loc_72024:
0007CF68 422E 0027                  		clr.b	$27(a6)
0007CF6C 422E 0026                  		clr.b	$26(a6)
0007CF70                            
0007CF70                            loc_7202C:
0007CF70 4EBA 0000                  		jsr	sub_725CA(pc)
0007CF74 2879 0007 C758             		movea.l	(off_719A0).l,a4
0007CF7A 0407 0081                  		subi.b	#$81,d7
0007CF7E 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007CF84 2879 0007 C750             		movea.l	(Go_MusicIndex).l,a4
0007CF8A E54F                       		lsl.w	#2,d7
0007CF8C 2874 7000                  		movea.l	(a4,d7.w),a4
0007CF90 7000                       		moveq	#0,d0
0007CF92 3014                       		move.w	(a4),d0
0007CF94 D08C                       		add.l	a4,d0
0007CF96 2D40 0018                  		move.l	d0,$18(a6)
0007CF9A 102C 0005                  		move.b	5(a4),d0
0007CF9E 1D40 0028                  		move.b	d0,$28(a6)
0007CFA2 4A2E 002A                  		tst.b	$2A(a6)
0007CFA6 6700                       		beq.s	loc_72068
0007CFA8 102E 0029                  		move.b	$29(a6),d0
0007CFAC                            
0007CFAC                            loc_72068:
0007CFAC 1D40 0002                  		move.b	d0,2(a6)
0007CFB0 1D40 0001                  		move.b	d0,1(a6)
0007CFB4 7200                       		moveq	#0,d1
0007CFB6 264C                       		movea.l	a4,a3
0007CFB8 5C4C                       		addq.w	#6,a4
0007CFBA 7E00                       		moveq	#0,d7
0007CFBC 1E2B 0002                  		move.b	2(a3),d7
0007CFC0 6700 0000                  		beq.w	loc_72114
0007CFC4 5307                       		subq.b	#1,d7
0007CFC6 123C 00C0                  		move.b	#-$40,d1
0007CFCA 182B 0004                  		move.b	4(a3),d4
0007CFCE 7C30                       		moveq	#$30,d6
0007CFD0 1A3C 0001                  		move.b	#1,d5
0007CFD4 43EE 0040                  		lea	$40(a6),a1
0007CFD8 45FA 0000                  		lea	byte_721BA(pc),a2
0007CFDC                            
0007CFDC                            loc_72098:
0007CFDC 08D1 0007                  		bset	#7,(a1)
0007CFE0 135A 0001                  		move.b	(a2)+,1(a1)
0007CFE4 1344 0002                  		move.b	d4,2(a1)
0007CFE8 1346 000D                  		move.b	d6,$D(a1)
0007CFEC 1341 000A                  		move.b	d1,$A(a1)
0007CFF0 1345 000E                  		move.b	d5,$E(a1)
0007CFF4 7000                       		moveq	#0,d0
0007CFF6 301C                       		move.w	(a4)+,d0
0007CFF8 D08B                       		add.l	a3,d0
0007CFFA 2340 0004                  		move.l	d0,4(a1)
0007CFFE 335C 0008                  		move.w	(a4)+,8(a1)
0007D002 D2C6                       		adda.w	d6,a1
0007D004 51CF FFD6                  		dbf	d7,loc_72098
0007D008 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007D00E 6600                       		bne.s	loc_720D8
0007D010 702B                       		moveq	#$2B,d0
0007D012 7200                       		moveq	#0,d1
0007D014 4EBA 0000                  		jsr	sub_7272E(pc)
0007D018 6000 0000                  		bra.w	loc_72114
0007D01C                            ; ===========================================================================
0007D01C                            
0007D01C                            loc_720D8:
0007D01C 7028                       		moveq	#$28,d0
0007D01E 7206                       		moveq	#6,d1
0007D020 4EBA 0000                  		jsr	sub_7272E(pc)
0007D024 103C 0042                  		move.b	#$42,d0
0007D028 727F                       		moveq	#$7F,d1
0007D02A 4EBA 0000                  		jsr	sub_72764(pc)
0007D02E 103C 004A                  		move.b	#$4A,d0
0007D032 727F                       		moveq	#$7F,d1
0007D034 4EBA 0000                  		jsr	sub_72764(pc)
0007D038 103C 0046                  		move.b	#$46,d0
0007D03C 727F                       		moveq	#$7F,d1
0007D03E 4EBA 0000                  		jsr	sub_72764(pc)
0007D042 103C 004E                  		move.b	#$4E,d0
0007D046 727F                       		moveq	#$7F,d1
0007D048 4EBA 0000                  		jsr	sub_72764(pc)
0007D04C 103C 00B6                  		move.b	#-$4A,d0
0007D050 123C 00C0                  		move.b	#-$40,d1
0007D054 4EBA 0000                  		jsr	sub_72764(pc)
0007D058                            
0007D058                            loc_72114:
0007D058 7E00                       		moveq	#0,d7
0007D05A 1E2B 0003                  		move.b	3(a3),d7
0007D05E 6700                       		beq.s	loc_72154
0007D060 5307                       		subq.b	#1,d7
0007D062 43EE 0190                  		lea	$190(a6),a1
0007D066 45FA 0000                  		lea	byte_721C2(pc),a2
0007D06A                            
0007D06A                            loc_72126:
0007D06A 08D1 0007                  		bset	#7,(a1)
0007D06E 135A 0001                  		move.b	(a2)+,1(a1)
0007D072 1344 0002                  		move.b	d4,2(a1)
0007D076 1346 000D                  		move.b	d6,$D(a1)
0007D07A 1345 000E                  		move.b	d5,$E(a1)
0007D07E 7000                       		moveq	#0,d0
0007D080 301C                       		move.w	(a4)+,d0
0007D082 D08B                       		add.l	a3,d0
0007D084 2340 0004                  		move.l	d0,4(a1)
0007D088 335C 0008                  		move.w	(a4)+,8(a1)
0007D08C 101C                       		move.b	(a4)+,d0
0007D08E 135C 000B                  		move.b	(a4)+,$B(a1)
0007D092 D2C6                       		adda.w	d6,a1
0007D094 51CF FFD4                  		dbf	d7,loc_72126
0007D098                            
0007D098                            loc_72154:
0007D098 43EE 0220                  		lea	$220(a6),a1
0007D09C 7E05                       		moveq	#5,d7
0007D09E                            
0007D09E                            loc_7215A:
0007D09E 4A11                       		tst.b	(a1)
0007D0A0 6A00 0000                  		bpl.w	loc_7217C
0007D0A4 7000                       		moveq	#0,d0
0007D0A6 1029 0001                  		move.b	1(a1),d0
0007D0AA 6B00                       		bmi.s	loc_7216E
0007D0AC 5500                       		subq.b	#2,d0
0007D0AE E508                       		lsl.b	#2,d0
0007D0B0 6000                       		bra.s	loc_72170
0007D0B2                            ; ===========================================================================
0007D0B2                            
0007D0B2                            loc_7216E:
0007D0B2 E608                       		lsr.b	#3,d0
0007D0B4                            
0007D0B4                            loc_72170:
0007D0B4 41FA 0000                  		lea	dword_722CC(pc),a0
0007D0B8 2070 0000                  		movea.l	(a0,d0.w),a0
0007D0BC 08D0 0002                  		bset	#2,(a0)
0007D0C0                            
0007D0C0                            loc_7217C:
0007D0C0 D2C6                       		adda.w	d6,a1
0007D0C2 51CF FFDA                  		dbf	d7,loc_7215A
0007D0C6                            
0007D0C6 4A6E 0340                  		tst.w	$340(a6)
0007D0CA 6A00                       		bpl.s	loc_7218E
0007D0CC 08EE 0002 0100             		bset	#2,$100(a6)
0007D0D2                            
0007D0D2                            loc_7218E:
0007D0D2 4A6E 0370                  		tst.w	$370(a6)
0007D0D6 6A00                       		bpl.s	loc_7219A
0007D0D8 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D0DE                            
0007D0DE                            loc_7219A:
0007D0DE 4BEE 0070                  		lea	$70(a6),a5
0007D0E2 7805                       		moveq	#5,d4
0007D0E4                            
0007D0E4                            loc_721A0:
0007D0E4 4EBA 0000                  		jsr	sub_726FE(pc)
0007D0E8 DAC6                       		adda.w	d6,a5
0007D0EA 51CC FFF8                  		dbf	d4,loc_721A0
0007D0EE 7802                       		moveq	#2,d4
0007D0F0                            
0007D0F0                            loc_721AC:
0007D0F0 4EBA 0000                  		jsr	sub_729A0(pc)
0007D0F4 DAC6                       		adda.w	d6,a5
0007D0F6 51CC FFF8                  		dbf	d4,loc_721AC
0007D0FA                            
0007D0FA                            loc_721B6:
0007D0FA 584F                       		addq.w	#4,sp
0007D0FC 4E75                       		rts	
0007D0FE                            ; ===========================================================================
0007D0FE 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007D106                            		even
0007D106 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007D10A                            		even
0007D10A                            ; ===========================================================================
0007D10A                            ; ---------------------------------------------------------------------------
0007D10A                            ; Play normal sound effect
0007D10A                            ; ---------------------------------------------------------------------------
0007D10A                            
0007D10A                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007D10A 4A2E 0027                  		tst.b	$27(a6)
0007D10E 6600 0000                  		bne.w	loc_722C6
0007D112 4A2E 0004                  		tst.b	4(a6)
0007D116 6600 0000                  		bne.w	loc_722C6
0007D11A 4A2E 0024                  		tst.b	$24(a6)
0007D11E 6600 0000                  		bne.w	loc_722C6
0007D122 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007D126 6600                       		bne.s	Sound_notB5	; if not, branch
0007D128 4A2E 002B                  		tst.b	$2B(a6)
0007D12C 6600                       		bne.s	loc_721EE
0007D12E 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007D132                            
0007D132                            loc_721EE:
0007D132 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007D138                            
0007D138                            Sound_notB5:
0007D138 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007D13C 6600                       		bne.s	Sound_notA7	; if not, branch
0007D13E 4A2E 002C                  		tst.b	$2C(a6)
0007D142 6600 0000                  		bne.w	locret_722C4
0007D146 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007D14C                            
0007D14C                            Sound_notA7:
0007D14C 2079 0007 C754             		movea.l	(Go_SoundIndex).l,a0
0007D152 0407 00A0                  		subi.b	#$A0,d7
0007D156 E54F                       		lsl.w	#2,d7
0007D158 2670 7000                  		movea.l	(a0,d7.w),a3
0007D15C 224B                       		movea.l	a3,a1
0007D15E 7200                       		moveq	#0,d1
0007D160 3219                       		move.w	(a1)+,d1
0007D162 D28B                       		add.l	a3,d1
0007D164 1A19                       		move.b	(a1)+,d5
0007D166 1E19                       		move.b	(a1)+,d7
0007D168 5307                       		subq.b	#1,d7
0007D16A 7C30                       		moveq	#$30,d6
0007D16C                            
0007D16C                            loc_72228:
0007D16C 7600                       		moveq	#0,d3
0007D16E 1629 0001                  		move.b	1(a1),d3
0007D172 1803                       		move.b	d3,d4
0007D174 6B00                       		bmi.s	loc_72244
0007D176 5543                       		subq.w	#2,d3
0007D178 E54B                       		lsl.w	#2,d3
0007D17A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D17E 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D182 08D5 0002                  		bset	#2,(a5)
0007D186 6000                       		bra.s	loc_7226E
0007D188                            ; ===========================================================================
0007D188                            
0007D188                            loc_72244:
0007D188 E64B                       		lsr.w	#3,d3
0007D18A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D18E 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D192 08D5 0002                  		bset	#2,(a5)
0007D196 0C04 00C0                  		cmpi.b	#$C0,d4
0007D19A 6600                       		bne.s	loc_7226E
0007D19C 1004                       		move.b	d4,d0
0007D19E 0000 001F                  		ori.b	#$1F,d0
0007D1A2 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D1A8 0840 0005                  		bchg	#5,d0
0007D1AC 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D1B2                            
0007D1B2                            loc_7226E:
0007D1B2 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007D1B6 244D                       		movea.l	a5,a2
0007D1B8 700B                       		moveq	#$B,d0
0007D1BA                            
0007D1BA                            loc_72276:
0007D1BA 429A                       		clr.l	(a2)+
0007D1BC 51C8 FFFC                  		dbf	d0,loc_72276
0007D1C0                            
0007D1C0 3A99                       		move.w	(a1)+,(a5)
0007D1C2 1B45 0002                  		move.b	d5,2(a5)
0007D1C6 7000                       		moveq	#0,d0
0007D1C8 3019                       		move.w	(a1)+,d0
0007D1CA D08B                       		add.l	a3,d0
0007D1CC 2B40 0004                  		move.l	d0,4(a5)
0007D1D0 3B59 0008                  		move.w	(a1)+,8(a5)
0007D1D4 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D1DA 1B46 000D                  		move.b	d6,$D(a5)
0007D1DE 4A04                       		tst.b	d4
0007D1E0 6B00                       		bmi.s	loc_722A8
0007D1E2 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D1E8 2B41 0020                  		move.l	d1,$20(a5)
0007D1EC                            
0007D1EC                            loc_722A8:
0007D1EC 51CF FF7E                  		dbf	d7,loc_72228
0007D1F0                            
0007D1F0 4A2E 0250                  		tst.b	$250(a6)
0007D1F4 6A00                       		bpl.s	loc_722B8
0007D1F6 08EE 0002 0340             		bset	#2,$340(a6)
0007D1FC                            
0007D1FC                            loc_722B8:
0007D1FC 4A2E 0310                  		tst.b	$310(a6)
0007D200 6A00                       		bpl.s	locret_722C4
0007D202 08EE 0002 0370             		bset	#2,$370(a6)
0007D208                            
0007D208                            locret_722C4:
0007D208 4E75                       		rts	
0007D20A                            ; ===========================================================================
0007D20A                            
0007D20A                            loc_722C6:
0007D20A 4216                       		clr.b	0(a6)
0007D20C 4E75                       		rts	
0007D20E                            ; ===========================================================================
0007D20E 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007D212 0000 0000                  		dc.l 0
0007D216 00FF F100                  		dc.l $FFF100
0007D21A 00FF F130                  		dc.l $FFF130
0007D21E 00FF F190                  		dc.l $FFF190
0007D222 00FF F1C0                  		dc.l $FFF1C0
0007D226 00FF F1F0                  		dc.l $FFF1F0
0007D22A 00FF F1F0                  		dc.l $FFF1F0
0007D22E 00FF F220                  dword_722EC:	dc.l $FFF220
0007D232 0000 0000                  		dc.l 0
0007D236 00FF F250                  		dc.l $FFF250
0007D23A 00FF F280                  		dc.l $FFF280
0007D23E 00FF F2B0                  		dc.l $FFF2B0
0007D242 00FF F2E0                  		dc.l $FFF2E0
0007D246 00FF F310                  		dc.l $FFF310
0007D24A 00FF F310                  		dc.l $FFF310
0007D24E                            ; ===========================================================================
0007D24E                            ; ---------------------------------------------------------------------------
0007D24E                            ; Play GHZ waterfall sound
0007D24E                            ; ---------------------------------------------------------------------------
0007D24E                            
0007D24E                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007D24E 4A2E 0027                  		tst.b	$27(a6)
0007D252 6600 0000                  		bne.w	locret_723C6
0007D256 4A2E 0004                  		tst.b	4(a6)
0007D25A 6600 0000                  		bne.w	locret_723C6
0007D25E 4A2E 0024                  		tst.b	$24(a6)
0007D262 6600 0000                  		bne.w	locret_723C6
0007D266 2079 0007 C74C             		movea.l	(Go_SoundD0).l,a0
0007D26C 0407 00D0                  		subi.b	#$D0,d7
0007D270 E54F                       		lsl.w	#2,d7
0007D272 2670 7000                  		movea.l	(a0,d7.w),a3
0007D276 224B                       		movea.l	a3,a1
0007D278 7000                       		moveq	#0,d0
0007D27A 3019                       		move.w	(a1)+,d0
0007D27C D08B                       		add.l	a3,d0
0007D27E 2D40 0020                  		move.l	d0,$20(a6)
0007D282 1A19                       		move.b	(a1)+,d5
0007D284 1E19                       		move.b	(a1)+,d7
0007D286 5307                       		subq.b	#1,d7
0007D288 7C30                       		moveq	#$30,d6
0007D28A                            
0007D28A                            loc_72348:
0007D28A 1829 0001                  		move.b	1(a1),d4
0007D28E 6B00                       		bmi.s	loc_7235A
0007D290 08EE 0002 0100             		bset	#2,$100(a6)
0007D296 4BEE 0340                  		lea	$340(a6),a5
0007D29A 6000                       		bra.s	loc_72364
0007D29C                            ; ===========================================================================
0007D29C                            
0007D29C                            loc_7235A:
0007D29C 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D2A2 4BEE 0370                  		lea	$370(a6),a5
0007D2A6                            
0007D2A6                            loc_72364:
0007D2A6 244D                       		movea.l	a5,a2
0007D2A8 700B                       		moveq	#$B,d0
0007D2AA                            
0007D2AA                            loc_72368:
0007D2AA 429A                       		clr.l	(a2)+
0007D2AC 51C8 FFFC                  		dbf	d0,loc_72368
0007D2B0                            
0007D2B0 3A99                       		move.w	(a1)+,(a5)
0007D2B2 1B45 0002                  		move.b	d5,2(a5)
0007D2B6 7000                       		moveq	#0,d0
0007D2B8 3019                       		move.w	(a1)+,d0
0007D2BA D08B                       		add.l	a3,d0
0007D2BC 2B40 0004                  		move.l	d0,4(a5)
0007D2C0 3B59 0008                  		move.w	(a1)+,8(a5)
0007D2C4 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D2CA 1B46 000D                  		move.b	d6,$D(a5)
0007D2CE 4A04                       		tst.b	d4
0007D2D0 6B00                       		bmi.s	loc_72396
0007D2D2 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D2D8                            
0007D2D8                            loc_72396:
0007D2D8 51CF FFB0                  		dbf	d7,loc_72348
0007D2DC                            
0007D2DC 4A2E 0250                  		tst.b	$250(a6)
0007D2E0 6A00                       		bpl.s	loc_723A6
0007D2E2 08EE 0002 0340             		bset	#2,$340(a6)
0007D2E8                            
0007D2E8                            loc_723A6:
0007D2E8 4A2E 0310                  		tst.b	$310(a6)
0007D2EC 6A00                       		bpl.s	locret_723C6
0007D2EE 08EE 0002 0370             		bset	#2,$370(a6)
0007D2F4 0004 001F                  		ori.b	#$1F,d4
0007D2F8 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D2FE 0844 0005                  		bchg	#5,d4
0007D302 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D308                            
0007D308                            locret_723C6:
0007D308 4E75                       		rts	
0007D30A                            ; End of function Sound_ChkValue
0007D30A                            
0007D30A                            ; ===========================================================================
0007D30A 00FF F100                  		dc.l $FFF100
0007D30E 00FF F1F0                  		dc.l $FFF1F0
0007D312 00FF F250                  		dc.l $FFF250
0007D316 00FF F310                  		dc.l $FFF310
0007D31A 00FF F340                  		dc.l $FFF340
0007D31E 00FF F370                  		dc.l $FFF370
0007D322                            
0007D322                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D322                            
0007D322                            
0007D322                            Snd_FadeOut1:				; XREF: Sound_E0
0007D322 4216                       		clr.b	0(a6)
0007D324 4BEE 0220                  		lea	$220(a6),a5
0007D328 7E05                       		moveq	#5,d7
0007D32A                            
0007D32A                            loc_723EA:
0007D32A 4A15                       		tst.b	(a5)
0007D32C 6A00 0000                  		bpl.w	loc_72472
0007D330 0895 0007                  		bclr	#7,(a5)
0007D334 7600                       		moveq	#0,d3
0007D336 162D 0001                  		move.b	1(a5),d3
0007D33A 6B00                       		bmi.s	loc_7243C
0007D33C 4EBA 0000                  		jsr	sub_726FE(pc)
0007D340 0C03 0004                  		cmpi.b	#4,d3
0007D344 6600                       		bne.s	loc_72416
0007D346 4A2E 0340                  		tst.b	$340(a6)
0007D34A 6A00                       		bpl.s	loc_72416
0007D34C 4BEE 0340                  		lea	$340(a6),a5
0007D350 226E 0020                  		movea.l	$20(a6),a1
0007D354 6000                       		bra.s	loc_72428
0007D356                            ; ===========================================================================
0007D356                            
0007D356                            loc_72416:
0007D356 5503                       		subq.b	#2,d3
0007D358 E50B                       		lsl.b	#2,d3
0007D35A 41FA FEB2                  		lea	dword_722CC(pc),a0
0007D35E 264D                       		movea.l	a5,a3
0007D360 2A70 3000                  		movea.l	(a0,d3.w),a5
0007D364 226E 0018                  		movea.l	$18(a6),a1
0007D368                            
0007D368                            loc_72428:
0007D368 0895 0002                  		bclr	#2,(a5)
0007D36C 08D5 0001                  		bset	#1,(a5)
0007D370 102D 000B                  		move.b	$B(a5),d0
0007D374 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D378 2A4B                       		movea.l	a3,a5
0007D37A 6000                       		bra.s	loc_72472
0007D37C                            ; ===========================================================================
0007D37C                            
0007D37C                            loc_7243C:
0007D37C 4EBA 0000                  		jsr	sub_729A0(pc)
0007D380 41EE 0370                  		lea	$370(a6),a0
0007D384 0C03 00E0                  		cmpi.b	#$E0,d3
0007D388 6700                       		beq.s	loc_7245A
0007D38A 0C03 00C0                  		cmpi.b	#$C0,d3
0007D38E 6700                       		beq.s	loc_7245A
0007D390 E60B                       		lsr.b	#3,d3
0007D392 41FA FE7A                  		lea	dword_722CC(pc),a0
0007D396 2070 3000                  		movea.l	(a0,d3.w),a0
0007D39A                            
0007D39A                            loc_7245A:
0007D39A 0890 0002                  		bclr	#2,(a0)
0007D39E 08D0 0001                  		bset	#1,(a0)
0007D3A2 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007D3A8 6600                       		bne.s	loc_72472
0007D3AA 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007D3B2                            
0007D3B2                            loc_72472:
0007D3B2 DAFC 0030                  		adda.w	#$30,a5
0007D3B6 51CF FF72                  		dbf	d7,loc_723EA
0007D3BA                            
0007D3BA 4E75                       		rts	
0007D3BC                            ; End of function Snd_FadeOut1
0007D3BC                            
0007D3BC                            
0007D3BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D3BC                            
0007D3BC                            
0007D3BC                            Snd_FadeOut2:				; XREF: Sound_E0
0007D3BC 4BEE 0340                  		lea	$340(a6),a5
0007D3C0 4A15                       		tst.b	(a5)
0007D3C2 6A00                       		bpl.s	loc_724AE
0007D3C4 0895 0007                  		bclr	#7,(a5)
0007D3C8 0815 0002                  		btst	#2,(a5)
0007D3CC 6600                       		bne.s	loc_724AE
0007D3CE 4EBA 0000                  		jsr	loc_7270A(pc)
0007D3D2 4BEE 0100                  		lea	$100(a6),a5
0007D3D6 0895 0002                  		bclr	#2,(a5)
0007D3DA 08D5 0001                  		bset	#1,(a5)
0007D3DE 4A15                       		tst.b	(a5)
0007D3E0 6A00                       		bpl.s	loc_724AE
0007D3E2 226E 0018                  		movea.l	$18(a6),a1
0007D3E6 102D 000B                  		move.b	$B(a5),d0
0007D3EA 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D3EE                            
0007D3EE                            loc_724AE:
0007D3EE 4BEE 0370                  		lea	$370(a6),a5
0007D3F2 4A15                       		tst.b	(a5)
0007D3F4 6A00                       		bpl.s	locret_724E4
0007D3F6 0895 0007                  		bclr	#7,(a5)
0007D3FA 0815 0002                  		btst	#2,(a5)
0007D3FE 6600                       		bne.s	locret_724E4
0007D400 4EBA 0000                  		jsr	loc_729A6(pc)
0007D404 4BEE 01F0                  		lea	$1F0(a6),a5
0007D408 0895 0002                  		bclr	#2,(a5)
0007D40C 08D5 0001                  		bset	#1,(a5)
0007D410 4A15                       		tst.b	(a5)
0007D412 6A00                       		bpl.s	locret_724E4
0007D414 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007D41A 6600                       		bne.s	locret_724E4
0007D41C 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007D424                            
0007D424                            locret_724E4:
0007D424 4E75                       		rts	
0007D426                            ; End of function Snd_FadeOut2
0007D426                            
0007D426                            ; ===========================================================================
0007D426                            ; ---------------------------------------------------------------------------
0007D426                            ; Fade out music
0007D426                            ; ---------------------------------------------------------------------------
0007D426                            
0007D426                            Sound_E0:				; XREF: Sound_ExIndex
0007D426 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007D42A 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007D42E 1D7C 0003 0006             		move.b	#3,6(a6)
0007D434 1D7C 0028 0004             		move.b	#$28,4(a6)
0007D43A 422E 0040                  		clr.b	$40(a6)
0007D43E 422E 002A                  		clr.b	$2A(a6)
0007D442 4E75                       		rts	
0007D444                            
0007D444                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D444                            
0007D444                            
0007D444                            sub_72504:				; XREF: sub_71B4C
0007D444 102E 0006                  		move.b	6(a6),d0
0007D448 6700                       		beq.s	loc_72510
0007D44A 532E 0006                  		subq.b	#1,6(a6)
0007D44E 4E75                       		rts	
0007D450                            ; ===========================================================================
0007D450                            
0007D450                            loc_72510:
0007D450 532E 0004                  		subq.b	#1,4(a6)
0007D454 6700 0000                  		beq.w	Sound_E4
0007D458 1D7C 0003 0006             		move.b	#3,6(a6)
0007D45E 4BEE 0070                  		lea	$70(a6),a5
0007D462 7E05                       		moveq	#5,d7
0007D464                            
0007D464                            loc_72524:
0007D464 4A15                       		tst.b	(a5)
0007D466 6A00                       		bpl.s	loc_72538
0007D468 522D 0009                  		addq.b	#1,9(a5)
0007D46C 6A00                       		bpl.s	loc_72534
0007D46E 0895 0007                  		bclr	#7,(a5)
0007D472 6000                       		bra.s	loc_72538
0007D474                            ; ===========================================================================
0007D474                            
0007D474                            loc_72534:
0007D474 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D478                            
0007D478                            loc_72538:
0007D478 DAFC 0030                  		adda.w	#$30,a5
0007D47C 51CF FFE6                  		dbf	d7,loc_72524
0007D480                            
0007D480 7E02                       		moveq	#2,d7
0007D482                            
0007D482                            loc_72542:
0007D482 4A15                       		tst.b	(a5)
0007D484 6A00                       		bpl.s	loc_72560
0007D486 522D 0009                  		addq.b	#1,9(a5)
0007D48A 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007D490 6500                       		bcs.s	loc_72558
0007D492 0895 0007                  		bclr	#7,(a5)
0007D496 6000                       		bra.s	loc_72560
0007D498                            ; ===========================================================================
0007D498                            
0007D498                            loc_72558:
0007D498 1C2D 0009                  		move.b	9(a5),d6
0007D49C 4EBA 0000                  		jsr	sub_7296A(pc)
0007D4A0                            
0007D4A0                            loc_72560:
0007D4A0 DAFC 0030                  		adda.w	#$30,a5
0007D4A4 51CF FFDC                  		dbf	d7,loc_72542
0007D4A8                            
0007D4A8 4E75                       		rts	
0007D4AA                            ; End of function sub_72504
0007D4AA                            
0007D4AA                            
0007D4AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D4AA                            
0007D4AA                            
0007D4AA                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007D4AA 7602                       		moveq	#2,d3
0007D4AC 7028                       		moveq	#$28,d0
0007D4AE                            
0007D4AE                            loc_7256E:
0007D4AE 1203                       		move.b	d3,d1
0007D4B0 4EBA 0000                  		jsr	sub_7272E(pc)
0007D4B4 5801                       		addq.b	#4,d1
0007D4B6 4EBA 0000                  		jsr	sub_7272E(pc)
0007D4BA 51CB FFF2                  		dbf	d3,loc_7256E
0007D4BE                            
0007D4BE 7040                       		moveq	#$40,d0
0007D4C0 727F                       		moveq	#$7F,d1
0007D4C2 7802                       		moveq	#2,d4
0007D4C4                            
0007D4C4                            loc_72584:
0007D4C4 7603                       		moveq	#3,d3
0007D4C6                            
0007D4C6                            loc_72586:
0007D4C6 4EBA 0000                  		jsr	sub_7272E(pc)
0007D4CA 4EBA 0000                  		jsr	sub_72764(pc)
0007D4CE 5840                       		addq.w	#4,d0
0007D4D0 51CB FFF4                  		dbf	d3,loc_72586
0007D4D4                            
0007D4D4 0400 000F                  		subi.b	#$F,d0
0007D4D8 51CC FFEA                  		dbf	d4,loc_72584
0007D4DC                            
0007D4DC 4E75                       		rts	
0007D4DE                            ; End of function sub_7256A
0007D4DE                            
0007D4DE                            ; ===========================================================================
0007D4DE                            ; ---------------------------------------------------------------------------
0007D4DE                            ; Stop music
0007D4DE                            ; ---------------------------------------------------------------------------
0007D4DE                            
0007D4DE                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007D4DE 702B                       		moveq	#$2B,d0
0007D4E0 123C 0080                  		move.b	#$80,d1
0007D4E4 4EBA 0000                  		jsr	sub_7272E(pc)
0007D4E8 7027                       		moveq	#$27,d0
0007D4EA 7200                       		moveq	#0,d1
0007D4EC 4EBA 0000                  		jsr	sub_7272E(pc)
0007D4F0 204E                       		movea.l	a6,a0
0007D4F2 303C 00E3                  		move.w	#$E3,d0
0007D4F6                            
0007D4F6                            loc_725B6:
0007D4F6 4298                       		clr.l	(a0)+
0007D4F8 51C8 FFFC                  		dbf	d0,loc_725B6
0007D4FC                            
0007D4FC 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007D502 4EBA FFA6                  		jsr	sub_7256A(pc)
0007D506 6000 0000                  		bra.w	sub_729B6
0007D50A                            
0007D50A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D50A                            
0007D50A                            
0007D50A                            sub_725CA:				; XREF: Sound_ChkValue
0007D50A 204E                       		movea.l	a6,a0
0007D50C 1216                       		move.b	0(a6),d1
0007D50E 142E 0027                  		move.b	$27(a6),d2
0007D512 162E 002A                  		move.b	$2A(a6),d3
0007D516 182E 0026                  		move.b	$26(a6),d4
0007D51A 3A2E 000A                  		move.w	$A(a6),d5
0007D51E 303C 0087                  		move.w	#$87,d0
0007D522                            
0007D522                            loc_725E4:
0007D522 4298                       		clr.l	(a0)+
0007D524 51C8 FFFC                  		dbf	d0,loc_725E4
0007D528                            
0007D528 1C81                       		move.b	d1,0(a6)
0007D52A 1D42 0027                  		move.b	d2,$27(a6)
0007D52E 1D43 002A                  		move.b	d3,$2A(a6)
0007D532 1D44 0026                  		move.b	d4,$26(a6)
0007D536 3D45 000A                  		move.w	d5,$A(a6)
0007D53A 1D7C 0080 0009             		move.b	#$80,9(a6)
0007D540 4EBA FF68                  		jsr	sub_7256A(pc)
0007D544 6000 0000                  		bra.w	sub_729B6
0007D548                            ; End of function sub_725CA
0007D548                            
0007D548                            
0007D548                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D548                            
0007D548                            
0007D548                            sub_7260C:				; XREF: sub_71B4C
0007D548 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007D54E 41EE 004E                  		lea	$4E(a6),a0
0007D552 7030                       		moveq	#$30,d0
0007D554 7209                       		moveq	#9,d1
0007D556                            
0007D556                            loc_7261A:
0007D556 5210                       		addq.b	#1,(a0)
0007D558 D0C0                       		adda.w	d0,a0
0007D55A 51C9 FFFA                  		dbf	d1,loc_7261A
0007D55E                            
0007D55E 4E75                       		rts	
0007D560                            ; End of function sub_7260C
0007D560                            
0007D560                            ; ===========================================================================
0007D560                            ; ---------------------------------------------------------------------------
0007D560                            ; Speed	up music
0007D560                            ; ---------------------------------------------------------------------------
0007D560                            
0007D560                            Sound_E2:				; XREF: Sound_ExIndex
0007D560 4A2E 0027                  		tst.b	$27(a6)
0007D564 6600                       		bne.s	loc_7263E
0007D566 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007D56C 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007D572 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007D578 4E75                       		rts	
0007D57A                            ; ===========================================================================
0007D57A                            
0007D57A                            loc_7263E:
0007D57A 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007D580 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007D586 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007D58C 4E75                       		rts	
0007D58E                            ; ===========================================================================
0007D58E                            ; ---------------------------------------------------------------------------
0007D58E                            ; Change music back to normal speed
0007D58E                            ; ---------------------------------------------------------------------------
0007D58E                            
0007D58E                            Sound_E3:				; XREF: Sound_ExIndex
0007D58E 4A2E 0027                  		tst.b	$27(a6)
0007D592 6600                       		bne.s	loc_7266A
0007D594 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007D59A 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007D5A0 422E 002A                  		clr.b	$2A(a6)
0007D5A4 4E75                       		rts	
0007D5A6                            ; ===========================================================================
0007D5A6                            
0007D5A6                            loc_7266A:
0007D5A6 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007D5AC 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007D5B2 422E 03CA                  		clr.b	$3CA(a6)
0007D5B6 4E75                       		rts	
0007D5B8                            
0007D5B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D5B8                            
0007D5B8                            
0007D5B8                            sub_7267C:				; XREF: sub_71B4C
0007D5B8 4A2E 0025                  		tst.b	$25(a6)
0007D5BC 6700                       		beq.s	loc_72688
0007D5BE 532E 0025                  		subq.b	#1,$25(a6)
0007D5C2 4E75                       		rts	
0007D5C4                            ; ===========================================================================
0007D5C4                            
0007D5C4                            loc_72688:
0007D5C4 4A2E 0026                  		tst.b	$26(a6)
0007D5C8 6700                       		beq.s	loc_726D6
0007D5CA 532E 0026                  		subq.b	#1,$26(a6)
0007D5CE 1D7C 0002 0025             		move.b	#2,$25(a6)
0007D5D4 4BEE 0070                  		lea	$70(a6),a5
0007D5D8 7E05                       		moveq	#5,d7
0007D5DA                            
0007D5DA                            loc_7269E:
0007D5DA 4A15                       		tst.b	(a5)
0007D5DC 6A00                       		bpl.s	loc_726AA
0007D5DE 532D 0009                  		subq.b	#1,9(a5)
0007D5E2 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D5E6                            
0007D5E6                            loc_726AA:
0007D5E6 DAFC 0030                  		adda.w	#$30,a5
0007D5EA 51CF FFEE                  		dbf	d7,loc_7269E
0007D5EE 7E02                       		moveq	#2,d7
0007D5F0                            
0007D5F0                            loc_726B4:
0007D5F0 4A15                       		tst.b	(a5)
0007D5F2 6A00                       		bpl.s	loc_726CC
0007D5F4 532D 0009                  		subq.b	#1,9(a5)
0007D5F8 1C2D 0009                  		move.b	9(a5),d6
0007D5FC 0C06 0010                  		cmpi.b	#$10,d6
0007D600 6500                       		bcs.s	loc_726C8
0007D602 7C0F                       		moveq	#$F,d6
0007D604                            
0007D604                            loc_726C8:
0007D604 4EBA 0000                  		jsr	sub_7296A(pc)
0007D608                            
0007D608                            loc_726CC:
0007D608 DAFC 0030                  		adda.w	#$30,a5
0007D60C 51CF FFE2                  		dbf	d7,loc_726B4
0007D610 4E75                       		rts	
0007D612                            ; ===========================================================================
0007D612                            
0007D612                            loc_726D6:
0007D612 08AE 0002 0040             		bclr	#2,$40(a6)
0007D618 422E 0024                  		clr.b	$24(a6)
0007D61C 4E75                       		rts	
0007D61E                            ; End of function sub_7267C
0007D61E                            
0007D61E                            ; ===========================================================================
0007D61E                            
0007D61E                            loc_726E2:				; XREF: sub_71CCA
0007D61E 0815 0001                  		btst	#1,(a5)
0007D622 6600                       		bne.s	locret_726FC
0007D624 0815 0002                  		btst	#2,(a5)
0007D628 6600                       		bne.s	locret_726FC
0007D62A 7028                       		moveq	#$28,d0
0007D62C 122D 0001                  		move.b	1(a5),d1
0007D630 0001 00F0                  		ori.b	#-$10,d1
0007D634 6000 0000                  		bra.w	sub_7272E
0007D638                            ; ===========================================================================
0007D638                            
0007D638                            locret_726FC:
0007D638 4E75                       		rts	
0007D63A                            
0007D63A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D63A                            
0007D63A                            
0007D63A                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007D63A 0815 0004                  		btst	#4,(a5)
0007D63E 6600                       		bne.s	locret_72714
0007D640 0815 0002                  		btst	#2,(a5)
0007D644 6600                       		bne.s	locret_72714
0007D646                            
0007D646                            loc_7270A:				; XREF: Snd_FadeOut2
0007D646 7028                       		moveq	#$28,d0
0007D648 122D 0001                  		move.b	1(a5),d1
0007D64C 6000 0000                  		bra.w	sub_7272E
0007D650                            ; ===========================================================================
0007D650                            
0007D650                            locret_72714:
0007D650 4E75                       		rts	
0007D652                            ; End of function sub_726FE
0007D652                            
0007D652                            ; ===========================================================================
0007D652                            
0007D652                            loc_72716:				; XREF: sub_72A5A
0007D652 0815 0002                  		btst	#2,(a5)
0007D656 6600                       		bne.s	locret_72720
0007D658 6000 0000                  		bra.w	sub_72722
0007D65C                            ; ===========================================================================
0007D65C                            
0007D65C                            locret_72720:
0007D65C 4E75                       		rts	
0007D65E                            
0007D65E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D65E                            
0007D65E                            
0007D65E                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007D65E 082D 0002 0001             		btst	#2,1(a5)
0007D664 6600                       		bne.s	loc_7275A
0007D666 D02D 0001                  		add.b	1(a5),d0
0007D66A                            ; End of function sub_72722
0007D66A                            
0007D66A                            
0007D66A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D66A                            
0007D66A                            
0007D66A                            sub_7272E:				; XREF: loc_71E6A
0007D66A 1439 00A0 4000             		move.b	($A04000).l,d2
0007D670 0802 0007                  		btst	#7,d2
0007D674 66F4                       		bne.s	sub_7272E
0007D676 13C0 00A0 4000             		move.b	d0,($A04000).l
0007D67C 4E71                       		nop	
0007D67E 4E71                       		nop	
0007D680 4E71                       		nop	
0007D682                            
0007D682                            loc_72746:
0007D682 1439 00A0 4000             		move.b	($A04000).l,d2
0007D688 0802 0007                  		btst	#7,d2
0007D68C 66F4                       		bne.s	loc_72746
0007D68E                            
0007D68E 13C1 00A0 4001             		move.b	d1,($A04001).l
0007D694 4E75                       		rts	
0007D696                            ; End of function sub_7272E
0007D696                            
0007D696                            ; ===========================================================================
0007D696                            
0007D696                            loc_7275A:				; XREF: sub_72722
0007D696 142D 0001                  		move.b	1(a5),d2
0007D69A 0882 0002                  		bclr	#2,d2
0007D69E D002                       		add.b	d2,d0
0007D6A0                            
0007D6A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6A0                            
0007D6A0                            
0007D6A0                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007D6A0 1439 00A0 4000             		move.b	($A04000).l,d2
0007D6A6 0802 0007                  		btst	#7,d2
0007D6AA 66F4                       		bne.s	sub_72764
0007D6AC 13C0 00A0 4002             		move.b	d0,($A04002).l
0007D6B2 4E71                       		nop	
0007D6B4 4E71                       		nop	
0007D6B6 4E71                       		nop	
0007D6B8                            
0007D6B8                            loc_7277C:
0007D6B8 1439 00A0 4000             		move.b	($A04000).l,d2
0007D6BE 0802 0007                  		btst	#7,d2
0007D6C2 66F4                       		bne.s	loc_7277C
0007D6C4                            
0007D6C4 13C1 00A0 4003             		move.b	d1,($A04003).l
0007D6CA 4E75                       		rts	
0007D6CC                            ; End of function sub_72764
0007D6CC                            
0007D6CC                            ; ===========================================================================
0007D6CC 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007D6DE 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007D6F0 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007D700 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007D710 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007D720 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007D730 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007D740 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007D750 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007D760 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007D770 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007D780 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007D78C                            
0007D78C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D78C                            
0007D78C                            
0007D78C                            sub_72850:				; XREF: sub_71B4C
0007D78C 532D 000E                  		subq.b	#1,$E(a5)
0007D790 6600                       		bne.s	loc_72866
0007D792 0895 0004                  		bclr	#4,(a5)
0007D796 4EBA 0000                  		jsr	sub_72878(pc)
0007D79A 4EBA 0000                  		jsr	sub_728DC(pc)
0007D79E 6000 0000                  		bra.w	loc_7292E
0007D7A2                            ; ===========================================================================
0007D7A2                            
0007D7A2                            loc_72866:
0007D7A2 4EBA F3FE                  		jsr	sub_71D9E(pc)
0007D7A6 4EBA 0000                  		jsr	sub_72926(pc)
0007D7AA 4EBA F41E                  		jsr	sub_71DC6(pc)
0007D7AE 4EBA 0000                  		jsr	sub_728E2(pc)
0007D7B2 4E75                       		rts	
0007D7B4                            ; End of function sub_72850
0007D7B4                            
0007D7B4                            
0007D7B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7B4                            
0007D7B4                            
0007D7B4                            sub_72878:				; XREF: sub_72850
0007D7B4 0895 0001                  		bclr	#1,(a5)
0007D7B8 286D 0004                  		movea.l	4(a5),a4
0007D7BC                            
0007D7BC                            loc_72880:
0007D7BC 7A00                       		moveq	#0,d5
0007D7BE 1A1C                       		move.b	(a4)+,d5
0007D7C0 0C05 00E0                  		cmpi.b	#$E0,d5
0007D7C4 6500                       		bcs.s	loc_72890
0007D7C6 4EBA 0000                  		jsr	sub_72A5A(pc)
0007D7CA 60F0                       		bra.s	loc_72880
0007D7CC                            ; ===========================================================================
0007D7CC                            
0007D7CC                            loc_72890:
0007D7CC 4A05                       		tst.b	d5
0007D7CE 6A00                       		bpl.s	loc_728A4
0007D7D0 4EBA 0000                  		jsr	sub_728AC(pc)
0007D7D4 1A1C                       		move.b	(a4)+,d5
0007D7D6 4A05                       		tst.b	d5
0007D7D8 6A00                       		bpl.s	loc_728A4
0007D7DA 534C                       		subq.w	#1,a4
0007D7DC 6000 F386                  		bra.w	sub_71D60
0007D7E0                            ; ===========================================================================
0007D7E0                            
0007D7E0                            loc_728A4:
0007D7E0 4EBA F362                  		jsr	sub_71D40(pc)
0007D7E4 6000 F37E                  		bra.w	sub_71D60
0007D7E8                            ; End of function sub_72878
0007D7E8                            
0007D7E8                            
0007D7E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7E8                            
0007D7E8                            
0007D7E8                            sub_728AC:				; XREF: sub_72878
0007D7E8 0405 0081                  		subi.b	#$81,d5
0007D7EC 6500                       		bcs.s	loc_728CA
0007D7EE DA2D 0008                  		add.b	8(a5),d5
0007D7F2 0245 007F                  		andi.w	#$7F,d5
0007D7F6 E34D                       		lsl.w	#1,d5
0007D7F8 41FA 0000                  		lea	word_729CE(pc),a0
0007D7FC 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007D802 6000 F360                  		bra.w	sub_71D60
0007D806                            ; ===========================================================================
0007D806                            
0007D806                            loc_728CA:
0007D806 08D5 0001                  		bset	#1,(a5)
0007D80A 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007D810 4EBA F352                  		jsr	sub_71D60(pc)
0007D814 6000 0000                  		bra.w	sub_729A0
0007D818                            ; End of function sub_728AC
0007D818                            
0007D818                            
0007D818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D818                            
0007D818                            
0007D818                            sub_728DC:				; XREF: sub_72850
0007D818 3C2D 0010                  		move.w	$10(a5),d6
0007D81C 6B00                       		bmi.s	loc_72920
0007D81E                            ; End of function sub_728DC
0007D81E                            
0007D81E                            
0007D81E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D81E                            
0007D81E                            
0007D81E                            sub_728E2:				; XREF: sub_72850
0007D81E 102D 001E                  		move.b	$1E(a5),d0
0007D822 4880                       		ext.w	d0
0007D824 DC40                       		add.w	d0,d6
0007D826 0815 0002                  		btst	#2,(a5)
0007D82A 6600                       		bne.s	locret_7291E
0007D82C 0815 0001                  		btst	#1,(a5)
0007D830 6600                       		bne.s	locret_7291E
0007D832 102D 0001                  		move.b	1(a5),d0
0007D836 0C00 00E0                  		cmpi.b	#$E0,d0
0007D83A 6600                       		bne.s	loc_72904
0007D83C 103C 00C0                  		move.b	#$C0,d0
0007D840                            
0007D840                            loc_72904:
0007D840 3206                       		move.w	d6,d1
0007D842 0201 000F                  		andi.b	#$F,d1
0007D846 8001                       		or.b	d1,d0
0007D848 E84E                       		lsr.w	#4,d6
0007D84A 0206 003F                  		andi.b	#$3F,d6
0007D84E 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D854 13C6 00C0 0011             		move.b	d6,($C00011).l
0007D85A                            
0007D85A                            locret_7291E:
0007D85A 4E75                       		rts	
0007D85C                            ; End of function sub_728E2
0007D85C                            
0007D85C                            ; ===========================================================================
0007D85C                            
0007D85C                            loc_72920:				; XREF: sub_728DC
0007D85C 08D5 0001                  		bset	#1,(a5)
0007D860 4E75                       		rts	
0007D862                            
0007D862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D862                            
0007D862                            
0007D862                            sub_72926:				; XREF: sub_72850
0007D862 4A2D 000B                  		tst.b	$B(a5)
0007D866 6700 0000                  		beq.w	locret_7298A
0007D86A                            
0007D86A                            loc_7292E:				; XREF: sub_72850
0007D86A 1C2D 0009                  		move.b	9(a5),d6
0007D86E 7000                       		moveq	#0,d0
0007D870 102D 000B                  		move.b	$B(a5),d0
0007D874 6700                       		beq.s	sub_7296A
0007D876 2079 0007 C75C             		movea.l	(Go_PSGIndex).l,a0
0007D87C 5340                       		subq.w	#1,d0
0007D87E E548                       		lsl.w	#2,d0
0007D880 2070 0000                  		movea.l	(a0,d0.w),a0
0007D884 102D 000C                  		move.b	$C(a5),d0
0007D888 1030 0000                  		move.b	(a0,d0.w),d0
0007D88C 522D 000C                  		addq.b	#1,$C(a5)
0007D890 0800 0007                  		btst	#7,d0
0007D894 6700                       		beq.s	loc_72960
0007D896 0C00 0080                  		cmpi.b	#$80,d0
0007D89A 6700                       		beq.s	loc_7299A
0007D89C                            
0007D89C                            loc_72960:
0007D89C DC40                       		add.w	d0,d6
0007D89E 0C06 0010                  		cmpi.b	#$10,d6
0007D8A2 6500                       		bcs.s	sub_7296A
0007D8A4 7C0F                       		moveq	#$F,d6
0007D8A6                            ; End of function sub_72926
0007D8A6                            
0007D8A6                            
0007D8A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D8A6                            
0007D8A6                            
0007D8A6                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007D8A6 0815 0001                  		btst	#1,(a5)
0007D8AA 6600                       		bne.s	locret_7298A
0007D8AC 0815 0002                  		btst	#2,(a5)
0007D8B0 6600                       		bne.s	locret_7298A
0007D8B2 0815 0004                  		btst	#4,(a5)
0007D8B6 6600                       		bne.s	loc_7298C
0007D8B8                            
0007D8B8                            loc_7297C:
0007D8B8 8C2D 0001                  		or.b	1(a5),d6
0007D8BC 0606 0010                  		addi.b	#$10,d6
0007D8C0 13C6 00C0 0011             		move.b	d6,($C00011).l
0007D8C6                            
0007D8C6                            locret_7298A:
0007D8C6 4E75                       		rts	
0007D8C8                            ; ===========================================================================
0007D8C8                            
0007D8C8                            loc_7298C:
0007D8C8 4A2D 0013                  		tst.b	$13(a5)
0007D8CC 67EA                       		beq.s	loc_7297C
0007D8CE 4A2D 0012                  		tst.b	$12(a5)
0007D8D2 66E4                       		bne.s	loc_7297C
0007D8D4 4E75                       		rts	
0007D8D6                            ; End of function sub_7296A
0007D8D6                            
0007D8D6                            ; ===========================================================================
0007D8D6                            
0007D8D6                            loc_7299A:				; XREF: sub_72926
0007D8D6 532D 000C                  		subq.b	#1,$C(a5)
0007D8DA 4E75                       		rts	
0007D8DC                            
0007D8DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D8DC                            
0007D8DC                            
0007D8DC                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007D8DC 0815 0002                  		btst	#2,(a5)
0007D8E0 6600                       		bne.s	locret_729B4
0007D8E2                            
0007D8E2                            loc_729A6:				; XREF: Snd_FadeOut2
0007D8E2 102D 0001                  		move.b	1(a5),d0
0007D8E6 0000 001F                  		ori.b	#$1F,d0
0007D8EA 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D8F0                            
0007D8F0                            locret_729B4:
0007D8F0 4E75                       		rts	
0007D8F2                            ; End of function sub_729A0
0007D8F2                            
0007D8F2                            
0007D8F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D8F2                            
0007D8F2                            
0007D8F2                            sub_729B6:				; XREF: loc_71E7C
0007D8F2 41F9 00C0 0011             		lea	($C00011).l,a0
0007D8F8 10BC 009F                  		move.b	#$9F,(a0)
0007D8FC 10BC 00BF                  		move.b	#$BF,(a0)
0007D900 10BC 00DF                  		move.b	#$DF,(a0)
0007D904 10BC 00FF                  		move.b	#$FF,(a0)
0007D908 4E75                       		rts	
0007D90A                            ; End of function sub_729B6
0007D90A                            
0007D90A                            ; ===========================================================================
0007D90A 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007D91C 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007D92E 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007D942 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007D956 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007D96A 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007D97E 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007D992 0011 0000                  		dc.w $11, 0
0007D996                            
0007D996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D996                            
0007D996                            
0007D996                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007D996 0445 00E0                  		subi.w	#$E0,d5
0007D99A E54D                       		lsl.w	#2,d5
0007D99C 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007D9A0                            ; End of function sub_72A5A
0007D9A0                            
0007D9A0                            ; ===========================================================================
0007D9A0                            
0007D9A0                            loc_72A64:
0007D9A0 6000 0000                  		bra.w	loc_72ACC
0007D9A4                            ; ===========================================================================
0007D9A4 6000 0000                  		bra.w	loc_72AEC
0007D9A8                            ; ===========================================================================
0007D9A8 6000 0000                  		bra.w	loc_72AF2
0007D9AC                            ; ===========================================================================
0007D9AC 6000 0000                  		bra.w	loc_72AF8
0007D9B0                            ; ===========================================================================
0007D9B0 6000 0000                  		bra.w	loc_72B14
0007D9B4                            ; ===========================================================================
0007D9B4 6000 0000                  		bra.w	loc_72B9E
0007D9B8                            ; ===========================================================================
0007D9B8 6000 0000                  		bra.w	loc_72BA4
0007D9BC                            ; ===========================================================================
0007D9BC 6000 0000                  		bra.w	loc_72BAE
0007D9C0                            ; ===========================================================================
0007D9C0 6000 0000                  		bra.w	loc_72BB4
0007D9C4                            ; ===========================================================================
0007D9C4 6000 0000                  		bra.w	loc_72BBE
0007D9C8                            ; ===========================================================================
0007D9C8 6000 0000                  		bra.w	loc_72BC6
0007D9CC                            ; ===========================================================================
0007D9CC 6000 0000                  		bra.w	loc_72BD0
0007D9D0                            ; ===========================================================================
0007D9D0 6000 0000                  		bra.w	loc_72BE6
0007D9D4                            ; ===========================================================================
0007D9D4 6000 0000                  		bra.w	loc_72BEE
0007D9D8                            ; ===========================================================================
0007D9D8 6000 0000                  		bra.w	loc_72BF4
0007D9DC                            ; ===========================================================================
0007D9DC 6000 0000                  		bra.w	loc_72C26
0007D9E0                            ; ===========================================================================
0007D9E0 6000 0000                  		bra.w	loc_72D30
0007D9E4                            ; ===========================================================================
0007D9E4 6000 0000                  		bra.w	loc_72D52
0007D9E8                            ; ===========================================================================
0007D9E8 6000 0000                  		bra.w	loc_72D58
0007D9EC                            ; ===========================================================================
0007D9EC 6000 0000                  		bra.w	loc_72E06
0007D9F0                            ; ===========================================================================
0007D9F0 6000 0000                  		bra.w	loc_72E20
0007D9F4                            ; ===========================================================================
0007D9F4 6000 0000                  		bra.w	loc_72E26
0007D9F8                            ; ===========================================================================
0007D9F8 6000 0000                  		bra.w	loc_72E2C
0007D9FC                            ; ===========================================================================
0007D9FC 6000 0000                  		bra.w	loc_72E38
0007DA00                            ; ===========================================================================
0007DA00 6000 0000                  		bra.w	loc_72E52
0007DA04                            ; ===========================================================================
0007DA04 6000 0000                  		bra.w	loc_72E64
0007DA08                            ; ===========================================================================
0007DA08                            
0007DA08                            loc_72ACC:				; XREF: loc_72A64
0007DA08 121C                       		move.b	(a4)+,d1
0007DA0A 4A2D 0001                  		tst.b	1(a5)
0007DA0E 6B00                       		bmi.s	locret_72AEA
0007DA10 102D 000A                  		move.b	$A(a5),d0
0007DA14 0200 0037                  		andi.b	#$37,d0
0007DA18 8200                       		or.b	d0,d1
0007DA1A 1B41 000A                  		move.b	d1,$A(a5)
0007DA1E 103C 00B4                  		move.b	#$B4,d0
0007DA22 6000 FC2E                  		bra.w	loc_72716
0007DA26                            ; ===========================================================================
0007DA26                            
0007DA26                            locret_72AEA:
0007DA26 4E75                       		rts	
0007DA28                            ; ===========================================================================
0007DA28                            
0007DA28                            loc_72AEC:				; XREF: loc_72A64
0007DA28 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007DA2C 4E75                       		rts	
0007DA2E                            ; ===========================================================================
0007DA2E                            
0007DA2E                            loc_72AF2:				; XREF: loc_72A64
0007DA2E 1D5C 0007                  		move.b	(a4)+,7(a6)
0007DA32 4E75                       		rts	
0007DA34                            ; ===========================================================================
0007DA34                            
0007DA34                            loc_72AF8:				; XREF: loc_72A64
0007DA34 7000                       		moveq	#0,d0
0007DA36 102D 000D                  		move.b	$D(a5),d0
0007DA3A 2875 0000                  		movea.l	(a5,d0.w),a4
0007DA3E 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007DA46 544C                       		addq.w	#2,a4
0007DA48 5800                       		addq.b	#4,d0
0007DA4A 1B40 000D                  		move.b	d0,$D(a5)
0007DA4E 4E75                       		rts	
0007DA50                            ; ===========================================================================
0007DA50                            
0007DA50                            loc_72B14:				; XREF: loc_72A64
0007DA50 204E                       		movea.l	a6,a0
0007DA52 43EE 03A0                  		lea	$3A0(a6),a1
0007DA56 303C 0087                  		move.w	#$87,d0
0007DA5A                            
0007DA5A                            loc_72B1E:
0007DA5A 20D9                       		move.l	(a1)+,(a0)+
0007DA5C 51C8 FFFC                  		dbf	d0,loc_72B1E
0007DA60                            
0007DA60 08EE 0002 0040             		bset	#2,$40(a6)
0007DA66 264D                       		movea.l	a5,a3
0007DA68 1C3C 0028                  		move.b	#$28,d6
0007DA6C 9C2E 0026                  		sub.b	$26(a6),d6
0007DA70 7E05                       		moveq	#5,d7
0007DA72 4BEE 0070                  		lea	$70(a6),a5
0007DA76                            
0007DA76                            loc_72B3A:
0007DA76 0815 0007                  		btst	#7,(a5)
0007DA7A 6700                       		beq.s	loc_72B5C
0007DA7C 08D5 0001                  		bset	#1,(a5)
0007DA80 DD2D 0009                  		add.b	d6,9(a5)
0007DA84 0815 0002                  		btst	#2,(a5)
0007DA88 6600                       		bne.s	loc_72B5C
0007DA8A 7000                       		moveq	#0,d0
0007DA8C 102D 000B                  		move.b	$B(a5),d0
0007DA90 226E 0018                  		movea.l	$18(a6),a1
0007DA94 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DA98                            
0007DA98                            loc_72B5C:
0007DA98 DAFC 0030                  		adda.w	#$30,a5
0007DA9C 51CF FFD8                  		dbf	d7,loc_72B3A
0007DAA0                            
0007DAA0 7E02                       		moveq	#2,d7
0007DAA2                            
0007DAA2                            loc_72B66:
0007DAA2 0815 0007                  		btst	#7,(a5)
0007DAA6 6700                       		beq.s	loc_72B78
0007DAA8 08D5 0001                  		bset	#1,(a5)
0007DAAC 4EBA FE2E                  		jsr	sub_729A0(pc)
0007DAB0 DD2D 0009                  		add.b	d6,9(a5)
0007DAB4                            
0007DAB4                            loc_72B78:
0007DAB4 DAFC 0030                  		adda.w	#$30,a5
0007DAB8 51CF FFE8                  		dbf	d7,loc_72B66
0007DABC 2A4B                       		movea.l	a3,a5
0007DABE 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007DAC4 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007DACA 422E 0027                  		clr.b	$27(a6)
0007DACE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007DAD6 504F                       		addq.w	#8,sp
0007DAD8 4E75                       		rts	
0007DADA                            ; ===========================================================================
0007DADA                            
0007DADA                            loc_72B9E:				; XREF: loc_72A64
0007DADA 1B5C 0002                  		move.b	(a4)+,2(a5)
0007DADE 4E75                       		rts	
0007DAE0                            ; ===========================================================================
0007DAE0                            
0007DAE0                            loc_72BA4:				; XREF: loc_72A64
0007DAE0 101C                       		move.b	(a4)+,d0
0007DAE2 D12D 0009                  		add.b	d0,9(a5)
0007DAE6 6000 0000                  		bra.w	sub_72CB4
0007DAEA                            ; ===========================================================================
0007DAEA                            
0007DAEA                            loc_72BAE:				; XREF: loc_72A64
0007DAEA 08D5 0004                  		bset	#4,(a5)
0007DAEE 4E75                       		rts	
0007DAF0                            ; ===========================================================================
0007DAF0                            
0007DAF0                            loc_72BB4:				; XREF: loc_72A64
0007DAF0 1B54 0012                  		move.b	(a4),$12(a5)
0007DAF4 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007DAF8 4E75                       		rts	
0007DAFA                            ; ===========================================================================
0007DAFA                            
0007DAFA                            loc_72BBE:				; XREF: loc_72A64
0007DAFA 101C                       		move.b	(a4)+,d0
0007DAFC D12D 0008                  		add.b	d0,8(a5)
0007DB00 4E75                       		rts	
0007DB02                            ; ===========================================================================
0007DB02                            
0007DB02                            loc_72BC6:				; XREF: loc_72A64
0007DB02 1D54 0002                  		move.b	(a4),2(a6)
0007DB06 1D5C 0001                  		move.b	(a4)+,1(a6)
0007DB0A 4E75                       		rts	
0007DB0C                            ; ===========================================================================
0007DB0C                            
0007DB0C                            loc_72BD0:				; XREF: loc_72A64
0007DB0C 41EE 0040                  		lea	$40(a6),a0
0007DB10 101C                       		move.b	(a4)+,d0
0007DB12 7230                       		moveq	#$30,d1
0007DB14 7409                       		moveq	#9,d2
0007DB16                            
0007DB16                            loc_72BDA:
0007DB16 1140 0002                  		move.b	d0,2(a0)
0007DB1A D0C1                       		adda.w	d1,a0
0007DB1C 51CA FFF8                  		dbf	d2,loc_72BDA
0007DB20                            
0007DB20 4E75                       		rts	
0007DB22                            ; ===========================================================================
0007DB22                            
0007DB22                            loc_72BE6:				; XREF: loc_72A64
0007DB22 101C                       		move.b	(a4)+,d0
0007DB24 D12D 0009                  		add.b	d0,9(a5)
0007DB28 4E75                       		rts	
0007DB2A                            ; ===========================================================================
0007DB2A                            
0007DB2A                            loc_72BEE:				; XREF: loc_72A64
0007DB2A 422E 002C                  		clr.b	$2C(a6)
0007DB2E 4E75                       		rts	
0007DB30                            ; ===========================================================================
0007DB30                            
0007DB30                            loc_72BF4:				; XREF: loc_72A64
0007DB30 0895 0007                  		bclr	#7,(a5)
0007DB34 0895 0004                  		bclr	#4,(a5)
0007DB38 4EBA FB00                  		jsr	sub_726FE(pc)
0007DB3C 4A2E 0250                  		tst.b	$250(a6)
0007DB40 6B00                       		bmi.s	loc_72C22
0007DB42 264D                       		movea.l	a5,a3
0007DB44 4BEE 0100                  		lea	$100(a6),a5
0007DB48 226E 0018                  		movea.l	$18(a6),a1
0007DB4C 0895 0002                  		bclr	#2,(a5)
0007DB50 08D5 0001                  		bset	#1,(a5)
0007DB54 102D 000B                  		move.b	$B(a5),d0
0007DB58 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DB5C 2A4B                       		movea.l	a3,a5
0007DB5E                            
0007DB5E                            loc_72C22:
0007DB5E 504F                       		addq.w	#8,sp
0007DB60 4E75                       		rts	
0007DB62                            ; ===========================================================================
0007DB62                            
0007DB62                            loc_72C26:				; XREF: loc_72A64
0007DB62 7000                       		moveq	#0,d0
0007DB64 101C                       		move.b	(a4)+,d0
0007DB66 1B40 000B                  		move.b	d0,$B(a5)
0007DB6A 0815 0002                  		btst	#2,(a5)
0007DB6E 6600 0000                  		bne.w	locret_72CAA
0007DB72 226E 0018                  		movea.l	$18(a6),a1
0007DB76 4A2E 000E                  		tst.b	$E(a6)
0007DB7A 6700                       		beq.s	sub_72C4E
0007DB7C 226D 0020                  		movea.l	$20(a5),a1
0007DB80 4A2E 000E                  		tst.b	$E(a6)
0007DB84 6B00                       		bmi.s	sub_72C4E
0007DB86 226E 0020                  		movea.l	$20(a6),a1
0007DB8A                            
0007DB8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DB8A                            
0007DB8A                            
0007DB8A                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007DB8A 5340                       		subq.w	#1,d0
0007DB8C 6B00                       		bmi.s	loc_72C5C
0007DB8E 323C 0019                  		move.w	#$19,d1
0007DB92                            
0007DB92                            loc_72C56:
0007DB92 D2C1                       		adda.w	d1,a1
0007DB94 51C8 FFFC                  		dbf	d0,loc_72C56
0007DB98                            
0007DB98                            loc_72C5C:
0007DB98 1219                       		move.b	(a1)+,d1
0007DB9A 1B41 001F                  		move.b	d1,$1F(a5)
0007DB9E 1801                       		move.b	d1,d4
0007DBA0 103C 00B0                  		move.b	#$B0,d0
0007DBA4 4EBA FAB8                  		jsr	sub_72722(pc)
0007DBA8 45FA 0000                  		lea	byte_72D18(pc),a2
0007DBAC 7613                       		moveq	#$13,d3
0007DBAE                            
0007DBAE                            loc_72C72:
0007DBAE 101A                       		move.b	(a2)+,d0
0007DBB0 1219                       		move.b	(a1)+,d1
0007DBB2 4EBA FAAA                  		jsr	sub_72722(pc)
0007DBB6 51CB FFF6                  		dbf	d3,loc_72C72
0007DBBA 7A03                       		moveq	#3,d5
0007DBBC 0244 0007                  		andi.w	#7,d4
0007DBC0 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007DBC4 162D 0009                  		move.b	9(a5),d3
0007DBC8                            
0007DBC8                            loc_72C8C:
0007DBC8 101A                       		move.b	(a2)+,d0
0007DBCA 1219                       		move.b	(a1)+,d1
0007DBCC E20C                       		lsr.b	#1,d4
0007DBCE 6400                       		bcc.s	loc_72C96
0007DBD0 D203                       		add.b	d3,d1
0007DBD2                            
0007DBD2                            loc_72C96:
0007DBD2 4EBA FA8A                  		jsr	sub_72722(pc)
0007DBD6 51CD FFF0                  		dbf	d5,loc_72C8C
0007DBDA 103C 00B4                  		move.b	#$B4,d0
0007DBDE 122D 000A                  		move.b	$A(a5),d1
0007DBE2 4EBA FA7A                  		jsr	sub_72722(pc)
0007DBE6                            
0007DBE6                            locret_72CAA:
0007DBE6 4E75                       		rts	
0007DBE8                            ; End of function sub_72C4E
0007DBE8                            
0007DBE8                            ; ===========================================================================
0007DBE8 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007DBF0                            
0007DBF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DBF0                            
0007DBF0                            
0007DBF0                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007DBF0 0815 0002                  		btst	#2,(a5)
0007DBF4 6600                       		bne.s	locret_72D16
0007DBF6 7000                       		moveq	#0,d0
0007DBF8 102D 000B                  		move.b	$B(a5),d0
0007DBFC 226E 0018                  		movea.l	$18(a6),a1
0007DC00 4A2E 000E                  		tst.b	$E(a6)
0007DC04 6700                       		beq.s	loc_72CD8
0007DC06 226E 0020                  		movea.l	$20(a6),a1
0007DC0A 4A2E 000E                  		tst.b	$E(a6)
0007DC0E 6B00                       		bmi.s	loc_72CD8
0007DC10 226E 0020                  		movea.l	$20(a6),a1
0007DC14                            
0007DC14                            loc_72CD8:
0007DC14 5340                       		subq.w	#1,d0
0007DC16 6B00                       		bmi.s	loc_72CE6
0007DC18 323C 0019                  		move.w	#$19,d1
0007DC1C                            
0007DC1C                            loc_72CE0:
0007DC1C D2C1                       		adda.w	d1,a1
0007DC1E 51C8 FFFC                  		dbf	d0,loc_72CE0
0007DC22                            
0007DC22                            loc_72CE6:
0007DC22 D2FC 0015                  		adda.w	#$15,a1
0007DC26 45FA 0000                  		lea	byte_72D2C(pc),a2
0007DC2A 102D 001F                  		move.b	$1F(a5),d0
0007DC2E 0240 0007                  		andi.w	#7,d0
0007DC32 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007DC36 162D 0009                  		move.b	9(a5),d3
0007DC3A 6B00                       		bmi.s	locret_72D16
0007DC3C 7A03                       		moveq	#3,d5
0007DC3E                            
0007DC3E                            loc_72D02:
0007DC3E 101A                       		move.b	(a2)+,d0
0007DC40 1219                       		move.b	(a1)+,d1
0007DC42 E20C                       		lsr.b	#1,d4
0007DC44 6400                       		bcc.s	loc_72D12
0007DC46 D203                       		add.b	d3,d1
0007DC48 6500                       		bcs.s	loc_72D12
0007DC4A 4EBA FA12                  		jsr	sub_72722(pc)
0007DC4E                            
0007DC4E                            loc_72D12:
0007DC4E 51CD FFEE                  		dbf	d5,loc_72D02
0007DC52                            
0007DC52                            locret_72D16:
0007DC52 4E75                       		rts	
0007DC54                            ; End of function sub_72CB4
0007DC54                            
0007DC54                            ; ===========================================================================
0007DC54 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007DC5E 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007DC68 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007DC6C                            ; ===========================================================================
0007DC6C                            
0007DC6C                            loc_72D30:				; XREF: loc_72A64
0007DC6C 08D5 0003                  		bset	#3,(a5)
0007DC70 2B4C 0014                  		move.l	a4,$14(a5)
0007DC74 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007DC78 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007DC7C 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007DC80 101C                       		move.b	(a4)+,d0
0007DC82 E208                       		lsr.b	#1,d0
0007DC84 1B40 001B                  		move.b	d0,$1B(a5)
0007DC88 426D 001C                  		clr.w	$1C(a5)
0007DC8C 4E75                       		rts	
0007DC8E                            ; ===========================================================================
0007DC8E                            
0007DC8E                            loc_72D52:				; XREF: loc_72A64
0007DC8E 08D5 0003                  		bset	#3,(a5)
0007DC92 4E75                       		rts	
0007DC94                            ; ===========================================================================
0007DC94                            
0007DC94                            loc_72D58:				; XREF: loc_72A64
0007DC94 0895 0007                  		bclr	#7,(a5)
0007DC98 0895 0004                  		bclr	#4,(a5)
0007DC9C 4A2D 0001                  		tst.b	1(a5)
0007DCA0 6B00                       		bmi.s	loc_72D74
0007DCA2 4A2E 0008                  		tst.b	8(a6)
0007DCA6 6B00 0000                  		bmi.w	loc_72E02
0007DCAA 4EBA F98E                  		jsr	sub_726FE(pc)
0007DCAE 6000                       		bra.s	loc_72D78
0007DCB0                            ; ===========================================================================
0007DCB0                            
0007DCB0                            loc_72D74:
0007DCB0 4EBA FC2A                  		jsr	sub_729A0(pc)
0007DCB4                            
0007DCB4                            loc_72D78:
0007DCB4 4A2E 000E                  		tst.b	$E(a6)
0007DCB8 6A00 0000                  		bpl.w	loc_72E02
0007DCBC 4216                       		clr.b	0(a6)
0007DCBE 7000                       		moveq	#0,d0
0007DCC0 102D 0001                  		move.b	1(a5),d0
0007DCC4 6B00                       		bmi.s	loc_72DCC
0007DCC6 41FA F546                  		lea	dword_722CC(pc),a0
0007DCCA 264D                       		movea.l	a5,a3
0007DCCC 0C00 0004                  		cmpi.b	#4,d0
0007DCD0 6600                       		bne.s	loc_72DA8
0007DCD2 4A2E 0340                  		tst.b	$340(a6)
0007DCD6 6A00                       		bpl.s	loc_72DA8
0007DCD8 4BEE 0340                  		lea	$340(a6),a5
0007DCDC 226E 0020                  		movea.l	$20(a6),a1
0007DCE0 6000                       		bra.s	loc_72DB8
0007DCE2                            ; ===========================================================================
0007DCE2                            
0007DCE2                            loc_72DA8:
0007DCE2 5500                       		subq.b	#2,d0
0007DCE4 E508                       		lsl.b	#2,d0
0007DCE6 2A70 0000                  		movea.l	(a0,d0.w),a5
0007DCEA 4A15                       		tst.b	(a5)
0007DCEC 6A00                       		bpl.s	loc_72DC8
0007DCEE 226E 0018                  		movea.l	$18(a6),a1
0007DCF2                            
0007DCF2                            loc_72DB8:
0007DCF2 0895 0002                  		bclr	#2,(a5)
0007DCF6 08D5 0001                  		bset	#1,(a5)
0007DCFA 102D 000B                  		move.b	$B(a5),d0
0007DCFE 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007DD02                            
0007DD02                            loc_72DC8:
0007DD02 2A4B                       		movea.l	a3,a5
0007DD04 6000                       		bra.s	loc_72E02
0007DD06                            ; ===========================================================================
0007DD06                            
0007DD06                            loc_72DCC:
0007DD06 41EE 0370                  		lea	$370(a6),a0
0007DD0A 4A10                       		tst.b	(a0)
0007DD0C 6A00                       		bpl.s	loc_72DE0
0007DD0E 0C00 00E0                  		cmpi.b	#$E0,d0
0007DD12 6700                       		beq.s	loc_72DEA
0007DD14 0C00 00C0                  		cmpi.b	#$C0,d0
0007DD18 6700                       		beq.s	loc_72DEA
0007DD1A                            
0007DD1A                            loc_72DE0:
0007DD1A 41FA F4F2                  		lea	dword_722CC(pc),a0
0007DD1E E608                       		lsr.b	#3,d0
0007DD20 2070 0000                  		movea.l	(a0,d0.w),a0
0007DD24                            
0007DD24                            loc_72DEA:
0007DD24 0890 0002                  		bclr	#2,(a0)
0007DD28 08D0 0001                  		bset	#1,(a0)
0007DD2C 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007DD32 6600                       		bne.s	loc_72E02
0007DD34 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007DD3C                            
0007DD3C                            loc_72E02:
0007DD3C 504F                       		addq.w	#8,sp
0007DD3E 4E75                       		rts	
0007DD40                            ; ===========================================================================
0007DD40                            
0007DD40                            loc_72E06:				; XREF: loc_72A64
0007DD40 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007DD46 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007DD4A 0815 0002                  		btst	#2,(a5)
0007DD4E 6600                       		bne.s	locret_72E1E
0007DD50 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007DD58                            
0007DD58                            locret_72E1E:
0007DD58 4E75                       		rts	
0007DD5A                            ; ===========================================================================
0007DD5A                            
0007DD5A                            loc_72E20:				; XREF: loc_72A64
0007DD5A 0895 0003                  		bclr	#3,(a5)
0007DD5E 4E75                       		rts	
0007DD60                            ; ===========================================================================
0007DD60                            
0007DD60                            loc_72E26:				; XREF: loc_72A64
0007DD60 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007DD64 4E75                       		rts	
0007DD66                            ; ===========================================================================
0007DD66                            
0007DD66                            loc_72E2C:				; XREF: loc_72A64
0007DD66 101C                       		move.b	(a4)+,d0
0007DD68 E148                       		lsl.w	#8,d0
0007DD6A 101C                       		move.b	(a4)+,d0
0007DD6C D8C0                       		adda.w	d0,a4
0007DD6E 534C                       		subq.w	#1,a4
0007DD70 4E75                       		rts	
0007DD72                            ; ===========================================================================
0007DD72                            
0007DD72                            loc_72E38:				; XREF: loc_72A64
0007DD72 7000                       		moveq	#0,d0
0007DD74 101C                       		move.b	(a4)+,d0
0007DD76 121C                       		move.b	(a4)+,d1
0007DD78 4A35 0024                  		tst.b	$24(a5,d0.w)
0007DD7C 6600                       		bne.s	loc_72E48
0007DD7E 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007DD82                            
0007DD82                            loc_72E48:
0007DD82 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007DD86 66DE                       		bne.s	loc_72E2C
0007DD88 544C                       		addq.w	#2,a4
0007DD8A 4E75                       		rts	
0007DD8C                            ; ===========================================================================
0007DD8C                            
0007DD8C                            loc_72E52:				; XREF: loc_72A64
0007DD8C 7000                       		moveq	#0,d0
0007DD8E 102D 000D                  		move.b	$D(a5),d0
0007DD92 5900                       		subq.b	#4,d0
0007DD94 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007DD98 1B40 000D                  		move.b	d0,$D(a5)
0007DD9C 60C8                       		bra.s	loc_72E2C
0007DD9E                            ; ===========================================================================
0007DD9E                            
0007DD9E                            loc_72E64:				; XREF: loc_72A64
0007DD9E 103C 0088                  		move.b	#$88,d0
0007DDA2 123C 000F                  		move.b	#$F,d1
0007DDA6 4EBA F8C2                  		jsr	sub_7272E(pc)
0007DDAA 103C 008C                  		move.b	#$8C,d0
0007DDAE 123C 000F                  		move.b	#$F,d1
0007DDB2 6000 F8B6                  		bra.w	sub_7272E
0007DDB6                            ; ===========================================================================
0007DDB6                            Kos_Z80:	incbin	sound\z80_1.bin
0007DE66 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007DE68 21                         		dc.b $21
0007DE69 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007DE6B                            		incbin	sound\z80_2.bin
0007F516                            		even
0007F516                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00085D16                            		even
00085D16                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008F5B4                            		even
0008F5B4                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000931D4 00                         		even
000931D4                            Music84:	include	sound\music84.asm ; Star Light Act 1
000931D4                            music84_Header:
000931D4 =00000001                  smpsHeaderStartSong = 1
000931D4 0000                       	smpsHeaderVoice     music84_Voices
000931D6 0603                       	smpsHeaderChan      $06, $03
000931D8 0205                       	smpsHeaderTempo     $02, $05
000931DA                            
000931DE 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000931E2 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000931E6 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000931EA 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000931EE 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000931F2 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000931F8 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000931FE 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00093204                            
00093204                            ; FM1 Data
00093204                            music84_FM1:
00093204 E0C0                       	smpsPan             panCenter, $00
00093208 E107                       	smpsAlterNote       $07
0009320A 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0009320E E106                       	smpsAlterNote       $06
00093210 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00093214 E10B                       	smpsAlterNote       $0B
00093216 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0009321C E10C                       	smpsAlterNote       $0C
0009321E E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093221 E10B                       	smpsAlterNote       $0B
00093223 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093226 E109                       	smpsAlterNote       $09
00093228 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0009322D E108                       	smpsAlterNote       $08
0009322F 8001                       	dc.b	nRst, $01
00093231 E10B                       	smpsAlterNote       $0B
00093233 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00093239 E107                       	smpsAlterNote       $07
0009323B 9B03                       	dc.b	nD2, $03
0009323D                            
0009323D                            music84_Jump04:
0009323D E107                       	smpsAlterNote       $07
0009323F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093243 E10B                       	smpsAlterNote       $0B
00093245 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093249 E107                       	smpsAlterNote       $07
0009324B 9B03                       	dc.b	nD2, $03
0009324D E11A                       	smpsAlterNote       $1A
0009324F A301                       	dc.b	nBb2, $01
00093251 E1F2                       	smpsAlterNote       $F2
00093253 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093256 E1FF                       	smpsAlterNote       $FF
00093258 E701                       	dc.b	smpsNoAttack, $01
0009325A E111                       	smpsAlterNote       $11
0009325C E701                       	dc.b	smpsNoAttack, $01
0009325E E106                       	smpsAlterNote       $06
00093260 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093263 E107                       	smpsAlterNote       $07
00093265 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093269 E108                       	smpsAlterNote       $08
0009326B 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00093273 E109                       	smpsAlterNote       $09
00093275 A003                       	dc.b	nG2, $03
00093277 E10C                       	smpsAlterNote       $0C
00093279 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009327D E1FD                       	smpsAlterNote       $FD
0009327F A401                       	dc.b	nB2, $01
00093281 E109                       	smpsAlterNote       $09
00093283 E701                       	dc.b	smpsNoAttack, $01
00093285 E106                       	smpsAlterNote       $06
00093287 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009328A E109                       	smpsAlterNote       $09
0009328C A007                       	dc.b	nG2, $07
0009328E E108                       	smpsAlterNote       $08
00093290 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093294 E107                       	smpsAlterNote       $07
00093296 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0009329C E10B                       	smpsAlterNote       $0B
0009329E A203 8001                  	dc.b	nA2, $03, nRst, $01
000932A2 E107                       	smpsAlterNote       $07
000932A4 9B03                       	dc.b	nD2, $03
000932A6 E11A                       	smpsAlterNote       $1A
000932A8 A301                       	dc.b	nBb2, $01
000932AA E1F9                       	smpsAlterNote       $F9
000932AC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000932AF E107                       	smpsAlterNote       $07
000932B1 E701                       	dc.b	smpsNoAttack, $01
000932B3 E111                       	smpsAlterNote       $11
000932B5 E701                       	dc.b	smpsNoAttack, $01
000932B7 E106                       	smpsAlterNote       $06
000932B9 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000932BE E107                       	smpsAlterNote       $07
000932C0 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000932C8 E1EC                       	smpsAlterNote       $EC
000932CA A101                       	dc.b	nAb2, $01
000932CC E108                       	smpsAlterNote       $08
000932CE E701                       	dc.b	smpsNoAttack, $01
000932D0 E116                       	smpsAlterNote       $16
000932D2 E701                       	dc.b	smpsNoAttack, $01
000932D4 E1F5                       	smpsAlterNote       $F5
000932D6 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000932D9 E10B                       	smpsAlterNote       $0B
000932DB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000932DF E107                       	smpsAlterNote       $07
000932E1 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000932E7 E109                       	smpsAlterNote       $09
000932E9 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000932ED E10B                       	smpsAlterNote       $0B
000932EF 9603                       	dc.b	nA1, $03
000932F1 E107                       	smpsAlterNote       $07
000932F3 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000932F9 E10B                       	smpsAlterNote       $0B
000932FB A203 8001                  	dc.b	nA2, $03, nRst, $01
000932FF E107                       	smpsAlterNote       $07
00093301 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093305 E11A                       	smpsAlterNote       $1A
00093307 A301                       	dc.b	nBb2, $01
00093309 E1F9                       	smpsAlterNote       $F9
0009330B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009330E E107                       	smpsAlterNote       $07
00093310 E701                       	dc.b	smpsNoAttack, $01
00093312 E1FB                       	smpsAlterNote       $FB
00093314 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093317 E106                       	smpsAlterNote       $06
00093319 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009331D E107                       	smpsAlterNote       $07
0009331F 9B03                       	dc.b	nD2, $03
00093321 E108                       	smpsAlterNote       $08
00093323 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093329 E109                       	smpsAlterNote       $09
0009332B A002 8001                  	dc.b	nG2, $02, nRst, $01
0009332F E10C                       	smpsAlterNote       $0C
00093331 A303                       	dc.b	nBb2, $03
00093333 E1F0                       	smpsAlterNote       $F0
00093335 A401                       	dc.b	nB2, $01
00093337 E1FD                       	smpsAlterNote       $FD
00093339 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0009333E E106                       	smpsAlterNote       $06
00093340 8001                       	dc.b	nRst, $01
00093342 E109                       	smpsAlterNote       $09
00093344 A006 8001                  	dc.b	nG2, $06, nRst, $01
00093348 E108                       	smpsAlterNote       $08
0009334A 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0009334E E107                       	smpsAlterNote       $07
00093350 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093356 E10B                       	smpsAlterNote       $0B
00093358 A203                       	dc.b	nA2, $03
0009335A E107                       	smpsAlterNote       $07
0009335C 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093360 E1F2                       	smpsAlterNote       $F2
00093362 A401                       	dc.b	nB2, $01
00093364 E1FF                       	smpsAlterNote       $FF
00093366 E701                       	dc.b	smpsNoAttack, $01
00093368 E107                       	smpsAlterNote       $07
0009336A E701                       	dc.b	smpsNoAttack, $01
0009336C E1FB                       	smpsAlterNote       $FB
0009336E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093371 E106                       	smpsAlterNote       $06
00093373 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093377 E107                       	smpsAlterNote       $07
00093379 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00093383 E117                       	smpsAlterNote       $17
00093385 A001                       	dc.b	nG2, $01
00093387 E1FA                       	smpsAlterNote       $FA
00093389 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009338C E108                       	smpsAlterNote       $08
0009338E E701                       	dc.b	smpsNoAttack, $01
00093390 E1E7                       	smpsAlterNote       $E7
00093392 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093395 E103                       	smpsAlterNote       $03
00093397 E701                       	dc.b	smpsNoAttack, $01
00093399 E10B                       	smpsAlterNote       $0B
0009339B E702                       	dc.b	smpsNoAttack, $02
0009339D E107                       	smpsAlterNote       $07
0009339F 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000933A7 E106                       	smpsAlterNote       $06
000933A9 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000933AF E10C                       	smpsAlterNote       $0C
000933B1 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000933B7 E109                       	smpsAlterNote       $09
000933B9 9E03                       	dc.b	nF2, $03
000933BB E10C                       	smpsAlterNote       $0C
000933BD 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000933C1 E1EA                       	smpsAlterNote       $EA
000933C3 A201                       	dc.b	nA2, $01
000933C5 E106                       	smpsAlterNote       $06
000933C7 E701                       	dc.b	smpsNoAttack, $01
000933C9 E1E2                       	smpsAlterNote       $E2
000933CB E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000933CE E1F0                       	smpsAlterNote       $F0
000933D0 E701                       	dc.b	smpsNoAttack, $01
000933D2 E10C                       	smpsAlterNote       $0C
000933D4 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000933E0 E116                       	smpsAlterNote       $16
000933E2 9C01                       	dc.b	nEb2, $01
000933E4 E105                       	smpsAlterNote       $05
000933E6 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000933E9 E1F1                       	smpsAlterNote       $F1
000933EB E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000933EE E1FF                       	smpsAlterNote       $FF
000933F0 E701                       	dc.b	smpsNoAttack, $01
000933F2 E109                       	smpsAlterNote       $09
000933F4 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000933F8 E10C                       	smpsAlterNote       $0C
000933FA 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00093406 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0009340C E109                       	smpsAlterNote       $09
0009340E 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093412 E10C                       	smpsAlterNote       $0C
00093414 9703                       	dc.b	nBb1, $03
00093416 E11A                       	smpsAlterNote       $1A
00093418 A101                       	dc.b	nAb2, $01
0009341A E1FB                       	smpsAlterNote       $FB
0009341C E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009341F E10A                       	smpsAlterNote       $0A
00093421 E701                       	dc.b	smpsNoAttack, $01
00093423 E1E8                       	smpsAlterNote       $E8
00093425 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093428 E106                       	smpsAlterNote       $06
0009342A E701                       	dc.b	smpsNoAttack, $01
0009342C E10C                       	smpsAlterNote       $0C
0009342E E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
0009343A E1F9                       	smpsAlterNote       $F9
0009343C 9D01                       	dc.b	nE2, $01
0009343E E108                       	smpsAlterNote       $08
00093440 E701                       	dc.b	smpsNoAttack, $01
00093442 E1F6                       	smpsAlterNote       $F6
00093444 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093447 E109                       	smpsAlterNote       $09
00093449 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0009344D E10C                       	smpsAlterNote       $0C
0009344F 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
0009345B E108                       	smpsAlterNote       $08
0009345D 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00093463 E106                       	smpsAlterNote       $06
00093465 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093469 E108                       	smpsAlterNote       $08
0009346B 9D03                       	dc.b	nE2, $03
0009346D E1EB                       	smpsAlterNote       $EB
0009346F A801                       	dc.b	nEb3, $01
00093471 E109                       	smpsAlterNote       $09
00093473 E701                       	dc.b	smpsNoAttack, $01
00093475 E1FA                       	smpsAlterNote       $FA
00093477 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0009347A E108                       	smpsAlterNote       $08
0009347C E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00093488 E1E9                       	smpsAlterNote       $E9
0009348A A301                       	dc.b	nBb2, $01
0009348C E107                       	smpsAlterNote       $07
0009348E E701                       	dc.b	smpsNoAttack, $01
00093490 E1F0                       	smpsAlterNote       $F0
00093492 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093495 E1F7                       	smpsAlterNote       $F7
00093497 E701                       	dc.b	smpsNoAttack, $01
00093499 E107                       	smpsAlterNote       $07
0009349B E701                       	dc.b	smpsNoAttack, $01
0009349D E106                       	smpsAlterNote       $06
0009349F E701                       	dc.b	smpsNoAttack, $01
000934A1 E108                       	smpsAlterNote       $08
000934A3 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000934A9 E106                       	smpsAlterNote       $06
000934AB A403 8001                  	dc.b	nB2, $03, nRst, $01
000934AF E108                       	smpsAlterNote       $08
000934B1 9D03                       	dc.b	nE2, $03
000934B3 E10B                       	smpsAlterNote       $0B
000934B5 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000934BD E108                       	smpsAlterNote       $08
000934BF 9D03                       	dc.b	nE2, $03
000934C1 E10B                       	smpsAlterNote       $0B
000934C3 9603 8001                  	dc.b	nA1, $03, nRst, $01
000934C7 E113                       	smpsAlterNote       $13
000934C9 A001                       	dc.b	nG2, $01
000934CB E118                       	smpsAlterNote       $18
000934CD E701                       	dc.b	smpsNoAttack, $01
000934CF E1E9                       	smpsAlterNote       $E9
000934D1 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000934D4 E1F3                       	smpsAlterNote       $F3
000934D6 E701                       	dc.b	smpsNoAttack, $01
000934D8 E1FD                       	smpsAlterNote       $FD
000934DA E701                       	dc.b	smpsNoAttack, $01
000934DC E102                       	smpsAlterNote       $02
000934DE E701                       	dc.b	smpsNoAttack, $01
000934E0 E107                       	smpsAlterNote       $07
000934E2 8001                       	dc.b	nRst, $01
000934E4 E10B                       	smpsAlterNote       $0B
000934E6 9603                       	dc.b	nA1, $03
000934E8 E10C                       	smpsAlterNote       $0C
000934EA 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000934F0 E10B                       	smpsAlterNote       $0B
000934F2 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000934FE 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00093504 E107                       	smpsAlterNote       $07
00093506 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0009350C E10B                       	smpsAlterNote       $0B
0009350E A203                       	dc.b	nA2, $03
00093510 E107                       	smpsAlterNote       $07
00093512 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093516 E1F2                       	smpsAlterNote       $F2
00093518 A401                       	dc.b	nB2, $01
0009351A E1FF                       	smpsAlterNote       $FF
0009351C E701                       	dc.b	smpsNoAttack, $01
0009351E E107                       	smpsAlterNote       $07
00093520 E701                       	dc.b	smpsNoAttack, $01
00093522 E1FB                       	smpsAlterNote       $FB
00093524 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093527 E106                       	smpsAlterNote       $06
00093529 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009352D E107                       	smpsAlterNote       $07
0009352F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093533 E108                       	smpsAlterNote       $08
00093535 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0009353B E109                       	smpsAlterNote       $09
0009353D A003 8001                  	dc.b	nG2, $03, nRst, $01
00093541 E10C                       	smpsAlterNote       $0C
00093543 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093547 E1F0                       	smpsAlterNote       $F0
00093549 A401                       	dc.b	nB2, $01
0009354B E109                       	smpsAlterNote       $09
0009354D E701                       	dc.b	smpsNoAttack, $01
0009354F E106                       	smpsAlterNote       $06
00093551 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093554 E109                       	smpsAlterNote       $09
00093556 A007                       	dc.b	nG2, $07
00093558 E108                       	smpsAlterNote       $08
0009355A 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0009355E E107                       	smpsAlterNote       $07
00093560 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093566 E10B                       	smpsAlterNote       $0B
00093568 A202 8001                  	dc.b	nA2, $02, nRst, $01
0009356C E107                       	smpsAlterNote       $07
0009356E 9B03                       	dc.b	nD2, $03
00093570 E11A                       	smpsAlterNote       $1A
00093572 A301                       	dc.b	nBb2, $01
00093574 E1F2                       	smpsAlterNote       $F2
00093576 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093579 E1FF                       	smpsAlterNote       $FF
0009357B E701                       	dc.b	smpsNoAttack, $01
0009357D E111                       	smpsAlterNote       $11
0009357F E701                       	dc.b	smpsNoAttack, $01
00093581 E106                       	smpsAlterNote       $06
00093583 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093586 E107                       	smpsAlterNote       $07
00093588 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093594 E117                       	smpsAlterNote       $17
00093596 A001                       	dc.b	nG2, $01
00093598 E1FA                       	smpsAlterNote       $FA
0009359A E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009359D E116                       	smpsAlterNote       $16
0009359F E701                       	dc.b	smpsNoAttack, $01
000935A1 E1F5                       	smpsAlterNote       $F5
000935A3 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000935A6 E103                       	smpsAlterNote       $03
000935A8 E701                       	dc.b	smpsNoAttack, $01
000935AA E10B                       	smpsAlterNote       $0B
000935AC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000935B0 E107                       	smpsAlterNote       $07
000935B2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000935B8 E109                       	smpsAlterNote       $09
000935BA 9E03                       	dc.b	nF2, $03
000935BC E10B                       	smpsAlterNote       $0B
000935BE 9603 8001                  	dc.b	nA1, $03, nRst, $01
000935C2 E107                       	smpsAlterNote       $07
000935C4 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000935CA E10B                       	smpsAlterNote       $0B
000935CC A203 8001                  	dc.b	nA2, $03, nRst, $01
000935D0 E107                       	smpsAlterNote       $07
000935D2 9B03                       	dc.b	nD2, $03
000935D4 E11A                       	smpsAlterNote       $1A
000935D6 A301                       	dc.b	nBb2, $01
000935D8 E1F9                       	smpsAlterNote       $F9
000935DA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000935DD E107                       	smpsAlterNote       $07
000935DF E701                       	dc.b	smpsNoAttack, $01
000935E1 E111                       	smpsAlterNote       $11
000935E3 E701                       	dc.b	smpsNoAttack, $01
000935E5 E106                       	smpsAlterNote       $06
000935E7 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000935EC E107                       	smpsAlterNote       $07
000935EE 9B03                       	dc.b	nD2, $03
000935F0 E108                       	smpsAlterNote       $08
000935F2 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000935F8 E109                       	smpsAlterNote       $09
000935FA A003                       	dc.b	nG2, $03
000935FC E10C                       	smpsAlterNote       $0C
000935FE A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093602 E1FD                       	smpsAlterNote       $FD
00093604 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00093609 E106                       	smpsAlterNote       $06
0009360B 8001                       	dc.b	nRst, $01
0009360D E109                       	smpsAlterNote       $09
0009360F A006 8001                  	dc.b	nG2, $06, nRst, $01
00093613 E108                       	smpsAlterNote       $08
00093615 9C03                       	dc.b	nEb2, $03
00093617 E107                       	smpsAlterNote       $07
00093619 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0009361F E10B                       	smpsAlterNote       $0B
00093621 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093625 E107                       	smpsAlterNote       $07
00093627 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009362B E11A                       	smpsAlterNote       $1A
0009362D A301                       	dc.b	nBb2, $01
0009362F E1F9                       	smpsAlterNote       $F9
00093631 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093634 E107                       	smpsAlterNote       $07
00093636 E701                       	dc.b	smpsNoAttack, $01
00093638 E1FB                       	smpsAlterNote       $FB
0009363A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009363D E106                       	smpsAlterNote       $06
0009363F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093643 E107                       	smpsAlterNote       $07
00093645 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0009364D E1EC                       	smpsAlterNote       $EC
0009364F A101                       	dc.b	nAb2, $01
00093651 E108                       	smpsAlterNote       $08
00093653 E701                       	dc.b	smpsNoAttack, $01
00093655 E1E7                       	smpsAlterNote       $E7
00093657 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009365A E1F5                       	smpsAlterNote       $F5
0009365C E701                       	dc.b	smpsNoAttack, $01
0009365E E10B                       	smpsAlterNote       $0B
00093660 E702                       	dc.b	smpsNoAttack, $02
00093662 E107                       	smpsAlterNote       $07
00093664 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0009366A E106                       	smpsAlterNote       $06
0009366C 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00093672 E10C                       	smpsAlterNote       $0C
00093674 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0009367C E109                       	smpsAlterNote       $09
0009367E 9E03                       	dc.b	nF2, $03
00093680 E10C                       	smpsAlterNote       $0C
00093682 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093686 E1EA                       	smpsAlterNote       $EA
00093688 A201                       	dc.b	nA2, $01
0009368A E106                       	smpsAlterNote       $06
0009368C E701                       	dc.b	smpsNoAttack, $01
0009368E E114                       	smpsAlterNote       $14
00093690 E701                       	dc.b	smpsNoAttack, $01
00093692 E1F0                       	smpsAlterNote       $F0
00093694 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093697 E10C                       	smpsAlterNote       $0C
00093699 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000936A5 9703                       	dc.b	nBb1, $03
000936A7 E116                       	smpsAlterNote       $16
000936A9 9C01                       	dc.b	nEb2, $01
000936AB E105                       	smpsAlterNote       $05
000936AD E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000936B0 E113                       	smpsAlterNote       $13
000936B2 E701                       	dc.b	smpsNoAttack, $01
000936B4 E1FF                       	smpsAlterNote       $FF
000936B6 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000936B9 E109                       	smpsAlterNote       $09
000936BB E703                       	dc.b	smpsNoAttack, $03
000936BD E10C                       	smpsAlterNote       $0C
000936BF 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000936CB 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000936D3 E109                       	smpsAlterNote       $09
000936D5 9E03                       	dc.b	nF2, $03
000936D7 E10C                       	smpsAlterNote       $0C
000936D9 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000936DD E1EC                       	smpsAlterNote       $EC
000936DF A201                       	dc.b	nA2, $01
000936E1 E10A                       	smpsAlterNote       $0A
000936E3 E701                       	dc.b	smpsNoAttack, $01
000936E5 E1E8                       	smpsAlterNote       $E8
000936E7 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000936EA E1F7                       	smpsAlterNote       $F7
000936EC E701                       	dc.b	smpsNoAttack, $01
000936EE E10C                       	smpsAlterNote       $0C
000936F0 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000936FC E1EA                       	smpsAlterNote       $EA
000936FE 9D01                       	dc.b	nE2, $01
00093700 E108                       	smpsAlterNote       $08
00093702 E701                       	dc.b	smpsNoAttack, $01
00093704 E1F6                       	smpsAlterNote       $F6
00093706 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093709 E105                       	smpsAlterNote       $05
0009370B E701                       	dc.b	smpsNoAttack, $01
0009370D E109                       	smpsAlterNote       $09
0009370F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093713 E10C                       	smpsAlterNote       $0C
00093715 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00093721 E108                       	smpsAlterNote       $08
00093723 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00093729 E106                       	smpsAlterNote       $06
0009372B A403 8001                  	dc.b	nB2, $03, nRst, $01
0009372F E108                       	smpsAlterNote       $08
00093731 9D03                       	dc.b	nE2, $03
00093733 E1EB                       	smpsAlterNote       $EB
00093735 A801                       	dc.b	nEb3, $01
00093737 E109                       	smpsAlterNote       $09
00093739 E701                       	dc.b	smpsNoAttack, $01
0009373B E1EB                       	smpsAlterNote       $EB
0009373D E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00093740 E108                       	smpsAlterNote       $08
00093742 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0009374E E1E9                       	smpsAlterNote       $E9
00093750 A301                       	dc.b	nBb2, $01
00093752 E1F8                       	smpsAlterNote       $F8
00093754 E701                       	dc.b	smpsNoAttack, $01
00093756 E116                       	smpsAlterNote       $16
00093758 E701                       	dc.b	smpsNoAttack, $01
0009375A E1F7                       	smpsAlterNote       $F7
0009375C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009375F E107                       	smpsAlterNote       $07
00093761 E701                       	dc.b	smpsNoAttack, $01
00093763 E1EE                       	smpsAlterNote       $EE
00093765 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093768 E106                       	smpsAlterNote       $06
0009376A 8001                       	dc.b	nRst, $01
0009376C E108                       	smpsAlterNote       $08
0009376E 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00093774 E106                       	smpsAlterNote       $06
00093776 A402 8001                  	dc.b	nB2, $02, nRst, $01
0009377A E108                       	smpsAlterNote       $08
0009377C 9D03                       	dc.b	nE2, $03
0009377E E10B                       	smpsAlterNote       $0B
00093780 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00093786 E108                       	smpsAlterNote       $08
00093788 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0009378C E10B                       	smpsAlterNote       $0B
0009378E 9603                       	dc.b	nA1, $03
00093790 E10E                       	smpsAlterNote       $0E
00093792 A001                       	dc.b	nG2, $01
00093794 E118                       	smpsAlterNote       $18
00093796 E701                       	dc.b	smpsNoAttack, $01
00093798 E1E9                       	smpsAlterNote       $E9
0009379A E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009379D E1EE                       	smpsAlterNote       $EE
0009379F E701                       	dc.b	smpsNoAttack, $01
000937A1 E1F8                       	smpsAlterNote       $F8
000937A3 E701                       	dc.b	smpsNoAttack, $01
000937A5 E102                       	smpsAlterNote       $02
000937A7 E701                       	dc.b	smpsNoAttack, $01
000937A9 E107                       	smpsAlterNote       $07
000937AB 8001                       	dc.b	nRst, $01
000937AD E10B                       	smpsAlterNote       $0B
000937AF 9603                       	dc.b	nA1, $03
000937B1 E10C                       	smpsAlterNote       $0C
000937B3 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
000937B9 E10B                       	smpsAlterNote       $0B
000937BB 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000937C7 8001 9603                  	dc.b	nRst, $01, nA1, $03
000937CB E10C                       	smpsAlterNote       $0C
000937CD 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
000937D9 8001                       	dc.b	nRst, $01
000937DB E10B                       	smpsAlterNote       $0B
000937DD 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000937E5 E107                       	smpsAlterNote       $07
000937E7 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000937EB E10B                       	smpsAlterNote       $0B
000937ED 9603                       	dc.b	nA1, $03
000937EF E109                       	smpsAlterNote       $09
000937F1 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000937F5 E108                       	smpsAlterNote       $08
000937F7 9D06                       	dc.b	nE2, $06
000937F9 E107                       	smpsAlterNote       $07
000937FB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000937FF E106                       	smpsAlterNote       $06
00093801 9903                       	dc.b	nC2, $03
00093803 E10C                       	smpsAlterNote       $0C
00093805 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093809 E10B                       	smpsAlterNote       $0B
0009380B 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093817 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093821 E10C                       	smpsAlterNote       $0C
00093823 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0009382F 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0009383B 8001                       	dc.b	nRst, $01
0009383D E10B                       	smpsAlterNote       $0B
0009383F 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0009384B 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00093857 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00093863 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0009386D E10C                       	smpsAlterNote       $0C
0009386F 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
0009387B E10B                       	smpsAlterNote       $0B
0009387D 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00093885 E107                       	smpsAlterNote       $07
00093887 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0009388B E10B                       	smpsAlterNote       $0B
0009388D 9603                       	dc.b	nA1, $03
0009388F E109                       	smpsAlterNote       $09
00093891 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093895 E108                       	smpsAlterNote       $08
00093897 9D06 8001                  	dc.b	nE2, $06, nRst, $01
0009389B E107                       	smpsAlterNote       $07
0009389D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000938A1 E106                       	smpsAlterNote       $06
000938A3 9903                       	dc.b	nC2, $03
000938A5 E10C                       	smpsAlterNote       $0C
000938A7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000938AB E10B                       	smpsAlterNote       $0B
000938AD 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000938B9 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000938C3 E10C                       	smpsAlterNote       $0C
000938C5 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
000938D1 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000938DD 8001                       	dc.b	nRst, $01
000938DF E10B                       	smpsAlterNote       $0B
000938E1 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000938ED 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000938F7 E10C                       	smpsAlterNote       $0C
000938F9 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093905 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00093911 E10B                       	smpsAlterNote       $0B
00093913 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0009391F 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093929 E10C                       	smpsAlterNote       $0C
0009392B 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093937 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00093943 E10B                       	smpsAlterNote       $0B
00093945 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00093951 8001                       	dc.b	nRst, $01
00093953 E1EC                       	smpsAlterNote       $EC
00093955 A101                       	dc.b	nAb2, $01
00093957 E1FA                       	smpsAlterNote       $FA
00093959 E701                       	dc.b	smpsNoAttack, $01
0009395B E116                       	smpsAlterNote       $16
0009395D E701                       	dc.b	smpsNoAttack, $01
0009395F E1F5                       	smpsAlterNote       $F5
00093961 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093964 E10B                       	smpsAlterNote       $0B
00093966 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00093972 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0009397E E107                       	smpsAlterNote       $07
00093980 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093986 E10B                       	smpsAlterNote       $0B
00093988 A203                       	dc.b	nA2, $03
0009398A E107                       	smpsAlterNote       $07
0009398C 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093990 E1F3                       	smpsAlterNote       $F3
00093992 A401                       	dc.b	nB2, $01
00093994 E102                       	smpsAlterNote       $02
00093996 E701                       	dc.b	smpsNoAttack, $01
00093998 E109                       	smpsAlterNote       $09
0009399A E701                       	dc.b	smpsNoAttack, $01
0009399C E102                       	smpsAlterNote       $02
0009399E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000939A1 E106                       	smpsAlterNote       $06
000939A3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000939A7 E107                       	smpsAlterNote       $07
000939A9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000939AD E108                       	smpsAlterNote       $08
000939AF 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000939B5 E109                       	smpsAlterNote       $09
000939B7 A003 8001                  	dc.b	nG2, $03, nRst, $01
000939BB E1F2                       	smpsAlterNote       $F2
000939BD A401                       	dc.b	nB2, $01
000939BF E1FF                       	smpsAlterNote       $FF
000939C1 E701                       	dc.b	smpsNoAttack, $01
000939C3 E111                       	smpsAlterNote       $11
000939C5 E701                       	dc.b	smpsNoAttack, $01
000939C7 E1FB                       	smpsAlterNote       $FB
000939C9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000939CC E106                       	smpsAlterNote       $06
000939CE E702                       	dc.b	smpsNoAttack, $02
000939D0 E109                       	smpsAlterNote       $09
000939D2 A007                       	dc.b	nG2, $07
000939D4 E108                       	smpsAlterNote       $08
000939D6 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000939DA E107                       	smpsAlterNote       $07
000939DC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000939E2 E10B                       	smpsAlterNote       $0B
000939E4 A202 8001                  	dc.b	nA2, $02, nRst, $01
000939E8 E107                       	smpsAlterNote       $07
000939EA 9B03                       	dc.b	nD2, $03
000939EC E11A                       	smpsAlterNote       $1A
000939EE A301                       	dc.b	nBb2, $01
000939F0 E1F2                       	smpsAlterNote       $F2
000939F2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000939F5 E1FF                       	smpsAlterNote       $FF
000939F7 E701                       	dc.b	smpsNoAttack, $01
000939F9 E111                       	smpsAlterNote       $11
000939FB E701                       	dc.b	smpsNoAttack, $01
000939FD E106                       	smpsAlterNote       $06
000939FF E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093A02 E107                       	smpsAlterNote       $07
00093A04 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093A10 E117                       	smpsAlterNote       $17
00093A12 A001                       	dc.b	nG2, $01
00093A14 E1FA                       	smpsAlterNote       $FA
00093A16 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093A19 E116                       	smpsAlterNote       $16
00093A1B E701                       	dc.b	smpsNoAttack, $01
00093A1D E1F5                       	smpsAlterNote       $F5
00093A1F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093A22 E103                       	smpsAlterNote       $03
00093A24 E701                       	dc.b	smpsNoAttack, $01
00093A26 E10B                       	smpsAlterNote       $0B
00093A28 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093A2C E107                       	smpsAlterNote       $07
00093A2E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093A34 E109                       	smpsAlterNote       $09
00093A36 9E03                       	dc.b	nF2, $03
00093A38 E10B                       	smpsAlterNote       $0B
00093A3A 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093A3E E107                       	smpsAlterNote       $07
00093A40 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093A46 E10B                       	smpsAlterNote       $0B
00093A48 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093A4C E107                       	smpsAlterNote       $07
00093A4E 9B03                       	dc.b	nD2, $03
00093A50 E11A                       	smpsAlterNote       $1A
00093A52 A301                       	dc.b	nBb2, $01
00093A54 E1F9                       	smpsAlterNote       $F9
00093A56 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093A59 E1FF                       	smpsAlterNote       $FF
00093A5B E701                       	dc.b	smpsNoAttack, $01
00093A5D E111                       	smpsAlterNote       $11
00093A5F E701                       	dc.b	smpsNoAttack, $01
00093A61 E106                       	smpsAlterNote       $06
00093A63 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093A66 E107                       	smpsAlterNote       $07
00093A68 9B03                       	dc.b	nD2, $03
00093A6A E108                       	smpsAlterNote       $08
00093A6C 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093A72 E109                       	smpsAlterNote       $09
00093A74 A003                       	dc.b	nG2, $03
00093A76 E1F0                       	smpsAlterNote       $F0
00093A78 A501                       	dc.b	nC3, $01
00093A7A E106                       	smpsAlterNote       $06
00093A7C E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00093A80 E109                       	smpsAlterNote       $09
00093A82 A006 8001                  	dc.b	nG2, $06, nRst, $01
00093A86 E108                       	smpsAlterNote       $08
00093A88 9C03                       	dc.b	nEb2, $03
00093A8A E107                       	smpsAlterNote       $07
00093A8C 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093A92 E10B                       	smpsAlterNote       $0B
00093A94 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093A98 E107                       	smpsAlterNote       $07
00093A9A 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093A9E E11A                       	smpsAlterNote       $1A
00093AA0 A301                       	dc.b	nBb2, $01
00093AA2 E1F9                       	smpsAlterNote       $F9
00093AA4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093AA7 E107                       	smpsAlterNote       $07
00093AA9 E701                       	dc.b	smpsNoAttack, $01
00093AAB E1FB                       	smpsAlterNote       $FB
00093AAD E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093AB0 E106                       	smpsAlterNote       $06
00093AB2 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093AB6 E107                       	smpsAlterNote       $07
00093AB8 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093AC0 E1EC                       	smpsAlterNote       $EC
00093AC2 A101                       	dc.b	nAb2, $01
00093AC4 E108                       	smpsAlterNote       $08
00093AC6 E701                       	dc.b	smpsNoAttack, $01
00093AC8 E1E7                       	smpsAlterNote       $E7
00093ACA E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093ACD E1F5                       	smpsAlterNote       $F5
00093ACF E701                       	dc.b	smpsNoAttack, $01
00093AD1 E10B                       	smpsAlterNote       $0B
00093AD3 E702                       	dc.b	smpsNoAttack, $02
00093AD5 E107                       	smpsAlterNote       $07
00093AD7 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093ADD E106                       	smpsAlterNote       $06
00093ADF 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00093AE5 E10C                       	smpsAlterNote       $0C
00093AE7 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093AEF E109                       	smpsAlterNote       $09
00093AF1 9E03                       	dc.b	nF2, $03
00093AF3 E10C                       	smpsAlterNote       $0C
00093AF5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093AF9 E1EA                       	smpsAlterNote       $EA
00093AFB A201                       	dc.b	nA2, $01
00093AFD E106                       	smpsAlterNote       $06
00093AFF E701                       	dc.b	smpsNoAttack, $01
00093B01 E114                       	smpsAlterNote       $14
00093B03 E701                       	dc.b	smpsNoAttack, $01
00093B05 E1F0                       	smpsAlterNote       $F0
00093B07 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093B0A E10C                       	smpsAlterNote       $0C
00093B0C E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093B18 9703                       	dc.b	nBb1, $03
00093B1A E116                       	smpsAlterNote       $16
00093B1C 9C01                       	dc.b	nEb2, $01
00093B1E E105                       	smpsAlterNote       $05
00093B20 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093B23 E113                       	smpsAlterNote       $13
00093B25 E701                       	dc.b	smpsNoAttack, $01
00093B27 E1FF                       	smpsAlterNote       $FF
00093B29 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093B2C E109                       	smpsAlterNote       $09
00093B2E E703                       	dc.b	smpsNoAttack, $03
00093B30 E10C                       	smpsAlterNote       $0C
00093B32 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093B3E 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093B46 E109                       	smpsAlterNote       $09
00093B48 9E03                       	dc.b	nF2, $03
00093B4A E10C                       	smpsAlterNote       $0C
00093B4C 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093B50 E1EA                       	smpsAlterNote       $EA
00093B52 A201                       	dc.b	nA2, $01
00093B54 E106                       	smpsAlterNote       $06
00093B56 E701                       	dc.b	smpsNoAttack, $01
00093B58 E1E2                       	smpsAlterNote       $E2
00093B5A E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093B5D E1F0                       	smpsAlterNote       $F0
00093B5F E701                       	dc.b	smpsNoAttack, $01
00093B61 E10C                       	smpsAlterNote       $0C
00093B63 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093B6F E116                       	smpsAlterNote       $16
00093B71 9C01                       	dc.b	nEb2, $01
00093B73 E105                       	smpsAlterNote       $05
00093B75 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093B78 E1F1                       	smpsAlterNote       $F1
00093B7A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093B7D E1FF                       	smpsAlterNote       $FF
00093B7F E701                       	dc.b	smpsNoAttack, $01
00093B81 E109                       	smpsAlterNote       $09
00093B83 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093B87 E10C                       	smpsAlterNote       $0C
00093B89 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00093B95 E106                       	smpsAlterNote       $06
00093B97 9903                       	dc.b	nC2, $03
00093B99 E107                       	smpsAlterNote       $07
00093B9B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093B9F E109                       	smpsAlterNote       $09
00093BA1 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00093BA7 E107                       	smpsAlterNote       $07
00093BA9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093BAD E108                       	smpsAlterNote       $08
00093BAF 9D03                       	dc.b	nE2, $03
00093BB1 E10B                       	smpsAlterNote       $0B
00093BB3 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00093BB9 E109                       	smpsAlterNote       $09
00093BBB 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00093BC1 E10C                       	smpsAlterNote       $0C
00093BC3 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00093BC9 E106                       	smpsAlterNote       $06
00093BCB 9903                       	dc.b	nC2, $03
00093BCD E11A                       	smpsAlterNote       $1A
00093BCF A301                       	dc.b	nBb2, $01
00093BD1 E1F9                       	smpsAlterNote       $F9
00093BD3 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093BD6 E1FF                       	smpsAlterNote       $FF
00093BD8 E701                       	dc.b	smpsNoAttack, $01
00093BDA E111                       	smpsAlterNote       $11
00093BDC E701                       	dc.b	smpsNoAttack, $01
00093BDE E106                       	smpsAlterNote       $06
00093BE0 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00093BE7 E109                       	smpsAlterNote       $09
00093BE9 A003                       	dc.b	nG2, $03
00093BEB E106                       	smpsAlterNote       $06
00093BED 9907                       	dc.b	nC2, $07
00093BEF E107                       	smpsAlterNote       $07
00093BF1 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00093BF9 E10B                       	smpsAlterNote       $0B
00093BFB A203                       	dc.b	nA2, $03
00093BFD E107                       	smpsAlterNote       $07
00093BFF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093C03 E1F2                       	smpsAlterNote       $F2
00093C05 A401                       	dc.b	nB2, $01
00093C07 E1F9                       	smpsAlterNote       $F9
00093C09 E701                       	dc.b	smpsNoAttack, $01
00093C0B E107                       	smpsAlterNote       $07
00093C0D E701                       	dc.b	smpsNoAttack, $01
00093C0F E1FB                       	smpsAlterNote       $FB
00093C11 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093C14 E106                       	smpsAlterNote       $06
00093C16 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093C1A E107                       	smpsAlterNote       $07
00093C1C 9B03                       	dc.b	nD2, $03
00093C1E E108                       	smpsAlterNote       $08
00093C20 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093C26 E109                       	smpsAlterNote       $09
00093C28 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093C2C E1F2                       	smpsAlterNote       $F2
00093C2E A401                       	dc.b	nB2, $01
00093C30 E1F9                       	smpsAlterNote       $F9
00093C32 E701                       	dc.b	smpsNoAttack, $01
00093C34 E107                       	smpsAlterNote       $07
00093C36 E701                       	dc.b	smpsNoAttack, $01
00093C38 E1FB                       	smpsAlterNote       $FB
00093C3A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093C3D E106                       	smpsAlterNote       $06
00093C3F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093C43 E108                       	smpsAlterNote       $08
00093C45 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00093C49 E10C                       	smpsAlterNote       $0C
00093C4B A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093C4F E107                       	smpsAlterNote       $07
00093C51 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093C57 E10B                       	smpsAlterNote       $0B
00093C59 A203                       	dc.b	nA2, $03
00093C5B E107                       	smpsAlterNote       $07
00093C5D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093C61 E1F2                       	smpsAlterNote       $F2
00093C63 A401                       	dc.b	nB2, $01
00093C65 E1FF                       	smpsAlterNote       $FF
00093C67 E701                       	dc.b	smpsNoAttack, $01
00093C69 E107                       	smpsAlterNote       $07
00093C6B E701                       	dc.b	smpsNoAttack, $01
00093C6D E1FB                       	smpsAlterNote       $FB
00093C6F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093C72 E106                       	smpsAlterNote       $06
00093C74 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093C78 E107                       	smpsAlterNote       $07
00093C7A 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093C7E E108                       	smpsAlterNote       $08
00093C80 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093C86 E109                       	smpsAlterNote       $09
00093C88 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093C8C E1F2                       	smpsAlterNote       $F2
00093C8E A401                       	dc.b	nB2, $01
00093C90 E1FF                       	smpsAlterNote       $FF
00093C92 E701                       	dc.b	smpsNoAttack, $01
00093C94 E111                       	smpsAlterNote       $11
00093C96 E701                       	dc.b	smpsNoAttack, $01
00093C98 E1FB                       	smpsAlterNote       $FB
00093C9A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093C9D E106                       	smpsAlterNote       $06
00093C9F E702                       	dc.b	smpsNoAttack, $02
00093CA1 E108                       	smpsAlterNote       $08
00093CA3 9C07                       	dc.b	nEb2, $07
00093CA5 E10C                       	smpsAlterNote       $0C
00093CA7 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093CAB E107                       	smpsAlterNote       $07
00093CAD 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093CB3 E10B                       	smpsAlterNote       $0B
00093CB5 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093CB9 E107                       	smpsAlterNote       $07
00093CBB 9B03                       	dc.b	nD2, $03
00093CBD E11A                       	smpsAlterNote       $1A
00093CBF A301                       	dc.b	nBb2, $01
00093CC1 E1F2                       	smpsAlterNote       $F2
00093CC3 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093CC6 E1FF                       	smpsAlterNote       $FF
00093CC8 E701                       	dc.b	smpsNoAttack, $01
00093CCA E111                       	smpsAlterNote       $11
00093CCC E701                       	dc.b	smpsNoAttack, $01
00093CCE E106                       	smpsAlterNote       $06
00093CD0 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093CD3 E107                       	smpsAlterNote       $07
00093CD5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093CD9 E108                       	smpsAlterNote       $08
00093CDB 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00093CE3 E109                       	smpsAlterNote       $09
00093CE5 A003                       	dc.b	nG2, $03
00093CE7 E11A                       	smpsAlterNote       $1A
00093CE9 A301                       	dc.b	nBb2, $01
00093CEB E1F2                       	smpsAlterNote       $F2
00093CED E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093CF0 E1FF                       	smpsAlterNote       $FF
00093CF2 E701                       	dc.b	smpsNoAttack, $01
00093CF4 E111                       	smpsAlterNote       $11
00093CF6 E701                       	dc.b	smpsNoAttack, $01
00093CF8 E106                       	smpsAlterNote       $06
00093CFA E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093CFD E108                       	smpsAlterNote       $08
00093CFF 9C07                       	dc.b	nEb2, $07
00093D01 E10C                       	smpsAlterNote       $0C
00093D03 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093D07 E107                       	smpsAlterNote       $07
00093D09 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00093D15 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00093D1F E108                       	smpsAlterNote       $08
00093D21 9C06                       	dc.b	nEb2, $06
00093D23 E10C                       	smpsAlterNote       $0C
00093D25 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093D29 E108                       	smpsAlterNote       $08
00093D2B 9C03                       	dc.b	nEb2, $03
00093D2D E109                       	smpsAlterNote       $09
00093D2F A003 8001                  	dc.b	nG2, $03, nRst, $01
00093D33 E10C                       	smpsAlterNote       $0C
00093D35 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00093D3D E107                       	smpsAlterNote       $07
00093D3F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093D43 F6F4 F8                    	smpsJump            music84_Jump04
00093D46                            
00093D46                            ; FM2 Data
00093D46                            music84_FM2:
00093D46 E0C0                       	smpsPan             panCenter, $00
00093D4A E10B                       	smpsAlterNote       $0B
00093D4C C603 8007                  	dc.b	nA5, $03, nRst, $07
00093D50 E109                       	smpsAlterNote       $09
00093D52 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00093D56 E108                       	smpsAlterNote       $08
00093D58 C103 8004                  	dc.b	nE5, $03, nRst, $04
00093D5E E080                       	smpsPan             panLeft, $00
00093D60 E10C                       	smpsAlterNote       $0C
00093D62 E6F9                       	smpsAlterVol        $F9
00093D64 C703                       	dc.b	nBb5, $03
00093D66 E10B                       	smpsAlterNote       $0B
00093D68 C603 8001                  	dc.b	nA5, $03, nRst, $01
00093D6C E109                       	smpsAlterNote       $09
00093D6E C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00093D74 E108                       	smpsAlterNote       $08
00093D76 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093D7A E106                       	smpsAlterNote       $06
00093D7C BD03                       	dc.b	nC5, $03
00093D7E E10B                       	smpsAlterNote       $0B
00093D80 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00093D86 E0C0                       	smpsPan             panCenter, $00
00093D88 E107                       	smpsAlterNote       $07
00093D8A E606                       	smpsAlterVol        $06
00093D8C BF03                       	dc.b	nD5, $03
00093D8E                            
00093D8E                            music84_Jump03:
00093D8E E108                       	smpsAlterNote       $08
00093D90 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093D94 E109                       	smpsAlterNote       $09
00093D96 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00093D9C E10B                       	smpsAlterNote       $0B
00093D9E C607                       	dc.b	nA5, $07
00093DA0 E107                       	smpsAlterNote       $07
00093DA2 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093DA6 E106                       	smpsAlterNote       $06
00093DA8 C90D                       	dc.b	nC6, $0D
00093DAA E100                       	smpsAlterNote       $00
00093DAC E701                       	dc.b	smpsNoAttack, $01
00093DAE E1FF                       	smpsAlterNote       $FF
00093DB0 E701                       	dc.b	smpsNoAttack, $01
00093DB2 E103                       	smpsAlterNote       $03
00093DB4 E701                       	dc.b	smpsNoAttack, $01
00093DB6 E109                       	smpsAlterNote       $09
00093DB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DBC E106                       	smpsAlterNote       $06
00093DBE E701                       	dc.b	smpsNoAttack, $01
00093DC0 E100                       	smpsAlterNote       $00
00093DC2 E701                       	dc.b	smpsNoAttack, $01
00093DC4 E10C                       	smpsAlterNote       $0C
00093DC6 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00093DCA E10B                       	smpsAlterNote       $0B
00093DCC C603                       	dc.b	nA5, $03
00093DCE E109                       	smpsAlterNote       $09
00093DD0 C403 8001                  	dc.b	nG5, $03, nRst, $01
00093DD4 E10B                       	smpsAlterNote       $0B
00093DD6 C60D                       	dc.b	nA5, $0D
00093DD8 E105                       	smpsAlterNote       $05
00093DDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DDE E10B                       	smpsAlterNote       $0B
00093DE0 E701                       	dc.b	smpsNoAttack, $01
00093DE2 E10E                       	smpsAlterNote       $0E
00093DE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DE8 E108                       	smpsAlterNote       $08
00093DEA E701                       	dc.b	smpsNoAttack, $01
00093DEC E104                       	smpsAlterNote       $04
00093DEE E701                       	dc.b	smpsNoAttack, $01
00093DF0 E105                       	smpsAlterNote       $05
00093DF2 E701                       	dc.b	smpsNoAttack, $01
00093DF4 E10B                       	smpsAlterNote       $0B
00093DF6 E701                       	dc.b	smpsNoAttack, $01
00093DF8 E10F                       	smpsAlterNote       $0F
00093DFA E701                       	dc.b	smpsNoAttack, $01
00093DFC E10B                       	smpsAlterNote       $0B
00093DFE E701                       	dc.b	smpsNoAttack, $01
00093E00 E108                       	smpsAlterNote       $08
00093E02 E701                       	dc.b	smpsNoAttack, $01
00093E04 E104                       	smpsAlterNote       $04
00093E06 E701                       	dc.b	smpsNoAttack, $01
00093E08 E108                       	smpsAlterNote       $08
00093E0A E701                       	dc.b	smpsNoAttack, $01
00093E0C E10E                       	smpsAlterNote       $0E
00093E0E E701                       	dc.b	smpsNoAttack, $01
00093E10 E10F                       	smpsAlterNote       $0F
00093E12 E701                       	dc.b	smpsNoAttack, $01
00093E14 E10B                       	smpsAlterNote       $0B
00093E16 E701                       	dc.b	smpsNoAttack, $01
00093E18 E105                       	smpsAlterNote       $05
00093E1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E1E E108                       	smpsAlterNote       $08
00093E20 E701                       	dc.b	smpsNoAttack, $01
00093E22 E10E                       	smpsAlterNote       $0E
00093E24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E28 E108                       	smpsAlterNote       $08
00093E2A E701                       	dc.b	smpsNoAttack, $01
00093E2C E105                       	smpsAlterNote       $05
00093E2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E32 E10B                       	smpsAlterNote       $0B
00093E34 E701                       	dc.b	smpsNoAttack, $01
00093E36 E10F                       	smpsAlterNote       $0F
00093E38 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00093E3C E107                       	smpsAlterNote       $07
00093E3E BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093E42 E108                       	smpsAlterNote       $08
00093E44 C103                       	dc.b	nE5, $03
00093E46 E109                       	smpsAlterNote       $09
00093E48 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00093E50 E10B                       	smpsAlterNote       $0B
00093E52 C606 8001                  	dc.b	nA5, $06, nRst, $01
00093E56 E107                       	smpsAlterNote       $07
00093E58 BF03                       	dc.b	nD5, $03
00093E5A E106                       	smpsAlterNote       $06
00093E5C C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00093E60 E107                       	smpsAlterNote       $07
00093E62 CB03                       	dc.b	nD6, $03
00093E64 E10C                       	smpsAlterNote       $0C
00093E66 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00093E6A E10B                       	smpsAlterNote       $0B
00093E6C C604 8001                  	dc.b	nA5, $04, nRst, $01
00093E70 E109                       	smpsAlterNote       $09
00093E72 C404                       	dc.b	nG5, $04
00093E74 E10B                       	smpsAlterNote       $0B
00093E76 C60D                       	dc.b	nA5, $0D
00093E78 E108                       	smpsAlterNote       $08
00093E7A E701                       	dc.b	smpsNoAttack, $01
00093E7C E104                       	smpsAlterNote       $04
00093E7E E701                       	dc.b	smpsNoAttack, $01
00093E80 E108                       	smpsAlterNote       $08
00093E82 E701                       	dc.b	smpsNoAttack, $01
00093E84 E10B                       	smpsAlterNote       $0B
00093E86 E701                       	dc.b	smpsNoAttack, $01
00093E88 E10F                       	smpsAlterNote       $0F
00093E8A E701                       	dc.b	smpsNoAttack, $01
00093E8C E10B                       	smpsAlterNote       $0B
00093E8E E701                       	dc.b	smpsNoAttack, $01
00093E90 E105                       	smpsAlterNote       $05
00093E92 E701                       	dc.b	smpsNoAttack, $01
00093E94 E104                       	smpsAlterNote       $04
00093E96 E701                       	dc.b	smpsNoAttack, $01
00093E98 E108                       	smpsAlterNote       $08
00093E9A E701                       	dc.b	smpsNoAttack, $01
00093E9C E10E                       	smpsAlterNote       $0E
00093E9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EA2 E10B                       	smpsAlterNote       $0B
00093EA4 E701                       	dc.b	smpsNoAttack, $01
00093EA6 E105                       	smpsAlterNote       $05
00093EA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EAC E10B                       	smpsAlterNote       $0B
00093EAE E701                       	dc.b	smpsNoAttack, $01
00093EB0 E10E                       	smpsAlterNote       $0E
00093EB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EB6 E108                       	smpsAlterNote       $08
00093EB8 E701                       	dc.b	smpsNoAttack, $01
00093EBA E104                       	smpsAlterNote       $04
00093EBC E701                       	dc.b	smpsNoAttack, $01
00093EBE E105                       	smpsAlterNote       $05
00093EC0 E701                       	dc.b	smpsNoAttack, $01
00093EC2 E10B                       	smpsAlterNote       $0B
00093EC4 E701                       	dc.b	smpsNoAttack, $01
00093EC6 E10F                       	smpsAlterNote       $0F
00093EC8 E701                       	dc.b	smpsNoAttack, $01
00093ECA E10B                       	smpsAlterNote       $0B
00093ECC E701                       	dc.b	smpsNoAttack, $01
00093ECE E108                       	smpsAlterNote       $08
00093ED0 E701                       	dc.b	smpsNoAttack, $01
00093ED2 E105                       	smpsAlterNote       $05
00093ED4 8001                       	dc.b	nRst, $01
00093ED6 E109                       	smpsAlterNote       $09
00093ED8 C401                       	dc.b	nG5, $01
00093EDA E10B                       	smpsAlterNote       $0B
00093EDC E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00093EE5 E109                       	smpsAlterNote       $09
00093EE7 C404 8001                  	dc.b	nG5, $04, nRst, $01
00093EEB E10B                       	smpsAlterNote       $0B
00093EED C604 8001                  	dc.b	nA5, $04, nRst, $01
00093EF1 E107                       	smpsAlterNote       $07
00093EF3 BF0D                       	dc.b	nD5, $0D
00093EF5 E101                       	smpsAlterNote       $01
00093EF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EFB E104                       	smpsAlterNote       $04
00093EFD E701                       	dc.b	smpsNoAttack, $01
00093EFF E10A                       	smpsAlterNote       $0A
00093F01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F05 E104                       	smpsAlterNote       $04
00093F07 E701                       	dc.b	smpsNoAttack, $01
00093F09 E101                       	smpsAlterNote       $01
00093F0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F0F E107                       	smpsAlterNote       $07
00093F11 E701                       	dc.b	smpsNoAttack, $01
00093F13 E10B                       	smpsAlterNote       $0B
00093F15 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093F19 E108                       	smpsAlterNote       $08
00093F1B C101                       	dc.b	nE5, $01
00093F1D E109                       	smpsAlterNote       $09
00093F1F E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00093F24 E10B                       	smpsAlterNote       $0B
00093F26 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00093F2E E108                       	smpsAlterNote       $08
00093F30 CD06                       	dc.b	nE6, $06
00093F32 E109                       	smpsAlterNote       $09
00093F34 CE07                       	dc.b	nF6, $07
00093F36 E108                       	smpsAlterNote       $08
00093F38 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00093F3C E106                       	smpsAlterNote       $06
00093F3E C903                       	dc.b	nC6, $03
00093F40 E109                       	smpsAlterNote       $09
00093F42 C403 8001                  	dc.b	nG5, $03, nRst, $01
00093F46 E10C                       	smpsAlterNote       $0C
00093F48 C70D                       	dc.b	nBb5, $0D
00093F4A E106                       	smpsAlterNote       $06
00093F4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F50 E109                       	smpsAlterNote       $09
00093F52 E701                       	dc.b	smpsNoAttack, $01
00093F54 E10F                       	smpsAlterNote       $0F
00093F56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F5A E109                       	smpsAlterNote       $09
00093F5C E701                       	dc.b	smpsNoAttack, $01
00093F5E E106                       	smpsAlterNote       $06
00093F60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F64 E10C                       	smpsAlterNote       $0C
00093F66 E701                       	dc.b	smpsNoAttack, $01
00093F68 E110                       	smpsAlterNote       $10
00093F6A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093F6E E10B                       	smpsAlterNote       $0B
00093F70 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00093F74 E105                       	smpsAlterNote       $05
00093F76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F7A E10B                       	smpsAlterNote       $0B
00093F7C E701                       	dc.b	smpsNoAttack, $01
00093F7E E10E                       	smpsAlterNote       $0E
00093F80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F84 E108                       	smpsAlterNote       $08
00093F86 E701                       	dc.b	smpsNoAttack, $01
00093F88 E104                       	smpsAlterNote       $04
00093F8A E701                       	dc.b	smpsNoAttack, $01
00093F8C E105                       	smpsAlterNote       $05
00093F8E E701                       	dc.b	smpsNoAttack, $01
00093F90 E10B                       	smpsAlterNote       $0B
00093F92 E701                       	dc.b	smpsNoAttack, $01
00093F94 E10F                       	smpsAlterNote       $0F
00093F96 E701                       	dc.b	smpsNoAttack, $01
00093F98 E10B                       	smpsAlterNote       $0B
00093F9A E701                       	dc.b	smpsNoAttack, $01
00093F9C E108                       	smpsAlterNote       $08
00093F9E E701                       	dc.b	smpsNoAttack, $01
00093FA0 E104                       	smpsAlterNote       $04
00093FA2 E701                       	dc.b	smpsNoAttack, $01
00093FA4 E108                       	smpsAlterNote       $08
00093FA6 E701                       	dc.b	smpsNoAttack, $01
00093FA8 E10E                       	smpsAlterNote       $0E
00093FAA E701                       	dc.b	smpsNoAttack, $01
00093FAC E10F                       	smpsAlterNote       $0F
00093FAE E701                       	dc.b	smpsNoAttack, $01
00093FB0 E10B                       	smpsAlterNote       $0B
00093FB2 E701                       	dc.b	smpsNoAttack, $01
00093FB4 E105                       	smpsAlterNote       $05
00093FB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FBA E108                       	smpsAlterNote       $08
00093FBC E701                       	dc.b	smpsNoAttack, $01
00093FBE E10E                       	smpsAlterNote       $0E
00093FC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FC4 E108                       	smpsAlterNote       $08
00093FC6 E701                       	dc.b	smpsNoAttack, $01
00093FC8 E105                       	smpsAlterNote       $05
00093FCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FCE E10B                       	smpsAlterNote       $0B
00093FD0 E701                       	dc.b	smpsNoAttack, $01
00093FD2 E10F                       	smpsAlterNote       $0F
00093FD4 E701                       	dc.b	smpsNoAttack, $01
00093FD6 E10E                       	smpsAlterNote       $0E
00093FD8 E701                       	dc.b	smpsNoAttack, $01
00093FDA E108                       	smpsAlterNote       $08
00093FDC E701                       	dc.b	smpsNoAttack, $01
00093FDE E104                       	smpsAlterNote       $04
00093FE0 E701                       	dc.b	smpsNoAttack, $01
00093FE2 E108                       	smpsAlterNote       $08
00093FE4 E701                       	dc.b	smpsNoAttack, $01
00093FE6 E10E                       	smpsAlterNote       $0E
00093FE8 E701                       	dc.b	smpsNoAttack, $01
00093FEA E10F                       	smpsAlterNote       $0F
00093FEC E701                       	dc.b	smpsNoAttack, $01
00093FEE E10B                       	smpsAlterNote       $0B
00093FF0 E701                       	dc.b	smpsNoAttack, $01
00093FF2 E105                       	smpsAlterNote       $05
00093FF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FF8 E108                       	smpsAlterNote       $08
00093FFA E701                       	dc.b	smpsNoAttack, $01
00093FFC E10E                       	smpsAlterNote       $0E
00093FFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094002 E108                       	smpsAlterNote       $08
00094004 E701                       	dc.b	smpsNoAttack, $01
00094006 E105                       	smpsAlterNote       $05
00094008 E701                       	dc.b	smpsNoAttack, $01
0009400A E10B                       	smpsAlterNote       $0B
0009400C C60D                       	dc.b	nA5, $0D
0009400E E108                       	smpsAlterNote       $08
00094010 E701                       	dc.b	smpsNoAttack, $01
00094012 E104                       	smpsAlterNote       $04
00094014 E701                       	dc.b	smpsNoAttack, $01
00094016 E105                       	smpsAlterNote       $05
00094018 E701                       	dc.b	smpsNoAttack, $01
0009401A E10B                       	smpsAlterNote       $0B
0009401C E701                       	dc.b	smpsNoAttack, $01
0009401E E10F                       	smpsAlterNote       $0F
00094020 E701                       	dc.b	smpsNoAttack, $01
00094022 E10B                       	smpsAlterNote       $0B
00094024 E701                       	dc.b	smpsNoAttack, $01
00094026 E108                       	smpsAlterNote       $08
00094028 E701                       	dc.b	smpsNoAttack, $01
0009402A E104                       	smpsAlterNote       $04
0009402C E701                       	dc.b	smpsNoAttack, $01
0009402E E108                       	smpsAlterNote       $08
00094030 E701                       	dc.b	smpsNoAttack, $01
00094032 E10E                       	smpsAlterNote       $0E
00094034 E701                       	dc.b	smpsNoAttack, $01
00094036 E10F                       	smpsAlterNote       $0F
00094038 E701                       	dc.b	smpsNoAttack, $01
0009403C E109                       	smpsAlterNote       $09
0009403E E6FF                       	smpsAlterVol        $FF
00094040 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
0009404A E108                       	smpsAlterNote       $08
0009404C C103 800E                  	dc.b	nE5, $03, nRst, $0E
00094052 E107                       	smpsAlterNote       $07
00094054 E601                       	smpsAlterVol        $01
00094056 BF03                       	dc.b	nD5, $03
00094058 E108                       	smpsAlterNote       $08
0009405A C103 8001                  	dc.b	nE5, $03, nRst, $01
0009405E E109                       	smpsAlterNote       $09
00094060 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00094066 E10B                       	smpsAlterNote       $0B
00094068 C606 8001                  	dc.b	nA5, $06, nRst, $01
0009406C E107                       	smpsAlterNote       $07
0009406E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094072 E106                       	smpsAlterNote       $06
00094074 C90D                       	dc.b	nC6, $0D
00094076 E103                       	smpsAlterNote       $03
00094078 E701                       	dc.b	smpsNoAttack, $01
0009407A E1FF                       	smpsAlterNote       $FF
0009407C E701                       	dc.b	smpsNoAttack, $01
0009407E E103                       	smpsAlterNote       $03
00094080 E701                       	dc.b	smpsNoAttack, $01
00094082 E109                       	smpsAlterNote       $09
00094084 E701                       	dc.b	smpsNoAttack, $01
00094086 E10A                       	smpsAlterNote       $0A
00094088 E701                       	dc.b	smpsNoAttack, $01
0009408A E106                       	smpsAlterNote       $06
0009408C E701                       	dc.b	smpsNoAttack, $01
0009408E E100                       	smpsAlterNote       $00
00094090 E701                       	dc.b	smpsNoAttack, $01
00094092 E10C                       	smpsAlterNote       $0C
00094094 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094098 E10B                       	smpsAlterNote       $0B
0009409A C603                       	dc.b	nA5, $03
0009409C E109                       	smpsAlterNote       $09
0009409E C403 8001                  	dc.b	nG5, $03, nRst, $01
000940A2 E10B                       	smpsAlterNote       $0B
000940A4 C60D                       	dc.b	nA5, $0D
000940A6 E105                       	smpsAlterNote       $05
000940A8 E701                       	dc.b	smpsNoAttack, $01
000940AA E104                       	smpsAlterNote       $04
000940AC E701                       	dc.b	smpsNoAttack, $01
000940AE E108                       	smpsAlterNote       $08
000940B0 E701                       	dc.b	smpsNoAttack, $01
000940B2 E10E                       	smpsAlterNote       $0E
000940B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940B8 E10B                       	smpsAlterNote       $0B
000940BA E701                       	dc.b	smpsNoAttack, $01
000940BC E105                       	smpsAlterNote       $05
000940BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940C2 E10B                       	smpsAlterNote       $0B
000940C4 E701                       	dc.b	smpsNoAttack, $01
000940C6 E10E                       	smpsAlterNote       $0E
000940C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940CC E108                       	smpsAlterNote       $08
000940CE E701                       	dc.b	smpsNoAttack, $01
000940D0 E104                       	smpsAlterNote       $04
000940D2 E701                       	dc.b	smpsNoAttack, $01
000940D4 E105                       	smpsAlterNote       $05
000940D6 E701                       	dc.b	smpsNoAttack, $01
000940D8 E10B                       	smpsAlterNote       $0B
000940DA E701                       	dc.b	smpsNoAttack, $01
000940DC E10F                       	smpsAlterNote       $0F
000940DE E701                       	dc.b	smpsNoAttack, $01
000940E0 E10B                       	smpsAlterNote       $0B
000940E2 E701                       	dc.b	smpsNoAttack, $01
000940E4 E108                       	smpsAlterNote       $08
000940E6 E701                       	dc.b	smpsNoAttack, $01
000940E8 E104                       	smpsAlterNote       $04
000940EA E701                       	dc.b	smpsNoAttack, $01
000940EC E108                       	smpsAlterNote       $08
000940EE E701                       	dc.b	smpsNoAttack, $01
000940F0 E10E                       	smpsAlterNote       $0E
000940F2 E701                       	dc.b	smpsNoAttack, $01
000940F4 E10F                       	smpsAlterNote       $0F
000940F6 E701                       	dc.b	smpsNoAttack, $01
000940F8 E10B                       	smpsAlterNote       $0B
000940FA E701                       	dc.b	smpsNoAttack, $01
000940FC E105                       	smpsAlterNote       $05
000940FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094102 E108                       	smpsAlterNote       $08
00094104 E701                       	dc.b	smpsNoAttack, $01
00094106 E10E                       	smpsAlterNote       $0E
00094108 E701                       	dc.b	smpsNoAttack, $01
0009410A E10F                       	smpsAlterNote       $0F
0009410C 800F                       	dc.b	nRst, $0F
0009410E E107                       	smpsAlterNote       $07
00094110 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094114 E108                       	smpsAlterNote       $08
00094116 C103                       	dc.b	nE5, $03
00094118 E109                       	smpsAlterNote       $09
0009411A C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00094120 E10B                       	smpsAlterNote       $0B
00094122 C606 8001                  	dc.b	nA5, $06, nRst, $01
00094126 E107                       	smpsAlterNote       $07
00094128 BF03                       	dc.b	nD5, $03
0009412A E106                       	smpsAlterNote       $06
0009412C C90E                       	dc.b	nC6, $0E
0009412E E107                       	smpsAlterNote       $07
00094130 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00094134 E10C                       	smpsAlterNote       $0C
00094136 C704                       	dc.b	nBb5, $04
00094138 E10B                       	smpsAlterNote       $0B
0009413A C604 8001                  	dc.b	nA5, $04, nRst, $01
0009413E E109                       	smpsAlterNote       $09
00094140 C404                       	dc.b	nG5, $04
00094142 E10B                       	smpsAlterNote       $0B
00094144 C60D                       	dc.b	nA5, $0D
00094146 E108                       	smpsAlterNote       $08
00094148 E701                       	dc.b	smpsNoAttack, $01
0009414A E105                       	smpsAlterNote       $05
0009414C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094150 E10B                       	smpsAlterNote       $0B
00094152 E701                       	dc.b	smpsNoAttack, $01
00094154 E10F                       	smpsAlterNote       $0F
00094156 E701                       	dc.b	smpsNoAttack, $01
00094158 E10E                       	smpsAlterNote       $0E
0009415A E701                       	dc.b	smpsNoAttack, $01
0009415C E108                       	smpsAlterNote       $08
0009415E E701                       	dc.b	smpsNoAttack, $01
00094160 E104                       	smpsAlterNote       $04
00094162 E701                       	dc.b	smpsNoAttack, $01
00094164 E108                       	smpsAlterNote       $08
00094166 E701                       	dc.b	smpsNoAttack, $01
00094168 E10B                       	smpsAlterNote       $0B
0009416A E701                       	dc.b	smpsNoAttack, $01
0009416C E10F                       	smpsAlterNote       $0F
0009416E E701                       	dc.b	smpsNoAttack, $01
00094170 E10B                       	smpsAlterNote       $0B
00094172 E701                       	dc.b	smpsNoAttack, $01
00094174 E105                       	smpsAlterNote       $05
00094176 E701                       	dc.b	smpsNoAttack, $01
00094178 E104                       	smpsAlterNote       $04
0009417A E701                       	dc.b	smpsNoAttack, $01
0009417C E108                       	smpsAlterNote       $08
0009417E E701                       	dc.b	smpsNoAttack, $01
00094180 E10E                       	smpsAlterNote       $0E
00094182 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094186 E10B                       	smpsAlterNote       $0B
00094188 E701                       	dc.b	smpsNoAttack, $01
0009418A E105                       	smpsAlterNote       $05
0009418C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094190 E10B                       	smpsAlterNote       $0B
00094192 E701                       	dc.b	smpsNoAttack, $01
00094194 E10E                       	smpsAlterNote       $0E
00094196 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009419A E108                       	smpsAlterNote       $08
0009419C E701                       	dc.b	smpsNoAttack, $01
0009419E E105                       	smpsAlterNote       $05
000941A0 8001                       	dc.b	nRst, $01
000941A2 E109                       	smpsAlterNote       $09
000941A4 C402                       	dc.b	nG5, $02
000941A6 E10B                       	smpsAlterNote       $0B
000941A8 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000941B1 E109                       	smpsAlterNote       $09
000941B3 C404                       	dc.b	nG5, $04
000941B5 E10B                       	smpsAlterNote       $0B
000941B7 C604 8001                  	dc.b	nA5, $04, nRst, $01
000941BB E107                       	smpsAlterNote       $07
000941BD BF0D                       	dc.b	nD5, $0D
000941BF E101                       	smpsAlterNote       $01
000941C1 E701                       	dc.b	smpsNoAttack, $01
000941C3 E100                       	smpsAlterNote       $00
000941C5 E701                       	dc.b	smpsNoAttack, $01
000941C7 E104                       	smpsAlterNote       $04
000941C9 E701                       	dc.b	smpsNoAttack, $01
000941CB E10A                       	smpsAlterNote       $0A
000941CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941D1 E107                       	smpsAlterNote       $07
000941D3 E701                       	dc.b	smpsNoAttack, $01
000941D5 E101                       	smpsAlterNote       $01
000941D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941DB E107                       	smpsAlterNote       $07
000941DD E701                       	dc.b	smpsNoAttack, $01
000941DF E10A                       	smpsAlterNote       $0A
000941E1 E701                       	dc.b	smpsNoAttack, $01
000941E3 E10B                       	smpsAlterNote       $0B
000941E5 8001                       	dc.b	nRst, $01
000941E7 E108                       	smpsAlterNote       $08
000941E9 C101                       	dc.b	nE5, $01
000941EB E109                       	smpsAlterNote       $09
000941ED E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000941F2 E10B                       	smpsAlterNote       $0B
000941F4 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000941FC E108                       	smpsAlterNote       $08
000941FE CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094202 E109                       	smpsAlterNote       $09
00094204 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00094208 E108                       	smpsAlterNote       $08
0009420A CD02 8001                  	dc.b	nE6, $02, nRst, $01
0009420E E106                       	smpsAlterNote       $06
00094210 C903                       	dc.b	nC6, $03
00094212 E109                       	smpsAlterNote       $09
00094214 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094218 E10C                       	smpsAlterNote       $0C
0009421A C70D                       	dc.b	nBb5, $0D
0009421C E109                       	smpsAlterNote       $09
0009421E E701                       	dc.b	smpsNoAttack, $01
00094220 E105                       	smpsAlterNote       $05
00094222 E701                       	dc.b	smpsNoAttack, $01
00094224 E109                       	smpsAlterNote       $09
00094226 E701                       	dc.b	smpsNoAttack, $01
00094228 E10F                       	smpsAlterNote       $0F
0009422A E701                       	dc.b	smpsNoAttack, $01
0009422C E110                       	smpsAlterNote       $10
0009422E E701                       	dc.b	smpsNoAttack, $01
00094230 E10C                       	smpsAlterNote       $0C
00094232 E701                       	dc.b	smpsNoAttack, $01
00094234 E106                       	smpsAlterNote       $06
00094236 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009423A E109                       	smpsAlterNote       $09
0009423C E701                       	dc.b	smpsNoAttack, $01
0009423E E10F                       	smpsAlterNote       $0F
00094240 E701                       	dc.b	smpsNoAttack, $01
00094242 E110                       	smpsAlterNote       $10
00094244 8001                       	dc.b	nRst, $01
00094246 E10B                       	smpsAlterNote       $0B
00094248 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0009424E E105                       	smpsAlterNote       $05
00094250 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094254 E108                       	smpsAlterNote       $08
00094256 E701                       	dc.b	smpsNoAttack, $01
00094258 E10E                       	smpsAlterNote       $0E
0009425A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009425E E108                       	smpsAlterNote       $08
00094260 E701                       	dc.b	smpsNoAttack, $01
00094262 E105                       	smpsAlterNote       $05
00094264 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094268 E10B                       	smpsAlterNote       $0B
0009426A E701                       	dc.b	smpsNoAttack, $01
0009426C E10F                       	smpsAlterNote       $0F
0009426E E701                       	dc.b	smpsNoAttack, $01
00094270 E10E                       	smpsAlterNote       $0E
00094272 E701                       	dc.b	smpsNoAttack, $01
00094274 E108                       	smpsAlterNote       $08
00094276 E701                       	dc.b	smpsNoAttack, $01
00094278 E104                       	smpsAlterNote       $04
0009427A E701                       	dc.b	smpsNoAttack, $01
0009427C E108                       	smpsAlterNote       $08
0009427E E701                       	dc.b	smpsNoAttack, $01
00094280 E10B                       	smpsAlterNote       $0B
00094282 E701                       	dc.b	smpsNoAttack, $01
00094284 E10F                       	smpsAlterNote       $0F
00094286 E701                       	dc.b	smpsNoAttack, $01
00094288 E10B                       	smpsAlterNote       $0B
0009428A E701                       	dc.b	smpsNoAttack, $01
0009428C E105                       	smpsAlterNote       $05
0009428E E701                       	dc.b	smpsNoAttack, $01
00094290 E104                       	smpsAlterNote       $04
00094292 E701                       	dc.b	smpsNoAttack, $01
00094294 E108                       	smpsAlterNote       $08
00094296 E701                       	dc.b	smpsNoAttack, $01
00094298 E10E                       	smpsAlterNote       $0E
0009429A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009429E E10B                       	smpsAlterNote       $0B
000942A0 E701                       	dc.b	smpsNoAttack, $01
000942A2 E105                       	smpsAlterNote       $05
000942A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942A8 E10B                       	smpsAlterNote       $0B
000942AA E701                       	dc.b	smpsNoAttack, $01
000942AC E10E                       	smpsAlterNote       $0E
000942AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942B2 E108                       	smpsAlterNote       $08
000942B4 E701                       	dc.b	smpsNoAttack, $01
000942B6 E104                       	smpsAlterNote       $04
000942B8 E701                       	dc.b	smpsNoAttack, $01
000942BA E105                       	smpsAlterNote       $05
000942BC E701                       	dc.b	smpsNoAttack, $01
000942BE E10B                       	smpsAlterNote       $0B
000942C0 E701                       	dc.b	smpsNoAttack, $01
000942C2 E10F                       	smpsAlterNote       $0F
000942C4 E701                       	dc.b	smpsNoAttack, $01
000942C6 E10B                       	smpsAlterNote       $0B
000942C8 E701                       	dc.b	smpsNoAttack, $01
000942CA E108                       	smpsAlterNote       $08
000942CC E701                       	dc.b	smpsNoAttack, $01
000942CE E104                       	smpsAlterNote       $04
000942D0 E701                       	dc.b	smpsNoAttack, $01
000942D2 E108                       	smpsAlterNote       $08
000942D4 E701                       	dc.b	smpsNoAttack, $01
000942D6 E10E                       	smpsAlterNote       $0E
000942D8 E701                       	dc.b	smpsNoAttack, $01
000942DA E10F                       	smpsAlterNote       $0F
000942DC E701                       	dc.b	smpsNoAttack, $01
000942DE E10B                       	smpsAlterNote       $0B
000942E0 E701                       	dc.b	smpsNoAttack, $01
000942E2 E105                       	smpsAlterNote       $05
000942E4 E701                       	dc.b	smpsNoAttack, $01
000942E6 E10B                       	smpsAlterNote       $0B
000942E8 C60E                       	dc.b	nA5, $0E
000942EA E105                       	smpsAlterNote       $05
000942EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942F0 E10B                       	smpsAlterNote       $0B
000942F2 E701                       	dc.b	smpsNoAttack, $01
000942F4 E10E                       	smpsAlterNote       $0E
000942F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942FA E108                       	smpsAlterNote       $08
000942FC E701                       	dc.b	smpsNoAttack, $01
000942FE E104                       	smpsAlterNote       $04
00094300 E701                       	dc.b	smpsNoAttack, $01
00094302 E105                       	smpsAlterNote       $05
00094304 E701                       	dc.b	smpsNoAttack, $01
00094306 E10B                       	smpsAlterNote       $0B
00094308 E701                       	dc.b	smpsNoAttack, $01
0009430A E10F                       	smpsAlterNote       $0F
0009430C E701                       	dc.b	smpsNoAttack, $01
0009430E E10B                       	smpsAlterNote       $0B
00094310 E701                       	dc.b	smpsNoAttack, $01
00094312 E108                       	smpsAlterNote       $08
00094314 E701                       	dc.b	smpsNoAttack, $01
00094316 E104                       	smpsAlterNote       $04
00094318 E701                       	dc.b	smpsNoAttack, $01
0009431A E108                       	smpsAlterNote       $08
0009431C E701                       	dc.b	smpsNoAttack, $01
0009431E E10E                       	smpsAlterNote       $0E
00094320 E701                       	dc.b	smpsNoAttack, $01
00094322 E10F                       	smpsAlterNote       $0F
00094324 E701                       	dc.b	smpsNoAttack, $01
00094326 E10B                       	smpsAlterNote       $0B
00094328 E701                       	dc.b	smpsNoAttack, $01
0009432A E105                       	smpsAlterNote       $05
0009432C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094330 E108                       	smpsAlterNote       $08
00094332 E701                       	dc.b	smpsNoAttack, $01
00094334 E10E                       	smpsAlterNote       $0E
00094336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009433A E108                       	smpsAlterNote       $08
0009433C E701                       	dc.b	smpsNoAttack, $01
0009433E E105                       	smpsAlterNote       $05
00094340 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094344 E10B                       	smpsAlterNote       $0B
00094346 E701                       	dc.b	smpsNoAttack, $01
00094348 E10F                       	smpsAlterNote       $0F
0009434A E701                       	dc.b	smpsNoAttack, $01
0009434C E10E                       	smpsAlterNote       $0E
0009434E E701                       	dc.b	smpsNoAttack, $01
00094350 E108                       	smpsAlterNote       $08
00094352 E701                       	dc.b	smpsNoAttack, $01
00094354 E104                       	smpsAlterNote       $04
00094356 E701                       	dc.b	smpsNoAttack, $01
00094358 E108                       	smpsAlterNote       $08
0009435A E701                       	dc.b	smpsNoAttack, $01
0009435C E10E                       	smpsAlterNote       $0E
0009435E E701                       	dc.b	smpsNoAttack, $01
00094360 E10F                       	smpsAlterNote       $0F
00094362 E701                       	dc.b	smpsNoAttack, $01
00094364 E10B                       	smpsAlterNote       $0B
00094366 E701                       	dc.b	smpsNoAttack, $01
00094368 E105                       	smpsAlterNote       $05
0009436A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009436E E108                       	smpsAlterNote       $08
00094370 E701                       	dc.b	smpsNoAttack, $01
00094372 E10E                       	smpsAlterNote       $0E
00094374 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094378 E108                       	smpsAlterNote       $08
0009437A E701                       	dc.b	smpsNoAttack, $01
0009437C E105                       	smpsAlterNote       $05
0009437E E701                       	dc.b	smpsNoAttack, $01
00094382 E10B                       	smpsAlterNote       $0B
00094384 E6FD                       	smpsAlterVol        $FD
00094386 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009438A E109                       	smpsAlterNote       $09
0009438C C404                       	dc.b	nG5, $04
0009438E E10B                       	smpsAlterNote       $0B
00094390 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094394 E107                       	smpsAlterNote       $07
00094396 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0009439C E10B                       	smpsAlterNote       $0B
0009439E C604                       	dc.b	nA5, $04
000943A0 E109                       	smpsAlterNote       $09
000943A2 C404 8001                  	dc.b	nG5, $04, nRst, $01
000943A6 E10B                       	smpsAlterNote       $0B
000943A8 C604                       	dc.b	nA5, $04
000943AA E108                       	smpsAlterNote       $08
000943AC C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000943B4 E106                       	smpsAlterNote       $06
000943B6 C904 8001                  	dc.b	nC6, $04, nRst, $01
000943BA E10C                       	smpsAlterNote       $0C
000943BC C704                       	dc.b	nBb5, $04
000943BE E10B                       	smpsAlterNote       $0B
000943C0 C604 8001                  	dc.b	nA5, $04, nRst, $01
000943C4 E109                       	smpsAlterNote       $09
000943C6 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000943D0 E10B                       	smpsAlterNote       $0B
000943D2 C60D                       	dc.b	nA5, $0D
000943D4 E108                       	smpsAlterNote       $08
000943D6 E701                       	dc.b	smpsNoAttack, $01
000943D8 E104                       	smpsAlterNote       $04
000943DA E701                       	dc.b	smpsNoAttack, $01
000943DC E108                       	smpsAlterNote       $08
000943DE E701                       	dc.b	smpsNoAttack, $01
000943E0 E10E                       	smpsAlterNote       $0E
000943E2 E701                       	dc.b	smpsNoAttack, $01
000943E4 E10F                       	smpsAlterNote       $0F
000943E6 E701                       	dc.b	smpsNoAttack, $01
000943E8 E10B                       	smpsAlterNote       $0B
000943EA E701                       	dc.b	smpsNoAttack, $01
000943EC E105                       	smpsAlterNote       $05
000943EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943F2 E108                       	smpsAlterNote       $08
000943F4 E701                       	dc.b	smpsNoAttack, $01
000943F6 E10E                       	smpsAlterNote       $0E
000943F8 E701                       	dc.b	smpsNoAttack, $01
000943FA E10F                       	smpsAlterNote       $0F
000943FC 8001                       	dc.b	nRst, $01
000943FE E109                       	smpsAlterNote       $09
00094400 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00094406 E108                       	smpsAlterNote       $08
00094408 C10D                       	dc.b	nE5, $0D
0009440A E102                       	smpsAlterNote       $02
0009440C E701                       	dc.b	smpsNoAttack, $01
0009440E E101                       	smpsAlterNote       $01
00094410 E701                       	dc.b	smpsNoAttack, $01
00094412 E105                       	smpsAlterNote       $05
00094414 E701                       	dc.b	smpsNoAttack, $01
00094416 E10B                       	smpsAlterNote       $0B
00094418 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009441C E108                       	smpsAlterNote       $08
0009441E E701                       	dc.b	smpsNoAttack, $01
00094420 E102                       	smpsAlterNote       $02
00094422 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094426 E108                       	smpsAlterNote       $08
00094428 E701                       	dc.b	smpsNoAttack, $01
0009442A E10B                       	smpsAlterNote       $0B
0009442C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094430 E105                       	smpsAlterNote       $05
00094432 E701                       	dc.b	smpsNoAttack, $01
00094434 E101                       	smpsAlterNote       $01
00094436 E701                       	dc.b	smpsNoAttack, $01
00094438 E102                       	smpsAlterNote       $02
0009443A E701                       	dc.b	smpsNoAttack, $01
0009443C E108                       	smpsAlterNote       $08
0009443E E701                       	dc.b	smpsNoAttack, $01
00094440 E10C                       	smpsAlterNote       $0C
00094442 E701                       	dc.b	smpsNoAttack, $01
00094444 E108                       	smpsAlterNote       $08
00094446 E701                       	dc.b	smpsNoAttack, $01
00094448 E105                       	smpsAlterNote       $05
0009444A E701                       	dc.b	smpsNoAttack, $01
0009444C E101                       	smpsAlterNote       $01
0009444E E701                       	dc.b	smpsNoAttack, $01
00094450 E105                       	smpsAlterNote       $05
00094452 E701                       	dc.b	smpsNoAttack, $01
00094454 E10B                       	smpsAlterNote       $0B
00094456 E701                       	dc.b	smpsNoAttack, $01
00094458 E10C                       	smpsAlterNote       $0C
0009445A E701                       	dc.b	smpsNoAttack, $01
0009445C E108                       	smpsAlterNote       $08
0009445E E701                       	dc.b	smpsNoAttack, $01
00094460 E102                       	smpsAlterNote       $02
00094462 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094466 E105                       	smpsAlterNote       $05
00094468 E701                       	dc.b	smpsNoAttack, $01
0009446A E10B                       	smpsAlterNote       $0B
0009446C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094470 E105                       	smpsAlterNote       $05
00094472 E701                       	dc.b	smpsNoAttack, $01
00094474 E102                       	smpsAlterNote       $02
00094476 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009447A E108                       	smpsAlterNote       $08
0009447C E701                       	dc.b	smpsNoAttack, $01
0009447E E10C                       	smpsAlterNote       $0C
00094480 E701                       	dc.b	smpsNoAttack, $01
00094482 E10B                       	smpsAlterNote       $0B
00094484 E701                       	dc.b	smpsNoAttack, $01
00094486 E105                       	smpsAlterNote       $05
00094488 E701                       	dc.b	smpsNoAttack, $01
0009448A E101                       	smpsAlterNote       $01
0009448C E701                       	dc.b	smpsNoAttack, $01
0009448E E105                       	smpsAlterNote       $05
00094490 E701                       	dc.b	smpsNoAttack, $01
00094492 E108                       	smpsAlterNote       $08
00094494 E701                       	dc.b	smpsNoAttack, $01
00094496 E10C                       	smpsAlterNote       $0C
00094498 E701                       	dc.b	smpsNoAttack, $01
0009449A E108                       	smpsAlterNote       $08
0009449C E701                       	dc.b	smpsNoAttack, $01
0009449E E102                       	smpsAlterNote       $02
000944A0 E701                       	dc.b	smpsNoAttack, $01
000944A2 E101                       	smpsAlterNote       $01
000944A4 E701                       	dc.b	smpsNoAttack, $01
000944A6 E105                       	smpsAlterNote       $05
000944A8 E701                       	dc.b	smpsNoAttack, $01
000944AA E10B                       	smpsAlterNote       $0B
000944AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944B0 E108                       	smpsAlterNote       $08
000944B2 E701                       	dc.b	smpsNoAttack, $01
000944B4 E102                       	smpsAlterNote       $02
000944B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944BA E108                       	smpsAlterNote       $08
000944BC E701                       	dc.b	smpsNoAttack, $01
000944BE E10B                       	smpsAlterNote       $0B
000944C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944C4 E105                       	smpsAlterNote       $05
000944C6 E701                       	dc.b	smpsNoAttack, $01
000944C8 E101                       	smpsAlterNote       $01
000944CA E701                       	dc.b	smpsNoAttack, $01
000944CC E102                       	smpsAlterNote       $02
000944CE E701                       	dc.b	smpsNoAttack, $01
000944D0 E108                       	smpsAlterNote       $08
000944D2 E701                       	dc.b	smpsNoAttack, $01
000944D4 E10C                       	smpsAlterNote       $0C
000944D6 E701                       	dc.b	smpsNoAttack, $01
000944D8 E108                       	smpsAlterNote       $08
000944DA E701                       	dc.b	smpsNoAttack, $01
000944DC E105                       	smpsAlterNote       $05
000944DE E701                       	dc.b	smpsNoAttack, $01
000944E0 E101                       	smpsAlterNote       $01
000944E2 E701                       	dc.b	smpsNoAttack, $01
000944E4 E105                       	smpsAlterNote       $05
000944E6 E701                       	dc.b	smpsNoAttack, $01
000944E8 E10B                       	smpsAlterNote       $0B
000944EA E701                       	dc.b	smpsNoAttack, $01
000944EC E10C                       	smpsAlterNote       $0C
000944EE E701                       	dc.b	smpsNoAttack, $01
000944F0 E108                       	smpsAlterNote       $08
000944F2 E701                       	dc.b	smpsNoAttack, $01
000944F4 E102                       	smpsAlterNote       $02
000944F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944FA E105                       	smpsAlterNote       $05
000944FC E701                       	dc.b	smpsNoAttack, $01
000944FE E10B                       	smpsAlterNote       $0B
00094500 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094504 E105                       	smpsAlterNote       $05
00094506 E701                       	dc.b	smpsNoAttack, $01
00094508 E101                       	smpsAlterNote       $01
0009450A E701                       	dc.b	smpsNoAttack, $01
0009450C E102                       	smpsAlterNote       $02
0009450E E701                       	dc.b	smpsNoAttack, $01
00094510 E108                       	smpsAlterNote       $08
00094512 E701                       	dc.b	smpsNoAttack, $01
00094514 E10C                       	smpsAlterNote       $0C
00094516 E701                       	dc.b	smpsNoAttack, $01
00094518 E108                       	smpsAlterNote       $08
0009451A E701                       	dc.b	smpsNoAttack, $01
0009451C E105                       	smpsAlterNote       $05
0009451E E701                       	dc.b	smpsNoAttack, $01
00094520 E101                       	smpsAlterNote       $01
00094522 E701                       	dc.b	smpsNoAttack, $01
00094524 E105                       	smpsAlterNote       $05
00094526 E701                       	dc.b	smpsNoAttack, $01
00094528 E10B                       	smpsAlterNote       $0B
0009452A E701                       	dc.b	smpsNoAttack, $01
0009452C E10C                       	smpsAlterNote       $0C
0009452E E701                       	dc.b	smpsNoAttack, $01
00094530 E108                       	smpsAlterNote       $08
00094532 E701                       	dc.b	smpsNoAttack, $01
00094534 E102                       	smpsAlterNote       $02
00094536 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009453A E105                       	smpsAlterNote       $05
0009453C E701                       	dc.b	smpsNoAttack, $01
0009453E E10B                       	smpsAlterNote       $0B
00094540 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094544 E105                       	smpsAlterNote       $05
00094546 E701                       	dc.b	smpsNoAttack, $01
00094548 E102                       	smpsAlterNote       $02
0009454A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009454E E108                       	smpsAlterNote       $08
00094550 E701                       	dc.b	smpsNoAttack, $01
00094552 E10C                       	smpsAlterNote       $0C
00094554 E701                       	dc.b	smpsNoAttack, $01
00094556 E10B                       	smpsAlterNote       $0B
00094558 E701                       	dc.b	smpsNoAttack, $01
0009455A E105                       	smpsAlterNote       $05
0009455C E701                       	dc.b	smpsNoAttack, $01
0009455E E101                       	smpsAlterNote       $01
00094560 E701                       	dc.b	smpsNoAttack, $01
00094562 E105                       	smpsAlterNote       $05
00094564 E701                       	dc.b	smpsNoAttack, $01
00094566 E108                       	smpsAlterNote       $08
00094568 E701                       	dc.b	smpsNoAttack, $01
0009456A E10C                       	smpsAlterNote       $0C
0009456C E701                       	dc.b	smpsNoAttack, $01
00094570 E10B                       	smpsAlterNote       $0B
00094572 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094576 E109                       	smpsAlterNote       $09
00094578 C404                       	dc.b	nG5, $04
0009457A E10B                       	smpsAlterNote       $0B
0009457C C604 8001                  	dc.b	nA5, $04, nRst, $01
00094580 E107                       	smpsAlterNote       $07
00094582 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00094588 E10B                       	smpsAlterNote       $0B
0009458A C604                       	dc.b	nA5, $04
0009458C E109                       	smpsAlterNote       $09
0009458E C404 8001                  	dc.b	nG5, $04, nRst, $01
00094592 E10B                       	smpsAlterNote       $0B
00094594 C604                       	dc.b	nA5, $04
00094596 E108                       	smpsAlterNote       $08
00094598 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0009459E E106                       	smpsAlterNote       $06
000945A0 C904 8001                  	dc.b	nC6, $04, nRst, $01
000945A4 E10C                       	smpsAlterNote       $0C
000945A6 C704                       	dc.b	nBb5, $04
000945A8 E10B                       	smpsAlterNote       $0B
000945AA C604 8001                  	dc.b	nA5, $04, nRst, $01
000945AE E109                       	smpsAlterNote       $09
000945B0 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000945BA E10B                       	smpsAlterNote       $0B
000945BC C60D                       	dc.b	nA5, $0D
000945BE E108                       	smpsAlterNote       $08
000945C0 E701                       	dc.b	smpsNoAttack, $01
000945C2 E104                       	smpsAlterNote       $04
000945C4 E701                       	dc.b	smpsNoAttack, $01
000945C6 E108                       	smpsAlterNote       $08
000945C8 E701                       	dc.b	smpsNoAttack, $01
000945CA E10B                       	smpsAlterNote       $0B
000945CC E701                       	dc.b	smpsNoAttack, $01
000945CE E10F                       	smpsAlterNote       $0F
000945D0 E701                       	dc.b	smpsNoAttack, $01
000945D2 E10B                       	smpsAlterNote       $0B
000945D4 E701                       	dc.b	smpsNoAttack, $01
000945D6 E105                       	smpsAlterNote       $05
000945D8 E701                       	dc.b	smpsNoAttack, $01
000945DA E104                       	smpsAlterNote       $04
000945DC E701                       	dc.b	smpsNoAttack, $01
000945DE E108                       	smpsAlterNote       $08
000945E0 E701                       	dc.b	smpsNoAttack, $01
000945E2 E10E                       	smpsAlterNote       $0E
000945E4 E701                       	dc.b	smpsNoAttack, $01
000945E6 E10F                       	smpsAlterNote       $0F
000945E8 8001                       	dc.b	nRst, $01
000945EA E109                       	smpsAlterNote       $09
000945EC C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000945F2 E108                       	smpsAlterNote       $08
000945F4 C10D                       	dc.b	nE5, $0D
000945F6 E105                       	smpsAlterNote       $05
000945F8 E701                       	dc.b	smpsNoAttack, $01
000945FA E101                       	smpsAlterNote       $01
000945FC E701                       	dc.b	smpsNoAttack, $01
000945FE E105                       	smpsAlterNote       $05
00094600 E701                       	dc.b	smpsNoAttack, $01
00094602 E10B                       	smpsAlterNote       $0B
00094604 E701                       	dc.b	smpsNoAttack, $01
00094606 E10C                       	smpsAlterNote       $0C
00094608 E701                       	dc.b	smpsNoAttack, $01
0009460A E108                       	smpsAlterNote       $08
0009460C E701                       	dc.b	smpsNoAttack, $01
0009460E E102                       	smpsAlterNote       $02
00094610 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094614 E105                       	smpsAlterNote       $05
00094616 E701                       	dc.b	smpsNoAttack, $01
00094618 E10B                       	smpsAlterNote       $0B
0009461A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009461E E105                       	smpsAlterNote       $05
00094620 E701                       	dc.b	smpsNoAttack, $01
00094622 E102                       	smpsAlterNote       $02
00094624 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094628 E108                       	smpsAlterNote       $08
0009462A E701                       	dc.b	smpsNoAttack, $01
0009462C E10C                       	smpsAlterNote       $0C
0009462E E701                       	dc.b	smpsNoAttack, $01
00094630 E10B                       	smpsAlterNote       $0B
00094632 E701                       	dc.b	smpsNoAttack, $01
00094634 E105                       	smpsAlterNote       $05
00094636 E701                       	dc.b	smpsNoAttack, $01
00094638 E101                       	smpsAlterNote       $01
0009463A E701                       	dc.b	smpsNoAttack, $01
0009463C E105                       	smpsAlterNote       $05
0009463E E701                       	dc.b	smpsNoAttack, $01
00094640 E108                       	smpsAlterNote       $08
00094642 E701                       	dc.b	smpsNoAttack, $01
00094644 E10C                       	smpsAlterNote       $0C
00094646 E701                       	dc.b	smpsNoAttack, $01
00094648 E108                       	smpsAlterNote       $08
0009464A E701                       	dc.b	smpsNoAttack, $01
0009464C E102                       	smpsAlterNote       $02
0009464E E701                       	dc.b	smpsNoAttack, $01
00094650 E101                       	smpsAlterNote       $01
00094652 E701                       	dc.b	smpsNoAttack, $01
00094654 E105                       	smpsAlterNote       $05
00094656 E701                       	dc.b	smpsNoAttack, $01
00094658 E10B                       	smpsAlterNote       $0B
0009465A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009465E E108                       	smpsAlterNote       $08
00094660 E701                       	dc.b	smpsNoAttack, $01
00094662 E102                       	smpsAlterNote       $02
00094664 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094668 E108                       	smpsAlterNote       $08
0009466A E701                       	dc.b	smpsNoAttack, $01
0009466C E10B                       	smpsAlterNote       $0B
0009466E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094672 E105                       	smpsAlterNote       $05
00094674 E701                       	dc.b	smpsNoAttack, $01
00094676 E101                       	smpsAlterNote       $01
00094678 E701                       	dc.b	smpsNoAttack, $01
0009467A E102                       	smpsAlterNote       $02
0009467C E701                       	dc.b	smpsNoAttack, $01
0009467E E108                       	smpsAlterNote       $08
00094680 E701                       	dc.b	smpsNoAttack, $01
00094682 E10C                       	smpsAlterNote       $0C
00094684 E701                       	dc.b	smpsNoAttack, $01
00094686 E108                       	smpsAlterNote       $08
00094688 E701                       	dc.b	smpsNoAttack, $01
0009468A E105                       	smpsAlterNote       $05
0009468C E701                       	dc.b	smpsNoAttack, $01
0009468E E101                       	smpsAlterNote       $01
00094690 E701                       	dc.b	smpsNoAttack, $01
00094692 E105                       	smpsAlterNote       $05
00094694 E701                       	dc.b	smpsNoAttack, $01
00094696 E10B                       	smpsAlterNote       $0B
00094698 E701                       	dc.b	smpsNoAttack, $01
0009469A E10C                       	smpsAlterNote       $0C
0009469C E701                       	dc.b	smpsNoAttack, $01
0009469E E108                       	smpsAlterNote       $08
000946A0 E701                       	dc.b	smpsNoAttack, $01
000946A2 E102                       	smpsAlterNote       $02
000946A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946A8 E108                       	smpsAlterNote       $08
000946AA E701                       	dc.b	smpsNoAttack, $01
000946AC E10B                       	smpsAlterNote       $0B
000946AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946B2 E105                       	smpsAlterNote       $05
000946B4 E701                       	dc.b	smpsNoAttack, $01
000946B6 E101                       	smpsAlterNote       $01
000946B8 E701                       	dc.b	smpsNoAttack, $01
000946BA E102                       	smpsAlterNote       $02
000946BC E701                       	dc.b	smpsNoAttack, $01
000946BE E108                       	smpsAlterNote       $08
000946C0 E701                       	dc.b	smpsNoAttack, $01
000946C2 E10C                       	smpsAlterNote       $0C
000946C4 E701                       	dc.b	smpsNoAttack, $01
000946C6 E108                       	smpsAlterNote       $08
000946C8 E701                       	dc.b	smpsNoAttack, $01
000946CA E105                       	smpsAlterNote       $05
000946CC E701                       	dc.b	smpsNoAttack, $01
000946CE E101                       	smpsAlterNote       $01
000946D0 E701                       	dc.b	smpsNoAttack, $01
000946D2 E105                       	smpsAlterNote       $05
000946D4 E701                       	dc.b	smpsNoAttack, $01
000946D6 E10B                       	smpsAlterNote       $0B
000946D8 E701                       	dc.b	smpsNoAttack, $01
000946DA E10C                       	smpsAlterNote       $0C
000946DC E701                       	dc.b	smpsNoAttack, $01
000946DE E108                       	smpsAlterNote       $08
000946E0 E701                       	dc.b	smpsNoAttack, $01
000946E2 E102                       	smpsAlterNote       $02
000946E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946E8 E105                       	smpsAlterNote       $05
000946EA E701                       	dc.b	smpsNoAttack, $01
000946EC E10B                       	smpsAlterNote       $0B
000946EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946F2 E105                       	smpsAlterNote       $05
000946F4 E701                       	dc.b	smpsNoAttack, $01
000946F6 E102                       	smpsAlterNote       $02
000946F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946FC E108                       	smpsAlterNote       $08
000946FE E701                       	dc.b	smpsNoAttack, $01
00094700 E10C                       	smpsAlterNote       $0C
00094702 E701                       	dc.b	smpsNoAttack, $01
00094704 E10B                       	smpsAlterNote       $0B
00094706 E701                       	dc.b	smpsNoAttack, $01
00094708 E105                       	smpsAlterNote       $05
0009470A E701                       	dc.b	smpsNoAttack, $01
0009470C E101                       	smpsAlterNote       $01
0009470E E701                       	dc.b	smpsNoAttack, $01
00094710 E105                       	smpsAlterNote       $05
00094712 E701                       	dc.b	smpsNoAttack, $01
00094714 E108                       	smpsAlterNote       $08
00094716 E701                       	dc.b	smpsNoAttack, $01
00094718 E10C                       	smpsAlterNote       $0C
0009471A E701                       	dc.b	smpsNoAttack, $01
0009471C E108                       	smpsAlterNote       $08
0009471E E701                       	dc.b	smpsNoAttack, $01
00094720 E102                       	smpsAlterNote       $02
00094722 E701                       	dc.b	smpsNoAttack, $01
00094724 E101                       	smpsAlterNote       $01
00094726 E701                       	dc.b	smpsNoAttack, $01
00094728 E105                       	smpsAlterNote       $05
0009472A E701                       	dc.b	smpsNoAttack, $01
0009472C E10B                       	smpsAlterNote       $0B
0009472E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094732 E108                       	smpsAlterNote       $08
00094734 E701                       	dc.b	smpsNoAttack, $01
00094736 E102                       	smpsAlterNote       $02
00094738 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009473C E108                       	smpsAlterNote       $08
0009473E E701                       	dc.b	smpsNoAttack, $01
00094740 E10B                       	smpsAlterNote       $0B
00094742 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094746 E105                       	smpsAlterNote       $05
00094748 E701                       	dc.b	smpsNoAttack, $01
0009474A E102                       	smpsAlterNote       $02
0009474C 8001                       	dc.b	nRst, $01
0009474E E107                       	smpsAlterNote       $07
00094750 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00094754 E108                       	smpsAlterNote       $08
00094756 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
0009475A E102                       	smpsAlterNote       $02
0009475C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094760 E108                       	smpsAlterNote       $08
00094762 E701                       	dc.b	smpsNoAttack, $01
00094764 E10B                       	smpsAlterNote       $0B
00094766 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009476A E105                       	smpsAlterNote       $05
0009476C E701                       	dc.b	smpsNoAttack, $01
0009476E E101                       	smpsAlterNote       $01
00094770 E701                       	dc.b	smpsNoAttack, $01
00094772 E102                       	smpsAlterNote       $02
00094774 E701                       	dc.b	smpsNoAttack, $01
00094776 E108                       	smpsAlterNote       $08
00094778 E701                       	dc.b	smpsNoAttack, $01
0009477A E10C                       	smpsAlterNote       $0C
0009477C E701                       	dc.b	smpsNoAttack, $01
0009477E E108                       	smpsAlterNote       $08
00094780 E701                       	dc.b	smpsNoAttack, $01
00094782 E105                       	smpsAlterNote       $05
00094784 E701                       	dc.b	smpsNoAttack, $01
00094786 E101                       	smpsAlterNote       $01
00094788 E701                       	dc.b	smpsNoAttack, $01
0009478A E105                       	smpsAlterNote       $05
0009478C E701                       	dc.b	smpsNoAttack, $01
0009478E E10B                       	smpsAlterNote       $0B
00094790 E701                       	dc.b	smpsNoAttack, $01
00094792 E10C                       	smpsAlterNote       $0C
00094794 E701                       	dc.b	smpsNoAttack, $01
00094796 E108                       	smpsAlterNote       $08
00094798 E701                       	dc.b	smpsNoAttack, $01
0009479A E102                       	smpsAlterNote       $02
0009479C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947A0 E105                       	smpsAlterNote       $05
000947A2 E701                       	dc.b	smpsNoAttack, $01
000947A4 E10B                       	smpsAlterNote       $0B
000947A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947AA E105                       	smpsAlterNote       $05
000947AC E701                       	dc.b	smpsNoAttack, $01
000947AE E102                       	smpsAlterNote       $02
000947B0 E701                       	dc.b	smpsNoAttack, $01
000947B2 E109                       	smpsAlterNote       $09
000947B4 C40A C207                  	dc.b	nG5, $0A, nF5, $07
000947B8 E108                       	smpsAlterNote       $08
000947BA C10D                       	dc.b	nE5, $0D
000947BC E105                       	smpsAlterNote       $05
000947BE E701                       	dc.b	smpsNoAttack, $01
000947C0 E101                       	smpsAlterNote       $01
000947C2 E701                       	dc.b	smpsNoAttack, $01
000947C4 E102                       	smpsAlterNote       $02
000947C6 E701                       	dc.b	smpsNoAttack, $01
000947C8 E108                       	smpsAlterNote       $08
000947CA E701                       	dc.b	smpsNoAttack, $01
000947CC E10C                       	smpsAlterNote       $0C
000947CE E701                       	dc.b	smpsNoAttack, $01
000947D0 E108                       	smpsAlterNote       $08
000947D2 E701                       	dc.b	smpsNoAttack, $01
000947D4 E105                       	smpsAlterNote       $05
000947D6 E701                       	dc.b	smpsNoAttack, $01
000947D8 E101                       	smpsAlterNote       $01
000947DA E701                       	dc.b	smpsNoAttack, $01
000947DC E105                       	smpsAlterNote       $05
000947DE E701                       	dc.b	smpsNoAttack, $01
000947E0 E10B                       	smpsAlterNote       $0B
000947E2 E701                       	dc.b	smpsNoAttack, $01
000947E4 E10C                       	smpsAlterNote       $0C
000947E6 E701                       	dc.b	smpsNoAttack, $01
000947E8 E108                       	smpsAlterNote       $08
000947EA E701                       	dc.b	smpsNoAttack, $01
000947EC E102                       	smpsAlterNote       $02
000947EE E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
000947F6 E10B                       	smpsAlterNote       $0B
000947F8 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000947FC E10C                       	smpsAlterNote       $0C
000947FE BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00094802 E10B                       	smpsAlterNote       $0B
00094804 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0009480A E107                       	smpsAlterNote       $07
0009480C BF03                       	dc.b	nD5, $03
0009480E E108                       	smpsAlterNote       $08
00094810 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094814 E109                       	smpsAlterNote       $09
00094816 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0009481C E10B                       	smpsAlterNote       $0B
0009481E C606 8001                  	dc.b	nA5, $06, nRst, $01
00094822 E107                       	smpsAlterNote       $07
00094824 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094828 E106                       	smpsAlterNote       $06
0009482A C90D                       	dc.b	nC6, $0D
0009482C E103                       	smpsAlterNote       $03
0009482E E701                       	dc.b	smpsNoAttack, $01
00094830 E1FF                       	smpsAlterNote       $FF
00094832 E701                       	dc.b	smpsNoAttack, $01
00094834 E103                       	smpsAlterNote       $03
00094836 E701                       	dc.b	smpsNoAttack, $01
00094838 E109                       	smpsAlterNote       $09
0009483A E701                       	dc.b	smpsNoAttack, $01
0009483C E10A                       	smpsAlterNote       $0A
0009483E E701                       	dc.b	smpsNoAttack, $01
00094840 E106                       	smpsAlterNote       $06
00094842 E701                       	dc.b	smpsNoAttack, $01
00094844 E100                       	smpsAlterNote       $00
00094846 E701                       	dc.b	smpsNoAttack, $01
00094848 E10C                       	smpsAlterNote       $0C
0009484A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009484E E10B                       	smpsAlterNote       $0B
00094850 C603                       	dc.b	nA5, $03
00094852 E109                       	smpsAlterNote       $09
00094854 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094858 E10B                       	smpsAlterNote       $0B
0009485A C60D                       	dc.b	nA5, $0D
0009485C E105                       	smpsAlterNote       $05
0009485E E701                       	dc.b	smpsNoAttack, $01
00094860 E104                       	smpsAlterNote       $04
00094862 E701                       	dc.b	smpsNoAttack, $01
00094864 E108                       	smpsAlterNote       $08
00094866 E701                       	dc.b	smpsNoAttack, $01
00094868 E10E                       	smpsAlterNote       $0E
0009486A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009486E E10B                       	smpsAlterNote       $0B
00094870 E701                       	dc.b	smpsNoAttack, $01
00094872 E105                       	smpsAlterNote       $05
00094874 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094878 E10B                       	smpsAlterNote       $0B
0009487A E701                       	dc.b	smpsNoAttack, $01
0009487C E10E                       	smpsAlterNote       $0E
0009487E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094882 E108                       	smpsAlterNote       $08
00094884 E701                       	dc.b	smpsNoAttack, $01
00094886 E104                       	smpsAlterNote       $04
00094888 E701                       	dc.b	smpsNoAttack, $01
0009488A E105                       	smpsAlterNote       $05
0009488C E701                       	dc.b	smpsNoAttack, $01
0009488E E10B                       	smpsAlterNote       $0B
00094890 E701                       	dc.b	smpsNoAttack, $01
00094892 E10F                       	smpsAlterNote       $0F
00094894 E701                       	dc.b	smpsNoAttack, $01
00094896 E10B                       	smpsAlterNote       $0B
00094898 E701                       	dc.b	smpsNoAttack, $01
0009489A E108                       	smpsAlterNote       $08
0009489C E701                       	dc.b	smpsNoAttack, $01
0009489E E104                       	smpsAlterNote       $04
000948A0 E701                       	dc.b	smpsNoAttack, $01
000948A2 E108                       	smpsAlterNote       $08
000948A4 E701                       	dc.b	smpsNoAttack, $01
000948A6 E10E                       	smpsAlterNote       $0E
000948A8 E701                       	dc.b	smpsNoAttack, $01
000948AA E10F                       	smpsAlterNote       $0F
000948AC E701                       	dc.b	smpsNoAttack, $01
000948AE E10B                       	smpsAlterNote       $0B
000948B0 E701                       	dc.b	smpsNoAttack, $01
000948B2 E105                       	smpsAlterNote       $05
000948B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948B8 E108                       	smpsAlterNote       $08
000948BA E701                       	dc.b	smpsNoAttack, $01
000948BC E10E                       	smpsAlterNote       $0E
000948BE E701                       	dc.b	smpsNoAttack, $01
000948C0 E10F                       	smpsAlterNote       $0F
000948C2 800F                       	dc.b	nRst, $0F
000948C4 E107                       	smpsAlterNote       $07
000948C6 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000948CA E108                       	smpsAlterNote       $08
000948CC C103                       	dc.b	nE5, $03
000948CE E109                       	smpsAlterNote       $09
000948D0 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000948D6 E10B                       	smpsAlterNote       $0B
000948D8 C607                       	dc.b	nA5, $07
000948DA E107                       	smpsAlterNote       $07
000948DC BF03 8001                  	dc.b	nD5, $03, nRst, $01
000948E0 E106                       	smpsAlterNote       $06
000948E2 C90D                       	dc.b	nC6, $0D
000948E4 E107                       	smpsAlterNote       $07
000948E6 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000948EA E10C                       	smpsAlterNote       $0C
000948EC C704                       	dc.b	nBb5, $04
000948EE E10B                       	smpsAlterNote       $0B
000948F0 C604 8001                  	dc.b	nA5, $04, nRst, $01
000948F4 E109                       	smpsAlterNote       $09
000948F6 C404                       	dc.b	nG5, $04
000948F8 E10B                       	smpsAlterNote       $0B
000948FA C60D                       	dc.b	nA5, $0D
000948FC E108                       	smpsAlterNote       $08
000948FE E701                       	dc.b	smpsNoAttack, $01
00094900 E105                       	smpsAlterNote       $05
00094902 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094906 E10B                       	smpsAlterNote       $0B
00094908 E701                       	dc.b	smpsNoAttack, $01
0009490A E10F                       	smpsAlterNote       $0F
0009490C E701                       	dc.b	smpsNoAttack, $01
0009490E E10E                       	smpsAlterNote       $0E
00094910 E701                       	dc.b	smpsNoAttack, $01
00094912 E108                       	smpsAlterNote       $08
00094914 E701                       	dc.b	smpsNoAttack, $01
00094916 E104                       	smpsAlterNote       $04
00094918 E701                       	dc.b	smpsNoAttack, $01
0009491A E108                       	smpsAlterNote       $08
0009491C E701                       	dc.b	smpsNoAttack, $01
0009491E E10B                       	smpsAlterNote       $0B
00094920 E701                       	dc.b	smpsNoAttack, $01
00094922 E10F                       	smpsAlterNote       $0F
00094924 E701                       	dc.b	smpsNoAttack, $01
00094926 E10B                       	smpsAlterNote       $0B
00094928 E701                       	dc.b	smpsNoAttack, $01
0009492A E105                       	smpsAlterNote       $05
0009492C E701                       	dc.b	smpsNoAttack, $01
0009492E E104                       	smpsAlterNote       $04
00094930 E701                       	dc.b	smpsNoAttack, $01
00094932 E108                       	smpsAlterNote       $08
00094934 E701                       	dc.b	smpsNoAttack, $01
00094936 E10E                       	smpsAlterNote       $0E
00094938 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009493C E10B                       	smpsAlterNote       $0B
0009493E E701                       	dc.b	smpsNoAttack, $01
00094940 E105                       	smpsAlterNote       $05
00094942 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094946 E10B                       	smpsAlterNote       $0B
00094948 E701                       	dc.b	smpsNoAttack, $01
0009494A E10E                       	smpsAlterNote       $0E
0009494C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094950 E108                       	smpsAlterNote       $08
00094952 E701                       	dc.b	smpsNoAttack, $01
00094954 E105                       	smpsAlterNote       $05
00094956 8001                       	dc.b	nRst, $01
00094958 E109                       	smpsAlterNote       $09
0009495A C401 8001                  	dc.b	nG5, $01, nRst, $01
0009495E E10B                       	smpsAlterNote       $0B
00094960 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094968 E109                       	smpsAlterNote       $09
0009496A C404                       	dc.b	nG5, $04
0009496C E10B                       	smpsAlterNote       $0B
0009496E C604 8001                  	dc.b	nA5, $04, nRst, $01
00094972 E107                       	smpsAlterNote       $07
00094974 BF0D                       	dc.b	nD5, $0D
00094976 E101                       	smpsAlterNote       $01
00094978 E701                       	dc.b	smpsNoAttack, $01
0009497A E100                       	smpsAlterNote       $00
0009497C E701                       	dc.b	smpsNoAttack, $01
0009497E E104                       	smpsAlterNote       $04
00094980 E701                       	dc.b	smpsNoAttack, $01
00094982 E10A                       	smpsAlterNote       $0A
00094984 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094988 E107                       	smpsAlterNote       $07
0009498A E701                       	dc.b	smpsNoAttack, $01
0009498C E101                       	smpsAlterNote       $01
0009498E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094992 E107                       	smpsAlterNote       $07
00094994 E701                       	dc.b	smpsNoAttack, $01
00094996 E10A                       	smpsAlterNote       $0A
00094998 E701                       	dc.b	smpsNoAttack, $01
0009499A E10B                       	smpsAlterNote       $0B
0009499C 8001                       	dc.b	nRst, $01
0009499E E108                       	smpsAlterNote       $08
000949A0 8001                       	dc.b	nRst, $01
000949A2 E109                       	smpsAlterNote       $09
000949A4 8001 C401                  	dc.b	nRst, $01, nG5, $01
000949A8 E10B                       	smpsAlterNote       $0B
000949AA C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000949B2 E108                       	smpsAlterNote       $08
000949B4 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000949B8 E109                       	smpsAlterNote       $09
000949BA CE06 8001                  	dc.b	nF6, $06, nRst, $01
000949BE E108                       	smpsAlterNote       $08
000949C0 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000949C4 E106                       	smpsAlterNote       $06
000949C6 C903                       	dc.b	nC6, $03
000949C8 E109                       	smpsAlterNote       $09
000949CA C403 8001                  	dc.b	nG5, $03, nRst, $01
000949CE E10C                       	smpsAlterNote       $0C
000949D0 C70D                       	dc.b	nBb5, $0D
000949D2 E109                       	smpsAlterNote       $09
000949D4 E701                       	dc.b	smpsNoAttack, $01
000949D6 E105                       	smpsAlterNote       $05
000949D8 E701                       	dc.b	smpsNoAttack, $01
000949DA E109                       	smpsAlterNote       $09
000949DC E701                       	dc.b	smpsNoAttack, $01
000949DE E10F                       	smpsAlterNote       $0F
000949E0 E701                       	dc.b	smpsNoAttack, $01
000949E2 E110                       	smpsAlterNote       $10
000949E4 E701                       	dc.b	smpsNoAttack, $01
000949E6 E10C                       	smpsAlterNote       $0C
000949E8 E701                       	dc.b	smpsNoAttack, $01
000949EA E106                       	smpsAlterNote       $06
000949EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949F0 E109                       	smpsAlterNote       $09
000949F2 E701                       	dc.b	smpsNoAttack, $01
000949F4 E10F                       	smpsAlterNote       $0F
000949F6 E701                       	dc.b	smpsNoAttack, $01
000949F8 E110                       	smpsAlterNote       $10
000949FA 8001                       	dc.b	nRst, $01
000949FC E10B                       	smpsAlterNote       $0B
000949FE C606 8001                  	dc.b	nA5, $06, nRst, $01
00094A02 E109                       	smpsAlterNote       $09
00094A04 C40D                       	dc.b	nG5, $0D
00094A06 E103                       	smpsAlterNote       $03
00094A08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A0C E106                       	smpsAlterNote       $06
00094A0E E701                       	dc.b	smpsNoAttack, $01
00094A10 E10C                       	smpsAlterNote       $0C
00094A12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A16 E106                       	smpsAlterNote       $06
00094A18 E701                       	dc.b	smpsNoAttack, $01
00094A1A E103                       	smpsAlterNote       $03
00094A1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A20 E109                       	smpsAlterNote       $09
00094A22 E701                       	dc.b	smpsNoAttack, $01
00094A24 E10D                       	smpsAlterNote       $0D
00094A26 E701                       	dc.b	smpsNoAttack, $01
00094A28 E10C                       	smpsAlterNote       $0C
00094A2A E701                       	dc.b	smpsNoAttack, $01
00094A2C E106                       	smpsAlterNote       $06
00094A2E E701                       	dc.b	smpsNoAttack, $01
00094A30 E102                       	smpsAlterNote       $02
00094A32 E701                       	dc.b	smpsNoAttack, $01
00094A34 E103                       	smpsAlterNote       $03
00094A36 8001                       	dc.b	nRst, $01
00094A38 E10B                       	smpsAlterNote       $0B
00094A3A C60D                       	dc.b	nA5, $0D
00094A3C E108                       	smpsAlterNote       $08
00094A3E E701                       	dc.b	smpsNoAttack, $01
00094A40 E104                       	smpsAlterNote       $04
00094A42 E701                       	dc.b	smpsNoAttack, $01
00094A44 E108                       	smpsAlterNote       $08
00094A46 E701                       	dc.b	smpsNoAttack, $01
00094A48 E10B                       	smpsAlterNote       $0B
00094A4A E701                       	dc.b	smpsNoAttack, $01
00094A4C E10F                       	smpsAlterNote       $0F
00094A4E E701                       	dc.b	smpsNoAttack, $01
00094A50 E10B                       	smpsAlterNote       $0B
00094A52 E701                       	dc.b	smpsNoAttack, $01
00094A54 E105                       	smpsAlterNote       $05
00094A56 E701                       	dc.b	smpsNoAttack, $01
00094A58 E104                       	smpsAlterNote       $04
00094A5A E701                       	dc.b	smpsNoAttack, $01
00094A5C E108                       	smpsAlterNote       $08
00094A5E E701                       	dc.b	smpsNoAttack, $01
00094A60 E10E                       	smpsAlterNote       $0E
00094A62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A66 E10B                       	smpsAlterNote       $0B
00094A68 E701                       	dc.b	smpsNoAttack, $01
00094A6A E105                       	smpsAlterNote       $05
00094A6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A70 E10C                       	smpsAlterNote       $0C
00094A72 C70E                       	dc.b	nBb5, $0E
00094A74 E106                       	smpsAlterNote       $06
00094A76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A7A E10C                       	smpsAlterNote       $0C
00094A7C E701                       	dc.b	smpsNoAttack, $01
00094A7E E10F                       	smpsAlterNote       $0F
00094A80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A84 E109                       	smpsAlterNote       $09
00094A86 E701                       	dc.b	smpsNoAttack, $01
00094A88 E105                       	smpsAlterNote       $05
00094A8A E701                       	dc.b	smpsNoAttack, $01
00094A8C E106                       	smpsAlterNote       $06
00094A8E E701                       	dc.b	smpsNoAttack, $01
00094A90 E10C                       	smpsAlterNote       $0C
00094A92 E701                       	dc.b	smpsNoAttack, $01
00094A94 E110                       	smpsAlterNote       $10
00094A96 E701                       	dc.b	smpsNoAttack, $01
00094A98 E10C                       	smpsAlterNote       $0C
00094A9A E701                       	dc.b	smpsNoAttack, $01
00094A9C E109                       	smpsAlterNote       $09
00094A9E E701                       	dc.b	smpsNoAttack, $01
00094AA0 E105                       	smpsAlterNote       $05
00094AA2 E701                       	dc.b	smpsNoAttack, $01
00094AA4 E106                       	smpsAlterNote       $06
00094AA6 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00094AAA E107                       	smpsAlterNote       $07
00094AAC CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00094AB1 E108                       	smpsAlterNote       $08
00094AB3 CD0D                       	dc.b	nE6, $0D
00094AB5 E107                       	smpsAlterNote       $07
00094AB7 CB0D                       	dc.b	nD6, $0D
00094AB9 E104                       	smpsAlterNote       $04
00094ABB E701                       	dc.b	smpsNoAttack, $01
00094ABD E100                       	smpsAlterNote       $00
00094ABF E701                       	dc.b	smpsNoAttack, $01
00094AC1 E101                       	smpsAlterNote       $01
00094AC3 E701                       	dc.b	smpsNoAttack, $01
00094AC5 E107                       	smpsAlterNote       $07
00094AC7 E701                       	dc.b	smpsNoAttack, $01
00094AC9 E10B                       	smpsAlterNote       $0B
00094ACB E701                       	dc.b	smpsNoAttack, $01
00094ACD E107                       	smpsAlterNote       $07
00094ACF E701                       	dc.b	smpsNoAttack, $01
00094AD1 E104                       	smpsAlterNote       $04
00094AD3 E701                       	dc.b	smpsNoAttack, $01
00094AD5 E100                       	smpsAlterNote       $00
00094AD7 E701                       	dc.b	smpsNoAttack, $01
00094AD9 E104                       	smpsAlterNote       $04
00094ADB E701                       	dc.b	smpsNoAttack, $01
00094ADD E10A                       	smpsAlterNote       $0A
00094ADF E701                       	dc.b	smpsNoAttack, $01
00094AE1 E10B                       	smpsAlterNote       $0B
00094AE3 E701                       	dc.b	smpsNoAttack, $01
00094AE5 E108                       	smpsAlterNote       $08
00094AE7 CC0D                       	dc.b	nEb6, $0D
00094AE9 E105                       	smpsAlterNote       $05
00094AEB E701                       	dc.b	smpsNoAttack, $01
00094AED E101                       	smpsAlterNote       $01
00094AEF E701                       	dc.b	smpsNoAttack, $01
00094AF1 E102                       	smpsAlterNote       $02
00094AF3 E701                       	dc.b	smpsNoAttack, $01
00094AF5 E108                       	smpsAlterNote       $08
00094AF7 E701                       	dc.b	smpsNoAttack, $01
00094AF9 E106                       	smpsAlterNote       $06
00094AFB C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00094B07 8001                       	dc.b	nRst, $01
00094B09 E107                       	smpsAlterNote       $07
00094B0B CB0D                       	dc.b	nD6, $0D
00094B0D E104                       	smpsAlterNote       $04
00094B0F E701                       	dc.b	smpsNoAttack, $01
00094B11 E100                       	smpsAlterNote       $00
00094B13 E701                       	dc.b	smpsNoAttack, $01
00094B15 E104                       	smpsAlterNote       $04
00094B17 E701                       	dc.b	smpsNoAttack, $01
00094B19 E107                       	smpsAlterNote       $07
00094B1B E701                       	dc.b	smpsNoAttack, $01
00094B1D E10B                       	smpsAlterNote       $0B
00094B1F E701                       	dc.b	smpsNoAttack, $01
00094B21 E107                       	smpsAlterNote       $07
00094B23 E701                       	dc.b	smpsNoAttack, $01
00094B25 E101                       	smpsAlterNote       $01
00094B27 E701                       	dc.b	smpsNoAttack, $01
00094B29 E100                       	smpsAlterNote       $00
00094B2B E701                       	dc.b	smpsNoAttack, $01
00094B2D E104                       	smpsAlterNote       $04
00094B2F E701                       	dc.b	smpsNoAttack, $01
00094B31 E10A                       	smpsAlterNote       $0A
00094B33 E701                       	dc.b	smpsNoAttack, $01
00094B35 E10B                       	smpsAlterNote       $0B
00094B37 8001                       	dc.b	nRst, $01
00094B39 E109                       	smpsAlterNote       $09
00094B3B CE0A                       	dc.b	nF6, $0A
00094B3D E108                       	smpsAlterNote       $08
00094B3F CC07                       	dc.b	nEb6, $07
00094B41 E106                       	smpsAlterNote       $06
00094B43 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00094B4F E107                       	smpsAlterNote       $07
00094B51 CB0D                       	dc.b	nD6, $0D
00094B53 E101                       	smpsAlterNote       $01
00094B55 E701                       	dc.b	smpsNoAttack, $01
00094B57 E100                       	smpsAlterNote       $00
00094B59 E701                       	dc.b	smpsNoAttack, $01
00094B5B E104                       	smpsAlterNote       $04
00094B5D E701                       	dc.b	smpsNoAttack, $01
00094B5F E10A                       	smpsAlterNote       $0A
00094B61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B65 E107                       	smpsAlterNote       $07
00094B67 E701                       	dc.b	smpsNoAttack, $01
00094B69 E101                       	smpsAlterNote       $01
00094B6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B6F E107                       	smpsAlterNote       $07
00094B71 E701                       	dc.b	smpsNoAttack, $01
00094B73 E10A                       	smpsAlterNote       $0A
00094B75 E701                       	dc.b	smpsNoAttack, $01
00094B77 E10B                       	smpsAlterNote       $0B
00094B79 8001                       	dc.b	nRst, $01
00094B7B E108                       	smpsAlterNote       $08
00094B7D CC0D                       	dc.b	nEb6, $0D
00094B7F E102                       	smpsAlterNote       $02
00094B81 E701                       	dc.b	smpsNoAttack, $01
00094B83 E101                       	smpsAlterNote       $01
00094B85 E701                       	dc.b	smpsNoAttack, $01
00094B87 E105                       	smpsAlterNote       $05
00094B89 E701                       	dc.b	smpsNoAttack, $01
00094B8B E108                       	smpsAlterNote       $08
00094B8D 8001                       	dc.b	nRst, $01
00094B8F E106                       	smpsAlterNote       $06
00094B91 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00094B9D 8001                       	dc.b	nRst, $01
00094B9F E107                       	smpsAlterNote       $07
00094BA1 CB0D                       	dc.b	nD6, $0D
00094BA3 E101                       	smpsAlterNote       $01
00094BA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BA9 E104                       	smpsAlterNote       $04
00094BAB E701                       	dc.b	smpsNoAttack, $01
00094BAD E10A                       	smpsAlterNote       $0A
00094BAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BB3 E104                       	smpsAlterNote       $04
00094BB5 E701                       	dc.b	smpsNoAttack, $01
00094BB7 E101                       	smpsAlterNote       $01
00094BB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BBD E107                       	smpsAlterNote       $07
00094BBF E701                       	dc.b	smpsNoAttack, $01
00094BC1 E10B                       	smpsAlterNote       $0B
00094BC3 E701                       	dc.b	smpsNoAttack, $01
00094BC5 E10A                       	smpsAlterNote       $0A
00094BC7 E701                       	dc.b	smpsNoAttack, $01
00094BC9 E104                       	smpsAlterNote       $04
00094BCB E701                       	dc.b	smpsNoAttack, $01
00094BCD E100                       	smpsAlterNote       $00
00094BCF E701                       	dc.b	smpsNoAttack, $01
00094BD1 E101                       	smpsAlterNote       $01
00094BD3 801C                       	dc.b	nRst, $1C
00094BD7 E107                       	smpsAlterNote       $07
00094BD9 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094BDD E603                       	smpsAlterVol        $03
00094BDF F6F1 AD                    	smpsJump            music84_Jump03
00094BE2                            
00094BE2                            ; FM3 Data
00094BE2                            music84_FM3:
00094BE2 E0C0                       	smpsPan             panCenter, $00
00094BE6 E109                       	smpsAlterNote       $09
00094BE8 C203 8007                  	dc.b	nF5, $03, nRst, $07
00094BEC E108                       	smpsAlterNote       $08
00094BEE C103 800B                  	dc.b	nE5, $03, nRst, $0B
00094BF2 E10B                       	smpsAlterNote       $0B
00094BF4 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00094BFA E040                       	smpsPan             panRight, $00
00094BFC E110                       	smpsAlterNote       $10
00094BFE E6F9                       	smpsAlterVol        $F9
00094C00 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00094C04 E10F                       	smpsAlterNote       $0F
00094C06 C603                       	dc.b	nA5, $03
00094C08 E10D                       	smpsAlterNote       $0D
00094C0A C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00094C10 E10C                       	smpsAlterNote       $0C
00094C12 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094C16 E10A                       	smpsAlterNote       $0A
00094C18 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00094C1C E10F                       	smpsAlterNote       $0F
00094C1E BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094C22 E0C0                       	smpsPan             panCenter, $00
00094C26 E109                       	smpsAlterNote       $09
00094C28 E609                       	smpsAlterVol        $09
00094C2A B603                       	dc.b	nF4, $03
00094C2C                            
00094C2C                            music84_Jump02:
00094C2C E70A                       	dc.b	smpsNoAttack, $0A
00094C2E E103                       	smpsAlterNote       $03
00094C30 E701                       	dc.b	smpsNoAttack, $01
00094C32 E102                       	smpsAlterNote       $02
00094C34 E701                       	dc.b	smpsNoAttack, $01
00094C36 E106                       	smpsAlterNote       $06
00094C38 E701                       	dc.b	smpsNoAttack, $01
00094C3A E10C                       	smpsAlterNote       $0C
00094C3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C40 E109                       	smpsAlterNote       $09
00094C42 E701                       	dc.b	smpsNoAttack, $01
00094C44 E103                       	smpsAlterNote       $03
00094C46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C4A E109                       	smpsAlterNote       $09
00094C4C E701                       	dc.b	smpsNoAttack, $01
00094C4E E10C                       	smpsAlterNote       $0C
00094C50 E701                       	dc.b	smpsNoAttack, $01
00094C52 E10D                       	smpsAlterNote       $0D
00094C54 8001                       	dc.b	nRst, $01
00094C56 E109                       	smpsAlterNote       $09
00094C58 B80D                       	dc.b	nG4, $0D
00094C5A E103                       	smpsAlterNote       $03
00094C5C E701                       	dc.b	smpsNoAttack, $01
00094C5E E102                       	smpsAlterNote       $02
00094C60 E701                       	dc.b	smpsNoAttack, $01
00094C62 E106                       	smpsAlterNote       $06
00094C64 E701                       	dc.b	smpsNoAttack, $01
00094C66 E10C                       	smpsAlterNote       $0C
00094C68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C6C E109                       	smpsAlterNote       $09
00094C6E E701                       	dc.b	smpsNoAttack, $01
00094C70 E103                       	smpsAlterNote       $03
00094C72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C76 E109                       	smpsAlterNote       $09
00094C78 E701                       	dc.b	smpsNoAttack, $01
00094C7A E10C                       	smpsAlterNote       $0C
00094C7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C80 E106                       	smpsAlterNote       $06
00094C82 E701                       	dc.b	smpsNoAttack, $01
00094C84 E102                       	smpsAlterNote       $02
00094C86 E701                       	dc.b	smpsNoAttack, $01
00094C88 E103                       	smpsAlterNote       $03
00094C8A E701                       	dc.b	smpsNoAttack, $01
00094C8C E109                       	smpsAlterNote       $09
00094C8E E701                       	dc.b	smpsNoAttack, $01
00094C90 E10D                       	smpsAlterNote       $0D
00094C92 E701                       	dc.b	smpsNoAttack, $01
00094C94 E109                       	smpsAlterNote       $09
00094C96 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094C9A E10B                       	smpsAlterNote       $0B
00094C9C BA0D                       	dc.b	nA4, $0D
00094C9E E105                       	smpsAlterNote       $05
00094CA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CA4 E108                       	smpsAlterNote       $08
00094CA6 E701                       	dc.b	smpsNoAttack, $01
00094CA8 E10E                       	smpsAlterNote       $0E
00094CAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CAE E108                       	smpsAlterNote       $08
00094CB0 E701                       	dc.b	smpsNoAttack, $01
00094CB2 E104                       	smpsAlterNote       $04
00094CB4 E701                       	dc.b	smpsNoAttack, $01
00094CB6 E105                       	smpsAlterNote       $05
00094CB8 E701                       	dc.b	smpsNoAttack, $01
00094CBA E10B                       	smpsAlterNote       $0B
00094CBC E701                       	dc.b	smpsNoAttack, $01
00094CBE E10F                       	smpsAlterNote       $0F
00094CC0 E701                       	dc.b	smpsNoAttack, $01
00094CC2 E10B                       	smpsAlterNote       $0B
00094CC4 E701                       	dc.b	smpsNoAttack, $01
00094CC6 E108                       	smpsAlterNote       $08
00094CC8 E701                       	dc.b	smpsNoAttack, $01
00094CCA E104                       	smpsAlterNote       $04
00094CCC E701                       	dc.b	smpsNoAttack, $01
00094CCE E108                       	smpsAlterNote       $08
00094CD0 E701                       	dc.b	smpsNoAttack, $01
00094CD2 E10E                       	smpsAlterNote       $0E
00094CD4 E701                       	dc.b	smpsNoAttack, $01
00094CD6 E10F                       	smpsAlterNote       $0F
00094CD8 E701                       	dc.b	smpsNoAttack, $01
00094CDA E10B                       	smpsAlterNote       $0B
00094CDC E701                       	dc.b	smpsNoAttack, $01
00094CDE E105                       	smpsAlterNote       $05
00094CE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CE4 E108                       	smpsAlterNote       $08
00094CE6 E701                       	dc.b	smpsNoAttack, $01
00094CE8 E10E                       	smpsAlterNote       $0E
00094CEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CEE E108                       	smpsAlterNote       $08
00094CF0 E701                       	dc.b	smpsNoAttack, $01
00094CF2 E105                       	smpsAlterNote       $05
00094CF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CF8 E10B                       	smpsAlterNote       $0B
00094CFA E701                       	dc.b	smpsNoAttack, $01
00094CFC E10F                       	smpsAlterNote       $0F
00094CFE E701                       	dc.b	smpsNoAttack, $01
00094D00 E10E                       	smpsAlterNote       $0E
00094D02 E701                       	dc.b	smpsNoAttack, $01
00094D04 E108                       	smpsAlterNote       $08
00094D06 E701                       	dc.b	smpsNoAttack, $01
00094D08 E104                       	smpsAlterNote       $04
00094D0A E701                       	dc.b	smpsNoAttack, $01
00094D0C E105                       	smpsAlterNote       $05
00094D0E 8001                       	dc.b	nRst, $01
00094D10 E108                       	smpsAlterNote       $08
00094D12 B50A                       	dc.b	nE4, $0A
00094D14 E109                       	smpsAlterNote       $09
00094D16 B60D                       	dc.b	nF4, $0D
00094D18 E106                       	smpsAlterNote       $06
00094D1A E701                       	dc.b	smpsNoAttack, $01
00094D1C E103                       	smpsAlterNote       $03
00094D1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D22 E109                       	smpsAlterNote       $09
00094D24 E701                       	dc.b	smpsNoAttack, $01
00094D26 E10D                       	smpsAlterNote       $0D
00094D28 E701                       	dc.b	smpsNoAttack, $01
00094D2A E10C                       	smpsAlterNote       $0C
00094D2C E701                       	dc.b	smpsNoAttack, $01
00094D2E E106                       	smpsAlterNote       $06
00094D30 E701                       	dc.b	smpsNoAttack, $01
00094D32 E102                       	smpsAlterNote       $02
00094D34 E701                       	dc.b	smpsNoAttack, $01
00094D36 E106                       	smpsAlterNote       $06
00094D38 E701                       	dc.b	smpsNoAttack, $01
00094D3A E109                       	smpsAlterNote       $09
00094D3C E701                       	dc.b	smpsNoAttack, $01
00094D3E E10D                       	smpsAlterNote       $0D
00094D40 E701                       	dc.b	smpsNoAttack, $01
00094D42 E109                       	smpsAlterNote       $09
00094D44 B80D                       	dc.b	nG4, $0D
00094D46 E106                       	smpsAlterNote       $06
00094D48 E701                       	dc.b	smpsNoAttack, $01
00094D4A E103                       	smpsAlterNote       $03
00094D4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D50 E109                       	smpsAlterNote       $09
00094D52 E701                       	dc.b	smpsNoAttack, $01
00094D54 E10D                       	smpsAlterNote       $0D
00094D56 E701                       	dc.b	smpsNoAttack, $01
00094D58 E10C                       	smpsAlterNote       $0C
00094D5A E701                       	dc.b	smpsNoAttack, $01
00094D5C E106                       	smpsAlterNote       $06
00094D5E E701                       	dc.b	smpsNoAttack, $01
00094D60 E102                       	smpsAlterNote       $02
00094D62 E701                       	dc.b	smpsNoAttack, $01
00094D64 E106                       	smpsAlterNote       $06
00094D66 E701                       	dc.b	smpsNoAttack, $01
00094D68 E109                       	smpsAlterNote       $09
00094D6A E701                       	dc.b	smpsNoAttack, $01
00094D6C E10D                       	smpsAlterNote       $0D
00094D6E E701                       	dc.b	smpsNoAttack, $01
00094D70 E109                       	smpsAlterNote       $09
00094D72 E701                       	dc.b	smpsNoAttack, $01
00094D74 E103                       	smpsAlterNote       $03
00094D76 E701                       	dc.b	smpsNoAttack, $01
00094D78 E102                       	smpsAlterNote       $02
00094D7A E701                       	dc.b	smpsNoAttack, $01
00094D7C E106                       	smpsAlterNote       $06
00094D7E E701                       	dc.b	smpsNoAttack, $01
00094D80 E10C                       	smpsAlterNote       $0C
00094D82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D86 E109                       	smpsAlterNote       $09
00094D88 E701                       	dc.b	smpsNoAttack, $01
00094D8A E10B                       	smpsAlterNote       $0B
00094D8C BA0D                       	dc.b	nA4, $0D
00094D8E E108                       	smpsAlterNote       $08
00094D90 E701                       	dc.b	smpsNoAttack, $01
00094D92 E104                       	smpsAlterNote       $04
00094D94 E701                       	dc.b	smpsNoAttack, $01
00094D96 E108                       	smpsAlterNote       $08
00094D98 E701                       	dc.b	smpsNoAttack, $01
00094D9A E10B                       	smpsAlterNote       $0B
00094D9C E701                       	dc.b	smpsNoAttack, $01
00094D9E E10F                       	smpsAlterNote       $0F
00094DA0 E701                       	dc.b	smpsNoAttack, $01
00094DA2 E10B                       	smpsAlterNote       $0B
00094DA4 E701                       	dc.b	smpsNoAttack, $01
00094DA6 E105                       	smpsAlterNote       $05
00094DA8 E701                       	dc.b	smpsNoAttack, $01
00094DAA E104                       	smpsAlterNote       $04
00094DAC E701                       	dc.b	smpsNoAttack, $01
00094DAE E108                       	smpsAlterNote       $08
00094DB0 E701                       	dc.b	smpsNoAttack, $01
00094DB2 E10E                       	smpsAlterNote       $0E
00094DB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DB8 E10B                       	smpsAlterNote       $0B
00094DBA E701                       	dc.b	smpsNoAttack, $01
00094DBC E105                       	smpsAlterNote       $05
00094DBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DC2 E10B                       	smpsAlterNote       $0B
00094DC4 E701                       	dc.b	smpsNoAttack, $01
00094DC6 E10E                       	smpsAlterNote       $0E
00094DC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DCC E108                       	smpsAlterNote       $08
00094DCE E701                       	dc.b	smpsNoAttack, $01
00094DD0 E104                       	smpsAlterNote       $04
00094DD2 E701                       	dc.b	smpsNoAttack, $01
00094DD4 E105                       	smpsAlterNote       $05
00094DD6 E701                       	dc.b	smpsNoAttack, $01
00094DD8 E10B                       	smpsAlterNote       $0B
00094DDA E701                       	dc.b	smpsNoAttack, $01
00094DDC E10F                       	smpsAlterNote       $0F
00094DDE E701                       	dc.b	smpsNoAttack, $01
00094DE0 E10B                       	smpsAlterNote       $0B
00094DE2 E701                       	dc.b	smpsNoAttack, $01
00094DE4 E108                       	smpsAlterNote       $08
00094DE6 E701                       	dc.b	smpsNoAttack, $01
00094DE8 E105                       	smpsAlterNote       $05
00094DEA 8001                       	dc.b	nRst, $01
00094DEC E109                       	smpsAlterNote       $09
00094DEE B609 8001                  	dc.b	nF4, $09, nRst, $01
00094DF2 E108                       	smpsAlterNote       $08
00094DF4 B506 8001                  	dc.b	nE4, $06, nRst, $01
00094DF8 E107                       	smpsAlterNote       $07
00094DFA B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00094DFE E108                       	smpsAlterNote       $08
00094E00 B502 8001                  	dc.b	nE4, $02, nRst, $01
00094E04 E109                       	smpsAlterNote       $09
00094E06 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00094E0C E10B                       	smpsAlterNote       $0B
00094E0E BA0D                       	dc.b	nA4, $0D
00094E10 E108                       	smpsAlterNote       $08
00094E12 E701                       	dc.b	smpsNoAttack, $01
00094E14 E104                       	smpsAlterNote       $04
00094E16 E701                       	dc.b	smpsNoAttack, $01
00094E18 E108                       	smpsAlterNote       $08
00094E1A E701                       	dc.b	smpsNoAttack, $01
00094E1C E10E                       	smpsAlterNote       $0E
00094E1E E701                       	dc.b	smpsNoAttack, $01
00094E20 E10F                       	smpsAlterNote       $0F
00094E22 E701                       	dc.b	smpsNoAttack, $01
00094E24 E10B                       	smpsAlterNote       $0B
00094E26 E701                       	dc.b	smpsNoAttack, $01
00094E28 E105                       	smpsAlterNote       $05
00094E2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E2E E108                       	smpsAlterNote       $08
00094E30 E701                       	dc.b	smpsNoAttack, $01
00094E32 E10E                       	smpsAlterNote       $0E
00094E34 E701                       	dc.b	smpsNoAttack, $01
00094E36 E10F                       	smpsAlterNote       $0F
00094E38 8001                       	dc.b	nRst, $01
00094E3A E109                       	smpsAlterNote       $09
00094E3C C20D                       	dc.b	nF5, $0D
00094E3E E103                       	smpsAlterNote       $03
00094E40 E701                       	dc.b	smpsNoAttack, $01
00094E42 E102                       	smpsAlterNote       $02
00094E44 E701                       	dc.b	smpsNoAttack, $01
00094E46 E106                       	smpsAlterNote       $06
00094E48 E701                       	dc.b	smpsNoAttack, $01
00094E4A E10C                       	smpsAlterNote       $0C
00094E4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E50 E109                       	smpsAlterNote       $09
00094E52 E701                       	dc.b	smpsNoAttack, $01
00094E54 E103                       	smpsAlterNote       $03
00094E56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E5A E109                       	smpsAlterNote       $09
00094E5C E701                       	dc.b	smpsNoAttack, $01
00094E5E E10C                       	smpsAlterNote       $0C
00094E60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E64 E106                       	smpsAlterNote       $06
00094E66 E701                       	dc.b	smpsNoAttack, $01
00094E68 E102                       	smpsAlterNote       $02
00094E6A E701                       	dc.b	smpsNoAttack, $01
00094E6C E103                       	smpsAlterNote       $03
00094E6E E701                       	dc.b	smpsNoAttack, $01
00094E70 E109                       	smpsAlterNote       $09
00094E72 E701                       	dc.b	smpsNoAttack, $01
00094E74 E10D                       	smpsAlterNote       $0D
00094E76 E701                       	dc.b	smpsNoAttack, $01
00094E78 E109                       	smpsAlterNote       $09
00094E7A E701                       	dc.b	smpsNoAttack, $01
00094E7C E106                       	smpsAlterNote       $06
00094E7E E701                       	dc.b	smpsNoAttack, $01
00094E80 E102                       	smpsAlterNote       $02
00094E82 E701                       	dc.b	smpsNoAttack, $01
00094E84 E106                       	smpsAlterNote       $06
00094E86 E701                       	dc.b	smpsNoAttack, $01
00094E88 E10C                       	smpsAlterNote       $0C
00094E8A E701                       	dc.b	smpsNoAttack, $01
00094E8C E10D                       	smpsAlterNote       $0D
00094E8E E701                       	dc.b	smpsNoAttack, $01
00094E90 E109                       	smpsAlterNote       $09
00094E92 E701                       	dc.b	smpsNoAttack, $01
00094E94 E103                       	smpsAlterNote       $03
00094E96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E9A E106                       	smpsAlterNote       $06
00094E9C E701                       	dc.b	smpsNoAttack, $01
00094E9E E10C                       	smpsAlterNote       $0C
00094EA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EA4 E106                       	smpsAlterNote       $06
00094EA6 E701                       	dc.b	smpsNoAttack, $01
00094EA8 E103                       	smpsAlterNote       $03
00094EAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EAE E109                       	smpsAlterNote       $09
00094EB0 E701                       	dc.b	smpsNoAttack, $01
00094EB2 E10D                       	smpsAlterNote       $0D
00094EB4 E701                       	dc.b	smpsNoAttack, $01
00094EB6 E10C                       	smpsAlterNote       $0C
00094EB8 E701                       	dc.b	smpsNoAttack, $01
00094EBA E106                       	smpsAlterNote       $06
00094EBC E701                       	dc.b	smpsNoAttack, $01
00094EBE E102                       	smpsAlterNote       $02
00094EC0 E701                       	dc.b	smpsNoAttack, $01
00094EC2 E106                       	smpsAlterNote       $06
00094EC4 E701                       	dc.b	smpsNoAttack, $01
00094EC6 E109                       	smpsAlterNote       $09
00094EC8 E701                       	dc.b	smpsNoAttack, $01
00094ECA E10D                       	smpsAlterNote       $0D
00094ECC E701                       	dc.b	smpsNoAttack, $01
00094ECE E109                       	smpsAlterNote       $09
00094ED0 E701                       	dc.b	smpsNoAttack, $01
00094ED2 E103                       	smpsAlterNote       $03
00094ED4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094ED8 E109                       	smpsAlterNote       $09
00094EDA C206                       	dc.b	nF5, $06
00094EDC E108                       	smpsAlterNote       $08
00094EDE C10E                       	dc.b	nE5, $0E
00094EE0 E102                       	smpsAlterNote       $02
00094EE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EE6 E108                       	smpsAlterNote       $08
00094EE8 E701                       	dc.b	smpsNoAttack, $01
00094EEA E10B                       	smpsAlterNote       $0B
00094EEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EF0 E105                       	smpsAlterNote       $05
00094EF2 E701                       	dc.b	smpsNoAttack, $01
00094EF4 E101                       	smpsAlterNote       $01
00094EF6 E701                       	dc.b	smpsNoAttack, $01
00094EF8 E102                       	smpsAlterNote       $02
00094EFA E701                       	dc.b	smpsNoAttack, $01
00094EFC E108                       	smpsAlterNote       $08
00094EFE E701                       	dc.b	smpsNoAttack, $01
00094F00 E10C                       	smpsAlterNote       $0C
00094F02 E701                       	dc.b	smpsNoAttack, $01
00094F04 E107                       	smpsAlterNote       $07
00094F06 BF0E                       	dc.b	nD5, $0E
00094F08 E101                       	smpsAlterNote       $01
00094F0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F0E E107                       	smpsAlterNote       $07
00094F10 E701                       	dc.b	smpsNoAttack, $01
00094F12 E10A                       	smpsAlterNote       $0A
00094F14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F18 E104                       	smpsAlterNote       $04
00094F1A E701                       	dc.b	smpsNoAttack, $01
00094F1C E100                       	smpsAlterNote       $00
00094F1E E701                       	dc.b	smpsNoAttack, $01
00094F20 E104                       	smpsAlterNote       $04
00094F22 E701                       	dc.b	smpsNoAttack, $01
00094F24 E107                       	smpsAlterNote       $07
00094F26 E701                       	dc.b	smpsNoAttack, $01
00094F28 E10B                       	smpsAlterNote       $0B
00094F2A E701                       	dc.b	smpsNoAttack, $01
00094F2C E107                       	smpsAlterNote       $07
00094F2E E701                       	dc.b	smpsNoAttack, $01
00094F30 E101                       	smpsAlterNote       $01
00094F32 E701                       	dc.b	smpsNoAttack, $01
00094F34 E100                       	smpsAlterNote       $00
00094F36 E701                       	dc.b	smpsNoAttack, $01
00094F38 E104                       	smpsAlterNote       $04
00094F3A E701                       	dc.b	smpsNoAttack, $01
00094F3C E10A                       	smpsAlterNote       $0A
00094F3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F42 E107                       	smpsAlterNote       $07
00094F44 E701                       	dc.b	smpsNoAttack, $01
00094F46 E101                       	smpsAlterNote       $01
00094F48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F4C E107                       	smpsAlterNote       $07
00094F4E E701                       	dc.b	smpsNoAttack, $01
00094F50 E10A                       	smpsAlterNote       $0A
00094F52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F56 E104                       	smpsAlterNote       $04
00094F58 E701                       	dc.b	smpsNoAttack, $01
00094F5A E100                       	smpsAlterNote       $00
00094F5C E701                       	dc.b	smpsNoAttack, $01
00094F5E E101                       	smpsAlterNote       $01
00094F60 E701                       	dc.b	smpsNoAttack, $01
00094F62 E107                       	smpsAlterNote       $07
00094F64 E701                       	dc.b	smpsNoAttack, $01
00094F66 E10B                       	smpsAlterNote       $0B
00094F68 E701                       	dc.b	smpsNoAttack, $01
00094F6A E107                       	smpsAlterNote       $07
00094F6C E701                       	dc.b	smpsNoAttack, $01
00094F6E E104                       	smpsAlterNote       $04
00094F70 E701                       	dc.b	smpsNoAttack, $01
00094F72 E100                       	smpsAlterNote       $00
00094F74 E701                       	dc.b	smpsNoAttack, $01
00094F76 E104                       	smpsAlterNote       $04
00094F78 E701                       	dc.b	smpsNoAttack, $01
00094F7A E10A                       	smpsAlterNote       $0A
00094F7C E701                       	dc.b	smpsNoAttack, $01
00094F7E E10B                       	smpsAlterNote       $0B
00094F80 E701                       	dc.b	smpsNoAttack, $01
00094F82 E107                       	smpsAlterNote       $07
00094F84 E701                       	dc.b	smpsNoAttack, $01
00094F86 E101                       	smpsAlterNote       $01
00094F88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F8C E104                       	smpsAlterNote       $04
00094F8E E701                       	dc.b	smpsNoAttack, $01
00094F90 E10A                       	smpsAlterNote       $0A
00094F92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F96 E104                       	smpsAlterNote       $04
00094F98 E701                       	dc.b	smpsNoAttack, $01
00094F9A E101                       	smpsAlterNote       $01
00094F9C E701                       	dc.b	smpsNoAttack, $01
00094FA0 E107                       	smpsAlterNote       $07
00094FA2 E6FF                       	smpsAlterVol        $FF
00094FA4 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00094FB0 8004                       	dc.b	nRst, $04
00094FB4 E109                       	smpsAlterNote       $09
00094FB6 E602                       	smpsAlterVol        $02
00094FB8 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00094FBE E108                       	smpsAlterNote       $08
00094FC0 B502 8001                  	dc.b	nE4, $02, nRst, $01
00094FC4 E109                       	smpsAlterNote       $09
00094FC6 B60D                       	dc.b	nF4, $0D
00094FC8 E106                       	smpsAlterNote       $06
00094FCA E701                       	dc.b	smpsNoAttack, $01
00094FCC E102                       	smpsAlterNote       $02
00094FCE E701                       	dc.b	smpsNoAttack, $01
00094FD0 E106                       	smpsAlterNote       $06
00094FD2 E701                       	dc.b	smpsNoAttack, $01
00094FD4 E109                       	smpsAlterNote       $09
00094FD6 E701                       	dc.b	smpsNoAttack, $01
00094FD8 E10D                       	smpsAlterNote       $0D
00094FDA E701                       	dc.b	smpsNoAttack, $01
00094FDC E109                       	smpsAlterNote       $09
00094FDE E701                       	dc.b	smpsNoAttack, $01
00094FE0 E103                       	smpsAlterNote       $03
00094FE2 E701                       	dc.b	smpsNoAttack, $01
00094FE4 E102                       	smpsAlterNote       $02
00094FE6 E701                       	dc.b	smpsNoAttack, $01
00094FE8 E106                       	smpsAlterNote       $06
00094FEA E701                       	dc.b	smpsNoAttack, $01
00094FEC E10C                       	smpsAlterNote       $0C
00094FEE E701                       	dc.b	smpsNoAttack, $01
00094FF0 E10D                       	smpsAlterNote       $0D
00094FF2 8001                       	dc.b	nRst, $01
00094FF4 E109                       	smpsAlterNote       $09
00094FF6 B80D                       	dc.b	nG4, $0D
00094FF8 E106                       	smpsAlterNote       $06
00094FFA E701                       	dc.b	smpsNoAttack, $01
00094FFC E102                       	smpsAlterNote       $02
00094FFE E701                       	dc.b	smpsNoAttack, $01
00095000 E106                       	smpsAlterNote       $06
00095002 E701                       	dc.b	smpsNoAttack, $01
00095004 E10C                       	smpsAlterNote       $0C
00095006 E701                       	dc.b	smpsNoAttack, $01
00095008 E10D                       	smpsAlterNote       $0D
0009500A E701                       	dc.b	smpsNoAttack, $01
0009500C E109                       	smpsAlterNote       $09
0009500E E701                       	dc.b	smpsNoAttack, $01
00095010 E103                       	smpsAlterNote       $03
00095012 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095016 E106                       	smpsAlterNote       $06
00095018 E701                       	dc.b	smpsNoAttack, $01
0009501A E10C                       	smpsAlterNote       $0C
0009501C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095020 E106                       	smpsAlterNote       $06
00095022 E701                       	dc.b	smpsNoAttack, $01
00095024 E103                       	smpsAlterNote       $03
00095026 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009502A E109                       	smpsAlterNote       $09
0009502C E701                       	dc.b	smpsNoAttack, $01
0009502E E10D                       	smpsAlterNote       $0D
00095030 E701                       	dc.b	smpsNoAttack, $01
00095032 E10C                       	smpsAlterNote       $0C
00095034 E701                       	dc.b	smpsNoAttack, $01
00095036 E109                       	smpsAlterNote       $09
00095038 8001                       	dc.b	nRst, $01
0009503A E10B                       	smpsAlterNote       $0B
0009503C BA03                       	dc.b	nA4, $03
0009503E E10C                       	smpsAlterNote       $0C
00095040 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00095044 E10B                       	smpsAlterNote       $0B
00095046 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0009504C E10C                       	smpsAlterNote       $0C
0009504E C703 8001                  	dc.b	nBb5, $03, nRst, $01
00095052 E10B                       	smpsAlterNote       $0B
00095054 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0009505A E10C                       	smpsAlterNote       $0C
0009505C D303                       	dc.b	nBb6, $03
0009505E E10B                       	smpsAlterNote       $0B
00095060 D20D                       	dc.b	nA6, $0D
00095062 E108                       	smpsAlterNote       $08
00095064 E701                       	dc.b	smpsNoAttack, $01
00095066 E104                       	smpsAlterNote       $04
00095068 E701                       	dc.b	smpsNoAttack, $01
0009506A E105                       	smpsAlterNote       $05
0009506C E701                       	dc.b	smpsNoAttack, $01
0009506E E10B                       	smpsAlterNote       $0B
00095070 E701                       	dc.b	smpsNoAttack, $01
00095072 E10F                       	smpsAlterNote       $0F
00095074 E701                       	dc.b	smpsNoAttack, $01
00095076 E10B                       	smpsAlterNote       $0B
00095078 E701                       	dc.b	smpsNoAttack, $01
0009507A E108                       	smpsAlterNote       $08
0009507C E701                       	dc.b	smpsNoAttack, $01
0009507E E104                       	smpsAlterNote       $04
00095080 E701                       	dc.b	smpsNoAttack, $01
00095082 E108                       	smpsAlterNote       $08
00095084 E701                       	dc.b	smpsNoAttack, $01
00095086 E10E                       	smpsAlterNote       $0E
00095088 E701                       	dc.b	smpsNoAttack, $01
0009508A E10F                       	smpsAlterNote       $0F
0009508C E701                       	dc.b	smpsNoAttack, $01
0009508E E10B                       	smpsAlterNote       $0B
00095090 E701                       	dc.b	smpsNoAttack, $01
00095092 E105                       	smpsAlterNote       $05
00095094 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0009509A E109                       	smpsAlterNote       $09
0009509C CE07                       	dc.b	nF6, $07
0009509E E108                       	smpsAlterNote       $08
000950A0 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000950A4 E109                       	smpsAlterNote       $09
000950A6 CE03 8001                  	dc.b	nF6, $03, nRst, $01
000950AA E108                       	smpsAlterNote       $08
000950AC CC0D                       	dc.b	nEb6, $0D
000950AE E102                       	smpsAlterNote       $02
000950B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950B4 E108                       	smpsAlterNote       $08
000950B6 E701                       	dc.b	smpsNoAttack, $01
000950B8 E10B                       	smpsAlterNote       $0B
000950BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950BE E105                       	smpsAlterNote       $05
000950C0 E701                       	dc.b	smpsNoAttack, $01
000950C2 E101                       	smpsAlterNote       $01
000950C4 E701                       	dc.b	smpsNoAttack, $01
000950C6 E102                       	smpsAlterNote       $02
000950C8 E701                       	dc.b	smpsNoAttack, $01
000950CA E108                       	smpsAlterNote       $08
000950CC E701                       	dc.b	smpsNoAttack, $01
000950CE E10C                       	smpsAlterNote       $0C
000950D0 E701                       	dc.b	smpsNoAttack, $01
000950D2 E108                       	smpsAlterNote       $08
000950D4 E701                       	dc.b	smpsNoAttack, $01
000950D6 E105                       	smpsAlterNote       $05
000950D8 E701                       	dc.b	smpsNoAttack, $01
000950DA E101                       	smpsAlterNote       $01
000950DC E701                       	dc.b	smpsNoAttack, $01
000950DE E105                       	smpsAlterNote       $05
000950E0 E701                       	dc.b	smpsNoAttack, $01
000950E2 E10B                       	smpsAlterNote       $0B
000950E4 E701                       	dc.b	smpsNoAttack, $01
000950E6 E10C                       	smpsAlterNote       $0C
000950E8 E701                       	dc.b	smpsNoAttack, $01
000950EA E108                       	smpsAlterNote       $08
000950EC E701                       	dc.b	smpsNoAttack, $01
000950EE E107                       	smpsAlterNote       $07
000950F0 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000950FA E10B                       	smpsAlterNote       $0B
000950FC C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00095106 E109                       	smpsAlterNote       $09
00095108 C203                       	dc.b	nF5, $03
0009510A E108                       	smpsAlterNote       $08
0009510C C103 8001                  	dc.b	nE5, $03, nRst, $01
00095110 E109                       	smpsAlterNote       $09
00095112 C20D                       	dc.b	nF5, $0D
00095114 E108                       	smpsAlterNote       $08
00095116 C10E                       	dc.b	nE5, $0E
00095118 E107                       	smpsAlterNote       $07
0009511A BF0D                       	dc.b	nD5, $0D
0009511C E104                       	smpsAlterNote       $04
0009511E E701                       	dc.b	smpsNoAttack, $01
00095120 E100                       	smpsAlterNote       $00
00095122 E701                       	dc.b	smpsNoAttack, $01
00095124 E104                       	smpsAlterNote       $04
00095126 E701                       	dc.b	smpsNoAttack, $01
00095128 E107                       	smpsAlterNote       $07
0009512A E701                       	dc.b	smpsNoAttack, $01
0009512C E10B                       	smpsAlterNote       $0B
0009512E E701                       	dc.b	smpsNoAttack, $01
00095130 E107                       	smpsAlterNote       $07
00095132 E701                       	dc.b	smpsNoAttack, $01
00095134 E101                       	smpsAlterNote       $01
00095136 E701                       	dc.b	smpsNoAttack, $01
00095138 E100                       	smpsAlterNote       $00
0009513A E701                       	dc.b	smpsNoAttack, $01
0009513C E104                       	smpsAlterNote       $04
0009513E E701                       	dc.b	smpsNoAttack, $01
00095140 E10A                       	smpsAlterNote       $0A
00095142 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095146 E107                       	smpsAlterNote       $07
00095148 E701                       	dc.b	smpsNoAttack, $01
0009514A E101                       	smpsAlterNote       $01
0009514C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095150 E107                       	smpsAlterNote       $07
00095152 E701                       	dc.b	smpsNoAttack, $01
00095154 E10A                       	smpsAlterNote       $0A
00095156 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009515A E104                       	smpsAlterNote       $04
0009515C E701                       	dc.b	smpsNoAttack, $01
0009515E E100                       	smpsAlterNote       $00
00095160 E701                       	dc.b	smpsNoAttack, $01
00095162 E101                       	smpsAlterNote       $01
00095164 E701                       	dc.b	smpsNoAttack, $01
00095166 E107                       	smpsAlterNote       $07
00095168 E701                       	dc.b	smpsNoAttack, $01
0009516A E10B                       	smpsAlterNote       $0B
0009516C E701                       	dc.b	smpsNoAttack, $01
0009516E E107                       	smpsAlterNote       $07
00095170 E701                       	dc.b	smpsNoAttack, $01
00095172 E104                       	smpsAlterNote       $04
00095174 E701                       	dc.b	smpsNoAttack, $01
00095176 E100                       	smpsAlterNote       $00
00095178 E701                       	dc.b	smpsNoAttack, $01
0009517A E104                       	smpsAlterNote       $04
0009517C E701                       	dc.b	smpsNoAttack, $01
0009517E E10A                       	smpsAlterNote       $0A
00095180 E701                       	dc.b	smpsNoAttack, $01
00095182 E10B                       	smpsAlterNote       $0B
00095184 E701                       	dc.b	smpsNoAttack, $01
00095186 E107                       	smpsAlterNote       $07
00095188 E701                       	dc.b	smpsNoAttack, $01
0009518A E101                       	smpsAlterNote       $01
0009518C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095190 E104                       	smpsAlterNote       $04
00095192 E701                       	dc.b	smpsNoAttack, $01
00095194 E10A                       	smpsAlterNote       $0A
00095196 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009519A E104                       	smpsAlterNote       $04
0009519C E701                       	dc.b	smpsNoAttack, $01
0009519E E101                       	smpsAlterNote       $01
000951A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951A4 E107                       	smpsAlterNote       $07
000951A6 E701                       	dc.b	smpsNoAttack, $01
000951A8 E10B                       	smpsAlterNote       $0B
000951AA E701                       	dc.b	smpsNoAttack, $01
000951AC E10A                       	smpsAlterNote       $0A
000951AE E701                       	dc.b	smpsNoAttack, $01
000951B0 E104                       	smpsAlterNote       $04
000951B2 E701                       	dc.b	smpsNoAttack, $01
000951B4 E100                       	smpsAlterNote       $00
000951B6 E701                       	dc.b	smpsNoAttack, $01
000951B8 E104                       	smpsAlterNote       $04
000951BA E701                       	dc.b	smpsNoAttack, $01
000951BC E107                       	smpsAlterNote       $07
000951BE E701                       	dc.b	smpsNoAttack, $01
000951C0 E10B                       	smpsAlterNote       $0B
000951C2 E701                       	dc.b	smpsNoAttack, $01
000951C4 E107                       	smpsAlterNote       $07
000951C6 E701                       	dc.b	smpsNoAttack, $01
000951C8 E101                       	smpsAlterNote       $01
000951CA E701                       	dc.b	smpsNoAttack, $01
000951CC E100                       	smpsAlterNote       $00
000951CE E701                       	dc.b	smpsNoAttack, $01
000951D0 E104                       	smpsAlterNote       $04
000951D2 E701                       	dc.b	smpsNoAttack, $01
000951D4 E10A                       	smpsAlterNote       $0A
000951D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951DA E107                       	smpsAlterNote       $07
000951DC E701                       	dc.b	smpsNoAttack, $01
000951DE E101                       	smpsAlterNote       $01
000951E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951E4 E107                       	smpsAlterNote       $07
000951E6 E701                       	dc.b	smpsNoAttack, $01
000951E8 E10A                       	smpsAlterNote       $0A
000951EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951EE E104                       	smpsAlterNote       $04
000951F0 E701                       	dc.b	smpsNoAttack, $01
000951F2 E100                       	smpsAlterNote       $00
000951F4 E701                       	dc.b	smpsNoAttack, $01
000951F6 E101                       	smpsAlterNote       $01
000951F8 E701                       	dc.b	smpsNoAttack, $01
000951FA E107                       	smpsAlterNote       $07
000951FC E701                       	dc.b	smpsNoAttack, $01
000951FE E10B                       	smpsAlterNote       $0B
00095200 E701                       	dc.b	smpsNoAttack, $01
00095202 E107                       	smpsAlterNote       $07
00095204 E701                       	dc.b	smpsNoAttack, $01
00095206 E104                       	smpsAlterNote       $04
00095208 E701                       	dc.b	smpsNoAttack, $01
0009520A E100                       	smpsAlterNote       $00
0009520C E701                       	dc.b	smpsNoAttack, $01
0009520E E101                       	smpsAlterNote       $01
00095210 8001                       	dc.b	nRst, $01
00095212 E109                       	smpsAlterNote       $09
00095214 C20D                       	dc.b	nF5, $0D
00095216 E106                       	smpsAlterNote       $06
00095218 E701                       	dc.b	smpsNoAttack, $01
0009521A E102                       	smpsAlterNote       $02
0009521C E701                       	dc.b	smpsNoAttack, $01
0009521E E106                       	smpsAlterNote       $06
00095220 E701                       	dc.b	smpsNoAttack, $01
00095222 E10C                       	smpsAlterNote       $0C
00095224 E701                       	dc.b	smpsNoAttack, $01
00095226 E10D                       	smpsAlterNote       $0D
00095228 E701                       	dc.b	smpsNoAttack, $01
0009522A E109                       	smpsAlterNote       $09
0009522C E701                       	dc.b	smpsNoAttack, $01
0009522E E103                       	smpsAlterNote       $03
00095230 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095234 E106                       	smpsAlterNote       $06
00095236 E701                       	dc.b	smpsNoAttack, $01
00095238 E10C                       	smpsAlterNote       $0C
0009523A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009523E E106                       	smpsAlterNote       $06
00095240 E701                       	dc.b	smpsNoAttack, $01
00095242 E103                       	smpsAlterNote       $03
00095244 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095248 E109                       	smpsAlterNote       $09
0009524A E701                       	dc.b	smpsNoAttack, $01
0009524C E10D                       	smpsAlterNote       $0D
0009524E E701                       	dc.b	smpsNoAttack, $01
00095250 E10C                       	smpsAlterNote       $0C
00095252 E701                       	dc.b	smpsNoAttack, $01
00095254 E109                       	smpsAlterNote       $09
00095256 8001                       	dc.b	nRst, $01
00095258 E108                       	smpsAlterNote       $08
0009525A C10D                       	dc.b	nE5, $0D
0009525C E109                       	smpsAlterNote       $09
0009525E C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00095262 E108                       	smpsAlterNote       $08
00095264 C10D                       	dc.b	nE5, $0D
00095266 E102                       	smpsAlterNote       $02
00095268 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009526C E105                       	smpsAlterNote       $05
0009526E E701                       	dc.b	smpsNoAttack, $01
00095270 E108                       	smpsAlterNote       $08
00095272 8001                       	dc.b	nRst, $01
00095274 E107                       	smpsAlterNote       $07
00095276 BF0D                       	dc.b	nD5, $0D
00095278 E108                       	smpsAlterNote       $08
0009527A C107                       	dc.b	nE5, $07
0009527C E109                       	smpsAlterNote       $09
0009527E C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00095284 E10B                       	smpsAlterNote       $0B
00095286 C603                       	dc.b	nA5, $03
00095288 E10C                       	smpsAlterNote       $0C
0009528A C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00095290 E10B                       	smpsAlterNote       $0B
00095292 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00095298 E109                       	smpsAlterNote       $09
0009529A D003                       	dc.b	nG6, $03
0009529C E108                       	smpsAlterNote       $08
0009529E CD02 8001                  	dc.b	nE6, $02, nRst, $01
000952A2 E10B                       	smpsAlterNote       $0B
000952A4 C601 8001                  	dc.b	nA5, $01, nRst, $01
000952A8 E108                       	smpsAlterNote       $08
000952AA C102                       	dc.b	nE5, $02
000952AE E10C                       	smpsAlterNote       $0C
000952B0 E6FB                       	smpsAlterVol        $FB
000952B2 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000952BE 8001                       	dc.b	nRst, $01
000952C0 E10B                       	smpsAlterNote       $0B
000952C2 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000952CA E107                       	smpsAlterNote       $07
000952CC A706 8001                  	dc.b	nD3, $06, nRst, $01
000952D0 E10B                       	smpsAlterNote       $0B
000952D2 A203                       	dc.b	nA2, $03
000952D4 E109                       	smpsAlterNote       $09
000952D6 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000952DA E108                       	smpsAlterNote       $08
000952DC A906                       	dc.b	nE3, $06
000952DE E107                       	smpsAlterNote       $07
000952E0 A703 8001                  	dc.b	nD3, $03, nRst, $01
000952E4 E106                       	smpsAlterNote       $06
000952E6 A503                       	dc.b	nC3, $03
000952E8 E10C                       	smpsAlterNote       $0C
000952EA A303 8001                  	dc.b	nBb2, $03, nRst, $01
000952EE E10B                       	smpsAlterNote       $0B
000952F0 A203 8004                  	dc.b	nA2, $03, nRst, $04
000952F4 E11B                       	smpsAlterNote       $1B
000952F6 C401                       	dc.b	nG5, $01
000952F8 E1F4                       	smpsAlterNote       $F4
000952FA E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000952FD E106                       	smpsAlterNote       $06
000952FF E701                       	dc.b	smpsNoAttack, $01
00095301 E10F                       	smpsAlterNote       $0F
00095303 E701                       	dc.b	smpsNoAttack, $01
00095305 E1E4                       	smpsAlterNote       $E4
00095307 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0009530A E1F6                       	smpsAlterNote       $F6
0009530C E701                       	dc.b	smpsNoAttack, $01
0009530E E108                       	smpsAlterNote       $08
00095310 E701                       	dc.b	smpsNoAttack, $01
00095312 E10B                       	smpsAlterNote       $0B
00095314 E706                       	dc.b	smpsNoAttack, $06
00095316 E105                       	smpsAlterNote       $05
00095318 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009531C E108                       	smpsAlterNote       $08
0009531E E701                       	dc.b	smpsNoAttack, $01
00095320 E10E                       	smpsAlterNote       $0E
00095322 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095326 E108                       	smpsAlterNote       $08
00095328 E701                       	dc.b	smpsNoAttack, $01
0009532A E105                       	smpsAlterNote       $05
0009532C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095330 E10B                       	smpsAlterNote       $0B
00095332 E701                       	dc.b	smpsNoAttack, $01
00095334 E10F                       	smpsAlterNote       $0F
00095336 E701                       	dc.b	smpsNoAttack, $01
00095338 E10E                       	smpsAlterNote       $0E
0009533A E701                       	dc.b	smpsNoAttack, $01
0009533C E108                       	smpsAlterNote       $08
0009533E E701                       	dc.b	smpsNoAttack, $01
00095340 E104                       	smpsAlterNote       $04
00095342 E701                       	dc.b	smpsNoAttack, $01
00095344 E108                       	smpsAlterNote       $08
00095346 E701                       	dc.b	smpsNoAttack, $01
00095348 E10B                       	smpsAlterNote       $0B
0009534A E701                       	dc.b	smpsNoAttack, $01
0009534C E10F                       	smpsAlterNote       $0F
0009534E E701                       	dc.b	smpsNoAttack, $01
00095350 E10B                       	smpsAlterNote       $0B
00095352 E701                       	dc.b	smpsNoAttack, $01
00095354 E105                       	smpsAlterNote       $05
00095356 E701                       	dc.b	smpsNoAttack, $01
00095358 E104                       	smpsAlterNote       $04
0009535A E701                       	dc.b	smpsNoAttack, $01
0009535C E108                       	smpsAlterNote       $08
0009535E E701                       	dc.b	smpsNoAttack, $01
00095360 E10E                       	smpsAlterNote       $0E
00095362 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095366 E10B                       	smpsAlterNote       $0B
00095368 E701                       	dc.b	smpsNoAttack, $01
0009536A E105                       	smpsAlterNote       $05
0009536C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095370 E10B                       	smpsAlterNote       $0B
00095372 E701                       	dc.b	smpsNoAttack, $01
00095374 E10E                       	smpsAlterNote       $0E
00095376 E701                       	dc.b	smpsNoAttack, $01
00095378 E10F                       	smpsAlterNote       $0F
0009537A 8001                       	dc.b	nRst, $01
0009537C E109                       	smpsAlterNote       $09
0009537E C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00095384 E108                       	smpsAlterNote       $08
00095386 C101 8001                  	dc.b	nE5, $01, nRst, $01
0009538A E109                       	smpsAlterNote       $09
0009538C C202                       	dc.b	nF5, $02
0009538E E108                       	smpsAlterNote       $08
00095390 C102                       	dc.b	nE5, $02
00095392 E107                       	smpsAlterNote       $07
00095394 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00095398 E108                       	smpsAlterNote       $08
0009539A C101 8001                  	dc.b	nE5, $01, nRst, $01
0009539E E107                       	smpsAlterNote       $07
000953A0 BF02                       	dc.b	nD5, $02
000953A2 E106                       	smpsAlterNote       $06
000953A4 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000953A8 E107                       	smpsAlterNote       $07
000953AA BF01 8001                  	dc.b	nD5, $01, nRst, $01
000953AE E106                       	smpsAlterNote       $06
000953B0 BD02                       	dc.b	nC5, $02
000953B2 E10C                       	smpsAlterNote       $0C
000953B4 BB02                       	dc.b	nBb4, $02
000953B6 E106                       	smpsAlterNote       $06
000953B8 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000953BC E10C                       	smpsAlterNote       $0C
000953BE BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000953C2 E10B                       	smpsAlterNote       $0B
000953C4 BA02                       	dc.b	nA4, $02
000953C6 E10C                       	smpsAlterNote       $0C
000953C8 BB02                       	dc.b	nBb4, $02
000953CA E10B                       	smpsAlterNote       $0B
000953CC BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000953D6 E108                       	smpsAlterNote       $08
000953D8 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000953E0 E107                       	smpsAlterNote       $07
000953E2 BE02                       	dc.b	nCs5, $02
000953E4 E10B                       	smpsAlterNote       $0B
000953E6 BA02                       	dc.b	nA4, $02
000953E8 E109                       	smpsAlterNote       $09
000953EA B802 8001                  	dc.b	nG4, $02, nRst, $01
000953EE E108                       	smpsAlterNote       $08
000953F0 B501 8001                  	dc.b	nE4, $01, nRst, $01
000953F4 E10B                       	smpsAlterNote       $0B
000953F6 AE02                       	dc.b	nA3, $02
000953F8 E10C                       	smpsAlterNote       $0C
000953FA A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00095406 E10B                       	smpsAlterNote       $0B
00095408 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00095410 E107                       	smpsAlterNote       $07
00095412 A706 8001                  	dc.b	nD3, $06, nRst, $01
00095416 E10B                       	smpsAlterNote       $0B
00095418 A203                       	dc.b	nA2, $03
0009541A E109                       	smpsAlterNote       $09
0009541C AA03 8001                  	dc.b	nF3, $03, nRst, $01
00095420 E108                       	smpsAlterNote       $08
00095422 A906 8001                  	dc.b	nE3, $06, nRst, $01
00095426 E107                       	smpsAlterNote       $07
00095428 A702 8001                  	dc.b	nD3, $02, nRst, $01
0009542C E106                       	smpsAlterNote       $06
0009542E A503                       	dc.b	nC3, $03
00095430 E10C                       	smpsAlterNote       $0C
00095432 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095438 E107                       	smpsAlterNote       $07
0009543A B20D                       	dc.b	nCs4, $0D
0009543C E104                       	smpsAlterNote       $04
0009543E E701                       	dc.b	smpsNoAttack, $01
00095440 E100                       	smpsAlterNote       $00
00095442 E701                       	dc.b	smpsNoAttack, $01
00095444 E104                       	smpsAlterNote       $04
00095446 E701                       	dc.b	smpsNoAttack, $01
00095448 E10A                       	smpsAlterNote       $0A
0009544A E701                       	dc.b	smpsNoAttack, $01
0009544C E10B                       	smpsAlterNote       $0B
0009544E E701                       	dc.b	smpsNoAttack, $01
00095450 E107                       	smpsAlterNote       $07
00095452 E701                       	dc.b	smpsNoAttack, $01
00095454 E101                       	smpsAlterNote       $01
00095456 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009545A E104                       	smpsAlterNote       $04
0009545C E701                       	dc.b	smpsNoAttack, $01
0009545E E10A                       	smpsAlterNote       $0A
00095460 E701                       	dc.b	smpsNoAttack, $01
00095462 E10B                       	smpsAlterNote       $0B
00095464 8001                       	dc.b	nRst, $01
00095466 E107                       	smpsAlterNote       $07
00095468 B30D                       	dc.b	nD4, $0D
0009546A E104                       	smpsAlterNote       $04
0009546C E701                       	dc.b	smpsNoAttack, $01
0009546E E100                       	smpsAlterNote       $00
00095470 E701                       	dc.b	smpsNoAttack, $01
00095472 E104                       	smpsAlterNote       $04
00095474 E701                       	dc.b	smpsNoAttack, $01
00095476 E10A                       	smpsAlterNote       $0A
00095478 E701                       	dc.b	smpsNoAttack, $01
0009547A E10B                       	smpsAlterNote       $0B
0009547C E701                       	dc.b	smpsNoAttack, $01
0009547E E107                       	smpsAlterNote       $07
00095480 E701                       	dc.b	smpsNoAttack, $01
00095482 E101                       	smpsAlterNote       $01
00095484 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095488 E104                       	smpsAlterNote       $04
0009548A E701                       	dc.b	smpsNoAttack, $01
0009548C E10A                       	smpsAlterNote       $0A
0009548E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095492 E104                       	smpsAlterNote       $04
00095494 E701                       	dc.b	smpsNoAttack, $01
00095496 E101                       	smpsAlterNote       $01
00095498 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009549C E107                       	smpsAlterNote       $07
0009549E E701                       	dc.b	smpsNoAttack, $01
000954A0 E10B                       	smpsAlterNote       $0B
000954A2 E701                       	dc.b	smpsNoAttack, $01
000954A4 E10A                       	smpsAlterNote       $0A
000954A6 E701                       	dc.b	smpsNoAttack, $01
000954A8 E107                       	smpsAlterNote       $07
000954AA 8001                       	dc.b	nRst, $01
000954AC E108                       	smpsAlterNote       $08
000954AE B50D                       	dc.b	nE4, $0D
000954B0 E102                       	smpsAlterNote       $02
000954B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954B6 E105                       	smpsAlterNote       $05
000954B8 E701                       	dc.b	smpsNoAttack, $01
000954BA E10B                       	smpsAlterNote       $0B
000954BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954C0 E105                       	smpsAlterNote       $05
000954C2 E701                       	dc.b	smpsNoAttack, $01
000954C4 E102                       	smpsAlterNote       $02
000954C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954CA E108                       	smpsAlterNote       $08
000954CC E701                       	dc.b	smpsNoAttack, $01
000954CE E10C                       	smpsAlterNote       $0C
000954D0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000954D4 E107                       	smpsAlterNote       $07
000954D6 B30D                       	dc.b	nD4, $0D
000954D8 E101                       	smpsAlterNote       $01
000954DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954DE E104                       	smpsAlterNote       $04
000954E0 E701                       	dc.b	smpsNoAttack, $01
000954E2 E10A                       	smpsAlterNote       $0A
000954E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954E8 E104                       	smpsAlterNote       $04
000954EA E701                       	dc.b	smpsNoAttack, $01
000954EC E101                       	smpsAlterNote       $01
000954EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954F2 E107                       	smpsAlterNote       $07
000954F4 E701                       	dc.b	smpsNoAttack, $01
000954F6 E10B                       	smpsAlterNote       $0B
000954F8 E701                       	dc.b	smpsNoAttack, $01
000954FA E10A                       	smpsAlterNote       $0A
000954FC E701                       	dc.b	smpsNoAttack, $01
000954FE E104                       	smpsAlterNote       $04
00095500 E701                       	dc.b	smpsNoAttack, $01
00095502 E100                       	smpsAlterNote       $00
00095504 E701                       	dc.b	smpsNoAttack, $01
00095506 E104                       	smpsAlterNote       $04
00095508 E701                       	dc.b	smpsNoAttack, $01
0009550A E107                       	smpsAlterNote       $07
0009550C E701                       	dc.b	smpsNoAttack, $01
0009550E E10B                       	smpsAlterNote       $0B
00095510 E701                       	dc.b	smpsNoAttack, $01
00095512 E107                       	smpsAlterNote       $07
00095514 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00095518 E101                       	smpsAlterNote       $01
0009551A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009551E E107                       	smpsAlterNote       $07
00095520 E701                       	dc.b	smpsNoAttack, $01
00095522 E10A                       	smpsAlterNote       $0A
00095524 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095528 E104                       	smpsAlterNote       $04
0009552A E701                       	dc.b	smpsNoAttack, $01
0009552C E100                       	smpsAlterNote       $00
0009552E E701                       	dc.b	smpsNoAttack, $01
00095530 E101                       	smpsAlterNote       $01
00095532 E701                       	dc.b	smpsNoAttack, $01
00095534 E107                       	smpsAlterNote       $07
00095536 E701                       	dc.b	smpsNoAttack, $01
00095538 E10B                       	smpsAlterNote       $0B
0009553A E701                       	dc.b	smpsNoAttack, $01
0009553C E107                       	smpsAlterNote       $07
0009553E B30E                       	dc.b	nD4, $0E
00095540 E101                       	smpsAlterNote       $01
00095542 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095546 E107                       	smpsAlterNote       $07
00095548 E701                       	dc.b	smpsNoAttack, $01
0009554A E10A                       	smpsAlterNote       $0A
0009554C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095550 E104                       	smpsAlterNote       $04
00095552 E701                       	dc.b	smpsNoAttack, $01
00095554 E100                       	smpsAlterNote       $00
00095556 E701                       	dc.b	smpsNoAttack, $01
00095558 E101                       	smpsAlterNote       $01
0009555A E701                       	dc.b	smpsNoAttack, $01
0009555C E107                       	smpsAlterNote       $07
0009555E E701                       	dc.b	smpsNoAttack, $01
00095560 E10B                       	smpsAlterNote       $0B
00095562 E701                       	dc.b	smpsNoAttack, $01
00095564 E107                       	smpsAlterNote       $07
00095566 E701                       	dc.b	smpsNoAttack, $01
00095568 E104                       	smpsAlterNote       $04
0009556A E701                       	dc.b	smpsNoAttack, $01
0009556C E100                       	smpsAlterNote       $00
0009556E E701                       	dc.b	smpsNoAttack, $01
00095570 E104                       	smpsAlterNote       $04
00095572 E701                       	dc.b	smpsNoAttack, $01
00095574 E10A                       	smpsAlterNote       $0A
00095576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009557A E107                       	smpsAlterNote       $07
0009557C E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00095580 E104                       	smpsAlterNote       $04
00095582 E701                       	dc.b	smpsNoAttack, $01
00095584 E100                       	smpsAlterNote       $00
00095586 E701                       	dc.b	smpsNoAttack, $01
00095588 E101                       	smpsAlterNote       $01
0009558A E701                       	dc.b	smpsNoAttack, $01
0009558C E107                       	smpsAlterNote       $07
0009558E E701                       	dc.b	smpsNoAttack, $01
00095590 E10B                       	smpsAlterNote       $0B
00095592 E701                       	dc.b	smpsNoAttack, $01
00095594 E107                       	smpsAlterNote       $07
00095596 E701                       	dc.b	smpsNoAttack, $01
00095598 E104                       	smpsAlterNote       $04
0009559A E701                       	dc.b	smpsNoAttack, $01
0009559C E100                       	smpsAlterNote       $00
0009559E E701                       	dc.b	smpsNoAttack, $01
000955A0 E104                       	smpsAlterNote       $04
000955A2 E701                       	dc.b	smpsNoAttack, $01
000955A4 E10A                       	smpsAlterNote       $0A
000955A6 E701                       	dc.b	smpsNoAttack, $01
000955A8 E10B                       	smpsAlterNote       $0B
000955AA E701                       	dc.b	smpsNoAttack, $01
000955AE E6FF                       	smpsAlterVol        $FF
000955B0 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
000955BC 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000955C4 E109                       	smpsAlterNote       $09
000955C6 E601                       	smpsAlterVol        $01
000955C8 B60D                       	dc.b	nF4, $0D
000955CA E106                       	smpsAlterNote       $06
000955CC E701                       	dc.b	smpsNoAttack, $01
000955CE E102                       	smpsAlterNote       $02
000955D0 E701                       	dc.b	smpsNoAttack, $01
000955D2 E106                       	smpsAlterNote       $06
000955D4 E701                       	dc.b	smpsNoAttack, $01
000955D6 E109                       	smpsAlterNote       $09
000955D8 E701                       	dc.b	smpsNoAttack, $01
000955DA E10D                       	smpsAlterNote       $0D
000955DC E701                       	dc.b	smpsNoAttack, $01
000955DE E109                       	smpsAlterNote       $09
000955E0 E701                       	dc.b	smpsNoAttack, $01
000955E2 E103                       	smpsAlterNote       $03
000955E4 E701                       	dc.b	smpsNoAttack, $01
000955E6 E102                       	smpsAlterNote       $02
000955E8 E701                       	dc.b	smpsNoAttack, $01
000955EA E106                       	smpsAlterNote       $06
000955EC E701                       	dc.b	smpsNoAttack, $01
000955EE E10C                       	smpsAlterNote       $0C
000955F0 E701                       	dc.b	smpsNoAttack, $01
000955F2 E10D                       	smpsAlterNote       $0D
000955F4 8001                       	dc.b	nRst, $01
000955F6 E109                       	smpsAlterNote       $09
000955F8 B80D                       	dc.b	nG4, $0D
000955FA E106                       	smpsAlterNote       $06
000955FC E701                       	dc.b	smpsNoAttack, $01
000955FE E102                       	smpsAlterNote       $02
00095600 E701                       	dc.b	smpsNoAttack, $01
00095602 E106                       	smpsAlterNote       $06
00095604 E701                       	dc.b	smpsNoAttack, $01
00095606 E109                       	smpsAlterNote       $09
00095608 E701                       	dc.b	smpsNoAttack, $01
0009560A E10D                       	smpsAlterNote       $0D
0009560C E701                       	dc.b	smpsNoAttack, $01
0009560E E109                       	smpsAlterNote       $09
00095610 E701                       	dc.b	smpsNoAttack, $01
00095612 E103                       	smpsAlterNote       $03
00095614 E701                       	dc.b	smpsNoAttack, $01
00095616 E102                       	smpsAlterNote       $02
00095618 E701                       	dc.b	smpsNoAttack, $01
0009561A E106                       	smpsAlterNote       $06
0009561C E701                       	dc.b	smpsNoAttack, $01
0009561E E10C                       	smpsAlterNote       $0C
00095620 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095624 E106                       	smpsAlterNote       $06
00095626 E701                       	dc.b	smpsNoAttack, $01
00095628 E103                       	smpsAlterNote       $03
0009562A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009562E E109                       	smpsAlterNote       $09
00095630 E701                       	dc.b	smpsNoAttack, $01
00095632 E10D                       	smpsAlterNote       $0D
00095634 E701                       	dc.b	smpsNoAttack, $01
00095636 E10C                       	smpsAlterNote       $0C
00095638 E701                       	dc.b	smpsNoAttack, $01
0009563A E109                       	smpsAlterNote       $09
0009563C 8001                       	dc.b	nRst, $01
0009563E E10B                       	smpsAlterNote       $0B
00095640 BA0D                       	dc.b	nA4, $0D
00095642 E105                       	smpsAlterNote       $05
00095644 E701                       	dc.b	smpsNoAttack, $01
00095646 E104                       	smpsAlterNote       $04
00095648 E701                       	dc.b	smpsNoAttack, $01
0009564A E108                       	smpsAlterNote       $08
0009564C E701                       	dc.b	smpsNoAttack, $01
0009564E E10E                       	smpsAlterNote       $0E
00095650 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095654 E10B                       	smpsAlterNote       $0B
00095656 E701                       	dc.b	smpsNoAttack, $01
00095658 E105                       	smpsAlterNote       $05
0009565A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009565E E10B                       	smpsAlterNote       $0B
00095660 E701                       	dc.b	smpsNoAttack, $01
00095662 E10E                       	smpsAlterNote       $0E
00095664 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095668 E108                       	smpsAlterNote       $08
0009566A E701                       	dc.b	smpsNoAttack, $01
0009566C E104                       	smpsAlterNote       $04
0009566E E701                       	dc.b	smpsNoAttack, $01
00095670 E105                       	smpsAlterNote       $05
00095672 E701                       	dc.b	smpsNoAttack, $01
00095674 E10B                       	smpsAlterNote       $0B
00095676 E701                       	dc.b	smpsNoAttack, $01
00095678 E10F                       	smpsAlterNote       $0F
0009567A E701                       	dc.b	smpsNoAttack, $01
0009567C E10B                       	smpsAlterNote       $0B
0009567E E701                       	dc.b	smpsNoAttack, $01
00095680 E108                       	smpsAlterNote       $08
00095682 E701                       	dc.b	smpsNoAttack, $01
00095684 E104                       	smpsAlterNote       $04
00095686 E701                       	dc.b	smpsNoAttack, $01
00095688 E108                       	smpsAlterNote       $08
0009568A E701                       	dc.b	smpsNoAttack, $01
0009568C E10E                       	smpsAlterNote       $0E
0009568E E701                       	dc.b	smpsNoAttack, $01
00095690 E10F                       	smpsAlterNote       $0F
00095692 E701                       	dc.b	smpsNoAttack, $01
00095694 E10B                       	smpsAlterNote       $0B
00095696 E701                       	dc.b	smpsNoAttack, $01
00095698 E105                       	smpsAlterNote       $05
0009569A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009569E E108                       	smpsAlterNote       $08
000956A0 E701                       	dc.b	smpsNoAttack, $01
000956A2 E10E                       	smpsAlterNote       $0E
000956A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956A8 E108                       	smpsAlterNote       $08
000956AA E701                       	dc.b	smpsNoAttack, $01
000956AC E105                       	smpsAlterNote       $05
000956AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956B2 E108                       	smpsAlterNote       $08
000956B4 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
000956B8 E109                       	smpsAlterNote       $09
000956BA B60D                       	dc.b	nF4, $0D
000956BC E103                       	smpsAlterNote       $03
000956BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956C2 E106                       	smpsAlterNote       $06
000956C4 E701                       	dc.b	smpsNoAttack, $01
000956C6 E10C                       	smpsAlterNote       $0C
000956C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956CC E106                       	smpsAlterNote       $06
000956CE E701                       	dc.b	smpsNoAttack, $01
000956D0 E103                       	smpsAlterNote       $03
000956D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956D6 E109                       	smpsAlterNote       $09
000956D8 E701                       	dc.b	smpsNoAttack, $01
000956DA E10D                       	smpsAlterNote       $0D
000956DC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000956E0 E109                       	smpsAlterNote       $09
000956E2 B80D                       	dc.b	nG4, $0D
000956E4 E103                       	smpsAlterNote       $03
000956E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956EA E109                       	smpsAlterNote       $09
000956EC E701                       	dc.b	smpsNoAttack, $01
000956EE E10C                       	smpsAlterNote       $0C
000956F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956F4 E106                       	smpsAlterNote       $06
000956F6 E701                       	dc.b	smpsNoAttack, $01
000956F8 E102                       	smpsAlterNote       $02
000956FA E701                       	dc.b	smpsNoAttack, $01
000956FC E103                       	smpsAlterNote       $03
000956FE E701                       	dc.b	smpsNoAttack, $01
00095700 E109                       	smpsAlterNote       $09
00095702 E701                       	dc.b	smpsNoAttack, $01
00095704 E10D                       	smpsAlterNote       $0D
00095706 E701                       	dc.b	smpsNoAttack, $01
00095708 E109                       	smpsAlterNote       $09
0009570A E701                       	dc.b	smpsNoAttack, $01
0009570C E106                       	smpsAlterNote       $06
0009570E E701                       	dc.b	smpsNoAttack, $01
00095710 E102                       	smpsAlterNote       $02
00095712 E701                       	dc.b	smpsNoAttack, $01
00095714 E106                       	smpsAlterNote       $06
00095716 E701                       	dc.b	smpsNoAttack, $01
00095718 E10C                       	smpsAlterNote       $0C
0009571A E701                       	dc.b	smpsNoAttack, $01
0009571C E10D                       	smpsAlterNote       $0D
0009571E E701                       	dc.b	smpsNoAttack, $01
00095720 E109                       	smpsAlterNote       $09
00095722 E701                       	dc.b	smpsNoAttack, $01
00095724 E10B                       	smpsAlterNote       $0B
00095726 BA0D                       	dc.b	nA4, $0D
00095728 E108                       	smpsAlterNote       $08
0009572A E701                       	dc.b	smpsNoAttack, $01
0009572C E105                       	smpsAlterNote       $05
0009572E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095732 E10B                       	smpsAlterNote       $0B
00095734 E701                       	dc.b	smpsNoAttack, $01
00095736 E10F                       	smpsAlterNote       $0F
00095738 E701                       	dc.b	smpsNoAttack, $01
0009573A E10E                       	smpsAlterNote       $0E
0009573C E701                       	dc.b	smpsNoAttack, $01
0009573E E108                       	smpsAlterNote       $08
00095740 E701                       	dc.b	smpsNoAttack, $01
00095742 E104                       	smpsAlterNote       $04
00095744 E701                       	dc.b	smpsNoAttack, $01
00095746 E108                       	smpsAlterNote       $08
00095748 E701                       	dc.b	smpsNoAttack, $01
0009574A E10B                       	smpsAlterNote       $0B
0009574C E701                       	dc.b	smpsNoAttack, $01
0009574E E10F                       	smpsAlterNote       $0F
00095750 E701                       	dc.b	smpsNoAttack, $01
00095752 E10B                       	smpsAlterNote       $0B
00095754 E701                       	dc.b	smpsNoAttack, $01
00095756 E105                       	smpsAlterNote       $05
00095758 E701                       	dc.b	smpsNoAttack, $01
0009575A E104                       	smpsAlterNote       $04
0009575C E701                       	dc.b	smpsNoAttack, $01
0009575E E108                       	smpsAlterNote       $08
00095760 E701                       	dc.b	smpsNoAttack, $01
00095762 E10E                       	smpsAlterNote       $0E
00095764 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095768 E10B                       	smpsAlterNote       $0B
0009576A E701                       	dc.b	smpsNoAttack, $01
0009576C E105                       	smpsAlterNote       $05
0009576E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095772 E10B                       	smpsAlterNote       $0B
00095774 E701                       	dc.b	smpsNoAttack, $01
00095776 E10E                       	smpsAlterNote       $0E
00095778 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009577C E108                       	smpsAlterNote       $08
0009577E E701                       	dc.b	smpsNoAttack, $01
00095780 E105                       	smpsAlterNote       $05
00095782 8001                       	dc.b	nRst, $01
00095784 E109                       	smpsAlterNote       $09
00095786 B60A                       	dc.b	nF4, $0A
00095788 E108                       	smpsAlterNote       $08
0009578A B507                       	dc.b	nE4, $07
0009578C E107                       	smpsAlterNote       $07
0009578E B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00095792 E108                       	smpsAlterNote       $08
00095794 B503                       	dc.b	nE4, $03
00095796 E109                       	smpsAlterNote       $09
00095798 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
000957A0 E10B                       	smpsAlterNote       $0B
000957A2 BA0D                       	dc.b	nA4, $0D
000957A4 E108                       	smpsAlterNote       $08
000957A6 E701                       	dc.b	smpsNoAttack, $01
000957A8 E104                       	smpsAlterNote       $04
000957AA E701                       	dc.b	smpsNoAttack, $01
000957AC E108                       	smpsAlterNote       $08
000957AE E701                       	dc.b	smpsNoAttack, $01
000957B0 E10B                       	smpsAlterNote       $0B
000957B2 E701                       	dc.b	smpsNoAttack, $01
000957B4 E10F                       	smpsAlterNote       $0F
000957B6 E701                       	dc.b	smpsNoAttack, $01
000957B8 E10B                       	smpsAlterNote       $0B
000957BA E701                       	dc.b	smpsNoAttack, $01
000957BC E105                       	smpsAlterNote       $05
000957BE E701                       	dc.b	smpsNoAttack, $01
000957C0 E104                       	smpsAlterNote       $04
000957C2 E701                       	dc.b	smpsNoAttack, $01
000957C4 E108                       	smpsAlterNote       $08
000957C6 E701                       	dc.b	smpsNoAttack, $01
000957C8 E10E                       	smpsAlterNote       $0E
000957CA E701                       	dc.b	smpsNoAttack, $01
000957CC E10F                       	smpsAlterNote       $0F
000957CE 8001                       	dc.b	nRst, $01
000957D0 E109                       	smpsAlterNote       $09
000957D2 C20D                       	dc.b	nF5, $0D
000957D4 E106                       	smpsAlterNote       $06
000957D6 E701                       	dc.b	smpsNoAttack, $01
000957D8 E102                       	smpsAlterNote       $02
000957DA E701                       	dc.b	smpsNoAttack, $01
000957DC E106                       	smpsAlterNote       $06
000957DE E701                       	dc.b	smpsNoAttack, $01
000957E0 E109                       	smpsAlterNote       $09
000957E2 E701                       	dc.b	smpsNoAttack, $01
000957E4 E10D                       	smpsAlterNote       $0D
000957E6 E701                       	dc.b	smpsNoAttack, $01
000957E8 E109                       	smpsAlterNote       $09
000957EA E701                       	dc.b	smpsNoAttack, $01
000957EC E103                       	smpsAlterNote       $03
000957EE E701                       	dc.b	smpsNoAttack, $01
000957F0 E102                       	smpsAlterNote       $02
000957F2 E701                       	dc.b	smpsNoAttack, $01
000957F4 E106                       	smpsAlterNote       $06
000957F6 E701                       	dc.b	smpsNoAttack, $01
000957F8 E10C                       	smpsAlterNote       $0C
000957FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957FE E109                       	smpsAlterNote       $09
00095800 E701                       	dc.b	smpsNoAttack, $01
00095802 E103                       	smpsAlterNote       $03
00095804 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095808 E109                       	smpsAlterNote       $09
0009580A E701                       	dc.b	smpsNoAttack, $01
0009580C E10C                       	smpsAlterNote       $0C
0009580E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095812 E106                       	smpsAlterNote       $06
00095814 E701                       	dc.b	smpsNoAttack, $01
00095816 E102                       	smpsAlterNote       $02
00095818 E701                       	dc.b	smpsNoAttack, $01
0009581A E103                       	smpsAlterNote       $03
0009581C E701                       	dc.b	smpsNoAttack, $01
0009581E E109                       	smpsAlterNote       $09
00095820 E701                       	dc.b	smpsNoAttack, $01
00095822 E10D                       	smpsAlterNote       $0D
00095824 E701                       	dc.b	smpsNoAttack, $01
00095826 E109                       	smpsAlterNote       $09
00095828 E701                       	dc.b	smpsNoAttack, $01
0009582A E106                       	smpsAlterNote       $06
0009582C E701                       	dc.b	smpsNoAttack, $01
0009582E E102                       	smpsAlterNote       $02
00095830 E701                       	dc.b	smpsNoAttack, $01
00095832 E106                       	smpsAlterNote       $06
00095834 E701                       	dc.b	smpsNoAttack, $01
00095836 E10C                       	smpsAlterNote       $0C
00095838 E701                       	dc.b	smpsNoAttack, $01
0009583A E10D                       	smpsAlterNote       $0D
0009583C E701                       	dc.b	smpsNoAttack, $01
0009583E E109                       	smpsAlterNote       $09
00095840 E701                       	dc.b	smpsNoAttack, $01
00095842 E103                       	smpsAlterNote       $03
00095844 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095848 E106                       	smpsAlterNote       $06
0009584A E701                       	dc.b	smpsNoAttack, $01
0009584C E10C                       	smpsAlterNote       $0C
0009584E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095852 E106                       	smpsAlterNote       $06
00095854 E701                       	dc.b	smpsNoAttack, $01
00095856 E103                       	smpsAlterNote       $03
00095858 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009585C E109                       	smpsAlterNote       $09
0009585E E701                       	dc.b	smpsNoAttack, $01
00095860 E10D                       	smpsAlterNote       $0D
00095862 E701                       	dc.b	smpsNoAttack, $01
00095864 E10C                       	smpsAlterNote       $0C
00095866 E701                       	dc.b	smpsNoAttack, $01
00095868 E106                       	smpsAlterNote       $06
0009586A E701                       	dc.b	smpsNoAttack, $01
0009586C E103                       	smpsAlterNote       $03
0009586E 8001                       	dc.b	nRst, $01
00095870 E109                       	smpsAlterNote       $09
00095872 C206 8001                  	dc.b	nF5, $06, nRst, $01
00095878 E10C                       	smpsAlterNote       $0C
0009587A E601                       	smpsAlterVol        $01
0009587C BB0D                       	dc.b	nBb4, $0D
0009587E E106                       	smpsAlterNote       $06
00095880 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095884 E109                       	smpsAlterNote       $09
00095886 E701                       	dc.b	smpsNoAttack, $01
00095888 E10F                       	smpsAlterNote       $0F
0009588A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009588E E109                       	smpsAlterNote       $09
00095890 E701                       	dc.b	smpsNoAttack, $01
00095892 E106                       	smpsAlterNote       $06
00095894 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095898 E10C                       	smpsAlterNote       $0C
0009589A E701                       	dc.b	smpsNoAttack, $01
0009589C E110                       	smpsAlterNote       $10
0009589E E701                       	dc.b	smpsNoAttack, $01
000958A0 E10F                       	smpsAlterNote       $0F
000958A2 E701                       	dc.b	smpsNoAttack, $01
000958A4 E109                       	smpsAlterNote       $09
000958A6 E701                       	dc.b	smpsNoAttack, $01
000958A8 E105                       	smpsAlterNote       $05
000958AA E701                       	dc.b	smpsNoAttack, $01
000958AC E106                       	smpsAlterNote       $06
000958AE 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000958B2 E103                       	smpsAlterNote       $03
000958B4 E701                       	dc.b	smpsNoAttack, $01
000958B6 E1FF                       	smpsAlterNote       $FF
000958B8 E701                       	dc.b	smpsNoAttack, $01
000958BA E103                       	smpsAlterNote       $03
000958BC E701                       	dc.b	smpsNoAttack, $01
000958BE E106                       	smpsAlterNote       $06
000958C0 E701                       	dc.b	smpsNoAttack, $01
000958C2 E10A                       	smpsAlterNote       $0A
000958C4 E701                       	dc.b	smpsNoAttack, $01
000958C6 E106                       	smpsAlterNote       $06
000958C8 E701                       	dc.b	smpsNoAttack, $01
000958CA E100                       	smpsAlterNote       $00
000958CC E701                       	dc.b	smpsNoAttack, $01
000958CE E1FF                       	smpsAlterNote       $FF
000958D0 E701                       	dc.b	smpsNoAttack, $01
000958D2 E103                       	smpsAlterNote       $03
000958D4 E701                       	dc.b	smpsNoAttack, $01
000958D6 E109                       	smpsAlterNote       $09
000958D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958DC E106                       	smpsAlterNote       $06
000958DE E701                       	dc.b	smpsNoAttack, $01
000958E0 E100                       	smpsAlterNote       $00
000958E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958E6 E107                       	smpsAlterNote       $07
000958E8 BF0E                       	dc.b	nD5, $0E
000958EA E101                       	smpsAlterNote       $01
000958EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958F0 E107                       	smpsAlterNote       $07
000958F2 E701                       	dc.b	smpsNoAttack, $01
000958F4 E10A                       	smpsAlterNote       $0A
000958F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958FA E104                       	smpsAlterNote       $04
000958FC E701                       	dc.b	smpsNoAttack, $01
000958FE E100                       	smpsAlterNote       $00
00095900 E701                       	dc.b	smpsNoAttack, $01
00095902 E101                       	smpsAlterNote       $01
00095904 E701                       	dc.b	smpsNoAttack, $01
00095906 E107                       	smpsAlterNote       $07
00095908 E701                       	dc.b	smpsNoAttack, $01
0009590A E10B                       	smpsAlterNote       $0B
0009590C E701                       	dc.b	smpsNoAttack, $01
0009590E E107                       	smpsAlterNote       $07
00095910 E701                       	dc.b	smpsNoAttack, $01
00095912 E104                       	smpsAlterNote       $04
00095914 E701                       	dc.b	smpsNoAttack, $01
00095916 E100                       	smpsAlterNote       $00
00095918 E701                       	dc.b	smpsNoAttack, $01
0009591A E101                       	smpsAlterNote       $01
0009591C 8001                       	dc.b	nRst, $01
0009591E E108                       	smpsAlterNote       $08
00095920 C10C                       	dc.b	nE5, $0C
00095922 E109                       	smpsAlterNote       $09
00095924 C201 8001                  	dc.b	nF5, $01, nRst, $01
00095928 E10A                       	smpsAlterNote       $0A
0009592A 8001                       	dc.b	nRst, $01
0009592C E109                       	smpsAlterNote       $09
0009592E C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00095932 E106                       	smpsAlterNote       $06
00095934 E701                       	dc.b	smpsNoAttack, $01
00095936 E102                       	smpsAlterNote       $02
00095938 E701                       	dc.b	smpsNoAttack, $01
0009593A E103                       	smpsAlterNote       $03
0009593C E701                       	dc.b	smpsNoAttack, $01
0009593E E109                       	smpsAlterNote       $09
00095940 E701                       	dc.b	smpsNoAttack, $01
00095942 E10D                       	smpsAlterNote       $0D
00095944 E701                       	dc.b	smpsNoAttack, $01
00095946 E109                       	smpsAlterNote       $09
00095948 E701                       	dc.b	smpsNoAttack, $01
0009594A E106                       	smpsAlterNote       $06
0009594C E701                       	dc.b	smpsNoAttack, $01
0009594E E102                       	smpsAlterNote       $02
00095950 E701                       	dc.b	smpsNoAttack, $01
00095952 E106                       	smpsAlterNote       $06
00095954 E701                       	dc.b	smpsNoAttack, $01
00095956 E10C                       	smpsAlterNote       $0C
00095958 E701                       	dc.b	smpsNoAttack, $01
0009595A E10D                       	smpsAlterNote       $0D
0009595C E701                       	dc.b	smpsNoAttack, $01
0009595E E109                       	smpsAlterNote       $09
00095960 C40D                       	dc.b	nG5, $0D
00095962 E106                       	smpsAlterNote       $06
00095964 E701                       	dc.b	smpsNoAttack, $01
00095966 E102                       	smpsAlterNote       $02
00095968 E701                       	dc.b	smpsNoAttack, $01
0009596A E103                       	smpsAlterNote       $03
0009596C E701                       	dc.b	smpsNoAttack, $01
0009596E E109                       	smpsAlterNote       $09
00095970 E701                       	dc.b	smpsNoAttack, $01
00095972 E108                       	smpsAlterNote       $08
00095974 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00095980 E109                       	smpsAlterNote       $09
00095982 C20D                       	dc.b	nF5, $0D
00095984 E106                       	smpsAlterNote       $06
00095986 E701                       	dc.b	smpsNoAttack, $01
00095988 E102                       	smpsAlterNote       $02
0009598A E701                       	dc.b	smpsNoAttack, $01
0009598C E106                       	smpsAlterNote       $06
0009598E E701                       	dc.b	smpsNoAttack, $01
00095990 E109                       	smpsAlterNote       $09
00095992 E701                       	dc.b	smpsNoAttack, $01
00095994 E10D                       	smpsAlterNote       $0D
00095996 E701                       	dc.b	smpsNoAttack, $01
00095998 E109                       	smpsAlterNote       $09
0009599A E701                       	dc.b	smpsNoAttack, $01
0009599C E103                       	smpsAlterNote       $03
0009599E E701                       	dc.b	smpsNoAttack, $01
000959A0 E102                       	smpsAlterNote       $02
000959A2 E701                       	dc.b	smpsNoAttack, $01
000959A4 E106                       	smpsAlterNote       $06
000959A6 E701                       	dc.b	smpsNoAttack, $01
000959A8 E10C                       	smpsAlterNote       $0C
000959AA E701                       	dc.b	smpsNoAttack, $01
000959AC E10D                       	smpsAlterNote       $0D
000959AE 8001                       	dc.b	nRst, $01
000959B0 E112                       	smpsAlterNote       $12
000959B2 C401                       	dc.b	nG5, $01
000959B4 E1EB                       	smpsAlterNote       $EB
000959B6 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000959B9 E1FD                       	smpsAlterNote       $FD
000959BB E701                       	dc.b	smpsNoAttack, $01
000959BD E10F                       	smpsAlterNote       $0F
000959BF E701                       	dc.b	smpsNoAttack, $01
000959C1 E118                       	smpsAlterNote       $18
000959C3 E701                       	dc.b	smpsNoAttack, $01
000959C5 E1ED                       	smpsAlterNote       $ED
000959C7 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000959CA E1FF                       	smpsAlterNote       $FF
000959CC E701                       	dc.b	smpsNoAttack, $01
000959CE E10B                       	smpsAlterNote       $0B
000959D0 E703                       	dc.b	smpsNoAttack, $03
000959D2 E109                       	smpsAlterNote       $09
000959D4 C407                       	dc.b	nG5, $07
000959D6 E108                       	smpsAlterNote       $08
000959D8 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
000959E4 E109                       	smpsAlterNote       $09
000959E6 C20D                       	dc.b	nF5, $0D
000959E8 E103                       	smpsAlterNote       $03
000959EA E701                       	dc.b	smpsNoAttack, $01
000959EC E102                       	smpsAlterNote       $02
000959EE E701                       	dc.b	smpsNoAttack, $01
000959F0 E106                       	smpsAlterNote       $06
000959F2 E701                       	dc.b	smpsNoAttack, $01
000959F4 E10C                       	smpsAlterNote       $0C
000959F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959FA E109                       	smpsAlterNote       $09
000959FC E701                       	dc.b	smpsNoAttack, $01
000959FE E103                       	smpsAlterNote       $03
00095A00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A04 E109                       	smpsAlterNote       $09
00095A06 E701                       	dc.b	smpsNoAttack, $01
00095A08 E10C                       	smpsAlterNote       $0C
00095A0A E701                       	dc.b	smpsNoAttack, $01
00095A0C E10D                       	smpsAlterNote       $0D
00095A0E 8001                       	dc.b	nRst, $01
00095A10 E10B                       	smpsAlterNote       $0B
00095A12 C609 8001                  	dc.b	nA5, $09, nRst, $01
00095A16 E109                       	smpsAlterNote       $09
00095A18 B806 8001                  	dc.b	nG4, $06, nRst, $01
00095A1C E108                       	smpsAlterNote       $08
00095A1E C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00095A2A 8001                       	dc.b	nRst, $01
00095A2C E109                       	smpsAlterNote       $09
00095A2E C20D                       	dc.b	nF5, $0D
00095A30 E103                       	smpsAlterNote       $03
00095A32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A36 E106                       	smpsAlterNote       $06
00095A38 E701                       	dc.b	smpsNoAttack, $01
00095A3A E10C                       	smpsAlterNote       $0C
00095A3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A40 E106                       	smpsAlterNote       $06
00095A42 E701                       	dc.b	smpsNoAttack, $01
00095A44 E103                       	smpsAlterNote       $03
00095A46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A4A E109                       	smpsAlterNote       $09
00095A4C E701                       	dc.b	smpsNoAttack, $01
00095A4E E10D                       	smpsAlterNote       $0D
00095A50 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095A56 E108                       	smpsAlterNote       $08
00095A58 E6FF                       	smpsAlterVol        $FF
00095A5A A806                       	dc.b	nEb3, $06
00095A5C E10C                       	smpsAlterNote       $0C
00095A5E A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095A62 E108                       	smpsAlterNote       $08
00095A64 A803                       	dc.b	nEb3, $03
00095A66 E109                       	smpsAlterNote       $09
00095A68 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00095A6C E10C                       	smpsAlterNote       $0C
00095A6E AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00095A78 E109                       	smpsAlterNote       $09
00095A7A E602                       	smpsAlterVol        $02
00095A7C B604                       	dc.b	nF4, $04
00095A7E E602                       	smpsAlterVol        $02
00095A80 F6F1 AA                    	smpsJump            music84_Jump02
00095A83                            
00095A83                            ; FM4 Data
00095A83                            music84_FM4:
00095A85 E040                       	smpsPan             panRight, $00
00095A87 8003                       	dc.b	nRst, $03
00095A89 E10F                       	smpsAlterNote       $0F
00095A8B C603 8008                  	dc.b	nA5, $03, nRst, $08
00095A8F E10D                       	smpsAlterNote       $0D
00095A91 C403 800A                  	dc.b	nG5, $03, nRst, $0A
00095A95 E10C                       	smpsAlterNote       $0C
00095A97 C103 8004                  	dc.b	nE5, $03, nRst, $04
00095A9D E6FE                       	smpsAlterVol        $FE
00095A9F E110                       	smpsAlterNote       $10
00095AA1 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00095AA5 E10F                       	smpsAlterNote       $0F
00095AA7 C602 8001                  	dc.b	nA5, $02, nRst, $01
00095AAB E10D                       	smpsAlterNote       $0D
00095AAD C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00095AB6 E10C                       	smpsAlterNote       $0C
00095AB8 C103                       	dc.b	nE5, $03
00095ABA E10A                       	smpsAlterNote       $0A
00095ABC BD03 8001                  	dc.b	nC5, $03, nRst, $01
00095AC2 03                         	dc.b	$03
00095AC3                            
00095AC3                            music84_Jump01:
00095AC3 E10B                       	smpsAlterNote       $0B
00095AC5 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095AC9 E10C                       	smpsAlterNote       $0C
00095ACB C102 8001                  	dc.b	nE5, $02, nRst, $01
00095ACF E10D                       	smpsAlterNote       $0D
00095AD1 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095ADB E10B                       	smpsAlterNote       $0B
00095ADD BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095AE1 E107                       	smpsAlterNote       $07
00095AE3 E701                       	dc.b	smpsNoAttack, $01
00095AE5 E103                       	smpsAlterNote       $03
00095AE7 E701                       	dc.b	smpsNoAttack, $01
00095AE9 E104                       	smpsAlterNote       $04
00095AEB E701                       	dc.b	smpsNoAttack, $01
00095AED E10A                       	smpsAlterNote       $0A
00095AEF E701                       	dc.b	smpsNoAttack, $01
00095AF1 E10E                       	smpsAlterNote       $0E
00095AF3 E701                       	dc.b	smpsNoAttack, $01
00095AF5 E10A                       	smpsAlterNote       $0A
00095AF7 E701                       	dc.b	smpsNoAttack, $01
00095AF9 E107                       	smpsAlterNote       $07
00095AFB E701                       	dc.b	smpsNoAttack, $01
00095AFD E104                       	smpsAlterNote       $04
00095AFF 8001                       	dc.b	nRst, $01
00095B01 E110                       	smpsAlterNote       $10
00095B03 C703                       	dc.b	nBb5, $03
00095B05 E10F                       	smpsAlterNote       $0F
00095B07 C603 8001                  	dc.b	nA5, $03, nRst, $01
00095B0B E10D                       	smpsAlterNote       $0D
00095B0D C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00095B13 E10C                       	smpsAlterNote       $0C
00095B15 E701                       	dc.b	smpsNoAttack, $01
00095B17 E108                       	smpsAlterNote       $08
00095B19 E701                       	dc.b	smpsNoAttack, $01
00095B1B E10C                       	smpsAlterNote       $0C
00095B1D E701                       	dc.b	smpsNoAttack, $01
00095B1F E10F                       	smpsAlterNote       $0F
00095B21 E701                       	dc.b	smpsNoAttack, $01
00095B23 E113                       	smpsAlterNote       $13
00095B25 E701                       	dc.b	smpsNoAttack, $01
00095B27 E10F                       	smpsAlterNote       $0F
00095B29 E701                       	dc.b	smpsNoAttack, $01
00095B2B E109                       	smpsAlterNote       $09
00095B2D E701                       	dc.b	smpsNoAttack, $01
00095B2F E108                       	smpsAlterNote       $08
00095B31 E701                       	dc.b	smpsNoAttack, $01
00095B33 E10C                       	smpsAlterNote       $0C
00095B35 E701                       	dc.b	smpsNoAttack, $01
00095B37 E112                       	smpsAlterNote       $12
00095B39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B3D E10C                       	smpsAlterNote       $0C
00095B3F E701                       	dc.b	smpsNoAttack, $01
00095B41 E109                       	smpsAlterNote       $09
00095B43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B47 E10F                       	smpsAlterNote       $0F
00095B49 E701                       	dc.b	smpsNoAttack, $01
00095B4B E113                       	smpsAlterNote       $13
00095B4D E701                       	dc.b	smpsNoAttack, $01
00095B4F E112                       	smpsAlterNote       $12
00095B51 E701                       	dc.b	smpsNoAttack, $01
00095B53 E10C                       	smpsAlterNote       $0C
00095B55 E701                       	dc.b	smpsNoAttack, $01
00095B57 E108                       	smpsAlterNote       $08
00095B59 E701                       	dc.b	smpsNoAttack, $01
00095B5B E10C                       	smpsAlterNote       $0C
00095B5D E701                       	dc.b	smpsNoAttack, $01
00095B5F E10F                       	smpsAlterNote       $0F
00095B61 E701                       	dc.b	smpsNoAttack, $01
00095B63 E113                       	smpsAlterNote       $13
00095B65 E701                       	dc.b	smpsNoAttack, $01
00095B67 E10F                       	smpsAlterNote       $0F
00095B69 E701                       	dc.b	smpsNoAttack, $01
00095B6B E109                       	smpsAlterNote       $09
00095B6D E701                       	dc.b	smpsNoAttack, $01
00095B6F E108                       	smpsAlterNote       $08
00095B71 E701                       	dc.b	smpsNoAttack, $01
00095B73 E10C                       	smpsAlterNote       $0C
00095B75 E701                       	dc.b	smpsNoAttack, $01
00095B77 E112                       	smpsAlterNote       $12
00095B79 E701                       	dc.b	smpsNoAttack, $01
00095B7B E113                       	smpsAlterNote       $13
00095B7D 800F                       	dc.b	nRst, $0F
00095B7F E10B                       	smpsAlterNote       $0B
00095B81 BF03                       	dc.b	nD5, $03
00095B83 E10C                       	smpsAlterNote       $0C
00095B85 C103 8001                  	dc.b	nE5, $03, nRst, $01
00095B89 E10D                       	smpsAlterNote       $0D
00095B8B C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00095B93 E10B                       	smpsAlterNote       $0B
00095B95 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00095B9F E110                       	smpsAlterNote       $10
00095BA1 C704                       	dc.b	nBb5, $04
00095BA3 E10F                       	smpsAlterNote       $0F
00095BA5 C604 8001                  	dc.b	nA5, $04, nRst, $01
00095BA9 E10D                       	smpsAlterNote       $0D
00095BAB C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095BB1 E109                       	smpsAlterNote       $09
00095BB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BB7 E10F                       	smpsAlterNote       $0F
00095BB9 E701                       	dc.b	smpsNoAttack, $01
00095BBB E112                       	smpsAlterNote       $12
00095BBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BC1 E10C                       	smpsAlterNote       $0C
00095BC3 E701                       	dc.b	smpsNoAttack, $01
00095BC5 E108                       	smpsAlterNote       $08
00095BC7 E701                       	dc.b	smpsNoAttack, $01
00095BC9 E109                       	smpsAlterNote       $09
00095BCB E701                       	dc.b	smpsNoAttack, $01
00095BCD E10F                       	smpsAlterNote       $0F
00095BCF E701                       	dc.b	smpsNoAttack, $01
00095BD1 E113                       	smpsAlterNote       $13
00095BD3 E701                       	dc.b	smpsNoAttack, $01
00095BD5 E10F                       	smpsAlterNote       $0F
00095BD7 E701                       	dc.b	smpsNoAttack, $01
00095BD9 E10C                       	smpsAlterNote       $0C
00095BDB E701                       	dc.b	smpsNoAttack, $01
00095BDD E108                       	smpsAlterNote       $08
00095BDF E701                       	dc.b	smpsNoAttack, $01
00095BE1 E10C                       	smpsAlterNote       $0C
00095BE3 E701                       	dc.b	smpsNoAttack, $01
00095BE5 E112                       	smpsAlterNote       $12
00095BE7 E701                       	dc.b	smpsNoAttack, $01
00095BE9 E113                       	smpsAlterNote       $13
00095BEB E701                       	dc.b	smpsNoAttack, $01
00095BED E10F                       	smpsAlterNote       $0F
00095BEF E701                       	dc.b	smpsNoAttack, $01
00095BF1 E109                       	smpsAlterNote       $09
00095BF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BF7 E10C                       	smpsAlterNote       $0C
00095BF9 E701                       	dc.b	smpsNoAttack, $01
00095BFB E112                       	smpsAlterNote       $12
00095BFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C01 E10C                       	smpsAlterNote       $0C
00095C03 E701                       	dc.b	smpsNoAttack, $01
00095C05 E109                       	smpsAlterNote       $09
00095C07 E701                       	dc.b	smpsNoAttack, $01
00095C09 E10D                       	smpsAlterNote       $0D
00095C0B C401 8001                  	dc.b	nG5, $01, nRst, $01
00095C0F E10F                       	smpsAlterNote       $0F
00095C11 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00095C1B E10D                       	smpsAlterNote       $0D
00095C1D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095C23 E10B                       	smpsAlterNote       $0B
00095C25 BF0D                       	dc.b	nD5, $0D
00095C27 E108                       	smpsAlterNote       $08
00095C29 E701                       	dc.b	smpsNoAttack, $01
00095C2B E104                       	smpsAlterNote       $04
00095C2D E701                       	dc.b	smpsNoAttack, $01
00095C2F E108                       	smpsAlterNote       $08
00095C31 E701                       	dc.b	smpsNoAttack, $01
00095C33 E10B                       	smpsAlterNote       $0B
00095C35 E701                       	dc.b	smpsNoAttack, $01
00095C37 E10F                       	smpsAlterNote       $0F
00095C39 E701                       	dc.b	smpsNoAttack, $01
00095C3B E10B                       	smpsAlterNote       $0B
00095C3D E701                       	dc.b	smpsNoAttack, $01
00095C3F E105                       	smpsAlterNote       $05
00095C41 E701                       	dc.b	smpsNoAttack, $01
00095C43 E104                       	smpsAlterNote       $04
00095C45 E701                       	dc.b	smpsNoAttack, $01
00095C47 E108                       	smpsAlterNote       $08
00095C49 E701                       	dc.b	smpsNoAttack, $01
00095C4B E10E                       	smpsAlterNote       $0E
00095C4D E701                       	dc.b	smpsNoAttack, $01
00095C4F E10F                       	smpsAlterNote       $0F
00095C51 8001                       	dc.b	nRst, $01
00095C53 E10C                       	smpsAlterNote       $0C
00095C55 C101                       	dc.b	nE5, $01
00095C57 E10D                       	smpsAlterNote       $0D
00095C59 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00095C5F E10F                       	smpsAlterNote       $0F
00095C61 C606 8001                  	dc.b	nA5, $06, nRst, $01
00095C65 E10C                       	smpsAlterNote       $0C
00095C67 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00095C6B E10D                       	smpsAlterNote       $0D
00095C6D CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095C71 E10C                       	smpsAlterNote       $0C
00095C73 CD03                       	dc.b	nE6, $03
00095C75 E10A                       	smpsAlterNote       $0A
00095C77 C903 8001                  	dc.b	nC6, $03, nRst, $01
00095C7B E10D                       	smpsAlterNote       $0D
00095C7D C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00095C85 E109                       	smpsAlterNote       $09
00095C87 E701                       	dc.b	smpsNoAttack, $01
00095C89 E10D                       	smpsAlterNote       $0D
00095C8B E701                       	dc.b	smpsNoAttack, $01
00095C8D E110                       	smpsAlterNote       $10
00095C8F E701                       	dc.b	smpsNoAttack, $01
00095C91 E114                       	smpsAlterNote       $14
00095C93 E701                       	dc.b	smpsNoAttack, $01
00095C95 E110                       	smpsAlterNote       $10
00095C97 E701                       	dc.b	smpsNoAttack, $01
00095C99 E10A                       	smpsAlterNote       $0A
00095C9B E701                       	dc.b	smpsNoAttack, $01
00095C9D E109                       	smpsAlterNote       $09
00095C9F E701                       	dc.b	smpsNoAttack, $01
00095CA1 E10D                       	smpsAlterNote       $0D
00095CA3 E701                       	dc.b	smpsNoAttack, $01
00095CA5 E113                       	smpsAlterNote       $13
00095CA7 E701                       	dc.b	smpsNoAttack, $01
00095CA9 E114                       	smpsAlterNote       $14
00095CAB 8001                       	dc.b	nRst, $01
00095CAD E10F                       	smpsAlterNote       $0F
00095CAF C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00095CB5 E10C                       	smpsAlterNote       $0C
00095CB7 E701                       	dc.b	smpsNoAttack, $01
00095CB9 E108                       	smpsAlterNote       $08
00095CBB E701                       	dc.b	smpsNoAttack, $01
00095CBD E10C                       	smpsAlterNote       $0C
00095CBF E701                       	dc.b	smpsNoAttack, $01
00095CC1 E112                       	smpsAlterNote       $12
00095CC3 E701                       	dc.b	smpsNoAttack, $01
00095CC5 E113                       	smpsAlterNote       $13
00095CC7 E701                       	dc.b	smpsNoAttack, $01
00095CC9 E10F                       	smpsAlterNote       $0F
00095CCB E701                       	dc.b	smpsNoAttack, $01
00095CCD E109                       	smpsAlterNote       $09
00095CCF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CD3 E10C                       	smpsAlterNote       $0C
00095CD5 E701                       	dc.b	smpsNoAttack, $01
00095CD7 E112                       	smpsAlterNote       $12
00095CD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CDD E10C                       	smpsAlterNote       $0C
00095CDF E701                       	dc.b	smpsNoAttack, $01
00095CE1 E109                       	smpsAlterNote       $09
00095CE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CE7 E10F                       	smpsAlterNote       $0F
00095CE9 E701                       	dc.b	smpsNoAttack, $01
00095CEB E113                       	smpsAlterNote       $13
00095CED E701                       	dc.b	smpsNoAttack, $01
00095CEF E112                       	smpsAlterNote       $12
00095CF1 E701                       	dc.b	smpsNoAttack, $01
00095CF3 E10C                       	smpsAlterNote       $0C
00095CF5 E701                       	dc.b	smpsNoAttack, $01
00095CF7 E108                       	smpsAlterNote       $08
00095CF9 E701                       	dc.b	smpsNoAttack, $01
00095CFB E10C                       	smpsAlterNote       $0C
00095CFD E701                       	dc.b	smpsNoAttack, $01
00095CFF E10F                       	smpsAlterNote       $0F
00095D01 E701                       	dc.b	smpsNoAttack, $01
00095D03 E113                       	smpsAlterNote       $13
00095D05 E701                       	dc.b	smpsNoAttack, $01
00095D07 E10F                       	smpsAlterNote       $0F
00095D09 E701                       	dc.b	smpsNoAttack, $01
00095D0B E109                       	smpsAlterNote       $09
00095D0D E701                       	dc.b	smpsNoAttack, $01
00095D0F E108                       	smpsAlterNote       $08
00095D11 E701                       	dc.b	smpsNoAttack, $01
00095D13 E10C                       	smpsAlterNote       $0C
00095D15 E701                       	dc.b	smpsNoAttack, $01
00095D17 E112                       	smpsAlterNote       $12
00095D19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D1D E10F                       	smpsAlterNote       $0F
00095D1F E701                       	dc.b	smpsNoAttack, $01
00095D21 E109                       	smpsAlterNote       $09
00095D23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D27 E10F                       	smpsAlterNote       $0F
00095D29 E701                       	dc.b	smpsNoAttack, $01
00095D2B E113                       	smpsAlterNote       $13
00095D2D E701                       	dc.b	smpsNoAttack, $01
00095D2F E112                       	smpsAlterNote       $12
00095D31 E701                       	dc.b	smpsNoAttack, $01
00095D33 E10C                       	smpsAlterNote       $0C
00095D35 E701                       	dc.b	smpsNoAttack, $01
00095D37 E108                       	smpsAlterNote       $08
00095D39 E701                       	dc.b	smpsNoAttack, $01
00095D3B E10C                       	smpsAlterNote       $0C
00095D3D E701                       	dc.b	smpsNoAttack, $01
00095D3F E10F                       	smpsAlterNote       $0F
00095D41 E701                       	dc.b	smpsNoAttack, $01
00095D43 E113                       	smpsAlterNote       $13
00095D45 E701                       	dc.b	smpsNoAttack, $01
00095D47 E10F                       	smpsAlterNote       $0F
00095D49 E701                       	dc.b	smpsNoAttack, $01
00095D4B E109                       	smpsAlterNote       $09
00095D4D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095D51 E10F                       	smpsAlterNote       $0F
00095D53 C60D                       	dc.b	nA5, $0D
00095D55 E109                       	smpsAlterNote       $09
00095D57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D5B E10C                       	smpsAlterNote       $0C
00095D5D E701                       	dc.b	smpsNoAttack, $01
00095D5F E112                       	smpsAlterNote       $12
00095D61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D65 E10C                       	smpsAlterNote       $0C
00095D67 E701                       	dc.b	smpsNoAttack, $01
00095D69 E109                       	smpsAlterNote       $09
00095D6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D6F E10F                       	smpsAlterNote       $0F
00095D71 E701                       	dc.b	smpsNoAttack, $01
00095D73 E113                       	smpsAlterNote       $13
00095D75 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095D7B E10D                       	smpsAlterNote       $0D
00095D7D C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00095D85 E10C                       	smpsAlterNote       $0C
00095D87 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00095D8D E6FF                       	smpsAlterVol        $FF
00095D8F E10B                       	smpsAlterNote       $0B
00095D91 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095D95 E10C                       	smpsAlterNote       $0C
00095D97 C103                       	dc.b	nE5, $03
00095D99 E10D                       	smpsAlterNote       $0D
00095D9B C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00095DA5 E10B                       	smpsAlterNote       $0B
00095DA7 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095DAB E107                       	smpsAlterNote       $07
00095DAD E701                       	dc.b	smpsNoAttack, $01
00095DAF E104                       	smpsAlterNote       $04
00095DB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DB5 E10A                       	smpsAlterNote       $0A
00095DB7 E701                       	dc.b	smpsNoAttack, $01
00095DB9 E10D                       	smpsAlterNote       $0D
00095DBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DBF E107                       	smpsAlterNote       $07
00095DC1 E701                       	dc.b	smpsNoAttack, $01
00095DC3 E104                       	smpsAlterNote       $04
00095DC5 8001                       	dc.b	nRst, $01
00095DC7 E110                       	smpsAlterNote       $10
00095DC9 C703                       	dc.b	nBb5, $03
00095DCB E10F                       	smpsAlterNote       $0F
00095DCD C603 8001                  	dc.b	nA5, $03, nRst, $01
00095DD1 E10D                       	smpsAlterNote       $0D
00095DD3 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00095DD7 E10C                       	smpsAlterNote       $0C
00095DD9 E701                       	dc.b	smpsNoAttack, $01
00095DDB E108                       	smpsAlterNote       $08
00095DDD E701                       	dc.b	smpsNoAttack, $01
00095DDF E109                       	smpsAlterNote       $09
00095DE1 E701                       	dc.b	smpsNoAttack, $01
00095DE3 E10F                       	smpsAlterNote       $0F
00095DE5 E701                       	dc.b	smpsNoAttack, $01
00095DE7 E113                       	smpsAlterNote       $13
00095DE9 E701                       	dc.b	smpsNoAttack, $01
00095DEB E10F                       	smpsAlterNote       $0F
00095DED E701                       	dc.b	smpsNoAttack, $01
00095DEF E10C                       	smpsAlterNote       $0C
00095DF1 E701                       	dc.b	smpsNoAttack, $01
00095DF3 E108                       	smpsAlterNote       $08
00095DF5 E701                       	dc.b	smpsNoAttack, $01
00095DF7 E10C                       	smpsAlterNote       $0C
00095DF9 E701                       	dc.b	smpsNoAttack, $01
00095DFB E112                       	smpsAlterNote       $12
00095DFD E701                       	dc.b	smpsNoAttack, $01
00095DFF E113                       	smpsAlterNote       $13
00095E01 E701                       	dc.b	smpsNoAttack, $01
00095E03 E10F                       	smpsAlterNote       $0F
00095E05 E701                       	dc.b	smpsNoAttack, $01
00095E07 E109                       	smpsAlterNote       $09
00095E09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E0D E10C                       	smpsAlterNote       $0C
00095E0F E701                       	dc.b	smpsNoAttack, $01
00095E11 E112                       	smpsAlterNote       $12
00095E13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E17 E10C                       	smpsAlterNote       $0C
00095E19 E701                       	dc.b	smpsNoAttack, $01
00095E1B E109                       	smpsAlterNote       $09
00095E1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E21 E10F                       	smpsAlterNote       $0F
00095E23 E701                       	dc.b	smpsNoAttack, $01
00095E25 E113                       	smpsAlterNote       $13
00095E27 E701                       	dc.b	smpsNoAttack, $01
00095E29 E112                       	smpsAlterNote       $12
00095E2B E701                       	dc.b	smpsNoAttack, $01
00095E2D E10C                       	smpsAlterNote       $0C
00095E2F E701                       	dc.b	smpsNoAttack, $01
00095E31 E108                       	smpsAlterNote       $08
00095E33 E701                       	dc.b	smpsNoAttack, $01
00095E35 E10C                       	smpsAlterNote       $0C
00095E37 E701                       	dc.b	smpsNoAttack, $01
00095E39 E10F                       	smpsAlterNote       $0F
00095E3B E701                       	dc.b	smpsNoAttack, $01
00095E3D E113                       	smpsAlterNote       $13
00095E3F E701                       	dc.b	smpsNoAttack, $01
00095E41 E10F                       	smpsAlterNote       $0F
00095E43 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00095E47 E110                       	smpsAlterNote       $10
00095E49 BB03                       	dc.b	nBb4, $03
00095E4B E10F                       	smpsAlterNote       $0F
00095E4D BA06 8001                  	dc.b	nA4, $06, nRst, $01
00095E51 E10B                       	smpsAlterNote       $0B
00095E53 BF03                       	dc.b	nD5, $03
00095E55 E10C                       	smpsAlterNote       $0C
00095E57 C103 8001                  	dc.b	nE5, $03, nRst, $01
00095E5B E10D                       	smpsAlterNote       $0D
00095E5D C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095E67 E10B                       	smpsAlterNote       $0B
00095E69 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00095E75 E110                       	smpsAlterNote       $10
00095E77 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00095E7B E10F                       	smpsAlterNote       $0F
00095E7D C604                       	dc.b	nA5, $04
00095E7F E10D                       	smpsAlterNote       $0D
00095E81 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095E87 E109                       	smpsAlterNote       $09
00095E89 E701                       	dc.b	smpsNoAttack, $01
00095E8B E108                       	smpsAlterNote       $08
00095E8D E701                       	dc.b	smpsNoAttack, $01
00095E8F E10C                       	smpsAlterNote       $0C
00095E91 E701                       	dc.b	smpsNoAttack, $01
00095E93 E112                       	smpsAlterNote       $12
00095E95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E99 E10F                       	smpsAlterNote       $0F
00095E9B E701                       	dc.b	smpsNoAttack, $01
00095E9D E109                       	smpsAlterNote       $09
00095E9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EA3 E10F                       	smpsAlterNote       $0F
00095EA5 E701                       	dc.b	smpsNoAttack, $01
00095EA7 E112                       	smpsAlterNote       $12
00095EA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EAD E10C                       	smpsAlterNote       $0C
00095EAF E701                       	dc.b	smpsNoAttack, $01
00095EB1 E108                       	smpsAlterNote       $08
00095EB3 E701                       	dc.b	smpsNoAttack, $01
00095EB5 E109                       	smpsAlterNote       $09
00095EB7 E701                       	dc.b	smpsNoAttack, $01
00095EB9 E10F                       	smpsAlterNote       $0F
00095EBB E701                       	dc.b	smpsNoAttack, $01
00095EBD E113                       	smpsAlterNote       $13
00095EBF E701                       	dc.b	smpsNoAttack, $01
00095EC1 E10F                       	smpsAlterNote       $0F
00095EC3 E701                       	dc.b	smpsNoAttack, $01
00095EC5 E10C                       	smpsAlterNote       $0C
00095EC7 E701                       	dc.b	smpsNoAttack, $01
00095EC9 E108                       	smpsAlterNote       $08
00095ECB E701                       	dc.b	smpsNoAttack, $01
00095ECD E10C                       	smpsAlterNote       $0C
00095ECF E701                       	dc.b	smpsNoAttack, $01
00095ED1 E112                       	smpsAlterNote       $12
00095ED3 E701                       	dc.b	smpsNoAttack, $01
00095ED5 E113                       	smpsAlterNote       $13
00095ED7 E701                       	dc.b	smpsNoAttack, $01
00095ED9 E10F                       	smpsAlterNote       $0F
00095EDB E701                       	dc.b	smpsNoAttack, $01
00095EDD E109                       	smpsAlterNote       $09
00095EDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EE3 E10C                       	smpsAlterNote       $0C
00095EE5 E701                       	dc.b	smpsNoAttack, $01
00095EE7 E112                       	smpsAlterNote       $12
00095EE9 E701                       	dc.b	smpsNoAttack, $01
00095EEB E113                       	smpsAlterNote       $13
00095EED 8001                       	dc.b	nRst, $01
00095EEF E10F                       	smpsAlterNote       $0F
00095EF1 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00095EFD C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00095F05 E10D                       	smpsAlterNote       $0D
00095F07 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00095F0D E10B                       	smpsAlterNote       $0B
00095F0F BF0D                       	dc.b	nD5, $0D
00095F11 E108                       	smpsAlterNote       $08
00095F13 E701                       	dc.b	smpsNoAttack, $01
00095F15 E104                       	smpsAlterNote       $04
00095F17 E701                       	dc.b	smpsNoAttack, $01
00095F19 E105                       	smpsAlterNote       $05
00095F1B E701                       	dc.b	smpsNoAttack, $01
00095F1D E10B                       	smpsAlterNote       $0B
00095F1F E701                       	dc.b	smpsNoAttack, $01
00095F21 E10F                       	smpsAlterNote       $0F
00095F23 E701                       	dc.b	smpsNoAttack, $01
00095F25 E10B                       	smpsAlterNote       $0B
00095F27 E701                       	dc.b	smpsNoAttack, $01
00095F29 E108                       	smpsAlterNote       $08
00095F2B E701                       	dc.b	smpsNoAttack, $01
00095F2D E104                       	smpsAlterNote       $04
00095F2F E701                       	dc.b	smpsNoAttack, $01
00095F31 E108                       	smpsAlterNote       $08
00095F33 E701                       	dc.b	smpsNoAttack, $01
00095F35 E10E                       	smpsAlterNote       $0E
00095F37 E701                       	dc.b	smpsNoAttack, $01
00095F39 E10F                       	smpsAlterNote       $0F
00095F3B E701                       	dc.b	smpsNoAttack, $01
00095F3D E10C                       	smpsAlterNote       $0C
00095F3F C101                       	dc.b	nE5, $01
00095F41 E10D                       	smpsAlterNote       $0D
00095F43 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00095F4B E10F                       	smpsAlterNote       $0F
00095F4D C607                       	dc.b	nA5, $07
00095F4F E10C                       	smpsAlterNote       $0C
00095F51 CD07                       	dc.b	nE6, $07
00095F53 E10D                       	smpsAlterNote       $0D
00095F55 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095F59 E10C                       	smpsAlterNote       $0C
00095F5B CD03                       	dc.b	nE6, $03
00095F5D E10A                       	smpsAlterNote       $0A
00095F5F C903 8001                  	dc.b	nC6, $03, nRst, $01
00095F63 E10D                       	smpsAlterNote       $0D
00095F65 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00095F6B E10A                       	smpsAlterNote       $0A
00095F6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F71 E110                       	smpsAlterNote       $10
00095F73 E701                       	dc.b	smpsNoAttack, $01
00095F75 E114                       	smpsAlterNote       $14
00095F77 E701                       	dc.b	smpsNoAttack, $01
00095F79 E113                       	smpsAlterNote       $13
00095F7B E701                       	dc.b	smpsNoAttack, $01
00095F7D E10D                       	smpsAlterNote       $0D
00095F7F E701                       	dc.b	smpsNoAttack, $01
00095F81 E109                       	smpsAlterNote       $09
00095F83 E701                       	dc.b	smpsNoAttack, $01
00095F85 E10D                       	smpsAlterNote       $0D
00095F87 E701                       	dc.b	smpsNoAttack, $01
00095F89 E110                       	smpsAlterNote       $10
00095F8B E701                       	dc.b	smpsNoAttack, $01
00095F8D E114                       	smpsAlterNote       $14
00095F8F E701                       	dc.b	smpsNoAttack, $01
00095F91 E10F                       	smpsAlterNote       $0F
00095F93 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00095F97 E10C                       	smpsAlterNote       $0C
00095F99 E701                       	dc.b	smpsNoAttack, $01
00095F9B E108                       	smpsAlterNote       $08
00095F9D E701                       	dc.b	smpsNoAttack, $01
00095F9F E10C                       	smpsAlterNote       $0C
00095FA1 E701                       	dc.b	smpsNoAttack, $01
00095FA3 E10F                       	smpsAlterNote       $0F
00095FA5 E701                       	dc.b	smpsNoAttack, $01
00095FA7 E113                       	smpsAlterNote       $13
00095FA9 E701                       	dc.b	smpsNoAttack, $01
00095FAB E10F                       	smpsAlterNote       $0F
00095FAD E701                       	dc.b	smpsNoAttack, $01
00095FAF E109                       	smpsAlterNote       $09
00095FB1 E701                       	dc.b	smpsNoAttack, $01
00095FB3 E108                       	smpsAlterNote       $08
00095FB5 E701                       	dc.b	smpsNoAttack, $01
00095FB7 E10C                       	smpsAlterNote       $0C
00095FB9 E701                       	dc.b	smpsNoAttack, $01
00095FBB E112                       	smpsAlterNote       $12
00095FBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FC1 E10F                       	smpsAlterNote       $0F
00095FC3 E701                       	dc.b	smpsNoAttack, $01
00095FC5 E109                       	smpsAlterNote       $09
00095FC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FCB E10F                       	smpsAlterNote       $0F
00095FCD E701                       	dc.b	smpsNoAttack, $01
00095FCF E112                       	smpsAlterNote       $12
00095FD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FD5 E10C                       	smpsAlterNote       $0C
00095FD7 E701                       	dc.b	smpsNoAttack, $01
00095FD9 E108                       	smpsAlterNote       $08
00095FDB E701                       	dc.b	smpsNoAttack, $01
00095FDD E109                       	smpsAlterNote       $09
00095FDF E701                       	dc.b	smpsNoAttack, $01
00095FE1 E10F                       	smpsAlterNote       $0F
00095FE3 E701                       	dc.b	smpsNoAttack, $01
00095FE5 E113                       	smpsAlterNote       $13
00095FE7 E701                       	dc.b	smpsNoAttack, $01
00095FE9 E10F                       	smpsAlterNote       $0F
00095FEB E701                       	dc.b	smpsNoAttack, $01
00095FED E10C                       	smpsAlterNote       $0C
00095FEF E701                       	dc.b	smpsNoAttack, $01
00095FF1 E108                       	smpsAlterNote       $08
00095FF3 E701                       	dc.b	smpsNoAttack, $01
00095FF5 E10C                       	smpsAlterNote       $0C
00095FF7 E701                       	dc.b	smpsNoAttack, $01
00095FF9 E112                       	smpsAlterNote       $12
00095FFB E701                       	dc.b	smpsNoAttack, $01
00095FFD E113                       	smpsAlterNote       $13
00095FFF E701                       	dc.b	smpsNoAttack, $01
00096001 E10F                       	smpsAlterNote       $0F
00096003 E701                       	dc.b	smpsNoAttack, $01
00096005 E109                       	smpsAlterNote       $09
00096007 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009600B E10C                       	smpsAlterNote       $0C
0009600D E701                       	dc.b	smpsNoAttack, $01
0009600F E112                       	smpsAlterNote       $12
00096011 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096015 E10C                       	smpsAlterNote       $0C
00096017 E701                       	dc.b	smpsNoAttack, $01
00096019 E109                       	smpsAlterNote       $09
0009601B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009601F E10F                       	smpsAlterNote       $0F
00096021 E701                       	dc.b	smpsNoAttack, $01
00096023 E113                       	smpsAlterNote       $13
00096025 E701                       	dc.b	smpsNoAttack, $01
00096027 E112                       	smpsAlterNote       $12
00096029 E701                       	dc.b	smpsNoAttack, $01
0009602B E10C                       	smpsAlterNote       $0C
0009602D E701                       	dc.b	smpsNoAttack, $01
0009602F E109                       	smpsAlterNote       $09
00096031 8001                       	dc.b	nRst, $01
00096033 E10F                       	smpsAlterNote       $0F
00096035 C60D                       	dc.b	nA5, $0D
00096037 E10C                       	smpsAlterNote       $0C
00096039 E701                       	dc.b	smpsNoAttack, $01
0009603B E108                       	smpsAlterNote       $08
0009603D E701                       	dc.b	smpsNoAttack, $01
0009603F E10C                       	smpsAlterNote       $0C
00096041 E701                       	dc.b	smpsNoAttack, $01
00096043 E112                       	smpsAlterNote       $12
00096045 E701                       	dc.b	smpsNoAttack, $01
00096047 E113                       	smpsAlterNote       $13
00096049 E701                       	dc.b	smpsNoAttack, $01
0009604B E10F                       	smpsAlterNote       $0F
0009604D E701                       	dc.b	smpsNoAttack, $01
0009604F E109                       	smpsAlterNote       $09
00096051 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096055 E10C                       	smpsAlterNote       $0C
00096057 E701                       	dc.b	smpsNoAttack, $01
00096059 E112                       	smpsAlterNote       $12
0009605B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009605F E10C                       	smpsAlterNote       $0C
00096061 E701                       	dc.b	smpsNoAttack, $01
00096063 E109                       	smpsAlterNote       $09
00096065 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096069 E10F                       	smpsAlterNote       $0F
0009606B E701                       	dc.b	smpsNoAttack, $01
0009606D E113                       	smpsAlterNote       $13
0009606F E701                       	dc.b	smpsNoAttack, $01
00096071 E112                       	smpsAlterNote       $12
00096073 E701                       	dc.b	smpsNoAttack, $01
00096075 E10C                       	smpsAlterNote       $0C
00096077 E701                       	dc.b	smpsNoAttack, $01
00096079 E108                       	smpsAlterNote       $08
0009607B E701                       	dc.b	smpsNoAttack, $01
0009607D E10C                       	smpsAlterNote       $0C
0009607F E701                       	dc.b	smpsNoAttack, $01
00096081 E10F                       	smpsAlterNote       $0F
00096083 E701                       	dc.b	smpsNoAttack, $01
00096085 E113                       	smpsAlterNote       $13
00096087 E701                       	dc.b	smpsNoAttack, $01
00096089 E10F                       	smpsAlterNote       $0F
0009608B E701                       	dc.b	smpsNoAttack, $01
0009608D E109                       	smpsAlterNote       $09
0009608F E701                       	dc.b	smpsNoAttack, $01
00096091 E108                       	smpsAlterNote       $08
00096093 E701                       	dc.b	smpsNoAttack, $01
00096095 E10C                       	smpsAlterNote       $0C
00096097 E701                       	dc.b	smpsNoAttack, $01
00096099 E112                       	smpsAlterNote       $12
0009609B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009609F E10F                       	smpsAlterNote       $0F
000960A1 E701                       	dc.b	smpsNoAttack, $01
000960A3 E109                       	smpsAlterNote       $09
000960A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960A9 E10F                       	smpsAlterNote       $0F
000960AB E701                       	dc.b	smpsNoAttack, $01
000960AD E112                       	smpsAlterNote       $12
000960AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960B3 E10C                       	smpsAlterNote       $0C
000960B5 E701                       	dc.b	smpsNoAttack, $01
000960B7 E108                       	smpsAlterNote       $08
000960B9 E701                       	dc.b	smpsNoAttack, $01
000960BB E10C                       	smpsAlterNote       $0C
000960BD E701                       	dc.b	smpsNoAttack, $01
000960BF E10F                       	smpsAlterNote       $0F
000960C1 E701                       	dc.b	smpsNoAttack, $01
000960C3 E113                       	smpsAlterNote       $13
000960C5 E701                       	dc.b	smpsNoAttack, $01
000960C7 E10F                       	smpsAlterNote       $0F
000960C9 E701                       	dc.b	smpsNoAttack, $01
000960CB E109                       	smpsAlterNote       $09
000960CD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000960D3 E601                       	smpsAlterVol        $01
000960D5 E10F                       	smpsAlterNote       $0F
000960D7 C604                       	dc.b	nA5, $04
000960D9 E10D                       	smpsAlterNote       $0D
000960DB C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000960E1 E10B                       	smpsAlterNote       $0B
000960E3 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000960EB E10F                       	smpsAlterNote       $0F
000960ED C604 8001                  	dc.b	nA5, $04, nRst, $01
000960F1 E10D                       	smpsAlterNote       $0D
000960F3 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000960F9 E10C                       	smpsAlterNote       $0C
000960FB C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00096101 E10A                       	smpsAlterNote       $0A
00096103 C904 8001                  	dc.b	nC6, $04, nRst, $01
00096107 E110                       	smpsAlterNote       $10
00096109 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0009610D E10F                       	smpsAlterNote       $0F
0009610F C604                       	dc.b	nA5, $04
00096111 E10D                       	smpsAlterNote       $0D
00096113 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0009611F E109                       	smpsAlterNote       $09
00096121 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096125 E10F                       	smpsAlterNote       $0F
00096127 E701                       	dc.b	smpsNoAttack, $01
00096129 E112                       	smpsAlterNote       $12
0009612B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009612F E10C                       	smpsAlterNote       $0C
00096131 E701                       	dc.b	smpsNoAttack, $01
00096133 E108                       	smpsAlterNote       $08
00096135 E701                       	dc.b	smpsNoAttack, $01
00096137 E10C                       	smpsAlterNote       $0C
00096139 E701                       	dc.b	smpsNoAttack, $01
0009613B E10F                       	smpsAlterNote       $0F
0009613D E701                       	dc.b	smpsNoAttack, $01
0009613F E113                       	smpsAlterNote       $13
00096141 E701                       	dc.b	smpsNoAttack, $01
00096143 E10D                       	smpsAlterNote       $0D
00096145 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0009614B E10C                       	smpsAlterNote       $0C
0009614D C10D                       	dc.b	nE5, $0D
0009614F E109                       	smpsAlterNote       $09
00096151 E701                       	dc.b	smpsNoAttack, $01
00096153 E105                       	smpsAlterNote       $05
00096155 E701                       	dc.b	smpsNoAttack, $01
00096157 E106                       	smpsAlterNote       $06
00096159 E701                       	dc.b	smpsNoAttack, $01
0009615B E10C                       	smpsAlterNote       $0C
0009615D E701                       	dc.b	smpsNoAttack, $01
0009615F E110                       	smpsAlterNote       $10
00096161 E701                       	dc.b	smpsNoAttack, $01
00096163 E10C                       	smpsAlterNote       $0C
00096165 E701                       	dc.b	smpsNoAttack, $01
00096167 E109                       	smpsAlterNote       $09
00096169 E701                       	dc.b	smpsNoAttack, $01
0009616B E105                       	smpsAlterNote       $05
0009616D E701                       	dc.b	smpsNoAttack, $01
0009616F E109                       	smpsAlterNote       $09
00096171 E701                       	dc.b	smpsNoAttack, $01
00096173 E10F                       	smpsAlterNote       $0F
00096175 E701                       	dc.b	smpsNoAttack, $01
00096177 E110                       	smpsAlterNote       $10
00096179 E701                       	dc.b	smpsNoAttack, $01
0009617B E10C                       	smpsAlterNote       $0C
0009617D E701                       	dc.b	smpsNoAttack, $01
0009617F E106                       	smpsAlterNote       $06
00096181 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096185 E109                       	smpsAlterNote       $09
00096187 E701                       	dc.b	smpsNoAttack, $01
00096189 E10F                       	smpsAlterNote       $0F
0009618B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009618F E109                       	smpsAlterNote       $09
00096191 E701                       	dc.b	smpsNoAttack, $01
00096193 E106                       	smpsAlterNote       $06
00096195 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096199 E10C                       	smpsAlterNote       $0C
0009619B E701                       	dc.b	smpsNoAttack, $01
0009619D E110                       	smpsAlterNote       $10
0009619F E701                       	dc.b	smpsNoAttack, $01
000961A1 E10F                       	smpsAlterNote       $0F
000961A3 E701                       	dc.b	smpsNoAttack, $01
000961A5 E109                       	smpsAlterNote       $09
000961A7 E701                       	dc.b	smpsNoAttack, $01
000961A9 E105                       	smpsAlterNote       $05
000961AB E701                       	dc.b	smpsNoAttack, $01
000961AD E109                       	smpsAlterNote       $09
000961AF E701                       	dc.b	smpsNoAttack, $01
000961B1 E10C                       	smpsAlterNote       $0C
000961B3 E701                       	dc.b	smpsNoAttack, $01
000961B5 E110                       	smpsAlterNote       $10
000961B7 E701                       	dc.b	smpsNoAttack, $01
000961B9 E10C                       	smpsAlterNote       $0C
000961BB E701                       	dc.b	smpsNoAttack, $01
000961BD E106                       	smpsAlterNote       $06
000961BF E701                       	dc.b	smpsNoAttack, $01
000961C1 E105                       	smpsAlterNote       $05
000961C3 E701                       	dc.b	smpsNoAttack, $01
000961C5 E109                       	smpsAlterNote       $09
000961C7 E701                       	dc.b	smpsNoAttack, $01
000961C9 E10F                       	smpsAlterNote       $0F
000961CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961CF E10C                       	smpsAlterNote       $0C
000961D1 E701                       	dc.b	smpsNoAttack, $01
000961D3 E106                       	smpsAlterNote       $06
000961D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961D9 E10C                       	smpsAlterNote       $0C
000961DB E701                       	dc.b	smpsNoAttack, $01
000961DD E10F                       	smpsAlterNote       $0F
000961DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961E3 E109                       	smpsAlterNote       $09
000961E5 E701                       	dc.b	smpsNoAttack, $01
000961E7 E105                       	smpsAlterNote       $05
000961E9 E701                       	dc.b	smpsNoAttack, $01
000961EB E106                       	smpsAlterNote       $06
000961ED E701                       	dc.b	smpsNoAttack, $01
000961EF E10C                       	smpsAlterNote       $0C
000961F1 E701                       	dc.b	smpsNoAttack, $01
000961F3 E110                       	smpsAlterNote       $10
000961F5 E701                       	dc.b	smpsNoAttack, $01
000961F7 E10C                       	smpsAlterNote       $0C
000961F9 E701                       	dc.b	smpsNoAttack, $01
000961FB E109                       	smpsAlterNote       $09
000961FD E701                       	dc.b	smpsNoAttack, $01
000961FF E105                       	smpsAlterNote       $05
00096201 E701                       	dc.b	smpsNoAttack, $01
00096203 E109                       	smpsAlterNote       $09
00096205 E701                       	dc.b	smpsNoAttack, $01
00096207 E10F                       	smpsAlterNote       $0F
00096209 E701                       	dc.b	smpsNoAttack, $01
0009620B E110                       	smpsAlterNote       $10
0009620D E701                       	dc.b	smpsNoAttack, $01
0009620F E10C                       	smpsAlterNote       $0C
00096211 E701                       	dc.b	smpsNoAttack, $01
00096213 E106                       	smpsAlterNote       $06
00096215 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096219 E109                       	smpsAlterNote       $09
0009621B E701                       	dc.b	smpsNoAttack, $01
0009621D E10F                       	smpsAlterNote       $0F
0009621F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096223 E109                       	smpsAlterNote       $09
00096225 E701                       	dc.b	smpsNoAttack, $01
00096227 E106                       	smpsAlterNote       $06
00096229 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009622D E10C                       	smpsAlterNote       $0C
0009622F E701                       	dc.b	smpsNoAttack, $01
00096231 E110                       	smpsAlterNote       $10
00096233 E701                       	dc.b	smpsNoAttack, $01
00096235 E10F                       	smpsAlterNote       $0F
00096237 E701                       	dc.b	smpsNoAttack, $01
00096239 E109                       	smpsAlterNote       $09
0009623B E701                       	dc.b	smpsNoAttack, $01
0009623D E105                       	smpsAlterNote       $05
0009623F E701                       	dc.b	smpsNoAttack, $01
00096241 E109                       	smpsAlterNote       $09
00096243 E701                       	dc.b	smpsNoAttack, $01
00096245 E10C                       	smpsAlterNote       $0C
00096247 E701                       	dc.b	smpsNoAttack, $01
00096249 E110                       	smpsAlterNote       $10
0009624B E701                       	dc.b	smpsNoAttack, $01
0009624D E10C                       	smpsAlterNote       $0C
0009624F E701                       	dc.b	smpsNoAttack, $01
00096251 E106                       	smpsAlterNote       $06
00096253 E701                       	dc.b	smpsNoAttack, $01
00096255 E105                       	smpsAlterNote       $05
00096257 E701                       	dc.b	smpsNoAttack, $01
00096259 E109                       	smpsAlterNote       $09
0009625B E701                       	dc.b	smpsNoAttack, $01
0009625D E10F                       	smpsAlterNote       $0F
0009625F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096263 E109                       	smpsAlterNote       $09
00096265 E701                       	dc.b	smpsNoAttack, $01
00096267 E106                       	smpsAlterNote       $06
00096269 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009626D E10C                       	smpsAlterNote       $0C
0009626F E701                       	dc.b	smpsNoAttack, $01
00096271 E110                       	smpsAlterNote       $10
00096273 E701                       	dc.b	smpsNoAttack, $01
00096275 E10F                       	smpsAlterNote       $0F
00096277 E701                       	dc.b	smpsNoAttack, $01
00096279 E109                       	smpsAlterNote       $09
0009627B E701                       	dc.b	smpsNoAttack, $01
0009627D E105                       	smpsAlterNote       $05
0009627F E701                       	dc.b	smpsNoAttack, $01
00096281 E109                       	smpsAlterNote       $09
00096283 E701                       	dc.b	smpsNoAttack, $01
00096285 E10C                       	smpsAlterNote       $0C
00096287 E701                       	dc.b	smpsNoAttack, $01
00096289 E110                       	smpsAlterNote       $10
0009628B E701                       	dc.b	smpsNoAttack, $01
0009628D E10C                       	smpsAlterNote       $0C
0009628F E701                       	dc.b	smpsNoAttack, $01
00096291 E106                       	smpsAlterNote       $06
00096293 E701                       	dc.b	smpsNoAttack, $01
00096295 E105                       	smpsAlterNote       $05
00096297 E701                       	dc.b	smpsNoAttack, $01
00096299 E109                       	smpsAlterNote       $09
0009629B E701                       	dc.b	smpsNoAttack, $01
0009629D E10F                       	smpsAlterNote       $0F
0009629F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962A3 E10C                       	smpsAlterNote       $0C
000962A5 E701                       	dc.b	smpsNoAttack, $01
000962A7 E106                       	smpsAlterNote       $06
000962A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962AD E10C                       	smpsAlterNote       $0C
000962AF E701                       	dc.b	smpsNoAttack, $01
000962B1 E10F                       	smpsAlterNote       $0F
000962B3 E701                       	dc.b	smpsNoAttack, $01
000962B5 E110                       	smpsAlterNote       $10
000962B7 8001                       	dc.b	nRst, $01
000962B9 E10F                       	smpsAlterNote       $0F
000962BB C604                       	dc.b	nA5, $04
000962BD E10D                       	smpsAlterNote       $0D
000962BF C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000962C5 E10B                       	smpsAlterNote       $0B
000962C7 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000962CD E10F                       	smpsAlterNote       $0F
000962CF C604 8001                  	dc.b	nA5, $04, nRst, $01
000962D3 E10D                       	smpsAlterNote       $0D
000962D5 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000962DB E10C                       	smpsAlterNote       $0C
000962DD C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000962E3 E10A                       	smpsAlterNote       $0A
000962E5 C904                       	dc.b	nC6, $04
000962E7 E110                       	smpsAlterNote       $10
000962E9 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000962ED E10F                       	smpsAlterNote       $0F
000962EF C604                       	dc.b	nA5, $04
000962F1 E10D                       	smpsAlterNote       $0D
000962F3 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000962FF E109                       	smpsAlterNote       $09
00096301 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096305 E10F                       	smpsAlterNote       $0F
00096307 E701                       	dc.b	smpsNoAttack, $01
00096309 E112                       	smpsAlterNote       $12
0009630B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009630F E10C                       	smpsAlterNote       $0C
00096311 E701                       	dc.b	smpsNoAttack, $01
00096313 E108                       	smpsAlterNote       $08
00096315 E701                       	dc.b	smpsNoAttack, $01
00096317 E109                       	smpsAlterNote       $09
00096319 E701                       	dc.b	smpsNoAttack, $01
0009631B E10F                       	smpsAlterNote       $0F
0009631D E701                       	dc.b	smpsNoAttack, $01
0009631F E113                       	smpsAlterNote       $13
00096321 E701                       	dc.b	smpsNoAttack, $01
00096323 E10D                       	smpsAlterNote       $0D
00096325 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0009632B E10C                       	smpsAlterNote       $0C
0009632D C10D                       	dc.b	nE5, $0D
0009632F E109                       	smpsAlterNote       $09
00096331 E701                       	dc.b	smpsNoAttack, $01
00096333 E106                       	smpsAlterNote       $06
00096335 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096339 E10C                       	smpsAlterNote       $0C
0009633B E701                       	dc.b	smpsNoAttack, $01
0009633D E110                       	smpsAlterNote       $10
0009633F E701                       	dc.b	smpsNoAttack, $01
00096341 E10F                       	smpsAlterNote       $0F
00096343 E701                       	dc.b	smpsNoAttack, $01
00096345 E109                       	smpsAlterNote       $09
00096347 E701                       	dc.b	smpsNoAttack, $01
00096349 E105                       	smpsAlterNote       $05
0009634B E701                       	dc.b	smpsNoAttack, $01
0009634D E109                       	smpsAlterNote       $09
0009634F E701                       	dc.b	smpsNoAttack, $01
00096351 E10C                       	smpsAlterNote       $0C
00096353 E701                       	dc.b	smpsNoAttack, $01
00096355 E110                       	smpsAlterNote       $10
00096357 E701                       	dc.b	smpsNoAttack, $01
00096359 E10C                       	smpsAlterNote       $0C
0009635B E701                       	dc.b	smpsNoAttack, $01
0009635D E106                       	smpsAlterNote       $06
0009635F E701                       	dc.b	smpsNoAttack, $01
00096361 E105                       	smpsAlterNote       $05
00096363 E701                       	dc.b	smpsNoAttack, $01
00096365 E109                       	smpsAlterNote       $09
00096367 E701                       	dc.b	smpsNoAttack, $01
00096369 E10F                       	smpsAlterNote       $0F
0009636B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009636F E10C                       	smpsAlterNote       $0C
00096371 E701                       	dc.b	smpsNoAttack, $01
00096373 E106                       	smpsAlterNote       $06
00096375 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096379 E10C                       	smpsAlterNote       $0C
0009637B E701                       	dc.b	smpsNoAttack, $01
0009637D E10F                       	smpsAlterNote       $0F
0009637F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096383 E109                       	smpsAlterNote       $09
00096385 E701                       	dc.b	smpsNoAttack, $01
00096387 E105                       	smpsAlterNote       $05
00096389 E701                       	dc.b	smpsNoAttack, $01
0009638B E106                       	smpsAlterNote       $06
0009638D E701                       	dc.b	smpsNoAttack, $01
0009638F E10C                       	smpsAlterNote       $0C
00096391 E701                       	dc.b	smpsNoAttack, $01
00096393 E110                       	smpsAlterNote       $10
00096395 E701                       	dc.b	smpsNoAttack, $01
00096397 E10C                       	smpsAlterNote       $0C
00096399 E701                       	dc.b	smpsNoAttack, $01
0009639B E109                       	smpsAlterNote       $09
0009639D E701                       	dc.b	smpsNoAttack, $01
0009639F E105                       	smpsAlterNote       $05
000963A1 E701                       	dc.b	smpsNoAttack, $01
000963A3 E109                       	smpsAlterNote       $09
000963A5 E701                       	dc.b	smpsNoAttack, $01
000963A7 E10F                       	smpsAlterNote       $0F
000963A9 E701                       	dc.b	smpsNoAttack, $01
000963AB E110                       	smpsAlterNote       $10
000963AD E701                       	dc.b	smpsNoAttack, $01
000963AF E10C                       	smpsAlterNote       $0C
000963B1 E701                       	dc.b	smpsNoAttack, $01
000963B3 E106                       	smpsAlterNote       $06
000963B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963B9 E109                       	smpsAlterNote       $09
000963BB E701                       	dc.b	smpsNoAttack, $01
000963BD E10F                       	smpsAlterNote       $0F
000963BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963C3 E109                       	smpsAlterNote       $09
000963C5 E701                       	dc.b	smpsNoAttack, $01
000963C7 E106                       	smpsAlterNote       $06
000963C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963CD E10C                       	smpsAlterNote       $0C
000963CF E701                       	dc.b	smpsNoAttack, $01
000963D1 E110                       	smpsAlterNote       $10
000963D3 E701                       	dc.b	smpsNoAttack, $01
000963D5 E10F                       	smpsAlterNote       $0F
000963D7 E701                       	dc.b	smpsNoAttack, $01
000963D9 E109                       	smpsAlterNote       $09
000963DB E701                       	dc.b	smpsNoAttack, $01
000963DD E105                       	smpsAlterNote       $05
000963DF E701                       	dc.b	smpsNoAttack, $01
000963E1 E109                       	smpsAlterNote       $09
000963E3 E701                       	dc.b	smpsNoAttack, $01
000963E5 E10F                       	smpsAlterNote       $0F
000963E7 E701                       	dc.b	smpsNoAttack, $01
000963E9 E110                       	smpsAlterNote       $10
000963EB E701                       	dc.b	smpsNoAttack, $01
000963ED E10C                       	smpsAlterNote       $0C
000963EF E701                       	dc.b	smpsNoAttack, $01
000963F1 E106                       	smpsAlterNote       $06
000963F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963F7 E109                       	smpsAlterNote       $09
000963F9 E701                       	dc.b	smpsNoAttack, $01
000963FB E10F                       	smpsAlterNote       $0F
000963FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096401 E109                       	smpsAlterNote       $09
00096403 E701                       	dc.b	smpsNoAttack, $01
00096405 E106                       	smpsAlterNote       $06
00096407 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009640B E10C                       	smpsAlterNote       $0C
0009640D E701                       	dc.b	smpsNoAttack, $01
0009640F E110                       	smpsAlterNote       $10
00096411 E701                       	dc.b	smpsNoAttack, $01
00096413 E10F                       	smpsAlterNote       $0F
00096415 E701                       	dc.b	smpsNoAttack, $01
00096417 E109                       	smpsAlterNote       $09
00096419 E701                       	dc.b	smpsNoAttack, $01
0009641B E105                       	smpsAlterNote       $05
0009641D E701                       	dc.b	smpsNoAttack, $01
0009641F E109                       	smpsAlterNote       $09
00096421 E701                       	dc.b	smpsNoAttack, $01
00096423 E10C                       	smpsAlterNote       $0C
00096425 E701                       	dc.b	smpsNoAttack, $01
00096427 E110                       	smpsAlterNote       $10
00096429 E701                       	dc.b	smpsNoAttack, $01
0009642B E10C                       	smpsAlterNote       $0C
0009642D E701                       	dc.b	smpsNoAttack, $01
0009642F E106                       	smpsAlterNote       $06
00096431 E701                       	dc.b	smpsNoAttack, $01
00096433 E105                       	smpsAlterNote       $05
00096435 E701                       	dc.b	smpsNoAttack, $01
00096437 E109                       	smpsAlterNote       $09
00096439 E701                       	dc.b	smpsNoAttack, $01
0009643B E10F                       	smpsAlterNote       $0F
0009643D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096441 E10C                       	smpsAlterNote       $0C
00096443 E701                       	dc.b	smpsNoAttack, $01
00096445 E106                       	smpsAlterNote       $06
00096447 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009644B E10C                       	smpsAlterNote       $0C
0009644D E701                       	dc.b	smpsNoAttack, $01
0009644F E10F                       	smpsAlterNote       $0F
00096451 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096455 E109                       	smpsAlterNote       $09
00096457 E701                       	dc.b	smpsNoAttack, $01
00096459 E105                       	smpsAlterNote       $05
0009645B E701                       	dc.b	smpsNoAttack, $01
0009645D E106                       	smpsAlterNote       $06
0009645F E701                       	dc.b	smpsNoAttack, $01
00096461 E10C                       	smpsAlterNote       $0C
00096463 E701                       	dc.b	smpsNoAttack, $01
00096465 E110                       	smpsAlterNote       $10
00096467 E701                       	dc.b	smpsNoAttack, $01
00096469 E10C                       	smpsAlterNote       $0C
0009646B E701                       	dc.b	smpsNoAttack, $01
0009646D E109                       	smpsAlterNote       $09
0009646F E701                       	dc.b	smpsNoAttack, $01
00096471 E105                       	smpsAlterNote       $05
00096473 E701                       	dc.b	smpsNoAttack, $01
00096475 E109                       	smpsAlterNote       $09
00096477 E701                       	dc.b	smpsNoAttack, $01
00096479 E10F                       	smpsAlterNote       $0F
0009647B E701                       	dc.b	smpsNoAttack, $01
0009647D E110                       	smpsAlterNote       $10
0009647F E701                       	dc.b	smpsNoAttack, $01
00096481 E10C                       	smpsAlterNote       $0C
00096483 E701                       	dc.b	smpsNoAttack, $01
00096485 E106                       	smpsAlterNote       $06
00096487 E701                       	dc.b	smpsNoAttack, $01
00096489 E10B                       	smpsAlterNote       $0B
0009648B BF02                       	dc.b	nD5, $02
0009648D E10C                       	smpsAlterNote       $0C
0009648F C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00096495 E109                       	smpsAlterNote       $09
00096497 E701                       	dc.b	smpsNoAttack, $01
00096499 E105                       	smpsAlterNote       $05
0009649B E701                       	dc.b	smpsNoAttack, $01
0009649D E109                       	smpsAlterNote       $09
0009649F E701                       	dc.b	smpsNoAttack, $01
000964A1 E10F                       	smpsAlterNote       $0F
000964A3 E701                       	dc.b	smpsNoAttack, $01
000964A5 E110                       	smpsAlterNote       $10
000964A7 E701                       	dc.b	smpsNoAttack, $01
000964A9 E10C                       	smpsAlterNote       $0C
000964AB E701                       	dc.b	smpsNoAttack, $01
000964AD E106                       	smpsAlterNote       $06
000964AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964B3 E109                       	smpsAlterNote       $09
000964B5 E701                       	dc.b	smpsNoAttack, $01
000964B7 E10F                       	smpsAlterNote       $0F
000964B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964BD E109                       	smpsAlterNote       $09
000964BF E701                       	dc.b	smpsNoAttack, $01
000964C1 E106                       	smpsAlterNote       $06
000964C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964C7 E10C                       	smpsAlterNote       $0C
000964C9 E701                       	dc.b	smpsNoAttack, $01
000964CB E110                       	smpsAlterNote       $10
000964CD E701                       	dc.b	smpsNoAttack, $01
000964CF E10F                       	smpsAlterNote       $0F
000964D1 E701                       	dc.b	smpsNoAttack, $01
000964D3 E109                       	smpsAlterNote       $09
000964D5 E701                       	dc.b	smpsNoAttack, $01
000964D7 E105                       	smpsAlterNote       $05
000964D9 E701                       	dc.b	smpsNoAttack, $01
000964DB E109                       	smpsAlterNote       $09
000964DD E701                       	dc.b	smpsNoAttack, $01
000964DF E10C                       	smpsAlterNote       $0C
000964E1 E701                       	dc.b	smpsNoAttack, $01
000964E3 E110                       	smpsAlterNote       $10
000964E5 E701                       	dc.b	smpsNoAttack, $01
000964E7 E10C                       	smpsAlterNote       $0C
000964E9 E701                       	dc.b	smpsNoAttack, $01
000964EB E106                       	smpsAlterNote       $06
000964ED E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000964F1 E10D                       	smpsAlterNote       $0D
000964F3 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000964FB E10C                       	smpsAlterNote       $0C
000964FD C10D                       	dc.b	nE5, $0D
000964FF E106                       	smpsAlterNote       $06
00096501 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096505 E109                       	smpsAlterNote       $09
00096507 E701                       	dc.b	smpsNoAttack, $01
00096509 E10F                       	smpsAlterNote       $0F
0009650B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009650F E109                       	smpsAlterNote       $09
00096511 E701                       	dc.b	smpsNoAttack, $01
00096513 E106                       	smpsAlterNote       $06
00096515 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096519 E10C                       	smpsAlterNote       $0C
0009651B E701                       	dc.b	smpsNoAttack, $01
0009651D E110                       	smpsAlterNote       $10
0009651F E701                       	dc.b	smpsNoAttack, $01
00096521 E10F                       	smpsAlterNote       $0F
00096523 E701                       	dc.b	smpsNoAttack, $01
00096525 E109                       	smpsAlterNote       $09
00096527 E701                       	dc.b	smpsNoAttack, $01
00096529 E105                       	smpsAlterNote       $05
0009652B E701                       	dc.b	smpsNoAttack, $01
0009652D E106                       	smpsAlterNote       $06
0009652F 800F                       	dc.b	nRst, $0F
00096533 E6FF                       	smpsAlterVol        $FF
00096535 E10F                       	smpsAlterNote       $0F
00096537 BA01                       	dc.b	nA4, $01
00096539 E110                       	smpsAlterNote       $10
0009653B BB02                       	dc.b	nBb4, $02
0009653D E10F                       	smpsAlterNote       $0F
0009653F BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00096545 E10B                       	smpsAlterNote       $0B
00096547 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0009654B E10C                       	smpsAlterNote       $0C
0009654D C103                       	dc.b	nE5, $03
0009654F E10D                       	smpsAlterNote       $0D
00096551 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0009655B E10B                       	smpsAlterNote       $0B
0009655D BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00096561 E104                       	smpsAlterNote       $04
00096563 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096567 E10A                       	smpsAlterNote       $0A
00096569 E701                       	dc.b	smpsNoAttack, $01
0009656B E10D                       	smpsAlterNote       $0D
0009656D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096571 E107                       	smpsAlterNote       $07
00096573 E701                       	dc.b	smpsNoAttack, $01
00096575 E104                       	smpsAlterNote       $04
00096577 8001                       	dc.b	nRst, $01
00096579 E110                       	smpsAlterNote       $10
0009657B C703                       	dc.b	nBb5, $03
0009657D E10F                       	smpsAlterNote       $0F
0009657F C603 8001                  	dc.b	nA5, $03, nRst, $01
00096583 E10D                       	smpsAlterNote       $0D
00096585 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00096589 E10C                       	smpsAlterNote       $0C
0009658B E701                       	dc.b	smpsNoAttack, $01
0009658D E108                       	smpsAlterNote       $08
0009658F E701                       	dc.b	smpsNoAttack, $01
00096591 E109                       	smpsAlterNote       $09
00096593 E701                       	dc.b	smpsNoAttack, $01
00096595 E10F                       	smpsAlterNote       $0F
00096597 E701                       	dc.b	smpsNoAttack, $01
00096599 E113                       	smpsAlterNote       $13
0009659B E701                       	dc.b	smpsNoAttack, $01
0009659D E10F                       	smpsAlterNote       $0F
0009659F E701                       	dc.b	smpsNoAttack, $01
000965A1 E10C                       	smpsAlterNote       $0C
000965A3 E701                       	dc.b	smpsNoAttack, $01
000965A5 E108                       	smpsAlterNote       $08
000965A7 E701                       	dc.b	smpsNoAttack, $01
000965A9 E10C                       	smpsAlterNote       $0C
000965AB E701                       	dc.b	smpsNoAttack, $01
000965AD E112                       	smpsAlterNote       $12
000965AF E701                       	dc.b	smpsNoAttack, $01
000965B1 E113                       	smpsAlterNote       $13
000965B3 E701                       	dc.b	smpsNoAttack, $01
000965B5 E10F                       	smpsAlterNote       $0F
000965B7 E701                       	dc.b	smpsNoAttack, $01
000965B9 E109                       	smpsAlterNote       $09
000965BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965BF E10C                       	smpsAlterNote       $0C
000965C1 E701                       	dc.b	smpsNoAttack, $01
000965C3 E112                       	smpsAlterNote       $12
000965C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965C9 E10C                       	smpsAlterNote       $0C
000965CB E701                       	dc.b	smpsNoAttack, $01
000965CD E109                       	smpsAlterNote       $09
000965CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965D3 E10F                       	smpsAlterNote       $0F
000965D5 E701                       	dc.b	smpsNoAttack, $01
000965D7 E113                       	smpsAlterNote       $13
000965D9 E701                       	dc.b	smpsNoAttack, $01
000965DB E112                       	smpsAlterNote       $12
000965DD E701                       	dc.b	smpsNoAttack, $01
000965DF E10C                       	smpsAlterNote       $0C
000965E1 E701                       	dc.b	smpsNoAttack, $01
000965E3 E108                       	smpsAlterNote       $08
000965E5 E701                       	dc.b	smpsNoAttack, $01
000965E7 E10C                       	smpsAlterNote       $0C
000965E9 E701                       	dc.b	smpsNoAttack, $01
000965EB E10F                       	smpsAlterNote       $0F
000965ED E701                       	dc.b	smpsNoAttack, $01
000965EF E113                       	smpsAlterNote       $13
000965F1 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000965F5 E10B                       	smpsAlterNote       $0B
000965F7 BF03                       	dc.b	nD5, $03
000965F9 E10C                       	smpsAlterNote       $0C
000965FB C103 8001                  	dc.b	nE5, $03, nRst, $01
000965FF E10D                       	smpsAlterNote       $0D
00096601 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0009660B E10B                       	smpsAlterNote       $0B
0009660D BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00096619 E110                       	smpsAlterNote       $10
0009661B C704 8001                  	dc.b	nBb5, $04, nRst, $01
0009661F E10F                       	smpsAlterNote       $0F
00096621 C604                       	dc.b	nA5, $04
00096623 E10D                       	smpsAlterNote       $0D
00096625 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0009662B E109                       	smpsAlterNote       $09
0009662D E701                       	dc.b	smpsNoAttack, $01
0009662F E108                       	smpsAlterNote       $08
00096631 E701                       	dc.b	smpsNoAttack, $01
00096633 E10C                       	smpsAlterNote       $0C
00096635 E701                       	dc.b	smpsNoAttack, $01
00096637 E112                       	smpsAlterNote       $12
00096639 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009663D E10F                       	smpsAlterNote       $0F
0009663F E701                       	dc.b	smpsNoAttack, $01
00096641 E109                       	smpsAlterNote       $09
00096643 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096647 E10F                       	smpsAlterNote       $0F
00096649 E701                       	dc.b	smpsNoAttack, $01
0009664B E112                       	smpsAlterNote       $12
0009664D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096651 E10C                       	smpsAlterNote       $0C
00096653 E701                       	dc.b	smpsNoAttack, $01
00096655 E108                       	smpsAlterNote       $08
00096657 E701                       	dc.b	smpsNoAttack, $01
00096659 E109                       	smpsAlterNote       $09
0009665B E701                       	dc.b	smpsNoAttack, $01
0009665D E10F                       	smpsAlterNote       $0F
0009665F E701                       	dc.b	smpsNoAttack, $01
00096661 E113                       	smpsAlterNote       $13
00096663 E701                       	dc.b	smpsNoAttack, $01
00096665 E10F                       	smpsAlterNote       $0F
00096667 E701                       	dc.b	smpsNoAttack, $01
00096669 E10C                       	smpsAlterNote       $0C
0009666B E701                       	dc.b	smpsNoAttack, $01
0009666D E108                       	smpsAlterNote       $08
0009666F E701                       	dc.b	smpsNoAttack, $01
00096671 E10C                       	smpsAlterNote       $0C
00096673 E701                       	dc.b	smpsNoAttack, $01
00096675 E112                       	smpsAlterNote       $12
00096677 E701                       	dc.b	smpsNoAttack, $01
00096679 E113                       	smpsAlterNote       $13
0009667B E701                       	dc.b	smpsNoAttack, $01
0009667D E10F                       	smpsAlterNote       $0F
0009667F E701                       	dc.b	smpsNoAttack, $01
00096681 E109                       	smpsAlterNote       $09
00096683 E701                       	dc.b	smpsNoAttack, $01
00096685 E10D                       	smpsAlterNote       $0D
00096687 C402                       	dc.b	nG5, $02
00096689 E10F                       	smpsAlterNote       $0F
0009668B C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00096695 E10D                       	smpsAlterNote       $0D
00096697 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0009669D E10B                       	smpsAlterNote       $0B
0009669F BF0D                       	dc.b	nD5, $0D
000966A1 E108                       	smpsAlterNote       $08
000966A3 E701                       	dc.b	smpsNoAttack, $01
000966A5 E104                       	smpsAlterNote       $04
000966A7 E701                       	dc.b	smpsNoAttack, $01
000966A9 E105                       	smpsAlterNote       $05
000966AB E701                       	dc.b	smpsNoAttack, $01
000966AD E10B                       	smpsAlterNote       $0B
000966AF E701                       	dc.b	smpsNoAttack, $01
000966B1 E10F                       	smpsAlterNote       $0F
000966B3 E701                       	dc.b	smpsNoAttack, $01
000966B5 E10B                       	smpsAlterNote       $0B
000966B7 E701                       	dc.b	smpsNoAttack, $01
000966B9 E108                       	smpsAlterNote       $08
000966BB E701                       	dc.b	smpsNoAttack, $01
000966BD E104                       	smpsAlterNote       $04
000966BF E701                       	dc.b	smpsNoAttack, $01
000966C1 E108                       	smpsAlterNote       $08
000966C3 E701                       	dc.b	smpsNoAttack, $01
000966C5 E10E                       	smpsAlterNote       $0E
000966C7 E701                       	dc.b	smpsNoAttack, $01
000966C9 E10F                       	smpsAlterNote       $0F
000966CB E701                       	dc.b	smpsNoAttack, $01
000966CD E10C                       	smpsAlterNote       $0C
000966CF C101                       	dc.b	nE5, $01
000966D1 E10D                       	smpsAlterNote       $0D
000966D3 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000966DB E10F                       	smpsAlterNote       $0F
000966DD C607                       	dc.b	nA5, $07
000966DF E10C                       	smpsAlterNote       $0C
000966E1 CD07                       	dc.b	nE6, $07
000966E3 E10D                       	smpsAlterNote       $0D
000966E5 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000966E9 E10C                       	smpsAlterNote       $0C
000966EB CD03                       	dc.b	nE6, $03
000966ED E10A                       	smpsAlterNote       $0A
000966EF C903 8001                  	dc.b	nC6, $03, nRst, $01
000966F3 E10D                       	smpsAlterNote       $0D
000966F5 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000966FB E10A                       	smpsAlterNote       $0A
000966FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096701 E110                       	smpsAlterNote       $10
00096703 E701                       	dc.b	smpsNoAttack, $01
00096705 E114                       	smpsAlterNote       $14
00096707 E701                       	dc.b	smpsNoAttack, $01
00096709 E113                       	smpsAlterNote       $13
0009670B E701                       	dc.b	smpsNoAttack, $01
0009670D E10D                       	smpsAlterNote       $0D
0009670F E701                       	dc.b	smpsNoAttack, $01
00096711 E109                       	smpsAlterNote       $09
00096713 E701                       	dc.b	smpsNoAttack, $01
00096715 E10D                       	smpsAlterNote       $0D
00096717 E701                       	dc.b	smpsNoAttack, $01
00096719 E110                       	smpsAlterNote       $10
0009671B E701                       	dc.b	smpsNoAttack, $01
0009671D E114                       	smpsAlterNote       $14
0009671F E701                       	dc.b	smpsNoAttack, $01
00096721 E10F                       	smpsAlterNote       $0F
00096723 C607                       	dc.b	nA5, $07
00096725 E10D                       	smpsAlterNote       $0D
00096727 C40D                       	dc.b	nG5, $0D
00096729 E10A                       	smpsAlterNote       $0A
0009672B E701                       	dc.b	smpsNoAttack, $01
0009672D E106                       	smpsAlterNote       $06
0009672F E701                       	dc.b	smpsNoAttack, $01
00096731 E10A                       	smpsAlterNote       $0A
00096733 E701                       	dc.b	smpsNoAttack, $01
00096735 E10D                       	smpsAlterNote       $0D
00096737 E701                       	dc.b	smpsNoAttack, $01
00096739 E111                       	smpsAlterNote       $11
0009673B E701                       	dc.b	smpsNoAttack, $01
0009673D E10D                       	smpsAlterNote       $0D
0009673F E701                       	dc.b	smpsNoAttack, $01
00096741 E107                       	smpsAlterNote       $07
00096743 E701                       	dc.b	smpsNoAttack, $01
00096745 E106                       	smpsAlterNote       $06
00096747 E701                       	dc.b	smpsNoAttack, $01
00096749 E10A                       	smpsAlterNote       $0A
0009674B E701                       	dc.b	smpsNoAttack, $01
0009674D E110                       	smpsAlterNote       $10
0009674F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096753 E10D                       	smpsAlterNote       $0D
00096755 E701                       	dc.b	smpsNoAttack, $01
00096757 E107                       	smpsAlterNote       $07
00096759 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009675D E10F                       	smpsAlterNote       $0F
0009675F C60E                       	dc.b	nA5, $0E
00096761 E109                       	smpsAlterNote       $09
00096763 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096767 E10F                       	smpsAlterNote       $0F
00096769 E701                       	dc.b	smpsNoAttack, $01
0009676B E112                       	smpsAlterNote       $12
0009676D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096771 E10C                       	smpsAlterNote       $0C
00096773 E701                       	dc.b	smpsNoAttack, $01
00096775 E108                       	smpsAlterNote       $08
00096777 E701                       	dc.b	smpsNoAttack, $01
00096779 E109                       	smpsAlterNote       $09
0009677B E701                       	dc.b	smpsNoAttack, $01
0009677D E10F                       	smpsAlterNote       $0F
0009677F E701                       	dc.b	smpsNoAttack, $01
00096781 E113                       	smpsAlterNote       $13
00096783 E701                       	dc.b	smpsNoAttack, $01
00096785 E10F                       	smpsAlterNote       $0F
00096787 E701                       	dc.b	smpsNoAttack, $01
00096789 E10C                       	smpsAlterNote       $0C
0009678B E701                       	dc.b	smpsNoAttack, $01
0009678D E108                       	smpsAlterNote       $08
0009678F E701                       	dc.b	smpsNoAttack, $01
00096791 E109                       	smpsAlterNote       $09
00096793 8001                       	dc.b	nRst, $01
00096795 E110                       	smpsAlterNote       $10
00096797 C70D                       	dc.b	nBb5, $0D
00096799 E10D                       	smpsAlterNote       $0D
0009679B E701                       	dc.b	smpsNoAttack, $01
0009679D E109                       	smpsAlterNote       $09
0009679F E701                       	dc.b	smpsNoAttack, $01
000967A1 E10D                       	smpsAlterNote       $0D
000967A3 E701                       	dc.b	smpsNoAttack, $01
000967A5 E113                       	smpsAlterNote       $13
000967A7 E701                       	dc.b	smpsNoAttack, $01
000967A9 E114                       	smpsAlterNote       $14
000967AB E701                       	dc.b	smpsNoAttack, $01
000967AD E110                       	smpsAlterNote       $10
000967AF E701                       	dc.b	smpsNoAttack, $01
000967B1 E10A                       	smpsAlterNote       $0A
000967B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967B7 E10D                       	smpsAlterNote       $0D
000967B9 E701                       	dc.b	smpsNoAttack, $01
000967BB E113                       	smpsAlterNote       $13
000967BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967C1 E10D                       	smpsAlterNote       $0D
000967C3 E701                       	dc.b	smpsNoAttack, $01
000967C5 E10A                       	smpsAlterNote       $0A
000967C7 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
000967D1 E10B                       	smpsAlterNote       $0B
000967D3 8001                       	dc.b	nRst, $01
000967D5 E10C                       	smpsAlterNote       $0C
000967D7 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
000967DB E10B                       	smpsAlterNote       $0B
000967DD CB0D                       	dc.b	nD6, $0D
000967DF E105                       	smpsAlterNote       $05
000967E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967E5 E108                       	smpsAlterNote       $08
000967E7 E701                       	dc.b	smpsNoAttack, $01
000967E9 E10E                       	smpsAlterNote       $0E
000967EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967EF E108                       	smpsAlterNote       $08
000967F1 E701                       	dc.b	smpsNoAttack, $01
000967F3 E105                       	smpsAlterNote       $05
000967F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967F9 E10B                       	smpsAlterNote       $0B
000967FB E701                       	dc.b	smpsNoAttack, $01
000967FD E10F                       	smpsAlterNote       $0F
000967FF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096803 E10C                       	smpsAlterNote       $0C
00096805 CC0D                       	dc.b	nEb6, $0D
00096807 E106                       	smpsAlterNote       $06
00096809 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009680D E109                       	smpsAlterNote       $09
0009680F E701                       	dc.b	smpsNoAttack, $01
00096811 E10C                       	smpsAlterNote       $0C
00096813 8001                       	dc.b	nRst, $01
00096815 E10A                       	smpsAlterNote       $0A
00096817 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00096823 CB0E                       	dc.b	nD6, $0E
00096825 E105                       	smpsAlterNote       $05
00096827 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009682B E10B                       	smpsAlterNote       $0B
0009682D E701                       	dc.b	smpsNoAttack, $01
0009682F E10E                       	smpsAlterNote       $0E
00096831 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096835 E108                       	smpsAlterNote       $08
00096837 E701                       	dc.b	smpsNoAttack, $01
00096839 E104                       	smpsAlterNote       $04
0009683B E701                       	dc.b	smpsNoAttack, $01
0009683D E105                       	smpsAlterNote       $05
0009683F E701                       	dc.b	smpsNoAttack, $01
00096841 E10B                       	smpsAlterNote       $0B
00096843 E701                       	dc.b	smpsNoAttack, $01
00096845 E10F                       	smpsAlterNote       $0F
00096847 E701                       	dc.b	smpsNoAttack, $01
00096849 E10D                       	smpsAlterNote       $0D
0009684B CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0009684F E10C                       	smpsAlterNote       $0C
00096851 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00096855 E10A                       	smpsAlterNote       $0A
00096857 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00096863 CB0D                       	dc.b	nD6, $0D
00096865 E108                       	smpsAlterNote       $08
00096867 E701                       	dc.b	smpsNoAttack, $01
00096869 E104                       	smpsAlterNote       $04
0009686B E701                       	dc.b	smpsNoAttack, $01
0009686D E105                       	smpsAlterNote       $05
0009686F E701                       	dc.b	smpsNoAttack, $01
00096871 E10B                       	smpsAlterNote       $0B
00096873 E701                       	dc.b	smpsNoAttack, $01
00096875 E10F                       	smpsAlterNote       $0F
00096877 E701                       	dc.b	smpsNoAttack, $01
00096879 E10B                       	smpsAlterNote       $0B
0009687B E701                       	dc.b	smpsNoAttack, $01
0009687D E108                       	smpsAlterNote       $08
0009687F E701                       	dc.b	smpsNoAttack, $01
00096881 E104                       	smpsAlterNote       $04
00096883 E701                       	dc.b	smpsNoAttack, $01
00096885 E108                       	smpsAlterNote       $08
00096887 E701                       	dc.b	smpsNoAttack, $01
00096889 E10E                       	smpsAlterNote       $0E
0009688B E701                       	dc.b	smpsNoAttack, $01
0009688D E10F                       	smpsAlterNote       $0F
0009688F E701                       	dc.b	smpsNoAttack, $01
00096891 E10C                       	smpsAlterNote       $0C
00096893 CC0D                       	dc.b	nEb6, $0D
00096895 E109                       	smpsAlterNote       $09
00096897 E701                       	dc.b	smpsNoAttack, $01
00096899 E105                       	smpsAlterNote       $05
0009689B E701                       	dc.b	smpsNoAttack, $01
0009689D E106                       	smpsAlterNote       $06
0009689F E701                       	dc.b	smpsNoAttack, $01
000968A1 E10C                       	smpsAlterNote       $0C
000968A3 E701                       	dc.b	smpsNoAttack, $01
000968A5 E10A                       	smpsAlterNote       $0A
000968A7 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
000968B3 CB0D                       	dc.b	nD6, $0D
000968B5 E108                       	smpsAlterNote       $08
000968B7 E701                       	dc.b	smpsNoAttack, $01
000968B9 E104                       	smpsAlterNote       $04
000968BB E701                       	dc.b	smpsNoAttack, $01
000968BD E108                       	smpsAlterNote       $08
000968BF E701                       	dc.b	smpsNoAttack, $01
000968C1 E10B                       	smpsAlterNote       $0B
000968C3 E701                       	dc.b	smpsNoAttack, $01
000968C5 E10F                       	smpsAlterNote       $0F
000968C7 E701                       	dc.b	smpsNoAttack, $01
000968C9 E10B                       	smpsAlterNote       $0B
000968CB E701                       	dc.b	smpsNoAttack, $01
000968CD E105                       	smpsAlterNote       $05
000968CF E701                       	dc.b	smpsNoAttack, $01
000968D1 E104                       	smpsAlterNote       $04
000968D3 E701                       	dc.b	smpsNoAttack, $01
000968D5 E108                       	smpsAlterNote       $08
000968D7 E701                       	dc.b	smpsNoAttack, $01
000968D9 E10E                       	smpsAlterNote       $0E
000968DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968DF E10B                       	smpsAlterNote       $0B
000968E1 E701                       	dc.b	smpsNoAttack, $01
000968E3 E105                       	smpsAlterNote       $05
000968E5 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
000968ED 03                         	dc.b	$03
000968EE E601                       	smpsAlterVol        $01
000968F0 F6F1 D1                    	smpsJump            music84_Jump01
000968F3                            
000968F3                            ; FM5 Data
000968F3                            music84_FM5:
000968F5 E080                       	smpsPan             panLeft, $00
000968F7 8003                       	dc.b	nRst, $03
000968F9 E10D                       	smpsAlterNote       $0D
000968FB C203 8008                  	dc.b	nF5, $03, nRst, $08
000968FF E10C                       	smpsAlterNote       $0C
00096901 C103 800A                  	dc.b	nE5, $03, nRst, $0A
00096905 E10F                       	smpsAlterNote       $0F
00096907 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0009690D E6FE                       	smpsAlterVol        $FE
0009690F C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00096915 E10D                       	smpsAlterNote       $0D
00096917 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009691D E10C                       	smpsAlterNote       $0C
0009691F C102 8001                  	dc.b	nE5, $02, nRst, $01
00096923 E10A                       	smpsAlterNote       $0A
00096925 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0009692B 03                         	dc.b	$03
0009692C                            
0009692C                            music84_Jump00:
0009692C 8004                       	dc.b	nRst, $04
0009692E E602                       	smpsAlterVol        $02
00096930 E10D                       	smpsAlterNote       $0D
00096932 B60D                       	dc.b	nF4, $0D
00096934 E107                       	smpsAlterNote       $07
00096936 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009693A E10A                       	smpsAlterNote       $0A
0009693C E701                       	dc.b	smpsNoAttack, $01
0009693E E110                       	smpsAlterNote       $10
00096940 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096944 E10A                       	smpsAlterNote       $0A
00096946 E701                       	dc.b	smpsNoAttack, $01
00096948 E107                       	smpsAlterNote       $07
0009694A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009694E E10D                       	smpsAlterNote       $0D
00096950 E701                       	dc.b	smpsNoAttack, $01
00096952 E111                       	smpsAlterNote       $11
00096954 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096958 E10D                       	smpsAlterNote       $0D
0009695A B80D                       	dc.b	nG4, $0D
0009695C E107                       	smpsAlterNote       $07
0009695E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096962 E10A                       	smpsAlterNote       $0A
00096964 E701                       	dc.b	smpsNoAttack, $01
00096966 E110                       	smpsAlterNote       $10
00096968 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009696C E10A                       	smpsAlterNote       $0A
0009696E E701                       	dc.b	smpsNoAttack, $01
00096970 E107                       	smpsAlterNote       $07
00096972 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096976 E10D                       	smpsAlterNote       $0D
00096978 E701                       	dc.b	smpsNoAttack, $01
0009697A E111                       	smpsAlterNote       $11
0009697C E701                       	dc.b	smpsNoAttack, $01
0009697E E110                       	smpsAlterNote       $10
00096980 E701                       	dc.b	smpsNoAttack, $01
00096982 E10A                       	smpsAlterNote       $0A
00096984 E701                       	dc.b	smpsNoAttack, $01
00096986 E106                       	smpsAlterNote       $06
00096988 E701                       	dc.b	smpsNoAttack, $01
0009698A E10A                       	smpsAlterNote       $0A
0009698C E701                       	dc.b	smpsNoAttack, $01
0009698E E10D                       	smpsAlterNote       $0D
00096990 E701                       	dc.b	smpsNoAttack, $01
00096992 E111                       	smpsAlterNote       $11
00096994 E701                       	dc.b	smpsNoAttack, $01
00096996 E10D                       	smpsAlterNote       $0D
00096998 E701                       	dc.b	smpsNoAttack, $01
0009699A E10F                       	smpsAlterNote       $0F
0009699C BA0E                       	dc.b	nA4, $0E
0009699E E109                       	smpsAlterNote       $09
000969A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969A4 E10F                       	smpsAlterNote       $0F
000969A6 E701                       	dc.b	smpsNoAttack, $01
000969A8 E112                       	smpsAlterNote       $12
000969AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969AE E10C                       	smpsAlterNote       $0C
000969B0 E701                       	dc.b	smpsNoAttack, $01
000969B2 E108                       	smpsAlterNote       $08
000969B4 E701                       	dc.b	smpsNoAttack, $01
000969B6 E109                       	smpsAlterNote       $09
000969B8 E701                       	dc.b	smpsNoAttack, $01
000969BA E10F                       	smpsAlterNote       $0F
000969BC E701                       	dc.b	smpsNoAttack, $01
000969BE E113                       	smpsAlterNote       $13
000969C0 E701                       	dc.b	smpsNoAttack, $01
000969C2 E10F                       	smpsAlterNote       $0F
000969C4 E701                       	dc.b	smpsNoAttack, $01
000969C6 E109                       	smpsAlterNote       $09
000969C8 E701                       	dc.b	smpsNoAttack, $01
000969CA E108                       	smpsAlterNote       $08
000969CC E701                       	dc.b	smpsNoAttack, $01
000969CE E10C                       	smpsAlterNote       $0C
000969D0 E701                       	dc.b	smpsNoAttack, $01
000969D2 E112                       	smpsAlterNote       $12
000969D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969D8 E10F                       	smpsAlterNote       $0F
000969DA E701                       	dc.b	smpsNoAttack, $01
000969DC E109                       	smpsAlterNote       $09
000969DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969E2 E10F                       	smpsAlterNote       $0F
000969E4 E701                       	dc.b	smpsNoAttack, $01
000969E6 E112                       	smpsAlterNote       $12
000969E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969EC E10C                       	smpsAlterNote       $0C
000969EE E701                       	dc.b	smpsNoAttack, $01
000969F0 E108                       	smpsAlterNote       $08
000969F2 E701                       	dc.b	smpsNoAttack, $01
000969F4 E109                       	smpsAlterNote       $09
000969F6 E701                       	dc.b	smpsNoAttack, $01
000969F8 E10F                       	smpsAlterNote       $0F
000969FA E701                       	dc.b	smpsNoAttack, $01
000969FC E113                       	smpsAlterNote       $13
000969FE E701                       	dc.b	smpsNoAttack, $01
00096A00 E10F                       	smpsAlterNote       $0F
00096A02 E701                       	dc.b	smpsNoAttack, $01
00096A04 E10C                       	smpsAlterNote       $0C
00096A06 E701                       	dc.b	smpsNoAttack, $01
00096A08 E108                       	smpsAlterNote       $08
00096A0A E701                       	dc.b	smpsNoAttack, $01
00096A0C E109                       	smpsAlterNote       $09
00096A0E 8001                       	dc.b	nRst, $01
00096A10 E10C                       	smpsAlterNote       $0C
00096A12 B50A                       	dc.b	nE4, $0A
00096A14 E10D                       	smpsAlterNote       $0D
00096A16 B60D                       	dc.b	nF4, $0D
00096A18 E10A                       	smpsAlterNote       $0A
00096A1A E701                       	dc.b	smpsNoAttack, $01
00096A1C E106                       	smpsAlterNote       $06
00096A1E E701                       	dc.b	smpsNoAttack, $01
00096A20 E107                       	smpsAlterNote       $07
00096A22 E701                       	dc.b	smpsNoAttack, $01
00096A24 E10D                       	smpsAlterNote       $0D
00096A26 E701                       	dc.b	smpsNoAttack, $01
00096A28 E111                       	smpsAlterNote       $11
00096A2A E701                       	dc.b	smpsNoAttack, $01
00096A2C E10D                       	smpsAlterNote       $0D
00096A2E E701                       	dc.b	smpsNoAttack, $01
00096A30 E10A                       	smpsAlterNote       $0A
00096A32 E701                       	dc.b	smpsNoAttack, $01
00096A34 E106                       	smpsAlterNote       $06
00096A36 E701                       	dc.b	smpsNoAttack, $01
00096A38 E10A                       	smpsAlterNote       $0A
00096A3A E701                       	dc.b	smpsNoAttack, $01
00096A3C E110                       	smpsAlterNote       $10
00096A3E E701                       	dc.b	smpsNoAttack, $01
00096A40 E111                       	smpsAlterNote       $11
00096A42 E701                       	dc.b	smpsNoAttack, $01
00096A44 E10D                       	smpsAlterNote       $0D
00096A46 B80D                       	dc.b	nG4, $0D
00096A48 E10A                       	smpsAlterNote       $0A
00096A4A E701                       	dc.b	smpsNoAttack, $01
00096A4C E106                       	smpsAlterNote       $06
00096A4E E701                       	dc.b	smpsNoAttack, $01
00096A50 E107                       	smpsAlterNote       $07
00096A52 E701                       	dc.b	smpsNoAttack, $01
00096A54 E10D                       	smpsAlterNote       $0D
00096A56 E701                       	dc.b	smpsNoAttack, $01
00096A58 E111                       	smpsAlterNote       $11
00096A5A E701                       	dc.b	smpsNoAttack, $01
00096A5C E10D                       	smpsAlterNote       $0D
00096A5E E701                       	dc.b	smpsNoAttack, $01
00096A60 E10A                       	smpsAlterNote       $0A
00096A62 E701                       	dc.b	smpsNoAttack, $01
00096A64 E106                       	smpsAlterNote       $06
00096A66 E701                       	dc.b	smpsNoAttack, $01
00096A68 E10A                       	smpsAlterNote       $0A
00096A6A E701                       	dc.b	smpsNoAttack, $01
00096A6C E110                       	smpsAlterNote       $10
00096A6E E701                       	dc.b	smpsNoAttack, $01
00096A70 E111                       	smpsAlterNote       $11
00096A72 E701                       	dc.b	smpsNoAttack, $01
00096A74 E10D                       	smpsAlterNote       $0D
00096A76 E701                       	dc.b	smpsNoAttack, $01
00096A78 E107                       	smpsAlterNote       $07
00096A7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A7E E10A                       	smpsAlterNote       $0A
00096A80 E701                       	dc.b	smpsNoAttack, $01
00096A82 E110                       	smpsAlterNote       $10
00096A84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A88 E10D                       	smpsAlterNote       $0D
00096A8A 8001                       	dc.b	nRst, $01
00096A8C E10F                       	smpsAlterNote       $0F
00096A8E BA0D                       	dc.b	nA4, $0D
00096A90 E10C                       	smpsAlterNote       $0C
00096A92 E701                       	dc.b	smpsNoAttack, $01
00096A94 E108                       	smpsAlterNote       $08
00096A96 E701                       	dc.b	smpsNoAttack, $01
00096A98 E10C                       	smpsAlterNote       $0C
00096A9A E701                       	dc.b	smpsNoAttack, $01
00096A9C E112                       	smpsAlterNote       $12
00096A9E E701                       	dc.b	smpsNoAttack, $01
00096AA0 E113                       	smpsAlterNote       $13
00096AA2 E701                       	dc.b	smpsNoAttack, $01
00096AA4 E10F                       	smpsAlterNote       $0F
00096AA6 E701                       	dc.b	smpsNoAttack, $01
00096AA8 E109                       	smpsAlterNote       $09
00096AAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AAE E10C                       	smpsAlterNote       $0C
00096AB0 E701                       	dc.b	smpsNoAttack, $01
00096AB2 E112                       	smpsAlterNote       $12
00096AB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AB8 E10C                       	smpsAlterNote       $0C
00096ABA E701                       	dc.b	smpsNoAttack, $01
00096ABC E109                       	smpsAlterNote       $09
00096ABE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AC2 E10F                       	smpsAlterNote       $0F
00096AC4 E701                       	dc.b	smpsNoAttack, $01
00096AC6 E113                       	smpsAlterNote       $13
00096AC8 E701                       	dc.b	smpsNoAttack, $01
00096ACA E112                       	smpsAlterNote       $12
00096ACC E701                       	dc.b	smpsNoAttack, $01
00096ACE E10C                       	smpsAlterNote       $0C
00096AD0 E701                       	dc.b	smpsNoAttack, $01
00096AD2 E108                       	smpsAlterNote       $08
00096AD4 E701                       	dc.b	smpsNoAttack, $01
00096AD6 E10C                       	smpsAlterNote       $0C
00096AD8 E701                       	dc.b	smpsNoAttack, $01
00096ADA E10F                       	smpsAlterNote       $0F
00096ADC E701                       	dc.b	smpsNoAttack, $01
00096ADE E113                       	smpsAlterNote       $13
00096AE0 E701                       	dc.b	smpsNoAttack, $01
00096AE2 E10F                       	smpsAlterNote       $0F
00096AE4 E701                       	dc.b	smpsNoAttack, $01
00096AE6 E109                       	smpsAlterNote       $09
00096AE8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096AEC E10D                       	smpsAlterNote       $0D
00096AEE B609 8001                  	dc.b	nF4, $09, nRst, $01
00096AF2 E10C                       	smpsAlterNote       $0C
00096AF4 B506 8001                  	dc.b	nE4, $06, nRst, $01
00096AF8 E10B                       	smpsAlterNote       $0B
00096AFA B30D                       	dc.b	nD4, $0D
00096AFC E10C                       	smpsAlterNote       $0C
00096AFE B503 8001                  	dc.b	nE4, $03, nRst, $01
00096B02 E10D                       	smpsAlterNote       $0D
00096B04 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00096B0C E109                       	smpsAlterNote       $09
00096B0E E701                       	dc.b	smpsNoAttack, $01
00096B10 E108                       	smpsAlterNote       $08
00096B12 E701                       	dc.b	smpsNoAttack, $01
00096B14 E10C                       	smpsAlterNote       $0C
00096B16 E701                       	dc.b	smpsNoAttack, $01
00096B18 E112                       	smpsAlterNote       $12
00096B1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B1E E10F                       	smpsAlterNote       $0F
00096B20 E701                       	dc.b	smpsNoAttack, $01
00096B22 E109                       	smpsAlterNote       $09
00096B24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B28 E10F                       	smpsAlterNote       $0F
00096B2A E701                       	dc.b	smpsNoAttack, $01
00096B2C E112                       	smpsAlterNote       $12
00096B2E E701                       	dc.b	smpsNoAttack, $01
00096B30 E113                       	smpsAlterNote       $13
00096B32 8001                       	dc.b	nRst, $01
00096B34 E10D                       	smpsAlterNote       $0D
00096B36 C20D                       	dc.b	nF5, $0D
00096B38 E107                       	smpsAlterNote       $07
00096B3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B3E E10A                       	smpsAlterNote       $0A
00096B40 E701                       	dc.b	smpsNoAttack, $01
00096B42 E110                       	smpsAlterNote       $10
00096B44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B48 E10A                       	smpsAlterNote       $0A
00096B4A E701                       	dc.b	smpsNoAttack, $01
00096B4C E107                       	smpsAlterNote       $07
00096B4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B52 E10D                       	smpsAlterNote       $0D
00096B54 E701                       	dc.b	smpsNoAttack, $01
00096B56 E111                       	smpsAlterNote       $11
00096B58 E701                       	dc.b	smpsNoAttack, $01
00096B5A E110                       	smpsAlterNote       $10
00096B5C E701                       	dc.b	smpsNoAttack, $01
00096B5E E10A                       	smpsAlterNote       $0A
00096B60 E701                       	dc.b	smpsNoAttack, $01
00096B62 E106                       	smpsAlterNote       $06
00096B64 E701                       	dc.b	smpsNoAttack, $01
00096B66 E10A                       	smpsAlterNote       $0A
00096B68 E701                       	dc.b	smpsNoAttack, $01
00096B6A E10D                       	smpsAlterNote       $0D
00096B6C E701                       	dc.b	smpsNoAttack, $01
00096B6E E111                       	smpsAlterNote       $11
00096B70 E701                       	dc.b	smpsNoAttack, $01
00096B72 E10D                       	smpsAlterNote       $0D
00096B74 E701                       	dc.b	smpsNoAttack, $01
00096B76 E107                       	smpsAlterNote       $07
00096B78 E701                       	dc.b	smpsNoAttack, $01
00096B7A E106                       	smpsAlterNote       $06
00096B7C E701                       	dc.b	smpsNoAttack, $01
00096B7E E10A                       	smpsAlterNote       $0A
00096B80 E701                       	dc.b	smpsNoAttack, $01
00096B82 E110                       	smpsAlterNote       $10
00096B84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B88 E10D                       	smpsAlterNote       $0D
00096B8A E701                       	dc.b	smpsNoAttack, $01
00096B8C E107                       	smpsAlterNote       $07
00096B8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B92 E10D                       	smpsAlterNote       $0D
00096B94 E701                       	dc.b	smpsNoAttack, $01
00096B96 E110                       	smpsAlterNote       $10
00096B98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B9C E10A                       	smpsAlterNote       $0A
00096B9E E701                       	dc.b	smpsNoAttack, $01
00096BA0 E106                       	smpsAlterNote       $06
00096BA2 E701                       	dc.b	smpsNoAttack, $01
00096BA4 E107                       	smpsAlterNote       $07
00096BA6 E701                       	dc.b	smpsNoAttack, $01
00096BA8 E10D                       	smpsAlterNote       $0D
00096BAA E701                       	dc.b	smpsNoAttack, $01
00096BAC E111                       	smpsAlterNote       $11
00096BAE E701                       	dc.b	smpsNoAttack, $01
00096BB0 E10D                       	smpsAlterNote       $0D
00096BB2 E701                       	dc.b	smpsNoAttack, $01
00096BB4 E10A                       	smpsAlterNote       $0A
00096BB6 E701                       	dc.b	smpsNoAttack, $01
00096BB8 E106                       	smpsAlterNote       $06
00096BBA E701                       	dc.b	smpsNoAttack, $01
00096BBC E10A                       	smpsAlterNote       $0A
00096BBE E701                       	dc.b	smpsNoAttack, $01
00096BC0 E110                       	smpsAlterNote       $10
00096BC2 E701                       	dc.b	smpsNoAttack, $01
00096BC4 E111                       	smpsAlterNote       $11
00096BC6 E701                       	dc.b	smpsNoAttack, $01
00096BC8 E10D                       	smpsAlterNote       $0D
00096BCA E701                       	dc.b	smpsNoAttack, $01
00096BCC E107                       	smpsAlterNote       $07
00096BCE E701                       	dc.b	smpsNoAttack, $01
00096BD0 E10D                       	smpsAlterNote       $0D
00096BD2 C207                       	dc.b	nF5, $07
00096BD4 E10C                       	smpsAlterNote       $0C
00096BD6 C10D                       	dc.b	nE5, $0D
00096BD8 E109                       	smpsAlterNote       $09
00096BDA E701                       	dc.b	smpsNoAttack, $01
00096BDC E106                       	smpsAlterNote       $06
00096BDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BE2 E10C                       	smpsAlterNote       $0C
00096BE4 E701                       	dc.b	smpsNoAttack, $01
00096BE6 E110                       	smpsAlterNote       $10
00096BE8 E701                       	dc.b	smpsNoAttack, $01
00096BEA E10F                       	smpsAlterNote       $0F
00096BEC E701                       	dc.b	smpsNoAttack, $01
00096BEE E109                       	smpsAlterNote       $09
00096BF0 E701                       	dc.b	smpsNoAttack, $01
00096BF2 E105                       	smpsAlterNote       $05
00096BF4 E701                       	dc.b	smpsNoAttack, $01
00096BF6 E109                       	smpsAlterNote       $09
00096BF8 E701                       	dc.b	smpsNoAttack, $01
00096BFA E10C                       	smpsAlterNote       $0C
00096BFC E701                       	dc.b	smpsNoAttack, $01
00096BFE E110                       	smpsAlterNote       $10
00096C00 E701                       	dc.b	smpsNoAttack, $01
00096C02 E10B                       	smpsAlterNote       $0B
00096C04 BF0D                       	dc.b	nD5, $0D
00096C06 E108                       	smpsAlterNote       $08
00096C08 E701                       	dc.b	smpsNoAttack, $01
00096C0A E105                       	smpsAlterNote       $05
00096C0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C10 E10B                       	smpsAlterNote       $0B
00096C12 E701                       	dc.b	smpsNoAttack, $01
00096C14 E10F                       	smpsAlterNote       $0F
00096C16 E701                       	dc.b	smpsNoAttack, $01
00096C18 E10E                       	smpsAlterNote       $0E
00096C1A E701                       	dc.b	smpsNoAttack, $01
00096C1C E108                       	smpsAlterNote       $08
00096C1E E701                       	dc.b	smpsNoAttack, $01
00096C20 E104                       	smpsAlterNote       $04
00096C22 E701                       	dc.b	smpsNoAttack, $01
00096C24 E108                       	smpsAlterNote       $08
00096C26 E701                       	dc.b	smpsNoAttack, $01
00096C28 E10E                       	smpsAlterNote       $0E
00096C2A E701                       	dc.b	smpsNoAttack, $01
00096C2C E10F                       	smpsAlterNote       $0F
00096C2E E701                       	dc.b	smpsNoAttack, $01
00096C30 E10B                       	smpsAlterNote       $0B
00096C32 E701                       	dc.b	smpsNoAttack, $01
00096C34 E105                       	smpsAlterNote       $05
00096C36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C3A E108                       	smpsAlterNote       $08
00096C3C E701                       	dc.b	smpsNoAttack, $01
00096C3E E10E                       	smpsAlterNote       $0E
00096C40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C44 E108                       	smpsAlterNote       $08
00096C46 E701                       	dc.b	smpsNoAttack, $01
00096C48 E105                       	smpsAlterNote       $05
00096C4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C4E E10B                       	smpsAlterNote       $0B
00096C50 E701                       	dc.b	smpsNoAttack, $01
00096C52 E10F                       	smpsAlterNote       $0F
00096C54 E701                       	dc.b	smpsNoAttack, $01
00096C56 E10E                       	smpsAlterNote       $0E
00096C58 E701                       	dc.b	smpsNoAttack, $01
00096C5A E108                       	smpsAlterNote       $08
00096C5C E701                       	dc.b	smpsNoAttack, $01
00096C5E E104                       	smpsAlterNote       $04
00096C60 E701                       	dc.b	smpsNoAttack, $01
00096C62 E108                       	smpsAlterNote       $08
00096C64 E701                       	dc.b	smpsNoAttack, $01
00096C66 E10B                       	smpsAlterNote       $0B
00096C68 E701                       	dc.b	smpsNoAttack, $01
00096C6A E10F                       	smpsAlterNote       $0F
00096C6C E701                       	dc.b	smpsNoAttack, $01
00096C6E E10B                       	smpsAlterNote       $0B
00096C70 E701                       	dc.b	smpsNoAttack, $01
00096C72 E105                       	smpsAlterNote       $05
00096C74 E701                       	dc.b	smpsNoAttack, $01
00096C76 E104                       	smpsAlterNote       $04
00096C78 E701                       	dc.b	smpsNoAttack, $01
00096C7A E108                       	smpsAlterNote       $08
00096C7C E701                       	dc.b	smpsNoAttack, $01
00096C7E E10E                       	smpsAlterNote       $0E
00096C80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C84 E10B                       	smpsAlterNote       $0B
00096C86 E701                       	dc.b	smpsNoAttack, $01
00096C88 E105                       	smpsAlterNote       $05
00096C8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C8E E10B                       	smpsAlterNote       $0B
00096C90 E701                       	dc.b	smpsNoAttack, $01
00096C92 E10E                       	smpsAlterNote       $0E
00096C94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C98 E108                       	smpsAlterNote       $08
00096C9A E701                       	dc.b	smpsNoAttack, $01
00096C9C E105                       	smpsAlterNote       $05
00096C9E 8001                       	dc.b	nRst, $01
00096CA2 E601                       	smpsAlterVol        $01
00096CA4 E10B                       	smpsAlterNote       $0B
00096CA6 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00096CB2 8004                       	dc.b	nRst, $04
00096CB6 E6FF                       	smpsAlterVol        $FF
00096CB8 E10D                       	smpsAlterNote       $0D
00096CBA B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00096CC2 E10C                       	smpsAlterNote       $0C
00096CC4 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00096CC9 E10D                       	smpsAlterNote       $0D
00096CCB B60D                       	dc.b	nF4, $0D
00096CCD E10A                       	smpsAlterNote       $0A
00096CCF E701                       	dc.b	smpsNoAttack, $01
00096CD1 E106                       	smpsAlterNote       $06
00096CD3 E701                       	dc.b	smpsNoAttack, $01
00096CD5 E10A                       	smpsAlterNote       $0A
00096CD7 E701                       	dc.b	smpsNoAttack, $01
00096CD9 E110                       	smpsAlterNote       $10
00096CDB E701                       	dc.b	smpsNoAttack, $01
00096CDD E111                       	smpsAlterNote       $11
00096CDF E701                       	dc.b	smpsNoAttack, $01
00096CE1 E10D                       	smpsAlterNote       $0D
00096CE3 E701                       	dc.b	smpsNoAttack, $01
00096CE5 E107                       	smpsAlterNote       $07
00096CE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CEB E10A                       	smpsAlterNote       $0A
00096CED E701                       	dc.b	smpsNoAttack, $01
00096CEF E110                       	smpsAlterNote       $10
00096CF1 E701                       	dc.b	smpsNoAttack, $01
00096CF3 E111                       	smpsAlterNote       $11
00096CF5 8001                       	dc.b	nRst, $01
00096CF7 E10D                       	smpsAlterNote       $0D
00096CF9 B80D                       	dc.b	nG4, $0D
00096CFB E10A                       	smpsAlterNote       $0A
00096CFD E701                       	dc.b	smpsNoAttack, $01
00096CFF E106                       	smpsAlterNote       $06
00096D01 E701                       	dc.b	smpsNoAttack, $01
00096D03 E10A                       	smpsAlterNote       $0A
00096D05 E701                       	dc.b	smpsNoAttack, $01
00096D07 E110                       	smpsAlterNote       $10
00096D09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D0D E10D                       	smpsAlterNote       $0D
00096D0F E701                       	dc.b	smpsNoAttack, $01
00096D11 E107                       	smpsAlterNote       $07
00096D13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D17 E10D                       	smpsAlterNote       $0D
00096D19 E701                       	dc.b	smpsNoAttack, $01
00096D1B E110                       	smpsAlterNote       $10
00096D1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D21 E10A                       	smpsAlterNote       $0A
00096D23 E701                       	dc.b	smpsNoAttack, $01
00096D25 E106                       	smpsAlterNote       $06
00096D27 E701                       	dc.b	smpsNoAttack, $01
00096D29 E107                       	smpsAlterNote       $07
00096D2B E701                       	dc.b	smpsNoAttack, $01
00096D2D E10D                       	smpsAlterNote       $0D
00096D2F E701                       	dc.b	smpsNoAttack, $01
00096D31 E111                       	smpsAlterNote       $11
00096D33 E701                       	dc.b	smpsNoAttack, $01
00096D35 E10D                       	smpsAlterNote       $0D
00096D37 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096D3B E10F                       	smpsAlterNote       $0F
00096D3D BA02 8001                  	dc.b	nA4, $02, nRst, $01
00096D41 E110                       	smpsAlterNote       $10
00096D43 BB03                       	dc.b	nBb4, $03
00096D45 E10F                       	smpsAlterNote       $0F
00096D47 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00096D4D E110                       	smpsAlterNote       $10
00096D4F C703 8001                  	dc.b	nBb5, $03, nRst, $01
00096D53 E10F                       	smpsAlterNote       $0F
00096D55 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00096D5B E110                       	smpsAlterNote       $10
00096D5D D302 8001                  	dc.b	nBb6, $02, nRst, $01
00096D61 E10F                       	smpsAlterNote       $0F
00096D63 D20D                       	dc.b	nA6, $0D
00096D65 E10C                       	smpsAlterNote       $0C
00096D67 E701                       	dc.b	smpsNoAttack, $01
00096D69 E108                       	smpsAlterNote       $08
00096D6B E701                       	dc.b	smpsNoAttack, $01
00096D6D E10C                       	smpsAlterNote       $0C
00096D6F E701                       	dc.b	smpsNoAttack, $01
00096D71 E10F                       	smpsAlterNote       $0F
00096D73 E701                       	dc.b	smpsNoAttack, $01
00096D75 E113                       	smpsAlterNote       $13
00096D77 E701                       	dc.b	smpsNoAttack, $01
00096D79 E10F                       	smpsAlterNote       $0F
00096D7B E701                       	dc.b	smpsNoAttack, $01
00096D7D E109                       	smpsAlterNote       $09
00096D7F E701                       	dc.b	smpsNoAttack, $01
00096D81 E108                       	smpsAlterNote       $08
00096D83 E701                       	dc.b	smpsNoAttack, $01
00096D85 E10C                       	smpsAlterNote       $0C
00096D87 E701                       	dc.b	smpsNoAttack, $01
00096D89 E112                       	smpsAlterNote       $12
00096D8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D8F E10F                       	smpsAlterNote       $0F
00096D91 E701                       	dc.b	smpsNoAttack, $01
00096D93 E109                       	smpsAlterNote       $09
00096D95 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00096D9B E10D                       	smpsAlterNote       $0D
00096D9D CE07                       	dc.b	nF6, $07
00096D9F E10C                       	smpsAlterNote       $0C
00096DA1 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00096DA5 E10D                       	smpsAlterNote       $0D
00096DA7 CE03                       	dc.b	nF6, $03
00096DA9 E10C                       	smpsAlterNote       $0C
00096DAB CC0D                       	dc.b	nEb6, $0D
00096DAD E109                       	smpsAlterNote       $09
00096DAF E701                       	dc.b	smpsNoAttack, $01
00096DB1 E106                       	smpsAlterNote       $06
00096DB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DB7 E10C                       	smpsAlterNote       $0C
00096DB9 E701                       	dc.b	smpsNoAttack, $01
00096DBB E110                       	smpsAlterNote       $10
00096DBD E701                       	dc.b	smpsNoAttack, $01
00096DBF E10F                       	smpsAlterNote       $0F
00096DC1 E701                       	dc.b	smpsNoAttack, $01
00096DC3 E109                       	smpsAlterNote       $09
00096DC5 E701                       	dc.b	smpsNoAttack, $01
00096DC7 E105                       	smpsAlterNote       $05
00096DC9 E701                       	dc.b	smpsNoAttack, $01
00096DCB E109                       	smpsAlterNote       $09
00096DCD E701                       	dc.b	smpsNoAttack, $01
00096DCF E10C                       	smpsAlterNote       $0C
00096DD1 E701                       	dc.b	smpsNoAttack, $01
00096DD3 E110                       	smpsAlterNote       $10
00096DD5 E701                       	dc.b	smpsNoAttack, $01
00096DD7 E10C                       	smpsAlterNote       $0C
00096DD9 E701                       	dc.b	smpsNoAttack, $01
00096DDB E106                       	smpsAlterNote       $06
00096DDD E701                       	dc.b	smpsNoAttack, $01
00096DDF E105                       	smpsAlterNote       $05
00096DE1 E701                       	dc.b	smpsNoAttack, $01
00096DE3 E109                       	smpsAlterNote       $09
00096DE5 E701                       	dc.b	smpsNoAttack, $01
00096DE7 E10F                       	smpsAlterNote       $0F
00096DE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DED E10C                       	smpsAlterNote       $0C
00096DEF E701                       	dc.b	smpsNoAttack, $01
00096DF1 E10B                       	smpsAlterNote       $0B
00096DF3 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00096DFD E10F                       	smpsAlterNote       $0F
00096DFF C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00096E09 E10D                       	smpsAlterNote       $0D
00096E0B C203                       	dc.b	nF5, $03
00096E0D E10C                       	smpsAlterNote       $0C
00096E0F C103 8001                  	dc.b	nE5, $03, nRst, $01
00096E13 E10D                       	smpsAlterNote       $0D
00096E15 C20D                       	dc.b	nF5, $0D
00096E17 E10C                       	smpsAlterNote       $0C
00096E19 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00096E1D E10B                       	smpsAlterNote       $0B
00096E1F BF0D                       	dc.b	nD5, $0D
00096E21 E108                       	smpsAlterNote       $08
00096E23 E701                       	dc.b	smpsNoAttack, $01
00096E25 E104                       	smpsAlterNote       $04
00096E27 E701                       	dc.b	smpsNoAttack, $01
00096E29 E108                       	smpsAlterNote       $08
00096E2B E701                       	dc.b	smpsNoAttack, $01
00096E2D E10E                       	smpsAlterNote       $0E
00096E2F E701                       	dc.b	smpsNoAttack, $01
00096E31 E10F                       	smpsAlterNote       $0F
00096E33 E701                       	dc.b	smpsNoAttack, $01
00096E35 E10B                       	smpsAlterNote       $0B
00096E37 E701                       	dc.b	smpsNoAttack, $01
00096E39 E105                       	smpsAlterNote       $05
00096E3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E3F E108                       	smpsAlterNote       $08
00096E41 E701                       	dc.b	smpsNoAttack, $01
00096E43 E10E                       	smpsAlterNote       $0E
00096E45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E49 E108                       	smpsAlterNote       $08
00096E4B E701                       	dc.b	smpsNoAttack, $01
00096E4D E105                       	smpsAlterNote       $05
00096E4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E53 E10B                       	smpsAlterNote       $0B
00096E55 E701                       	dc.b	smpsNoAttack, $01
00096E57 E10F                       	smpsAlterNote       $0F
00096E59 E701                       	dc.b	smpsNoAttack, $01
00096E5B E10E                       	smpsAlterNote       $0E
00096E5D E701                       	dc.b	smpsNoAttack, $01
00096E5F E108                       	smpsAlterNote       $08
00096E61 E701                       	dc.b	smpsNoAttack, $01
00096E63 E104                       	smpsAlterNote       $04
00096E65 E701                       	dc.b	smpsNoAttack, $01
00096E67 E108                       	smpsAlterNote       $08
00096E69 E701                       	dc.b	smpsNoAttack, $01
00096E6B E10B                       	smpsAlterNote       $0B
00096E6D E701                       	dc.b	smpsNoAttack, $01
00096E6F E10F                       	smpsAlterNote       $0F
00096E71 E701                       	dc.b	smpsNoAttack, $01
00096E73 E10B                       	smpsAlterNote       $0B
00096E75 E701                       	dc.b	smpsNoAttack, $01
00096E77 E105                       	smpsAlterNote       $05
00096E79 E701                       	dc.b	smpsNoAttack, $01
00096E7B E104                       	smpsAlterNote       $04
00096E7D E701                       	dc.b	smpsNoAttack, $01
00096E7F E108                       	smpsAlterNote       $08
00096E81 E701                       	dc.b	smpsNoAttack, $01
00096E83 E10E                       	smpsAlterNote       $0E
00096E85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E89 E10B                       	smpsAlterNote       $0B
00096E8B E701                       	dc.b	smpsNoAttack, $01
00096E8D E105                       	smpsAlterNote       $05
00096E8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E93 E10B                       	smpsAlterNote       $0B
00096E95 E701                       	dc.b	smpsNoAttack, $01
00096E97 E10E                       	smpsAlterNote       $0E
00096E99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E9D E108                       	smpsAlterNote       $08
00096E9F E701                       	dc.b	smpsNoAttack, $01
00096EA1 E104                       	smpsAlterNote       $04
00096EA3 E701                       	dc.b	smpsNoAttack, $01
00096EA5 E105                       	smpsAlterNote       $05
00096EA7 E701                       	dc.b	smpsNoAttack, $01
00096EA9 E10B                       	smpsAlterNote       $0B
00096EAB E701                       	dc.b	smpsNoAttack, $01
00096EAD E10F                       	smpsAlterNote       $0F
00096EAF E701                       	dc.b	smpsNoAttack, $01
00096EB1 E10B                       	smpsAlterNote       $0B
00096EB3 E701                       	dc.b	smpsNoAttack, $01
00096EB5 E108                       	smpsAlterNote       $08
00096EB7 E701                       	dc.b	smpsNoAttack, $01
00096EB9 E104                       	smpsAlterNote       $04
00096EBB E701                       	dc.b	smpsNoAttack, $01
00096EBD E108                       	smpsAlterNote       $08
00096EBF E701                       	dc.b	smpsNoAttack, $01
00096EC1 E10E                       	smpsAlterNote       $0E
00096EC3 E701                       	dc.b	smpsNoAttack, $01
00096EC5 E10F                       	smpsAlterNote       $0F
00096EC7 E701                       	dc.b	smpsNoAttack, $01
00096EC9 E10B                       	smpsAlterNote       $0B
00096ECB E701                       	dc.b	smpsNoAttack, $01
00096ECD E105                       	smpsAlterNote       $05
00096ECF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096ED3 E108                       	smpsAlterNote       $08
00096ED5 E701                       	dc.b	smpsNoAttack, $01
00096ED7 E10E                       	smpsAlterNote       $0E
00096ED9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EDD E108                       	smpsAlterNote       $08
00096EDF E701                       	dc.b	smpsNoAttack, $01
00096EE1 E105                       	smpsAlterNote       $05
00096EE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EE7 E10B                       	smpsAlterNote       $0B
00096EE9 E701                       	dc.b	smpsNoAttack, $01
00096EEB E10F                       	smpsAlterNote       $0F
00096EED E701                       	dc.b	smpsNoAttack, $01
00096EEF E10E                       	smpsAlterNote       $0E
00096EF1 E701                       	dc.b	smpsNoAttack, $01
00096EF3 E108                       	smpsAlterNote       $08
00096EF5 E701                       	dc.b	smpsNoAttack, $01
00096EF7 E104                       	smpsAlterNote       $04
00096EF9 E701                       	dc.b	smpsNoAttack, $01
00096EFB E108                       	smpsAlterNote       $08
00096EFD E701                       	dc.b	smpsNoAttack, $01
00096EFF E10B                       	smpsAlterNote       $0B
00096F01 E701                       	dc.b	smpsNoAttack, $01
00096F03 E10F                       	smpsAlterNote       $0F
00096F05 E701                       	dc.b	smpsNoAttack, $01
00096F07 E10B                       	smpsAlterNote       $0B
00096F09 E701                       	dc.b	smpsNoAttack, $01
00096F0B E105                       	smpsAlterNote       $05
00096F0D E701                       	dc.b	smpsNoAttack, $01
00096F0F E104                       	smpsAlterNote       $04
00096F11 E701                       	dc.b	smpsNoAttack, $01
00096F13 E105                       	smpsAlterNote       $05
00096F15 8001                       	dc.b	nRst, $01
00096F17 E10D                       	smpsAlterNote       $0D
00096F19 C20D                       	dc.b	nF5, $0D
00096F1B E107                       	smpsAlterNote       $07
00096F1D E701                       	dc.b	smpsNoAttack, $01
00096F1F E106                       	smpsAlterNote       $06
00096F21 E701                       	dc.b	smpsNoAttack, $01
00096F23 E10A                       	smpsAlterNote       $0A
00096F25 E701                       	dc.b	smpsNoAttack, $01
00096F27 E110                       	smpsAlterNote       $10
00096F29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F2D E10D                       	smpsAlterNote       $0D
00096F2F E701                       	dc.b	smpsNoAttack, $01
00096F31 E107                       	smpsAlterNote       $07
00096F33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F37 E10D                       	smpsAlterNote       $0D
00096F39 E701                       	dc.b	smpsNoAttack, $01
00096F3B E110                       	smpsAlterNote       $10
00096F3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F41 E10A                       	smpsAlterNote       $0A
00096F43 E701                       	dc.b	smpsNoAttack, $01
00096F45 E106                       	smpsAlterNote       $06
00096F47 E701                       	dc.b	smpsNoAttack, $01
00096F49 E107                       	smpsAlterNote       $07
00096F4B E701                       	dc.b	smpsNoAttack, $01
00096F4D E10D                       	smpsAlterNote       $0D
00096F4F E701                       	dc.b	smpsNoAttack, $01
00096F51 E111                       	smpsAlterNote       $11
00096F53 E701                       	dc.b	smpsNoAttack, $01
00096F55 E10D                       	smpsAlterNote       $0D
00096F57 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096F5B E10C                       	smpsAlterNote       $0C
00096F5D C10D                       	dc.b	nE5, $0D
00096F5F E10D                       	smpsAlterNote       $0D
00096F61 C20A                       	dc.b	nF5, $0A
00096F63 E10C                       	smpsAlterNote       $0C
00096F65 C10E                       	dc.b	nE5, $0E
00096F67 E106                       	smpsAlterNote       $06
00096F69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F6D E10C                       	smpsAlterNote       $0C
00096F6F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096F73 E10B                       	smpsAlterNote       $0B
00096F75 BF0D                       	dc.b	nD5, $0D
00096F77 E10C                       	smpsAlterNote       $0C
00096F79 C107                       	dc.b	nE5, $07
00096F7B E10D                       	smpsAlterNote       $0D
00096F7D C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00096F87 E110                       	smpsAlterNote       $10
00096F89 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00096F8F E10F                       	smpsAlterNote       $0F
00096F91 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00096F99 E10D                       	smpsAlterNote       $0D
00096F9B D003                       	dc.b	nG6, $03
00096F9F E0C0                       	smpsPan             panCenter, $00
00096FA1 E6FF                       	smpsAlterVol        $FF
00096FA3 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00096FAF 8001                       	dc.b	nRst, $01
00096FB1 E10C                       	smpsAlterNote       $0C
00096FB3 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00096FBD E604                       	smpsAlterVol        $04
00096FBF E10B                       	smpsAlterNote       $0B
00096FC1 B306 8001                  	dc.b	nD4, $06, nRst, $01
00096FC5 E10F                       	smpsAlterNote       $0F
00096FC7 AE03                       	dc.b	nA3, $03
00096FC9 E10D                       	smpsAlterNote       $0D
00096FCB B603 8001                  	dc.b	nF4, $03, nRst, $01
00096FCF E10C                       	smpsAlterNote       $0C
00096FD1 B506 8001                  	dc.b	nE4, $06, nRst, $01
00096FD5 E10B                       	smpsAlterNote       $0B
00096FD7 B302 8001                  	dc.b	nD4, $02, nRst, $01
00096FDB E10A                       	smpsAlterNote       $0A
00096FDD B103                       	dc.b	nC4, $03
00096FDF E110                       	smpsAlterNote       $10
00096FE1 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00096FE5 E10F                       	smpsAlterNote       $0F
00096FE7 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00096FEB E080                       	smpsPan             panLeft, $00
00096FED 01                         	dc.b	$01
00096FF0 E6FB                       	smpsAlterVol        $FB
00096FF2 E1E4                       	smpsAlterNote       $E4
00096FF4 C501                       	dc.b	nAb5, $01
00096FF6 E1F4                       	smpsAlterNote       $F4
00096FF8 E701                       	dc.b	smpsNoAttack, $01
00096FFA E104                       	smpsAlterNote       $04
00096FFC E701                       	dc.b	smpsNoAttack, $01
00096FFE E114                       	smpsAlterNote       $14
00097000 E701                       	dc.b	smpsNoAttack, $01
00097002 E11C                       	smpsAlterNote       $1C
00097004 E701                       	dc.b	smpsNoAttack, $01
00097006 E1EF                       	smpsAlterNote       $EF
00097008 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0009700B E1FF                       	smpsAlterNote       $FF
0009700D E701                       	dc.b	smpsNoAttack, $01
0009700F E10F                       	smpsAlterNote       $0F
00097011 C606                       	dc.b	nA5, $06
00097013 E109                       	smpsAlterNote       $09
00097015 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097019 E10F                       	smpsAlterNote       $0F
0009701B E701                       	dc.b	smpsNoAttack, $01
0009701D E112                       	smpsAlterNote       $12
0009701F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097023 E10C                       	smpsAlterNote       $0C
00097025 E701                       	dc.b	smpsNoAttack, $01
00097027 E108                       	smpsAlterNote       $08
00097029 E701                       	dc.b	smpsNoAttack, $01
0009702B E109                       	smpsAlterNote       $09
0009702D E701                       	dc.b	smpsNoAttack, $01
0009702F E10F                       	smpsAlterNote       $0F
00097031 E701                       	dc.b	smpsNoAttack, $01
00097033 E113                       	smpsAlterNote       $13
00097035 E701                       	dc.b	smpsNoAttack, $01
00097037 E10F                       	smpsAlterNote       $0F
00097039 E701                       	dc.b	smpsNoAttack, $01
0009703B E10C                       	smpsAlterNote       $0C
0009703D E701                       	dc.b	smpsNoAttack, $01
0009703F E108                       	smpsAlterNote       $08
00097041 E701                       	dc.b	smpsNoAttack, $01
00097043 E10C                       	smpsAlterNote       $0C
00097045 E701                       	dc.b	smpsNoAttack, $01
00097047 E112                       	smpsAlterNote       $12
00097049 E701                       	dc.b	smpsNoAttack, $01
0009704B E113                       	smpsAlterNote       $13
0009704D E701                       	dc.b	smpsNoAttack, $01
0009704F E10F                       	smpsAlterNote       $0F
00097051 E701                       	dc.b	smpsNoAttack, $01
00097053 E109                       	smpsAlterNote       $09
00097055 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097059 E10C                       	smpsAlterNote       $0C
0009705B E701                       	dc.b	smpsNoAttack, $01
0009705D E112                       	smpsAlterNote       $12
0009705F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097063 E10C                       	smpsAlterNote       $0C
00097065 E701                       	dc.b	smpsNoAttack, $01
00097067 E109                       	smpsAlterNote       $09
00097069 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009706D E10F                       	smpsAlterNote       $0F
0009706F E701                       	dc.b	smpsNoAttack, $01
00097071 E113                       	smpsAlterNote       $13
00097073 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097077 E10D                       	smpsAlterNote       $0D
00097079 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0009707F E10C                       	smpsAlterNote       $0C
00097081 C102 8001                  	dc.b	nE5, $02, nRst, $01
00097085 E10D                       	smpsAlterNote       $0D
00097087 C201 8001                  	dc.b	nF5, $01, nRst, $01
0009708B E10C                       	smpsAlterNote       $0C
0009708D C102                       	dc.b	nE5, $02
0009708F E10B                       	smpsAlterNote       $0B
00097091 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00097095 E10C                       	smpsAlterNote       $0C
00097097 C101 8001                  	dc.b	nE5, $01, nRst, $01
0009709B E10B                       	smpsAlterNote       $0B
0009709D BF02                       	dc.b	nD5, $02
0009709F E10A                       	smpsAlterNote       $0A
000970A1 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
000970AB E110                       	smpsAlterNote       $10
000970AD BB02                       	dc.b	nBb4, $02
000970AF E10A                       	smpsAlterNote       $0A
000970B1 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000970B5 E110                       	smpsAlterNote       $10
000970B7 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000970BB E10F                       	smpsAlterNote       $0F
000970BD BA01 8001                  	dc.b	nA4, $01, nRst, $01
000970C1 E110                       	smpsAlterNote       $10
000970C3 BB02                       	dc.b	nBb4, $02
000970C5 E10F                       	smpsAlterNote       $0F
000970C7 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000970D1 E10C                       	smpsAlterNote       $0C
000970D3 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000970DB E10B                       	smpsAlterNote       $0B
000970DD BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000970E1 E10F                       	smpsAlterNote       $0F
000970E3 BA02                       	dc.b	nA4, $02
000970E7 E0C0                       	smpsPan             panCenter, $00
000970E9 E601                       	smpsAlterVol        $01
000970EB E109                       	smpsAlterNote       $09
000970ED AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000970F9 E108                       	smpsAlterNote       $08
000970FB A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
00097101 E107                       	smpsAlterNote       $07
00097103 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
00097109 E109                       	smpsAlterNote       $09
0009710B B603 8001                  	dc.b	nF4, $03, nRst, $01
0009710F E108                       	smpsAlterNote       $08
00097111 B506 8001                  	dc.b	nE4, $06, nRst, $01
00097115 E107                       	smpsAlterNote       $07
00097117 B302 8001                  	dc.b	nD4, $02, nRst, $01
0009711B E106                       	smpsAlterNote       $06
0009711D B103                       	dc.b	nC4, $03
0009711F E10C                       	smpsAlterNote       $0C
00097121 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00097127 E080                       	smpsPan             panLeft, $00
00097129 07                         	dc.b	$07
0009712A E6FE                       	smpsAlterVol        $FE
0009712C E10B                       	smpsAlterNote       $0B
0009712E B20D                       	dc.b	nCs4, $0D
00097130 E105                       	smpsAlterNote       $05
00097132 E701                       	dc.b	smpsNoAttack, $01
00097134 E104                       	smpsAlterNote       $04
00097136 E701                       	dc.b	smpsNoAttack, $01
00097138 E108                       	smpsAlterNote       $08
0009713A E701                       	dc.b	smpsNoAttack, $01
0009713C E10E                       	smpsAlterNote       $0E
0009713E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097142 E10B                       	smpsAlterNote       $0B
00097144 E701                       	dc.b	smpsNoAttack, $01
00097146 E105                       	smpsAlterNote       $05
00097148 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009714C E10B                       	smpsAlterNote       $0B
0009714E E701                       	dc.b	smpsNoAttack, $01
00097150 E10E                       	smpsAlterNote       $0E
00097152 E701                       	dc.b	smpsNoAttack, $01
00097154 E10F                       	smpsAlterNote       $0F
00097156 8001                       	dc.b	nRst, $01
00097158 E10B                       	smpsAlterNote       $0B
0009715A B30D                       	dc.b	nD4, $0D
0009715C E105                       	smpsAlterNote       $05
0009715E E701                       	dc.b	smpsNoAttack, $01
00097160 E104                       	smpsAlterNote       $04
00097162 E701                       	dc.b	smpsNoAttack, $01
00097164 E108                       	smpsAlterNote       $08
00097166 E701                       	dc.b	smpsNoAttack, $01
00097168 E10E                       	smpsAlterNote       $0E
0009716A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009716E E10B                       	smpsAlterNote       $0B
00097170 E701                       	dc.b	smpsNoAttack, $01
00097172 E105                       	smpsAlterNote       $05
00097174 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097178 E10B                       	smpsAlterNote       $0B
0009717A E701                       	dc.b	smpsNoAttack, $01
0009717C E10E                       	smpsAlterNote       $0E
0009717E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097182 E108                       	smpsAlterNote       $08
00097184 E701                       	dc.b	smpsNoAttack, $01
00097186 E104                       	smpsAlterNote       $04
00097188 E701                       	dc.b	smpsNoAttack, $01
0009718A E105                       	smpsAlterNote       $05
0009718C E701                       	dc.b	smpsNoAttack, $01
0009718E E10B                       	smpsAlterNote       $0B
00097190 E701                       	dc.b	smpsNoAttack, $01
00097192 E10F                       	smpsAlterNote       $0F
00097194 E701                       	dc.b	smpsNoAttack, $01
00097196 E10B                       	smpsAlterNote       $0B
00097198 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009719C E10C                       	smpsAlterNote       $0C
0009719E B50D                       	dc.b	nE4, $0D
000971A0 E106                       	smpsAlterNote       $06
000971A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971A6 E10C                       	smpsAlterNote       $0C
000971A8 E701                       	dc.b	smpsNoAttack, $01
000971AA E10F                       	smpsAlterNote       $0F
000971AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971B0 E109                       	smpsAlterNote       $09
000971B2 E701                       	dc.b	smpsNoAttack, $01
000971B4 E105                       	smpsAlterNote       $05
000971B6 E701                       	dc.b	smpsNoAttack, $01
000971B8 E106                       	smpsAlterNote       $06
000971BA E701                       	dc.b	smpsNoAttack, $01
000971BC E10C                       	smpsAlterNote       $0C
000971BE E701                       	dc.b	smpsNoAttack, $01
000971C0 E110                       	smpsAlterNote       $10
000971C2 E701                       	dc.b	smpsNoAttack, $01
000971C4 E10B                       	smpsAlterNote       $0B
000971C6 B30E                       	dc.b	nD4, $0E
000971C8 E105                       	smpsAlterNote       $05
000971CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971CE E10B                       	smpsAlterNote       $0B
000971D0 E701                       	dc.b	smpsNoAttack, $01
000971D2 E10E                       	smpsAlterNote       $0E
000971D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971D8 E108                       	smpsAlterNote       $08
000971DA E701                       	dc.b	smpsNoAttack, $01
000971DC E104                       	smpsAlterNote       $04
000971DE E701                       	dc.b	smpsNoAttack, $01
000971E0 E105                       	smpsAlterNote       $05
000971E2 E701                       	dc.b	smpsNoAttack, $01
000971E4 E10B                       	smpsAlterNote       $0B
000971E6 E701                       	dc.b	smpsNoAttack, $01
000971E8 E10F                       	smpsAlterNote       $0F
000971EA E701                       	dc.b	smpsNoAttack, $01
000971EC E10B                       	smpsAlterNote       $0B
000971EE E701                       	dc.b	smpsNoAttack, $01
000971F0 E108                       	smpsAlterNote       $08
000971F2 E701                       	dc.b	smpsNoAttack, $01
000971F4 E104                       	smpsAlterNote       $04
000971F6 E701                       	dc.b	smpsNoAttack, $01
000971F8 E108                       	smpsAlterNote       $08
000971FA E701                       	dc.b	smpsNoAttack, $01
000971FC E10E                       	smpsAlterNote       $0E
000971FE E701                       	dc.b	smpsNoAttack, $01
00097200 E10F                       	smpsAlterNote       $0F
00097202 E701                       	dc.b	smpsNoAttack, $01
00097204 E10B                       	smpsAlterNote       $0B
00097206 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0009720A E108                       	smpsAlterNote       $08
0009720C E701                       	dc.b	smpsNoAttack, $01
0009720E E105                       	smpsAlterNote       $05
00097210 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097214 E10B                       	smpsAlterNote       $0B
00097216 E701                       	dc.b	smpsNoAttack, $01
00097218 E10F                       	smpsAlterNote       $0F
0009721A E701                       	dc.b	smpsNoAttack, $01
0009721C E10E                       	smpsAlterNote       $0E
0009721E E701                       	dc.b	smpsNoAttack, $01
00097220 E108                       	smpsAlterNote       $08
00097222 E701                       	dc.b	smpsNoAttack, $01
00097224 E104                       	smpsAlterNote       $04
00097226 E701                       	dc.b	smpsNoAttack, $01
00097228 E108                       	smpsAlterNote       $08
0009722A E701                       	dc.b	smpsNoAttack, $01
0009722C E10B                       	smpsAlterNote       $0B
0009722E E701                       	dc.b	smpsNoAttack, $01
00097230 E10F                       	smpsAlterNote       $0F
00097232 E701                       	dc.b	smpsNoAttack, $01
00097234 E10B                       	smpsAlterNote       $0B
00097236 B30D                       	dc.b	nD4, $0D
00097238 E108                       	smpsAlterNote       $08
0009723A E701                       	dc.b	smpsNoAttack, $01
0009723C E105                       	smpsAlterNote       $05
0009723E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097242 E10B                       	smpsAlterNote       $0B
00097244 E701                       	dc.b	smpsNoAttack, $01
00097246 E10F                       	smpsAlterNote       $0F
00097248 E701                       	dc.b	smpsNoAttack, $01
0009724A E10E                       	smpsAlterNote       $0E
0009724C E701                       	dc.b	smpsNoAttack, $01
0009724E E108                       	smpsAlterNote       $08
00097250 E701                       	dc.b	smpsNoAttack, $01
00097252 E104                       	smpsAlterNote       $04
00097254 E701                       	dc.b	smpsNoAttack, $01
00097256 E108                       	smpsAlterNote       $08
00097258 E701                       	dc.b	smpsNoAttack, $01
0009725A E10B                       	smpsAlterNote       $0B
0009725C E701                       	dc.b	smpsNoAttack, $01
0009725E E10F                       	smpsAlterNote       $0F
00097260 E701                       	dc.b	smpsNoAttack, $01
00097262 E10B                       	smpsAlterNote       $0B
00097264 E701                       	dc.b	smpsNoAttack, $01
00097266 E105                       	smpsAlterNote       $05
00097268 E701                       	dc.b	smpsNoAttack, $01
0009726A E104                       	smpsAlterNote       $04
0009726C E701                       	dc.b	smpsNoAttack, $01
0009726E E108                       	smpsAlterNote       $08
00097270 E701                       	dc.b	smpsNoAttack, $01
00097272 E10E                       	smpsAlterNote       $0E
00097274 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097278 E10B                       	smpsAlterNote       $0B
0009727A 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0009727E E108                       	smpsAlterNote       $08
00097280 E701                       	dc.b	smpsNoAttack, $01
00097282 E104                       	smpsAlterNote       $04
00097284 E701                       	dc.b	smpsNoAttack, $01
00097286 E108                       	smpsAlterNote       $08
00097288 E701                       	dc.b	smpsNoAttack, $01
0009728A E10B                       	smpsAlterNote       $0B
0009728C E701                       	dc.b	smpsNoAttack, $01
00097290 E0C0                       	smpsPan             panCenter, $00
00097292 E601                       	smpsAlterVol        $01
00097294 E108                       	smpsAlterNote       $08
00097296 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
000972A2 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
000972AA E080                       	smpsPan             panLeft, $00
000972AC 07                         	dc.b	$07
000972AD E6FF                       	smpsAlterVol        $FF
000972AF E10D                       	smpsAlterNote       $0D
000972B1 B60D                       	dc.b	nF4, $0D
000972B3 E10A                       	smpsAlterNote       $0A
000972B5 E701                       	dc.b	smpsNoAttack, $01
000972B7 E106                       	smpsAlterNote       $06
000972B9 E701                       	dc.b	smpsNoAttack, $01
000972BB E10A                       	smpsAlterNote       $0A
000972BD E701                       	dc.b	smpsNoAttack, $01
000972BF E110                       	smpsAlterNote       $10
000972C1 E701                       	dc.b	smpsNoAttack, $01
000972C3 E111                       	smpsAlterNote       $11
000972C5 E701                       	dc.b	smpsNoAttack, $01
000972C7 E10D                       	smpsAlterNote       $0D
000972C9 E701                       	dc.b	smpsNoAttack, $01
000972CB E107                       	smpsAlterNote       $07
000972CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972D1 E10A                       	smpsAlterNote       $0A
000972D3 E701                       	dc.b	smpsNoAttack, $01
000972D5 E110                       	smpsAlterNote       $10
000972D7 E701                       	dc.b	smpsNoAttack, $01
000972D9 E111                       	smpsAlterNote       $11
000972DB 8001                       	dc.b	nRst, $01
000972DD E10D                       	smpsAlterNote       $0D
000972DF B80D                       	dc.b	nG4, $0D
000972E1 E10A                       	smpsAlterNote       $0A
000972E3 E701                       	dc.b	smpsNoAttack, $01
000972E5 E106                       	smpsAlterNote       $06
000972E7 E701                       	dc.b	smpsNoAttack, $01
000972E9 E10A                       	smpsAlterNote       $0A
000972EB E701                       	dc.b	smpsNoAttack, $01
000972ED E110                       	smpsAlterNote       $10
000972EF E701                       	dc.b	smpsNoAttack, $01
000972F1 E111                       	smpsAlterNote       $11
000972F3 E701                       	dc.b	smpsNoAttack, $01
000972F5 E10D                       	smpsAlterNote       $0D
000972F7 E701                       	dc.b	smpsNoAttack, $01
000972F9 E107                       	smpsAlterNote       $07
000972FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972FF E10D                       	smpsAlterNote       $0D
00097301 E701                       	dc.b	smpsNoAttack, $01
00097303 E110                       	smpsAlterNote       $10
00097305 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097309 E10A                       	smpsAlterNote       $0A
0009730B E701                       	dc.b	smpsNoAttack, $01
0009730D E106                       	smpsAlterNote       $06
0009730F E701                       	dc.b	smpsNoAttack, $01
00097311 E107                       	smpsAlterNote       $07
00097313 E701                       	dc.b	smpsNoAttack, $01
00097315 E10D                       	smpsAlterNote       $0D
00097317 E701                       	dc.b	smpsNoAttack, $01
00097319 E111                       	smpsAlterNote       $11
0009731B E701                       	dc.b	smpsNoAttack, $01
0009731D E10D                       	smpsAlterNote       $0D
0009731F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097323 E10F                       	smpsAlterNote       $0F
00097325 BA0D                       	dc.b	nA4, $0D
00097327 E109                       	smpsAlterNote       $09
00097329 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009732D E10C                       	smpsAlterNote       $0C
0009732F E701                       	dc.b	smpsNoAttack, $01
00097331 E112                       	smpsAlterNote       $12
00097333 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097337 E10C                       	smpsAlterNote       $0C
00097339 E701                       	dc.b	smpsNoAttack, $01
0009733B E109                       	smpsAlterNote       $09
0009733D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097341 E10F                       	smpsAlterNote       $0F
00097343 E701                       	dc.b	smpsNoAttack, $01
00097345 E113                       	smpsAlterNote       $13
00097347 E701                       	dc.b	smpsNoAttack, $01
00097349 E112                       	smpsAlterNote       $12
0009734B E701                       	dc.b	smpsNoAttack, $01
0009734D E10C                       	smpsAlterNote       $0C
0009734F E701                       	dc.b	smpsNoAttack, $01
00097351 E108                       	smpsAlterNote       $08
00097353 E701                       	dc.b	smpsNoAttack, $01
00097355 E10C                       	smpsAlterNote       $0C
00097357 E701                       	dc.b	smpsNoAttack, $01
00097359 E10F                       	smpsAlterNote       $0F
0009735B E701                       	dc.b	smpsNoAttack, $01
0009735D E113                       	smpsAlterNote       $13
0009735F E701                       	dc.b	smpsNoAttack, $01
00097361 E10F                       	smpsAlterNote       $0F
00097363 E701                       	dc.b	smpsNoAttack, $01
00097365 E109                       	smpsAlterNote       $09
00097367 E701                       	dc.b	smpsNoAttack, $01
00097369 E108                       	smpsAlterNote       $08
0009736B E701                       	dc.b	smpsNoAttack, $01
0009736D E10C                       	smpsAlterNote       $0C
0009736F E701                       	dc.b	smpsNoAttack, $01
00097371 E112                       	smpsAlterNote       $12
00097373 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097377 E10F                       	smpsAlterNote       $0F
00097379 E701                       	dc.b	smpsNoAttack, $01
0009737B E109                       	smpsAlterNote       $09
0009737D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097381 E10F                       	smpsAlterNote       $0F
00097383 E701                       	dc.b	smpsNoAttack, $01
00097385 E112                       	smpsAlterNote       $12
00097387 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009738B E10C                       	smpsAlterNote       $0C
0009738D E701                       	dc.b	smpsNoAttack, $01
0009738F E108                       	smpsAlterNote       $08
00097391 E701                       	dc.b	smpsNoAttack, $01
00097393 E109                       	smpsAlterNote       $09
00097395 E701                       	dc.b	smpsNoAttack, $01
00097397 E10C                       	smpsAlterNote       $0C
00097399 B50A                       	dc.b	nE4, $0A
0009739B E10D                       	smpsAlterNote       $0D
0009739D B60E                       	dc.b	nF4, $0E
0009739F E107                       	smpsAlterNote       $07
000973A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973A5 E10D                       	smpsAlterNote       $0D
000973A7 E701                       	dc.b	smpsNoAttack, $01
000973A9 E110                       	smpsAlterNote       $10
000973AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973AF E10A                       	smpsAlterNote       $0A
000973B1 E701                       	dc.b	smpsNoAttack, $01
000973B3 E106                       	smpsAlterNote       $06
000973B5 E701                       	dc.b	smpsNoAttack, $01
000973B7 E107                       	smpsAlterNote       $07
000973B9 E701                       	dc.b	smpsNoAttack, $01
000973BB E10D                       	smpsAlterNote       $0D
000973BD E701                       	dc.b	smpsNoAttack, $01
000973BF E111                       	smpsAlterNote       $11
000973C1 E701                       	dc.b	smpsNoAttack, $01
000973C3 E10D                       	smpsAlterNote       $0D
000973C5 B80D                       	dc.b	nG4, $0D
000973C7 E10A                       	smpsAlterNote       $0A
000973C9 E701                       	dc.b	smpsNoAttack, $01
000973CB E107                       	smpsAlterNote       $07
000973CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973D1 E10D                       	smpsAlterNote       $0D
000973D3 E701                       	dc.b	smpsNoAttack, $01
000973D5 E111                       	smpsAlterNote       $11
000973D7 E701                       	dc.b	smpsNoAttack, $01
000973D9 E110                       	smpsAlterNote       $10
000973DB E701                       	dc.b	smpsNoAttack, $01
000973DD E10A                       	smpsAlterNote       $0A
000973DF E701                       	dc.b	smpsNoAttack, $01
000973E1 E106                       	smpsAlterNote       $06
000973E3 E701                       	dc.b	smpsNoAttack, $01
000973E5 E10A                       	smpsAlterNote       $0A
000973E7 E701                       	dc.b	smpsNoAttack, $01
000973E9 E10D                       	smpsAlterNote       $0D
000973EB E701                       	dc.b	smpsNoAttack, $01
000973ED E111                       	smpsAlterNote       $11
000973EF E701                       	dc.b	smpsNoAttack, $01
000973F1 E10D                       	smpsAlterNote       $0D
000973F3 E701                       	dc.b	smpsNoAttack, $01
000973F5 E107                       	smpsAlterNote       $07
000973F7 E701                       	dc.b	smpsNoAttack, $01
000973F9 E106                       	smpsAlterNote       $06
000973FB E701                       	dc.b	smpsNoAttack, $01
000973FD E10A                       	smpsAlterNote       $0A
000973FF E701                       	dc.b	smpsNoAttack, $01
00097401 E110                       	smpsAlterNote       $10
00097403 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097407 E10D                       	smpsAlterNote       $0D
00097409 E701                       	dc.b	smpsNoAttack, $01
0009740B E10F                       	smpsAlterNote       $0F
0009740D BA0D                       	dc.b	nA4, $0D
0009740F E10C                       	smpsAlterNote       $0C
00097411 E701                       	dc.b	smpsNoAttack, $01
00097413 E108                       	smpsAlterNote       $08
00097415 E701                       	dc.b	smpsNoAttack, $01
00097417 E109                       	smpsAlterNote       $09
00097419 E701                       	dc.b	smpsNoAttack, $01
0009741B E10F                       	smpsAlterNote       $0F
0009741D E701                       	dc.b	smpsNoAttack, $01
0009741F E113                       	smpsAlterNote       $13
00097421 E701                       	dc.b	smpsNoAttack, $01
00097423 E10F                       	smpsAlterNote       $0F
00097425 E701                       	dc.b	smpsNoAttack, $01
00097427 E10C                       	smpsAlterNote       $0C
00097429 E701                       	dc.b	smpsNoAttack, $01
0009742B E108                       	smpsAlterNote       $08
0009742D E701                       	dc.b	smpsNoAttack, $01
0009742F E10C                       	smpsAlterNote       $0C
00097431 E701                       	dc.b	smpsNoAttack, $01
00097433 E112                       	smpsAlterNote       $12
00097435 E701                       	dc.b	smpsNoAttack, $01
00097437 E113                       	smpsAlterNote       $13
00097439 E701                       	dc.b	smpsNoAttack, $01
0009743B E10F                       	smpsAlterNote       $0F
0009743D E701                       	dc.b	smpsNoAttack, $01
0009743F E109                       	smpsAlterNote       $09
00097441 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097445 E10C                       	smpsAlterNote       $0C
00097447 E701                       	dc.b	smpsNoAttack, $01
00097449 E112                       	smpsAlterNote       $12
0009744B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009744F E10C                       	smpsAlterNote       $0C
00097451 E701                       	dc.b	smpsNoAttack, $01
00097453 E109                       	smpsAlterNote       $09
00097455 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097459 E10F                       	smpsAlterNote       $0F
0009745B E701                       	dc.b	smpsNoAttack, $01
0009745D E113                       	smpsAlterNote       $13
0009745F E701                       	dc.b	smpsNoAttack, $01
00097461 E112                       	smpsAlterNote       $12
00097463 E701                       	dc.b	smpsNoAttack, $01
00097465 E10C                       	smpsAlterNote       $0C
00097467 E701                       	dc.b	smpsNoAttack, $01
00097469 E109                       	smpsAlterNote       $09
0009746B 8001                       	dc.b	nRst, $01
0009746D E10D                       	smpsAlterNote       $0D
0009746F B60A                       	dc.b	nF4, $0A
00097471 E10C                       	smpsAlterNote       $0C
00097473 B506 8001                  	dc.b	nE4, $06, nRst, $01
00097477 E10B                       	smpsAlterNote       $0B
00097479 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0009747D E10C                       	smpsAlterNote       $0C
0009747F B503                       	dc.b	nE4, $03
00097481 E10D                       	smpsAlterNote       $0D
00097483 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0009748D E10C                       	smpsAlterNote       $0C
0009748F E701                       	dc.b	smpsNoAttack, $01
00097491 E108                       	smpsAlterNote       $08
00097493 E701                       	dc.b	smpsNoAttack, $01
00097495 E10C                       	smpsAlterNote       $0C
00097497 E701                       	dc.b	smpsNoAttack, $01
00097499 E112                       	smpsAlterNote       $12
0009749B E701                       	dc.b	smpsNoAttack, $01
0009749D E113                       	smpsAlterNote       $13
0009749F E701                       	dc.b	smpsNoAttack, $01
000974A1 E10F                       	smpsAlterNote       $0F
000974A3 E701                       	dc.b	smpsNoAttack, $01
000974A5 E109                       	smpsAlterNote       $09
000974A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974AB E10C                       	smpsAlterNote       $0C
000974AD E701                       	dc.b	smpsNoAttack, $01
000974AF E112                       	smpsAlterNote       $12
000974B1 E701                       	dc.b	smpsNoAttack, $01
000974B3 E113                       	smpsAlterNote       $13
000974B5 8001                       	dc.b	nRst, $01
000974B7 E10D                       	smpsAlterNote       $0D
000974B9 C20D                       	dc.b	nF5, $0D
000974BB E10A                       	smpsAlterNote       $0A
000974BD E701                       	dc.b	smpsNoAttack, $01
000974BF E106                       	smpsAlterNote       $06
000974C1 E701                       	dc.b	smpsNoAttack, $01
000974C3 E10A                       	smpsAlterNote       $0A
000974C5 E701                       	dc.b	smpsNoAttack, $01
000974C7 E110                       	smpsAlterNote       $10
000974C9 E701                       	dc.b	smpsNoAttack, $01
000974CB E111                       	smpsAlterNote       $11
000974CD E701                       	dc.b	smpsNoAttack, $01
000974CF E10D                       	smpsAlterNote       $0D
000974D1 E701                       	dc.b	smpsNoAttack, $01
000974D3 E107                       	smpsAlterNote       $07
000974D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974D9 E10A                       	smpsAlterNote       $0A
000974DB E701                       	dc.b	smpsNoAttack, $01
000974DD E110                       	smpsAlterNote       $10
000974DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974E3 E10A                       	smpsAlterNote       $0A
000974E5 E701                       	dc.b	smpsNoAttack, $01
000974E7 E107                       	smpsAlterNote       $07
000974E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974ED E10D                       	smpsAlterNote       $0D
000974EF E701                       	dc.b	smpsNoAttack, $01
000974F1 E111                       	smpsAlterNote       $11
000974F3 E701                       	dc.b	smpsNoAttack, $01
000974F5 E110                       	smpsAlterNote       $10
000974F7 E701                       	dc.b	smpsNoAttack, $01
000974F9 E10A                       	smpsAlterNote       $0A
000974FB E701                       	dc.b	smpsNoAttack, $01
000974FD E106                       	smpsAlterNote       $06
000974FF E701                       	dc.b	smpsNoAttack, $01
00097501 E10A                       	smpsAlterNote       $0A
00097503 E701                       	dc.b	smpsNoAttack, $01
00097505 E10D                       	smpsAlterNote       $0D
00097507 E701                       	dc.b	smpsNoAttack, $01
00097509 E111                       	smpsAlterNote       $11
0009750B E701                       	dc.b	smpsNoAttack, $01
0009750D E10D                       	smpsAlterNote       $0D
0009750F E701                       	dc.b	smpsNoAttack, $01
00097511 E107                       	smpsAlterNote       $07
00097513 E701                       	dc.b	smpsNoAttack, $01
00097515 E106                       	smpsAlterNote       $06
00097517 E701                       	dc.b	smpsNoAttack, $01
00097519 E10A                       	smpsAlterNote       $0A
0009751B E701                       	dc.b	smpsNoAttack, $01
0009751D E110                       	smpsAlterNote       $10
0009751F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097523 E10D                       	smpsAlterNote       $0D
00097525 E701                       	dc.b	smpsNoAttack, $01
00097527 E107                       	smpsAlterNote       $07
00097529 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009752D E10D                       	smpsAlterNote       $0D
0009752F E701                       	dc.b	smpsNoAttack, $01
00097531 E110                       	smpsAlterNote       $10
00097533 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097537 E10A                       	smpsAlterNote       $0A
00097539 E701                       	dc.b	smpsNoAttack, $01
0009753B E106                       	smpsAlterNote       $06
0009753D E701                       	dc.b	smpsNoAttack, $01
0009753F E107                       	smpsAlterNote       $07
00097541 E701                       	dc.b	smpsNoAttack, $01
00097543 E10D                       	smpsAlterNote       $0D
00097545 E701                       	dc.b	smpsNoAttack, $01
00097547 E111                       	smpsAlterNote       $11
00097549 E701                       	dc.b	smpsNoAttack, $01
0009754B E10D                       	smpsAlterNote       $0D
0009754D E701                       	dc.b	smpsNoAttack, $01
0009754F E10A                       	smpsAlterNote       $0A
00097551 E701                       	dc.b	smpsNoAttack, $01
00097553 E107                       	smpsAlterNote       $07
00097555 8001                       	dc.b	nRst, $01
00097557 E10D                       	smpsAlterNote       $0D
00097559 C206 8001                  	dc.b	nF5, $06, nRst, $01
0009755F E601                       	smpsAlterVol        $01
00097561 E110                       	smpsAlterNote       $10
00097563 BB0D                       	dc.b	nBb4, $0D
00097565 E10A                       	smpsAlterNote       $0A
00097567 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009756B E110                       	smpsAlterNote       $10
0009756D E701                       	dc.b	smpsNoAttack, $01
0009756F E113                       	smpsAlterNote       $13
00097571 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097575 E10D                       	smpsAlterNote       $0D
00097577 E701                       	dc.b	smpsNoAttack, $01
00097579 E109                       	smpsAlterNote       $09
0009757B E701                       	dc.b	smpsNoAttack, $01
0009757D E10A                       	smpsAlterNote       $0A
0009757F E701                       	dc.b	smpsNoAttack, $01
00097581 E110                       	smpsAlterNote       $10
00097583 E701                       	dc.b	smpsNoAttack, $01
00097585 E114                       	smpsAlterNote       $14
00097587 E701                       	dc.b	smpsNoAttack, $01
00097589 E110                       	smpsAlterNote       $10
0009758B E701                       	dc.b	smpsNoAttack, $01
0009758D E10D                       	smpsAlterNote       $0D
0009758F E701                       	dc.b	smpsNoAttack, $01
00097591 E109                       	smpsAlterNote       $09
00097593 E701                       	dc.b	smpsNoAttack, $01
00097595 E10A                       	smpsAlterNote       $0A
00097597 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0009759B E107                       	smpsAlterNote       $07
0009759D E701                       	dc.b	smpsNoAttack, $01
0009759F E103                       	smpsAlterNote       $03
000975A1 E701                       	dc.b	smpsNoAttack, $01
000975A3 E107                       	smpsAlterNote       $07
000975A5 E701                       	dc.b	smpsNoAttack, $01
000975A7 E10D                       	smpsAlterNote       $0D
000975A9 E701                       	dc.b	smpsNoAttack, $01
000975AB E10E                       	smpsAlterNote       $0E
000975AD E701                       	dc.b	smpsNoAttack, $01
000975AF E10A                       	smpsAlterNote       $0A
000975B1 E701                       	dc.b	smpsNoAttack, $01
000975B3 E104                       	smpsAlterNote       $04
000975B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975B9 E107                       	smpsAlterNote       $07
000975BB E701                       	dc.b	smpsNoAttack, $01
000975BD E10D                       	smpsAlterNote       $0D
000975BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975C3 E107                       	smpsAlterNote       $07
000975C5 E701                       	dc.b	smpsNoAttack, $01
000975C7 E104                       	smpsAlterNote       $04
000975C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975CD E10B                       	smpsAlterNote       $0B
000975CF BF0D                       	dc.b	nD5, $0D
000975D1 E108                       	smpsAlterNote       $08
000975D3 E701                       	dc.b	smpsNoAttack, $01
000975D5 E105                       	smpsAlterNote       $05
000975D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975DB E10B                       	smpsAlterNote       $0B
000975DD E701                       	dc.b	smpsNoAttack, $01
000975DF E10F                       	smpsAlterNote       $0F
000975E1 E701                       	dc.b	smpsNoAttack, $01
000975E3 E10E                       	smpsAlterNote       $0E
000975E5 E701                       	dc.b	smpsNoAttack, $01
000975E7 E108                       	smpsAlterNote       $08
000975E9 E701                       	dc.b	smpsNoAttack, $01
000975EB E104                       	smpsAlterNote       $04
000975ED E701                       	dc.b	smpsNoAttack, $01
000975EF E108                       	smpsAlterNote       $08
000975F1 E701                       	dc.b	smpsNoAttack, $01
000975F3 E10B                       	smpsAlterNote       $0B
000975F5 E701                       	dc.b	smpsNoAttack, $01
000975F7 E10F                       	smpsAlterNote       $0F
000975F9 E701                       	dc.b	smpsNoAttack, $01
000975FB E10B                       	smpsAlterNote       $0B
000975FD E701                       	dc.b	smpsNoAttack, $01
000975FF E105                       	smpsAlterNote       $05
00097601 E701                       	dc.b	smpsNoAttack, $01
00097603 E104                       	smpsAlterNote       $04
00097605 E701                       	dc.b	smpsNoAttack, $01
00097607 E105                       	smpsAlterNote       $05
00097609 8001                       	dc.b	nRst, $01
0009760B E10C                       	smpsAlterNote       $0C
0009760D C10C                       	dc.b	nE5, $0C
0009760F E10D                       	smpsAlterNote       $0D
00097611 C201                       	dc.b	nF5, $01
00097613 E10E                       	smpsAlterNote       $0E
00097615 C301 8001                  	dc.b	nFs5, $01, nRst, $01
00097619 E10D                       	smpsAlterNote       $0D
0009761B C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009761F E10A                       	smpsAlterNote       $0A
00097621 E701                       	dc.b	smpsNoAttack, $01
00097623 E106                       	smpsAlterNote       $06
00097625 E701                       	dc.b	smpsNoAttack, $01
00097627 E10A                       	smpsAlterNote       $0A
00097629 E701                       	dc.b	smpsNoAttack, $01
0009762B E10D                       	smpsAlterNote       $0D
0009762D E701                       	dc.b	smpsNoAttack, $01
0009762F E111                       	smpsAlterNote       $11
00097631 E701                       	dc.b	smpsNoAttack, $01
00097633 E10D                       	smpsAlterNote       $0D
00097635 E701                       	dc.b	smpsNoAttack, $01
00097637 E107                       	smpsAlterNote       $07
00097639 E701                       	dc.b	smpsNoAttack, $01
0009763B E106                       	smpsAlterNote       $06
0009763D E701                       	dc.b	smpsNoAttack, $01
0009763F E10A                       	smpsAlterNote       $0A
00097641 E701                       	dc.b	smpsNoAttack, $01
00097643 E110                       	smpsAlterNote       $10
00097645 E701                       	dc.b	smpsNoAttack, $01
00097647 E111                       	smpsAlterNote       $11
00097649 8001                       	dc.b	nRst, $01
0009764B E10D                       	smpsAlterNote       $0D
0009764D C40D                       	dc.b	nG5, $0D
0009764F E10A                       	smpsAlterNote       $0A
00097651 E701                       	dc.b	smpsNoAttack, $01
00097653 E106                       	smpsAlterNote       $06
00097655 E701                       	dc.b	smpsNoAttack, $01
00097657 E10A                       	smpsAlterNote       $0A
00097659 E701                       	dc.b	smpsNoAttack, $01
0009765B E10D                       	smpsAlterNote       $0D
0009765D E701                       	dc.b	smpsNoAttack, $01
0009765F E10C                       	smpsAlterNote       $0C
00097661 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0009766D 8001                       	dc.b	nRst, $01
0009766F E10D                       	smpsAlterNote       $0D
00097671 C20D                       	dc.b	nF5, $0D
00097673 E10A                       	smpsAlterNote       $0A
00097675 E701                       	dc.b	smpsNoAttack, $01
00097677 E106                       	smpsAlterNote       $06
00097679 E701                       	dc.b	smpsNoAttack, $01
0009767B E10A                       	smpsAlterNote       $0A
0009767D E701                       	dc.b	smpsNoAttack, $01
0009767F E110                       	smpsAlterNote       $10
00097681 E701                       	dc.b	smpsNoAttack, $01
00097683 E111                       	smpsAlterNote       $11
00097685 E701                       	dc.b	smpsNoAttack, $01
00097687 E10D                       	smpsAlterNote       $0D
00097689 E701                       	dc.b	smpsNoAttack, $01
0009768B E107                       	smpsAlterNote       $07
0009768D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097691 E10A                       	smpsAlterNote       $0A
00097693 E701                       	dc.b	smpsNoAttack, $01
00097695 E110                       	smpsAlterNote       $10
00097697 E701                       	dc.b	smpsNoAttack, $01
00097699 E111                       	smpsAlterNote       $11
0009769B 8001                       	dc.b	nRst, $01
0009769D E10F                       	smpsAlterNote       $0F
0009769F C60A                       	dc.b	nA5, $0A
000976A1 E10D                       	smpsAlterNote       $0D
000976A3 C406 8001                  	dc.b	nG5, $06, nRst, $01
000976A7 E10C                       	smpsAlterNote       $0C
000976A9 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000976B5 8001                       	dc.b	nRst, $01
000976B7 E10D                       	smpsAlterNote       $0D
000976B9 C20D                       	dc.b	nF5, $0D
000976BB E107                       	smpsAlterNote       $07
000976BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976C1 E10A                       	smpsAlterNote       $0A
000976C3 E701                       	dc.b	smpsNoAttack, $01
000976C5 E110                       	smpsAlterNote       $10
000976C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976CB E10A                       	smpsAlterNote       $0A
000976CD E701                       	dc.b	smpsNoAttack, $01
000976CF E107                       	smpsAlterNote       $07
000976D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976D5 E10D                       	smpsAlterNote       $0D
000976D7 E701                       	dc.b	smpsNoAttack, $01
000976D9 E111                       	smpsAlterNote       $11
000976DB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000976DF E10D                       	smpsAlterNote       $0D
000976E1 C40D                       	dc.b	nG5, $0D
000976E3 E107                       	smpsAlterNote       $07
000976E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976E9 E10A                       	smpsAlterNote       $0A
000976EB E701                       	dc.b	smpsNoAttack, $01
000976ED E10D                       	smpsAlterNote       $0D
000976EF 8001                       	dc.b	nRst, $01
000976F1 E10C                       	smpsAlterNote       $0C
000976F3 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000976FF E10D                       	smpsAlterNote       $0D
00097701 C20E                       	dc.b	nF5, $0E
00097703 E107                       	smpsAlterNote       $07
00097705 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097709 E10D                       	smpsAlterNote       $0D
0009770B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097711 E0C0                       	smpsPan             panCenter, $00
00097713 E603                       	smpsAlterVol        $03
00097715 E108                       	smpsAlterNote       $08
00097717 B406                       	dc.b	nEb4, $06
00097719 E10C                       	smpsAlterNote       $0C
0009771B AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009771F E108                       	smpsAlterNote       $08
00097721 B403                       	dc.b	nEb4, $03
00097723 E109                       	smpsAlterNote       $09
00097725 B803 8001                  	dc.b	nG4, $03, nRst, $01
00097729 E10C                       	smpsAlterNote       $0C
0009772B BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00097733 03                         	dc.b	$03
00097734 E6FD                       	smpsAlterVol        $FD
00097736 F6F1 F4                    	smpsJump            music84_Jump00
00097739                            
00097739                            ; PSG1 Data
00097739                            music84_PSG1:
00097739 E1FD                       	smpsAlterNote       $FD
0009773B EC04                       	smpsPSGAlterVol     $04
0009773D 9203                       	dc.b	nF1, $03
0009773F E1FE                       	smpsAlterNote       $FE
00097741 9603                       	dc.b	nA1, $03
00097743 EC04                       	smpsPSGAlterVol     $04
00097745 E701                       	dc.b	smpsNoAttack, $01
00097747 E1FF                       	smpsAlterNote       $FF
00097749 ECFC                       	smpsPSGAlterVol     $FC
0009774B 9B03                       	dc.b	nD2, $03
0009774D E1FD                       	smpsAlterNote       $FD
0009774F 9403                       	dc.b	nG1, $03
00097751 EC04                       	smpsPSGAlterVol     $04
00097753 E701                       	dc.b	smpsNoAttack, $01
00097755 E1FE                       	smpsAlterNote       $FE
00097757 ECFC                       	smpsPSGAlterVol     $FC
00097759 9703                       	dc.b	nBb1, $03
0009775B E1FF                       	smpsAlterNote       $FF
0009775D 9B03                       	dc.b	nD2, $03
0009775F EC04                       	smpsPSGAlterVol     $04
00097761 E701                       	dc.b	smpsNoAttack, $01
00097763 E1FE                       	smpsAlterNote       $FE
00097765 ECFC                       	smpsPSGAlterVol     $FC
00097767 A002                       	dc.b	nG2, $02
00097769 EC04                       	smpsPSGAlterVol     $04
0009776B E701                       	dc.b	smpsNoAttack, $01
0009776D E1FF                       	smpsAlterNote       $FF
0009776F ECFC                       	smpsPSGAlterVol     $FC
00097771 A203                       	dc.b	nA2, $03
00097773 EC0B                       	smpsPSGAlterVol     $0B
00097775 800A                       	dc.b	nRst, $0A
00097777 E105                       	smpsAlterNote       $05
00097779 01                         	dc.b	$01
0009777A E1FC                       	smpsAlterNote       $FC
0009777C 01                         	dc.b	$01
0009777D E105                       	smpsAlterNote       $05
0009777F 01                         	dc.b	$01
00097780 E1FD                       	smpsAlterNote       $FD
00097782 01                         	dc.b	$01
00097783 E105                       	smpsAlterNote       $05
00097785 01                         	dc.b	$01
00097786 E1FD                       	smpsAlterNote       $FD
00097788 01                         	dc.b	$01
00097789 E1FA                       	smpsAlterNote       $FA
0009778B 01                         	dc.b	$01
0009778C E1FC                       	smpsAlterNote       $FC
0009778E 01                         	dc.b	$01
0009778F E105                       	smpsAlterNote       $05
00097791 01                         	dc.b	$01
00097792 E108                       	smpsAlterNote       $08
00097794 0101                       	dc.b	$01, $01
00097796 E105                       	smpsAlterNote       $05
00097798 01                         	dc.b	$01
00097799 E1FA                       	smpsAlterNote       $FA
0009779B 0101                       	dc.b	$01, $01
0009779D E1FD                       	smpsAlterNote       $FD
0009779F 01                         	dc.b	$01
000977A0 E105                       	smpsAlterNote       $05
000977A2 01                         	dc.b	$01
000977A3 E108                       	smpsAlterNote       $08
000977A5 01                         	dc.b	$01
000977A6 E105                       	smpsAlterNote       $05
000977A8 01                         	dc.b	$01
000977A9 E1FC                       	smpsAlterNote       $FC
000977AB 01                         	dc.b	$01
000977AC E105                       	smpsAlterNote       $05
000977AE 01                         	dc.b	$01
000977AF E1FD                       	smpsAlterNote       $FD
000977B1 01                         	dc.b	$01
000977B2                            
000977B2                            music84_Jump07:
000977B2 E105                       	smpsAlterNote       $05
000977B4 8001                       	dc.b	nRst, $01
000977B6 E1FD                       	smpsAlterNote       $FD
000977B8 01                         	dc.b	$01
000977B9 E1FA                       	smpsAlterNote       $FA
000977BB 01                         	dc.b	$01
000977BC E1FC                       	smpsAlterNote       $FC
000977BE 01                         	dc.b	$01
000977BF E1FD                       	smpsAlterNote       $FD
000977C1 ECF5                       	smpsPSGAlterVol     $F5
000977C3 9206                       	dc.b	nF1, $06
000977C5 EC04                       	smpsPSGAlterVol     $04
000977C7 E701                       	dc.b	smpsNoAttack, $01
000977C9 EC07                       	smpsPSGAlterVol     $07
000977CB 8003                       	dc.b	nRst, $03
000977CD ECF5                       	smpsPSGAlterVol     $F5
000977CF 9206                       	dc.b	nF1, $06
000977D1 EC04                       	smpsPSGAlterVol     $04
000977D3 E701                       	dc.b	smpsNoAttack, $01
000977D5 EC07                       	smpsPSGAlterVol     $07
000977D7 8006                       	dc.b	nRst, $06
000977D9 E100                       	smpsAlterNote       $00
000977DB 01                         	dc.b	$01
000977DC E104                       	smpsAlterNote       $04
000977DE 01                         	dc.b	$01
000977DF E100                       	smpsAlterNote       $00
000977E1 01                         	dc.b	$01
000977E2 E1FB                       	smpsAlterNote       $FB
000977E4 01                         	dc.b	$01
000977E5 E1FD                       	smpsAlterNote       $FD
000977E7 ECF5                       	smpsPSGAlterVol     $F5
000977E9 9406                       	dc.b	nG1, $06
000977EB EC04                       	smpsPSGAlterVol     $04
000977ED E701                       	dc.b	smpsNoAttack, $01
000977EF EC07                       	smpsPSGAlterVol     $07
000977F1 8003                       	dc.b	nRst, $03
000977F3 ECF5                       	smpsPSGAlterVol     $F5
000977F5 9407                       	dc.b	nG1, $07
000977F7 EC0B                       	smpsPSGAlterVol     $0B
000977F9 8006                       	dc.b	nRst, $06
000977FB E100                       	smpsAlterNote       $00
000977FD 01                         	dc.b	$01
000977FE E103                       	smpsAlterNote       $03
00097800 0101                       	dc.b	$01, $01
00097802 E1FD                       	smpsAlterNote       $FD
00097804 01                         	dc.b	$01
00097805 ECF5                       	smpsPSGAlterVol     $F5
00097807 9207                       	dc.b	nF1, $07
00097809 EC0B                       	smpsPSGAlterVol     $0B
0009780B 8004                       	dc.b	nRst, $04
0009780D ECF5                       	smpsPSGAlterVol     $F5
0009780F 9206                       	dc.b	nF1, $06
00097811 EC04                       	smpsPSGAlterVol     $04
00097813 E701                       	dc.b	smpsNoAttack, $01
00097815 EC07                       	smpsPSGAlterVol     $07
00097817 8006                       	dc.b	nRst, $06
00097819 E103                       	smpsAlterNote       $03
0009781B 01                         	dc.b	$01
0009781C E104                       	smpsAlterNote       $04
0009781E 01                         	dc.b	$01
0009781F E100                       	smpsAlterNote       $00
00097821 01                         	dc.b	$01
00097822 E1FA                       	smpsAlterNote       $FA
00097824 01                         	dc.b	$01
00097825 E1FD                       	smpsAlterNote       $FD
00097827 ECF5                       	smpsPSGAlterVol     $F5
00097829 9206                       	dc.b	nF1, $06
0009782B EC04                       	smpsPSGAlterVol     $04
0009782D E701                       	dc.b	smpsNoAttack, $01
0009782F EC07                       	smpsPSGAlterVol     $07
00097831 8003                       	dc.b	nRst, $03
00097833 ECF5                       	smpsPSGAlterVol     $F5
00097835 9106                       	dc.b	nE1, $06
00097837 EC04                       	smpsPSGAlterVol     $04
00097839 E701                       	dc.b	smpsNoAttack, $01
0009783B EC07                       	smpsPSGAlterVol     $07
0009783D 8006                       	dc.b	nRst, $06
0009783F E100                       	smpsAlterNote       $00
00097841 01                         	dc.b	$01
00097842 E104                       	smpsAlterNote       $04
00097844 01                         	dc.b	$01
00097845 E100                       	smpsAlterNote       $00
00097847 01                         	dc.b	$01
00097848 E1FD                       	smpsAlterNote       $FD
0009784A 01                         	dc.b	$01
0009784B ECF5                       	smpsPSGAlterVol     $F5
0009784D 9206                       	dc.b	nF1, $06
0009784F EC04                       	smpsPSGAlterVol     $04
00097851 E701                       	dc.b	smpsNoAttack, $01
00097853 EC07                       	smpsPSGAlterVol     $07
00097855 8003                       	dc.b	nRst, $03
00097857 ECF5                       	smpsPSGAlterVol     $F5
00097859 9207                       	dc.b	nF1, $07
0009785B EC0B                       	smpsPSGAlterVol     $0B
0009785D 8007                       	dc.b	nRst, $07
0009785F E103                       	smpsAlterNote       $03
00097861 0101                       	dc.b	$01, $01
00097863 E1FD                       	smpsAlterNote       $FD
00097865 01                         	dc.b	$01
00097866 E1FB                       	smpsAlterNote       $FB
00097868 01                         	dc.b	$01
00097869 E1FD                       	smpsAlterNote       $FD
0009786B ECF5                       	smpsPSGAlterVol     $F5
0009786D 9406                       	dc.b	nG1, $06
0009786F EC0B                       	smpsPSGAlterVol     $0B
00097871 8004                       	dc.b	nRst, $04
00097873 ECF5                       	smpsPSGAlterVol     $F5
00097875 9406                       	dc.b	nG1, $06
00097877 EC04                       	smpsPSGAlterVol     $04
00097879 E701                       	dc.b	smpsNoAttack, $01
0009787B EC07                       	smpsPSGAlterVol     $07
0009787D 8006                       	dc.b	nRst, $06
0009787F E100                       	smpsAlterNote       $00
00097881 01                         	dc.b	$01
00097882 E104                       	smpsAlterNote       $04
00097884 01                         	dc.b	$01
00097885 E100                       	smpsAlterNote       $00
00097887 01                         	dc.b	$01
00097888 E1F9                       	smpsAlterNote       $F9
0009788A 01                         	dc.b	$01
0009788B E1FD                       	smpsAlterNote       $FD
0009788D ECF5                       	smpsPSGAlterVol     $F5
0009788F 9206                       	dc.b	nF1, $06
00097891 EC04                       	smpsPSGAlterVol     $04
00097893 E701                       	dc.b	smpsNoAttack, $01
00097895 EC07                       	smpsPSGAlterVol     $07
00097897 8003                       	dc.b	nRst, $03
00097899 ECF5                       	smpsPSGAlterVol     $F5
0009789B 9207                       	dc.b	nF1, $07
0009789D EC0B                       	smpsPSGAlterVol     $0B
0009789F 8006                       	dc.b	nRst, $06
000978A1 E100                       	smpsAlterNote       $00
000978A3 01                         	dc.b	$01
000978A4 E104                       	smpsAlterNote       $04
000978A6 01                         	dc.b	$01
000978A7 E103                       	smpsAlterNote       $03
000978A9 01                         	dc.b	$01
000978AA E1FD                       	smpsAlterNote       $FD
000978AC 01                         	dc.b	$01
000978AD ECF5                       	smpsPSGAlterVol     $F5
000978AF 9207                       	dc.b	nF1, $07
000978B1 EC0B                       	smpsPSGAlterVol     $0B
000978B3 8004                       	dc.b	nRst, $04
000978B5 ECF5                       	smpsPSGAlterVol     $F5
000978B7 9206                       	dc.b	nF1, $06
000978B9 EC0B                       	smpsPSGAlterVol     $0B
000978BB 8007                       	dc.b	nRst, $07
000978BD E103                       	smpsAlterNote       $03
000978BF 0101                       	dc.b	$01, $01
000978C1 E100                       	smpsAlterNote       $00
000978C3 01                         	dc.b	$01
000978C4 E1FA                       	smpsAlterNote       $FA
000978C6 01                         	dc.b	$01
000978C7 E1FD                       	smpsAlterNote       $FD
000978C9 ECF5                       	smpsPSGAlterVol     $F5
000978CB 9206                       	dc.b	nF1, $06
000978CD EC04                       	smpsPSGAlterVol     $04
000978CF E701                       	dc.b	smpsNoAttack, $01
000978D1 EC07                       	smpsPSGAlterVol     $07
000978D3 8003                       	dc.b	nRst, $03
000978D5 ECF5                       	smpsPSGAlterVol     $F5
000978D7 9206                       	dc.b	nF1, $06
000978D9 EC04                       	smpsPSGAlterVol     $04
000978DB E701                       	dc.b	smpsNoAttack, $01
000978DD EC07                       	smpsPSGAlterVol     $07
000978DF 8006                       	dc.b	nRst, $06
000978E1 E100                       	smpsAlterNote       $00
000978E3 01                         	dc.b	$01
000978E4 E104                       	smpsAlterNote       $04
000978E6 01                         	dc.b	$01
000978E7 E100                       	smpsAlterNote       $00
000978E9 01                         	dc.b	$01
000978EA E1FD                       	smpsAlterNote       $FD
000978EC 01                         	dc.b	$01
000978ED ECF5                       	smpsPSGAlterVol     $F5
000978EF 9206                       	dc.b	nF1, $06
000978F1 EC04                       	smpsPSGAlterVol     $04
000978F3 E701                       	dc.b	smpsNoAttack, $01
000978F5 EC07                       	smpsPSGAlterVol     $07
000978F7 8003                       	dc.b	nRst, $03
000978F9 ECF5                       	smpsPSGAlterVol     $F5
000978FB 9207                       	dc.b	nF1, $07
000978FD EC0B                       	smpsPSGAlterVol     $0B
000978FF 8007                       	dc.b	nRst, $07
00097901 E103                       	smpsAlterNote       $03
00097903 0101                       	dc.b	$01, $01
00097905 E1FD                       	smpsAlterNote       $FD
00097907 01                         	dc.b	$01
00097908 E1FA                       	smpsAlterNote       $FA
0009790A 01                         	dc.b	$01
0009790B E1FD                       	smpsAlterNote       $FD
0009790D ECF5                       	smpsPSGAlterVol     $F5
0009790F 9206                       	dc.b	nF1, $06
00097911 EC0B                       	smpsPSGAlterVol     $0B
00097913 8004                       	dc.b	nRst, $04
00097915 ECF5                       	smpsPSGAlterVol     $F5
00097917 9206                       	dc.b	nF1, $06
00097919 EC04                       	smpsPSGAlterVol     $04
0009791B E701                       	dc.b	smpsNoAttack, $01
0009791D EC07                       	smpsPSGAlterVol     $07
0009791F 8006                       	dc.b	nRst, $06
00097921 E103                       	smpsAlterNote       $03
00097923 01                         	dc.b	$01
00097924 E104                       	smpsAlterNote       $04
00097926 01                         	dc.b	$01
00097927 E100                       	smpsAlterNote       $00
00097929 01                         	dc.b	$01
0009792A E1FA                       	smpsAlterNote       $FA
0009792C 01                         	dc.b	$01
0009792D E1FD                       	smpsAlterNote       $FD
0009792F ECF5                       	smpsPSGAlterVol     $F5
00097931 9206                       	dc.b	nF1, $06
00097933 EC04                       	smpsPSGAlterVol     $04
00097935 E701                       	dc.b	smpsNoAttack, $01
00097937 EC07                       	smpsPSGAlterVol     $07
00097939 8003                       	dc.b	nRst, $03
0009793B ECF5                       	smpsPSGAlterVol     $F5
0009793D 9206                       	dc.b	nF1, $06
0009793F EC04                       	smpsPSGAlterVol     $04
00097941 E701                       	dc.b	smpsNoAttack, $01
00097943 EC07                       	smpsPSGAlterVol     $07
00097945 8006                       	dc.b	nRst, $06
00097947 E100                       	smpsAlterNote       $00
00097949 01                         	dc.b	$01
0009794A E104                       	smpsAlterNote       $04
0009794C 01                         	dc.b	$01
0009794D E103                       	smpsAlterNote       $03
0009794F 01                         	dc.b	$01
00097950 E1FD                       	smpsAlterNote       $FD
00097952 01                         	dc.b	$01
00097953 ECF5                       	smpsPSGAlterVol     $F5
00097955 9107                       	dc.b	nE1, $07
00097957 EC0B                       	smpsPSGAlterVol     $0B
00097959 8004                       	dc.b	nRst, $04
0009795B ECF5                       	smpsPSGAlterVol     $F5
0009795D 9106                       	dc.b	nE1, $06
0009795F EC0B                       	smpsPSGAlterVol     $0B
00097961 8007                       	dc.b	nRst, $07
00097963 E103                       	smpsAlterNote       $03
00097965 0101                       	dc.b	$01, $01
00097967 E100                       	smpsAlterNote       $00
00097969 01                         	dc.b	$01
0009796A E1FA                       	smpsAlterNote       $FA
0009796C 01                         	dc.b	$01
0009796D E1FD                       	smpsAlterNote       $FD
0009796F ECF5                       	smpsPSGAlterVol     $F5
00097971 9106                       	dc.b	nE1, $06
00097973 EC04                       	smpsPSGAlterVol     $04
00097975 E701                       	dc.b	smpsNoAttack, $01
00097977 EC07                       	smpsPSGAlterVol     $07
00097979 8003                       	dc.b	nRst, $03
0009797B ECF5                       	smpsPSGAlterVol     $F5
0009797D 9106                       	dc.b	nE1, $06
0009797F EC04                       	smpsPSGAlterVol     $04
00097981 E701                       	dc.b	smpsNoAttack, $01
00097983 EC07                       	smpsPSGAlterVol     $07
00097985 8006                       	dc.b	nRst, $06
00097987 E100                       	smpsAlterNote       $00
00097989 01                         	dc.b	$01
0009798A E104                       	smpsAlterNote       $04
0009798C 01                         	dc.b	$01
0009798D E100                       	smpsAlterNote       $00
0009798F 01                         	dc.b	$01
00097990 E1FA                       	smpsAlterNote       $FA
00097992 01                         	dc.b	$01
00097993 E1FD                       	smpsAlterNote       $FD
00097995 ECF5                       	smpsPSGAlterVol     $F5
00097997 9106                       	dc.b	nE1, $06
00097999 EC04                       	smpsPSGAlterVol     $04
0009799B E701                       	dc.b	smpsNoAttack, $01
0009799D EC07                       	smpsPSGAlterVol     $07
0009799F 8003                       	dc.b	nRst, $03
000979A1 ECF5                       	smpsPSGAlterVol     $F5
000979A3 9107 9106                  	dc.b	nE1, $07, nE1, $06
000979A7 EC04                       	smpsPSGAlterVol     $04
000979A9 E701                       	dc.b	smpsNoAttack, $01
000979AB ECFC                       	smpsPSGAlterVol     $FC
000979AD 9103 9103                  	dc.b	nE1, $03, nE1, $03
000979B1 EC04                       	smpsPSGAlterVol     $04
000979B3 E701                       	dc.b	smpsNoAttack, $01
000979B5 ECFC                       	smpsPSGAlterVol     $FC
000979B7 9106                       	dc.b	nE1, $06
000979B9 EC04                       	smpsPSGAlterVol     $04
000979BB E701                       	dc.b	smpsNoAttack, $01
000979BD EC07                       	smpsPSGAlterVol     $07
000979BF 8006                       	dc.b	nRst, $06
000979C1 E100                       	smpsAlterNote       $00
000979C3 01                         	dc.b	$01
000979C4 E104                       	smpsAlterNote       $04
000979C6 01                         	dc.b	$01
000979C7 E100                       	smpsAlterNote       $00
000979C9 01                         	dc.b	$01
000979CA E1FA                       	smpsAlterNote       $FA
000979CC 01                         	dc.b	$01
000979CD E1F9                       	smpsAlterNote       $F9
000979CF 01                         	dc.b	$01
000979D0 E1FD                       	smpsAlterNote       $FD
000979D2 01                         	dc.b	$01
000979D3 E103                       	smpsAlterNote       $03
000979D5 01                         	dc.b	$01
000979D6 E104                       	smpsAlterNote       $04
000979D8 01                         	dc.b	$01
000979D9 E100                       	smpsAlterNote       $00
000979DB 01                         	dc.b	$01
000979DC E1FA                       	smpsAlterNote       $FA
000979DE 0101                       	dc.b	$01, $01
000979E0 E1FD                       	smpsAlterNote       $FD
000979E2 ECF5                       	smpsPSGAlterVol     $F5
000979E4 9206                       	dc.b	nF1, $06
000979E6 EC04                       	smpsPSGAlterVol     $04
000979E8 E701                       	dc.b	smpsNoAttack, $01
000979EA EC07                       	smpsPSGAlterVol     $07
000979EC 8003                       	dc.b	nRst, $03
000979EE ECF5                       	smpsPSGAlterVol     $F5
000979F0 9206                       	dc.b	nF1, $06
000979F2 EC04                       	smpsPSGAlterVol     $04
000979F4 E701                       	dc.b	smpsNoAttack, $01
000979F6 EC07                       	smpsPSGAlterVol     $07
000979F8 8006                       	dc.b	nRst, $06
000979FA E100                       	smpsAlterNote       $00
000979FC 01                         	dc.b	$01
000979FD E104                       	smpsAlterNote       $04
000979FF 01                         	dc.b	$01
00097A00 E103                       	smpsAlterNote       $03
00097A02 01                         	dc.b	$01
00097A03 E1FD                       	smpsAlterNote       $FD
00097A05 01                         	dc.b	$01
00097A06 ECF5                       	smpsPSGAlterVol     $F5
00097A08 9407                       	dc.b	nG1, $07
00097A0A EC0B                       	smpsPSGAlterVol     $0B
00097A0C 8004                       	dc.b	nRst, $04
00097A0E ECF5                       	smpsPSGAlterVol     $F5
00097A10 9406                       	dc.b	nG1, $06
00097A12 EC0B                       	smpsPSGAlterVol     $0B
00097A14 8007                       	dc.b	nRst, $07
00097A16 E103                       	smpsAlterNote       $03
00097A18 0101                       	dc.b	$01, $01
00097A1A E1FD                       	smpsAlterNote       $FD
00097A1C 01                         	dc.b	$01
00097A1D E1F9                       	smpsAlterNote       $F9
00097A1F 01                         	dc.b	$01
00097A20 E1FD                       	smpsAlterNote       $FD
00097A22 ECF5                       	smpsPSGAlterVol     $F5
00097A24 9206                       	dc.b	nF1, $06
00097A26 EC04                       	smpsPSGAlterVol     $04
00097A28 E701                       	dc.b	smpsNoAttack, $01
00097A2A EC07                       	smpsPSGAlterVol     $07
00097A2C 8003                       	dc.b	nRst, $03
00097A2E ECF5                       	smpsPSGAlterVol     $F5
00097A30 9206                       	dc.b	nF1, $06
00097A32 EC04                       	smpsPSGAlterVol     $04
00097A34 E701                       	dc.b	smpsNoAttack, $01
00097A36 EC07                       	smpsPSGAlterVol     $07
00097A38 8006                       	dc.b	nRst, $06
00097A3A E100                       	smpsAlterNote       $00
00097A3C 01                         	dc.b	$01
00097A3D E104                       	smpsAlterNote       $04
00097A3F 01                         	dc.b	$01
00097A40 E100                       	smpsAlterNote       $00
00097A42 01                         	dc.b	$01
00097A43 E1FA                       	smpsAlterNote       $FA
00097A45 01                         	dc.b	$01
00097A46 E1FD                       	smpsAlterNote       $FD
00097A48 ECF5                       	smpsPSGAlterVol     $F5
00097A4A 9206                       	dc.b	nF1, $06
00097A4C EC04                       	smpsPSGAlterVol     $04
00097A4E E701                       	dc.b	smpsNoAttack, $01
00097A50 EC07                       	smpsPSGAlterVol     $07
00097A52 8003                       	dc.b	nRst, $03
00097A54 ECF5                       	smpsPSGAlterVol     $F5
00097A56 9107                       	dc.b	nE1, $07
00097A58 EC0B                       	smpsPSGAlterVol     $0B
00097A5A 8006                       	dc.b	nRst, $06
00097A5C E100                       	smpsAlterNote       $00
00097A5E 01                         	dc.b	$01
00097A5F E103                       	smpsAlterNote       $03
00097A61 0101                       	dc.b	$01, $01
00097A63 E1FD                       	smpsAlterNote       $FD
00097A65 01                         	dc.b	$01
00097A66 ECF5                       	smpsPSGAlterVol     $F5
00097A68 9207                       	dc.b	nF1, $07
00097A6A EC0B                       	smpsPSGAlterVol     $0B
00097A6C 8004                       	dc.b	nRst, $04
00097A6E ECF5                       	smpsPSGAlterVol     $F5
00097A70 9206                       	dc.b	nF1, $06
00097A72 EC04                       	smpsPSGAlterVol     $04
00097A74 E701                       	dc.b	smpsNoAttack, $01
00097A76 EC07                       	smpsPSGAlterVol     $07
00097A78 8006                       	dc.b	nRst, $06
00097A7A E103                       	smpsAlterNote       $03
00097A7C 01                         	dc.b	$01
00097A7D E104                       	smpsAlterNote       $04
00097A7F 01                         	dc.b	$01
00097A80 E100                       	smpsAlterNote       $00
00097A82 01                         	dc.b	$01
00097A83 E1FB                       	smpsAlterNote       $FB
00097A85 01                         	dc.b	$01
00097A86 E1FD                       	smpsAlterNote       $FD
00097A88 ECF5                       	smpsPSGAlterVol     $F5
00097A8A 9406                       	dc.b	nG1, $06
00097A8C EC04                       	smpsPSGAlterVol     $04
00097A8E E701                       	dc.b	smpsNoAttack, $01
00097A90 EC07                       	smpsPSGAlterVol     $07
00097A92 8003                       	dc.b	nRst, $03
00097A94 ECF5                       	smpsPSGAlterVol     $F5
00097A96 9406                       	dc.b	nG1, $06
00097A98 EC04                       	smpsPSGAlterVol     $04
00097A9A E701                       	dc.b	smpsNoAttack, $01
00097A9C EC07                       	smpsPSGAlterVol     $07
00097A9E 8006                       	dc.b	nRst, $06
00097AA0 E100                       	smpsAlterNote       $00
00097AA2 01                         	dc.b	$01
00097AA3 E104                       	smpsAlterNote       $04
00097AA5 01                         	dc.b	$01
00097AA6 E100                       	smpsAlterNote       $00
00097AA8 01                         	dc.b	$01
00097AA9 E1FD                       	smpsAlterNote       $FD
00097AAB 01                         	dc.b	$01
00097AAC ECF5                       	smpsPSGAlterVol     $F5
00097AAE 9206                       	dc.b	nF1, $06
00097AB0 EC04                       	smpsPSGAlterVol     $04
00097AB2 E701                       	dc.b	smpsNoAttack, $01
00097AB4 EC07                       	smpsPSGAlterVol     $07
00097AB6 8003                       	dc.b	nRst, $03
00097AB8 ECF5                       	smpsPSGAlterVol     $F5
00097ABA 9207                       	dc.b	nF1, $07
00097ABC EC0B                       	smpsPSGAlterVol     $0B
00097ABE 8007                       	dc.b	nRst, $07
00097AC0 E103                       	smpsAlterNote       $03
00097AC2 0101                       	dc.b	$01, $01
00097AC4 E1FD                       	smpsAlterNote       $FD
00097AC6 01                         	dc.b	$01
00097AC7 E1FA                       	smpsAlterNote       $FA
00097AC9 01                         	dc.b	$01
00097ACA E1FD                       	smpsAlterNote       $FD
00097ACC ECF5                       	smpsPSGAlterVol     $F5
00097ACE 9206                       	dc.b	nF1, $06
00097AD0 EC0B                       	smpsPSGAlterVol     $0B
00097AD2 8004                       	dc.b	nRst, $04
00097AD4 ECF5                       	smpsPSGAlterVol     $F5
00097AD6 9206                       	dc.b	nF1, $06
00097AD8 EC04                       	smpsPSGAlterVol     $04
00097ADA E701                       	dc.b	smpsNoAttack, $01
00097ADC EC07                       	smpsPSGAlterVol     $07
00097ADE 8006                       	dc.b	nRst, $06
00097AE0 E100                       	smpsAlterNote       $00
00097AE2 01                         	dc.b	$01
00097AE3 E104                       	smpsAlterNote       $04
00097AE5 01                         	dc.b	$01
00097AE6 E100                       	smpsAlterNote       $00
00097AE8 01                         	dc.b	$01
00097AE9 E1FA                       	smpsAlterNote       $FA
00097AEB 01                         	dc.b	$01
00097AEC E1FD                       	smpsAlterNote       $FD
00097AEE ECF5                       	smpsPSGAlterVol     $F5
00097AF0 9206                       	dc.b	nF1, $06
00097AF2 EC04                       	smpsPSGAlterVol     $04
00097AF4 E704                       	dc.b	smpsNoAttack, $04
00097AF6 ECFC                       	smpsPSGAlterVol     $FC
00097AF8 9207                       	dc.b	nF1, $07
00097AFA EC0B                       	smpsPSGAlterVol     $0B
00097AFC 8006                       	dc.b	nRst, $06
00097AFE E100                       	smpsAlterNote       $00
00097B00 01                         	dc.b	$01
00097B01 E104                       	smpsAlterNote       $04
00097B03 01                         	dc.b	$01
00097B04 E103                       	smpsAlterNote       $03
00097B06 01                         	dc.b	$01
00097B07 E1FD                       	smpsAlterNote       $FD
00097B09 01                         	dc.b	$01
00097B0A ECF5                       	smpsPSGAlterVol     $F5
00097B0C 9207                       	dc.b	nF1, $07
00097B0E EC0B                       	smpsPSGAlterVol     $0B
00097B10 8004                       	dc.b	nRst, $04
00097B12 ECF5                       	smpsPSGAlterVol     $F5
00097B14 9206                       	dc.b	nF1, $06
00097B16 EC0B                       	smpsPSGAlterVol     $0B
00097B18 8007                       	dc.b	nRst, $07
00097B1A E103                       	smpsAlterNote       $03
00097B1C 0101                       	dc.b	$01, $01
00097B1E E100                       	smpsAlterNote       $00
00097B20 01                         	dc.b	$01
00097B21 E1FA                       	smpsAlterNote       $FA
00097B23 01                         	dc.b	$01
00097B24 E1FD                       	smpsAlterNote       $FD
00097B26 ECF5                       	smpsPSGAlterVol     $F5
00097B28 9206                       	dc.b	nF1, $06
00097B2A EC04                       	smpsPSGAlterVol     $04
00097B2C E704                       	dc.b	smpsNoAttack, $04
00097B2E ECFC                       	smpsPSGAlterVol     $FC
00097B30 9206                       	dc.b	nF1, $06
00097B32 EC04                       	smpsPSGAlterVol     $04
00097B34 E701                       	dc.b	smpsNoAttack, $01
00097B36 EC07                       	smpsPSGAlterVol     $07
00097B38 8006                       	dc.b	nRst, $06
00097B3A E100                       	smpsAlterNote       $00
00097B3C 01                         	dc.b	$01
00097B3D E104                       	smpsAlterNote       $04
00097B3F 01                         	dc.b	$01
00097B40 E100                       	smpsAlterNote       $00
00097B42 01                         	dc.b	$01
00097B43 E1FD                       	smpsAlterNote       $FD
00097B45 01                         	dc.b	$01
00097B46 ECF5                       	smpsPSGAlterVol     $F5
00097B48 9206                       	dc.b	nF1, $06
00097B4A EC04                       	smpsPSGAlterVol     $04
00097B4C E701                       	dc.b	smpsNoAttack, $01
00097B4E EC07                       	smpsPSGAlterVol     $07
00097B50 8003                       	dc.b	nRst, $03
00097B52 ECF5                       	smpsPSGAlterVol     $F5
00097B54 9207                       	dc.b	nF1, $07
00097B56 EC0B                       	smpsPSGAlterVol     $0B
00097B58 8007                       	dc.b	nRst, $07
00097B5A E103                       	smpsAlterNote       $03
00097B5C 0101                       	dc.b	$01, $01
00097B5E E1FD                       	smpsAlterNote       $FD
00097B60 01                         	dc.b	$01
00097B61 E1FA                       	smpsAlterNote       $FA
00097B63 01                         	dc.b	$01
00097B64 E1FD                       	smpsAlterNote       $FD
00097B66 ECF5                       	smpsPSGAlterVol     $F5
00097B68 9106                       	dc.b	nE1, $06
00097B6A EC0B                       	smpsPSGAlterVol     $0B
00097B6C 8004                       	dc.b	nRst, $04
00097B6E ECF5                       	smpsPSGAlterVol     $F5
00097B70 9106                       	dc.b	nE1, $06
00097B72 EC04                       	smpsPSGAlterVol     $04
00097B74 E701                       	dc.b	smpsNoAttack, $01
00097B76 EC07                       	smpsPSGAlterVol     $07
00097B78 8006                       	dc.b	nRst, $06
00097B7A E100                       	smpsAlterNote       $00
00097B7C 01                         	dc.b	$01
00097B7D E104                       	smpsAlterNote       $04
00097B7F 01                         	dc.b	$01
00097B80 E100                       	smpsAlterNote       $00
00097B82 01                         	dc.b	$01
00097B83 E1FA                       	smpsAlterNote       $FA
00097B85 01                         	dc.b	$01
00097B86 E1FD                       	smpsAlterNote       $FD
00097B88 ECF5                       	smpsPSGAlterVol     $F5
00097B8A 9106                       	dc.b	nE1, $06
00097B8C EC04                       	smpsPSGAlterVol     $04
00097B8E E701                       	dc.b	smpsNoAttack, $01
00097B90 EC07                       	smpsPSGAlterVol     $07
00097B92 8003                       	dc.b	nRst, $03
00097B94 ECF5                       	smpsPSGAlterVol     $F5
00097B96 9106                       	dc.b	nE1, $06
00097B98 EC04                       	smpsPSGAlterVol     $04
00097B9A E701                       	dc.b	smpsNoAttack, $01
00097B9C EC07                       	smpsPSGAlterVol     $07
00097B9E 8006                       	dc.b	nRst, $06
00097BA0 E100                       	smpsAlterNote       $00
00097BA2 01                         	dc.b	$01
00097BA3 E104                       	smpsAlterNote       $04
00097BA5 01                         	dc.b	$01
00097BA6 E103                       	smpsAlterNote       $03
00097BA8 01                         	dc.b	$01
00097BA9 E1FD                       	smpsAlterNote       $FD
00097BAB 01                         	dc.b	$01
00097BAC ECF5                       	smpsPSGAlterVol     $F5
00097BAE 9107                       	dc.b	nE1, $07
00097BB0 EC0B                       	smpsPSGAlterVol     $0B
00097BB2 8004                       	dc.b	nRst, $04
00097BB4 ECF5                       	smpsPSGAlterVol     $F5
00097BB6 9106                       	dc.b	nE1, $06
00097BB8 EC0B                       	smpsPSGAlterVol     $0B
00097BBA 8007                       	dc.b	nRst, $07
00097BBC E103                       	smpsAlterNote       $03
00097BBE 0101                       	dc.b	$01, $01
00097BC0 E100                       	smpsAlterNote       $00
00097BC2 01                         	dc.b	$01
00097BC3 E1FA                       	smpsAlterNote       $FA
00097BC5 01                         	dc.b	$01
00097BC6 E1FD                       	smpsAlterNote       $FD
00097BC8 ECF5                       	smpsPSGAlterVol     $F5
00097BCA 9106                       	dc.b	nE1, $06
00097BCC EC04                       	smpsPSGAlterVol     $04
00097BCE E701                       	dc.b	smpsNoAttack, $01
00097BD0 EC07                       	smpsPSGAlterVol     $07
00097BD2 8003                       	dc.b	nRst, $03
00097BD4 ECF5                       	smpsPSGAlterVol     $F5
00097BD6 9106                       	dc.b	nE1, $06
00097BD8 EC04                       	smpsPSGAlterVol     $04
00097BDA E701                       	dc.b	smpsNoAttack, $01
00097BDC EC07                       	smpsPSGAlterVol     $07
00097BDE 8003                       	dc.b	nRst, $03
00097BE0 ECF5                       	smpsPSGAlterVol     $F5
00097BE2 9207                       	dc.b	nF1, $07
00097BE4 EC0B                       	smpsPSGAlterVol     $0B
00097BE6 8006                       	dc.b	nRst, $06
00097BE8 E100                       	smpsAlterNote       $00
00097BEA 01                         	dc.b	$01
00097BEB E104                       	smpsAlterNote       $04
00097BED 01                         	dc.b	$01
00097BEE E103                       	smpsAlterNote       $03
00097BF0 01                         	dc.b	$01
00097BF1 E1FD                       	smpsAlterNote       $FD
00097BF3 01                         	dc.b	$01
00097BF4 E1F9                       	smpsAlterNote       $F9
00097BF6 01                         	dc.b	$01
00097BF7 E1FD                       	smpsAlterNote       $FD
00097BF9 01                         	dc.b	$01
00097BFA E100                       	smpsAlterNote       $00
00097BFC 01                         	dc.b	$01
00097BFD E104                       	smpsAlterNote       $04
00097BFF 01                         	dc.b	$01
00097C00 E1FD                       	smpsAlterNote       $FD
00097C02 ECF5                       	smpsPSGAlterVol     $F5
00097C04 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097C08 EC04                       	smpsPSGAlterVol     $04
00097C0A E701                       	dc.b	smpsNoAttack, $01
00097C0C EC07                       	smpsPSGAlterVol     $07
00097C0E 8009                       	dc.b	nRst, $09
00097C10 E100                       	smpsAlterNote       $00
00097C12 01                         	dc.b	$01
00097C13 E104                       	smpsAlterNote       $04
00097C15 01                         	dc.b	$01
00097C16 E103                       	smpsAlterNote       $03
00097C18 01                         	dc.b	$01
00097C19 E1FD                       	smpsAlterNote       $FD
00097C1B 01                         	dc.b	$01
00097C1C E1F9                       	smpsAlterNote       $F9
00097C1E 01                         	dc.b	$01
00097C1F E1FD                       	smpsAlterNote       $FD
00097C21 01                         	dc.b	$01
00097C22 E100                       	smpsAlterNote       $00
00097C24 01                         	dc.b	$01
00097C25 E104                       	smpsAlterNote       $04
00097C27 01                         	dc.b	$01
00097C28 E100                       	smpsAlterNote       $00
00097C2A 01                         	dc.b	$01
00097C2B E1FA                       	smpsAlterNote       $FA
00097C2D 01                         	dc.b	$01
00097C2E E1F9                       	smpsAlterNote       $F9
00097C30 01                         	dc.b	$01
00097C31 E1FD                       	smpsAlterNote       $FD
00097C33 01                         	dc.b	$01
00097C34 E103                       	smpsAlterNote       $03
00097C36 0101                       	dc.b	$01, $01
00097C38 E100                       	smpsAlterNote       $00
00097C3A 01                         	dc.b	$01
00097C3B E1FD                       	smpsAlterNote       $FD
00097C3D ECF5                       	smpsPSGAlterVol     $F5
00097C3F 9202                       	dc.b	nF1, $02
00097C41 EC04                       	smpsPSGAlterVol     $04
00097C43 E701                       	dc.b	smpsNoAttack, $01
00097C45 ECFC                       	smpsPSGAlterVol     $FC
00097C47 9106                       	dc.b	nE1, $06
00097C49 EC04                       	smpsPSGAlterVol     $04
00097C4B E701                       	dc.b	smpsNoAttack, $01
00097C4D EC07                       	smpsPSGAlterVol     $07
00097C4F 8006                       	dc.b	nRst, $06
00097C51 E100                       	smpsAlterNote       $00
00097C53 01                         	dc.b	$01
00097C54 E104                       	smpsAlterNote       $04
00097C56 01                         	dc.b	$01
00097C57 E100                       	smpsAlterNote       $00
00097C59 01                         	dc.b	$01
00097C5A E1FD                       	smpsAlterNote       $FD
00097C5C 01                         	dc.b	$01
00097C5D E1F9                       	smpsAlterNote       $F9
00097C5F 01                         	dc.b	$01
00097C60 E1FD                       	smpsAlterNote       $FD
00097C62 01                         	dc.b	$01
00097C63 E103                       	smpsAlterNote       $03
00097C65 01                         	dc.b	$01
00097C66 E104                       	smpsAlterNote       $04
00097C68 01                         	dc.b	$01
00097C69 E1FD                       	smpsAlterNote       $FD
00097C6B ECF5                       	smpsPSGAlterVol     $F5
00097C6D 9102                       	dc.b	nE1, $02
00097C6F EC04                       	smpsPSGAlterVol     $04
00097C71 E701                       	dc.b	smpsNoAttack, $01
00097C73 ECFC                       	smpsPSGAlterVol     $FC
00097C75 920D                       	dc.b	nF1, $0D
00097C77 E100                       	smpsAlterNote       $00
00097C79 E701                       	dc.b	smpsNoAttack, $01
00097C7B E104                       	smpsAlterNote       $04
00097C7D E701                       	dc.b	smpsNoAttack, $01
00097C7F E100                       	smpsAlterNote       $00
00097C81 E701                       	dc.b	smpsNoAttack, $01
00097C83 E1FD                       	smpsAlterNote       $FD
00097C85 E701                       	dc.b	smpsNoAttack, $01
00097C87 E1F9                       	smpsAlterNote       $F9
00097C89 E701                       	dc.b	smpsNoAttack, $01
00097C8B E1FD                       	smpsAlterNote       $FD
00097C8D E701                       	dc.b	smpsNoAttack, $01
00097C8F E103                       	smpsAlterNote       $03
00097C91 E701                       	dc.b	smpsNoAttack, $01
00097C93 E104                       	smpsAlterNote       $04
00097C95 E701                       	dc.b	smpsNoAttack, $01
00097C97 E100                       	smpsAlterNote       $00
00097C99 E701                       	dc.b	smpsNoAttack, $01
00097C9B E1FA                       	smpsAlterNote       $FA
00097C9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097CA1 E1FD                       	smpsAlterNote       $FD
00097CA3 E701                       	dc.b	smpsNoAttack, $01
00097CA5 E103                       	smpsAlterNote       $03
00097CA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097CAB E1FD                       	smpsAlterNote       $FD
00097CAD E701                       	dc.b	smpsNoAttack, $01
00097CAF E1F9                       	smpsAlterNote       $F9
00097CB1 E701                       	dc.b	smpsNoAttack, $01
00097CB3 E1FA                       	smpsAlterNote       $FA
00097CB5 E701                       	dc.b	smpsNoAttack, $01
00097CB7 E100                       	smpsAlterNote       $00
00097CB9 EC04                       	smpsPSGAlterVol     $04
00097CBB E701                       	dc.b	smpsNoAttack, $01
00097CBD EC07                       	smpsPSGAlterVol     $07
00097CBF E104                       	smpsAlterNote       $04
00097CC1 8001                       	dc.b	nRst, $01
00097CC3 E100                       	smpsAlterNote       $00
00097CC5 01                         	dc.b	$01
00097CC6 E1FD                       	smpsAlterNote       $FD
00097CC8 01                         	dc.b	$01
00097CC9 E1F9                       	smpsAlterNote       $F9
00097CCB 01                         	dc.b	$01
00097CCC E1FD                       	smpsAlterNote       $FD
00097CCE 01                         	dc.b	$01
00097CCF E103                       	smpsAlterNote       $03
00097CD1 01                         	dc.b	$01
00097CD2 E104                       	smpsAlterNote       $04
00097CD4 01                         	dc.b	$01
00097CD5 E1FD                       	smpsAlterNote       $FD
00097CD7 ECF5                       	smpsPSGAlterVol     $F5
00097CD9 9106                       	dc.b	nE1, $06
00097CDB EC04                       	smpsPSGAlterVol     $04
00097CDD E701                       	dc.b	smpsNoAttack, $01
00097CDF EC07                       	smpsPSGAlterVol     $07
00097CE1 8003                       	dc.b	nRst, $03
00097CE3 ECF5                       	smpsPSGAlterVol     $F5
00097CE5 9106                       	dc.b	nE1, $06
00097CE7 EC04                       	smpsPSGAlterVol     $04
00097CE9 E701                       	dc.b	smpsNoAttack, $01
00097CEB EC07                       	smpsPSGAlterVol     $07
00097CED 8006                       	dc.b	nRst, $06
00097CEF E100                       	smpsAlterNote       $00
00097CF1 01                         	dc.b	$01
00097CF2 E104                       	smpsAlterNote       $04
00097CF4 01                         	dc.b	$01
00097CF5 E100                       	smpsAlterNote       $00
00097CF7 01                         	dc.b	$01
00097CF8 E1FA                       	smpsAlterNote       $FA
00097CFA 01                         	dc.b	$01
00097CFB E1FD                       	smpsAlterNote       $FD
00097CFD ECF5                       	smpsPSGAlterVol     $F5
00097CFF 9206                       	dc.b	nF1, $06
00097D01 EC04                       	smpsPSGAlterVol     $04
00097D03 E701                       	dc.b	smpsNoAttack, $01
00097D05 EC07                       	smpsPSGAlterVol     $07
00097D07 8003                       	dc.b	nRst, $03
00097D09 ECF5                       	smpsPSGAlterVol     $F5
00097D0B 9207                       	dc.b	nF1, $07
00097D0D EC0B                       	smpsPSGAlterVol     $0B
00097D0F 8006                       	dc.b	nRst, $06
00097D11 E100                       	smpsAlterNote       $00
00097D13 01                         	dc.b	$01
00097D14 E103                       	smpsAlterNote       $03
00097D16 0101                       	dc.b	$01, $01
00097D18 E1FD                       	smpsAlterNote       $FD
00097D1A 01                         	dc.b	$01
00097D1B ECF5                       	smpsPSGAlterVol     $F5
00097D1D 9107                       	dc.b	nE1, $07
00097D1F EC0B                       	smpsPSGAlterVol     $0B
00097D21 8004                       	dc.b	nRst, $04
00097D23 ECF5                       	smpsPSGAlterVol     $F5
00097D25 9106                       	dc.b	nE1, $06
00097D27 EC04                       	smpsPSGAlterVol     $04
00097D29 E701                       	dc.b	smpsNoAttack, $01
00097D2B EC07                       	smpsPSGAlterVol     $07
00097D2D 8006                       	dc.b	nRst, $06
00097D2F E103                       	smpsAlterNote       $03
00097D31 01                         	dc.b	$01
00097D32 E104                       	smpsAlterNote       $04
00097D34 01                         	dc.b	$01
00097D35 E100                       	smpsAlterNote       $00
00097D37 01                         	dc.b	$01
00097D38 E1FA                       	smpsAlterNote       $FA
00097D3A 01                         	dc.b	$01
00097D3B E1FD                       	smpsAlterNote       $FD
00097D3D ECF5                       	smpsPSGAlterVol     $F5
00097D3F 9106                       	dc.b	nE1, $06
00097D41 EC04                       	smpsPSGAlterVol     $04
00097D43 E701                       	dc.b	smpsNoAttack, $01
00097D45 EC07                       	smpsPSGAlterVol     $07
00097D47 8003                       	dc.b	nRst, $03
00097D49 ECF5                       	smpsPSGAlterVol     $F5
00097D4B 9106                       	dc.b	nE1, $06
00097D4D EC04                       	smpsPSGAlterVol     $04
00097D4F E701                       	dc.b	smpsNoAttack, $01
00097D51 EC07                       	smpsPSGAlterVol     $07
00097D53 8003                       	dc.b	nRst, $03
00097D55 ECF5                       	smpsPSGAlterVol     $F5
00097D57 9207                       	dc.b	nF1, $07
00097D59 EC0B                       	smpsPSGAlterVol     $0B
00097D5B 8006                       	dc.b	nRst, $06
00097D5D E100                       	smpsAlterNote       $00
00097D5F 01                         	dc.b	$01
00097D60 E103                       	smpsAlterNote       $03
00097D62 0101                       	dc.b	$01, $01
00097D64 E1FD                       	smpsAlterNote       $FD
00097D66 01                         	dc.b	$01
00097D67 E1F9                       	smpsAlterNote       $F9
00097D69 01                         	dc.b	$01
00097D6A E1FA                       	smpsAlterNote       $FA
00097D6C 01                         	dc.b	$01
00097D6D E100                       	smpsAlterNote       $00
00097D6F 01                         	dc.b	$01
00097D70 E104                       	smpsAlterNote       $04
00097D72 01                         	dc.b	$01
00097D73 E1FD                       	smpsAlterNote       $FD
00097D75 ECF5                       	smpsPSGAlterVol     $F5
00097D77 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097D7B EC04                       	smpsPSGAlterVol     $04
00097D7D E701                       	dc.b	smpsNoAttack, $01
00097D7F EC07                       	smpsPSGAlterVol     $07
00097D81 8009                       	dc.b	nRst, $09
00097D83 E100                       	smpsAlterNote       $00
00097D85 01                         	dc.b	$01
00097D86 E103                       	smpsAlterNote       $03
00097D88 0101                       	dc.b	$01, $01
00097D8A E1FD                       	smpsAlterNote       $FD
00097D8C 01                         	dc.b	$01
00097D8D E1F9                       	smpsAlterNote       $F9
00097D8F 01                         	dc.b	$01
00097D90 E1FA                       	smpsAlterNote       $FA
00097D92 01                         	dc.b	$01
00097D93 E100                       	smpsAlterNote       $00
00097D95 01                         	dc.b	$01
00097D96 E104                       	smpsAlterNote       $04
00097D98 01                         	dc.b	$01
00097D99 E100                       	smpsAlterNote       $00
00097D9B 01                         	dc.b	$01
00097D9C E1FD                       	smpsAlterNote       $FD
00097D9E 01                         	dc.b	$01
00097D9F E1F9                       	smpsAlterNote       $F9
00097DA1 01                         	dc.b	$01
00097DA2 E1FD                       	smpsAlterNote       $FD
00097DA4 01                         	dc.b	$01
00097DA5 E103                       	smpsAlterNote       $03
00097DA7 01                         	dc.b	$01
00097DA8 E104                       	smpsAlterNote       $04
00097DAA 01                         	dc.b	$01
00097DAB E100                       	smpsAlterNote       $00
00097DAD 01                         	dc.b	$01
00097DAE E1FD                       	smpsAlterNote       $FD
00097DB0 ECF5                       	smpsPSGAlterVol     $F5
00097DB2 9203 9106                  	dc.b	nF1, $03, nE1, $06
00097DB6 EC04                       	smpsPSGAlterVol     $04
00097DB8 E701                       	dc.b	smpsNoAttack, $01
00097DBA EC07                       	smpsPSGAlterVol     $07
00097DBC 8006                       	dc.b	nRst, $06
00097DBE E100                       	smpsAlterNote       $00
00097DC0 01                         	dc.b	$01
00097DC1 E104                       	smpsAlterNote       $04
00097DC3 01                         	dc.b	$01
00097DC4 E103                       	smpsAlterNote       $03
00097DC6 01                         	dc.b	$01
00097DC7 E1FD                       	smpsAlterNote       $FD
00097DC9 01                         	dc.b	$01
00097DCA E1F9                       	smpsAlterNote       $F9
00097DCC 01                         	dc.b	$01
00097DCD E1FD                       	smpsAlterNote       $FD
00097DCF 01                         	dc.b	$01
00097DD0 E100                       	smpsAlterNote       $00
00097DD2 01                         	dc.b	$01
00097DD3 E104                       	smpsAlterNote       $04
00097DD5 01                         	dc.b	$01
00097DD6 E1FD                       	smpsAlterNote       $FD
00097DD8 ECF5                       	smpsPSGAlterVol     $F5
00097DDA 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00097DDE E100                       	smpsAlterNote       $00
00097DE0 E701                       	dc.b	smpsNoAttack, $01
00097DE2 E104                       	smpsAlterNote       $04
00097DE4 E701                       	dc.b	smpsNoAttack, $01
00097DE6 E100                       	smpsAlterNote       $00
00097DE8 E701                       	dc.b	smpsNoAttack, $01
00097DEA E1FD                       	smpsAlterNote       $FD
00097DEC E701                       	dc.b	smpsNoAttack, $01
00097DEE E1F9                       	smpsAlterNote       $F9
00097DF0 E701                       	dc.b	smpsNoAttack, $01
00097DF2 E1FD                       	smpsAlterNote       $FD
00097DF4 E701                       	dc.b	smpsNoAttack, $01
00097DF6 E103                       	smpsAlterNote       $03
00097DF8 E701                       	dc.b	smpsNoAttack, $01
00097DFA E104                       	smpsAlterNote       $04
00097DFC E701                       	dc.b	smpsNoAttack, $01
00097DFE E100                       	smpsAlterNote       $00
00097E00 E701                       	dc.b	smpsNoAttack, $01
00097E02 E1FA                       	smpsAlterNote       $FA
00097E04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E08 E1FD                       	smpsAlterNote       $FD
00097E0A E701                       	dc.b	smpsNoAttack, $01
00097E0C E103                       	smpsAlterNote       $03
00097E0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E12 E100                       	smpsAlterNote       $00
00097E14 E701                       	dc.b	smpsNoAttack, $01
00097E16 E1FA                       	smpsAlterNote       $FA
00097E18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E1C E100                       	smpsAlterNote       $00
00097E1E EC04                       	smpsPSGAlterVol     $04
00097E20 E701                       	dc.b	smpsNoAttack, $01
00097E22 EC07                       	smpsPSGAlterVol     $07
00097E24 E104                       	smpsAlterNote       $04
00097E26 8001                       	dc.b	nRst, $01
00097E28 E103                       	smpsAlterNote       $03
00097E2A 01                         	dc.b	$01
00097E2B E1FD                       	smpsAlterNote       $FD
00097E2D 01                         	dc.b	$01
00097E2E E1F9                       	smpsAlterNote       $F9
00097E30 01                         	dc.b	$01
00097E31 E1FD                       	smpsAlterNote       $FD
00097E33 01                         	dc.b	$01
00097E34 E100                       	smpsAlterNote       $00
00097E36 01                         	dc.b	$01
00097E37 E104                       	smpsAlterNote       $04
00097E39 01                         	dc.b	$01
00097E3A E1FD                       	smpsAlterNote       $FD
00097E3C ECF5                       	smpsPSGAlterVol     $F5
00097E3E 9106                       	dc.b	nE1, $06
00097E40 EC04                       	smpsPSGAlterVol     $04
00097E42 E701                       	dc.b	smpsNoAttack, $01
00097E44 EC07                       	smpsPSGAlterVol     $07
00097E46 8003                       	dc.b	nRst, $03
00097E48 ECF5                       	smpsPSGAlterVol     $F5
00097E4A 9106                       	dc.b	nE1, $06
00097E4C EC04                       	smpsPSGAlterVol     $04
00097E4E E701                       	dc.b	smpsNoAttack, $01
00097E50 EC07                       	smpsPSGAlterVol     $07
00097E52 8006                       	dc.b	nRst, $06
00097E54 E100                       	smpsAlterNote       $00
00097E56 01                         	dc.b	$01
00097E57 E104                       	smpsAlterNote       $04
00097E59 01                         	dc.b	$01
00097E5A E100                       	smpsAlterNote       $00
00097E5C 01                         	dc.b	$01
00097E5D E1FD                       	smpsAlterNote       $FD
00097E5F 01                         	dc.b	$01
00097E60 ECF5                       	smpsPSGAlterVol     $F5
00097E62 9206                       	dc.b	nF1, $06
00097E64 EC04                       	smpsPSGAlterVol     $04
00097E66 E701                       	dc.b	smpsNoAttack, $01
00097E68 EC07                       	smpsPSGAlterVol     $07
00097E6A 8003                       	dc.b	nRst, $03
00097E6C ECF5                       	smpsPSGAlterVol     $F5
00097E6E 9207                       	dc.b	nF1, $07
00097E70 EC0B                       	smpsPSGAlterVol     $0B
00097E72 8007                       	dc.b	nRst, $07
00097E74 E103                       	smpsAlterNote       $03
00097E76 0101                       	dc.b	$01, $01
00097E78 E1FD                       	smpsAlterNote       $FD
00097E7A 01                         	dc.b	$01
00097E7B E1FA                       	smpsAlterNote       $FA
00097E7D 01                         	dc.b	$01
00097E7E E1FD                       	smpsAlterNote       $FD
00097E80 ECF5                       	smpsPSGAlterVol     $F5
00097E82 9106                       	dc.b	nE1, $06
00097E84 EC0B                       	smpsPSGAlterVol     $0B
00097E86 8004                       	dc.b	nRst, $04
00097E88 ECF5                       	smpsPSGAlterVol     $F5
00097E8A 9106                       	dc.b	nE1, $06
00097E8C EC04                       	smpsPSGAlterVol     $04
00097E8E E701                       	dc.b	smpsNoAttack, $01
00097E90 EC07                       	smpsPSGAlterVol     $07
00097E92 8006                       	dc.b	nRst, $06
00097E94 E100                       	smpsAlterNote       $00
00097E96 01                         	dc.b	$01
00097E97 E104                       	smpsAlterNote       $04
00097E99 01                         	dc.b	$01
00097E9A E100                       	smpsAlterNote       $00
00097E9C 01                         	dc.b	$01
00097E9D E1FA                       	smpsAlterNote       $FA
00097E9F 01                         	dc.b	$01
00097EA0 E1FD                       	smpsAlterNote       $FD
00097EA2 ECF5                       	smpsPSGAlterVol     $F5
00097EA4 9206                       	dc.b	nF1, $06
00097EA6 EC04                       	smpsPSGAlterVol     $04
00097EA8 E701                       	dc.b	smpsNoAttack, $01
00097EAA EC07                       	smpsPSGAlterVol     $07
00097EAC 8003                       	dc.b	nRst, $03
00097EAE ECF5                       	smpsPSGAlterVol     $F5
00097EB0 9206                       	dc.b	nF1, $06
00097EB2 EC04                       	smpsPSGAlterVol     $04
00097EB4 E701                       	dc.b	smpsNoAttack, $01
00097EB6 EC07                       	smpsPSGAlterVol     $07
00097EB8 8006                       	dc.b	nRst, $06
00097EBA E100                       	smpsAlterNote       $00
00097EBC 01                         	dc.b	$01
00097EBD E104                       	smpsAlterNote       $04
00097EBF 01                         	dc.b	$01
00097EC0 E103                       	smpsAlterNote       $03
00097EC2 01                         	dc.b	$01
00097EC3 E1FD                       	smpsAlterNote       $FD
00097EC5 01                         	dc.b	$01
00097EC6 ECF5                       	smpsPSGAlterVol     $F5
00097EC8 9107                       	dc.b	nE1, $07
00097ECA EC0B                       	smpsPSGAlterVol     $0B
00097ECC 8004                       	dc.b	nRst, $04
00097ECE ECF5                       	smpsPSGAlterVol     $F5
00097ED0 9106                       	dc.b	nE1, $06
00097ED2 EC0B                       	smpsPSGAlterVol     $0B
00097ED4 8007                       	dc.b	nRst, $07
00097ED6 E103                       	smpsAlterNote       $03
00097ED8 0101                       	dc.b	$01, $01
00097EDA E100                       	smpsAlterNote       $00
00097EDC 01                         	dc.b	$01
00097EDD E1FA                       	smpsAlterNote       $FA
00097EDF 01                         	dc.b	$01
00097EE0 E1FD                       	smpsAlterNote       $FD
00097EE2 ECF5                       	smpsPSGAlterVol     $F5
00097EE4 9206                       	dc.b	nF1, $06
00097EE6 EC04                       	smpsPSGAlterVol     $04
00097EE8 E701                       	dc.b	smpsNoAttack, $01
00097EEA EC07                       	smpsPSGAlterVol     $07
00097EEC 8003                       	dc.b	nRst, $03
00097EEE ECF5                       	smpsPSGAlterVol     $F5
00097EF0 9206                       	dc.b	nF1, $06
00097EF2 EC04                       	smpsPSGAlterVol     $04
00097EF4 E701                       	dc.b	smpsNoAttack, $01
00097EF6 EC07                       	smpsPSGAlterVol     $07
00097EF8 8006                       	dc.b	nRst, $06
00097EFA E100                       	smpsAlterNote       $00
00097EFC 01                         	dc.b	$01
00097EFD E104                       	smpsAlterNote       $04
00097EFF 01                         	dc.b	$01
00097F00 E100                       	smpsAlterNote       $00
00097F02 01                         	dc.b	$01
00097F03 E1FD                       	smpsAlterNote       $FD
00097F05 01                         	dc.b	$01
00097F06 ECF5                       	smpsPSGAlterVol     $F5
00097F08 9106                       	dc.b	nE1, $06
00097F0A EC04                       	smpsPSGAlterVol     $04
00097F0C E701                       	dc.b	smpsNoAttack, $01
00097F0E EC07                       	smpsPSGAlterVol     $07
00097F10 8003                       	dc.b	nRst, $03
00097F12 ECF5                       	smpsPSGAlterVol     $F5
00097F14 9107 9106                  	dc.b	nE1, $07, nE1, $06
00097F18 EC04                       	smpsPSGAlterVol     $04
00097F1A E701                       	dc.b	smpsNoAttack, $01
00097F1C ECFC                       	smpsPSGAlterVol     $FC
00097F1E 9103                       	dc.b	nE1, $03
00097F20 EC04                       	smpsPSGAlterVol     $04
00097F22 E701                       	dc.b	smpsNoAttack, $01
00097F24 ECFC                       	smpsPSGAlterVol     $FC
00097F26 9102                       	dc.b	nE1, $02
00097F28 EC04                       	smpsPSGAlterVol     $04
00097F2A E701                       	dc.b	smpsNoAttack, $01
00097F2C ECFC                       	smpsPSGAlterVol     $FC
00097F2E 9103                       	dc.b	nE1, $03
00097F30 EC0B                       	smpsPSGAlterVol     $0B
00097F32 800A                       	dc.b	nRst, $0A
00097F34 E100                       	smpsAlterNote       $00
00097F36 01                         	dc.b	$01
00097F37 E104                       	smpsAlterNote       $04
00097F39 01                         	dc.b	$01
00097F3A E100                       	smpsAlterNote       $00
00097F3C 01                         	dc.b	$01
00097F3D E1FA                       	smpsAlterNote       $FA
00097F3F 01                         	dc.b	$01
00097F40 E1F9                       	smpsAlterNote       $F9
00097F42 01                         	dc.b	$01
00097F43 E1FD                       	smpsAlterNote       $FD
00097F45 01                         	dc.b	$01
00097F46 E103                       	smpsAlterNote       $03
00097F48 0101                       	dc.b	$01, $01
00097F4A E100                       	smpsAlterNote       $00
00097F4C 01                         	dc.b	$01
00097F4D E1FA                       	smpsAlterNote       $FA
00097F4F 0101                       	dc.b	$01, $01
00097F51 E1FD                       	smpsAlterNote       $FD
00097F53 ECF5                       	smpsPSGAlterVol     $F5
00097F55 9206                       	dc.b	nF1, $06
00097F57 EC04                       	smpsPSGAlterVol     $04
00097F59 E704                       	dc.b	smpsNoAttack, $04
00097F5B ECFC                       	smpsPSGAlterVol     $FC
00097F5D 9206                       	dc.b	nF1, $06
00097F5F EC04                       	smpsPSGAlterVol     $04
00097F61 E701                       	dc.b	smpsNoAttack, $01
00097F63 EC07                       	smpsPSGAlterVol     $07
00097F65 8006                       	dc.b	nRst, $06
00097F67 E100                       	smpsAlterNote       $00
00097F69 01                         	dc.b	$01
00097F6A E104                       	smpsAlterNote       $04
00097F6C 01                         	dc.b	$01
00097F6D E103                       	smpsAlterNote       $03
00097F6F 01                         	dc.b	$01
00097F70 E1FD                       	smpsAlterNote       $FD
00097F72 01                         	dc.b	$01
00097F73 ECF5                       	smpsPSGAlterVol     $F5
00097F75 9407                       	dc.b	nG1, $07
00097F77 EC0B                       	smpsPSGAlterVol     $0B
00097F79 8004                       	dc.b	nRst, $04
00097F7B ECF5                       	smpsPSGAlterVol     $F5
00097F7D 9406                       	dc.b	nG1, $06
00097F7F EC0B                       	smpsPSGAlterVol     $0B
00097F81 8007                       	dc.b	nRst, $07
00097F83 E103                       	smpsAlterNote       $03
00097F85 0101                       	dc.b	$01, $01
00097F87 E1FD                       	smpsAlterNote       $FD
00097F89 01                         	dc.b	$01
00097F8A E1F9                       	smpsAlterNote       $F9
00097F8C 01                         	dc.b	$01
00097F8D E1FD                       	smpsAlterNote       $FD
00097F8F ECF5                       	smpsPSGAlterVol     $F5
00097F91 9206                       	dc.b	nF1, $06
00097F93 EC04                       	smpsPSGAlterVol     $04
00097F95 E701                       	dc.b	smpsNoAttack, $01
00097F97 EC07                       	smpsPSGAlterVol     $07
00097F99 8003                       	dc.b	nRst, $03
00097F9B ECF5                       	smpsPSGAlterVol     $F5
00097F9D 9206                       	dc.b	nF1, $06
00097F9F EC04                       	smpsPSGAlterVol     $04
00097FA1 E701                       	dc.b	smpsNoAttack, $01
00097FA3 EC07                       	smpsPSGAlterVol     $07
00097FA5 8006                       	dc.b	nRst, $06
00097FA7 E100                       	smpsAlterNote       $00
00097FA9 01                         	dc.b	$01
00097FAA E104                       	smpsAlterNote       $04
00097FAC 01                         	dc.b	$01
00097FAD E100                       	smpsAlterNote       $00
00097FAF 01                         	dc.b	$01
00097FB0 E1FA                       	smpsAlterNote       $FA
00097FB2 01                         	dc.b	$01
00097FB3 E1FD                       	smpsAlterNote       $FD
00097FB5 ECF5                       	smpsPSGAlterVol     $F5
00097FB7 9206                       	dc.b	nF1, $06
00097FB9 EC04                       	smpsPSGAlterVol     $04
00097FBB E701                       	dc.b	smpsNoAttack, $01
00097FBD EC07                       	smpsPSGAlterVol     $07
00097FBF 8003                       	dc.b	nRst, $03
00097FC1 ECF5                       	smpsPSGAlterVol     $F5
00097FC3 9107                       	dc.b	nE1, $07
00097FC5 EC0B                       	smpsPSGAlterVol     $0B
00097FC7 8006                       	dc.b	nRst, $06
00097FC9 E100                       	smpsAlterNote       $00
00097FCB 01                         	dc.b	$01
00097FCC E103                       	smpsAlterNote       $03
00097FCE 0101                       	dc.b	$01, $01
00097FD0 E1FD                       	smpsAlterNote       $FD
00097FD2 01                         	dc.b	$01
00097FD3 ECF5                       	smpsPSGAlterVol     $F5
00097FD5 9207                       	dc.b	nF1, $07
00097FD7 EC0B                       	smpsPSGAlterVol     $0B
00097FD9 8004                       	dc.b	nRst, $04
00097FDB ECF5                       	smpsPSGAlterVol     $F5
00097FDD 9206                       	dc.b	nF1, $06
00097FDF EC04                       	smpsPSGAlterVol     $04
00097FE1 E701                       	dc.b	smpsNoAttack, $01
00097FE3 EC07                       	smpsPSGAlterVol     $07
00097FE5 8006                       	dc.b	nRst, $06
00097FE7 E103                       	smpsAlterNote       $03
00097FE9 01                         	dc.b	$01
00097FEA E104                       	smpsAlterNote       $04
00097FEC 01                         	dc.b	$01
00097FED E100                       	smpsAlterNote       $00
00097FEF 01                         	dc.b	$01
00097FF0 E1FB                       	smpsAlterNote       $FB
00097FF2 01                         	dc.b	$01
00097FF3 E1FD                       	smpsAlterNote       $FD
00097FF5 ECF5                       	smpsPSGAlterVol     $F5
00097FF7 9406                       	dc.b	nG1, $06
00097FF9 EC04                       	smpsPSGAlterVol     $04
00097FFB E701                       	dc.b	smpsNoAttack, $01
00097FFD EC07                       	smpsPSGAlterVol     $07
00097FFF 8003                       	dc.b	nRst, $03
00098001 ECF5                       	smpsPSGAlterVol     $F5
00098003 9406                       	dc.b	nG1, $06
00098005 EC04                       	smpsPSGAlterVol     $04
00098007 E701                       	dc.b	smpsNoAttack, $01
00098009 EC07                       	smpsPSGAlterVol     $07
0009800B 8006                       	dc.b	nRst, $06
0009800D E100                       	smpsAlterNote       $00
0009800F 01                         	dc.b	$01
00098010 E104                       	smpsAlterNote       $04
00098012 01                         	dc.b	$01
00098013 E100                       	smpsAlterNote       $00
00098015 01                         	dc.b	$01
00098016 E1FD                       	smpsAlterNote       $FD
00098018 01                         	dc.b	$01
00098019 ECF5                       	smpsPSGAlterVol     $F5
0009801B 9206                       	dc.b	nF1, $06
0009801D EC04                       	smpsPSGAlterVol     $04
0009801F E701                       	dc.b	smpsNoAttack, $01
00098021 EC07                       	smpsPSGAlterVol     $07
00098023 8003                       	dc.b	nRst, $03
00098025 ECF5                       	smpsPSGAlterVol     $F5
00098027 9207                       	dc.b	nF1, $07
00098029 EC0B                       	smpsPSGAlterVol     $0B
0009802B 8007                       	dc.b	nRst, $07
0009802D E103                       	smpsAlterNote       $03
0009802F 0101                       	dc.b	$01, $01
00098031 E1FD                       	smpsAlterNote       $FD
00098033 01                         	dc.b	$01
00098034 E1FA                       	smpsAlterNote       $FA
00098036 01                         	dc.b	$01
00098037 E1FD                       	smpsAlterNote       $FD
00098039 ECF5                       	smpsPSGAlterVol     $F5
0009803B 9206                       	dc.b	nF1, $06
0009803D EC0B                       	smpsPSGAlterVol     $0B
0009803F 8004                       	dc.b	nRst, $04
00098041 ECF5                       	smpsPSGAlterVol     $F5
00098043 9206                       	dc.b	nF1, $06
00098045 EC04                       	smpsPSGAlterVol     $04
00098047 E701                       	dc.b	smpsNoAttack, $01
00098049 EC07                       	smpsPSGAlterVol     $07
0009804B 8006                       	dc.b	nRst, $06
0009804D E100                       	smpsAlterNote       $00
0009804F 01                         	dc.b	$01
00098050 E104                       	smpsAlterNote       $04
00098052 01                         	dc.b	$01
00098053 E100                       	smpsAlterNote       $00
00098055 01                         	dc.b	$01
00098056 E1FA                       	smpsAlterNote       $FA
00098058 01                         	dc.b	$01
00098059 E1FD                       	smpsAlterNote       $FD
0009805B ECF5                       	smpsPSGAlterVol     $F5
0009805D 9206                       	dc.b	nF1, $06
0009805F EC04                       	smpsPSGAlterVol     $04
00098061 E701                       	dc.b	smpsNoAttack, $01
00098063 EC07                       	smpsPSGAlterVol     $07
00098065 8003                       	dc.b	nRst, $03
00098067 ECF5                       	smpsPSGAlterVol     $F5
00098069 9207                       	dc.b	nF1, $07
0009806B EC0B                       	smpsPSGAlterVol     $0B
0009806D 8006                       	dc.b	nRst, $06
0009806F E100                       	smpsAlterNote       $00
00098071 01                         	dc.b	$01
00098072 E103                       	smpsAlterNote       $03
00098074 0101                       	dc.b	$01, $01
00098076 E1FD                       	smpsAlterNote       $FD
00098078 01                         	dc.b	$01
00098079 ECF5                       	smpsPSGAlterVol     $F5
0009807B 9207                       	dc.b	nF1, $07
0009807D EC0B                       	smpsPSGAlterVol     $0B
0009807F 8004                       	dc.b	nRst, $04
00098081 ECF5                       	smpsPSGAlterVol     $F5
00098083 9206                       	dc.b	nF1, $06
00098085 EC0B                       	smpsPSGAlterVol     $0B
00098087 8007                       	dc.b	nRst, $07
00098089 E103                       	smpsAlterNote       $03
0009808B 0101                       	dc.b	$01, $01
0009808D E100                       	smpsAlterNote       $00
0009808F 01                         	dc.b	$01
00098090 E1FA                       	smpsAlterNote       $FA
00098092 01                         	dc.b	$01
00098093 E1FD                       	smpsAlterNote       $FD
00098095 ECF5                       	smpsPSGAlterVol     $F5
00098097 9206                       	dc.b	nF1, $06
00098099 EC04                       	smpsPSGAlterVol     $04
0009809B E701                       	dc.b	smpsNoAttack, $01
0009809D EC07                       	smpsPSGAlterVol     $07
0009809F 8003                       	dc.b	nRst, $03
000980A1 ECF5                       	smpsPSGAlterVol     $F5
000980A3 9206                       	dc.b	nF1, $06
000980A5 EC04                       	smpsPSGAlterVol     $04
000980A7 E701                       	dc.b	smpsNoAttack, $01
000980A9 EC07                       	smpsPSGAlterVol     $07
000980AB 8006                       	dc.b	nRst, $06
000980AD E100                       	smpsAlterNote       $00
000980AF 01                         	dc.b	$01
000980B0 E104                       	smpsAlterNote       $04
000980B2 01                         	dc.b	$01
000980B3 E100                       	smpsAlterNote       $00
000980B5 01                         	dc.b	$01
000980B6 E1FD                       	smpsAlterNote       $FD
000980B8 01                         	dc.b	$01
000980B9 ECF5                       	smpsPSGAlterVol     $F5
000980BB 9206                       	dc.b	nF1, $06
000980BD EC04                       	smpsPSGAlterVol     $04
000980BF E701                       	dc.b	smpsNoAttack, $01
000980C1 EC07                       	smpsPSGAlterVol     $07
000980C3 8003                       	dc.b	nRst, $03
000980C5 ECF5                       	smpsPSGAlterVol     $F5
000980C7 9207                       	dc.b	nF1, $07
000980C9 EC0B                       	smpsPSGAlterVol     $0B
000980CB 8007                       	dc.b	nRst, $07
000980CD E104                       	smpsAlterNote       $04
000980CF 0101                       	dc.b	$01, $01
000980D1 E1FB                       	smpsAlterNote       $FB
000980D3 01                         	dc.b	$01
000980D4 E1F6                       	smpsAlterNote       $F6
000980D6 0101                       	dc.b	$01, $01
000980D8 E1FF                       	smpsAlterNote       $FF
000980DA 01                         	dc.b	$01
000980DB E105                       	smpsAlterNote       $05
000980DD 01                         	dc.b	$01
000980DE E104                       	smpsAlterNote       $04
000980E0 01                         	dc.b	$01
000980E1 E1FB                       	smpsAlterNote       $FB
000980E3 01                         	dc.b	$01
000980E4 E1F5                       	smpsAlterNote       $F5
000980E6 01                         	dc.b	$01
000980E7 E1FC                       	smpsAlterNote       $FC
000980E9 ECF5                       	smpsPSGAlterVol     $F5
000980EB 8B0E                       	dc.b	nBb0, $0E
000980ED E102                       	smpsAlterNote       $02
000980EF EC0B                       	smpsPSGAlterVol     $0B
000980F1 8001                       	dc.b	nRst, $01
000980F3 E101                       	smpsAlterNote       $01
000980F5 01                         	dc.b	$01
000980F6 E1FC                       	smpsAlterNote       $FC
000980F8 01                         	dc.b	$01
000980F9 E1F9                       	smpsAlterNote       $F9
000980FB 0101                       	dc.b	$01, $01
000980FD E1FF                       	smpsAlterNote       $FF
000980FF 01                         	dc.b	$01
00098100 E102                       	smpsAlterNote       $02
00098102 01                         	dc.b	$01
00098103 E1FF                       	smpsAlterNote       $FF
00098105 01                         	dc.b	$01
00098106 E1FC                       	smpsAlterNote       $FC
00098108 01                         	dc.b	$01
00098109 E1F8                       	smpsAlterNote       $F8
0009810B 01                         	dc.b	$01
0009810C E1FC                       	smpsAlterNote       $FC
0009810E 01                         	dc.b	$01
0009810F E101                       	smpsAlterNote       $01
00098111 01                         	dc.b	$01
00098112 E102                       	smpsAlterNote       $02
00098114 01                         	dc.b	$01
00098115 E1FF                       	smpsAlterNote       $FF
00098117 01                         	dc.b	$01
00098118 E1FB                       	smpsAlterNote       $FB
0009811A ECF5                       	smpsPSGAlterVol     $F5
0009811C 8D0D                       	dc.b	nC1, $0D
0009811E E101                       	smpsAlterNote       $01
00098120 EC0B                       	smpsPSGAlterVol     $0B
00098122 8001                       	dc.b	nRst, $01
00098124 E102                       	smpsAlterNote       $02
00098126 01                         	dc.b	$01
00098127 E1FF                       	smpsAlterNote       $FF
00098129 01                         	dc.b	$01
0009812A E1F9                       	smpsAlterNote       $F9
0009812C 0101                       	dc.b	$01, $01
0009812E E1FC                       	smpsAlterNote       $FC
00098130 01                         	dc.b	$01
00098131 E101                       	smpsAlterNote       $01
00098133 0101                       	dc.b	$01, $01
00098135 E1FC                       	smpsAlterNote       $FC
00098137 01                         	dc.b	$01
00098138 E1F9                       	smpsAlterNote       $F9
0009813A 0101                       	dc.b	$01, $01
0009813C E1FF                       	smpsAlterNote       $FF
0009813E 01                         	dc.b	$01
0009813F E102                       	smpsAlterNote       $02
00098141 01                         	dc.b	$01
00098142 E101                       	smpsAlterNote       $01
00098144 01                         	dc.b	$01
00098145 E1FC                       	smpsAlterNote       $FC
00098147 ECF5                       	smpsPSGAlterVol     $F5
00098149 8F0D                       	dc.b	nD1, $0D
0009814B E1FF                       	smpsAlterNote       $FF
0009814D EC04                       	smpsPSGAlterVol     $04
0009814F E701                       	dc.b	smpsNoAttack, $01
00098151 EC07                       	smpsPSGAlterVol     $07
00098153 E103                       	smpsAlterNote       $03
00098155 8001                       	dc.b	nRst, $01
00098157 E102                       	smpsAlterNote       $02
00098159 01                         	dc.b	$01
0009815A E1FD                       	smpsAlterNote       $FD
0009815C 01                         	dc.b	$01
0009815D E1F9                       	smpsAlterNote       $F9
0009815F 01                         	dc.b	$01
00098160 E1FD                       	smpsAlterNote       $FD
00098162 01                         	dc.b	$01
00098163 E100                       	smpsAlterNote       $00
00098165 01                         	dc.b	$01
00098166 E103                       	smpsAlterNote       $03
00098168 01                         	dc.b	$01
00098169 E100                       	smpsAlterNote       $00
0009816B 01                         	dc.b	$01
0009816C E1FA                       	smpsAlterNote       $FA
0009816E 01                         	dc.b	$01
0009816F E1F9                       	smpsAlterNote       $F9
00098171 01                         	dc.b	$01
00098172 E1FD                       	smpsAlterNote       $FD
00098174 01                         	dc.b	$01
00098175 E102                       	smpsAlterNote       $02
00098177 0101                       	dc.b	$01, $01
00098179 E100                       	smpsAlterNote       $00
0009817B 01                         	dc.b	$01
0009817C E1FD                       	smpsAlterNote       $FD
0009817E ECF5                       	smpsPSGAlterVol     $F5
00098180 910D                       	dc.b	nE1, $0D
00098182 E103                       	smpsAlterNote       $03
00098184 EC0B                       	smpsPSGAlterVol     $0B
00098186 8001 01                    	dc.b	nRst, $01, $01
00098189 E100                       	smpsAlterNote       $00
0009818B 01                         	dc.b	$01
0009818C E1FA                       	smpsAlterNote       $FA
0009818E 0101                       	dc.b	$01, $01
00098190 E100                       	smpsAlterNote       $00
00098192 01                         	dc.b	$01
00098193 E103                       	smpsAlterNote       $03
00098195 01                         	dc.b	$01
00098196 E1FD                       	smpsAlterNote       $FD
00098198 ECF5                       	smpsPSGAlterVol     $F5
0009819A 9206                       	dc.b	nF1, $06
0009819C EC04                       	smpsPSGAlterVol     $04
0009819E E701                       	dc.b	smpsNoAttack, $01
000981A0 EC07                       	smpsPSGAlterVol     $07
000981A2 8003                       	dc.b	nRst, $03
000981A4 ECF5                       	smpsPSGAlterVol     $F5
000981A6 9207                       	dc.b	nF1, $07
000981A8 EC0B                       	smpsPSGAlterVol     $0B
000981AA 8006                       	dc.b	nRst, $06
000981AC E100                       	smpsAlterNote       $00
000981AE 01                         	dc.b	$01
000981AF E103                       	smpsAlterNote       $03
000981B1 0101                       	dc.b	$01, $01
000981B3 E1FD                       	smpsAlterNote       $FD
000981B5 01                         	dc.b	$01
000981B6 ECF5                       	smpsPSGAlterVol     $F5
000981B8 9407                       	dc.b	nG1, $07
000981BA EC0B                       	smpsPSGAlterVol     $0B
000981BC 8004                       	dc.b	nRst, $04
000981BE ECF5                       	smpsPSGAlterVol     $F5
000981C0 9406                       	dc.b	nG1, $06
000981C2 EC04                       	smpsPSGAlterVol     $04
000981C4 E701                       	dc.b	smpsNoAttack, $01
000981C6 EC07                       	smpsPSGAlterVol     $07
000981C8 8006                       	dc.b	nRst, $06
000981CA E103                       	smpsAlterNote       $03
000981CC 01                         	dc.b	$01
000981CD E104                       	smpsAlterNote       $04
000981CF 01                         	dc.b	$01
000981D0 E100                       	smpsAlterNote       $00
000981D2 01                         	dc.b	$01
000981D3 E1F9                       	smpsAlterNote       $F9
000981D5 01                         	dc.b	$01
000981D6 E1FD                       	smpsAlterNote       $FD
000981D8 ECF5                       	smpsPSGAlterVol     $F5
000981DA 9206                       	dc.b	nF1, $06
000981DC EC04                       	smpsPSGAlterVol     $04
000981DE E701                       	dc.b	smpsNoAttack, $01
000981E0 EC07                       	smpsPSGAlterVol     $07
000981E2 8003                       	dc.b	nRst, $03
000981E4 ECF5                       	smpsPSGAlterVol     $F5
000981E6 9206                       	dc.b	nF1, $06
000981E8 EC04                       	smpsPSGAlterVol     $04
000981EA E701                       	dc.b	smpsNoAttack, $01
000981EC EC07                       	smpsPSGAlterVol     $07
000981EE 8006                       	dc.b	nRst, $06
000981F0 E100                       	smpsAlterNote       $00
000981F2 01                         	dc.b	$01
000981F3 E104                       	smpsAlterNote       $04
000981F5 01                         	dc.b	$01
000981F6 E103                       	smpsAlterNote       $03
000981F8 01                         	dc.b	$01
000981F9 E1FD                       	smpsAlterNote       $FD
000981FB 01                         	dc.b	$01
000981FC ECF5                       	smpsPSGAlterVol     $F5
000981FE 9407                       	dc.b	nG1, $07
00098200 EC0B                       	smpsPSGAlterVol     $0B
00098202 8004                       	dc.b	nRst, $04
00098204 ECF5                       	smpsPSGAlterVol     $F5
00098206 9406                       	dc.b	nG1, $06
00098208 EC0B                       	smpsPSGAlterVol     $0B
0009820A 8007                       	dc.b	nRst, $07
0009820C E103                       	smpsAlterNote       $03
0009820E 0101                       	dc.b	$01, $01
00098210 E100                       	smpsAlterNote       $00
00098212 01                         	dc.b	$01
00098213 E1F9                       	smpsAlterNote       $F9
00098215 01                         	dc.b	$01
00098216 E1FD                       	smpsAlterNote       $FD
00098218 ECF5                       	smpsPSGAlterVol     $F5
0009821A 9206                       	dc.b	nF1, $06
0009821C EC04                       	smpsPSGAlterVol     $04
0009821E E701                       	dc.b	smpsNoAttack, $01
00098220 EC07                       	smpsPSGAlterVol     $07
00098222 8003                       	dc.b	nRst, $03
00098224 ECF5                       	smpsPSGAlterVol     $F5
00098226 9206                       	dc.b	nF1, $06
00098228 EC04                       	smpsPSGAlterVol     $04
0009822A E701                       	dc.b	smpsNoAttack, $01
0009822C EC07                       	smpsPSGAlterVol     $07
0009822E 8006                       	dc.b	nRst, $06
00098230 E100                       	smpsAlterNote       $00
00098232 01                         	dc.b	$01
00098233 E104                       	smpsAlterNote       $04
00098235 01                         	dc.b	$01
00098236 E100                       	smpsAlterNote       $00
00098238 01                         	dc.b	$01
00098239 E1FB                       	smpsAlterNote       $FB
0009823B 01                         	dc.b	$01
0009823C E1FD                       	smpsAlterNote       $FD
0009823E ECF5                       	smpsPSGAlterVol     $F5
00098240 9406                       	dc.b	nG1, $06
00098242 EC04                       	smpsPSGAlterVol     $04
00098244 E701                       	dc.b	smpsNoAttack, $01
00098246 EC07                       	smpsPSGAlterVol     $07
00098248 8003                       	dc.b	nRst, $03
0009824A ECF5                       	smpsPSGAlterVol     $F5
0009824C 9407                       	dc.b	nG1, $07
0009824E EC0B                       	smpsPSGAlterVol     $0B
00098250 8006                       	dc.b	nRst, $06
00098252 E100                       	smpsAlterNote       $00
00098254 01                         	dc.b	$01
00098255 E103                       	smpsAlterNote       $03
00098257 0101                       	dc.b	$01, $01
00098259 E1FD                       	smpsAlterNote       $FD
0009825B 01                         	dc.b	$01
0009825C ECF5                       	smpsPSGAlterVol     $F5
0009825E 9207                       	dc.b	nF1, $07
00098260 EC0B                       	smpsPSGAlterVol     $0B
00098262 8004                       	dc.b	nRst, $04
00098264 ECF5                       	smpsPSGAlterVol     $F5
00098266 9206                       	dc.b	nF1, $06
00098268 EC04                       	smpsPSGAlterVol     $04
0009826A E701                       	dc.b	smpsNoAttack, $01
0009826C ECFC                       	smpsPSGAlterVol     $FC
0009826E E1FC                       	smpsAlterNote       $FC
00098270 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00098274 EC04                       	smpsPSGAlterVol     $04
00098276 E701                       	dc.b	smpsNoAttack, $01
00098278 ECFC                       	smpsPSGAlterVol     $FC
0009827A 9003                       	dc.b	nEb1, $03
0009827C E1FD                       	smpsAlterNote       $FD
0009827E 9403                       	dc.b	nG1, $03
00098280 EC04                       	smpsPSGAlterVol     $04
00098282 E701                       	dc.b	smpsNoAttack, $01
00098284 E1FE                       	smpsAlterNote       $FE
00098286 ECFC                       	smpsPSGAlterVol     $FC
00098288 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0009828C EC04                       	smpsPSGAlterVol     $04
0009828E E701                       	dc.b	smpsNoAttack, $01
00098290 EC07                       	smpsPSGAlterVol     $07
00098292 8009                       	dc.b	nRst, $09
00098294 E100                       	smpsAlterNote       $00
00098296 01                         	dc.b	$01
00098297 F6F5 19                    	smpsJump            music84_Jump07
0009829A                            
0009829A                            ; PSG2 Data
0009829A                            music84_PSG2:
0009829A E1FC                       	smpsAlterNote       $FC
0009829C EC04                       	smpsPSGAlterVol     $04
0009829E 8F03                       	dc.b	nD1, $03
000982A0 E1FD                       	smpsAlterNote       $FD
000982A2 9203                       	dc.b	nF1, $03
000982A4 EC04                       	smpsPSGAlterVol     $04
000982A6 E701                       	dc.b	smpsNoAttack, $01
000982A8 E1FE                       	smpsAlterNote       $FE
000982AA ECFC                       	smpsPSGAlterVol     $FC
000982AC 9603                       	dc.b	nA1, $03
000982AE E1FD                       	smpsAlterNote       $FD
000982B0 9103                       	dc.b	nE1, $03
000982B2 EC04                       	smpsPSGAlterVol     $04
000982B4 E701                       	dc.b	smpsNoAttack, $01
000982B6 ECFC                       	smpsPSGAlterVol     $FC
000982B8 9403                       	dc.b	nG1, $03
000982BA E1FE                       	smpsAlterNote       $FE
000982BC 9703                       	dc.b	nBb1, $03
000982BE EC04                       	smpsPSGAlterVol     $04
000982C0 E701                       	dc.b	smpsNoAttack, $01
000982C2 E1FF                       	smpsAlterNote       $FF
000982C4 ECFC                       	smpsPSGAlterVol     $FC
000982C6 9B02                       	dc.b	nD2, $02
000982C8 EC04                       	smpsPSGAlterVol     $04
000982CA E701                       	dc.b	smpsNoAttack, $01
000982CC ECFC                       	smpsPSGAlterVol     $FC
000982CE E1FE                       	smpsAlterNote       $FE
000982D0 9A03                       	dc.b	nCs2, $03
000982D2 EC0B                       	smpsPSGAlterVol     $0B
000982D4 800A                       	dc.b	nRst, $0A
000982D6 E102                       	smpsAlterNote       $02
000982D8 01                         	dc.b	$01
000982D9 E10A                       	smpsAlterNote       $0A
000982DB 01                         	dc.b	$01
000982DC E102                       	smpsAlterNote       $02
000982DE 01                         	dc.b	$01
000982DF E1FC                       	smpsAlterNote       $FC
000982E1 01                         	dc.b	$01
000982E2 E10A                       	smpsAlterNote       $0A
000982E4 01                         	dc.b	$01
000982E5 E1FC                       	smpsAlterNote       $FC
000982E7 01                         	dc.b	$01
000982E8 E108                       	smpsAlterNote       $08
000982EA 01                         	dc.b	$01
000982EB E10A                       	smpsAlterNote       $0A
000982ED 01                         	dc.b	$01
000982EE E102                       	smpsAlterNote       $02
000982F0 01                         	dc.b	$01
000982F1 E1F7                       	smpsAlterNote       $F7
000982F3 0101                       	dc.b	$01, $01
000982F5 E102                       	smpsAlterNote       $02
000982F7 01                         	dc.b	$01
000982F8 E108                       	smpsAlterNote       $08
000982FA 0101                       	dc.b	$01, $01
000982FC E1FC                       	smpsAlterNote       $FC
000982FE 01                         	dc.b	$01
000982FF E10A                       	smpsAlterNote       $0A
00098301 01                         	dc.b	$01
00098302 E1F7                       	smpsAlterNote       $F7
00098304 01                         	dc.b	$01
00098305 E102                       	smpsAlterNote       $02
00098307 01                         	dc.b	$01
00098308 E10A                       	smpsAlterNote       $0A
0009830A 01                         	dc.b	$01
0009830B E102                       	smpsAlterNote       $02
0009830D 01                         	dc.b	$01
0009830E E1FC                       	smpsAlterNote       $FC
00098310 01                         	dc.b	$01
00098311                            
00098311                            music84_Jump06:
00098311 E10A                       	smpsAlterNote       $0A
00098313 8001                       	dc.b	nRst, $01
00098315 E1FC                       	smpsAlterNote       $FC
00098317 01                         	dc.b	$01
00098318 E108                       	smpsAlterNote       $08
0009831A 01                         	dc.b	$01
0009831B E10A                       	smpsAlterNote       $0A
0009831D 01                         	dc.b	$01
0009831E E1FC                       	smpsAlterNote       $FC
00098320 ECF5                       	smpsPSGAlterVol     $F5
00098322 8F06                       	dc.b	nD1, $06
00098324 EC04                       	smpsPSGAlterVol     $04
00098326 E701                       	dc.b	smpsNoAttack, $01
00098328 EC07                       	smpsPSGAlterVol     $07
0009832A 8003                       	dc.b	nRst, $03
0009832C ECF5                       	smpsPSGAlterVol     $F5
0009832E 8F06                       	dc.b	nD1, $06
00098330 EC04                       	smpsPSGAlterVol     $04
00098332 E701                       	dc.b	smpsNoAttack, $01
00098334 EC07                       	smpsPSGAlterVol     $07
00098336 8006                       	dc.b	nRst, $06
00098338 E1FF                       	smpsAlterNote       $FF
0009833A 01                         	dc.b	$01
0009833B E102                       	smpsAlterNote       $02
0009833D 01                         	dc.b	$01
0009833E E1FF                       	smpsAlterNote       $FF
00098340 01                         	dc.b	$01
00098341 E1F9                       	smpsAlterNote       $F9
00098343 01                         	dc.b	$01
00098344 E1FC                       	smpsAlterNote       $FC
00098346 ECF5                       	smpsPSGAlterVol     $F5
00098348 9006                       	dc.b	nEb1, $06
0009834A EC04                       	smpsPSGAlterVol     $04
0009834C E701                       	dc.b	smpsNoAttack, $01
0009834E EC07                       	smpsPSGAlterVol     $07
00098350 8003                       	dc.b	nRst, $03
00098352 ECF5                       	smpsPSGAlterVol     $F5
00098354 9007                       	dc.b	nEb1, $07
00098356 EC0B                       	smpsPSGAlterVol     $0B
00098358 8006                       	dc.b	nRst, $06
0009835A E1FF                       	smpsAlterNote       $FF
0009835C 01                         	dc.b	$01
0009835D E103                       	smpsAlterNote       $03
0009835F 0101                       	dc.b	$01, $01
00098361 E1FC                       	smpsAlterNote       $FC
00098363 01                         	dc.b	$01
00098364 ECF5                       	smpsPSGAlterVol     $F5
00098366 8F07                       	dc.b	nD1, $07
00098368 EC0B                       	smpsPSGAlterVol     $0B
0009836A 8004                       	dc.b	nRst, $04
0009836C ECF5                       	smpsPSGAlterVol     $F5
0009836E 8F06                       	dc.b	nD1, $06
00098370 EC04                       	smpsPSGAlterVol     $04
00098372 E701                       	dc.b	smpsNoAttack, $01
00098374 EC07                       	smpsPSGAlterVol     $07
00098376 8006                       	dc.b	nRst, $06
00098378 E102                       	smpsAlterNote       $02
0009837A 01                         	dc.b	$01
0009837B E103                       	smpsAlterNote       $03
0009837D 01                         	dc.b	$01
0009837E E1FF                       	smpsAlterNote       $FF
00098380 01                         	dc.b	$01
00098381 E1F9                       	smpsAlterNote       $F9
00098383 01                         	dc.b	$01
00098384 E1FC                       	smpsAlterNote       $FC
00098386 ECF5                       	smpsPSGAlterVol     $F5
00098388 8F06                       	dc.b	nD1, $06
0009838A EC04                       	smpsPSGAlterVol     $04
0009838C E701                       	dc.b	smpsNoAttack, $01
0009838E EC07                       	smpsPSGAlterVol     $07
00098390 8003                       	dc.b	nRst, $03
00098392 ECF5                       	smpsPSGAlterVol     $F5
00098394 8F06                       	dc.b	nD1, $06
00098396 EC04                       	smpsPSGAlterVol     $04
00098398 E701                       	dc.b	smpsNoAttack, $01
0009839A EC07                       	smpsPSGAlterVol     $07
0009839C 8006                       	dc.b	nRst, $06
0009839E E1FF                       	smpsAlterNote       $FF
000983A0 01                         	dc.b	$01
000983A1 E103                       	smpsAlterNote       $03
000983A3 01                         	dc.b	$01
000983A4 E1FF                       	smpsAlterNote       $FF
000983A6 01                         	dc.b	$01
000983A7 E1FC                       	smpsAlterNote       $FC
000983A9 01                         	dc.b	$01
000983AA ECF5                       	smpsPSGAlterVol     $F5
000983AC 8F06                       	dc.b	nD1, $06
000983AE EC04                       	smpsPSGAlterVol     $04
000983B0 E701                       	dc.b	smpsNoAttack, $01
000983B2 EC07                       	smpsPSGAlterVol     $07
000983B4 8003                       	dc.b	nRst, $03
000983B6 ECF5                       	smpsPSGAlterVol     $F5
000983B8 8F07                       	dc.b	nD1, $07
000983BA EC0B                       	smpsPSGAlterVol     $0B
000983BC 8007                       	dc.b	nRst, $07
000983BE E101                       	smpsAlterNote       $01
000983C0 0101                       	dc.b	$01, $01
000983C2 E1FC                       	smpsAlterNote       $FC
000983C4 01                         	dc.b	$01
000983C5 E1F9                       	smpsAlterNote       $F9
000983C7 01                         	dc.b	$01
000983C8 E1FC                       	smpsAlterNote       $FC
000983CA ECF5                       	smpsPSGAlterVol     $F5
000983CC 9006                       	dc.b	nEb1, $06
000983CE EC0B                       	smpsPSGAlterVol     $0B
000983D0 8004                       	dc.b	nRst, $04
000983D2 ECF5                       	smpsPSGAlterVol     $F5
000983D4 9006                       	dc.b	nEb1, $06
000983D6 EC04                       	smpsPSGAlterVol     $04
000983D8 E701                       	dc.b	smpsNoAttack, $01
000983DA EC07                       	smpsPSGAlterVol     $07
000983DC 8006                       	dc.b	nRst, $06
000983DE E100                       	smpsAlterNote       $00
000983E0 01                         	dc.b	$01
000983E1 E102                       	smpsAlterNote       $02
000983E3 01                         	dc.b	$01
000983E4 E100                       	smpsAlterNote       $00
000983E6 01                         	dc.b	$01
000983E7 E1FD                       	smpsAlterNote       $FD
000983E9 01                         	dc.b	$01
000983EA E1FF                       	smpsAlterNote       $FF
000983EC ECF5                       	smpsPSGAlterVol     $F5
000983EE 9B06                       	dc.b	nD2, $06
000983F0 EC04                       	smpsPSGAlterVol     $04
000983F2 E701                       	dc.b	smpsNoAttack, $01
000983F4 EC07                       	smpsPSGAlterVol     $07
000983F6 8003                       	dc.b	nRst, $03
000983F8 ECF5                       	smpsPSGAlterVol     $F5
000983FA 9B07                       	dc.b	nD2, $07
000983FC EC0B                       	smpsPSGAlterVol     $0B
000983FE 8006                       	dc.b	nRst, $06
00098400 E102                       	smpsAlterNote       $02
00098402 01                         	dc.b	$01
00098403 E106                       	smpsAlterNote       $06
00098405 01                         	dc.b	$01
00098406 E105                       	smpsAlterNote       $05
00098408 01                         	dc.b	$01
00098409 E1FF                       	smpsAlterNote       $FF
0009840B 01                         	dc.b	$01
0009840C ECF5                       	smpsPSGAlterVol     $F5
0009840E 9B07                       	dc.b	nD2, $07
00098410 EC0B                       	smpsPSGAlterVol     $0B
00098412 8004                       	dc.b	nRst, $04
00098414 ECF5                       	smpsPSGAlterVol     $F5
00098416 9B06                       	dc.b	nD2, $06
00098418 EC0B                       	smpsPSGAlterVol     $0B
0009841A 8007                       	dc.b	nRst, $07
0009841C E105                       	smpsAlterNote       $05
0009841E 0101                       	dc.b	$01, $01
00098420 E102                       	smpsAlterNote       $02
00098422 01                         	dc.b	$01
00098423 E1FC                       	smpsAlterNote       $FC
00098425 01                         	dc.b	$01
00098426 E1FF                       	smpsAlterNote       $FF
00098428 ECF5                       	smpsPSGAlterVol     $F5
0009842A 9B06                       	dc.b	nD2, $06
0009842C EC04                       	smpsPSGAlterVol     $04
0009842E E701                       	dc.b	smpsNoAttack, $01
00098430 EC07                       	smpsPSGAlterVol     $07
00098432 8003                       	dc.b	nRst, $03
00098434 ECF5                       	smpsPSGAlterVol     $F5
00098436 9B06                       	dc.b	nD2, $06
00098438 EC04                       	smpsPSGAlterVol     $04
0009843A E701                       	dc.b	smpsNoAttack, $01
0009843C EC07                       	smpsPSGAlterVol     $07
0009843E 8006                       	dc.b	nRst, $06
00098440 E102                       	smpsAlterNote       $02
00098442 01                         	dc.b	$01
00098443 E106                       	smpsAlterNote       $06
00098445 01                         	dc.b	$01
00098446 E102                       	smpsAlterNote       $02
00098448 01                         	dc.b	$01
00098449 E1FF                       	smpsAlterNote       $FF
0009844B 01                         	dc.b	$01
0009844C ECF5                       	smpsPSGAlterVol     $F5
0009844E 9B06                       	dc.b	nD2, $06
00098450 EC04                       	smpsPSGAlterVol     $04
00098452 E701                       	dc.b	smpsNoAttack, $01
00098454 EC07                       	smpsPSGAlterVol     $07
00098456 8003                       	dc.b	nRst, $03
00098458 ECF5                       	smpsPSGAlterVol     $F5
0009845A 9B07                       	dc.b	nD2, $07
0009845C EC0B                       	smpsPSGAlterVol     $0B
0009845E 8007                       	dc.b	nRst, $07
00098460 E105                       	smpsAlterNote       $05
00098462 0101                       	dc.b	$01, $01
00098464 E1FF                       	smpsAlterNote       $FF
00098466 01                         	dc.b	$01
00098467 E1FC                       	smpsAlterNote       $FC
00098469 01                         	dc.b	$01
0009846A E1FF                       	smpsAlterNote       $FF
0009846C ECF5                       	smpsPSGAlterVol     $F5
0009846E 9B06                       	dc.b	nD2, $06
00098470 EC0B                       	smpsPSGAlterVol     $0B
00098472 8004                       	dc.b	nRst, $04
00098474 ECF5                       	smpsPSGAlterVol     $F5
00098476 9B06                       	dc.b	nD2, $06
00098478 EC04                       	smpsPSGAlterVol     $04
0009847A E701                       	dc.b	smpsNoAttack, $01
0009847C EC07                       	smpsPSGAlterVol     $07
0009847E 8006                       	dc.b	nRst, $06
00098480 E105                       	smpsAlterNote       $05
00098482 01                         	dc.b	$01
00098483 E106                       	smpsAlterNote       $06
00098485 01                         	dc.b	$01
00098486 E102                       	smpsAlterNote       $02
00098488 01                         	dc.b	$01
00098489 E1FC                       	smpsAlterNote       $FC
0009848B 01                         	dc.b	$01
0009848C E1FF                       	smpsAlterNote       $FF
0009848E ECF5                       	smpsPSGAlterVol     $F5
00098490 9B06                       	dc.b	nD2, $06
00098492 EC04                       	smpsPSGAlterVol     $04
00098494 E701                       	dc.b	smpsNoAttack, $01
00098496 EC07                       	smpsPSGAlterVol     $07
00098498 8003                       	dc.b	nRst, $03
0009849A ECF5                       	smpsPSGAlterVol     $F5
0009849C 9B06                       	dc.b	nD2, $06
0009849E EC04                       	smpsPSGAlterVol     $04
000984A0 E701                       	dc.b	smpsNoAttack, $01
000984A2 EC07                       	smpsPSGAlterVol     $07
000984A4 8006                       	dc.b	nRst, $06
000984A6 E102                       	smpsAlterNote       $02
000984A8 01                         	dc.b	$01
000984A9 E106                       	smpsAlterNote       $06
000984AB 01                         	dc.b	$01
000984AC E105                       	smpsAlterNote       $05
000984AE 01                         	dc.b	$01
000984AF E1FF                       	smpsAlterNote       $FF
000984B1 01                         	dc.b	$01
000984B2 ECF5                       	smpsPSGAlterVol     $F5
000984B4 9B07                       	dc.b	nD2, $07
000984B6 EC0B                       	smpsPSGAlterVol     $0B
000984B8 8004                       	dc.b	nRst, $04
000984BA ECF5                       	smpsPSGAlterVol     $F5
000984BC 9B06                       	dc.b	nD2, $06
000984BE EC0B                       	smpsPSGAlterVol     $0B
000984C0 8007                       	dc.b	nRst, $07
000984C2 E105                       	smpsAlterNote       $05
000984C4 0101                       	dc.b	$01, $01
000984C6 E102                       	smpsAlterNote       $02
000984C8 01                         	dc.b	$01
000984C9 E1FC                       	smpsAlterNote       $FC
000984CB 01                         	dc.b	$01
000984CC E1FF                       	smpsAlterNote       $FF
000984CE ECF5                       	smpsPSGAlterVol     $F5
000984D0 9B06                       	dc.b	nD2, $06
000984D2 EC04                       	smpsPSGAlterVol     $04
000984D4 E701                       	dc.b	smpsNoAttack, $01
000984D6 EC07                       	smpsPSGAlterVol     $07
000984D8 8003                       	dc.b	nRst, $03
000984DA ECF5                       	smpsPSGAlterVol     $F5
000984DC 9B06                       	dc.b	nD2, $06
000984DE EC04                       	smpsPSGAlterVol     $04
000984E0 E701                       	dc.b	smpsNoAttack, $01
000984E2 EC07                       	smpsPSGAlterVol     $07
000984E4 8006                       	dc.b	nRst, $06
000984E6 E102                       	smpsAlterNote       $02
000984E8 01                         	dc.b	$01
000984E9 E106                       	smpsAlterNote       $06
000984EB 01                         	dc.b	$01
000984EC E102                       	smpsAlterNote       $02
000984EE 01                         	dc.b	$01
000984EF E1FF                       	smpsAlterNote       $FF
000984F1 01                         	dc.b	$01
000984F2 ECF5                       	smpsPSGAlterVol     $F5
000984F4 9B06                       	dc.b	nD2, $06
000984F6 EC04                       	smpsPSGAlterVol     $04
000984F8 E701                       	dc.b	smpsNoAttack, $01
000984FA EC07                       	smpsPSGAlterVol     $07
000984FC 8003                       	dc.b	nRst, $03
000984FE ECF5                       	smpsPSGAlterVol     $F5
00098500 9B07                       	dc.b	nD2, $07
00098502 E1FE                       	smpsAlterNote       $FE
00098504 9706                       	dc.b	nBb1, $06
00098506 EC04                       	smpsPSGAlterVol     $04
00098508 E701                       	dc.b	smpsNoAttack, $01
0009850A ECFC                       	smpsPSGAlterVol     $FC
0009850C 9703                       	dc.b	nBb1, $03
0009850E EC04                       	smpsPSGAlterVol     $04
00098510 E701                       	dc.b	smpsNoAttack, $01
00098512 ECFC                       	smpsPSGAlterVol     $FC
00098514 9702                       	dc.b	nBb1, $02
00098516 EC04                       	smpsPSGAlterVol     $04
00098518 E701                       	dc.b	smpsNoAttack, $01
0009851A ECFC                       	smpsPSGAlterVol     $FC
0009851C 9606                       	dc.b	nA1, $06
0009851E EC04                       	smpsPSGAlterVol     $04
00098520 E701                       	dc.b	smpsNoAttack, $01
00098522 EC07                       	smpsPSGAlterVol     $07
00098524 8006                       	dc.b	nRst, $06
00098526 E101                       	smpsAlterNote       $01
00098528 01                         	dc.b	$01
00098529 E107                       	smpsAlterNote       $07
0009852B 01                         	dc.b	$01
0009852C E101                       	smpsAlterNote       $01
0009852E 01                         	dc.b	$01
0009852F E1F8                       	smpsAlterNote       $F8
00098531 01                         	dc.b	$01
00098532 E1F7                       	smpsAlterNote       $F7
00098534 01                         	dc.b	$01
00098535 E1FC                       	smpsAlterNote       $FC
00098537 01                         	dc.b	$01
00098538 E106                       	smpsAlterNote       $06
0009853A 01                         	dc.b	$01
0009853B E107                       	smpsAlterNote       $07
0009853D 01                         	dc.b	$01
0009853E E101                       	smpsAlterNote       $01
00098540 01                         	dc.b	$01
00098541 E1F8                       	smpsAlterNote       $F8
00098543 0101                       	dc.b	$01, $01
00098545 E1FC                       	smpsAlterNote       $FC
00098547 ECF5                       	smpsPSGAlterVol     $F5
00098549 8F06                       	dc.b	nD1, $06
0009854B EC04                       	smpsPSGAlterVol     $04
0009854D E701                       	dc.b	smpsNoAttack, $01
0009854F EC07                       	smpsPSGAlterVol     $07
00098551 8003                       	dc.b	nRst, $03
00098553 ECF5                       	smpsPSGAlterVol     $F5
00098555 8F06                       	dc.b	nD1, $06
00098557 EC04                       	smpsPSGAlterVol     $04
00098559 E701                       	dc.b	smpsNoAttack, $01
0009855B EC07                       	smpsPSGAlterVol     $07
0009855D 8006                       	dc.b	nRst, $06
0009855F E1FF                       	smpsAlterNote       $FF
00098561 01                         	dc.b	$01
00098562 E102                       	smpsAlterNote       $02
00098564 01                         	dc.b	$01
00098565 E101                       	smpsAlterNote       $01
00098567 01                         	dc.b	$01
00098568 E1FC                       	smpsAlterNote       $FC
0009856A 01                         	dc.b	$01
0009856B ECF5                       	smpsPSGAlterVol     $F5
0009856D 9007                       	dc.b	nEb1, $07
0009856F EC0B                       	smpsPSGAlterVol     $0B
00098571 8004                       	dc.b	nRst, $04
00098573 ECF5                       	smpsPSGAlterVol     $F5
00098575 9006                       	dc.b	nEb1, $06
00098577 EC0B                       	smpsPSGAlterVol     $0B
00098579 8007                       	dc.b	nRst, $07
0009857B E103                       	smpsAlterNote       $03
0009857D 0101                       	dc.b	$01, $01
0009857F E1FC                       	smpsAlterNote       $FC
00098581 01                         	dc.b	$01
00098582 E1F9                       	smpsAlterNote       $F9
00098584 01                         	dc.b	$01
00098585 E1FC                       	smpsAlterNote       $FC
00098587 ECF5                       	smpsPSGAlterVol     $F5
00098589 8F06                       	dc.b	nD1, $06
0009858B EC04                       	smpsPSGAlterVol     $04
0009858D E701                       	dc.b	smpsNoAttack, $01
0009858F EC07                       	smpsPSGAlterVol     $07
00098591 8003                       	dc.b	nRst, $03
00098593 ECF5                       	smpsPSGAlterVol     $F5
00098595 8F06                       	dc.b	nD1, $06
00098597 EC04                       	smpsPSGAlterVol     $04
00098599 E701                       	dc.b	smpsNoAttack, $01
0009859B EC07                       	smpsPSGAlterVol     $07
0009859D 8006                       	dc.b	nRst, $06
0009859F E1FF                       	smpsAlterNote       $FF
000985A1 01                         	dc.b	$01
000985A2 E103                       	smpsAlterNote       $03
000985A4 01                         	dc.b	$01
000985A5 E1FF                       	smpsAlterNote       $FF
000985A7 01                         	dc.b	$01
000985A8 E1F9                       	smpsAlterNote       $F9
000985AA 01                         	dc.b	$01
000985AB E1FC                       	smpsAlterNote       $FC
000985AD ECF5                       	smpsPSGAlterVol     $F5
000985AF 8F06                       	dc.b	nD1, $06
000985B1 EC04                       	smpsPSGAlterVol     $04
000985B3 E701                       	dc.b	smpsNoAttack, $01
000985B5 EC07                       	smpsPSGAlterVol     $07
000985B7 8003                       	dc.b	nRst, $03
000985B9 ECF5                       	smpsPSGAlterVol     $F5
000985BB 8F07                       	dc.b	nD1, $07
000985BD EC0B                       	smpsPSGAlterVol     $0B
000985BF 8006                       	dc.b	nRst, $06
000985C1 E1FF                       	smpsAlterNote       $FF
000985C3 01                         	dc.b	$01
000985C4 E102                       	smpsAlterNote       $02
000985C6 0101                       	dc.b	$01, $01
000985C8 E1FC                       	smpsAlterNote       $FC
000985CA 01                         	dc.b	$01
000985CB ECF5                       	smpsPSGAlterVol     $F5
000985CD 8F07                       	dc.b	nD1, $07
000985CF EC0B                       	smpsPSGAlterVol     $0B
000985D1 8004                       	dc.b	nRst, $04
000985D3 ECF5                       	smpsPSGAlterVol     $F5
000985D5 8F06                       	dc.b	nD1, $06
000985D7 EC04                       	smpsPSGAlterVol     $04
000985D9 E701                       	dc.b	smpsNoAttack, $01
000985DB EC07                       	smpsPSGAlterVol     $07
000985DD 8006                       	dc.b	nRst, $06
000985DF E101                       	smpsAlterNote       $01
000985E1 01                         	dc.b	$01
000985E2 E102                       	smpsAlterNote       $02
000985E4 01                         	dc.b	$01
000985E5 E1FF                       	smpsAlterNote       $FF
000985E7 01                         	dc.b	$01
000985E8 E1F9                       	smpsAlterNote       $F9
000985EA 01                         	dc.b	$01
000985EB E1FC                       	smpsAlterNote       $FC
000985ED ECF5                       	smpsPSGAlterVol     $F5
000985EF 9006                       	dc.b	nEb1, $06
000985F1 EC04                       	smpsPSGAlterVol     $04
000985F3 E701                       	dc.b	smpsNoAttack, $01
000985F5 EC07                       	smpsPSGAlterVol     $07
000985F7 8003                       	dc.b	nRst, $03
000985F9 ECF5                       	smpsPSGAlterVol     $F5
000985FB 9006                       	dc.b	nEb1, $06
000985FD EC04                       	smpsPSGAlterVol     $04
000985FF E701                       	dc.b	smpsNoAttack, $01
00098601 EC07                       	smpsPSGAlterVol     $07
00098603 8006                       	dc.b	nRst, $06
00098605 E100                       	smpsAlterNote       $00
00098607 01                         	dc.b	$01
00098608 E102                       	smpsAlterNote       $02
0009860A 01                         	dc.b	$01
0009860B E100                       	smpsAlterNote       $00
0009860D 01                         	dc.b	$01
0009860E E1FF                       	smpsAlterNote       $FF
00098610 01                         	dc.b	$01
00098611 ECF5                       	smpsPSGAlterVol     $F5
00098613 9B06                       	dc.b	nD2, $06
00098615 EC04                       	smpsPSGAlterVol     $04
00098617 E701                       	dc.b	smpsNoAttack, $01
00098619 EC07                       	smpsPSGAlterVol     $07
0009861B 8003                       	dc.b	nRst, $03
0009861D ECF5                       	smpsPSGAlterVol     $F5
0009861F 9B07                       	dc.b	nD2, $07
00098621 EC0B                       	smpsPSGAlterVol     $0B
00098623 8007                       	dc.b	nRst, $07
00098625 E105                       	smpsAlterNote       $05
00098627 0101                       	dc.b	$01, $01
00098629 E1FF                       	smpsAlterNote       $FF
0009862B 01                         	dc.b	$01
0009862C E1FC                       	smpsAlterNote       $FC
0009862E 01                         	dc.b	$01
0009862F E1FF                       	smpsAlterNote       $FF
00098631 ECF5                       	smpsPSGAlterVol     $F5
00098633 9B06                       	dc.b	nD2, $06
00098635 EC0B                       	smpsPSGAlterVol     $0B
00098637 8004                       	dc.b	nRst, $04
00098639 ECF5                       	smpsPSGAlterVol     $F5
0009863B 9B06                       	dc.b	nD2, $06
0009863D EC04                       	smpsPSGAlterVol     $04
0009863F E701                       	dc.b	smpsNoAttack, $01
00098641 EC07                       	smpsPSGAlterVol     $07
00098643 8006                       	dc.b	nRst, $06
00098645 E102                       	smpsAlterNote       $02
00098647 01                         	dc.b	$01
00098648 E106                       	smpsAlterNote       $06
0009864A 01                         	dc.b	$01
0009864B E102                       	smpsAlterNote       $02
0009864D 01                         	dc.b	$01
0009864E E1FC                       	smpsAlterNote       $FC
00098650 01                         	dc.b	$01
00098651 E1FF                       	smpsAlterNote       $FF
00098653 ECF5                       	smpsPSGAlterVol     $F5
00098655 9B06                       	dc.b	nD2, $06
00098657 EC04                       	smpsPSGAlterVol     $04
00098659 E701                       	dc.b	smpsNoAttack, $01
0009865B EC07                       	smpsPSGAlterVol     $07
0009865D 8003                       	dc.b	nRst, $03
0009865F ECF5                       	smpsPSGAlterVol     $F5
00098661 9B07                       	dc.b	nD2, $07
00098663 EC0B                       	smpsPSGAlterVol     $0B
00098665 8006                       	dc.b	nRst, $06
00098667 E102                       	smpsAlterNote       $02
00098669 01                         	dc.b	$01
0009866A E105                       	smpsAlterNote       $05
0009866C 0101                       	dc.b	$01, $01
0009866E E1FF                       	smpsAlterNote       $FF
00098670 01                         	dc.b	$01
00098671 ECF5                       	smpsPSGAlterVol     $F5
00098673 9B07                       	dc.b	nD2, $07
00098675 EC0B                       	smpsPSGAlterVol     $0B
00098677 8004                       	dc.b	nRst, $04
00098679 ECF5                       	smpsPSGAlterVol     $F5
0009867B 9B06                       	dc.b	nD2, $06
0009867D EC0B                       	smpsPSGAlterVol     $0B
0009867F 8007                       	dc.b	nRst, $07
00098681 E105                       	smpsAlterNote       $05
00098683 0101                       	dc.b	$01, $01
00098685 E102                       	smpsAlterNote       $02
00098687 01                         	dc.b	$01
00098688 E1FC                       	smpsAlterNote       $FC
0009868A 01                         	dc.b	$01
0009868B E1FF                       	smpsAlterNote       $FF
0009868D ECF5                       	smpsPSGAlterVol     $F5
0009868F 9B06                       	dc.b	nD2, $06
00098691 EC04                       	smpsPSGAlterVol     $04
00098693 E701                       	dc.b	smpsNoAttack, $01
00098695 EC07                       	smpsPSGAlterVol     $07
00098697 8003                       	dc.b	nRst, $03
00098699 ECF5                       	smpsPSGAlterVol     $F5
0009869B 9B06                       	dc.b	nD2, $06
0009869D EC04                       	smpsPSGAlterVol     $04
0009869F E701                       	dc.b	smpsNoAttack, $01
000986A1 EC07                       	smpsPSGAlterVol     $07
000986A3 8006                       	dc.b	nRst, $06
000986A5 E102                       	smpsAlterNote       $02
000986A7 01                         	dc.b	$01
000986A8 E106                       	smpsAlterNote       $06
000986AA 01                         	dc.b	$01
000986AB E102                       	smpsAlterNote       $02
000986AD 01                         	dc.b	$01
000986AE E1FF                       	smpsAlterNote       $FF
000986B0 01                         	dc.b	$01
000986B1 ECF5                       	smpsPSGAlterVol     $F5
000986B3 9B06                       	dc.b	nD2, $06
000986B5 EC04                       	smpsPSGAlterVol     $04
000986B7 E701                       	dc.b	smpsNoAttack, $01
000986B9 EC07                       	smpsPSGAlterVol     $07
000986BB 8003                       	dc.b	nRst, $03
000986BD ECF5                       	smpsPSGAlterVol     $F5
000986BF 9B07                       	dc.b	nD2, $07
000986C1 EC0B                       	smpsPSGAlterVol     $0B
000986C3 8007                       	dc.b	nRst, $07
000986C5 E105                       	smpsAlterNote       $05
000986C7 0101                       	dc.b	$01, $01
000986C9 E1FF                       	smpsAlterNote       $FF
000986CB 01                         	dc.b	$01
000986CC E1FC                       	smpsAlterNote       $FC
000986CE 01                         	dc.b	$01
000986CF E1FF                       	smpsAlterNote       $FF
000986D1 ECF5                       	smpsPSGAlterVol     $F5
000986D3 9B06                       	dc.b	nD2, $06
000986D5 EC0B                       	smpsPSGAlterVol     $0B
000986D7 8004                       	dc.b	nRst, $04
000986D9 ECF5                       	smpsPSGAlterVol     $F5
000986DB 9B06                       	dc.b	nD2, $06
000986DD EC04                       	smpsPSGAlterVol     $04
000986DF E701                       	dc.b	smpsNoAttack, $01
000986E1 EC07                       	smpsPSGAlterVol     $07
000986E3 8006                       	dc.b	nRst, $06
000986E5 E102                       	smpsAlterNote       $02
000986E7 01                         	dc.b	$01
000986E8 E106                       	smpsAlterNote       $06
000986EA 01                         	dc.b	$01
000986EB E102                       	smpsAlterNote       $02
000986ED 01                         	dc.b	$01
000986EE E1FC                       	smpsAlterNote       $FC
000986F0 01                         	dc.b	$01
000986F1 E1FF                       	smpsAlterNote       $FF
000986F3 ECF5                       	smpsPSGAlterVol     $F5
000986F5 9B06                       	dc.b	nD2, $06
000986F7 EC04                       	smpsPSGAlterVol     $04
000986F9 E701                       	dc.b	smpsNoAttack, $01
000986FB EC07                       	smpsPSGAlterVol     $07
000986FD 8003                       	dc.b	nRst, $03
000986FF ECF5                       	smpsPSGAlterVol     $F5
00098701 9B06                       	dc.b	nD2, $06
00098703 EC04                       	smpsPSGAlterVol     $04
00098705 E701                       	dc.b	smpsNoAttack, $01
00098707 EC07                       	smpsPSGAlterVol     $07
00098709 8006                       	dc.b	nRst, $06
0009870B E102                       	smpsAlterNote       $02
0009870D 01                         	dc.b	$01
0009870E E106                       	smpsAlterNote       $06
00098710 01                         	dc.b	$01
00098711 E105                       	smpsAlterNote       $05
00098713 01                         	dc.b	$01
00098714 E1FF                       	smpsAlterNote       $FF
00098716 01                         	dc.b	$01
00098717 ECF5                       	smpsPSGAlterVol     $F5
00098719 9B07                       	dc.b	nD2, $07
0009871B EC0B                       	smpsPSGAlterVol     $0B
0009871D 8004                       	dc.b	nRst, $04
0009871F ECF5                       	smpsPSGAlterVol     $F5
00098721 9B06                       	dc.b	nD2, $06
00098723 EC0B                       	smpsPSGAlterVol     $0B
00098725 8007                       	dc.b	nRst, $07
00098727 E105                       	smpsAlterNote       $05
00098729 0101                       	dc.b	$01, $01
0009872B E101                       	smpsAlterNote       $01
0009872D 01                         	dc.b	$01
0009872E E1FB                       	smpsAlterNote       $FB
00098730 01                         	dc.b	$01
00098731 E1FE                       	smpsAlterNote       $FE
00098733 ECF5                       	smpsPSGAlterVol     $F5
00098735 9A06                       	dc.b	nCs2, $06
00098737 EC04                       	smpsPSGAlterVol     $04
00098739 E701                       	dc.b	smpsNoAttack, $01
0009873B EC07                       	smpsPSGAlterVol     $07
0009873D 8003                       	dc.b	nRst, $03
0009873F ECF5                       	smpsPSGAlterVol     $F5
00098741 9A06                       	dc.b	nCs2, $06
00098743 EC04                       	smpsPSGAlterVol     $04
00098745 E701                       	dc.b	smpsNoAttack, $01
00098747 EC07                       	smpsPSGAlterVol     $07
00098749 8003                       	dc.b	nRst, $03
0009874B E1FC                       	smpsAlterNote       $FC
0009874D ECF5                       	smpsPSGAlterVol     $F5
0009874F 8F07                       	dc.b	nD1, $07
00098751 EC0B                       	smpsPSGAlterVol     $0B
00098753 8006                       	dc.b	nRst, $06
00098755 E1FF                       	smpsAlterNote       $FF
00098757 01                         	dc.b	$01
00098758 E103                       	smpsAlterNote       $03
0009875A 01                         	dc.b	$01
0009875B E102                       	smpsAlterNote       $02
0009875D 01                         	dc.b	$01
0009875E E1FC                       	smpsAlterNote       $FC
00098760 01                         	dc.b	$01
00098761 E1F8                       	smpsAlterNote       $F8
00098763 01                         	dc.b	$01
00098764 E1FC                       	smpsAlterNote       $FC
00098766 01                         	dc.b	$01
00098767 E1FF                       	smpsAlterNote       $FF
00098769 01                         	dc.b	$01
0009876A E103                       	smpsAlterNote       $03
0009876C 01                         	dc.b	$01
0009876D E1FC                       	smpsAlterNote       $FC
0009876F ECF5                       	smpsPSGAlterVol     $F5
00098771 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098775 EC04                       	smpsPSGAlterVol     $04
00098777 E701                       	dc.b	smpsNoAttack, $01
00098779 EC07                       	smpsPSGAlterVol     $07
0009877B 8009                       	dc.b	nRst, $09
0009877D E1FF                       	smpsAlterNote       $FF
0009877F 01                         	dc.b	$01
00098780 E103                       	smpsAlterNote       $03
00098782 01                         	dc.b	$01
00098783 E102                       	smpsAlterNote       $02
00098785 01                         	dc.b	$01
00098786 E1FC                       	smpsAlterNote       $FC
00098788 01                         	dc.b	$01
00098789 E1F8                       	smpsAlterNote       $F8
0009878B 01                         	dc.b	$01
0009878C E1FC                       	smpsAlterNote       $FC
0009878E 01                         	dc.b	$01
0009878F E1FF                       	smpsAlterNote       $FF
00098791 01                         	dc.b	$01
00098792 E103                       	smpsAlterNote       $03
00098794 01                         	dc.b	$01
00098795 E1FF                       	smpsAlterNote       $FF
00098797 01                         	dc.b	$01
00098798 E1F9                       	smpsAlterNote       $F9
0009879A 01                         	dc.b	$01
0009879B E1F8                       	smpsAlterNote       $F8
0009879D 01                         	dc.b	$01
0009879E E1FC                       	smpsAlterNote       $FC
000987A0 01                         	dc.b	$01
000987A1 E102                       	smpsAlterNote       $02
000987A3 0101                       	dc.b	$01, $01
000987A5 E1FF                       	smpsAlterNote       $FF
000987A7 01                         	dc.b	$01
000987A8 E1FC                       	smpsAlterNote       $FC
000987AA ECF5                       	smpsPSGAlterVol     $F5
000987AC 8F02                       	dc.b	nD1, $02
000987AE EC04                       	smpsPSGAlterVol     $04
000987B0 E701                       	dc.b	smpsNoAttack, $01
000987B2 ECFC                       	smpsPSGAlterVol     $FC
000987B4 E1FB                       	smpsAlterNote       $FB
000987B6 8D06                       	dc.b	nC1, $06
000987B8 EC04                       	smpsPSGAlterVol     $04
000987BA E701                       	dc.b	smpsNoAttack, $01
000987BC EC07                       	smpsPSGAlterVol     $07
000987BE 8006                       	dc.b	nRst, $06
000987C0 E1FE                       	smpsAlterNote       $FE
000987C2 01                         	dc.b	$01
000987C3 E102                       	smpsAlterNote       $02
000987C5 01                         	dc.b	$01
000987C6 E1FE                       	smpsAlterNote       $FE
000987C8 01                         	dc.b	$01
000987C9 E1FB                       	smpsAlterNote       $FB
000987CB 01                         	dc.b	$01
000987CC E1F7                       	smpsAlterNote       $F7
000987CE 01                         	dc.b	$01
000987CF E1FB                       	smpsAlterNote       $FB
000987D1 01                         	dc.b	$01
000987D2 E101                       	smpsAlterNote       $01
000987D4 01                         	dc.b	$01
000987D5 E102                       	smpsAlterNote       $02
000987D7 01                         	dc.b	$01
000987D8 E1FB                       	smpsAlterNote       $FB
000987DA ECF5                       	smpsPSGAlterVol     $F5
000987DC 8D02                       	dc.b	nC1, $02
000987DE EC04                       	smpsPSGAlterVol     $04
000987E0 E701                       	dc.b	smpsNoAttack, $01
000987E2 E1FC                       	smpsAlterNote       $FC
000987E4 ECFC                       	smpsPSGAlterVol     $FC
000987E6 8F0D                       	dc.b	nD1, $0D
000987E8 E1FF                       	smpsAlterNote       $FF
000987EA E701                       	dc.b	smpsNoAttack, $01
000987EC E103                       	smpsAlterNote       $03
000987EE E701                       	dc.b	smpsNoAttack, $01
000987F0 E1FF                       	smpsAlterNote       $FF
000987F2 E701                       	dc.b	smpsNoAttack, $01
000987F4 E1FC                       	smpsAlterNote       $FC
000987F6 E701                       	dc.b	smpsNoAttack, $01
000987F8 E1F8                       	smpsAlterNote       $F8
000987FA E701                       	dc.b	smpsNoAttack, $01
000987FC E1FC                       	smpsAlterNote       $FC
000987FE E701                       	dc.b	smpsNoAttack, $01
00098800 E102                       	smpsAlterNote       $02
00098802 E701                       	dc.b	smpsNoAttack, $01
00098804 E103                       	smpsAlterNote       $03
00098806 E701                       	dc.b	smpsNoAttack, $01
00098808 E1FF                       	smpsAlterNote       $FF
0009880A E701                       	dc.b	smpsNoAttack, $01
0009880C E1F9                       	smpsAlterNote       $F9
0009880E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098812 E1FC                       	smpsAlterNote       $FC
00098814 E701                       	dc.b	smpsNoAttack, $01
00098816 E102                       	smpsAlterNote       $02
00098818 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009881C E1FC                       	smpsAlterNote       $FC
0009881E E701                       	dc.b	smpsNoAttack, $01
00098820 E1F9                       	smpsAlterNote       $F9
00098822 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098826 E1FF                       	smpsAlterNote       $FF
00098828 EC04                       	smpsPSGAlterVol     $04
0009882A E701                       	dc.b	smpsNoAttack, $01
0009882C EC07                       	smpsPSGAlterVol     $07
0009882E E103                       	smpsAlterNote       $03
00098830 8001                       	dc.b	nRst, $01
00098832 E102                       	smpsAlterNote       $02
00098834 01                         	dc.b	$01
00098835 E1FB                       	smpsAlterNote       $FB
00098837 01                         	dc.b	$01
00098838 E1F7                       	smpsAlterNote       $F7
0009883A 01                         	dc.b	$01
0009883B E1FB                       	smpsAlterNote       $FB
0009883D 01                         	dc.b	$01
0009883E E102                       	smpsAlterNote       $02
00098840 01                         	dc.b	$01
00098841 E103                       	smpsAlterNote       $03
00098843 01                         	dc.b	$01
00098844 E1FB                       	smpsAlterNote       $FB
00098846 ECF5                       	smpsPSGAlterVol     $F5
00098848 8E06                       	dc.b	nCs1, $06
0009884A EC04                       	smpsPSGAlterVol     $04
0009884C E701                       	dc.b	smpsNoAttack, $01
0009884E EC07                       	smpsPSGAlterVol     $07
00098850 8003                       	dc.b	nRst, $03
00098852 ECF5                       	smpsPSGAlterVol     $F5
00098854 8E06                       	dc.b	nCs1, $06
00098856 EC04                       	smpsPSGAlterVol     $04
00098858 E701                       	dc.b	smpsNoAttack, $01
0009885A EC07                       	smpsPSGAlterVol     $07
0009885C 8006                       	dc.b	nRst, $06
0009885E E1FE                       	smpsAlterNote       $FE
00098860 01                         	dc.b	$01
00098861 E102                       	smpsAlterNote       $02
00098863 01                         	dc.b	$01
00098864 E1FE                       	smpsAlterNote       $FE
00098866 01                         	dc.b	$01
00098867 E1F9                       	smpsAlterNote       $F9
00098869 01                         	dc.b	$01
0009886A E1FC                       	smpsAlterNote       $FC
0009886C ECF5                       	smpsPSGAlterVol     $F5
0009886E 8F06                       	dc.b	nD1, $06
00098870 EC04                       	smpsPSGAlterVol     $04
00098872 E701                       	dc.b	smpsNoAttack, $01
00098874 EC07                       	smpsPSGAlterVol     $07
00098876 8003                       	dc.b	nRst, $03
00098878 ECF5                       	smpsPSGAlterVol     $F5
0009887A 8F07                       	dc.b	nD1, $07
0009887C EC0B                       	smpsPSGAlterVol     $0B
0009887E 8006                       	dc.b	nRst, $06
00098880 E1FF                       	smpsAlterNote       $FF
00098882 01                         	dc.b	$01
00098883 E102                       	smpsAlterNote       $02
00098885 0101                       	dc.b	$01, $01
00098887 E1FB                       	smpsAlterNote       $FB
00098889 01                         	dc.b	$01
0009888A ECF5                       	smpsPSGAlterVol     $F5
0009888C 8E07                       	dc.b	nCs1, $07
0009888E EC0B                       	smpsPSGAlterVol     $0B
00098890 8004                       	dc.b	nRst, $04
00098892 ECF5                       	smpsPSGAlterVol     $F5
00098894 8E06                       	dc.b	nCs1, $06
00098896 EC04                       	smpsPSGAlterVol     $04
00098898 E701                       	dc.b	smpsNoAttack, $01
0009889A EC07                       	smpsPSGAlterVol     $07
0009889C 8006                       	dc.b	nRst, $06
0009889E E101                       	smpsAlterNote       $01
000988A0 01                         	dc.b	$01
000988A1 E102                       	smpsAlterNote       $02
000988A3 01                         	dc.b	$01
000988A4 E1FE                       	smpsAlterNote       $FE
000988A6 01                         	dc.b	$01
000988A7 E1F8                       	smpsAlterNote       $F8
000988A9 01                         	dc.b	$01
000988AA E1FB                       	smpsAlterNote       $FB
000988AC ECF5                       	smpsPSGAlterVol     $F5
000988AE 8E06                       	dc.b	nCs1, $06
000988B0 EC04                       	smpsPSGAlterVol     $04
000988B2 E701                       	dc.b	smpsNoAttack, $01
000988B4 EC07                       	smpsPSGAlterVol     $07
000988B6 8003                       	dc.b	nRst, $03
000988B8 ECF5                       	smpsPSGAlterVol     $F5
000988BA 8E06                       	dc.b	nCs1, $06
000988BC EC04                       	smpsPSGAlterVol     $04
000988BE E701                       	dc.b	smpsNoAttack, $01
000988C0 EC07                       	smpsPSGAlterVol     $07
000988C2 8004                       	dc.b	nRst, $04
000988C4 E1FC                       	smpsAlterNote       $FC
000988C6 ECF5                       	smpsPSGAlterVol     $F5
000988C8 8F06                       	dc.b	nD1, $06
000988CA EC0B                       	smpsPSGAlterVol     $0B
000988CC 8006                       	dc.b	nRst, $06
000988CE E1FF                       	smpsAlterNote       $FF
000988D0 01                         	dc.b	$01
000988D1 E102                       	smpsAlterNote       $02
000988D3 0101                       	dc.b	$01, $01
000988D5 E1FC                       	smpsAlterNote       $FC
000988D7 01                         	dc.b	$01
000988D8 E1F8                       	smpsAlterNote       $F8
000988DA 01                         	dc.b	$01
000988DB E1F9                       	smpsAlterNote       $F9
000988DD 01                         	dc.b	$01
000988DE E1FF                       	smpsAlterNote       $FF
000988E0 01                         	dc.b	$01
000988E1 E103                       	smpsAlterNote       $03
000988E3 01                         	dc.b	$01
000988E4 E1FC                       	smpsAlterNote       $FC
000988E6 ECF5                       	smpsPSGAlterVol     $F5
000988E8 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000988EC EC04                       	smpsPSGAlterVol     $04
000988EE E701                       	dc.b	smpsNoAttack, $01
000988F0 EC07                       	smpsPSGAlterVol     $07
000988F2 8009                       	dc.b	nRst, $09
000988F4 E1FF                       	smpsAlterNote       $FF
000988F6 01                         	dc.b	$01
000988F7 E102                       	smpsAlterNote       $02
000988F9 0101                       	dc.b	$01, $01
000988FB E1FC                       	smpsAlterNote       $FC
000988FD 01                         	dc.b	$01
000988FE E1F8                       	smpsAlterNote       $F8
00098900 01                         	dc.b	$01
00098901 E1F9                       	smpsAlterNote       $F9
00098903 01                         	dc.b	$01
00098904 E1FF                       	smpsAlterNote       $FF
00098906 01                         	dc.b	$01
00098907 E103                       	smpsAlterNote       $03
00098909 01                         	dc.b	$01
0009890A E1FF                       	smpsAlterNote       $FF
0009890C 01                         	dc.b	$01
0009890D E1FC                       	smpsAlterNote       $FC
0009890F 01                         	dc.b	$01
00098910 E1F8                       	smpsAlterNote       $F8
00098912 01                         	dc.b	$01
00098913 E1FC                       	smpsAlterNote       $FC
00098915 01                         	dc.b	$01
00098916 E102                       	smpsAlterNote       $02
00098918 01                         	dc.b	$01
00098919 E103                       	smpsAlterNote       $03
0009891B 01                         	dc.b	$01
0009891C E1FF                       	smpsAlterNote       $FF
0009891E 01                         	dc.b	$01
0009891F E1FC                       	smpsAlterNote       $FC
00098921 ECF5                       	smpsPSGAlterVol     $F5
00098923 8F03                       	dc.b	nD1, $03
00098925 E1FB                       	smpsAlterNote       $FB
00098927 8D06                       	dc.b	nC1, $06
00098929 EC04                       	smpsPSGAlterVol     $04
0009892B E701                       	dc.b	smpsNoAttack, $01
0009892D EC07                       	smpsPSGAlterVol     $07
0009892F 8006                       	dc.b	nRst, $06
00098931 E1FE                       	smpsAlterNote       $FE
00098933 01                         	dc.b	$01
00098934 E102                       	smpsAlterNote       $02
00098936 01                         	dc.b	$01
00098937 E101                       	smpsAlterNote       $01
00098939 01                         	dc.b	$01
0009893A E1FB                       	smpsAlterNote       $FB
0009893C 01                         	dc.b	$01
0009893D E1F7                       	smpsAlterNote       $F7
0009893F 01                         	dc.b	$01
00098940 E1FB                       	smpsAlterNote       $FB
00098942 01                         	dc.b	$01
00098943 E1FE                       	smpsAlterNote       $FE
00098945 01                         	dc.b	$01
00098946 E102                       	smpsAlterNote       $02
00098948 01                         	dc.b	$01
00098949 E1FB                       	smpsAlterNote       $FB
0009894B ECF5                       	smpsPSGAlterVol     $F5
0009894D 8D03                       	dc.b	nC1, $03
0009894F E1FC                       	smpsAlterNote       $FC
00098951 8F0D                       	dc.b	nD1, $0D
00098953 E1FF                       	smpsAlterNote       $FF
00098955 E701                       	dc.b	smpsNoAttack, $01
00098957 E103                       	smpsAlterNote       $03
00098959 E701                       	dc.b	smpsNoAttack, $01
0009895B E1FF                       	smpsAlterNote       $FF
0009895D E701                       	dc.b	smpsNoAttack, $01
0009895F E1FC                       	smpsAlterNote       $FC
00098961 E701                       	dc.b	smpsNoAttack, $01
00098963 E1F8                       	smpsAlterNote       $F8
00098965 E701                       	dc.b	smpsNoAttack, $01
00098967 E1FC                       	smpsAlterNote       $FC
00098969 E701                       	dc.b	smpsNoAttack, $01
0009896B E102                       	smpsAlterNote       $02
0009896D E701                       	dc.b	smpsNoAttack, $01
0009896F E103                       	smpsAlterNote       $03
00098971 E701                       	dc.b	smpsNoAttack, $01
00098973 E1FF                       	smpsAlterNote       $FF
00098975 E701                       	dc.b	smpsNoAttack, $01
00098977 E1F9                       	smpsAlterNote       $F9
00098979 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009897D E1FC                       	smpsAlterNote       $FC
0009897F E701                       	dc.b	smpsNoAttack, $01
00098981 E102                       	smpsAlterNote       $02
00098983 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098987 E1FF                       	smpsAlterNote       $FF
00098989 E701                       	dc.b	smpsNoAttack, $01
0009898B E1F9                       	smpsAlterNote       $F9
0009898D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098991 E1FF                       	smpsAlterNote       $FF
00098993 EC04                       	smpsPSGAlterVol     $04
00098995 E701                       	dc.b	smpsNoAttack, $01
00098997 EC07                       	smpsPSGAlterVol     $07
00098999 E103                       	smpsAlterNote       $03
0009899B 8001                       	dc.b	nRst, $01
0009899D E102                       	smpsAlterNote       $02
0009899F 01                         	dc.b	$01
000989A0 E1FB                       	smpsAlterNote       $FB
000989A2 01                         	dc.b	$01
000989A3 E1F7                       	smpsAlterNote       $F7
000989A5 01                         	dc.b	$01
000989A6 E1FB                       	smpsAlterNote       $FB
000989A8 01                         	dc.b	$01
000989A9 E1FF                       	smpsAlterNote       $FF
000989AB 01                         	dc.b	$01
000989AC E103                       	smpsAlterNote       $03
000989AE 01                         	dc.b	$01
000989AF E1FB                       	smpsAlterNote       $FB
000989B1 ECF5                       	smpsPSGAlterVol     $F5
000989B3 8E06                       	dc.b	nCs1, $06
000989B5 EC04                       	smpsPSGAlterVol     $04
000989B7 E701                       	dc.b	smpsNoAttack, $01
000989B9 EC07                       	smpsPSGAlterVol     $07
000989BB 8003                       	dc.b	nRst, $03
000989BD ECF5                       	smpsPSGAlterVol     $F5
000989BF 8E06                       	dc.b	nCs1, $06
000989C1 EC04                       	smpsPSGAlterVol     $04
000989C3 E701                       	dc.b	smpsNoAttack, $01
000989C5 EC07                       	smpsPSGAlterVol     $07
000989C7 8006                       	dc.b	nRst, $06
000989C9 E1FE                       	smpsAlterNote       $FE
000989CB 01                         	dc.b	$01
000989CC E102                       	smpsAlterNote       $02
000989CE 01                         	dc.b	$01
000989CF E1FE                       	smpsAlterNote       $FE
000989D1 01                         	dc.b	$01
000989D2 E1FC                       	smpsAlterNote       $FC
000989D4 01                         	dc.b	$01
000989D5 ECF5                       	smpsPSGAlterVol     $F5
000989D7 8F06                       	dc.b	nD1, $06
000989D9 EC04                       	smpsPSGAlterVol     $04
000989DB E701                       	dc.b	smpsNoAttack, $01
000989DD EC07                       	smpsPSGAlterVol     $07
000989DF 8003                       	dc.b	nRst, $03
000989E1 ECF5                       	smpsPSGAlterVol     $F5
000989E3 8F07                       	dc.b	nD1, $07
000989E5 EC0B                       	smpsPSGAlterVol     $0B
000989E7 8007                       	dc.b	nRst, $07
000989E9 E102                       	smpsAlterNote       $02
000989EB 0101                       	dc.b	$01, $01
000989ED E1FB                       	smpsAlterNote       $FB
000989EF 01                         	dc.b	$01
000989F0 E1F8                       	smpsAlterNote       $F8
000989F2 01                         	dc.b	$01
000989F3 E1FB                       	smpsAlterNote       $FB
000989F5 ECF5                       	smpsPSGAlterVol     $F5
000989F7 8E06                       	dc.b	nCs1, $06
000989F9 EC0B                       	smpsPSGAlterVol     $0B
000989FB 8004                       	dc.b	nRst, $04
000989FD ECF5                       	smpsPSGAlterVol     $F5
000989FF 8E06                       	dc.b	nCs1, $06
00098A01 EC04                       	smpsPSGAlterVol     $04
00098A03 E701                       	dc.b	smpsNoAttack, $01
00098A05 EC07                       	smpsPSGAlterVol     $07
00098A07 8006                       	dc.b	nRst, $06
00098A09 E1FE                       	smpsAlterNote       $FE
00098A0B 01                         	dc.b	$01
00098A0C E102                       	smpsAlterNote       $02
00098A0E 01                         	dc.b	$01
00098A0F E1FE                       	smpsAlterNote       $FE
00098A11 01                         	dc.b	$01
00098A12 E1F9                       	smpsAlterNote       $F9
00098A14 01                         	dc.b	$01
00098A15 E1FC                       	smpsAlterNote       $FC
00098A17 ECF5                       	smpsPSGAlterVol     $F5
00098A19 8F06                       	dc.b	nD1, $06
00098A1B EC04                       	smpsPSGAlterVol     $04
00098A1D E701                       	dc.b	smpsNoAttack, $01
00098A1F EC07                       	smpsPSGAlterVol     $07
00098A21 8003                       	dc.b	nRst, $03
00098A23 ECF5                       	smpsPSGAlterVol     $F5
00098A25 8F06                       	dc.b	nD1, $06
00098A27 EC04                       	smpsPSGAlterVol     $04
00098A29 E701                       	dc.b	smpsNoAttack, $01
00098A2B EC07                       	smpsPSGAlterVol     $07
00098A2D 8006                       	dc.b	nRst, $06
00098A2F E1FF                       	smpsAlterNote       $FF
00098A31 01                         	dc.b	$01
00098A32 E103                       	smpsAlterNote       $03
00098A34 01                         	dc.b	$01
00098A35 E102                       	smpsAlterNote       $02
00098A37 01                         	dc.b	$01
00098A38 E1FB                       	smpsAlterNote       $FB
00098A3A 01                         	dc.b	$01
00098A3B ECF5                       	smpsPSGAlterVol     $F5
00098A3D 8E07                       	dc.b	nCs1, $07
00098A3F EC0B                       	smpsPSGAlterVol     $0B
00098A41 8004                       	dc.b	nRst, $04
00098A43 ECF5                       	smpsPSGAlterVol     $F5
00098A45 8E06                       	dc.b	nCs1, $06
00098A47 EC0B                       	smpsPSGAlterVol     $0B
00098A49 8007                       	dc.b	nRst, $07
00098A4B E101                       	smpsAlterNote       $01
00098A4D 0101                       	dc.b	$01, $01
00098A4F E1FE                       	smpsAlterNote       $FE
00098A51 01                         	dc.b	$01
00098A52 E1F9                       	smpsAlterNote       $F9
00098A54 01                         	dc.b	$01
00098A55 E1FC                       	smpsAlterNote       $FC
00098A57 ECF5                       	smpsPSGAlterVol     $F5
00098A59 8F06                       	dc.b	nD1, $06
00098A5B EC04                       	smpsPSGAlterVol     $04
00098A5D E701                       	dc.b	smpsNoAttack, $01
00098A5F EC07                       	smpsPSGAlterVol     $07
00098A61 8003                       	dc.b	nRst, $03
00098A63 ECF5                       	smpsPSGAlterVol     $F5
00098A65 8F06                       	dc.b	nD1, $06
00098A67 EC04                       	smpsPSGAlterVol     $04
00098A69 E701                       	dc.b	smpsNoAttack, $01
00098A6B EC07                       	smpsPSGAlterVol     $07
00098A6D 8006                       	dc.b	nRst, $06
00098A6F E1FF                       	smpsAlterNote       $FF
00098A71 01                         	dc.b	$01
00098A72 E103                       	smpsAlterNote       $03
00098A74 01                         	dc.b	$01
00098A75 E1FF                       	smpsAlterNote       $FF
00098A77 01                         	dc.b	$01
00098A78 E1FB                       	smpsAlterNote       $FB
00098A7A 01                         	dc.b	$01
00098A7B ECF5                       	smpsPSGAlterVol     $F5
00098A7D 8E06                       	dc.b	nCs1, $06
00098A7F EC04                       	smpsPSGAlterVol     $04
00098A81 E701                       	dc.b	smpsNoAttack, $01
00098A83 EC07                       	smpsPSGAlterVol     $07
00098A85 8003                       	dc.b	nRst, $03
00098A87 ECF5                       	smpsPSGAlterVol     $F5
00098A89 8E07                       	dc.b	nCs1, $07
00098A8B E1FF                       	smpsAlterNote       $FF
00098A8D 9B06                       	dc.b	nD2, $06
00098A8F EC04                       	smpsPSGAlterVol     $04
00098A91 E701                       	dc.b	smpsNoAttack, $01
00098A93 ECFC                       	smpsPSGAlterVol     $FC
00098A95 9B03                       	dc.b	nD2, $03
00098A97 EC04                       	smpsPSGAlterVol     $04
00098A99 E701                       	dc.b	smpsNoAttack, $01
00098A9B ECFC                       	smpsPSGAlterVol     $FC
00098A9D 9B02                       	dc.b	nD2, $02
00098A9F EC04                       	smpsPSGAlterVol     $04
00098AA1 E701                       	dc.b	smpsNoAttack, $01
00098AA3 ECFC                       	smpsPSGAlterVol     $FC
00098AA5 E1FE                       	smpsAlterNote       $FE
00098AA7 9A03                       	dc.b	nCs2, $03
00098AA9 EC0B                       	smpsPSGAlterVol     $0B
00098AAB 800A                       	dc.b	nRst, $0A
00098AAD E102                       	smpsAlterNote       $02
00098AAF 01                         	dc.b	$01
00098AB0 E10A                       	smpsAlterNote       $0A
00098AB2 01                         	dc.b	$01
00098AB3 E102                       	smpsAlterNote       $02
00098AB5 01                         	dc.b	$01
00098AB6 E1F7                       	smpsAlterNote       $F7
00098AB8 01                         	dc.b	$01
00098AB9 E10A                       	smpsAlterNote       $0A
00098ABB 01                         	dc.b	$01
00098ABC E1FC                       	smpsAlterNote       $FC
00098ABE 01                         	dc.b	$01
00098ABF E108                       	smpsAlterNote       $08
00098AC1 0101                       	dc.b	$01, $01
00098AC3 E102                       	smpsAlterNote       $02
00098AC5 01                         	dc.b	$01
00098AC6 E1F7                       	smpsAlterNote       $F7
00098AC8 0101                       	dc.b	$01, $01
00098ACA E1FC                       	smpsAlterNote       $FC
00098ACC ECF5                       	smpsPSGAlterVol     $F5
00098ACE 8F06                       	dc.b	nD1, $06
00098AD0 EC04                       	smpsPSGAlterVol     $04
00098AD2 E701                       	dc.b	smpsNoAttack, $01
00098AD4 EC07                       	smpsPSGAlterVol     $07
00098AD6 8003                       	dc.b	nRst, $03
00098AD8 ECF5                       	smpsPSGAlterVol     $F5
00098ADA 8F06                       	dc.b	nD1, $06
00098ADC EC04                       	smpsPSGAlterVol     $04
00098ADE E701                       	dc.b	smpsNoAttack, $01
00098AE0 EC07                       	smpsPSGAlterVol     $07
00098AE2 8006                       	dc.b	nRst, $06
00098AE4 E1FF                       	smpsAlterNote       $FF
00098AE6 01                         	dc.b	$01
00098AE7 E102                       	smpsAlterNote       $02
00098AE9 01                         	dc.b	$01
00098AEA E101                       	smpsAlterNote       $01
00098AEC 01                         	dc.b	$01
00098AED E1FC                       	smpsAlterNote       $FC
00098AEF 01                         	dc.b	$01
00098AF0 ECF5                       	smpsPSGAlterVol     $F5
00098AF2 9007                       	dc.b	nEb1, $07
00098AF4 EC0B                       	smpsPSGAlterVol     $0B
00098AF6 8004                       	dc.b	nRst, $04
00098AF8 ECF5                       	smpsPSGAlterVol     $F5
00098AFA 9006                       	dc.b	nEb1, $06
00098AFC EC0B                       	smpsPSGAlterVol     $0B
00098AFE 8007                       	dc.b	nRst, $07
00098B00 E103                       	smpsAlterNote       $03
00098B02 0101                       	dc.b	$01, $01
00098B04 E1FF                       	smpsAlterNote       $FF
00098B06 01                         	dc.b	$01
00098B07 E1F9                       	smpsAlterNote       $F9
00098B09 01                         	dc.b	$01
00098B0A E1FC                       	smpsAlterNote       $FC
00098B0C ECF5                       	smpsPSGAlterVol     $F5
00098B0E 8F06                       	dc.b	nD1, $06
00098B10 EC04                       	smpsPSGAlterVol     $04
00098B12 E701                       	dc.b	smpsNoAttack, $01
00098B14 EC07                       	smpsPSGAlterVol     $07
00098B16 8003                       	dc.b	nRst, $03
00098B18 ECF5                       	smpsPSGAlterVol     $F5
00098B1A 8F06                       	dc.b	nD1, $06
00098B1C EC04                       	smpsPSGAlterVol     $04
00098B1E E701                       	dc.b	smpsNoAttack, $01
00098B20 EC07                       	smpsPSGAlterVol     $07
00098B22 8006                       	dc.b	nRst, $06
00098B24 E1FF                       	smpsAlterNote       $FF
00098B26 01                         	dc.b	$01
00098B27 E103                       	smpsAlterNote       $03
00098B29 01                         	dc.b	$01
00098B2A E1FF                       	smpsAlterNote       $FF
00098B2C 01                         	dc.b	$01
00098B2D E1F9                       	smpsAlterNote       $F9
00098B2F 01                         	dc.b	$01
00098B30 E1FC                       	smpsAlterNote       $FC
00098B32 ECF5                       	smpsPSGAlterVol     $F5
00098B34 8F06                       	dc.b	nD1, $06
00098B36 EC04                       	smpsPSGAlterVol     $04
00098B38 E701                       	dc.b	smpsNoAttack, $01
00098B3A EC07                       	smpsPSGAlterVol     $07
00098B3C 8003                       	dc.b	nRst, $03
00098B3E ECF5                       	smpsPSGAlterVol     $F5
00098B40 8F07                       	dc.b	nD1, $07
00098B42 EC0B                       	smpsPSGAlterVol     $0B
00098B44 8006                       	dc.b	nRst, $06
00098B46 E1FF                       	smpsAlterNote       $FF
00098B48 01                         	dc.b	$01
00098B49 E102                       	smpsAlterNote       $02
00098B4B 0101                       	dc.b	$01, $01
00098B4D E1FC                       	smpsAlterNote       $FC
00098B4F 01                         	dc.b	$01
00098B50 ECF5                       	smpsPSGAlterVol     $F5
00098B52 8F07                       	dc.b	nD1, $07
00098B54 EC0B                       	smpsPSGAlterVol     $0B
00098B56 8004                       	dc.b	nRst, $04
00098B58 ECF5                       	smpsPSGAlterVol     $F5
00098B5A 8F06                       	dc.b	nD1, $06
00098B5C EC04                       	smpsPSGAlterVol     $04
00098B5E E701                       	dc.b	smpsNoAttack, $01
00098B60 EC07                       	smpsPSGAlterVol     $07
00098B62 8006                       	dc.b	nRst, $06
00098B64 E101                       	smpsAlterNote       $01
00098B66 01                         	dc.b	$01
00098B67 E102                       	smpsAlterNote       $02
00098B69 01                         	dc.b	$01
00098B6A E1FF                       	smpsAlterNote       $FF
00098B6C 01                         	dc.b	$01
00098B6D E1F9                       	smpsAlterNote       $F9
00098B6F 01                         	dc.b	$01
00098B70 E1FC                       	smpsAlterNote       $FC
00098B72 ECF5                       	smpsPSGAlterVol     $F5
00098B74 9006                       	dc.b	nEb1, $06
00098B76 EC04                       	smpsPSGAlterVol     $04
00098B78 E701                       	dc.b	smpsNoAttack, $01
00098B7A EC07                       	smpsPSGAlterVol     $07
00098B7C 8003                       	dc.b	nRst, $03
00098B7E ECF5                       	smpsPSGAlterVol     $F5
00098B80 9006                       	dc.b	nEb1, $06
00098B82 EC04                       	smpsPSGAlterVol     $04
00098B84 E701                       	dc.b	smpsNoAttack, $01
00098B86 EC07                       	smpsPSGAlterVol     $07
00098B88 8006                       	dc.b	nRst, $06
00098B8A E100                       	smpsAlterNote       $00
00098B8C 01                         	dc.b	$01
00098B8D E102                       	smpsAlterNote       $02
00098B8F 01                         	dc.b	$01
00098B90 E100                       	smpsAlterNote       $00
00098B92 01                         	dc.b	$01
00098B93 E1FF                       	smpsAlterNote       $FF
00098B95 01                         	dc.b	$01
00098B96 ECF5                       	smpsPSGAlterVol     $F5
00098B98 9B06                       	dc.b	nD2, $06
00098B9A EC04                       	smpsPSGAlterVol     $04
00098B9C E701                       	dc.b	smpsNoAttack, $01
00098B9E EC07                       	smpsPSGAlterVol     $07
00098BA0 8003                       	dc.b	nRst, $03
00098BA2 ECF5                       	smpsPSGAlterVol     $F5
00098BA4 9B07                       	dc.b	nD2, $07
00098BA6 EC0B                       	smpsPSGAlterVol     $0B
00098BA8 8007                       	dc.b	nRst, $07
00098BAA E105                       	smpsAlterNote       $05
00098BAC 0101                       	dc.b	$01, $01
00098BAE E1FF                       	smpsAlterNote       $FF
00098BB0 01                         	dc.b	$01
00098BB1 E1FC                       	smpsAlterNote       $FC
00098BB3 01                         	dc.b	$01
00098BB4 E1FF                       	smpsAlterNote       $FF
00098BB6 ECF5                       	smpsPSGAlterVol     $F5
00098BB8 9B06                       	dc.b	nD2, $06
00098BBA EC0B                       	smpsPSGAlterVol     $0B
00098BBC 8004                       	dc.b	nRst, $04
00098BBE ECF5                       	smpsPSGAlterVol     $F5
00098BC0 9B06                       	dc.b	nD2, $06
00098BC2 EC04                       	smpsPSGAlterVol     $04
00098BC4 E701                       	dc.b	smpsNoAttack, $01
00098BC6 EC07                       	smpsPSGAlterVol     $07
00098BC8 8006                       	dc.b	nRst, $06
00098BCA E102                       	smpsAlterNote       $02
00098BCC 01                         	dc.b	$01
00098BCD E106                       	smpsAlterNote       $06
00098BCF 01                         	dc.b	$01
00098BD0 E102                       	smpsAlterNote       $02
00098BD2 01                         	dc.b	$01
00098BD3 E1FC                       	smpsAlterNote       $FC
00098BD5 01                         	dc.b	$01
00098BD6 E1FF                       	smpsAlterNote       $FF
00098BD8 ECF5                       	smpsPSGAlterVol     $F5
00098BDA 9B06                       	dc.b	nD2, $06
00098BDC EC04                       	smpsPSGAlterVol     $04
00098BDE E701                       	dc.b	smpsNoAttack, $01
00098BE0 EC07                       	smpsPSGAlterVol     $07
00098BE2 8003                       	dc.b	nRst, $03
00098BE4 ECF5                       	smpsPSGAlterVol     $F5
00098BE6 9B07                       	dc.b	nD2, $07
00098BE8 EC0B                       	smpsPSGAlterVol     $0B
00098BEA 8006                       	dc.b	nRst, $06
00098BEC E102                       	smpsAlterNote       $02
00098BEE 01                         	dc.b	$01
00098BEF E105                       	smpsAlterNote       $05
00098BF1 0101                       	dc.b	$01, $01
00098BF3 E1FF                       	smpsAlterNote       $FF
00098BF5 01                         	dc.b	$01
00098BF6 ECF5                       	smpsPSGAlterVol     $F5
00098BF8 9B07                       	dc.b	nD2, $07
00098BFA EC0B                       	smpsPSGAlterVol     $0B
00098BFC 8004                       	dc.b	nRst, $04
00098BFE ECF5                       	smpsPSGAlterVol     $F5
00098C00 9B06                       	dc.b	nD2, $06
00098C02 EC04                       	smpsPSGAlterVol     $04
00098C04 E701                       	dc.b	smpsNoAttack, $01
00098C06 EC07                       	smpsPSGAlterVol     $07
00098C08 8006                       	dc.b	nRst, $06
00098C0A E105                       	smpsAlterNote       $05
00098C0C 0101                       	dc.b	$01, $01
00098C0E E102                       	smpsAlterNote       $02
00098C10 01                         	dc.b	$01
00098C11 E1FC                       	smpsAlterNote       $FC
00098C13 01                         	dc.b	$01
00098C14 E1FF                       	smpsAlterNote       $FF
00098C16 ECF5                       	smpsPSGAlterVol     $F5
00098C18 9B06                       	dc.b	nD2, $06
00098C1A EC04                       	smpsPSGAlterVol     $04
00098C1C E701                       	dc.b	smpsNoAttack, $01
00098C1E EC07                       	smpsPSGAlterVol     $07
00098C20 8003                       	dc.b	nRst, $03
00098C22 ECF5                       	smpsPSGAlterVol     $F5
00098C24 9B06                       	dc.b	nD2, $06
00098C26 EC04                       	smpsPSGAlterVol     $04
00098C28 E701                       	dc.b	smpsNoAttack, $01
00098C2A EC07                       	smpsPSGAlterVol     $07
00098C2C 8006                       	dc.b	nRst, $06
00098C2E E102                       	smpsAlterNote       $02
00098C30 01                         	dc.b	$01
00098C31 E106                       	smpsAlterNote       $06
00098C33 01                         	dc.b	$01
00098C34 E102                       	smpsAlterNote       $02
00098C36 01                         	dc.b	$01
00098C37 E1FF                       	smpsAlterNote       $FF
00098C39 01                         	dc.b	$01
00098C3A ECF5                       	smpsPSGAlterVol     $F5
00098C3C 9B06                       	dc.b	nD2, $06
00098C3E EC04                       	smpsPSGAlterVol     $04
00098C40 E701                       	dc.b	smpsNoAttack, $01
00098C42 EC07                       	smpsPSGAlterVol     $07
00098C44 8003                       	dc.b	nRst, $03
00098C46 ECF5                       	smpsPSGAlterVol     $F5
00098C48 9B07                       	dc.b	nD2, $07
00098C4A EC0B                       	smpsPSGAlterVol     $0B
00098C4C 8007                       	dc.b	nRst, $07
00098C4E E107                       	smpsAlterNote       $07
00098C50 0101                       	dc.b	$01, $01
00098C52 E1FE                       	smpsAlterNote       $FE
00098C54 01                         	dc.b	$01
00098C55 E1FA                       	smpsAlterNote       $FA
00098C57 0101                       	dc.b	$01, $01
00098C59 E103                       	smpsAlterNote       $03
00098C5B 01                         	dc.b	$01
00098C5C E109                       	smpsAlterNote       $09
00098C5E 01                         	dc.b	$01
00098C5F E107                       	smpsAlterNote       $07
00098C61 01                         	dc.b	$01
00098C62 E1FE                       	smpsAlterNote       $FE
00098C64 01                         	dc.b	$01
00098C65 E108                       	smpsAlterNote       $08
00098C67 01                         	dc.b	$01
00098C68 E1FD                       	smpsAlterNote       $FD
00098C6A ECF5                       	smpsPSGAlterVol     $F5
00098C6C 940E                       	dc.b	nG1, $0E
00098C6E E103                       	smpsAlterNote       $03
00098C70 EC0B                       	smpsPSGAlterVol     $0B
00098C72 8001 01                    	dc.b	nRst, $01, $01
00098C75 E1FD                       	smpsAlterNote       $FD
00098C77 01                         	dc.b	$01
00098C78 E1FB                       	smpsAlterNote       $FB
00098C7A 0101                       	dc.b	$01, $01
00098C7C E100                       	smpsAlterNote       $00
00098C7E 01                         	dc.b	$01
00098C7F E103                       	smpsAlterNote       $03
00098C81 01                         	dc.b	$01
00098C82 E100                       	smpsAlterNote       $00
00098C84 01                         	dc.b	$01
00098C85 E1FD                       	smpsAlterNote       $FD
00098C87 01                         	dc.b	$01
00098C88 E1FA                       	smpsAlterNote       $FA
00098C8A 01                         	dc.b	$01
00098C8B E1FD                       	smpsAlterNote       $FD
00098C8D 01                         	dc.b	$01
00098C8E E103                       	smpsAlterNote       $03
00098C90 0101                       	dc.b	$01, $01
00098C92 E100                       	smpsAlterNote       $00
00098C94 01                         	dc.b	$01
00098C95 E1FE                       	smpsAlterNote       $FE
00098C97 ECF5                       	smpsPSGAlterVol     $F5
00098C99 960D                       	dc.b	nA1, $0D
00098C9B E104                       	smpsAlterNote       $04
00098C9D EC0B                       	smpsPSGAlterVol     $0B
00098C9F 8001 01                    	dc.b	nRst, $01, $01
00098CA2 E101                       	smpsAlterNote       $01
00098CA4 01                         	dc.b	$01
00098CA5 E1FB                       	smpsAlterNote       $FB
00098CA7 0101                       	dc.b	$01, $01
00098CA9 E1FE                       	smpsAlterNote       $FE
00098CAB 01                         	dc.b	$01
00098CAC E104                       	smpsAlterNote       $04
00098CAE 0101                       	dc.b	$01, $01
00098CB0 E1FE                       	smpsAlterNote       $FE
00098CB2 01                         	dc.b	$01
00098CB3 E1FB                       	smpsAlterNote       $FB
00098CB5 0101                       	dc.b	$01, $01
00098CB7 E101                       	smpsAlterNote       $01
00098CB9 01                         	dc.b	$01
00098CBA E104                       	smpsAlterNote       $04
00098CBC 0101                       	dc.b	$01, $01
00098CBE E1FE                       	smpsAlterNote       $FE
00098CC0 ECF5                       	smpsPSGAlterVol     $F5
00098CC2 970D                       	dc.b	nBb1, $0D
00098CC4 E101                       	smpsAlterNote       $01
00098CC6 EC04                       	smpsPSGAlterVol     $04
00098CC8 E701                       	dc.b	smpsNoAttack, $01
00098CCA EC07                       	smpsPSGAlterVol     $07
00098CCC E104                       	smpsAlterNote       $04
00098CCE 8001                       	dc.b	nRst, $01
00098CD0 E103                       	smpsAlterNote       $03
00098CD2 01                         	dc.b	$01
00098CD3 E1FE                       	smpsAlterNote       $FE
00098CD5 01                         	dc.b	$01
00098CD6 E1FA                       	smpsAlterNote       $FA
00098CD8 01                         	dc.b	$01
00098CD9 E1FE                       	smpsAlterNote       $FE
00098CDB 01                         	dc.b	$01
00098CDC E101                       	smpsAlterNote       $01
00098CDE 01                         	dc.b	$01
00098CDF E104                       	smpsAlterNote       $04
00098CE1 01                         	dc.b	$01
00098CE2 E101                       	smpsAlterNote       $01
00098CE4 01                         	dc.b	$01
00098CE5 E1FB                       	smpsAlterNote       $FB
00098CE7 01                         	dc.b	$01
00098CE8 E1FA                       	smpsAlterNote       $FA
00098CEA 01                         	dc.b	$01
00098CEB E1FE                       	smpsAlterNote       $FE
00098CED 01                         	dc.b	$01
00098CEE E103                       	smpsAlterNote       $03
00098CF0 0101                       	dc.b	$01, $01
00098CF2 E101                       	smpsAlterNote       $01
00098CF4 01                         	dc.b	$01
00098CF5 E1FE                       	smpsAlterNote       $FE
00098CF7 ECF5                       	smpsPSGAlterVol     $F5
00098CF9 990D                       	dc.b	nC2, $0D
00098CFB E104                       	smpsAlterNote       $04
00098CFD EC0B                       	smpsPSGAlterVol     $0B
00098CFF 8001 01                    	dc.b	nRst, $01, $01
00098D02 E102                       	smpsAlterNote       $02
00098D04 01                         	dc.b	$01
00098D05 E1FC                       	smpsAlterNote       $FC
00098D07 0101                       	dc.b	$01, $01
00098D09 E102                       	smpsAlterNote       $02
00098D0B 01                         	dc.b	$01
00098D0C E104                       	smpsAlterNote       $04
00098D0E 01                         	dc.b	$01
00098D0F E1FF                       	smpsAlterNote       $FF
00098D11 ECF5                       	smpsPSGAlterVol     $F5
00098D13 9B06                       	dc.b	nD2, $06
00098D15 EC04                       	smpsPSGAlterVol     $04
00098D17 E701                       	dc.b	smpsNoAttack, $01
00098D19 EC07                       	smpsPSGAlterVol     $07
00098D1B 8003                       	dc.b	nRst, $03
00098D1D ECF5                       	smpsPSGAlterVol     $F5
00098D1F 9B07                       	dc.b	nD2, $07
00098D21 EC0B                       	smpsPSGAlterVol     $0B
00098D23 8006                       	dc.b	nRst, $06
00098D25 E101                       	smpsAlterNote       $01
00098D27 01                         	dc.b	$01
00098D28 E104                       	smpsAlterNote       $04
00098D2A 0101                       	dc.b	$01, $01
00098D2C E1FE                       	smpsAlterNote       $FE
00098D2E 01                         	dc.b	$01
00098D2F E1FC                       	smpsAlterNote       $FC
00098D31 01                         	dc.b	$01
00098D32 E1FE                       	smpsAlterNote       $FE
00098D34 ECF5                       	smpsPSGAlterVol     $F5
00098D36 9C06                       	dc.b	nEb2, $06
00098D38 EC0B                       	smpsPSGAlterVol     $0B
00098D3A 8004                       	dc.b	nRst, $04
00098D3C ECF5                       	smpsPSGAlterVol     $F5
00098D3E 9C06                       	dc.b	nEb2, $06
00098D40 EC04                       	smpsPSGAlterVol     $04
00098D42 E701                       	dc.b	smpsNoAttack, $01
00098D44 EC07                       	smpsPSGAlterVol     $07
00098D46 8006                       	dc.b	nRst, $06
00098D48 E105                       	smpsAlterNote       $05
00098D4A 01                         	dc.b	$01
00098D4B E106                       	smpsAlterNote       $06
00098D4D 01                         	dc.b	$01
00098D4E E102                       	smpsAlterNote       $02
00098D50 01                         	dc.b	$01
00098D51 E1FB                       	smpsAlterNote       $FB
00098D53 01                         	dc.b	$01
00098D54 E1FF                       	smpsAlterNote       $FF
00098D56 ECF5                       	smpsPSGAlterVol     $F5
00098D58 9B06                       	dc.b	nD2, $06
00098D5A EC04                       	smpsPSGAlterVol     $04
00098D5C E701                       	dc.b	smpsNoAttack, $01
00098D5E EC07                       	smpsPSGAlterVol     $07
00098D60 8003                       	dc.b	nRst, $03
00098D62 ECF5                       	smpsPSGAlterVol     $F5
00098D64 9B06                       	dc.b	nD2, $06
00098D66 EC04                       	smpsPSGAlterVol     $04
00098D68 E701                       	dc.b	smpsNoAttack, $01
00098D6A EC07                       	smpsPSGAlterVol     $07
00098D6C 8006                       	dc.b	nRst, $06
00098D6E E101                       	smpsAlterNote       $01
00098D70 01                         	dc.b	$01
00098D71 E105                       	smpsAlterNote       $05
00098D73 01                         	dc.b	$01
00098D74 E104                       	smpsAlterNote       $04
00098D76 01                         	dc.b	$01
00098D77 E1FE                       	smpsAlterNote       $FE
00098D79 01                         	dc.b	$01
00098D7A ECF5                       	smpsPSGAlterVol     $F5
00098D7C 9C07                       	dc.b	nEb2, $07
00098D7E EC0B                       	smpsPSGAlterVol     $0B
00098D80 8004                       	dc.b	nRst, $04
00098D82 ECF5                       	smpsPSGAlterVol     $F5
00098D84 9C06                       	dc.b	nEb2, $06
00098D86 EC0B                       	smpsPSGAlterVol     $0B
00098D88 8007                       	dc.b	nRst, $07
00098D8A E105                       	smpsAlterNote       $05
00098D8C 0101                       	dc.b	$01, $01
00098D8E E102                       	smpsAlterNote       $02
00098D90 01                         	dc.b	$01
00098D91 E1FB                       	smpsAlterNote       $FB
00098D93 01                         	dc.b	$01
00098D94 E1FF                       	smpsAlterNote       $FF
00098D96 ECF5                       	smpsPSGAlterVol     $F5
00098D98 9B06                       	dc.b	nD2, $06
00098D9A EC04                       	smpsPSGAlterVol     $04
00098D9C E701                       	dc.b	smpsNoAttack, $01
00098D9E EC07                       	smpsPSGAlterVol     $07
00098DA0 8003                       	dc.b	nRst, $03
00098DA2 ECF5                       	smpsPSGAlterVol     $F5
00098DA4 9B06                       	dc.b	nD2, $06
00098DA6 EC04                       	smpsPSGAlterVol     $04
00098DA8 E701                       	dc.b	smpsNoAttack, $01
00098DAA EC07                       	smpsPSGAlterVol     $07
00098DAC 8006                       	dc.b	nRst, $06
00098DAE E101                       	smpsAlterNote       $01
00098DB0 01                         	dc.b	$01
00098DB1 E105                       	smpsAlterNote       $05
00098DB3 01                         	dc.b	$01
00098DB4 E101                       	smpsAlterNote       $01
00098DB6 01                         	dc.b	$01
00098DB7 E1FC                       	smpsAlterNote       $FC
00098DB9 01                         	dc.b	$01
00098DBA E1FE                       	smpsAlterNote       $FE
00098DBC ECF5                       	smpsPSGAlterVol     $F5
00098DBE 9C06                       	dc.b	nEb2, $06
00098DC0 EC04                       	smpsPSGAlterVol     $04
00098DC2 E701                       	dc.b	smpsNoAttack, $01
00098DC4 EC07                       	smpsPSGAlterVol     $07
00098DC6 8003                       	dc.b	nRst, $03
00098DC8 ECF5                       	smpsPSGAlterVol     $F5
00098DCA 9C07                       	dc.b	nEb2, $07
00098DCC EC0B                       	smpsPSGAlterVol     $0B
00098DCE 8006                       	dc.b	nRst, $06
00098DD0 E102                       	smpsAlterNote       $02
00098DD2 01                         	dc.b	$01
00098DD3 E105                       	smpsAlterNote       $05
00098DD5 0101                       	dc.b	$01, $01
00098DD7 E1FF                       	smpsAlterNote       $FF
00098DD9 01                         	dc.b	$01
00098DDA ECF5                       	smpsPSGAlterVol     $F5
00098DDC 9B07                       	dc.b	nD2, $07
00098DDE EC0B                       	smpsPSGAlterVol     $0B
00098DE0 8004                       	dc.b	nRst, $04
00098DE2 ECF5                       	smpsPSGAlterVol     $F5
00098DE4 9B06                       	dc.b	nD2, $06
00098DE6 EC04                       	smpsPSGAlterVol     $04
00098DE8 E701                       	dc.b	smpsNoAttack, $01
00098DEA EC07                       	smpsPSGAlterVol     $07
00098DEC 8002                       	dc.b	nRst, $02
00098DEE E1FC                       	smpsAlterNote       $FC
00098DF0 ECF5                       	smpsPSGAlterVol     $F5
00098DF2 9006                       	dc.b	nEb1, $06
00098DF4 EC04                       	smpsPSGAlterVol     $04
00098DF6 E701                       	dc.b	smpsNoAttack, $01
00098DF8 ECFC                       	smpsPSGAlterVol     $FC
00098DFA 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00098DFE EC04                       	smpsPSGAlterVol     $04
00098E00 E701                       	dc.b	smpsNoAttack, $01
00098E02 E1FD                       	smpsAlterNote       $FD
00098E04 ECFC                       	smpsPSGAlterVol     $FC
00098E06 9402                       	dc.b	nG1, $02
00098E08 EC04                       	smpsPSGAlterVol     $04
00098E0A E701                       	dc.b	smpsNoAttack, $01
00098E0C E1FE                       	smpsAlterNote       $FE
00098E0E ECFC                       	smpsPSGAlterVol     $FC
00098E10 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00098E14 EC04                       	smpsPSGAlterVol     $04
00098E16 E701                       	dc.b	smpsNoAttack, $01
00098E18 EC07                       	smpsPSGAlterVol     $07
00098E1A 8008                       	dc.b	nRst, $08
00098E1C F6F4 F3                    	smpsJump            music84_Jump06
00098E1F                            
00098E1F                            ; PSG3 Data
00098E1F                            music84_PSG3:
00098E1F F500                       	smpsPSGvoice        $00
00098E21 E1FF                       	smpsAlterNote       $FF
00098E23 EC0F                       	smpsPSGAlterVol     $0F
00098E25 803A                       	dc.b	nRst, $3A
00098E27                            
00098E27                            music84_Jump05:
00098E27 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00098E33 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00098E3D F6FF E8                    	smpsJump            music84_Jump05
00098E40                            
00098E40                            ; DAC Data
00098E40                            music84_DAC:
00098E40 E0C0                       	smpsPan             panCenter, $00
00098E42 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00098E4E 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00098E5A 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00098E66 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00098E72 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00098E7E 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00098E8A 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00098E96 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00098EA2 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00098EAE 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00098EBA 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00098EC6 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00098ED2 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00098EDE 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00098EEA 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00098EF6 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00098F02 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00098F0E 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00098F1A 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00098F26 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00098F32 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098F3E 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00098F4A 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00098F56 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00098F62 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00098F6E 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00098F7A 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00098F86 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00098F92 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00098F9E 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00098FAA 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00098FB6 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00098FC2 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00098FCE 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00098FDA 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00098FE6 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098FF2 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00098FFE 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0009900A 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00099016 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00099022 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0009902E 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0009903A 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00099046 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00099052 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0009905E 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009906A 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00099076 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00099082 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0009908E 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0009909A 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
000990A6 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
000990B2 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
000990BE 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
000990CA 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000990D6 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
000990E2 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
000990EE 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000990FA 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00099106 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00099112 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0009911E 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0009912A 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00099136 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00099142 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0009914E 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0009915A 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00099166 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00099172 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0009917E 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0009918A 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00099196 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000991A2 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
000991AE 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
000991BA 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
000991C6 E0C0                       	smpsPan             panCenter, $00
000991C8 F2                         	smpsStop
000991C9                            
000991C9                            music84_Voices:
000991C9                            ;	Voice $00
000991C9                            ;	$3D
000991C9                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
000991C9                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
000991C9                            	smpsVcAlgorithm     $05
000991C9                            	smpsVcFeedback      $07
000991C9                            	smpsVcUnusedBits    $00
000991C9                            	smpsVcDetune        $05, $04, $03, $04
000991C9                            	smpsVcCoarseFreq    $01, $01, $01, $01
000991C9                            	smpsVcRateScale     $00, $00, $00, $00
000991C9                            	smpsVcAttackRate    $11, $11, $11, $11
000991C9                            	smpsVcAmpMod        $00, $00, $00, $00
000991C9                            	smpsVcDecayRate1    $00, $00, $00, $0A
000991C9                            	smpsVcDecayRate2    $00, $00, $00, $0B
000991C9                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000991C9                            	smpsVcReleaseRate   $08, $08, $08, $07
000991C9 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000991E2                            
000991E2                            ;	Voice $01
000991E2                            ;	$04
000991E2                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000991E2                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000991E2                            	smpsVcAlgorithm     $04
000991E2                            	smpsVcFeedback      $00
000991E2                            	smpsVcUnusedBits    $00
000991E2                            	smpsVcDetune        $04, $03, $04, $05
000991E2                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000991E2                            	smpsVcRateScale     $00, $01, $00, $01
000991E2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000991E2                            	smpsVcAmpMod        $00, $00, $00, $00
000991E2                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000991E2                            	smpsVcDecayRate2    $05, $00, $05, $00
000991E2                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000991E2                            	smpsVcReleaseRate   $06, $06, $06, $06
000991E2 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
000991FB                            
000991FB                            ;	Voice $02
000991FB                            ;	$30
000991FB                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
000991FB                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
000991FB                            	smpsVcAlgorithm     $00
000991FB                            	smpsVcFeedback      $06
000991FB                            	smpsVcUnusedBits    $00
000991FB                            	smpsVcDetune        $04, $02, $00, $06
000991FB                            	smpsVcCoarseFreq    $01, $01, $03, $0C
000991FB                            	smpsVcRateScale     $00, $00, $00, $00
000991FB                            	smpsVcAttackRate    $1F, $1F, $1F, $14
000991FB                            	smpsVcAmpMod        $00, $00, $00, $00
000991FB                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
000991FB                            	smpsVcDecayRate2    $01, $01, $01, $01
000991FB                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
000991FB                            	smpsVcReleaseRate   $09, $0B, $08, $0F
000991FB 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
00099214                            
00099214                            ;	Voice $03
00099214                            ;	$3A
00099214                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
00099214                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
00099214                            	smpsVcAlgorithm     $02
00099214                            	smpsVcFeedback      $07
00099214                            	smpsVcUnusedBits    $00
00099214                            	smpsVcDetune        $04, $06, $02, $00
00099214                            	smpsVcCoarseFreq    $01, $01, $01, $01
00099214                            	smpsVcRateScale     $00, $00, $00, $00
00099214                            	smpsVcAttackRate    $18, $19, $14, $14
00099214                            	smpsVcAmpMod        $00, $00, $00, $00
00099214                            	smpsVcDecayRate1    $09, $0D, $09, $09
00099214                            	smpsVcDecayRate2    $00, $00, $00, $00
00099214                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
00099214                            	smpsVcReleaseRate   $08, $0F, $0F, $07
00099214 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0009922D                            
0009922D                            ;	Voice $04
0009922D                            ;	$3C
0009922D                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0009922D                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0009922D                            	smpsVcAlgorithm     $04
0009922D                            	smpsVcFeedback      $07
0009922D                            	smpsVcUnusedBits    $00
0009922D                            	smpsVcDetune        $07, $00, $00, $03
0009922D                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0009922D                            	smpsVcRateScale     $00, $00, $00, $00
0009922D                            	smpsVcAttackRate    $10, $1F, $10, $1F
0009922D                            	smpsVcAmpMod        $00, $00, $00, $00
0009922D                            	smpsVcDecayRate1    $00, $00, $00, $00
0009922D                            	smpsVcDecayRate2    $00, $00, $00, $00
0009922D                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009922D                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0009922D 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00099246                            
00099246                            ;	Voice $05
00099246                            ;	$38
00099246                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00099246                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00099246                            	smpsVcAlgorithm     $00
00099246                            	smpsVcFeedback      $07
00099246                            	smpsVcUnusedBits    $00
00099246                            	smpsVcDetune        $04, $06, $02, $00
00099246                            	smpsVcCoarseFreq    $01, $01, $01, $00
00099246                            	smpsVcRateScale     $00, $00, $00, $00
00099246                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00099246                            	smpsVcAmpMod        $00, $00, $00, $00
00099246                            	smpsVcDecayRate1    $00, $03, $00, $17
00099246                            	smpsVcDecayRate2    $00, $08, $08, $0B
00099246                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00099246                            	smpsVcReleaseRate   $08, $05, $05, $05
00099246 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0009925F                            
0009925F                            
00099260 00                         		even
00099260                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009D470                            		even
0009D470                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A0FC8 00                         		even
000A0FC8                            Music87:	include	sound\music87.asm; Invincibility
000A0FC8                            triple_Header:
000A0FC8 =00000001                  smpsHeaderStartSong = 1
000A0FC8 0000                       	smpsHeaderVoice     triple_Voices
000A0FCA 0501                       	smpsHeaderChan      $05, $01
000A0FCC 0200                       	smpsHeaderTempo     $02, $00
000A0FCE                            
000A0FD2 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A0FD6 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A0FDA 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A0FDE 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A0FE2 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A0FE8                            
000A0FE8                            ; DAC Data
000A0FE8                            triple_DAC:
000A0FE8 E0C0                       	smpsPan             panCenter, $00
000A0FEA 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A0FF0                            
000A0FF0                            triple_Loop01:
000A0FF0 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A0FF3                            
000A0FF3                            triple_Loop00:
000A0FF3 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A0FFF 06                         	dc.b	$06
000A1000 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A1005 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A1011 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A1018 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A101D 0303 1B                    	dc.b	$03, $03, $1B
000A1020 E0C0                       	smpsPan             panCenter, $00
000A1022 F6FF C4                    	smpsJump triple_DAC
000A1025                            
000A1025                            ; FM1 Data
000A1025                            triple_FM1:
000A1025 E0C0                       	smpsPan             panCenter, $00
000A1029 8018                       	dc.b	nRst, $18
000A102B                            
000A102B                            triple_Loop0B:
000A102B AC06 B8                    	dc.b	nG3, $06, nG4
000A102E F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A1033                            
000A1033                            triple_Loop0C:
000A1033 A7B3                       	dc.b	nD3, nD4
000A1035 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A103A                            
000A103A                            triple_Loop0D:
000A103A A9B5                       	dc.b	nE3, nE4
000A103C F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A1041 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A1049 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A104E A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A105A 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A1066 AD                         	dc.b	nAb3
000A1067 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A106C 8018                       	dc.b	nRst, $18
000A106E E0C0                       	smpsPan             panCenter, $00
000A1072 F6FF B1                    	smpsJump triple_FM1
000A1075                            
000A1075                            ; FM2 Data
000A1075                            triple_FM2:
000A1075 E0C0                       	smpsPan             panCenter, $00
000A1079 8018                       	dc.b	nRst, $18
000A107B                            
000A107B                            triple_Loop07:
000A107B C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1087 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A1093 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A1098 8003                       	dc.b	nRst, $03
000A109A                            
000A109A                            triple_Loop08:
000A109A B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A10A0 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A10A5 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A10AB                            
000A10AB                            triple_Loop09:
000A10AB C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A10B7 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A10C3 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A10C8 8003                       	dc.b	nRst, $03
000A10CA                            
000A10CA                            triple_Loop0A:
000A10CA B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A10D0 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A10D5 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A10DB E0C0                       	smpsPan             panCenter, $00
000A10DF F6FF 94                    	smpsJump triple_FM2
000A10E2                            
000A10E2                            ; FM3 Data
000A10E2                            triple_FM3:
000A10E2 E0C0                       	smpsPan             panCenter, $00
000A10E6 8018                       	dc.b	nRst, $18
000A10E8                            
000A10E8                            triple_Loop06:
000A10E8 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A10EF F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A10F4 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A1100 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A110C C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A110F F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A1114 8018                       	dc.b	nRst, $18
000A1116 E0C0                       	smpsPan             panCenter, $00
000A111A F6FF C6                    	smpsJump triple_FM3
000A111D                            
000A111D                            ; FM4 Data
000A111D                            triple_FM4:
000A111D E103                       	smpsAlterNote       $03
000A1121 E0C0                       	smpsPan             panCenter, $00
000A1123 8018                       	dc.b	nRst, $18
000A1125                            
000A1125                            triple_Loop02:
000A1125 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1131 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A113D F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A1142 8003                       	dc.b	nRst, $03
000A1144                            
000A1144                            triple_Loop03:
000A1144 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A114A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A114F B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A1155                            
000A1155                            triple_Loop04:
000A1155 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1161 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A116D F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A1172 8003                       	dc.b	nRst, $03
000A1174                            
000A1174                            triple_Loop05:
000A1174 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A117A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A117F B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A1185 E0C0                       	smpsPan             panCenter, $00
000A1187 F6FF 94                    	smpsJump triple_FM4
000A118A                            
000A118A                            ; PSG1 Data
000A118A                            triple_PSG1:
000A118A 8018                       	dc.b	nRst, $18
000A118C                            
000A118C                            triple_Loop0E:
000A118C A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1198 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A11A4 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A11B0 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A11B4 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A11B9 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A11C5 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A11D1 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A11DD 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A11E1                            
000A11E1                            triple_Loop0F:
000A11E1 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A11E7 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A11EC 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A11F2                            
000A11F2                            triple_Loop10:
000A11F2 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A11FE 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A120A 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1216 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A121A F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A121F A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A122B 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1237 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1243 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A1247                            
000A1247                            triple_Loop11:
000A1247 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A124D F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A1252 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A1258 F500                       	smpsPSGvoice        $00
000A125A F6FF 2E                    	smpsJump triple_PSG1
000A125D                            
000A125D                            triple_Voices:
000A125D                            ;	Voice $00
000A125D                            ;	$3A
000A125D                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A125D                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A125D                            	smpsVcAlgorithm     $02
000A125D                            	smpsVcFeedback      $07
000A125D                            	smpsVcUnusedBits    $00
000A125D                            	smpsVcDetune        $00, $00, $00, $00
000A125D                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A125D                            	smpsVcRateScale     $01, $02, $02, $02
000A125D                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A125D                            	smpsVcAmpMod        $00, $00, $00, $00
000A125D                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A125D                            	smpsVcDecayRate2    $00, $00, $00, $00
000A125D                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A125D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A125D 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A1276                            
000A1276                            ;	Voice $01
000A1276                            ;	$20
000A1276                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A1276                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A1276                            	smpsVcAlgorithm     $00
000A1276                            	smpsVcFeedback      $04
000A1276                            	smpsVcUnusedBits    $00
000A1276                            	smpsVcDetune        $00, $00, $03, $07
000A1276                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A1276                            	smpsVcRateScale     $03, $03, $03, $02
000A1276                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A1276                            	smpsVcAmpMod        $00, $00, $00, $00
000A1276                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A1276                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A1276                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A1276                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1276 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A1276 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A1290 00                         		even
000A1290                            Music88:	incbin	sound\music88.bin; Extra Life
000A137E                            		even
000A137E                            Music89:	incbin	sound\music89.bin; Special Stage
000A5246 00                         		even
000A5246                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A5410                            		even
000A5410                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A56AA                            		even
000A56AA                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A5948                            		even
000A5948                            Music8D:	incbin	sound\music8D.bin; Final Zone
000A5B64                            		even
000A5B64                            Music8E:	include	sound\merry.asm ; Act Clear
000A5B64 =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000A5B64 =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000A5B64 =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000A5B64 =0000008A                  dMerryClap = dLowTimpani
000A5B64                            
000A5B64                            MerrysLittleLamb_Header:
000A5B64 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000A5B66 0603                       	smpsHeaderChan      $06, $03
000A5B68 0100                       	smpsHeaderTempo     $01, $00
000A5B6A                            
000A5B6E 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000A5B72 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000A5B76 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000A5B7A 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000A5B7E 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000A5B82 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000A5B88 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000A5B8E 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000A5B94                            
000A5B94                            MerrysLittleLamb_FM1:
000A5B94 E0C0                       	smpsPan             panCenter, $00
000A5B96 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000A5B9D E60F                       	smpsAlterVol        $0F
000A5B9F A704                       	dc.b	nD3, $04
000A5BA1 E606                       	smpsAlterVol        $06
000A5BA3 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5BA8 E6FA                       	smpsAlterVol        $FA
000A5BAA A705                       	dc.b	nD3, $05
000A5BAC E606                       	smpsAlterVol        $06
000A5BAE A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5BB3 E6FA                       	smpsAlterVol        $FA
000A5BB5 A704                       	dc.b	nD3, $04
000A5BB7 E606                       	smpsAlterVol        $06
000A5BB9 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5BBF E6FA                       	smpsAlterVol        $FA
000A5BC1 A7                         	dc.b	nD3
000A5BC2 E606                       	smpsAlterVol        $06
000A5BC4 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5BC9 E6FA                       	smpsAlterVol        $FA
000A5BCB A704                       	dc.b	nD3, $04
000A5BCD E606                       	smpsAlterVol        $06
000A5BCF A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5BD5 E6FA                       	smpsAlterVol        $FA
000A5BD7 A7                         	dc.b	nD3
000A5BD8 E606                       	smpsAlterVol        $06
000A5BDA A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5BE0 E6FA                       	smpsAlterVol        $FA
000A5BE2 A705                       	dc.b	nD3, $05
000A5BE4 E606                       	smpsAlterVol        $06
000A5BE6 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5BEB E6FA                       	smpsAlterVol        $FA
000A5BED A7                         	dc.b	nD3
000A5BEE E606                       	smpsAlterVol        $06
000A5BF0 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5BF6 E6FA                       	smpsAlterVol        $FA
000A5BF8 A705                       	dc.b	nD3, $05
000A5BFA E606                       	smpsAlterVol        $06
000A5BFC A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5C01 E6FA                       	smpsAlterVol        $FA
000A5C03 A704                       	dc.b	nD3, $04
000A5C05 E606                       	smpsAlterVol        $06
000A5C07 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5C0C E6FA                       	smpsAlterVol        $FA
000A5C0E A705                       	dc.b	nD3, $05
000A5C10 E606                       	smpsAlterVol        $06
000A5C12 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5C17 E6FA                       	smpsAlterVol        $FA
000A5C19 A704                       	dc.b	nD3, $04
000A5C1B E606                       	smpsAlterVol        $06
000A5C1D A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5C22 E6FA                       	smpsAlterVol        $FA
000A5C24 A705                       	dc.b	nD3, $05
000A5C26 E606                       	smpsAlterVol        $06
000A5C28 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5C2D E6FA                       	smpsAlterVol        $FA
000A5C2F A704                       	dc.b	nD3, $04
000A5C31 E606                       	smpsAlterVol        $06
000A5C33 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5C39 E6FA                       	smpsAlterVol        $FA
000A5C3B A7                         	dc.b	nD3
000A5C3C E606                       	smpsAlterVol        $06
000A5C3E A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5C44 E6FA                       	smpsAlterVol        $FA
000A5C46 A705                       	dc.b	nD3, $05
000A5C48 E606                       	smpsAlterVol        $06
000A5C4A A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5C4F E6FA                       	smpsAlterVol        $FA
000A5C51 A7                         	dc.b	nD3
000A5C52 E606                       	smpsAlterVol        $06
000A5C54 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5C5A E6FA                       	smpsAlterVol        $FA
000A5C5C A705                       	dc.b	nD3, $05
000A5C5E E606                       	smpsAlterVol        $06
000A5C60 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5C65 E6FA                       	smpsAlterVol        $FA
000A5C67 A704                       	dc.b	nD3, $04
000A5C69 E606                       	smpsAlterVol        $06
000A5C6B A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5C70 E6FA                       	smpsAlterVol        $FA
000A5C72 A705                       	dc.b	nD3, $05
000A5C74 E606                       	smpsAlterVol        $06
000A5C76 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5C7B E6FA                       	smpsAlterVol        $FA
000A5C7D A704                       	dc.b	nD3, $04
000A5C7F E606                       	smpsAlterVol        $06
000A5C81 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5C86 E6FA                       	smpsAlterVol        $FA
000A5C88 A705                       	dc.b	nD3, $05
000A5C8A E606                       	smpsAlterVol        $06
000A5C8C A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5C91 E6FA                       	smpsAlterVol        $FA
000A5C93 A704                       	dc.b	nD3, $04
000A5C95 E606                       	smpsAlterVol        $06
000A5C97 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5C9D E6FA                       	smpsAlterVol        $FA
000A5C9F A7                         	dc.b	nD3
000A5CA0 E606                       	smpsAlterVol        $06
000A5CA2 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5CA7 E6FA                       	smpsAlterVol        $FA
000A5CA9 A704                       	dc.b	nD3, $04
000A5CAB E606                       	smpsAlterVol        $06
000A5CAD A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5CB3 E6FA                       	smpsAlterVol        $FA
000A5CB5 A7                         	dc.b	nD3
000A5CB6 E606                       	smpsAlterVol        $06
000A5CB8 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5CBE E6FA                       	smpsAlterVol        $FA
000A5CC0 A705                       	dc.b	nD3, $05
000A5CC2 E606                       	smpsAlterVol        $06
000A5CC4 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5CC9 E6FA                       	smpsAlterVol        $FA
000A5CCB A704                       	dc.b	nD3, $04
000A5CCD E606                       	smpsAlterVol        $06
000A5CCF A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5CD4 E6FA                       	smpsAlterVol        $FA
000A5CD6 A705                       	dc.b	nD3, $05
000A5CD8 E606                       	smpsAlterVol        $06
000A5CDA A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5CDF E6FA                       	smpsAlterVol        $FA
000A5CE1 A704                       	dc.b	nD3, $04
000A5CE3 E606                       	smpsAlterVol        $06
000A5CE5 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5CEA E6FA                       	smpsAlterVol        $FA
000A5CEC A705                       	dc.b	nD3, $05
000A5CEE E606                       	smpsAlterVol        $06
000A5CF0 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5CF5 E6FA                       	smpsAlterVol        $FA
000A5CF7 A704                       	dc.b	nD3, $04
000A5CF9 E606                       	smpsAlterVol        $06
000A5CFB A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000A5D02 F2                         	smpsStop
000A5D03                            
000A5D03                            MerrysLittleLamb_FM2:
000A5D03 E0C0                       	smpsPan             panCenter, $00
000A5D05 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000A5D0D E610                       	smpsAlterVol        $10
000A5D0F A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000A5D18                            
000A5D18                            MerrysLittleLamb_FM3:
000A5D18                            MerrysLittleLamb_FM4:
000A5D18                            MerrysLittleLamb_FM5:
000A5D18 F2                         	smpsStop
000A5D19                            
000A5D19                            MerrysLittleLamb_PSG1:
000A5D19 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000A5D21 EC02                       	smpsPSGAlterVol     $02
000A5D23 B7                         	dc.b	nFs4
000A5D24 EC03                       	smpsPSGAlterVol     $03
000A5D26 B7                         	dc.b	nFs4
000A5D27 EC03                       	smpsPSGAlterVol     $03
000A5D29 B7                         	dc.b	nFs4
000A5D2A EC03                       	smpsPSGAlterVol     $03
000A5D2C B7                         	dc.b	nFs4
000A5D2D ECF5                       	smpsPSGAlterVol     $F5
000A5D2F B7                         	dc.b	nFs4
000A5D30 EC02                       	smpsPSGAlterVol     $02
000A5D32 B7                         	dc.b	nFs4
000A5D33 EC03                       	smpsPSGAlterVol     $03
000A5D35 B7                         	dc.b	nFs4
000A5D36 EC03                       	smpsPSGAlterVol     $03
000A5D38 B7                         	dc.b	nFs4
000A5D39 ECF8                       	smpsPSGAlterVol     $F8
000A5D3B B7                         	dc.b	nFs4
000A5D3C EC02                       	smpsPSGAlterVol     $02
000A5D3E B7                         	dc.b	nFs4
000A5D3F EC03                       	smpsPSGAlterVol     $03
000A5D41 B7                         	dc.b	nFs4
000A5D42 EC03                       	smpsPSGAlterVol     $03
000A5D44 B7                         	dc.b	nFs4
000A5D45 EC03                       	smpsPSGAlterVol     $03
000A5D47 B7                         	dc.b	nFs4
000A5D48 ECF5                       	smpsPSGAlterVol     $F5
000A5D4A B7                         	dc.b	nFs4
000A5D4B EC02                       	smpsPSGAlterVol     $02
000A5D4D B7                         	dc.b	nFs4
000A5D4E EC03                       	smpsPSGAlterVol     $03
000A5D50 B7                         	dc.b	nFs4
000A5D51 EC03                       	smpsPSGAlterVol     $03
000A5D53 B7                         	dc.b	nFs4
000A5D54 EC03                       	smpsPSGAlterVol     $03
000A5D56 B7                         	dc.b	nFs4
000A5D57 ECF5                       	smpsPSGAlterVol     $F5
000A5D59 B7                         	dc.b	nFs4
000A5D5A EC02                       	smpsPSGAlterVol     $02
000A5D5C B7                         	dc.b	nFs4
000A5D5D EC06                       	smpsPSGAlterVol     $06
000A5D5F B7                         	dc.b	nFs4
000A5D60 EC03                       	smpsPSGAlterVol     $03
000A5D62 B7                         	dc.b	nFs4
000A5D63 ECF5                       	smpsPSGAlterVol     $F5
000A5D65 B7                         	dc.b	nFs4
000A5D66 EC02                       	smpsPSGAlterVol     $02
000A5D68 B7                         	dc.b	nFs4
000A5D69 EC03                       	smpsPSGAlterVol     $03
000A5D6B B7                         	dc.b	nFs4
000A5D6C EC03                       	smpsPSGAlterVol     $03
000A5D6E B7                         	dc.b	nFs4
000A5D6F EC03                       	smpsPSGAlterVol     $03
000A5D71 B7                         	dc.b	nFs4
000A5D72 ECF5                       	smpsPSGAlterVol     $F5
000A5D74 B7                         	dc.b	nFs4
000A5D75 EC02                       	smpsPSGAlterVol     $02
000A5D77 B7                         	dc.b	nFs4
000A5D78 EC03                       	smpsPSGAlterVol     $03
000A5D7A B7                         	dc.b	nFs4
000A5D7B EC03                       	smpsPSGAlterVol     $03
000A5D7D B7                         	dc.b	nFs4
000A5D7E EC03                       	smpsPSGAlterVol     $03
000A5D80 B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000A5D84 ECF7                       	smpsPSGAlterVol     $F7
000A5D86 A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000A5D92 A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000A5D9E A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000A5DAA A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000A5DB6 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000A5DC2 F2                         	smpsStop
000A5DC3                            
000A5DC3                            MerrysLittleLamb_PSG2:
000A5DC3 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000A5DCA EC02                       	smpsPSGAlterVol     $02
000A5DCC A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000A5DD8 E101                       	smpsAlterNote       $01
000A5DDA AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000A5DDE E101                       	smpsAlterNote       $01
000A5DE0 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A5DE4 E101                       	smpsAlterNote       $01
000A5DE6 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A5DEA E101                       	smpsAlterNote       $01
000A5DEC AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A5DF0 E101                       	smpsAlterNote       $01
000A5DF2 AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000A5DF6 E101                       	smpsAlterNote       $01
000A5DF8 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A5DFC E101                       	smpsAlterNote       $01
000A5DFE AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000A5E02 E101                       	smpsAlterNote       $01
000A5E04 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A5E08 E101                       	smpsAlterNote       $01
000A5E0A AB04 80                    	dc.b	nFs3, $04, nRst
000A5E0D E101                       	smpsAlterNote       $01
000A5E0F AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A5E13 E101                       	smpsAlterNote       $01
000A5E15 AB04 80                    	dc.b	nFs3, $04, nRst
000A5E18 E101                       	smpsAlterNote       $01
000A5E1A AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000A5E20 F2                         	smpsStop
000A5E21                            
000A5E21                            MerrysLittleLamb_PSG3:
000A5E21 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000A5E27 F3E7                       	smpsPSGform         $E7
000A5E29 E108                       	smpsAlterNote       $08
000A5E2B 0002                       	dc.b	nMaxPSG, $02
000A5E2D EC01                       	smpsPSGAlterVol     $01
000A5E2F E108                       	smpsAlterNote       $08
000A5E31 0005                       	dc.b	nMaxPSG, $05
000A5E33 EC01                       	smpsPSGAlterVol     $01
000A5E35 E108                       	smpsAlterNote       $08
000A5E37 0008                       	dc.b	nMaxPSG, $08
000A5E39 EC01                       	smpsPSGAlterVol     $01
000A5E3B E108                       	smpsAlterNote       $08
000A5E3D 00                         	dc.b	nMaxPSG
000A5E3E EC01                       	smpsPSGAlterVol     $01
000A5E40 E108                       	smpsAlterNote       $08
000A5E42 00                         	dc.b	nMaxPSG
000A5E43 EC01                       	smpsPSGAlterVol     $01
000A5E45 E108                       	smpsAlterNote       $08
000A5E47 0007                       	dc.b	nMaxPSG, $07
000A5E49 EC01                       	smpsPSGAlterVol     $01
000A5E4B E108                       	smpsAlterNote       $08
000A5E4D 0005                       	dc.b	nMaxPSG, $05
000A5E4F EC01                       	smpsPSGAlterVol     $01
000A5E51 E108                       	smpsAlterNote       $08
000A5E53 0007                       	dc.b	nMaxPSG, $07
000A5E55 EC01                       	smpsPSGAlterVol     $01
000A5E57 E108                       	smpsAlterNote       $08
000A5E59 0004                       	dc.b	nMaxPSG, $04
000A5E5B EC01                       	smpsPSGAlterVol     $01
000A5E5D E108                       	smpsAlterNote       $08
000A5E5F 0007                       	dc.b	nMaxPSG, $07
000A5E61 EC01                       	smpsPSGAlterVol     $01
000A5E63 E108                       	smpsAlterNote       $08
000A5E65 0006                       	dc.b	nMaxPSG, $06
000A5E67 EC01                       	smpsPSGAlterVol     $01
000A5E69 E108                       	smpsAlterNote       $08
000A5E6B 0009                       	dc.b	nMaxPSG, $09
000A5E6D EC01                       	smpsPSGAlterVol     $01
000A5E6F E108                       	smpsAlterNote       $08
000A5E71 0007                       	dc.b	nMaxPSG, $07
000A5E73 EC01                       	smpsPSGAlterVol     $01
000A5E75 E108                       	smpsAlterNote       $08
000A5E77 0001                       	dc.b	nMaxPSG, $01
000A5E79 ECFF                       	smpsPSGAlterVol     $FF
000A5E7B E108                       	smpsAlterNote       $08
000A5E7D 00                         	dc.b	nMaxPSG
000A5E7E EC01                       	smpsPSGAlterVol     $01
000A5E80 E108                       	smpsAlterNote       $08
000A5E82 0009                       	dc.b	nMaxPSG, $09
000A5E84 EC01                       	smpsPSGAlterVol     $01
000A5E86 E108                       	smpsAlterNote       $08
000A5E88 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000A5E8F F2                         	smpsStop
000A5E90                            
000A5E90                            MerrysLittleLamb_DAC:
000A5E90 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000A5E9C 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000A5EA8 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000A5EB4 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000A5EC0 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000A5ECC 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000A5ED8 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000A5EE4 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000A5EF0 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000A5EFC 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000A5F08 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000A5F14 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000A5F20 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000A5F2C 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000A5F38 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000A5F44 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000A5F50 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000A5F5C 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000A5F68 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000A5F74 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000A5F80 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000A5F8C 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000A5F98 F2                         	smpsStop
000A5F99                            
000A5F99                            MerrysLittleLamb_Voices:
000A5F99                            ;	Voice $00
000A5F99                            ;	$00
000A5F99                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000A5F99                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000A5F99                            	smpsVcAlgorithm     $00
000A5F99                            	smpsVcFeedback      $00
000A5F99                            	smpsVcUnusedBits    $00
000A5F99                            	smpsVcDetune        $07, $07, $07, $07
000A5F99                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A5F99                            	smpsVcRateScale     $00, $00, $00, $00
000A5F99                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A5F99                            	smpsVcAmpMod        $00, $00, $00, $00
000A5F99                            	smpsVcDecayRate1    $1F, $00, $00, $00
000A5F99                            	smpsVcDecayRate2    $12, $00, $00, $00
000A5F99                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000A5F99                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A5F99 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A5FB2                            
000A5FB2                            ;	Voice $01
000A5FB2                            ;	$25
000A5FB2                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000A5FB2                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000A5FB2                            	smpsVcAlgorithm     $05
000A5FB2                            	smpsVcFeedback      $04
000A5FB2                            	smpsVcUnusedBits    $00
000A5FB2                            	smpsVcDetune        $07, $00, $00, $00
000A5FB2                            	smpsVcCoarseFreq    $01, $01, $01, $01
000A5FB2                            	smpsVcRateScale     $00, $00, $00, $00
000A5FB2                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000A5FB2                            	smpsVcAmpMod        $00, $00, $00, $00
000A5FB2                            	smpsVcDecayRate1    $03, $0B, $06, $08
000A5FB2                            	smpsVcDecayRate2    $00, $00, $00, $00
000A5FB2                            	smpsVcDecayLevel    $00, $0A, $04, $04
000A5FB2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A5FB2 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000A5FCB                            
000A5FCB                            
000A5FCC 00                         		even
000A5FCC                            Music8F:	incbin	sound\music8F.bin ; Game Over
000A660C 00                         		even
000A660C                            Music90:	incbin	sound\music90.bin ; Continue
000A69A6 00                         		even
000A69A6                            Music91:	incbin	sound\music91.bin ; Credits
000A7C74                            		even
000A7C74                            Music92:	incbin	sound\music92.bin ; Drowning
000A7FB6 00                         		even
000A7FB6                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A8086                            		even
000A8086                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A8D5C 00                         		even
000A8D5C                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A8EAC 00                         		even
000A8EAC                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A8EE6 00                         		even
000A8EE6                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A8F20 00                         		even
000A8F20                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A8F5A 00                         		even
000A8F5A                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A8F94 00                         		even
000A8F94                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A8FCE 00                         		even
000A8FCE                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A9008 00                         		even
000A9008                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A9042 00                         		even
000A9042                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A907C 00                         		even
000A907C                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A956C                            		even
000A956C                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A956C                            GentleBreeze_Header:
000A956C =00000001                  smpsHeaderStartSong = 1
000A956C 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A956E 0603                       	smpsHeaderChan      $06, $03
000A9570 0100                       	smpsHeaderTempo     $01, $00
000A9572                            
000A9576 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A957A 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A957E 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A9582 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A9586 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A958A 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A9590 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A9596 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A959C                            
000A959C                            ; PSG3 Data
000A959C                            GentleBreeze_PSG3:
000A959C F2                         	smpsStop
000A959D                            
000A959D                            ; FM1 Data
000A959D                            GentleBreeze_FM1:
000A959F E0C0                       	smpsPan             panCenter, $00
000A95A1 E1FF                       	smpsAlterNote       $FF
000A95A3 C410                       	dc.b	nG5, $10
000A95A5 E60F                       	smpsAlterVol        $0F
000A95A7 C4                         	dc.b	nG5
000A95A8 E6F1                       	smpsAlterVol        $F1
000A95AA E100                       	smpsAlterNote       $00
000A95AC C2                         	dc.b	nF5
000A95AD E60F                       	smpsAlterVol        $0F
000A95AF 08                         	dc.b	$08
000A95B0 E6F1                       	smpsAlterVol        $F1
000A95B2 C010                       	dc.b	nEb5, $10
000A95B4 E60F                       	smpsAlterVol        $0F
000A95B6 C0                         	dc.b	nEb5
000A95B7 E6F1                       	smpsAlterVol        $F1
000A95B9 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A95BF E60F                       	smpsAlterVol        $0F
000A95C1 C9                         	dc.b	nC6
000A95C2 E6F1                       	smpsAlterVol        $F1
000A95C4 C5                         	dc.b	nAb5
000A95C5 E60F                       	smpsAlterVol        $0F
000A95C7 08                         	dc.b	$08
000A95C8 E6F1                       	smpsAlterVol        $F1
000A95CA C010                       	dc.b	nEb5, $10
000A95CC E60F                       	smpsAlterVol        $0F
000A95CE C0                         	dc.b	nEb5
000A95CF E6F1                       	smpsAlterVol        $F1
000A95D1 C208                       	dc.b	nF5, $08
000A95D3 E1FF                       	smpsAlterNote       $FF
000A95D5 C410                       	dc.b	nG5, $10
000A95D7 E100                       	smpsAlterNote       $00
000A95D9 C5C7                       	dc.b	nAb5, nBb5
000A95DB E60F                       	smpsAlterVol        $0F
000A95DD C7                         	dc.b	nBb5
000A95DE E6F1                       	smpsAlterVol        $F1
000A95E0 C5                         	dc.b	nAb5
000A95E1 E60F                       	smpsAlterVol        $0F
000A95E3 08                         	dc.b	$08
000A95E4 E6F1                       	smpsAlterVol        $F1
000A95E6 E1FF                       	smpsAlterNote       $FF
000A95E8 C410                       	dc.b	nG5, $10
000A95EA E60F                       	smpsAlterVol        $0F
000A95EC C4                         	dc.b	nG5
000A95ED E6F1                       	smpsAlterVol        $F1
000A95EF C4                         	dc.b	nG5
000A95F0 E100                       	smpsAlterNote       $00
000A95F2 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A95F7 E60F                       	smpsAlterVol        $0F
000A95F9 C2                         	dc.b	nF5
000A95FA E6F1                       	smpsAlterVol        $F1
000A95FC E1FF                       	smpsAlterNote       $FF
000A95FE C4                         	dc.b	nG5
000A95FF E60F                       	smpsAlterVol        $0F
000A9601 08                         	dc.b	$08
000A9602 E6F1                       	smpsAlterVol        $F1
000A9604 10                         	dc.b	$10
000A9605 E60F                       	smpsAlterVol        $0F
000A9607 38                         	dc.b	$38
000A9608 E6F1                       	smpsAlterVol        $F1
000A960A 10                         	dc.b	$10
000A960B E60F                       	smpsAlterVol        $0F
000A960D C4                         	dc.b	nG5
000A960E E6F1                       	smpsAlterVol        $F1
000A9610 E100                       	smpsAlterNote       $00
000A9612 C2                         	dc.b	nF5
000A9613 E60F                       	smpsAlterVol        $0F
000A9615 08                         	dc.b	$08
000A9616 E6F1                       	smpsAlterVol        $F1
000A9618 C010                       	dc.b	nEb5, $10
000A961A E60F                       	smpsAlterVol        $0F
000A961C C0                         	dc.b	nEb5
000A961D E6F1                       	smpsAlterVol        $F1
000A961F BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9625 E60F                       	smpsAlterVol        $0F
000A9627 C9                         	dc.b	nC6
000A9628 E6F1                       	smpsAlterVol        $F1
000A962A C5                         	dc.b	nAb5
000A962B E60F                       	smpsAlterVol        $0F
000A962D 08                         	dc.b	$08
000A962E E6F1                       	smpsAlterVol        $F1
000A9630 C010                       	dc.b	nEb5, $10
000A9632 E60F                       	smpsAlterVol        $0F
000A9634 C0                         	dc.b	nEb5
000A9635 E6F1                       	smpsAlterVol        $F1
000A9637 C208                       	dc.b	nF5, $08
000A9639 E1FF                       	smpsAlterNote       $FF
000A963B C410                       	dc.b	nG5, $10
000A963D E100                       	smpsAlterNote       $00
000A963F C5C7                       	dc.b	nAb5, nBb5
000A9641 E60F                       	smpsAlterVol        $0F
000A9643 C7                         	dc.b	nBb5
000A9644 E6F1                       	smpsAlterVol        $F1
000A9646 C5                         	dc.b	nAb5
000A9647 E60F                       	smpsAlterVol        $0F
000A9649 08                         	dc.b	$08
000A964A E6F1                       	smpsAlterVol        $F1
000A964C E1FF                       	smpsAlterNote       $FF
000A964E C410                       	dc.b	nG5, $10
000A9650 E60F                       	smpsAlterVol        $0F
000A9652 C4                         	dc.b	nG5
000A9653 E6F1                       	smpsAlterVol        $F1
000A9655 C4                         	dc.b	nG5
000A9656 E100                       	smpsAlterNote       $00
000A9658 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A965D E60F                       	smpsAlterVol        $0F
000A965F 28                         	dc.b	$28
000A9660 E6F1                       	smpsAlterVol        $F1
000A9662 C008 10                    	dc.b	nEb5, $08, $10
000A9665 E60F                       	smpsAlterVol        $0F
000A9667 21                         	dc.b	$21
000A9668                            
000A9668                            GentleBreeze_Loop12:
000A9668 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A966B F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A9670 E717                       	dc.b	smpsNoAttack, $17
000A9672 E6F1                       	smpsAlterVol        $F1
000A9674 E1FF                       	smpsAlterNote       $FF
000A9676 C410                       	dc.b	nG5, $10
000A9678 E60F                       	smpsAlterVol        $0F
000A967A C4                         	dc.b	nG5
000A967B E6F1                       	smpsAlterVol        $F1
000A967D E100                       	smpsAlterNote       $00
000A967F C2                         	dc.b	nF5
000A9680 E60F                       	smpsAlterVol        $0F
000A9682 08                         	dc.b	$08
000A9683 E6F1                       	smpsAlterVol        $F1
000A9685 C010                       	dc.b	nEb5, $10
000A9687 E60F                       	smpsAlterVol        $0F
000A9689 C0                         	dc.b	nEb5
000A968A E6F1                       	smpsAlterVol        $F1
000A968C BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9692 E60F                       	smpsAlterVol        $0F
000A9694 C9                         	dc.b	nC6
000A9695 E6F1                       	smpsAlterVol        $F1
000A9697 C5                         	dc.b	nAb5
000A9698 E60F                       	smpsAlterVol        $0F
000A969A 08                         	dc.b	$08
000A969B E6F1                       	smpsAlterVol        $F1
000A969D C010                       	dc.b	nEb5, $10
000A969F E60F                       	smpsAlterVol        $0F
000A96A1 C0                         	dc.b	nEb5
000A96A2 E6F1                       	smpsAlterVol        $F1
000A96A4 C208                       	dc.b	nF5, $08
000A96A6 E1FF                       	smpsAlterNote       $FF
000A96A8 C410                       	dc.b	nG5, $10
000A96AA E100                       	smpsAlterNote       $00
000A96AC C5C7                       	dc.b	nAb5, nBb5
000A96AE E60F                       	smpsAlterVol        $0F
000A96B0 C7                         	dc.b	nBb5
000A96B1 E6F1                       	smpsAlterVol        $F1
000A96B3 C5                         	dc.b	nAb5
000A96B4 E60F                       	smpsAlterVol        $0F
000A96B6 08                         	dc.b	$08
000A96B7 E6F1                       	smpsAlterVol        $F1
000A96B9 E1FF                       	smpsAlterNote       $FF
000A96BB C410                       	dc.b	nG5, $10
000A96BD E60F                       	smpsAlterVol        $0F
000A96BF C4                         	dc.b	nG5
000A96C0 E6F1                       	smpsAlterVol        $F1
000A96C2 C4                         	dc.b	nG5
000A96C3 E100                       	smpsAlterNote       $00
000A96C5 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A96CA E60F                       	smpsAlterVol        $0F
000A96CC C2                         	dc.b	nF5
000A96CD E6F1                       	smpsAlterVol        $F1
000A96CF E1FF                       	smpsAlterNote       $FF
000A96D1 C4                         	dc.b	nG5
000A96D2 E60F                       	smpsAlterVol        $0F
000A96D4 08                         	dc.b	$08
000A96D5 E6F1                       	smpsAlterVol        $F1
000A96D7 10                         	dc.b	$10
000A96D8 E60F                       	smpsAlterVol        $0F
000A96DA 38                         	dc.b	$38
000A96DB E6F1                       	smpsAlterVol        $F1
000A96DD 10                         	dc.b	$10
000A96DE E60F                       	smpsAlterVol        $0F
000A96E0 C4                         	dc.b	nG5
000A96E1 E6F1                       	smpsAlterVol        $F1
000A96E3 E100                       	smpsAlterNote       $00
000A96E5 C2                         	dc.b	nF5
000A96E6 E60F                       	smpsAlterVol        $0F
000A96E8 08                         	dc.b	$08
000A96E9 E6F1                       	smpsAlterVol        $F1
000A96EB C010                       	dc.b	nEb5, $10
000A96ED E60F                       	smpsAlterVol        $0F
000A96EF C0                         	dc.b	nEb5
000A96F0 E6F1                       	smpsAlterVol        $F1
000A96F2 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A96F8 E60F                       	smpsAlterVol        $0F
000A96FA C9                         	dc.b	nC6
000A96FB E6F1                       	smpsAlterVol        $F1
000A96FD C5                         	dc.b	nAb5
000A96FE E60F                       	smpsAlterVol        $0F
000A9700 08                         	dc.b	$08
000A9701 E6F1                       	smpsAlterVol        $F1
000A9703 C010                       	dc.b	nEb5, $10
000A9705 E60F                       	smpsAlterVol        $0F
000A9707 C0                         	dc.b	nEb5
000A9708 E6F1                       	smpsAlterVol        $F1
000A970A C208                       	dc.b	nF5, $08
000A970C E1FF                       	smpsAlterNote       $FF
000A970E C410                       	dc.b	nG5, $10
000A9710 E100                       	smpsAlterNote       $00
000A9712 C5C7                       	dc.b	nAb5, nBb5
000A9714 E60F                       	smpsAlterVol        $0F
000A9716 C7                         	dc.b	nBb5
000A9717 E6F1                       	smpsAlterVol        $F1
000A9719 C5                         	dc.b	nAb5
000A971A E60F                       	smpsAlterVol        $0F
000A971C 08                         	dc.b	$08
000A971D E6F1                       	smpsAlterVol        $F1
000A971F E1FF                       	smpsAlterNote       $FF
000A9721 C410                       	dc.b	nG5, $10
000A9723 E60F                       	smpsAlterVol        $0F
000A9725 C4                         	dc.b	nG5
000A9726 E6F1                       	smpsAlterVol        $F1
000A9728 C4                         	dc.b	nG5
000A9729 E100                       	smpsAlterNote       $00
000A972B C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9730 E60F                       	smpsAlterVol        $0F
000A9732 28                         	dc.b	$28
000A9733 E6F1                       	smpsAlterVol        $F1
000A9735 C008 10                    	dc.b	nEb5, $08, $10
000A9738 E60F                       	smpsAlterVol        $0F
000A973A 21                         	dc.b	$21
000A973B E0C0                       	smpsPan             panCenter, $00
000A973D F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A9740                            
000A9740                            ; FM2 Data
000A9740                            GentleBreeze_FM2:
000A9742 E60C                       	smpsAlterVol        $0C
000A9744 E0C0                       	smpsPan             panCenter, $00
000A9746 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A9752 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A975E 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A976A 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A9776 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A9782 A039                       	dc.b	nG2, $39
000A9784                            
000A9784                            GentleBreeze_Jump04:
000A9784 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A9787                            
000A9787                            GentleBreeze_Loop11:
000A9787 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A9793 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A979F 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A97AB 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A97B7 A3                         	dc.b	nBb2
000A97B8 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A97BD 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A97C9 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A97D5 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A97E1 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A97ED 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A97F9 A039                       	dc.b	nG2, $39
000A97FB E0C0                       	smpsPan             panCenter, $00
000A97FD F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A9800                            
000A9800                            ; FM3 Data
000A9800                            GentleBreeze_FM3:
000A9802 E0C0                       	smpsPan             panCenter, $00
000A9804 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A980C E616                       	smpsAlterVol        $16
000A980E F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A9813                            
000A9813                            GentleBreeze_Loop0F:
000A9813 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A9817 E1FF                       	smpsAlterNote       $FF
000A9819 C4                         	dc.b	nG5
000A981A E100                       	smpsAlterNote       $00
000A981C C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9821 E608                       	smpsAlterVol        $08
000A9823 C080 08                    	dc.b	nEb5, nRst, $08
000A9826 E6F8                       	smpsAlterVol        $F8
000A9828 C7                         	dc.b	nBb5
000A9829 E1FF                       	smpsAlterNote       $FF
000A982B C4                         	dc.b	nG5
000A982C E100                       	smpsAlterNote       $00
000A982E C0BB                       	dc.b	nEb5, nBb4
000A9830 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A9835 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A9838 E1FF                       	smpsAlterNote       $FF
000A983A C4                         	dc.b	nG5
000A983B E100                       	smpsAlterNote       $00
000A983D C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9842 E608                       	smpsAlterVol        $08
000A9844 C080 08                    	dc.b	nEb5, nRst, $08
000A9847 E6F8                       	smpsAlterVol        $F8
000A9849 E1FF                       	smpsAlterNote       $FF
000A984B C4                         	dc.b	nG5
000A984C E100                       	smpsAlterNote       $00
000A984E C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A9855 E1FF                       	smpsAlterNote       $FF
000A9857 C4                         	dc.b	nG5
000A9858 E100                       	smpsAlterNote       $00
000A985A C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A985F E1FF                       	smpsAlterNote       $FF
000A9861 C4                         	dc.b	nG5
000A9862 E100                       	smpsAlterNote       $00
000A9864 C7                         	dc.b	nBb5
000A9865 E1FF                       	smpsAlterNote       $FF
000A9867 C4                         	dc.b	nG5
000A9868 E100                       	smpsAlterNote       $00
000A986A C2C0 01                    	dc.b	nF5, nEb5, $01
000A986D                            
000A986D                            GentleBreeze_Jump03:
000A986D E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A9874 E6FA                       	smpsAlterVol        $FA
000A9876 F4                         	smpsModOff
000A9877 E1FF                       	smpsAlterNote       $FF
000A9879 B850                       	dc.b	nG4, $50
000A987B E100                       	smpsAlterNote       $00
000A987D B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A9889 E1FF                       	smpsAlterNote       $FF
000A988B B810                       	dc.b	nG4, $10
000A988D E100                       	smpsAlterNote       $00
000A988F BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A9894 E1FF                       	smpsAlterNote       $FF
000A9896 B8                         	dc.b	nG4
000A9897 E100                       	smpsAlterNote       $00
000A9899 B610                       	dc.b	nF4, $10
000A989B E1FF                       	smpsAlterNote       $FF
000A989D B850                       	dc.b	nG4, $50
000A989F E100                       	smpsAlterNote       $00
000A98A1 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A98A9 E1FF                       	smpsAlterNote       $FF
000A98AB AC08                       	dc.b	nG3, $08
000A98AD E100                       	smpsAlterNote       $00
000A98AF AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A98B4 E1FF                       	smpsAlterNote       $FF
000A98B6 B850                       	dc.b	nG4, $50
000A98B8 E100                       	smpsAlterNote       $00
000A98BA BB08                       	dc.b	nBb4, $08
000A98BC E1FF                       	smpsAlterNote       $FF
000A98BE B8                         	dc.b	nG4
000A98BF E100                       	smpsAlterNote       $00
000A98C1 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A98C4 E1FF                       	smpsAlterNote       $FF
000A98C6 B810 08                    	dc.b	nG4, $10, $08
000A98C9 E100                       	smpsAlterNote       $00
000A98CB B6                         	dc.b	nF4
000A98CC E1FF                       	smpsAlterNote       $FF
000A98CE B880                       	dc.b	nG4, nRst
000A98D0 E100                       	smpsAlterNote       $00
000A98D2 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A98D5 E1FF                       	smpsAlterNote       $FF
000A98D7 B810                       	dc.b	nG4, $10
000A98D9 E100                       	smpsAlterNote       $00
000A98DB B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A98E2 E1FF                       	smpsAlterNote       $FF
000A98E4 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A98F2 E606                       	smpsAlterVol        $06
000A98F4 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A98F9 E100                       	smpsAlterNote       $00
000A98FB                            
000A98FB                            GentleBreeze_Loop10:
000A98FB C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A98FF E1FF                       	smpsAlterNote       $FF
000A9901 C4                         	dc.b	nG5
000A9902 E100                       	smpsAlterNote       $00
000A9904 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9909 E608                       	smpsAlterVol        $08
000A990B C080 08                    	dc.b	nEb5, nRst, $08
000A990E E6F8                       	smpsAlterVol        $F8
000A9910 C7                         	dc.b	nBb5
000A9911 E1FF                       	smpsAlterNote       $FF
000A9913 C4                         	dc.b	nG5
000A9914 E100                       	smpsAlterNote       $00
000A9916 C0BB                       	dc.b	nEb5, nBb4
000A9918 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A991D C0BD C9                    	dc.b	nEb5, nC5, nC6
000A9920 E1FF                       	smpsAlterNote       $FF
000A9922 C4                         	dc.b	nG5
000A9923 E100                       	smpsAlterNote       $00
000A9925 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A992A E608                       	smpsAlterVol        $08
000A992C C080 08                    	dc.b	nEb5, nRst, $08
000A992F E6F8                       	smpsAlterVol        $F8
000A9931 E1FF                       	smpsAlterNote       $FF
000A9933 C4                         	dc.b	nG5
000A9934 E100                       	smpsAlterNote       $00
000A9936 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A993D E1FF                       	smpsAlterNote       $FF
000A993F C4                         	dc.b	nG5
000A9940 E100                       	smpsAlterNote       $00
000A9942 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A9947 E1FF                       	smpsAlterNote       $FF
000A9949 C4                         	dc.b	nG5
000A994A E100                       	smpsAlterNote       $00
000A994C C7                         	dc.b	nBb5
000A994D E1FF                       	smpsAlterNote       $FF
000A994F C4                         	dc.b	nG5
000A9950 E100                       	smpsAlterNote       $00
000A9952 C2C0 01                    	dc.b	nF5, nEb5, $01
000A9955 E0C0                       	smpsPan             panCenter, $00
000A9957 F1                         	smpsModOn
000A9958 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A995B                            
000A995B                            ; FM4 Data
000A995B                            GentleBreeze_FM4:
000A995D E0C0                       	smpsPan             panCenter, $00
000A995F 80                         	dc.b	nRst
000A9960                            
000A9960                            GentleBreeze_Loop0D:
000A9960 7F                         	dc.b	$7F
000A9961 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A9966 77                         	dc.b	$77
000A9969 E609                       	smpsAlterVol        $09
000A996B C001                       	dc.b	nEb5, $01
000A996D                            
000A996D                            GentleBreeze_Jump02:
000A996D E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A9972 E607                       	smpsAlterVol        $07
000A9974 E1FF                       	smpsAlterNote       $FF
000A9976 C450                       	dc.b	nG5, $50
000A9978 E100                       	smpsAlterNote       $00
000A997A C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A9986 E1FF                       	smpsAlterNote       $FF
000A9988 C410                       	dc.b	nG5, $10
000A998A E100                       	smpsAlterNote       $00
000A998C C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A9991 E1FF                       	smpsAlterNote       $FF
000A9993 C4                         	dc.b	nG5
000A9994 E100                       	smpsAlterNote       $00
000A9996 C210                       	dc.b	nF5, $10
000A9998 E1FF                       	smpsAlterNote       $FF
000A999A C450                       	dc.b	nG5, $50
000A999C E100                       	smpsAlterNote       $00
000A999E C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A99A6 E1FF                       	smpsAlterNote       $FF
000A99A8 B808                       	dc.b	nG4, $08
000A99AA E100                       	smpsAlterNote       $00
000A99AC BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A99B1 E1FF                       	smpsAlterNote       $FF
000A99B3 C450                       	dc.b	nG5, $50
000A99B5 E100                       	smpsAlterNote       $00
000A99B7 C708                       	dc.b	nBb5, $08
000A99B9 E1FF                       	smpsAlterNote       $FF
000A99BB C4                         	dc.b	nG5
000A99BC E100                       	smpsAlterNote       $00
000A99BE C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A99C1 E1FF                       	smpsAlterNote       $FF
000A99C3 C410 08                    	dc.b	nG5, $10, $08
000A99C6 E100                       	smpsAlterNote       $00
000A99C8 C2                         	dc.b	nF5
000A99C9 E1FF                       	smpsAlterNote       $FF
000A99CB C480                       	dc.b	nG5, nRst
000A99CD E100                       	smpsAlterNote       $00
000A99CF C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A99D2 E1FF                       	smpsAlterNote       $FF
000A99D4 C410                       	dc.b	nG5, $10
000A99D6 E100                       	smpsAlterNote       $00
000A99D8 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A99DF E1FF                       	smpsAlterNote       $FF
000A99E1 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A99E9                            
000A99E9                            GentleBreeze_Loop0E:
000A99E9 7F                         	dc.b	$7F
000A99EA F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A99EF 77                         	dc.b	$77
000A99F0 E100                       	smpsAlterNote       $00
000A99F2 C001                       	dc.b	nEb5, $01
000A99F4 E6F9                       	smpsAlterVol        $F9
000A99F6 E0C0                       	smpsPan             panCenter, $00
000A99F8 E100                       	smpsAlterNote       $00
000A99FA F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A99FD                            
000A99FD                            ; FM5 Data
000A99FD                            GentleBreeze_FM5:
000A99FF E0C0                       	smpsPan             panCenter, $00
000A9A01 A5                         	dc.b	nC3
000A9A02                            
000A9A02                            GentleBreeze_Loop06:
000A9A02 10                         	dc.b	$10
000A9A03 E607                       	smpsAlterVol        $07
000A9A05 A5                         	dc.b	nC3
000A9A06 E6F9                       	smpsAlterVol        $F9
000A9A08 08                         	dc.b	$08
000A9A09 E607                       	smpsAlterVol        $07
000A9A0B A5                         	dc.b	nC3
000A9A0C E608                       	smpsAlterVol        $08
000A9A0E A5                         	dc.b	nC3
000A9A0F E6F1                       	smpsAlterVol        $F1
000A9A11 18                         	dc.b	$18
000A9A12 E607                       	smpsAlterVol        $07
000A9A14 10                         	dc.b	$10
000A9A15 E608                       	smpsAlterVol        $08
000A9A17 A5                         	dc.b	nC3
000A9A18 E6F1                       	smpsAlterVol        $F1
000A9A1A A5                         	dc.b	nC3
000A9A1B F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A9A20 A5                         	dc.b	nC3
000A9A21                            
000A9A21                            GentleBreeze_Loop07:
000A9A21 E607                       	smpsAlterVol        $07
000A9A23 A5                         	dc.b	nC3
000A9A24 E6F9                       	smpsAlterVol        $F9
000A9A26 08                         	dc.b	$08
000A9A27 E607                       	smpsAlterVol        $07
000A9A29 A5                         	dc.b	nC3
000A9A2A E608                       	smpsAlterVol        $08
000A9A2C A5                         	dc.b	nC3
000A9A2D E6F1                       	smpsAlterVol        $F1
000A9A2F 10                         	dc.b	$10
000A9A30 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A9A35                            
000A9A35                            GentleBreeze_Loop08:
000A9A35 A5                         	dc.b	nC3
000A9A36 E607                       	smpsAlterVol        $07
000A9A38 A5                         	dc.b	nC3
000A9A39 E6F9                       	smpsAlterVol        $F9
000A9A3B 08                         	dc.b	$08
000A9A3C E607                       	smpsAlterVol        $07
000A9A3E A5                         	dc.b	nC3
000A9A3F E608                       	smpsAlterVol        $08
000A9A41 A5                         	dc.b	nC3
000A9A42 E6F1                       	smpsAlterVol        $F1
000A9A44 18                         	dc.b	$18
000A9A45 E607                       	smpsAlterVol        $07
000A9A47 10                         	dc.b	$10
000A9A48 E608                       	smpsAlterVol        $08
000A9A4A A5                         	dc.b	nC3
000A9A4B E6F1                       	smpsAlterVol        $F1
000A9A4D A5                         	dc.b	nC3
000A9A4E F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A9A53 A5                         	dc.b	nC3
000A9A54 E607                       	smpsAlterVol        $07
000A9A56 A5                         	dc.b	nC3
000A9A57 E6F9                       	smpsAlterVol        $F9
000A9A59 08                         	dc.b	$08
000A9A5A E607                       	smpsAlterVol        $07
000A9A5C A5                         	dc.b	nC3
000A9A5D E608                       	smpsAlterVol        $08
000A9A5F A5                         	dc.b	nC3
000A9A60 E6F1                       	smpsAlterVol        $F1
000A9A62 10                         	dc.b	$10
000A9A63 E607                       	smpsAlterVol        $07
000A9A65 A5                         	dc.b	nC3
000A9A66 E6F9                       	smpsAlterVol        $F9
000A9A68 08                         	dc.b	$08
000A9A69 E607                       	smpsAlterVol        $07
000A9A6B A5                         	dc.b	nC3
000A9A6C E608                       	smpsAlterVol        $08
000A9A6E A5                         	dc.b	nC3
000A9A6F E6F1                       	smpsAlterVol        $F1
000A9A71 01                         	dc.b	$01
000A9A72                            
000A9A72                            GentleBreeze_Jump01:
000A9A72 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A9A75 E607                       	smpsAlterVol        $07
000A9A77                            
000A9A77                            GentleBreeze_Loop09:
000A9A77 10                         	dc.b	$10
000A9A78 E608                       	smpsAlterVol        $08
000A9A7A A5                         	dc.b	nC3
000A9A7B E6F1                       	smpsAlterVol        $F1
000A9A7D 08                         	dc.b	$08
000A9A7E E60F                       	smpsAlterVol        $0F
000A9A80 18                         	dc.b	$18
000A9A81 E6F8                       	smpsAlterVol        $F8
000A9A83 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A9A88 10                         	dc.b	$10
000A9A89 E608                       	smpsAlterVol        $08
000A9A8B A5                         	dc.b	nC3
000A9A8C E6F1                       	smpsAlterVol        $F1
000A9A8E 08                         	dc.b	$08
000A9A8F E60F                       	smpsAlterVol        $0F
000A9A91 18                         	dc.b	$18
000A9A92 E6F1                       	smpsAlterVol        $F1
000A9A94                            
000A9A94                            GentleBreeze_Loop0A:
000A9A94 10                         	dc.b	$10
000A9A95 E607                       	smpsAlterVol        $07
000A9A97 A5                         	dc.b	nC3
000A9A98 E6F9                       	smpsAlterVol        $F9
000A9A9A 08                         	dc.b	$08
000A9A9B E607                       	smpsAlterVol        $07
000A9A9D A5                         	dc.b	nC3
000A9A9E E608                       	smpsAlterVol        $08
000A9AA0 A5                         	dc.b	nC3
000A9AA1 E6F1                       	smpsAlterVol        $F1
000A9AA3 18                         	dc.b	$18
000A9AA4 E607                       	smpsAlterVol        $07
000A9AA6 10                         	dc.b	$10
000A9AA7 E608                       	smpsAlterVol        $08
000A9AA9 A5                         	dc.b	nC3
000A9AAA E6F1                       	smpsAlterVol        $F1
000A9AAC A5                         	dc.b	nC3
000A9AAD F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A9AB2 A5                         	dc.b	nC3
000A9AB3                            
000A9AB3                            GentleBreeze_Loop0B:
000A9AB3 E607                       	smpsAlterVol        $07
000A9AB5 A5                         	dc.b	nC3
000A9AB6 E6F9                       	smpsAlterVol        $F9
000A9AB8 08                         	dc.b	$08
000A9AB9 E607                       	smpsAlterVol        $07
000A9ABB A5                         	dc.b	nC3
000A9ABC E608                       	smpsAlterVol        $08
000A9ABE A5                         	dc.b	nC3
000A9ABF E6F1                       	smpsAlterVol        $F1
000A9AC1 10                         	dc.b	$10
000A9AC2 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A9AC7                            
000A9AC7                            GentleBreeze_Loop0C:
000A9AC7 A5                         	dc.b	nC3
000A9AC8 E607                       	smpsAlterVol        $07
000A9ACA A5                         	dc.b	nC3
000A9ACB E6F9                       	smpsAlterVol        $F9
000A9ACD 08                         	dc.b	$08
000A9ACE E607                       	smpsAlterVol        $07
000A9AD0 A5                         	dc.b	nC3
000A9AD1 E608                       	smpsAlterVol        $08
000A9AD3 A5                         	dc.b	nC3
000A9AD4 E6F1                       	smpsAlterVol        $F1
000A9AD6 18                         	dc.b	$18
000A9AD7 E607                       	smpsAlterVol        $07
000A9AD9 10                         	dc.b	$10
000A9ADA E608                       	smpsAlterVol        $08
000A9ADC A5                         	dc.b	nC3
000A9ADD E6F1                       	smpsAlterVol        $F1
000A9ADF A5                         	dc.b	nC3
000A9AE0 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A9AE5 A5                         	dc.b	nC3
000A9AE6 E607                       	smpsAlterVol        $07
000A9AE8 A5                         	dc.b	nC3
000A9AE9 E6F9                       	smpsAlterVol        $F9
000A9AEB 08                         	dc.b	$08
000A9AEC E607                       	smpsAlterVol        $07
000A9AEE A5                         	dc.b	nC3
000A9AEF E608                       	smpsAlterVol        $08
000A9AF1 A5                         	dc.b	nC3
000A9AF2 E6F1                       	smpsAlterVol        $F1
000A9AF4 10                         	dc.b	$10
000A9AF5 E607                       	smpsAlterVol        $07
000A9AF7 A5                         	dc.b	nC3
000A9AF8 E6F9                       	smpsAlterVol        $F9
000A9AFA 08                         	dc.b	$08
000A9AFB E607                       	smpsAlterVol        $07
000A9AFD A5                         	dc.b	nC3
000A9AFE E608                       	smpsAlterVol        $08
000A9B00 A5                         	dc.b	nC3
000A9B01 E6F1                       	smpsAlterVol        $F1
000A9B03 01                         	dc.b	$01
000A9B04 E0C0                       	smpsPan             panCenter, $00
000A9B06 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A9B09                            
000A9B09                            ; DAC Data
000A9B09                            GentleBreeze_DAC:
000A9B09 81                         	dc.b	dKick
000A9B0A                            
000A9B0A                            GentleBreeze_Loop00:
000A9B0A 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9B10 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A9B15 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A9B20                            
000A9B20                            GentleBreeze_Loop01:
000A9B20 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9B26 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A9B2B 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A9B35                            
000A9B35                            GentleBreeze_Jump00:
000A9B35 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A9B39                            
000A9B39                            GentleBreeze_Loop02:
000A9B39 81                         	dc.b	dKick
000A9B3A                            
000A9B3A                            GentleBreeze_Loop03:
000A9B3A 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A9B46 088A                       	dc.b	$08, dLowTimpani
000A9B48 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A9B4D 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A9B59 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A9B5E F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A9B63                            
000A9B63                            GentleBreeze_Loop04:
000A9B63 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9B69 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A9B6E 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A9B79                            
000A9B79                            GentleBreeze_Loop05:
000A9B79 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9B7F F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A9B84 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A9B8E F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A9B91                            
000A9B91                            ; PSG 1 Data
000A9B91                            GentleBreeze_PSG1:
000A9B91 80                         	dc.b	nRst
000A9B92                            
000A9B92                            GentleBreeze_LoopPSG02:
000A9B92 7F                         	dc.b	$7F
000A9B93 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A9B98 08                         	dc.b	$08
000A9B99 EC04                       	smpsPSGAlterVol     $04
000A9B9B                            
000A9B9B                            GentleBreeze_JumpPSG01:
000A9B9B A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A9BA7 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A9BAF                            
000A9BAF                            GentleBreeze_LoopPSG03:
000A9BAF 7F                         	dc.b	$7F
000A9BB0 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A9BB5 08A3 01                    	dc.b	$08, nBb2, $01
000A9BB8 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A9BBB                            
000A9BBB                            ; PSG2 Data
000A9BBB                            GentleBreeze_PSG2:
000A9BBB 80                         	dc.b	nRst
000A9BBC                            
000A9BBC                            GentleBreeze_LoopPSG00:
000A9BBC 7F                         	dc.b	$7F
000A9BBD F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A9BC2 08                         	dc.b	$08
000A9BC3 EC04                       	smpsPSGAlterVol     $04
000A9BC5                            
000A9BC5                            GentleBreeze_JumpPSG00:
000A9BC5 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A9BD1 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A9BD9                            
000A9BD9                            GentleBreeze_LoopPSG01:
000A9BD9 7F                         	dc.b	$7F
000A9BDA F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A9BDF 08A8 01                    	dc.b	$08, nEb3, $01
000A9BE2 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A9BE5                            
000A9BE5                            GentleBreeze_Voices:
000A9BE5                            ;	Voice $00
000A9BE5                            ;	$0C
000A9BE5                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A9BE5                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A9BE5                            	smpsVcAlgorithm     $04
000A9BE5                            	smpsVcFeedback      $01
000A9BE5                            	smpsVcUnusedBits    $00
000A9BE5                            	smpsVcDetune        $07, $02, $07, $02
000A9BE5                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A9BE5                            	smpsVcRateScale     $00, $00, $00, $00
000A9BE5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9BE5                            	smpsVcAmpMod        $00, $00, $00, $00
000A9BE5                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A9BE5                            	smpsVcDecayRate2    $01, $00, $00, $00
000A9BE5                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A9BE5                            	smpsVcReleaseRate   $09, $01, $04, $03
000A9BE5 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A9BFE                            
000A9BFE                            ;	Voice $01
000A9BFE                            ;	$38
000A9BFE                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A9BFE                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A9BFE                            	smpsVcAlgorithm     $00
000A9BFE                            	smpsVcFeedback      $07
000A9BFE                            	smpsVcUnusedBits    $00
000A9BFE                            	smpsVcDetune        $03, $07, $01, $05
000A9BFE                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A9BFE                            	smpsVcRateScale     $00, $02, $00, $02
000A9BFE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9BFE                            	smpsVcAmpMod        $00, $00, $00, $00
000A9BFE                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A9BFE                            	smpsVcDecayRate2    $00, $00, $10, $00
000A9BFE                            	smpsVcDecayLevel    $00, $00, $00, $00
000A9BFE                            	smpsVcReleaseRate   $08, $05, $05, $05
000A9BFE 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A9C17                            
000A9C17                            ;	Voice $02
000A9C17                            ;	$00
000A9C17                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A9C17                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A9C17                            	smpsVcAlgorithm     $00
000A9C17                            	smpsVcFeedback      $00
000A9C17                            	smpsVcUnusedBits    $00
000A9C17                            	smpsVcDetune        $00, $00, $00, $00
000A9C17                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A9C17                            	smpsVcRateScale     $00, $00, $00, $00
000A9C17                            	smpsVcAttackRate    $00, $00, $00, $00
000A9C17                            	smpsVcAmpMod        $00, $00, $00, $00
000A9C17                            	smpsVcDecayRate1    $00, $00, $00, $00
000A9C17                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9C17                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A9C17                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9C17 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9C30                            
000A9C30                            ;	Voice $03
000A9C30                            ;	$36
000A9C30                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A9C30                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A9C30                            	smpsVcAlgorithm     $06
000A9C30                            	smpsVcFeedback      $06
000A9C30                            	smpsVcUnusedBits    $00
000A9C30                            	smpsVcDetune        $00, $00, $00, $00
000A9C30                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A9C30                            	smpsVcRateScale     $00, $00, $00, $00
000A9C30                            	smpsVcAttackRate    $1F, $00, $18, $16
000A9C30                            	smpsVcAmpMod        $00, $00, $00, $00
000A9C30                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A9C30                            	smpsVcDecayRate2    $00, $00, $12, $00
000A9C30                            	smpsVcDecayLevel    $04, $04, $02, $00
000A9C30                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A9C30 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A9C49                            
000A9C49                            ;	Voice $04
000A9C49                            ;	$07
000A9C49                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A9C49                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A9C49                            	smpsVcAlgorithm     $07
000A9C49                            	smpsVcFeedback      $00
000A9C49                            	smpsVcUnusedBits    $00
000A9C49                            	smpsVcDetune        $07, $06, $05, $00
000A9C49                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A9C49                            	smpsVcRateScale     $00, $01, $01, $01
000A9C49                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A9C49                            	smpsVcAmpMod        $00, $00, $00, $00
000A9C49                            	smpsVcDecayRate1    $17, $17, $17, $17
000A9C49                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9C49                            	smpsVcDecayLevel    $02, $02, $02, $02
000A9C49                            	smpsVcReleaseRate   $06, $06, $06, $06
000A9C49 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9C62                            
000A9C62                            ;	Voice $05
000A9C62                            ;	$3C
000A9C62                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A9C62                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A9C62                            	smpsVcAlgorithm     $04
000A9C62                            	smpsVcFeedback      $07
000A9C62                            	smpsVcUnusedBits    $00
000A9C62                            	smpsVcDetune        $06, $06, $02, $02
000A9C62                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A9C62                            	smpsVcRateScale     $00, $00, $00, $00
000A9C62                            	smpsVcAttackRate    $0E, $14, $10, $13
000A9C62                            	smpsVcAmpMod        $00, $00, $00, $00
000A9C62                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A9C62                            	smpsVcDecayRate2    $04, $04, $04, $04
000A9C62                            	smpsVcDecayLevel    $02, $01, $01, $01
000A9C62                            	smpsVcReleaseRate   $07, $07, $07, $07
000A9C62 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A9C7B                            
000A9C7B                            
000A9C7C 00                         		even
000A9C7C                            ; ---------------------------------------------------------------------------
000A9C7C                            ; Sound	effect pointers
000A9C7C                            ; ---------------------------------------------------------------------------
000A9C7C 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A9C88 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A9C94 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A9CA0 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A9CAC 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A9CB8 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A9CC4 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A9CD0 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A9CDC 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A9CE8 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A9CF4 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A9D00 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A9D0C 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A9D18 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A9D24 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A9D30 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A9D3C 0000 0000                  SoundD0Index:	dc.l SoundD0
000A9D40                            SoundA0:	include	sound\jump.asm
000A9D40                            jump_Header:
000A9D40 =00000001                  smpsHeaderStartSong = 1
000A9D40 0000                       	smpsHeaderVoice     jump_Voices
000A9D42 01                         	smpsHeaderTempoSFX  $01
000A9D43 01                         	smpsHeaderChanSFX   $01
000A9D44                            
000A9D50                            
000A9D50                            ; FM4 Data
000A9D50                            jump_FM4:
000A9D52 E000                       	smpsPan             panNone, $00
000A9D54 E607                       	smpsAlterVol        $07
000A9D56 E0C0                       	smpsPan             panCenter, $00
000A9D58 9903 B1                    	dc.b	nC2, $03, nC4
000A9D5B E607                       	smpsAlterVol        $07
000A9D5D E040                       	smpsPan             panRight, $00
000A9D5F 99B1                       	dc.b	nC2, nC4
000A9D61 E60A                       	smpsAlterVol        $0A
000A9D63 E080                       	smpsPan             panLeft, $00
000A9D65 99B1                       	dc.b	nC2, nC4
000A9D67 E603                       	smpsAlterVol        $03
000A9D69 E0C0                       	smpsPan             panCenter, $00
000A9D6B 99B1                       	dc.b	nC2, nC4
000A9D6D E000                       	smpsPan             panNone, $00
000A9D6F 803D                       	dc.b	nRst, $3D
000A9D71 F2                         	smpsStop
000A9D72                            
000A9D72                            ; PSG3 Data
000A9D72                            jump_PSG3:
000A9D72 F3E7                       	smpsPSGform         $E7
000A9D74 8056                       	dc.b	nRst, $56
000A9D76 F2                         	smpsStop
000A9D77                            
000A9D77                            jump_Voices:
000A9D77                            ;	Voice $00
000A9D77                            ;	$3C
000A9D77                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A9D77                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A9D77                            	smpsVcAlgorithm     $04
000A9D77                            	smpsVcFeedback      $07
000A9D77                            	smpsVcUnusedBits    $00
000A9D77                            	smpsVcDetune        $00, $00, $00, $00
000A9D77                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A9D77                            	smpsVcRateScale     $00, $00, $00, $00
000A9D77                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9D77                            	smpsVcAmpMod        $00, $00, $00, $00
000A9D77                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A9D77                            	smpsVcDecayRate2    $11, $00, $11, $00
000A9D77                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A9D77                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9D77 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9D90                            
000A9D90                            
000A9D90                            		even
000A9D90                            SoundA1:	incbin	sound\soundA1.bin
000A9DBA                            		even
000A9DBA                            SoundA2:	incbin	sound\soundA2.bin
000A9DDA                            		even
000A9DDA                            SoundA3:	incbin	sound\soundA3.bin
000A9E0C                            		even
000A9E0C                            SoundA4:	incbin	sound\soundA4.bin
000A9E42                            		even
000A9E42                            SoundA5:	include	sound\fart.asm
000A9E42                            Fart_Header:
000A9E42 =00000001                  smpsHeaderStartSong = 1
000A9E42 0000                       	smpsHeaderVoice     Fart_Voices
000A9E44 01                         	smpsHeaderTempoSFX  $01
000A9E45 04                         	smpsHeaderChanSFX   $04
000A9E46                            
000A9E5E                            
000A9E5E                            Fart_FM3:
000A9E60 E607                       	smpsAlterVol        $07
000A9E62 E0C0                       	smpsPan             panCenter, $00
000A9E64 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9E69 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A9E6C E1FE                       	smpsAlterNote       $FE
000A9E6E A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A9E71 E100                       	smpsAlterNote       $00
000A9E73 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A9E78 F2                         	smpsStop
000A9E79                            
000A9E79                            ; FM4 Data
000A9E79                            Fart_FM4:
000A9E7B E0C0                       	smpsPan             panCenter, $00
000A9E7D 8006                       	dc.b	nRst, $06
000A9E81 E616                       	smpsAlterVol        $16
000A9E83 E080                       	smpsPan             panLeft, $00
000A9E85 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9E8A A212                       	dc.b	nA2, $12
000A9E8C E60A                       	smpsAlterVol        $0A
000A9E8E E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9E91 E603                       	smpsAlterVol        $03
000A9E93 E7A2                       	dc.b	smpsNoAttack, nA2
000A9E95 E603                       	smpsAlterVol        $03
000A9E97 E7A2                       	dc.b	smpsNoAttack, nA2
000A9E99 E604                       	smpsAlterVol        $04
000A9E9B E7A2                       	dc.b	smpsNoAttack, nA2
000A9E9D E606                       	smpsAlterVol        $06
000A9E9F E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A9EA2 E610                       	smpsAlterVol        $10
000A9EA4 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9EA7 E610                       	smpsAlterVol        $10
000A9EA9 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A9EAE F2                         	smpsStop
000A9EAF                            
000A9EAF                            ; FM5 Data
000A9EAF                            Fart_FM5:
000A9EB1 E0C0                       	smpsPan             panCenter, $00
000A9EB3 8009                       	dc.b	nRst, $09
000A9EB7 E616                       	smpsAlterVol        $16
000A9EB9 E040                       	smpsPan             panRight, $00
000A9EBB F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9EC0 A215                       	dc.b	nA2, $15
000A9EC2 E60A                       	smpsAlterVol        $0A
000A9EC4 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9EC7 E603                       	smpsAlterVol        $03
000A9EC9 E7A2                       	dc.b	smpsNoAttack, nA2
000A9ECB E603                       	smpsAlterVol        $03
000A9ECD E7A2                       	dc.b	smpsNoAttack, nA2
000A9ECF E604                       	smpsAlterVol        $04
000A9ED1 E7A2                       	dc.b	smpsNoAttack, nA2
000A9ED3 E606                       	smpsAlterVol        $06
000A9ED5 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A9ED8 E610                       	smpsAlterVol        $10
000A9EDA E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9EDD E610                       	smpsAlterVol        $10
000A9EDF E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A9EE4 F2                         	smpsStop
000A9EE5                            
000A9EE5                            ; PSG3 Data
000A9EE5                            Fart_PSG3:
000A9EE5 F2                         	smpsStop
000A9EE6                            
000A9EE6                            ; FM Voices
000A9EE6                            Fart_Voices:
000A9EE6                            ;	Voice $00
000A9EE6                            ;	$39
000A9EE6                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A9EE6                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A9EE6                            	smpsVcAlgorithm     $01
000A9EE6                            	smpsVcFeedback      $07
000A9EE6                            	smpsVcUnusedBits    $00
000A9EE6                            	smpsVcDetune        $00, $07, $03, $07
000A9EE6                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A9EE6                            	smpsVcRateScale     $00, $03, $03, $03
000A9EE6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9EE6                            	smpsVcAmpMod        $00, $00, $00, $00
000A9EE6                            	smpsVcDecayRate1    $00, $00, $00, $04
000A9EE6                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A9EE6                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A9EE6                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A9EE6 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A9EFF                            
000A9EFF                            ;	Voice $01
000A9EFF                            ;	$00
000A9EFF                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A9EFF                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A9EFF                            	smpsVcAlgorithm     $00
000A9EFF                            	smpsVcFeedback      $00
000A9EFF                            	smpsVcUnusedBits    $00
000A9EFF                            	smpsVcDetune        $00, $00, $00, $00
000A9EFF                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A9EFF                            	smpsVcRateScale     $00, $00, $00, $00
000A9EFF                            	smpsVcAttackRate    $00, $00, $00, $00
000A9EFF                            	smpsVcAmpMod        $00, $00, $00, $00
000A9EFF                            	smpsVcDecayRate1    $00, $00, $00, $00
000A9EFF                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9EFF                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A9EFF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9EFF 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9EFF 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9F18                            		even
000A9F18                            SoundA6:	incbin	sound\soundA6.bin
000A9F48                            		even
000A9F48                            SoundA7:	incbin	sound\soundA7.bin
000A9F78                            		even
000A9F78                            SoundA8:	incbin	sound\soundA8.bin
000A9FAC                            		even
000A9FAC                            SoundA9:	incbin	sound\soundA9.bin
000A9FBE                            		even
000A9FBE                            SoundAA:	incbin	sound\soundAA.bin
000AA000                            		even
000AA000                            SoundAB:	incbin	sound\soundAB.bin
000AA020                            		even
000AA020                            SoundAC:	incbin	sound\soundAC.bin
000AA054                            		even
000AA054                            SoundAD:	incbin	sound\soundAD.bin
000AA08A                            		even
000AA08A                            SoundAE:	incbin	sound\soundAE.bin
000AA0D4                            		even
000AA0D4                            SoundAF:	incbin	sound\soundAF.bin
000AA102                            		even
000AA102                            SoundB0:	incbin	sound\soundB0.bin
000AA134                            		even
000AA134                            SoundB1:	incbin	sound\soundB1.bin
000AA160                            		even
000AA160                            SoundB2:	incbin	sound\soundB2.bin
000AA1B0                            		even
000AA1B0                            SoundB3:	incbin	sound\soundB3.bin
000AA1FA                            		even
000AA1FA                            SoundB4:	include	sound\soundB4.asm
000AA1FA                            SndB4_Bumper_Header:
000AA1FA =00000001                  smpsHeaderStartSong = 1
000AA1FA 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000AA1FC 01                         	smpsHeaderTempoSFX  $01
000AA1FD 03                         	smpsHeaderChanSFX   $03
000AA1FE                            
000AA210                            
000AA210                            ; FM5 Data
000AA210                            SndB4_Bumper_FM5:
000AA212 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000AA215                            
000AA215                            ; FM4 Data
000AA215                            SndB4_Bumper_FM4:
000AA215 F2                         	smpsStop
000AA216                            
000AA216                            SndB4_Bumper_Jump00:
000AA216 A020                       	dc.b	nG2, $20
000AA218 F2                         	smpsStop
000AA219                            
000AA219                            ; FM3 Data
000AA219                            SndB4_Bumper_FM3:
000AA219 F2                         	smpsStop
000AA21A                            
000AA21A                            SndB4_Bumper_Voices:
000AA21A                            ;	Voice $00
000AA21A                            ;	$32
000AA21A                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000AA21A                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000AA21A                            	smpsVcAlgorithm     $02
000AA21A                            	smpsVcFeedback      $06
000AA21A                            	smpsVcUnusedBits    $00
000AA21A                            	smpsVcDetune        $07, $07, $02, $00
000AA21A                            	smpsVcCoarseFreq    $00, $00, $00, $04
000AA21A                            	smpsVcRateScale     $00, $00, $00, $00
000AA21A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA21A                            	smpsVcAmpMod        $00, $00, $00, $00
000AA21A                            	smpsVcDecayRate1    $08, $00, $00, $09
000AA21A                            	smpsVcDecayRate2    $0B, $00, $00, $09
000AA21A                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA21A                            	smpsVcReleaseRate   $0F, $00, $00, $00
000AA21A 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA21A 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA234 00                         		even
000AA234                            SoundB5:	incbin	sound\soundB5.bin
000AA252 00                         		even
000AA252                            SoundB6:	incbin	sound\soundB6.bin
000AA270                            		even
000AA270                            SoundB7:	incbin	sound\soundB7.bin
000AA2AC                            		even
000AA2AC                            SoundB8:	incbin	sound\soundB8.bin
000AA2CA                            		even
000AA2CA                            SoundB9:	incbin	sound\soundB9.bin
000AA32E                            		even
000AA32E                            SoundBA:	incbin	sound\soundBA.bin
000AA392                            		even
000AA392                            SoundBB:	incbin	sound\soundBB.bin
000AA3BE                            		even
000AA3BE                            SoundBC:	incbin	sound\soundBC.bin
000AA400                            		even
000AA400                            SoundBD:	incbin	sound\soundBD.bin
000AA454                            		even
000AA454                            SoundBE:	incbin	sound\soundBE.bin
000AA48E                            		even
000AA48E                            SoundBF:	incbin	sound\soundBF.bin
000AA500                            		even
000AA500                            SoundC0:	incbin	sound\soundC0.bin
000AA52E                            		even
000AA52E                            SoundC1:	incbin	sound\soundC1.bin
000AA588                            		even
000AA588                            SoundC2:	incbin	sound\soundC2.bin
000AA5B2                            		even
000AA5B2                            SoundC3:	incbin	sound\soundC3.bin
000AA62C                            		even
000AA62C                            SoundC4:	incbin	sound\soundC4.bin
000AA72A                            		even
000AA72A                            SoundC5:	incbin	sound\soundC5.bin
000AA792                            		even
000AA792                            SoundC6:	incbin	sound\soundC6.bin
000AA7D4                            		even
000AA7D4                            SoundC7:	incbin	sound\soundC7.bin
000AA802                            		even
000AA802                            SoundC8:	incbin	sound\soundC8.bin
000AA814                            		even
000AA814                            SoundC9:	incbin	sound\soundC9.bin
000AA842                            		even
000AA842                            SoundCA:	incbin	sound\soundCA.bin
000AA870                            		even
000AA870                            SoundCB:	incbin	sound\soundCB.bin
000AA8BC                            		even
000AA8BC                            SoundCC:	incbin	sound\C9.ssf
000AA8EA                            		even
000AA8EA                            SoundCD:	incbin	sound\soundCD.bin
000AA916                            		even
000AA916                            SoundCE:	incbin	sound\soundCE.bin
000AA934 00                         		even
000AA934                            SoundCF:	incbin	sound\soundCF.bin
000AA96C                            		even
000AA96C                            SoundD0:	incbin	sound\soundD0.bin
000AA9A6                            		even
000AA9A6                            SegaPCM:	incbin	sound\segapcm.bin
000C4AFC                            SegaPCM_end:
000C4AFC                            	even
000C4AFC                            
000C4AFC                            IdiotPCM:	incbin	sound\youare.bin
000CEBCD                            IdiotPCM_end:
000CEBCE 00                         	even
000CEBCE                            
000CEBCE                            Minecraft:	include	minecraft\code\main.asm
000CEBCE                            ; Minecraft: Very Legacy Console Edition
000CEBCE                            ; Main file
000CEBCE                            
000CEBCE                            ;	align	$20000
000CEBCE                            	opt	l.
000CEBCE                            	include	"minecraft\code\variables.asm"
000CEBCE                            ; Minecraft: Very Legacy Console Edition
000CEBCE                            ; Variable Definitions
000CEBCE                            
000CEBCE =00000040                  MAP_HEIGHT	equ	64
000CEBCE =00000100                  MAP_WIDTH	equ	256
000CEBCE                            
000CEBCE                            		rsset	$FF0000
000CEBCE =00FF0000                  mcRAM		rs.b	0
000CEBCE =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000CEBCE =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000CEBCE                            
000CEBCE                            		rsset	$FFFF8000
000CEBCE =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000CEBCE =FFFF8E80                  planeBuffer_End	rs.b	0
000CEBCE =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000CEBCE                            
000CEBCE =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000CEBCE =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000CEBCE =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000CEBCE =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000CEBCE                            
000CEBCE                            		rsset	__rs&$FFFFFF
000CEBCE =00FF8E88                  mcRAM_End	rs.b	0
000CEBCE =00FF8E88                  mcRAM_End	rs.b	0
000CEBCE                            	include	"minecraft\code\macros.asm"
000CEBCE                            ; =========================================================================================================================================================
000CEBCE                            ; MegaDrive macros
000CEBCE                            ; =========================================================================================================================================================
000CEBCE                            clrRAM		macro	starta, enda
000CEBCE                            		local	endaddr
000CEBCE                            		if narg<2
000CEBCE                            endaddr			EQUS	"\starta\_End"
000CEBCE                            		else
000CEBCE                            endaddr			EQUS	"\enda"
000CEBCE                            		endif
000CEBCE                            
000CEBCE                            		moveq	#0,d0
000CEBCE                            
000CEBCE                            		if ((\starta)&$8000)=0
000CEBCE                            			lea	\starta,a1
000CEBCE                            		else
000CEBCE                            			lea	(\starta).w,a1
000CEBCE                            		endif
000CEBCE                            		if (\starta)&1
000CEBCE                            			move.b	d0,(a1)+
000CEBCE                            		endif
000CEBCE                            
000CEBCE                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000CEBCE                            .Clear\@:	move.l	d0,(a1)+
000CEBCE                            		dbf	d1,.Clear\@
000CEBCE                            
000CEBCE                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000CEBCE                            			move.w	d0,(a1)+
000CEBCE                            		endif
000CEBCE                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000CEBCE                            			move.b	d0,(a1)+
000CEBCE                            		endif
000CEBCE                            		endm
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; Disable interrupts
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; ARGUMENTS:
000CEBCE                            ;	Nothing
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; RETURNS:
000CEBCE                            ;	Nothing
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            intsOff		macros
000CEBCE                            		ori	#$700,sr
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; Enable interrupts
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; ARGUMENTS:
000CEBCE                            ;	Nothing
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; RETURNS:
000CEBCE                            ;	Nothing
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            intsOn		macros
000CEBCE                            		andi	#$F8FF,sr
000CEBCE                            
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; VDP command instruction
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; ARGUMENTS:
000CEBCE                            ;	addr	- Address in VDP memory
000CEBCE                            ;	type	- Type of VDP memory
000CEBCE                            ;	rwd	- VDP command
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; RETURNS:
000CEBCE                            ;	Nothing
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE =00000021                  VRAM		EQU	%100001		; VRAM
000CEBCE =0000002B                  CRAM		EQU	%101011		; CRAM
000CEBCE =00000025                  VSRAM		EQU	%100101		; VSRAM
000CEBCE =0000000C                  READ		EQU	%001100		; VDP read
000CEBCE =00000007                  WRITE		EQU	%000111		; VDP write
000CEBCE =00000027                  DMA		EQU	%100111		; VDP DMA
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000CEBCE                            		if narg=5
000CEBCE                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000CEBCE                            		elseif narg>=6
000CEBCE                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000CEBCE                            		else
000CEBCE                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000CEBCE                            		endif
000CEBCE                            		endm
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; VDP DMA from 68000 memory to VDP memory
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; ARGUMENTS:
000CEBCE                            ;	src	- Source address in 68000 memory
000CEBCE                            ;	dest	- Destination address in VDP memory
000CEBCE                            ;	len	- Length of data in bytes
000CEBCE                            ;	type	- Type of VDP memory
000CEBCE                            ;	a6.l	- VDP control port
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; RETURNS:
000CEBCE                            ;	Nothing
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            dma68k		macro	src, dest, len, type
000CEBCE                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000CEBCE                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000CEBCE                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000CEBCE                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000CEBCE                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000CEBCE                            		move.w	(sp)+,(a6)
000CEBCE                            		endm
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; Fill VRAM with byte
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; ARGUMENTS:
000CEBCE                            ;	byte	- Byte to fill VRAM with
000CEBCE                            ;	addr	- Address in VRAM
000CEBCE                            ;	len	- Length of fill in bytes
000CEBCE                            ;	a6.l	- VDP control port
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; RETURNS:
000CEBCE                            ;	Nothing
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            dmaFill		macro	byte, addr, len
000CEBCE                            		move.w	#$8F01,(a6)
000CEBCE                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CEBCE                            		move.w	#$9780,(a6)
000CEBCE                            		move.l	#$40000080|(((\addr)&$3FFF)<<16)|(((\addr)&$C000)>>14),(a6)
000CEBCE                            		move.w	#(\byte)<<8,-4(a6)
000CEBCE                            		waitDMA	(a6)
000CEBCE                            		move.w	#$8F02,(a6)
000CEBCE                            		endm
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; Copy a region of VRAM to a location in VRAM
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; ARGUMENTS:
000CEBCE                            ;	src	- Source address in VRAM
000CEBCE                            ;	dest	- Destination address in VRAM
000CEBCE                            ;	len	- Length of copy in bytes
000CEBCE                            ;	a6.l	- VDP control port
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            ; RETURNS:
000CEBCE                            ;	Nothing
000CEBCE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEBCE                            dmaCopy		macro	src, dest, len
000CEBCE                            		move.w	#$8F01,(a6)
000CEBCE                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CEBCE                            		move.l	#$96009500|(((\src)&$FF00)<<8)|((\src)&$FF),(a6)
000CEBCE                            		move.w	#$97C0,(a6)
000CEBCE                            		move.l	#$000000C0|(((\dest)&$3FFF)<<16)|(((\dest)&$C000)>>14),(a6)
000CEBCE                            		waitDMA	(a6)
000CEBCE                            		move.w	#$8F02,(a6)
000CEBCE                            		endm
000CEBCE                            		endm
000CEBCE                            
000CEBCE                            MC_Init:
000CEBCE 007C 0700                  		intsOff						; disable CPU interrupts
000CEBD2 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000CEBDA                            
000CEBDA 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000CEBE0 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000CEBE4                            
000CEBE4 3CBC 8230                  		move.w	#$8200+($C000>>10),(a6)			; set plane A address
000CEBE8 3CBC 8334                  		move.w	#$8300+($D000>>10),(a6)			; set plane W address
000CEBEC 3CBC 8407                  		move.w	#$8400+($E000>>13),(a6)			; set plane B address
000CEBF0 3CBC 857C                  		move.w	#$8500+($F800>>9),(a6)			; set sprite table address
000CEBF4                            		
000CEBF4 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
000CEBF8 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000CEBFC 3CBC 8D3F                  		move.w	#$8D00+($FC00>>10),(a6)			; set HScroll table address
000CEC00 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CEC04 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000CEC08                            
000CEC1A 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000CEC1E                            
000CEC1E                            .waitVBlank:	
000CEC1E 44D6                       		move.w	(a6),ccr				; is v-blank active?
000CEC20 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000CEC22                            
000CEC56                            
000CEC56 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000CEC5A 027C F8FF                  		intsOn						; enable CPU interrupts
000CEC5E                            
000CEC5E 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CEC62 43F8 8000                  		lea	(planeBuffer).w,a1
000CEC66 7E2E                       		moveq	#$2F-1,d7
000CEC68                            
000CEC68                            .loopLo:
000CEC68 32D8                       		move.w	(a0)+,(a1)+
000CEC6A 51CF FFFC                  		dbf	d7,.loopLo
000CEC6E                            
000CEC6E 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CEC72 43F8 8080                  		lea	(planeBuffer+(64*2)).w,a1
000CEC76 7E2E                       		moveq	#$2F-1,d7
000CEC78                            
000CEC78                            .loopHi:
000CEC78 303C 8000                  		move.w	#$8000,d0
000CEC7C 8058                       		or.w	(a0)+,d0
000CEC7E 32C0                       		move.w	d0,(a1)+
000CEC80 51CF FFF6                  		dbf	d7,.loopHi
000CEC84                            
000CEC84 6000 FFFE                  		bra.w	*					; spin infinitely
000CEC88                            
000CEC88                            ; ===========================================================================
000CEC88                            ; ---------------------------------------------------------------------------
000CEC88                            ; Clear The Screen
000CEC88                            ; ---------------------------------------------------------------------------
000CEC88                            MC_ClearScreen:
000CEC88 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000CEC8C                            
000CEC8C 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000CEC92 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CEC96 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000CEC9C 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CECA2                            
000CECA2 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CECA4 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000CECA6                            
000CECA6 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000CECAC 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CECB0 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000CECB6 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CECBC                            
000CECBC 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CECBE 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000CECC0                            
000CECC0 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000CECC6 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CECCA 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000CECD0 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CECD6                            
000CECD6 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CECD8 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000CECDA                            
000CECDA 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CECDE 4E75                       		rts						; return
000CECE0                            ; ---------------------------------------------------------------------------
000CECE0                            
000CECE0                            ; ===========================================================================
000CECE0                            ; ---------------------------------------------------------------------------
000CECE0                            ; VBlank Interrupt
000CECE0                            ; ---------------------------------------------------------------------------
000CECE0                            MC_VInt:
000CECFA                            
000CECFA 5278 8E80                  		addq.w	#1,(camXPosFG).w			; update scrolling
000CED04 3D78 8E80 FFFC             		move.w	(camXPosFG).w,-4(a6)			; ^
000CED0A                            
000CED0A                            
000CED0A 4E73                       		rte						; return
000CED0C                            ; ---------------------------------------------------------------------------
000CED0C                            
000CED0C                            block_entry	macro	tileID, palLine, priority
000CED0C                            	if (narg<3)
000CED0C                            		dc.w	(palLine<<13)|tileID
000CED0C                            	else
000CED0C                            		dc.w	$8000|(palLine<<13)|tileID
000CED0C                            	endif
000CED0C                            		endm
000CED0C                            
000CED0C                            MC_BlockRender:
000CED4C                            
000CED6A                            
000CED6A                            ; ---------------------------------------------------------------------------
000CED6A                            MC_Palette:
000CED6A 0E86 08AE 068E 046C 0EE0+  	dc.w	$E86, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000CED8A 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000CEDAA 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000CEDCA 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CEDEA                            ; ---------------------------------------------------------------------------
000CEDEA                            MC_Terrain:
000CEDEA                            	incbin	"minecraft\assets\bin\terrain.bin"
000CF26A                            MC_Terrain_End:
000CF26A                            ; ---------------------------------------------------------------------------
000CF26A                            ; ---------------------------------------------------------------------------
000CF26A                            ; end of 'ROM'
000CF26A                            EndOfRom:
000CF26A                            
000CF26A                            
